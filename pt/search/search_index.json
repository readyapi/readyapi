{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ReadyAPI","text":"<p> Framework ReadyAPI, alta performance, f\u00e1cil de aprender, f\u00e1cil de codar, pronto para produ\u00e7\u00e3o </p> <p> </p> <p>Documenta\u00e7\u00e3o: https://readyapi.github.io</p> <p>C\u00f3digo fonte: https://github.com/readyapi/readyapi</p> <p>ReadyAPI \u00e9 um moderno e r\u00e1pido (alta performance) framework web para constru\u00e7\u00e3o de APIs com Python, baseado nos type hints padr\u00f5es do Python.</p> <p>Os recursos chave s\u00e3o:</p> <ul> <li>R\u00e1pido: alta performance, equivalente a NodeJS e Go (gra\u00e7as ao Starlette e Pydantic). Um dos frameworks mais r\u00e1pidos dispon\u00edveis.</li> <li>R\u00e1pido para codar: Aumenta a velocidade para desenvolver recursos entre 200% a 300%. *</li> <li>Poucos bugs: Reduz cerca de 40% de erros induzidos por humanos (desenvolvedores). *</li> <li>Intuitivo: Grande suporte a IDEs. Auto-Complete em todos os lugares. Menos tempo debugando.</li> <li>F\u00e1cil: Projetado para ser f\u00e1cil de aprender e usar. Menos tempo lendo documenta\u00e7\u00e3o.</li> <li>Enxuto: Minimize duplica\u00e7\u00e3o de c\u00f3digo. M\u00faltiplos recursos para cada declara\u00e7\u00e3o de par\u00e2metro. Menos bugs.</li> <li>Robusto: Tenha c\u00f3digo pronto para produ\u00e7\u00e3o. E com documenta\u00e7\u00e3o interativa autom\u00e1tica.</li> <li>Baseado em padr\u00f5es: Baseado em (e totalmente compat\u00edvel com) os padr\u00f5es abertos para APIs: OpenAPI (anteriormente conhecido como Swagger) e JSON Schema.</li> </ul> <p>* estimativas baseadas em testes realizados com equipe interna de desenvolvimento, construindo aplica\u00e7\u00f5es em produ\u00e7\u00e3o.</p>"},{"location":"#patrocinadores-ouro","title":"Patrocinadores Ouro","text":"<p>Outros patrocinadores</p>"},{"location":"#opinioes","title":"Opini\u00f5es","text":"<p>\"[...] Estou usando ReadyAPI muito esses dias. [...] Estou na verdade planejando utilizar ele em todos os times de servi\u00e7os Machine Learning na Microsoft. Alguns deles est\u00e3o sendo integrados no core do produto Windows e alguns produtos Office.\"</p> Kabir Khan - Microsoft (ref) <p>\"N\u00f3s adotamos a biblioteca ReadyAPI para iniciar um servidor REST que pode ser consultado para obter previs\u00f5es. [para o Ludwig]\"</p> Piero Molino, Yaroslav Dudin, e Sai Sumanth Miryala - Uber (ref) <p>\"A Netflix tem o prazer de anunciar o lan\u00e7amento open-source do nosso framework de orquestra\u00e7\u00e3o de gerenciamento de crises: Dispatch! [criado com ReadyAPI]\"</p> Kevin Glisson, Marc Vilanova, Forest Monsen - Netflix (ref) <p>\"Estou extremamente entusiasmado com o ReadyAPI. \u00c9 t\u00e3o divertido!\"</p> Brian Okken - Python Bytes podcaster (ref) <p>\"Honestamente, o que voc\u00ea construiu parece super s\u00f3lido e rebuscado. De muitas formas, eu queria que o Hug fosse assim - \u00e9 realmente inspirador ver algu\u00e9m que construiu ele.\"</p> Timothy Crosley - criador doHug (ref) <p>\"Se voc\u00ea est\u00e1 procurando aprender um framework moderno para construir aplica\u00e7\u00f5es REST, d\u00ea uma olhada no ReadyAPI [...] \u00c9 r\u00e1pido, f\u00e1cil de usar e f\u00e1cil de aprender [...]\"</p> <p>\"N\u00f3s trocamos nossas APIs por ReadyAPI [...] Acredito que voc\u00eas gostar\u00e3o dele [...]\"</p> Ines Montani - Matthew Honnibal - fundadores da Explosion AI - criadores da spaCy (ref) - (ref) <p>\"Se algu\u00e9m estiver procurando construir uma API Python para produ\u00e7\u00e3o, eu recomendaria fortemente o ReadyAPI. Ele \u00e9 lindamente projetado, simples de usar e altamente escal\u00e1vel. Ele se tornou um componente chave para a nossa estrat\u00e9gia API first de desenvolvimento e est\u00e1 impulsionando diversas automa\u00e7\u00f5es e servi\u00e7os, como o nosso Virtual TAC Engineer.\"</p> Deon Pillsbury - Cisco (ref)"},{"location":"#cligenius-o-readyapi-das-interfaces-de-linhas-de-comando","title":"Cligenius, o ReadyAPI das interfaces de linhas de comando","text":"<p>Se voc\u00ea estiver construindo uma aplica\u00e7\u00e3o CLI para ser utilizada em um terminal ao inv\u00e9s de uma aplica\u00e7\u00e3o web, d\u00ea uma olhada no Cligenius.</p> <p>Cligenius \u00e9 o irm\u00e3o menor do ReadyAPI. E seu prop\u00f3sito \u00e9 ser o ReadyAPI das CLIs. \u2328\ufe0f \ud83d\ude80</p>"},{"location":"#requisitos","title":"Requisitos","text":"<p>ReadyAPI est\u00e1 nos ombros de gigantes:</p> <ul> <li>Starlette para as partes web.</li> <li>Pydantic para a parte de dados.</li> </ul>"},{"location":"#instalacao","title":"Instala\u00e7\u00e3o","text":"<p>Crie e ative um ambiente virtual, e ent\u00e3o instale o ReadyAPI:</p> <pre><code>$ pip install \"readyapi[standard]\"\n\n---&gt; 100%\n</code></pre> <p>Nota: Certifique-se de que voc\u00ea colocou <code>\"readyapi[standard]\"</code> com aspas, para garantir que funcione em todos os terminais.</p>"},{"location":"#exemplo","title":"Exemplo","text":""},{"location":"#crie","title":"Crie","text":"<ul> <li>Crie um arquivo <code>main.py</code> com:</li> </ul> <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n</code></pre> Ou use <code>async def</code>... <p>Se seu c\u00f3digo utiliza <code>async</code> / <code>await</code>, use <code>async def</code>:</p> <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n</code></pre> <p>Nota:</p> <p>Se voc\u00ea n\u00e3o sabe, verifique a se\u00e7\u00e3o \"Com pressa?\" sobre <code>async</code> e <code>await</code> nas docs.</p>"},{"location":"#rode","title":"Rode","text":"<p>Rode o servidor com:</p> <pre><code>$ readyapi dev main.py\n\n \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 ReadyAPI CLI - Development mode \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n \u2502                                                     \u2502\n \u2502  Serving at: http://127.0.0.1:8000                  \u2502\n \u2502                                                     \u2502\n \u2502  API docs: http://127.0.0.1:8000/docs               \u2502\n \u2502                                                     \u2502\n \u2502  Running in development mode, for production use:   \u2502\n \u2502                                                     \u2502\n \u2502  readyapi run                                        \u2502\n \u2502                                                     \u2502\n \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\nINFO:     Will watch for changes in these directories: ['/home/user/code/awesomeapp']\nINFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\nINFO:     Started reloader process [2248755] using WatchFiles\nINFO:     Started server process [2248757]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\n</code></pre> Sobre o comando <code>readyapi dev main.py</code>... <p>O comando <code>readyapi dev</code> l\u00ea o seu arquivo <code>main.py</code>, identifica o aplicativo ReadyAPI nele, e inicia um servidor usando o Uvicorn.</p> <p>Por padr\u00e3o, o <code>readyapi dev</code> iniciar\u00e1 com auto-reload habilitado para desenvolvimento local.</p> <p>Voc\u00ea pode ler mais sobre isso na documenta\u00e7\u00e3o do ReadyAPI CLI.</p>"},{"location":"#verifique","title":"Verifique","text":"<p>Abra seu navegador em http://127.0.0.1:8000/items/5?q=somequery.</p> <p>Voc\u00ea ver\u00e1 a resposta JSON como:</p> <pre><code>{\"item_id\": 5, \"q\": \"somequery\"}\n</code></pre> <p>Voc\u00ea acabou de criar uma API que:</p> <ul> <li>Recebe requisi\u00e7\u00f5es HTTP nas rotas <code>/</code> e <code>/items/{item_id}</code>.</li> <li>Ambas rotas fazem opera\u00e7\u00f5es <code>GET</code> (tamb\u00e9m conhecido como m\u00e9todos HTTP).</li> <li>A rota <code>/items/{item_id}</code> tem um par\u00e2metro de rota <code>item_id</code> que deve ser um <code>int</code>.</li> <li>A rota <code>/items/{item_id}</code> tem um par\u00e2metro query <code>q</code> <code>str</code> opcional.</li> </ul>"},{"location":"#documentacao-interativa-da-api","title":"Documenta\u00e7\u00e3o Interativa da API","text":"<p>Agora v\u00e1 para http://127.0.0.1:8000/docs.</p> <p>Voc\u00ea ver\u00e1 a documenta\u00e7\u00e3o autom\u00e1tica interativa da API (fornecida por Swagger UI):</p> <p></p>"},{"location":"#documentacao-alternativa-da-api","title":"Documenta\u00e7\u00e3o Alternativa da API","text":"<p>E agora, v\u00e1 para http://127.0.0.1:8000/redoc.</p> <p>Voc\u00ea ver\u00e1 a documenta\u00e7\u00e3o autom\u00e1tica alternativa (fornecida por ReDoc):</p> <p></p>"},{"location":"#evoluindo-o-exemplo","title":"Evoluindo o Exemplo","text":"<p>Agora modifique o arquivo <code>main.py</code> para receber um corpo para uma requisi\u00e7\u00e3o <code>PUT</code>.</p> <p>Declare o corpo utilizando tipos padr\u00e3o Python, gra\u00e7as ao Pydantic.</p> <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI\nfrom pydantic import BaseModel\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n    is_offer: Union[bool, None] = None\n\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n\n\n@app.put(\"/items/{item_id}\")\ndef update_item(item_id: int, item: Item):\n    return {\"item_name\": item.name, \"item_id\": item_id}\n</code></pre> <p>O servidor <code>readyapi dev</code> dever\u00e1 recarregar automaticamente.</p>"},{"location":"#evoluindo-a-documentacao-interativa-da-api","title":"Evoluindo a Documenta\u00e7\u00e3o Interativa da API","text":"<p>Agora v\u00e1 para http://127.0.0.1:8000/docs.</p> <ul> <li>A documenta\u00e7\u00e3o interativa da API ser\u00e1 automaticamente atualizada, incluindo o novo corpo:</li> </ul> <p></p> <ul> <li>Clique no bot\u00e3o \"Try it out\", ele permitir\u00e1 que voc\u00ea preencha os par\u00e2metros e interaja diretamente com a API:</li> </ul> <p></p> <ul> <li>Ent\u00e3o clique no bot\u00e3o \"Execute\", a interface do usu\u00e1rio ir\u00e1 se comunicar com a API, enviar os par\u00e2metros, pegar os resultados e mostr\u00e1-los na tela:</li> </ul> <p></p>"},{"location":"#evoluindo-a-documentacao-alternativa-da-api","title":"Evoluindo a Documenta\u00e7\u00e3o Alternativa da API","text":"<p>E agora, v\u00e1 para http://127.0.0.1:8000/redoc.</p> <ul> <li>A documenta\u00e7\u00e3o alternativa tamb\u00e9m ir\u00e1 refletir o novo par\u00e2metro da query e o corpo:</li> </ul> <p></p>"},{"location":"#recapitulando","title":"Recapitulando","text":"<p>Resumindo, voc\u00ea declara uma vez os tipos dos par\u00e2metros, corpo etc. como par\u00e2metros de fun\u00e7\u00e3o.</p> <p>Voc\u00ea faz isso com os tipos padr\u00e3o do Python moderno.</p> <p>Voc\u00ea n\u00e3o ter\u00e1 que aprender uma nova sintaxe, m\u00e9todos ou classes de uma biblioteca espec\u00edfica etc.</p> <p>Apenas Python padr\u00e3o.</p> <p>Por exemplo, para um <code>int</code>:</p> <pre><code>item_id: int\n</code></pre> <p>ou para um modelo mais complexo, <code>Item</code>:</p> <pre><code>item: Item\n</code></pre> <p>...e com essa \u00fanica declara\u00e7\u00e3o voc\u00ea tem:</p> <ul> <li>Suporte ao Editor, incluindo:<ul> <li>Completa\u00e7\u00e3o.</li> <li>Verifica\u00e7\u00e3o de tipos.</li> </ul> </li> <li>Valida\u00e7\u00e3o de dados:<ul> <li>Erros autom\u00e1ticos e claros quando o dado \u00e9 inv\u00e1lido.</li> <li>Valida\u00e7\u00e3o at\u00e9 para objetos JSON profundamente aninhados.</li> </ul> </li> <li>Convers\u00e3o de dados de entrada: vindo da rede para dados e tipos Python. Consegue ler:<ul> <li>JSON.</li> <li>Par\u00e2metros de rota.</li> <li>Par\u00e2metros de query .</li> <li>Cookies.</li> <li>Cabe\u00e7alhos.</li> <li>Formul\u00e1rios.</li> <li>Arquivos.</li> </ul> </li> <li>Convers\u00e3o de dados de sa\u00edda de tipos e dados Python para dados de rede (como JSON):<ul> <li>Converte tipos Python (<code>str</code>, <code>int</code>, <code>float</code>, <code>bool</code>, <code>list</code> etc).</li> <li>Objetos <code>datetime</code>.</li> <li>Objetos <code>UUID</code>.</li> <li>Modelos de Banco de Dados.</li> <li>...e muito mais.</li> </ul> </li> <li>Documenta\u00e7\u00e3o interativa autom\u00e1tica da API, incluindo 2 alternativas de interface de usu\u00e1rio:<ul> <li>Swagger UI.</li> <li>ReDoc.</li> </ul> </li> </ul> <p>Voltando ao c\u00f3digo do exemplo anterior, ReadyAPI ir\u00e1:</p> <ul> <li>Validar que existe um <code>item_id</code> na rota para requisi\u00e7\u00f5es <code>GET</code> e <code>PUT</code>.</li> <li>Validar que <code>item_id</code> \u00e9 do tipo <code>int</code> para requisi\u00e7\u00f5es <code>GET</code> e <code>PUT</code>.<ul> <li>Se n\u00e3o \u00e9 validado, o cliente ver\u00e1 um \u00fatil, claro erro.</li> </ul> </li> <li>Verificar se existe um par\u00e2metro de query opcional nomeado como <code>q</code> (como em <code>http://127.0.0.1:8000/items/foo?q=somequery</code>) para requisi\u00e7\u00f5es <code>GET</code>.<ul> <li>Como o par\u00e2metro <code>q</code> \u00e9 declarado com <code>= None</code>, ele \u00e9 opcional.</li> <li>Sem o <code>None</code> ele poderia ser obrigat\u00f3rio (como o corpo no caso de <code>PUT</code>).</li> </ul> </li> <li>Para requisi\u00e7\u00f5es <code>PUT</code> para <code>/items/{item_id}</code>, ler\u00e1 o corpo como JSON e:<ul> <li>Verifica que tem um atributo obrigat\u00f3rio <code>name</code> que deve ser <code>str</code>.</li> <li>Verifica que tem um atributo obrigat\u00f3rio <code>price</code> que deve ser <code>float</code>.</li> <li>Verifica que tem an atributo opcional <code>is_offer</code>, que deve ser <code>bool</code>, se presente.</li> <li>Tudo isso tamb\u00e9m funciona para objetos JSON profundamente aninhados.</li> </ul> </li> <li>Converter de e para JSON automaticamente.</li> <li>Documentar tudo com OpenAPI, que poder\u00e1 ser usado por:<ul> <li>Sistemas de documenta\u00e7\u00e3o interativos.</li> <li>Sistemas de clientes de gera\u00e7\u00e3o de c\u00f3digo autom\u00e1ticos, para muitas linguagens.</li> </ul> </li> <li>Fornecer diretamente 2 interfaces web de documenta\u00e7\u00e3o interativa.</li> </ul> <p>N\u00f3s apenas arranhamos a superf\u00edcie, mas voc\u00ea j\u00e1 tem id\u00e9ia de como tudo funciona.</p> <p>Experimente mudar a seguinte linha:</p> <pre><code>    return {\"item_name\": item.name, \"item_id\": item_id}\n</code></pre> <p>...de:</p> <pre><code>        ... \"item_name\": item.name ...\n</code></pre> <p>...para:</p> <pre><code>        ... \"item_price\": item.price ...\n</code></pre> <p>...e veja como seu editor ir\u00e1 auto-completar os atributos e saber\u00e1 os tipos:</p> <p></p> <p>Para um exemplo mais completo incluindo mais recursos, veja Tutorial - Guia do Usu\u00e1rio.</p> <p>Alerta de Spoiler: o tutorial - guia do usu\u00e1rio inclui:</p> <ul> <li>Declara\u00e7\u00e3o de par\u00e2metetros de diferentes lugares como: cabe\u00e7alhos, cookies, campos de formul\u00e1rios e arquivos.</li> <li>Como configurar Limita\u00e7\u00f5es de Valida\u00e7\u00e3o como <code>maximum_length</code> ou <code>regex</code>.</li> <li>Um poderoso e f\u00e1cil de usar sistema de Inje\u00e7\u00e3o de Depend\u00eancia.</li> <li>Seguran\u00e7a e autentica\u00e7\u00e3o, incluindo suporte para OAuth2 com autentica\u00e7\u00e3o JWT tokens e HTTP Basic.</li> <li>T\u00e9cnicas mais avan\u00e7adas (mas igualmente f\u00e1ceis) para declara\u00e7\u00e3o de modelos JSON profundamente aninhados (gra\u00e7as ao Pydantic).</li> <li>Integra\u00e7\u00f5es GraphQL com o Strawberry e outras bibliotecas.</li> <li>Muitos recursos extras (gra\u00e7as ao Starlette) como:<ul> <li>WebSockets</li> <li>testes extrememamente f\u00e1ceis baseados em HTTPX e <code>pytest</code></li> <li>CORS</li> <li>Cookie Sessions</li> <li>...e mais.</li> </ul> </li> </ul>"},{"location":"#performance","title":"Performance","text":"<p>Testes de performance da Independent TechEmpower mostram aplica\u00e7\u00f5es ReadyAPI rodando sob Uvicorn como um dos frameworks Python mais r\u00e1pidos dispon\u00edveis, somente atr\u00e1s de Starlette e Uvicorn (utilizados internamente pelo ReadyAPI). (*)</p> <p>Para entender mais sobre performance, veja a se\u00e7\u00e3o Compara\u00e7\u00f5es.</p>"},{"location":"#dependencias","title":"Depend\u00eancias","text":"<p>O ReadyAPI depende do Pydantic e do Starlette.</p>"},{"location":"#dependencias-standard","title":"Depend\u00eancias <code>standard</code>","text":"<p>Quando voc\u00ea instala o ReadyAPI com <code>pip install \"readyapi[standard]\"</code>, ele v\u00eam com o grupo <code>standard</code> (padr\u00e3o) de depend\u00eancias opcionais:</p> <p>Utilizado pelo Pydantic:</p> <ul> <li><code>email-validator</code> - para valida\u00e7\u00e3o de email.</li> </ul> <p>Utilizado pelo Starlette:</p> <ul> <li><code>httpx</code> - Obrigat\u00f3rio caso voc\u00ea queira utilizar o <code>TestClient</code>.</li> <li><code>jinja2</code> - Obrigat\u00f3rio se voc\u00ea quer utilizar a configura\u00e7\u00e3o padr\u00e3o de templates.</li> <li><code>python-multipart</code> - Obrigat\u00f3rio se voc\u00ea deseja suporte a \"parsing\" de formul\u00e1rio, com <code>request.form()</code>.</li> </ul> <p>Utilizado pelo ReadyAPI / Starlette:</p> <ul> <li><code>uvicorn</code> - para o servidor que carrega e serve a sua aplica\u00e7\u00e3o. Isto inclui <code>uvicorn[standard]</code>, que inclui algumas depend\u00eancias (e.g. <code>uvloop</code>) necess\u00e1rias para servir em alta performance.</li> <li><code>readyapi-cli</code> - que disponibiliza o comando <code>readyapi</code>.</li> </ul>"},{"location":"#sem-as-dependencias-standard","title":"Sem as depend\u00eancias <code>standard</code>","text":"<p>Se voc\u00ea n\u00e3o deseja incluir as depend\u00eancias opcionais <code>standard</code>, voc\u00ea pode instalar utilizando <code>pip install readyapi</code> ao inv\u00e9s de <code>pip install \"readyapi[standard]\"</code>.</p>"},{"location":"#dpendencias-opcionais-adicionais","title":"Dpend\u00eancias opcionais adicionais","text":"<p>Existem algumas depend\u00eancias adicionais que voc\u00ea pode querer instalar.</p> <p>Depend\u00eancias opcionais adicionais do Pydantic:</p> <ul> <li><code>pydantic-settings</code> - para gerenciamento de configura\u00e7\u00f5es.</li> <li><code>pydantic-extra-types</code> - tipos extras para serem utilizados com o Pydantic.</li> </ul> <p>Depend\u00eancias opcionais adicionais do ReadyAPI:</p> <ul> <li><code>orjson</code> - Obrigat\u00f3rio se voc\u00ea deseja utilizar o <code>ORJSONResponse</code>.</li> <li><code>ujson</code> - Obrigat\u00f3rio se voc\u00ea deseja utilizar o <code>UJSONResponse</code>.</li> </ul>"},{"location":"#licenca","title":"Licen\u00e7a","text":"<p>Esse projeto \u00e9 licenciado sob os termos da licen\u00e7a MIT.</p>"},{"location":"alternatives/","title":"Alternativas, Inspira\u00e7\u00e3o e Compara\u00e7\u00f5es","text":"<p>O que inspirou o ReadyAPI, como ele se compara \u00e0s alternativas e o que ReadyAPI aprendeu delas.</p>"},{"location":"alternatives/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>ReadyAPI n\u00e3o poderia existir se n\u00e3o fosse pelos trabalhos anteriores de outras pessoas.</p> <p>Houveram tantas ferramentas criadas que ajudaram a inspirar sua cria\u00e7\u00e3o.</p> <p>Tenho evitado criar um novo framework por anos. Primeiramente tentei resolver todos os recursos cobertos pelo ReadyAPI utilizando muitos frameworks diferentes, plug-ins e ferramentas.</p> <p>Mas em algum ponto, n\u00e3o houve outra op\u00e7\u00e3o sen\u00e3o criar algo que fornecesse todos esses recursos, pegando as melhores id\u00e9ias de ferramentas anteriores, e combinando eles da melhor forma poss\u00edvel, utilizando recursos da linguagem que n\u00e3o estavam dispon\u00edveis antes (Type Hints no Python 3.6+).</p>"},{"location":"alternatives/#ferramentas-anteriores","title":"Ferramentas anteriores","text":""},{"location":"alternatives/#django","title":"Django","text":"<p>\u00c9 o framework mais popular e largamente confi\u00e1vel. \u00c9 utilizado para construir sistemas como o Instagram.</p> <p>\u00c9 bem acoplado com banco de dados relacional (como MySQL ou PostgreSQL), ent\u00e3o, tendo um banco de dados NoSQL (como Couchbase, MongoDB, Cassandra etc) como a principal ferramenta de armazenamento n\u00e3o \u00e9 muito f\u00e1cil.</p> <p>Foi criado para gerar HTML no backend, n\u00e3o para criar APIs utilizando um frontend moderno (como React, Vue.js e Angular) ou por outros sistemas (como dispositivos IoT) comunicando com ele.</p>"},{"location":"alternatives/#django-rest-framework","title":"Django REST Framework","text":"<p>Django REST framework foi criado para ser uma caixa de ferramentas flex\u00edvel para constru\u00e7\u00e3o de APIs web utilizando Django por baixo, para melhorar suas capacidades de API.</p> <p>Ele \u00e9 utilizado por muitas companhias incluindo Mozilla, Red Hat e Eventbrite.</p> <p>Ele foi um dos primeiros exemplos de documenta\u00e7\u00e3o autom\u00e1tica de API, e essa foi especificamente uma das primeiras id\u00e9ias que inspirou \"a busca por\" ReadyAPI.</p> <p>Nota</p> <p>Django REST Framework foi criado por Tom Christie. O mesmo criador de Starlette e Uvicorn, nos quais ReadyAPI \u00e9 baseado.</p> <p>ReadyAPI inspirado para</p> <p>Ter uma documenta\u00e7\u00e3o autom\u00e1tica da API em interface web.</p>"},{"location":"alternatives/#flask","title":"Flask","text":"<p>Flask \u00e9 um \"microframework\", n\u00e3o inclui integra\u00e7\u00e3o com banco de dados nem muitas das coisas que v\u00eam por padr\u00e3o no Django.</p> <p>Sua simplicidade e flexibilidade permitem fazer coisas como utilizar bancos de dados NoSQL como principal sistema de armazenamento de dados.</p> <p>Por ser t\u00e3o simples, \u00e9 relativamente intuitivo de aprender, embora a documenta\u00e7\u00e3o esteja de forma mais t\u00e9cnica em alguns pontos.</p> <p>Ele \u00e9 comumente utilizado por outras aplica\u00e7\u00f5es que n\u00e3o necessariamente precisam de banco de dados, gerenciamento de usu\u00e1rios, ou algum dos muitos recursos que j\u00e1 vem instalados no Django. Embora muitos desses recursos possam ser adicionados com plug-ins.</p> <p>Esse desacoplamento de partes, e sendo um \"microframework\" que pode ser extendido para cobrir exatamente o que \u00e9 necess\u00e1rio era um recurso chave que eu queria manter.</p> <p>Dada a simplicidade do Flask, parecia uma \u00f3tima op\u00e7\u00e3o para constru\u00e7\u00e3o de APIs. A pr\u00f3xima coisa a procurar era um \"Django REST Framework\" para Flask.</p> <p>ReadyAPI inspirado para</p> <p>Ser um microframework. Fazer ele f\u00e1cil para misturar e combinar com ferramentas e partes necess\u00e1rias.</p> <p>Ser simples e com sistema de roteamento f\u00e1cil de usar.</p>"},{"location":"alternatives/#requests","title":"Requests","text":"<p>ReadyAPI n\u00e3o \u00e9 uma alternativa para Requests. O escopo deles \u00e9 muito diferente.</p> <p>Na verdade \u00e9 comum utilizar Requests dentro de uma aplica\u00e7\u00e3o ReadyAPI.</p> <p>Ainda assim, ReadyAPI pegou alguma inspira\u00e7\u00e3o do Requests.</p> <p>Requests \u00e9 uma biblioteca para interagir com APIs (como um cliente), enquanto ReadyAPI \u00e9 uma biblioteca para construir APIs (como um servidor).</p> <p>Eles est\u00e3o, mais ou menos, em pontas opostas, um complementando o outro.</p> <p>Requests tem um projeto muito simples e intuitivo, f\u00e1cil de usar, com padr\u00f5es sens\u00edveis. Mas ao mesmo tempo, \u00e9 muito poderoso e customiz\u00e1vel.</p> <p>\u00c9 por isso que, como dito no site oficial:</p> <p>Requests \u00e9 um dos pacotes Python mais baixados de todos os tempos</p> <p>O jeito de usar \u00e9 muito simples. Por exemplo, para fazer uma requisi\u00e7\u00e3o <code>GET</code>, voc\u00ea deveria escrever:</p> <pre><code>response = requests.get(\"http://example.com/some/url\")\n</code></pre> <p>A contra-parte da aplica\u00e7\u00e3o ReadyAPI, rota de opera\u00e7\u00e3o, poderia parecer como:</p> <pre><code>@app.get(\"/some/url\")\ndef read_url():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>Veja as similaridades em <code>requests.get(...)</code> e <code>@app.get(...)</code>.</p> <p>ReadyAPI inspirado para</p> <ul> <li>Ter uma API simples e intuitiva.</li> <li>Utilizar nomes de m\u00e9todos HTTP (opera\u00e7\u00f5es) diretamente, de um jeito direto e intuitivo.</li> <li>Ter padr\u00f5es sens\u00edveis, mas customiza\u00e7\u00f5es poderosas.</li> </ul>"},{"location":"alternatives/#swagger-openapi","title":"Swagger / OpenAPI","text":"<p>O principal recurso que eu queria do Django REST Framework era a documenta\u00e7\u00e3o autom\u00e1tica da API.</p> <p>Ent\u00e3o eu descobri que existia um padr\u00e3o para documentar APIs, utilizando JSON (ou YAML, uma extens\u00e3o do JSON) chamado Swagger.</p> <p>E tinha uma interface web para APIs Swagger j\u00e1 criada. Ent\u00e3o, sendo capaz de gerar documenta\u00e7\u00e3o Swagger para uma API poderia permitir utilizar essa interface web automaticamente.</p> <p>Em algum ponto, Swagger foi dado para a Funda\u00e7\u00e3o Linux, e foi renomeado OpenAPI.</p> <p>Isso acontece porqu\u00ea quando algu\u00e9m fala sobre a vers\u00e3o 2.0 \u00e9 comum dizer \"Swagger\", e para a vers\u00e3o 3+, \"OpenAPI\".</p> <p>ReadyAPI inspirado para</p> <p>Adotar e usar um padr\u00e3o aberto para especifica\u00e7\u00f5es API, ao inv\u00e9s de algum esquema customizado.</p> <p>E integrar ferramentas de interface para usu\u00e1rios baseado nos padr\u00f5es:</p> <ul> <li>Swagger UI</li> <li>ReDoc</li> </ul> <p>Esses dois foram escolhidos por serem bem populares e est\u00e1veis, mas fazendo uma pesquisa r\u00e1pida, voc\u00ea pode encontrar d\u00fazias de interfaces alternativas adicionais para OpenAPI (assim voc\u00ea poder\u00e1 utilizar com ReadyAPI).</p>"},{"location":"alternatives/#flask-rest-frameworks","title":"Flask REST frameworks","text":"<p>Existem v\u00e1rios Flask REST frameworks, mas depois de investir tempo e trabalho investigando eles, eu descobri que muitos est\u00e3o descontinuados ou abandonados, com alguns tendo quest\u00f5es que fizeram eles inadequados.</p>"},{"location":"alternatives/#marshmallow","title":"Marshmallow","text":"<p>Um dos principais recursos necess\u00e1rios em sistemas API \u00e9 \"serializa\u00e7\u00e3o\" de dados, que \u00e9 pegar dados do c\u00f3digo (Python) e converter eles em alguma coisa que possa ser enviado atrav\u00e9s da rede. Por exemplo, converter um objeto contendo dados de um banco de dados em um objeto JSON. Converter objetos <code>datetime</code> em strings etc.</p> <p>Outro grande recurso necess\u00e1rio nas APIs \u00e9 valida\u00e7\u00e3o de dados, certificando que os dados s\u00e3o v\u00e1lidos, dados certos par\u00e2metros. Por exemplo, algum campo \u00e9 <code>int</code>, e n\u00e3o alguma string aleat\u00f3ria. Isso \u00e9 especialmente \u00fatil para dados que est\u00e3o chegando.</p> <p>Sem um sistema de valida\u00e7\u00e3o de dados, voc\u00ea teria que realizar todas as verifica\u00e7\u00f5es manualmente, no c\u00f3digo.</p> <p>Esses recursos s\u00e3o o que Marshmallow foi constru\u00eddo para fornecer. Ele \u00e9 uma \u00f3tima biblioteca, e eu j\u00e1 utilizei muito antes.</p> <p>Mas ele foi criado antes da exist\u00eancia do type hints do Python. Ent\u00e3o, para definir todo o schema voc\u00ea precisa utilizar espec\u00edficas ferramentas e classes fornecidas pelo Marshmallow.</p> <p>ReadyAPI inspirado para</p> <p>Usar c\u00f3digo para definir \"schemas\" que forne\u00e7am, automaticamente, tipos de dados e valida\u00e7\u00e3o.</p>"},{"location":"alternatives/#webargs","title":"Webargs","text":"<p>Outro grande recurso necess\u00e1rio pelas APIs \u00e9 a an\u00e1lise de dados vindos de requisi\u00e7\u00f5es.</p> <p>Webargs \u00e9 uma ferramente feita para fornecer o que est\u00e1 no topo de v\u00e1rios frameworks, inclusive Flask.</p> <p>Ele utiliza Marshmallow por baixo para valida\u00e7\u00e3o de dados. E ele foi criado pelos mesmos desenvolvedores.</p> <p>Ele \u00e9 uma grande ferramenta e eu tamb\u00e9m a utilizei muito, antes de ter o ReadyAPI.</p> <p>Info</p> <p>Webargs foi criado pelos mesmos desenvolvedores do Marshmallow.</p> <p>ReadyAPI inspirado para</p> <p>Ter valida\u00e7\u00e3o autom\u00e1tica de dados vindos de requisi\u00e7\u00f5es.</p>"},{"location":"alternatives/#apispec","title":"APISpec","text":"<p>Marshmallow e Webargs fornecem valida\u00e7\u00e3o, an\u00e1lise e serializa\u00e7\u00e3o como plug-ins.</p> <p>Mas a documenta\u00e7\u00e3o ainda est\u00e1 faltando. Ent\u00e3o APISpec foi criado.</p> <p>APISpec tem plug-ins para muitos frameworks (e tem um plug-in para Starlette tamb\u00e9m).</p> <p>O jeito como ele funciona \u00e9 que voc\u00ea escreve a defini\u00e7\u00e3o do schema usando formato YAML dentro da docstring de cada fun\u00e7\u00e3o controlando uma rota.</p> <p>E ele gera schemas OpenAPI.</p> <p>\u00c9 assim como funciona no Flask, Starlette, Responder etc.</p> <p>Mas ent\u00e3o, n\u00f3s temos novamente o problema de ter uma micro-sintaxe, dentro de uma string Python (um grande YAML).</p> <p>O editor n\u00e3o poder\u00e1 ajudar muito com isso. E se n\u00f3s modificarmos os par\u00e2metros dos schemas do Marshmallow e esquecer de modificar tamb\u00e9m aquela docstring YAML, o schema gerado pode ficar obsoleto.</p> <p>Info</p> <p>APISpec foi criado pelos mesmos desenvolvedores do Marshmallow.</p> <p>ReadyAPI inspirado para</p> <p>Dar suporte a padr\u00f5es abertos para APIs, OpenAPI.</p>"},{"location":"alternatives/#flask-apispec","title":"Flask-apispec","text":"<p>\u00c9 um plug-in Flask, que amarra junto Webargs, Marshmallow e APISpec.</p> <p>Ele utiliza a informa\u00e7\u00e3o do Webargs e Marshmallow para gerar automaticamente schemas OpenAPI, usando APISpec.</p> <p>\u00c9 uma grande ferramenta, mas muito subestimada. Ela deveria ser um pouco mais popular do que muitos outros plug-ins Flask. \u00c9 de ser esperado que sua documenta\u00e7\u00e3o seja bem concisa e abstrata.</p> <p>Isso resolveu o problema de ter que escrever YAML (outra sintaxe) dentro das docstrings Python.</p> <p>Essa combina\u00e7\u00e3o de Flask, Flask-apispec com Marshmallow e Webargs foi meu backend stack favorito at\u00e9 construir o ReadyAPI.</p> <p>Usando essa combina\u00e7\u00e3o levou a cria\u00e7\u00e3o de v\u00e1rios geradores Flask full-stack. H\u00e1 muitas stacks que eu (e v\u00e1rios times externos) estou utilizando at\u00e9 agora:</p> <ul> <li>https://github.com/khulnasoft/full-stack</li> <li>https://github.com/khulnasoft/full-stack-flask-couchbase</li> <li>https://github.com/khulnasoft/full-stack-flask-couchdb</li> </ul> <p>E esses mesmos geradores full-stack foram a base dos Geradores de Projetos ReadyAPI.</p> <p>Info</p> <p>Flask-apispec foi criado pelos mesmos desenvolvedores do Marshmallow.</p> <p>ReadyAPI inspirado para</p> <p>Gerar schema OpenAPI automaticamente, a partir do mesmo c\u00f3digo que define serializa\u00e7\u00e3o e valida\u00e7\u00e3o.</p>"},{"location":"alternatives/#nestjs-and-angular","title":"NestJS (and Angular)","text":"<p>NestJS, que n\u00e3o \u00e9 nem Python, \u00e9 um framework NodeJS JavaScript (TypeScript) inspirado pelo Angular.</p> <p>Ele alcan\u00e7a de uma forma similar ao que pode ser feito com o Flask-apispec.</p> <p>Ele tem um sistema de inje\u00e7\u00e3o de depend\u00eancia integrado, inspirado pelo Angular 2. \u00c9 necess\u00e1rio fazer o pr\u00e9-registro dos \"injet\u00e1veis\" (como todos os sistemas de inje\u00e7\u00e3o de depend\u00eancia que conhe\u00e7o), ent\u00e3o, adicionando verbosidade e repeti\u00e7\u00e3o de c\u00f3digo.</p> <p>Como os par\u00e2metros s\u00e3o descritos com tipos TypeScript (similar aos type hints do Python), o suporte ao editor \u00e9 muito bom.</p> <p>Mas como os dados TypeScript n\u00e3o s\u00e3o preservados ap\u00f3s a compila\u00e7\u00e3o para o JavaScript, ele n\u00e3o pode depender dos tipos para definir a valida\u00e7\u00e3o, serializa\u00e7\u00e3o e documenta\u00e7\u00e3o ao mesmo tempo. Devido a isso e a algumas decis\u00f5es de projeto, para pegar a valida\u00e7\u00e3o, serializa\u00e7\u00e3o e gera\u00e7\u00e3o autom\u00e1tica do schema, \u00e9 necess\u00e1rio adicionar decoradores em muitos lugares. Ent\u00e3o, ele se torna muito verboso.</p> <p>Ele tamb\u00e9m n\u00e3o controla modelos aninhados muito bem. Ent\u00e3o, se o corpo JSON na requisi\u00e7\u00e3o for um objeto JSON que cont\u00e9m campos internos que cont\u00e9m objetos JSON aninhados, ele n\u00e3o consegue ser validado e documentado apropriadamente.</p> <p>ReadyAPI inspirado para</p> <p>Usar tipos Python para ter um \u00f3timo suporte do editor.</p> <p>Ter um sistema de inje\u00e7\u00e3o de depend\u00eancia poderoso. Achar um jeito de minimizar repeti\u00e7\u00e3o de c\u00f3digo.</p>"},{"location":"alternatives/#sanic","title":"Sanic","text":"<p>Ele foi um dos primeiros frameworks Python extremamente r\u00e1pido baseado em <code>asyncio</code>. Ele foi feito para ser muito similar ao Flask.</p> <p>Detalhes t\u00e9cnicos</p> <p>Ele utiliza <code>uvloop</code> ao inv\u00e9s do 'loop' <code>asyncio</code> padr\u00e3o do Python. \u00c9 isso que deixa ele t\u00e3o r\u00e1pido.</p> <p>Ele claramente inspirou Uvicorn e Starlette, que s\u00e3o atualmente mais r\u00e1pidos que o Sanic em testes de performance abertos.</p> <p>ReadyAPI inspirado para</p> <p>Achar um jeito de ter uma performance insana.</p> <p>\u00c9 por isso que o ReadyAPI \u00e9 baseado em Starlette, para que ele seja o framework mais r\u00e1pido dispon\u00edvel (performance testada por terceiros).</p>"},{"location":"alternatives/#falcon","title":"Falcon","text":"<p>Falcon \u00e9 outro framework Python de alta performance, e \u00e9 projetado para ser minimalista, e funciona como funda\u00e7\u00e3o de outros frameworks como Hug.</p> <p>Ele usa o padr\u00e3o anterior para frameworks web Python (WSGI) que \u00e9 s\u00edncrono, ent\u00e3o ele n\u00e3o pode controlar WebSockets e outros casos de uso. No entanto, ele tamb\u00e9m tem uma boa performance.</p> <p>Ele \u00e9 projetado para ter fun\u00e7\u00f5es que recebem dois par\u00e2metros, uma \"requisi\u00e7\u00e3o\" e uma \"resposta\". Ent\u00e3o voc\u00ea \"l\u00ea\" as partes da requisi\u00e7\u00e3o, e \"escreve\" partes para a resposta. Devido ao seu design, n\u00e3o \u00e9 poss\u00edvel declarar par\u00e2metros de requisi\u00e7\u00e3o e corpos com type hints Python padr\u00e3o como par\u00e2metros de fun\u00e7\u00f5es.</p> <p>Ent\u00e3o, valida\u00e7\u00e3o de dados, serializa\u00e7\u00e3o e documenta\u00e7\u00e3o tem que ser feitos no c\u00f3digo, n\u00e3o automaticamente. Ou eles ter\u00e3o que ser implementados como um framework acima do Falcon, como o Hug. Essa mesma distin\u00e7\u00e3o acontece em outros frameworks que s\u00e3o inspirados pelo design do Falcon, tendo um objeto de requisi\u00e7\u00e3o e um objeto de resposta como par\u00e2metros.</p> <p>ReadyAPI inspirado para</p> <p>Achar jeitos de conseguir melhor performance.</p> <p>Juntamente com Hug (como Hug \u00e9 baseado no Falcon) inspirou ReadyAPI para declarar um par\u00e2metro de <code>resposta</code> nas fun\u00e7\u00f5es.</p> <p>Embora no ReadyAPI seja opcional, \u00e9 utilizado principalmente para configurar cabe\u00e7alhos, cookies e c\u00f3digos de status alternativos.</p>"},{"location":"alternatives/#molten","title":"Molten","text":"<p>Eu descobri Molten nos primeiros est\u00e1gios da constru\u00e7\u00e3o do ReadyAPI. E ele tem umas id\u00e9ias bem similares:</p> <ul> <li>Baseado em type hints Python.</li> <li>Valida\u00e7\u00e3o e documenta\u00e7\u00e3o desses tipos.</li> <li>Sistema de inje\u00e7\u00e3o de depend\u00eancia.</li> </ul> <p>Ele n\u00e3o utiliza valida\u00e7\u00e3o de dados, serialliza\u00e7\u00e3o e documenta\u00e7\u00e3o de bibliotecas de terceiros como o Pydantic, ele tem seu pr\u00f3rpio. Ent\u00e3o, essas defini\u00e7\u00f5es de tipo de dados n\u00e3o podem ser reutilizados t\u00e3o facilmente.</p> <p>Ele exige um pouco mais de verbosidade nas configura\u00e7\u00f5es. E como \u00e9 baseado no WSGI (ao inv\u00e9s de ASGI), ele n\u00e3o \u00e9 projetado para ter a vantagem da alta performance fornecida por ferramentas como Uvicorn, Starlette e Sanic.</p> <p>O sistema de inje\u00e7\u00e3o de depend\u00eancia exige pr\u00e9-registro das depend\u00eancias e as depend\u00eancias s\u00e3o resolvidas baseadas nos tipos declarados. Ent\u00e3o, n\u00e3o \u00e9 poss\u00edvel declarar mais do que um \"componente\" que fornece um certo tipo.</p> <p>Rotas s\u00e3o declaradas em um \u00fanico lugar, usando fun\u00e7\u00f5es declaradas em outros lugares (ao inv\u00e9s de usar decoradores que possam ser colocados diretamente acima da fun\u00e7\u00e3o que controla o endpoint). Isso \u00e9 mais perto de como o Django faz isso do que como Flask (e Starlette) faz. Ele separa no c\u00f3digo coisas que s\u00e3o relativamente amarradas.</p> <p>ReadyAPI inspirado para</p> <p>Definir valida\u00e7\u00f5es extras para tipos de dados usando valores \"padr\u00e3o\" de atributos dos modelos. Isso melhora o suporte do editor, e n\u00e3o estava dispon\u00edvel no Pydantic antes.</p> <p>Isso na verdade inspirou a atualiza\u00e7\u00e3o de partes do Pydantic, para dar suporte ao mesmo estilo de declara\u00e7\u00e3o da valida\u00e7\u00e3o (toda essa funcionalidade j\u00e1 est\u00e1 dispon\u00edvel no Pydantic).</p>"},{"location":"alternatives/#hug","title":"Hug","text":"<p>Hug foi um dos primeiros frameworks a implementar a declara\u00e7\u00e3o de tipos de par\u00e2metros usando Python type hints. Isso foi uma \u00f3tima id\u00e9ia que inspirou outras ferramentas a fazer o mesmo.</p> <p>Ele usou tipos customizados em suas declara\u00e7\u00f5es ao inv\u00e9s dos tipos padr\u00e3o Python, mas mesmo assim foi um grande passo.</p> <p>Ele tamb\u00e9m foi um dos primeiros frameworks a gerar um schema customizado declarando a API inteira em JSON.</p> <p>Ele n\u00e3o era baseado em um padr\u00e3o como OpenAPI e JSON Schema. Ent\u00e3o n\u00e3o poderia ter intera\u00e7\u00e3o direta com outras ferramentas, como Swagger UI. Mas novamente, era uma id\u00e9ia muito inovadora.</p> <p>Hug tinha um incomum, interessante recurso: usando o mesmo framework, \u00e9 poss\u00edvel criar tanto APIs como CLIs.</p> <p>Como \u00e9 baseado nos padr\u00f5es anteriores de frameworks web s\u00edncronos (WSGI), ele n\u00e3o pode controlar Websockets e outras coisas, embora ele ainda tenha uma alta performance tamb\u00e9m.</p> <p>Info</p> <p>Hug foi criado por Timothy Crosley, o mesmo criador do  <code>isort</code>, uma grande ferramenta para ordena\u00e7\u00e3o autom\u00e1tica de imports em arquivos Python.</p> <p>Id\u00e9ias inspiradas para o ReadyAPI</p> <p>Hug inspirou partes do APIStar, e foi uma das ferramentas que eu achei mais promissora, ao lado do APIStar.</p> <p>Hug ajudou a inspirar o ReadyAPI a usar type hints do Python para declarar par\u00e2metros, e para gerar um schema definindo a API automaticamente.</p> <p>Hug inspirou ReadyAPI a declarar um par\u00e2metro de <code>resposta</code> em fun\u00e7\u00f5es para definir cabe\u00e7alhos e cookies.</p>"},{"location":"alternatives/#apistar-05","title":"APIStar (&lt;= 0.5)","text":"<p>Antes de decidir construir ReadyAPI eu encontrei o servidor APIStar. Tinha quase tudo que eu estava procurando e tinha um grande projeto.</p> <p>Ele foi uma das primeiras implementa\u00e7\u00f5es de um framework usando Python type hints para declarar par\u00e2metros e requisi\u00e7\u00f5es que eu nunca vi (antes no NestJS e Molten). Eu encontrei ele mais ou menos na mesma \u00e9poca que o Hug. Mas o APIStar utilizava o padr\u00e3o OpenAPI.</p> <p>Ele tinha valida\u00e7\u00e3o de dados autom\u00e1tica, serializa\u00e7\u00e3o de dados e gera\u00e7\u00e3o de schema OpenAPI baseado nos mesmos type hints em v\u00e1rios locais.</p> <p>Defini\u00e7\u00f5es de schema de corpo n\u00e3o utilizavam os mesmos Python type hints como Pydantic, ele era um pouco mais similar ao Marshmallow, ent\u00e3o, o suporte ao editor n\u00e3o seria t\u00e3o bom, ainda assim, APIStar era a melhor op\u00e7\u00e3o dispon\u00edvel.</p> <p>Ele obteve as melhores performances em testes na \u00e9poca (somente batido por Starlette).</p> <p>A princ\u00edpio, ele n\u00e3o tinha uma interface web com documenta\u00e7\u00e3o autom\u00e1tica da API, mas eu sabia que poderia adicionar o Swagger UI a ele.</p> <p>Ele tinha um sistema de inje\u00e7\u00e3o de depend\u00eancia. Ele exigia pr\u00e9-registro dos componentes, como outras ferramentas j\u00e1 discutidas acima. Mas ainda era um grande recurso.</p> <p>Eu nunca fui capaz de usar ele num projeto inteiro, por n\u00e3o ter integra\u00e7\u00e3o de seguran\u00e7a, ent\u00e3o, eu n\u00e3o pude substituir todos os recursos que eu tinha com os geradores full-stack baseados no Flask-apispec. Eu tive em minha gaveta de projetos a id\u00e9ia de criar um pull request adicionando essa funcionalidade.</p> <p>Mas ent\u00e3o, o foco do projeto mudou.</p> <p>Ele n\u00e3o era mais um framework web API, como o criador precisava focar no Starlette.</p> <p>Agora APIStar \u00e9 um conjunto de ferramentas para validar especifica\u00e7\u00f5es OpenAPI, n\u00e3o um framework web.</p> <p>Info</p> <p>APIStar foi criado por Tom Christie. O mesmo cara que criou:</p> <ul> <li>Django REST Framework</li> <li>Starlette (no qual ReadyAPI \u00e9 baseado)</li> <li>Uvicorn (usado por Starlette e ReadyAPI)</li> </ul> <p>ReadyAPI inspirado para</p> <p>Existir.</p> <p>A id\u00e9ia de declarar m\u00faltiplas coisas (valida\u00e7\u00e3o de dados, serializa\u00e7\u00e3o e documenta\u00e7\u00e3o) com os mesmos tipos Python, que ao mesmo tempo fornecesse grande suporte ao editor, era algo que eu considerava uma brilhante id\u00e9ia.</p> <p>E ap\u00f3s procurar por um logo tempo por um framework similar e testar muitas alternativas diferentes, APIStar foi a melhor op\u00e7\u00e3o dispon\u00edvel.</p> <p>Ent\u00e3o APIStar parou de existir como um servidor e Starlette foi criado, e foi uma nova melhor funda\u00e7\u00e3o para tal sistema. Essa foi a inspira\u00e7\u00e3o final para construir ReadyAPI.</p> <p>Eu considero ReadyAPI um \"sucessor espiritual\" para o APIStar, evoluindo e melhorando os recursos, sistema de tipagem e outras partes, baseado na aprendizagem de todas essas ferramentas acima.</p>"},{"location":"alternatives/#usados-por-readyapi","title":"Usados por ReadyAPI","text":""},{"location":"alternatives/#pydantic","title":"Pydantic","text":"<p>Pydantic \u00e9 uma biblioteca para definir valida\u00e7\u00e3o de dados, serializa\u00e7\u00e3o e documenta\u00e7\u00e3o (usando JSON Schema) baseado nos Python type hints.</p> <p>Isso faz dele extremamente intuitivo.</p> <p>Ele \u00e9 compar\u00e1vel ao Marshmallow. Embora ele seja mais r\u00e1pido que Marshmallow em testes de performance. E ele \u00e9 baseado nos mesmos Python type hints, o suporte ao editor \u00e9 \u00f3timo.</p> <p>ReadyAPI usa isso para</p> <p>Controlar toda a valida\u00e7\u00e3o de dados, serializa\u00e7\u00e3o de dados e modelo de documenta\u00e7\u00e3o autom\u00e1tica (baseado no JSON Schema).</p> <p>ReadyAPI ent\u00e3o pega dados do JSON Schema e coloca eles no OpenAPI, \u00e0 parte de todas as outras coisas que ele faz.</p>"},{"location":"alternatives/#starlette","title":"Starlette","text":"<p>Starlette \u00e9 um framework/caixa de ferramentas ASGI peso leve, o que \u00e9 ideal para construir servi\u00e7os ass\u00edncronos de alta performance.</p> <p>Ele \u00e9 muito simples e intuitivo. \u00c9 projetado para ser extens\u00edvel facilmente, e ter componentes modulares.</p> <p>Ele tem:</p> <ul> <li>Performance seriamente impressionante.</li> <li>Suporte a WebSocket.</li> <li>Suporte a GraphQL.</li> <li>Tarefas de processamento interno por tr\u00e1s dos panos.</li> <li>Eventos de inicializa\u00e7\u00e3o e encerramento.</li> <li>Cliente de testes constru\u00eddo com HTTPX.</li> <li>Respostas CORS, GZip, Arquivos Est\u00e1ticos, Streaming.</li> <li>Suporte para Sess\u00e3o e Cookie.</li> <li>100% coberto por testes.</li> <li>C\u00f3digo base 100% anotado com tipagem.</li> <li>Depend\u00eancias complexas Zero.</li> </ul> <p>Starlette \u00e9 atualmente o mais r\u00e1pido framework Python testado. Somente ultrapassado pelo Uvicorn, que n\u00e3o \u00e9 um framework, mas um servidor.</p> <p>Starlette fornece toda a funcionalidade b\u00e1sica de um microframework web.</p> <p>Mas ele n\u00e3o fornece valida\u00e7\u00e3o de dados autom\u00e1tica, serializa\u00e7\u00e3o e documenta\u00e7\u00e3o.</p> <p>Essa \u00e9 uma das principais coisas que ReadyAPI adiciona no topo, tudo baseado em Python type hints (usando Pydantic). Isso, mais o sistema de inje\u00e7\u00e3o de depend\u00eancia, utilidades de seguran\u00e7a, gera\u00e7\u00e3o de schema OpenAPI, etc.</p> <p>Detalhes T\u00e9cnicos</p> <p>ASGI \u00e9 um novo \"padr\u00e3o\" sendo desenvolvido pelos membros do time central do Django. Ele ainda n\u00e3o est\u00e1 como \"Padr\u00e3o Python\" (PEP), embora eles estejam em processo de fazer isso.</p> <p>No entanto, ele j\u00e1 est\u00e1 sendo utilizado como \"padr\u00e3o\" por diversas ferramentas. Isso melhora enormemente a interoperabilidade, como voc\u00ea poderia trocar Uvicorn por qualquer outro servidor ASGI (como Daphne ou Hypercorn), ou voc\u00ea poderia adicionar ferramentas compat\u00edveis com ASGI, como <code>python-socketio</code>.</p> <p>ReadyAPI usa isso para</p> <p>Controlar todas as partes web centrais. Adiciona recursos no topo.</p> <p>A classe <code>ReadyAPI</code> em si herda <code>Starlette</code>.</p> <p>Ent\u00e3o, qualquer coisa que voc\u00ea faz com Starlette, voc\u00ea pode fazer diretamente com ReadyAPI, pois ele \u00e9 basicamente um Starlette com ester\u00f3ides.</p>"},{"location":"alternatives/#uvicorn","title":"Uvicorn","text":"<p>Uvicorn \u00e9 um servidor ASGI peso leve, constru\u00eddo com uvloop e httptools.</p> <p>Ele n\u00e3o \u00e9 um framework web, mas sim um servidor. Por exemplo, ele n\u00e3o fornece ferramentas para roteamento por rotas. Isso \u00e9 algo que um framework como Starlette (ou ReadyAPI) poderia fornecer por cima.</p> <p>Ele \u00e9 o servidor recomendado para Starlette e ReadyAPI.</p> <p>ReadyAPI recomenda isso para</p> <p>O principal servidor web para rodar aplica\u00e7\u00f5es ReadyAPI.</p> <p>Voc\u00ea pode combinar ele com o Gunicorn, para ter um servidor multi-processos ass\u00edncrono.</p> <p>Verifique mais detalhes na se\u00e7\u00e3o Deployment.</p>"},{"location":"alternatives/#performance-e-velocidade","title":"Performance e velocidade","text":"<p>Para entender, comparar e ver a diferen\u00e7a entre Uvicorn, Starlette e ReadyAPI, verifique a se\u00e7\u00e3o sobre Benchmarks.</p>"},{"location":"async/","title":"Concorr\u00eancia e async / await","text":"<p>Detalhes sobre a sintaxe <code>async def</code> para fun\u00e7\u00f5es de opera\u00e7\u00e3o de rota e alguns conceitos de c\u00f3digo ass\u00edncrono, concorr\u00eancia e paralelismo.</p>"},{"location":"async/#com-pressa","title":"Com pressa?","text":"<p>TL;DR:</p> <p>Se voc\u00ea estiver utilizando bibliotecas de terceiros que dizem para voc\u00ea chamar as fun\u00e7\u00f5es com <code>await</code>, como:</p> <pre><code>results = await some_library()\n</code></pre> <p>Ent\u00e3o, declare sua fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota com <code>async def</code> como:</p> <pre><code>@app.get('/')\nasync def read_results():\n    results = await some_library()\n    return results\n</code></pre> <p>Note</p> <p>Voc\u00ea s\u00f3 pode usar <code>await</code> dentro de fun\u00e7\u00f5es criadas com <code>async def</code>.</p> <p>Se voc\u00ea est\u00e1 usando biblioteca de terceiros que se comunica com alguma coisa (um banco de dados, uma API, sistema de arquivos etc) e n\u00e3o tem suporte para utilizar <code>await</code> (esse \u00e9 atualmente o caso para a maioria das bibliotecas de banco de dados), ent\u00e3o declare suas fun\u00e7\u00f5es de opera\u00e7\u00e3o de rota normalmente, com apenas <code>def</code>, como:</p> <pre><code>@app.get('/')\ndef results():\n    results = some_library()\n    return results\n</code></pre> <p>Se sua aplica\u00e7\u00e3o (de alguma forma) n\u00e3o tem que se comunicar com nada mais e tem que esperar que o respondam, use <code>async def</code>.</p> <p>Se voc\u00ea simplesmente n\u00e3o sabe, use apenas <code>def</code>.</p> <p>Note: Voc\u00ea pode misturar <code>def</code> e <code>async def</code> nas suas fun\u00e7\u00f5es de opera\u00e7\u00e3o de rota tanto quanto necess\u00e1rio e definir cada fun\u00e7\u00e3o usando a melhor op\u00e7\u00e3o para voc\u00ea. ReadyAPI ir\u00e1 fazer a coisa certa com elas.</p> <p>De qualquer forma, em ambos os casos acima, ReadyAPI ir\u00e1 trabalhar assincronamente e ser extremamente r\u00e1pido.</p> <p>Seguindo os passos acima, ele ser\u00e1 capaz de fazer algumas otimiza\u00e7\u00f5es de performance.</p>"},{"location":"async/#detalhes-tecnicos","title":"Detalhes T\u00e9cnicos","text":"<p>Vers\u00f5es modernas de Python tem suporte para \"c\u00f3digo ass\u00edncrono\" usando algo chamado \"corrotinas\", com sintaxe <code>async</code> e <code>await</code>.</p> <p>Vamos ver aquela frase por partes na se\u00e7\u00e3o abaixo:</p> <ul> <li>C\u00f3digo ass\u00edncrono</li> <li><code>async</code> e <code>await</code></li> <li>Corrotinas</li> </ul>"},{"location":"async/#codigo-assincrono","title":"C\u00f3digo ass\u00edncrono","text":"<p>C\u00f3digo ass\u00edncrono apenas significa que a linguagem \ud83d\udcac tem um jeito de dizer para o computador / programa \ud83e\udd16 que em certo ponto, ele \ud83e\udd16 ter\u00e1 que esperar por algo para finalizar em outro lugar. Vamos dizer que esse algo seja chamado \"arquivo lento\" \ud83d\udcdd.</p> <p>Ent\u00e3o, durante esse tempo, o computador pode ir e fazer outro trabalho, enquanto o \"arquivo lento\" \ud83d\udcdd termine.</p> <p>Ent\u00e3o o computador / programa \ud83e\udd16 ir\u00e1 voltar toda hora que tiver uma chance porqu\u00ea ele ainda est\u00e1 esperando o \"arquivo lento\", ou ele \ud83e\udd16 nunca ir\u00e1 terminar todo o trabalho que tem at\u00e9 esse ponto. E ele \ud83e\udd16 ir\u00e1 ver se alguma das tarefas que estava esperando j\u00e1 terminaram, fazendo o que quer que tinham que fazer.</p> <p>Depois, ele \ud83e\udd16 pega a primeira tarefa para finalizar (vamos dizer, nosso \"arquivo lento\" \ud83d\udcdd) e continua o que ele tem que fazer com isso.</p> <p>Esse \"esperar por algo\" normalmente se refere a opera\u00e7\u00f5es I/O que s\u00e3o relativamente \"lentas\" (comparadas a velocidade do processador e da mem\u00f3ria RAM), como esperar por:</p> <ul> <li>dados do cliente para serem enviados atrav\u00e9s da rede</li> <li>dados enviados pelo seu programa para serem recebidos pelo clente atrav\u00e9s da rede</li> <li>conte\u00fado de um arquivo no disco pra ser lido pelo sistema e entregar ao seu programa</li> <li>conte\u00fado que seu programa deu ao sistema para ser escrito no disco</li> <li>uma opera\u00e7\u00e3o remota API</li> <li>uma opera\u00e7\u00e3o no banco de dados para finalizar</li> <li>uma solicita\u00e7\u00e3o no banco de dados esperando o retorno do resultado</li> <li>etc.</li> </ul> <p>Enquanto o tempo de execu\u00e7\u00e3o \u00e9 consumido mais pela espera das opera\u00e7\u00f5es I/O, essas opera\u00e7\u00f5es s\u00e3o chamadas de opera\u00e7\u00f5es \"limitadas por I/O\".</p> <p>Isso \u00e9 chamado de \"ass\u00edncrono\" porqu\u00ea o computador / programa n\u00e3o tem que ser \"sincronizado\" com a tarefa lenta, esperando pelo exato momento que a tarefa finalize, enquanto n\u00e3o faz nada, para ser capaz de pegar o resultado da tarefa e dar continuidade ao trabalho.</p> <p>Ao inv\u00e9s disso, sendo um sistema \"ass\u00edncrono\", uma vez finalizada, a tarefa pode esperar um pouco (alguns microssegundos) para que o computador / programa finalize o que quer que esteja fazendo,e ent\u00e3o volte para pegar o resultado e continue trabalhando com ele.</p> <p>Para \"s\u00edncrono\" (contr\u00e1rio de \"ass\u00edncrono\") tamb\u00e9m \u00e9 utilizado o termo \"sequencial\", porqu\u00ea o computador / programa segue todos os passos, na sequ\u00eancia, antes de trocar para uma tarefa diferente, mesmo se alguns passos envolvam esperar.</p>"},{"location":"async/#concorrencia-e-hamburgueres","title":"Concorr\u00eancia e hamb\u00fargueres","text":"<p>Essa id\u00e9ia de c\u00f3digo ass\u00edncrono descrito acima \u00e9 algo \u00e0s vezes chamado de \"concorr\u00eancia\". E \u00e9 diferente de \"paralelismo\".</p> <p>Concorr\u00eancia e paralelismo ambos s\u00e3o relacionados a \"diferentes coisas acontecendo mais ou menos ao mesmo tempo\".</p> <p>Mas os detalhes entre concorr\u00eancia e paralelismo s\u00e3o bem diferentes.</p> <p>Para ver essa diferen\u00e7a, imagine a seguinte hist\u00f3ria sobre hamb\u00fargueres:</p>"},{"location":"async/#hamburgueres-concorrentes","title":"Hamb\u00fargueres concorrentes","text":"<p>Voc\u00ea vai com seu crush :heart_eyes: na lanchonete, fica na fila enquanto o caixa pega os pedidos das pessoas na sua frente.</p> <p>Ent\u00e3o chega a sua vez, voc\u00ea pede dois saborosos hamb\u00fargueres para voc\u00ea e seu crush :heart_eyes:.</p> <p>Voc\u00ea paga.</p> <p>O caixa diz alguma coisa para o cara na cozinha para que ele tenha que preparar seus hamb\u00fargueres (mesmo embora ele esteja preparando os lanches dos outros clientes).</p> <p>O caixa te entrega seu n\u00famero de chamada.</p> <p>Enquanto voc\u00ea espera, voc\u00ea vai com seu crush :heart_eyes: e pega uma mesa, senta e conversa com seu crush :heart_eyes: por um bom tempo (como seus hamb\u00fargueres s\u00e3o muito saborosos, leva um tempo para serem preparados).</p> <p>Enquanto voc\u00ea est\u00e1 sentado na mesa com seu crush :heart_eyes:, esperando os hamb\u00fargueres, voc\u00ea pode gastar o tempo admirando como lindo, maravilhoso e esperto \u00e9 seu crush :heart_eyes:.</p> <p>Enquanto espera e conversa com seu crush :heart_eyes:, de tempos em tempos, voc\u00ea verifica o n\u00famero de chamada exibido no balc\u00e3o para ver se j\u00e1 \u00e9 sua vez.</p> <p>Ent\u00e3o a certo ponto, \u00e9 finalmente sua vez. Voc\u00ea vai no balc\u00e3o, pega seus hamb\u00fargueres e volta para a mesa.</p> <p>Voc\u00ea e seu crush :heart_eyes: comem os hamb\u00fargueres e aproveitam o tempo.</p> <p>Imagine que voc\u00ea seja o computador  / programa nessa hist\u00f3ria.</p> <p>Enquanto voc\u00ea est\u00e1 na fila, tranquilo, esperando por sua vez, n\u00e3o est\u00e1 fazendo nada \"produtivo\". Mas a fila \u00e9 r\u00e1pida porqu\u00ea o caixa s\u00f3 est\u00e1 pegando os pedidos, ent\u00e3o est\u00e1 tudo bem.</p> <p>Ent\u00e3o, quando \u00e9 sua vez, voc\u00ea faz o trabalho \"produtivo\" de verdade, voc\u00ea processa o menu, decide o que quer, pega a escolha de seu crush :heart_eyes:, paga, verifica se entregou o valor correto em dinheiro ou cart\u00e3o de cr\u00e9dito, verifica se foi cobrado corretamente, verifica se seu pedido est\u00e1 correto etc.</p> <p>Mas ent\u00e3o, embora voc\u00ea ainda n\u00e3o tenha os hamb\u00fargueres, seu trabalho no caixa est\u00e1 \"pausado\", porqu\u00ea voc\u00ea tem que esperar seus hamb\u00fargueres estarem prontos.</p> <p>Mas enquanto voc\u00ea se afasta do balc\u00e3o e senta na mesa com o n\u00famero da sua chamada, voc\u00ea pode trocar sua aten\u00e7\u00e3o para seu crush :heart_eyes:, e \"trabalhar\" nisso. Ent\u00e3o voc\u00ea est\u00e1 novamente fazendo algo muito \"produtivo\", como flertar com seu crush :heart_eyes:.</p> <p>Ent\u00e3o o caixa diz que \"seus hamb\u00fargueres est\u00e3o prontos\" colocando seu n\u00famero no balc\u00e3o, mas voc\u00ea n\u00e3o corre que nem um maluco imediatamente quando o n\u00famero exibido \u00e9 o seu. Voc\u00ea sabe que ningu\u00e9m ir\u00e1 roubar seus hamb\u00fargueres porqu\u00ea voc\u00ea tem o n\u00famero de chamada, e os outros tem os n\u00fameros deles.</p> <p>Ent\u00e3o voc\u00ea espera que seu crush :heart_eyes: termine a hist\u00f3ria que estava contando (terminar o trabalho atual / tarefa sendo processada), sorri gentilmente e diz que voc\u00ea est\u00e1 indo buscar os hamb\u00fargueres.</p> <p>Ent\u00e3o voc\u00ea vai no balc\u00e3o, para a tarefa inicial que agora est\u00e1 finalizada, pega os hamb\u00fargueres, e leva para a mesa. Isso finaliza esse passo / tarefa da intera\u00e7\u00e3o com o balc\u00e3o. Agora \u00e9 criada uma nova tarefa, \"comer hamb\u00fargueres\", mas a tarefa anterior, \"pegar os hamb\u00fargueres\" j\u00e1 est\u00e1 finalizada.</p>"},{"location":"async/#hamburgueres-paralelos","title":"Hamb\u00fargueres paralelos","text":"<p>Voc\u00ea vai com seu crush :heart_eyes: em uma lanchonete paralela.</p> <p>Voc\u00ea fica na fila enquanto alguns (vamos dizer 8) caixas pegam os pedidos das pessoas na sua frente.</p> <p>Todo mundo antes de voc\u00ea est\u00e1 esperando pelos hamb\u00fargueres estarem prontos antes de deixar o caixa porqu\u00ea cada um dos 8 caixas vai e prepara o hamb\u00farguer antes de pegar o pr\u00f3ximo pedido.</p> <p>Ent\u00e3o \u00e9 finalmente sua vez, e pede 2 hamb\u00fargueres muito saborosos para voc\u00ea e seu crush :heart_eyes:.</p> <p>Voc\u00ea paga.</p> <p>O caixa vai para a cozinha.</p> <p>Voc\u00ea espera, na frente do balc\u00e3o, para que ningu\u00e9m pegue seus hamb\u00fargueres antes de voc\u00ea, j\u00e1 que n\u00e3o tem n\u00fameros de chamadas.</p> <p>Enquanto voc\u00ea e seu crush :heart_eyes: est\u00e3o ocupados n\u00e3o permitindo que ningu\u00e9m passe a frente e pegue seus hamb\u00fargueres assim que estiverem prontos, voc\u00ea n\u00e3o pode dar aten\u00e7\u00e3o ao seu crush :heart_eyes:.</p> <p>Isso \u00e9 trabalho \"s\u00edncrono\", voc\u00ea est\u00e1 \"sincronizado\" com o caixa / cozinheiro. Voc\u00ea tem que esperar e estar l\u00e1 no exato momento que o caixa / cozinheiro terminar os hamb\u00fargueres e d\u00e1-los a voc\u00ea, ou ent\u00e3o, outro algu\u00e9m pode peg\u00e1-los.</p> <p>Ent\u00e3o seu caixa / cozinheiro finalmente volta com seus hamb\u00fargueres, depois de um longo tempo esperando por eles em frente ao balc\u00e3o.</p> <p>Voc\u00ea pega seus hamb\u00fargueres e vai para a mesa com seu crush :heart_eyes:.</p> <p>Voc\u00eas comem os hamb\u00fargueres, e o trabalho est\u00e1 terminado.</p> <p>N\u00e3o houve muita conversa ou flerte j\u00e1 que a maior parte do tempo foi gasto esperando os lanches na frente do balc\u00e3o.</p> <p>Nesse cen\u00e1rio dos hamb\u00fargueres paralelos, voc\u00ea \u00e9 um computador / programa com dois processadores (voc\u00ea e seu crush :heart_eyes:), ambos esperando e dedicando a aten\u00e7\u00e3o de estar \"esperando no balc\u00e3o\" por um bom tempo.</p> <p>A lanchonete paralela tem 8 processadores (caixas / cozinheiros). Enquanto a lanchonete dos hamb\u00fargueres concorrentes tinham apenas 2 (um caixa e um cozinheiro).</p> <p>Ainda assim, a \u00faltima experi\u00eancia n\u00e3o foi a melhor.</p> <p>Essa poderia ser a hist\u00f3ria paralela equivalente aos hamb\u00fargueres.</p> <p>Para um exemplo \"mais real\", imagine um banco.</p> <p>At\u00e9 recentemente, a maioria dos bancos tinha muitos caixas e uma grande fila.</p> <p>Todos os caixas fazendo todo o trabalho, um cliente ap\u00f3s o outro.</p> <p>E voc\u00ea tinha que esperar na fila por um longo tempo ou poderia perder a vez.</p> <p>Voc\u00ea provavelmente n\u00e3o gostaria de levar seu crush :heart_eyes: com voc\u00ea para um rolezinho no banco.</p>"},{"location":"async/#conclusao-dos-hamburgueres","title":"Conclus\u00e3o dos hamb\u00fargueres","text":"<p>Nesse cen\u00e1rio dos \"hamb\u00fargueres com seu crush :heart_eyes:\", como tem muita espera, faz mais sentido ter um sistema concorrente.</p> <p>Esse \u00e9 o caso da maioria das aplica\u00e7\u00f5es web.</p> <p>Geralmente s\u00e3o muitos usu\u00e1rios, e seu servidor est\u00e1 esperando pelas suas conex\u00f5es n\u00e3o t\u00e3o boas para enviar as requisi\u00e7\u00f5es.</p> <p>E ent\u00e3o esperando novamente pelas respostas voltarem.</p> <p>Essa \"espera\" \u00e9 medida em microssegundos, e ainda assim, somando tudo, \u00e9 um monte de espera no final.</p> <p>Por isso que faz muito mais sentido utilizar c\u00f3digo ass\u00edncrono para APIs web.</p> <p>A maioria dos frameworks Python existentes mais populares (incluindo Flask e Django) foram criados antes que os novos recursos ass\u00edncronos existissem em Python. Ent\u00e3o, os meios que eles podem ser colocados em produ\u00e7\u00e3o para suportar execu\u00e7\u00e3o paralela mais a forma antiga de execu\u00e7\u00e3o ass\u00edncrona n\u00e3o s\u00e3o t\u00e3o poderosos quanto as novas capacidades.</p> <p>Mesmo embora a especifica\u00e7\u00e3o principal para web ass\u00edncrono em Python (ASGI) foi desenvolvida no Django, para adicionar suporte para WebSockets.</p> <p>Esse tipo de assincronicidade \u00e9 o que fez NodeJS popular (embora NodeJS n\u00e3o seja paralelo) e que essa seja a for\u00e7a do Go como uma linguagem de programa.</p> <p>E esse \u00e9 o mesmo n\u00edvel de performance que voc\u00ea tem com o ReadyAPI.</p> <p>E como voc\u00ea pode ter paralelismo e sincronicidade ao mesmo tempo, voc\u00ea tem uma maior performance do que a maioria dos frameworks NodeJS testados e lado a lado com Go, que \u00e9 uma linguagem compilada pr\u00f3xima ao C (tudo gra\u00e7as ao Starlette).</p>"},{"location":"async/#concorrencia-e-melhor-que-paralelismo","title":"Concorr\u00eancia \u00e9 melhor que paralelismo?","text":"<p>N\u00e3o! Essa n\u00e3o \u00e9 a moral da hist\u00f3ria.</p> <p>Concorr\u00eancia \u00e9 diferente de paralelismo. E \u00e9 melhor em cen\u00e1rios espec\u00edficos que envolvam um monte de espera. Por isso, geralmente \u00e9 muito melhor do que paralelismo para desenvolvimento de aplica\u00e7\u00f5es web. Mas n\u00e3o para tudo.</p> <p>Ent\u00e3o, para equilibrar tudo, imagine a seguinte historinha:</p> <p>Voc\u00ea tem que limpar uma grande casa suja.</p> <p>Sim, essa \u00e9 toda a hist\u00f3ria.</p> <p>N\u00e3o h\u00e1 espera em lugar algum, apenas um monte de trabalho para ser feito, em m\u00faltiplos c\u00f4modos da casa.</p> <p>Voc\u00ea poderia ter chamadas como no exemplo dos hamb\u00fargueres, primeiro a sala de estar, ent\u00e3o a cozinha, mas voc\u00ea n\u00e3o est\u00e1 esperando por nada, apenas limpar e limpar, as chamadas n\u00e3o afetariam em nada.</p> <p>Levaria o mesmo tempo para finalizar com ou sem chamadas (concorr\u00eancia) e voc\u00ea teria feito o mesmo tanto de trabalho.</p> <p>Mas nesse caso, se voc\u00ea trouxesse os 8 ex-caixas / cozinheiros / agora-faxineiros, e cada um deles (mais voc\u00ea) pudessem dividir a casa para limp\u00e1-la, voc\u00eas fariam toda a limpeza em paralelo, com a ajuda extra, e terminariam muito mais cedo.</p> <p>Nesse cen\u00e1rio, cada um dos faxineiros (incluindo voc\u00ea) poderia ser um processador, fazendo a sua parte do trabalho.</p> <p>E a maior parte do tempo de execu\u00e7\u00e3o \u00e9 tomada por trabalho (ao inv\u00e9s de ficar esperando), e o trabalho em um computador \u00e9 feito pela CPU, que podem gerar problemas que s\u00e3o chamados de \"limite de CPU\".</p> <p>Exemplos comuns de limite de CPU s\u00e3o coisas que exigem processamento matem\u00e1tico complexo.</p> <p>Por exemplo:</p> <ul> <li>Processamento de \u00e1udio ou imagem</li> <li> <p>Vis\u00e3o do Computador: uma imagem \u00e9 composta por milh\u00f5es de pixels, cada pixel tem 3 valores (cores, processamento que normalmente exige alguma computa\u00e7\u00e3o em todos esses pixels ao mesmo tempo)</p> </li> <li> <p>Machine Learning: Normalmente exige muita multiplica\u00e7\u00e3o de matrizes e vetores. Pense numa grande folha de papel com n\u00fameros e multiplicando todos eles juntos e ao mesmo tempo.</p> </li> <li> <p>Deep Learning: Esse \u00e9 um subcampo do Machine Learning, ent\u00e3o o mesmo se aplica. A diferen\u00e7a \u00e9 que n\u00e3o h\u00e1 apenas uma grande folha de papel com n\u00fameros para multiplicar, mas um grande conjunto de folhas de papel, e em muitos casos, voc\u00ea utiliza um processador especial para construir e/ou usar modelos.</p> </li> </ul>"},{"location":"async/#concorrencia-paralelismo-web-machine-learning","title":"Concorr\u00eancia + Paralelismo: Web + Machine learning","text":"<p>Com ReadyAPI voc\u00ea pode levar a vantagem da concorr\u00eancia que \u00e9 muito comum para desenvolvimento web (o mesmo atrativo de NodeJS).</p> <p>Mas voc\u00ea tamb\u00e9m pode explorar os benef\u00edcios do paralelismo e multiprocessamento (tendo m\u00faltiplos processadores rodando em paralelo) para trabalhos pesados que geram limite de CPU como aqueles em sistemas de Machine Learning.</p> <p>Isso, mais o simples fato que Python \u00e9 a principal linguagem para Data Science, Machine Learning e especialmente Deep Learning, faz do ReadyAPI uma \u00f3tima escolha para APIs web e aplica\u00e7\u00f5es com Data Science / Machine Learning (entre muitas outras).</p> <p>Para ver como alcan\u00e7ar esse paralelismo em produ\u00e7\u00e3o veja a se\u00e7\u00e3o sobre Deployment.</p>"},{"location":"async/#async-e-await","title":"<code>async</code> e <code>await</code>","text":"<p>Vers\u00f5es modernas do Python tem um modo muito intuitivo para definir c\u00f3digo ass\u00edncrono. Isso faz parecer normal o c\u00f3digo \"sequencial\" e fazer o \"esperar\" para voc\u00ea nos momentos certos.</p> <p>Quando tem uma opera\u00e7\u00e3o que exigir\u00e1 espera antes de dar os resultados e tem suporte para esses recursos Python, voc\u00ea pode escrever assim:</p> <pre><code>burgers = await get_burgers(2)\n</code></pre> <p>A chave aqui \u00e9 o <code>await</code>. Ele diz ao Python que ele tem que esperar por <code>get_burgers(2)</code> para finalizar suas coisas antes de armazenar os resultados em <code>burgers</code>. Com isso, o Python saber\u00e1 que ele pode ir e fazer outras coisas nesse meio tempo (como receber outra requisi\u00e7\u00e3o).</p> <p>Para o <code>await</code> funcionar, tem que estar dentro de uma fun\u00e7\u00e3o que suporte essa assincronicidade. Para fazer isso, apenas declare a fun\u00e7\u00e3o com <code>async def</code>:</p> <pre><code>async def get_burgers(number: int):\n    # Fazer alguma coisa ass\u00edncrona para criar os hamb\u00fargueres\n    return burgers\n</code></pre> <p>...ao inv\u00e9s de <code>def</code>:</p> <pre><code># Isso n\u00e3o \u00e9 ass\u00edncrono\ndef get_sequential_burgers(number: int):\n    # Faz alguma coisa sequencial para criar os hamb\u00fargueres\n    return burgers\n</code></pre> <p>Com <code>async def</code>, o Python sabe que, dentro dessa fun\u00e7\u00e3o, tem que estar ciente das express\u00f5es <code>await</code>, e que isso pode \"pausar\" a execu\u00e7\u00e3o dessa fun\u00e7\u00e3o, e poder\u00e1 fazer outra coisa antes de voltar.</p> <p>Quando voc\u00ea quiser chamar uma fun\u00e7\u00e3o <code>async def</code>, voc\u00ea tem que \"esperar\". Ent\u00e3o, isso n\u00e3o funcionar\u00e1:</p> <pre><code># Isso n\u00e3o ir\u00e1 funcionar, porqu\u00ea get_burgers foi definido com: async def\nburgers = get_burgers(2)\n</code></pre> <p>Ent\u00e3o, se voc\u00ea est\u00e1 usando uma biblioteca que diz que voc\u00ea pode cham\u00e1-la com <code>await</code>, voc\u00ea precisa criar as fun\u00e7\u00f5es de opera\u00e7\u00e3o de rota com <code>async def</code>, como em:</p> <pre><code>@app.get('/burgers')\nasync def read_burgers():\n    burgers = await get_burgers(2)\n    return burgers\n</code></pre>"},{"location":"async/#mais-detalhes-tecnicos","title":"Mais detalhes t\u00e9cnicos","text":"<p>Voc\u00ea deve ter observado que <code>await</code> pode ser usado somente dentro de fun\u00e7\u00f5es definidas com <code>async def</code>.</p> <p>Mas ao mesmo tempo, fun\u00e7\u00f5es definidas com <code>async def</code> tem que ser aguardadas. Ent\u00e3o, fun\u00e7\u00f5es com <code>async def</code> pdem ser chamadas somente dentro de fun\u00e7\u00f5es definidas com <code>async def</code> tamb\u00e9m.</p> <p>Ent\u00e3o, sobre o ovo e a galinha, como voc\u00ea chama a primeira fun\u00e7\u00e3o async?</p> <p>Se voc\u00ea estivar trabalhando com ReadyAPI n\u00e3o ter\u00e1 que se preocupar com isso, porqu\u00ea essa \"primeira\" fun\u00e7\u00e3o ser\u00e1 a sua fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota, e o ReadyAPI saber\u00e1 como fazer a coisa certa.</p> <p>Mas se voc\u00ea quiser usar <code>async</code> / <code>await</code> sem ReadyAPI, verifique a documenta\u00e7\u00e3o oficial Python.</p>"},{"location":"async/#outras-formas-de-codigo-assincrono","title":"Outras formas de c\u00f3digo ass\u00edncrono","text":"<p>Esse estilo de usar <code>async</code> e <code>await</code> \u00e9 relativamente novo na linguagem.</p> <p>Mas ele faz o trabalho com c\u00f3digo ass\u00edncrono muito mais f\u00e1cil.</p> <p>Essa mesma sintaxe (ou quase a mesma) foi tamb\u00e9m inclu\u00edda recentemente em vers\u00f5es modernas do JavaScript (no navegador e NodeJS).</p> <p>Mas antes disso, controlar c\u00f3digo ass\u00edncrono era bem mais complexo e dif\u00edcil.</p> <p>Nas vers\u00f5es anteriores do Python, voc\u00ea poderia utilizar threads ou Gevent. Mas o c\u00f3digo \u00e9 um pouco mais complexo de entender, debugar, e pensar sobre.</p> <p>Nas vers\u00f5es anteriores do NodeJS / Navegador JavaScript, voc\u00ea poderia utilizar \"callbacks\". O que leva ao  inferno do callback.</p>"},{"location":"async/#corrotinas","title":"Corrotinas","text":"<p>Corrotina \u00e9 apenas um jeito bonitinho para a coisa que \u00e9 retornada de uma fun\u00e7\u00e3o <code>async def</code>. O Python sabe que \u00e9 uma fun\u00e7\u00e3o que pode come\u00e7ar e terminar em algum ponto, mas que pode ser pausada internamente tamb\u00e9m, sempre que tiver um <code>await</code> dentro dela.</p> <p>Mas toda essa funcionalidade de c\u00f3digo ass\u00edncrono com <code>async</code> e <code>await</code> \u00e9 muitas vezes resumida como \"corrotina\". \u00c9 compar\u00e1vel ao principal recurso chave do Go, a \"Gorotina\".</p>"},{"location":"async/#conclusao","title":"Conclus\u00e3o","text":"<p>Vamos ver a mesma frase com o conte\u00fado cima:</p> <p>Vers\u00f5es modernas do Python tem suporte para \"c\u00f3digo ass\u00edncrono\" usando algo chamado \"corrotinas\", com sintaxe <code>async</code> e <code>await</code>.</p> <p>Isso pode fazer mais sentido agora.</p> <p>Tudo isso \u00e9 o que deixa o ReadyAPI poderoso (atrav\u00e9s do Starlette) e que o faz ter uma performance impressionante.</p>"},{"location":"async/#detalhes-muito-tecnicos","title":"Detalhes muito t\u00e9cnicos","text":"<p>Warning</p> <p>Voc\u00ea pode provavelmente pular isso.</p> <p>Esses s\u00e3o detalhes muito t\u00e9cnicos de como ReadyAPI funciona por baixo do cap\u00f4.</p> <p>Se voc\u00ea tem algum conhecimento t\u00e9cnico (corrotinas, threads, blocking etc) e est\u00e1 curioso sobre como o ReadyAPI controla o <code>async def</code> vs normal <code>def</code>, v\u00e1 em frente.</p>"},{"location":"async/#funcoes-de-operacao-de-rota","title":"Fun\u00e7\u00f5es de opera\u00e7\u00e3o de rota","text":"<p>Quando voc\u00ea declara uma fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota com <code>def</code> normal ao inv\u00e9s de <code>async def</code>, ela \u00e9 rodada em uma threadpool externa que ent\u00e3o \u00e9 aguardada, ao inv\u00e9s de ser chamada diretamente (ela poderia bloquear o servidor).</p> <p>Se voc\u00ea est\u00e1 chegando de outro framework ass\u00edncrono que n\u00e3o faz o trabalho descrito acima e voc\u00ea est\u00e1 acostumado a definir triviais fun\u00e7\u00f5es de opera\u00e7\u00e3o de rota com simples <code>def</code> para ter um m\u00ednimo ganho de performance (cerca de 100 nanosegundos), por favor observe que no ReadyAPI o efeito pode ser bem o oposto. Nesses casos, \u00e9 melhor usar <code>async def</code> a menos que suas fun\u00e7\u00f5es de opera\u00e7\u00e3o de rota utilizem c\u00f3digo que performem bloqueamento IO.</p> <p>Ainda, em ambas as situa\u00e7\u00f5es, as chances s\u00e3o que o ReadyAPI ser\u00e1 ainda mais r\u00e1pido do que (ou ao menos compar\u00e1vel a) seus frameworks antecessores.</p>"},{"location":"async/#dependencias","title":"Depend\u00eancias","text":"<p>O mesmo se aplica para as depend\u00eancias. Se uma depend\u00eancia tem as fun\u00e7\u00f5es com padr\u00e3o <code>def</code> ao inv\u00e9s de <code>async def</code>, ela \u00e9 rodada no threadpool externo.</p>"},{"location":"async/#sub-dependencias","title":"Sub-depend\u00eancias","text":"<p>Voc\u00ea pode ter m\u00faltiplas depend\u00eancias e sub-depend\u00eancias exigindo uma a outra (como par\u00e2metros de defini\u00e7\u00f5es de fun\u00e7\u00f5es), algumas delas podem ser criadas com <code>async def</code> e algumas com <code>def</code> normal. Isso ainda poderia funcionar, e aquelas criadas com <code>def</code> podem ser chamadas em uma thread externa ao inv\u00e9s de serem \"aguardadas\".</p>"},{"location":"async/#outras-funcoes-de-utilidade","title":"Outras fun\u00e7\u00f5es de utilidade","text":"<p>Qualquer outra fun\u00e7\u00e3o de utilidade que voc\u00ea chame diretamente pode ser criada com <code>def</code> normal ou <code>async def</code> e o ReadyAPI n\u00e3o ir\u00e1 afetar o modo como voc\u00ea a chama.</p> <p>Isso est\u00e1 em contraste \u00e0s fun\u00e7\u00f5es que o ReadyAPI chama para voc\u00ea: fun\u00e7\u00f5es de opera\u00e7\u00e3o de rota e depend\u00eancias.</p> <p>Se sua fun\u00e7\u00e3o de utilidade \u00e9 uma fun\u00e7\u00e3o normal com <code>def</code>, ela ser\u00e1 chamada diretamente (como voc\u00ea a escreve no c\u00f3digo), n\u00e3o em uma threadpool, se a fun\u00e7\u00e3o \u00e9 criada com <code>async def</code> ent\u00e3o voc\u00ea deve esperar por essa fun\u00e7\u00e3o quando voc\u00ea cham\u00e1-la no seu c\u00f3digo.</p> <p>Novamente, esses s\u00e3o detalhes muito t\u00e9cnicos que provavelmente possam ser \u00fateis caso voc\u00ea esteja procurando por eles.</p> <p>Caso contr\u00e1rio, voc\u00ea deve ficar bem com as dicas da se\u00e7\u00e3o acima: Com pressa?.</p>"},{"location":"benchmarks/","title":"Compara\u00e7\u00f5es","text":"<p>As compara\u00e7\u00f5es independentes da TechEmpower mostram as aplica\u00e7\u00f5es ReadyAPI rodando com Uvicorn como um dos frameworks Python mais r\u00e1pidos dispon\u00edveis, somente atr\u00e1s dos pr\u00f3prios Starlette e Uvicorn (utilizados internamente pelo ReadyAPI). (*)</p> <p>Mas quando se checa benchmarks e compara\u00e7\u00f5es voc\u00ea deveria ter o seguinte em mente.</p>"},{"location":"benchmarks/#comparacoes-e-velocidade","title":"Compara\u00e7\u00f5es e velocidade","text":"<p>Ao verificar os benchmarks, \u00e9 comum observar algumas ferramentas de diferentes tipos comparadas como equivalentes.</p> <p>Especificamente, observa-se Uvicorn, Starlette e ReadyAPI comparados juntos (entre muitas outras ferramentas).</p> <p>Quanto mais simples o problema resolvido pela ferramenta, melhor a performance que ela ter\u00e1. E a maioria dos benchmarks n\u00e3o testam as caracter\u00edsticas adicionais fornecidas pela ferramenta.</p> <p>A hierarquia segue assim:</p> <ul> <li> <p>Uvicorn: um servidor ASGI</p> <ul> <li>Starlette: (utiliza Uvicorn) um microframework web<ul> <li>ReadyAPI: (utiliza Starlette) um microframework de API com v\u00e1rios recursos adicionais para constru\u00e7\u00e3o de APIs, com valida\u00e7\u00e3o de dados, etc.</li> </ul> </li> </ul> </li> <li> <p>Uvicorn:</p> <ul> <li>Ter\u00e1 a melhor performance, j\u00e1 que ele n\u00e3o tem muito c\u00f3digo extra al\u00e9m do servidor em si.</li> <li>Voc\u00ea n\u00e3o conseguiria escrever uma aplica\u00e7\u00e3o em Uvicorn diretamente. Isso significa que seu c\u00f3digo deveria conter, mais ou menos, todo o c\u00f3digo fornecido pelo Starlette (ou ReadyAPI). E se voc\u00ea fizesse isso, sua aplica\u00e7\u00e3o final poderia ter a mesma sobrecarga que utilizar um framework que minimiza o c\u00f3digo e bugs da sua aplica\u00e7\u00e3o.</li> <li>Se voc\u00ea quer fazer compara\u00e7\u00f5es com o Uvicorn, compare com Daphne, Hypercorn, uWSGI, etc. Servidores de Aplica\u00e7\u00e3o.</li> </ul> </li> <li>Starlette:<ul> <li>Ter\u00e1 a melhor performance, depois do Uvicorn. De fato, Starlette utiliza Uvicorn para rodar. Ent\u00e3o, ele provavelmente ser\u00e1 \"mais lento\" que Uvicorn por ter que executar mais c\u00f3digo.</li> <li>Mas ele fornece a voc\u00ea as ferramentas para construir aplica\u00e7\u00f5es web simples, com roteamento baseado em caminhos, etc.</li> <li>Se voc\u00ea quer fazer compara\u00e7\u00f5es com o Starlette, compare com Sanic, Flask, Django, etc. Frameworks Web (ou microframeworks).</li> </ul> </li> <li>ReadyAPI:<ul> <li>Do mesmo modo que Starlette utiliza Uvicorn e n\u00e3o pode ser mais r\u00e1pido que ele, ReadyAPI utiliza o Starlette, ent\u00e3o n\u00e3o tem como ser mais r\u00e1pido do que o Starlette.</li> <li>ReadyAPI fornece mais recursos acima do Starlette. Recursos que voc\u00ea quase sempre precisar\u00e1 quando construir APIs, como valida\u00e7\u00e3o de dados e serializa\u00e7\u00e3o. E utilizando eles, voc\u00ea ter\u00e1 uma documenta\u00e7\u00e3o autom\u00e1tica de gra\u00e7a (a documenta\u00e7\u00e3o autom\u00e1tica nem sequer adiciona peso para rodar as aplica\u00e7\u00f5es, ela \u00e9 gerada na inicializa\u00e7\u00e3o).</li> <li>Se voc\u00ea nunca utilizou ReadyAPI mas utilizou diretamente o Starlette (ou outra ferramenta, como Sanic, Flask, Responder, etc) voc\u00ea teria que implementar toda valida\u00e7\u00e3o de dados e serializa\u00e7\u00e3o por conta. Ent\u00e3o, sua aplica\u00e7\u00e3o final poderia ainda ter a mesma sobrecarga como se fosse desenvolvida com ReadyAPI. Em muitos casos, a valida\u00e7\u00e3o de dados e serializa\u00e7\u00e3o \u00e9 o maior peda\u00e7o de c\u00f3digo escrito em aplica\u00e7\u00f5es.</li> <li>Ent\u00e3o, ao utilizar o ReadyAPI voc\u00ea estar\u00e1 economizando tempo de desenvolvimento, evitar\u00e1 bugs, linhas de c\u00f3digo, e voc\u00ea provavelmente ter\u00e1 a mesma performance (ou melhor) do que n\u00e3o utiliz\u00e1-lo (j\u00e1 que voc\u00ea teria que implementar tudo isso em seu c\u00f3digo).</li> <li>Se voc\u00ea quer fazer compara\u00e7\u00f5es com o ReadyAPI, compare com um framework  (ou conjunto de ferramentas) para aplica\u00e7\u00f5es web que forne\u00e7a valida\u00e7\u00e3o de dados, serializa\u00e7\u00e3o e documenta\u00e7\u00e3o, como Flask-apispec, NestJS, Molten, etc. Frameworks com valida\u00e7\u00e3o de dados autom\u00e1tica, serializa\u00e7\u00e3o e documenta\u00e7\u00e3o integradas.</li> </ul> </li> </ul>"},{"location":"environment-variables/","title":"Vari\u00e1veis de Ambiente","text":"<p>Dica</p> <p>Se voc\u00ea j\u00e1 sabe o que s\u00e3o \"vari\u00e1veis de ambiente\" e como us\u00e1-las, pode pular esta se\u00e7\u00e3o.</p> <p>Uma vari\u00e1vel de ambiente (tamb\u00e9m conhecida como \"env var\") \u00e9 uma vari\u00e1vel que existe fora do c\u00f3digo Python, no sistema operacional, e pode ser lida pelo seu c\u00f3digo Python (ou por outros programas tamb\u00e9m).</p> <p>Vari\u00e1veis de ambiente podem ser \u00fateis para lidar com configura\u00e7\u00f5es do aplicativo, como parte da instala\u00e7\u00e3o do Python, etc.</p>"},{"location":"environment-variables/#criar-e-usar-variaveis-de-ambiente","title":"Criar e Usar Vari\u00e1veis de Ambiente","text":"<p>Voc\u00ea pode criar e usar vari\u00e1veis de ambiente no shell (terminal), sem precisar do Python:</p> Linux, macOS, Windows BashWindows PowerShell <pre><code>// Voc\u00ea pode criar uma vari\u00e1vel de ambiente MY_NAME com\n$ export MY_NAME=\"Wade Wilson\"\n\n// Ent\u00e3o voc\u00ea pode us\u00e1-la com outros programas, como\n$ echo \"Hello $MY_NAME\"\n\nHello Wade Wilson\n</code></pre> <pre><code>// Criar uma vari\u00e1vel de ambiente MY_NAME\n$ $Env:MY_NAME = \"Wade Wilson\"\n\n// Us\u00e1-la com outros programas, como\n$ echo \"Hello $Env:MY_NAME\"\n\nHello Wade Wilson\n</code></pre>"},{"location":"environment-variables/#ler-variaveis-de-ambiente-no-python","title":"Ler Vari\u00e1veis de Ambiente no Python","text":"<p>Voc\u00ea tamb\u00e9m pode criar vari\u00e1veis de ambiente fora do Python, no terminal (ou com qualquer outro m\u00e9todo) e depois l\u00ea-las no Python.</p> <p>Por exemplo, voc\u00ea poderia ter um arquivo <code>main.py</code> com:</p> <pre><code>import os\n\nname = os.getenv(\"MY_NAME\", \"World\")\nprint(f\"Hello {name} from Python\")\n</code></pre> <p>Dica</p> <p>O segundo argumento para <code>os.getenv()</code> \u00e9 o valor padr\u00e3o a ser retornado.</p> <p>Se n\u00e3o for fornecido, \u00e9 <code>None</code> por padr\u00e3o, Aqui fornecemos <code>\"World\"</code> como o valor padr\u00e3o a ser usado.</p> <p>Ent\u00e3o voc\u00ea poderia chamar esse programa Python:</p> Linux, macOS, Windows BashWindows PowerShell <pre><code>// Aqui ainda n\u00e3o definimos a vari\u00e1vel de ambiente\n$ python main.py\n\n// Como n\u00e3o definimos a vari\u00e1vel de ambiente, obtemos o valor padr\u00e3o\n\nHello World from Python\n\n// Mas se criarmos uma vari\u00e1vel de ambiente primeiro\n$ export MY_NAME=\"Wade Wilson\"\n\n// E ent\u00e3o chamar o programa novamente\n$ python main.py\n\n// Agora ele pode ler a vari\u00e1vel de ambiente\n\nHello Wade Wilson from Python\n</code></pre> <pre><code>// Aqui ainda n\u00e3o definimos a vari\u00e1vel de ambiente\n$ python main.py\n\n// Como n\u00e3o definimos a vari\u00e1vel de ambiente, obtemos o valor padr\u00e3o\n\nHello World from Python\n\n// Mas se criarmos uma vari\u00e1vel de ambiente primeiro\n$ $Env:MY_NAME = \"Wade Wilson\"\n\n// E ent\u00e3o chamar o programa novamente\n$ python main.py\n\n// Agora ele pode ler a vari\u00e1vel de ambiente\n\nHello Wade Wilson from Python\n</code></pre> <p>Como as vari\u00e1veis de ambiente podem ser definidas fora do c\u00f3digo, mas podem ser lidas pelo c\u00f3digo e n\u00e3o precisam ser armazenadas (com vers\u00e3o no <code>git</code>) com o restante dos arquivos, \u00e9 comum us\u00e1-las para configura\u00e7\u00f5es ou defini\u00e7\u00f5es.</p> <p>Voc\u00ea tamb\u00e9m pode criar uma vari\u00e1vel de ambiente apenas para uma invoca\u00e7\u00e3o espec\u00edfica do programa, que s\u00f3 est\u00e1 dispon\u00edvel para aquele programa e apenas pela dura\u00e7\u00e3o dele.</p> <p>Para fazer isso, crie-a na mesma linha, antes do pr\u00f3prio programa:</p> <pre><code>// Criar uma vari\u00e1vel de ambiente MY_NAME para esta chamada de programa\n$ MY_NAME=\"Wade Wilson\" python main.py\n\n// Agora ele pode ler a vari\u00e1vel de ambiente\n\nHello Wade Wilson from Python\n\n// A vari\u00e1vel de ambiente n\u00e3o existe mais depois\n$ python main.py\n\nHello World from Python\n</code></pre> <p>Dica</p> <p>Voc\u00ea pode ler mais sobre isso em The Twelve-Factor App: Config.</p>"},{"location":"environment-variables/#tipos-e-validacao","title":"Tipos e Valida\u00e7\u00e3o","text":"<p>Essas vari\u00e1veis de ambiente s\u00f3 podem lidar com strings de texto, pois s\u00e3o externas ao Python e precisam ser compat\u00edveis com outros programas e com o resto do sistema (e at\u00e9 mesmo com diferentes sistemas operacionais, como Linux, Windows, macOS).</p> <p>Isso significa que qualquer valor lido em Python de uma vari\u00e1vel de ambiente ser\u00e1 uma <code>str</code>, e qualquer convers\u00e3o para um tipo diferente ou qualquer valida\u00e7\u00e3o precisa ser feita no c\u00f3digo.</p> <p>Voc\u00ea aprender\u00e1 mais sobre como usar vari\u00e1veis de ambiente para lidar com configura\u00e7\u00f5es do aplicativo no Guia do Usu\u00e1rio Avan\u00e7ado - Configura\u00e7\u00f5es e Vari\u00e1veis de Ambiente.</p>"},{"location":"environment-variables/#variavel-de-ambiente-path","title":"Vari\u00e1vel de Ambiente <code>PATH</code>","text":"<p>Existe uma vari\u00e1vel de ambiente especial chamada <code>PATH</code> que \u00e9 usada pelos sistemas operacionais (Linux, macOS, Windows) para encontrar programas para executar.</p> <p>O valor da vari\u00e1vel <code>PATH</code> \u00e9 uma longa string composta por diret\u00f3rios separados por dois pontos <code>:</code> no Linux e macOS, e por ponto e v\u00edrgula <code>;</code> no Windows.</p> <p>Por exemplo, a vari\u00e1vel de ambiente <code>PATH</code> poderia ter esta apar\u00eancia:</p> Linux, macOSWindows <pre><code>/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\n</code></pre> <p>Isso significa que o sistema deve procurar programas nos diret\u00f3rios:</p> <ul> <li><code>/usr/local/bin</code></li> <li><code>/usr/bin</code></li> <li><code>/bin</code></li> <li><code>/usr/sbin</code></li> <li><code>/sbin</code></li> </ul> <pre><code>C:\\Program Files\\Python312\\Scripts;C:\\Program Files\\Python312;C:\\Windows\\System32\n</code></pre> <p>Isso significa que o sistema deve procurar programas nos diret\u00f3rios:</p> <ul> <li><code>C:\\Program Files\\Python312\\Scripts</code></li> <li><code>C:\\Program Files\\Python312</code></li> <li><code>C:\\Windows\\System32</code></li> </ul> <p>Quando voc\u00ea digita um comando no terminal, o sistema operacional procura o programa em cada um dos diret\u00f3rios listados na vari\u00e1vel de ambiente <code>PATH</code>.</p> <p>Por exemplo, quando voc\u00ea digita <code>python</code> no terminal, o sistema operacional procura um programa chamado <code>python</code> no primeiro diret\u00f3rio dessa lista.</p> <p>Se ele o encontrar, ent\u00e3o ele o usar\u00e1. Caso contr\u00e1rio, ele continua procurando nos outros diret\u00f3rios.</p>"},{"location":"environment-variables/#instalando-o-python-e-atualizando-o-path","title":"Instalando o Python e Atualizando o <code>PATH</code>","text":"<p>Durante a instala\u00e7\u00e3o do Python, voc\u00ea pode ser questionado sobre a atualiza\u00e7\u00e3o da vari\u00e1vel de ambiente <code>PATH</code>.</p> Linux, macOSWindows <p>Vamos supor que voc\u00ea instale o Python e ele fique em um diret\u00f3rio <code>/opt/custompython/bin</code>.</p> <p>Se voc\u00ea concordar em atualizar a vari\u00e1vel de ambiente <code>PATH</code>, o instalador adicionar\u00e1 <code>/opt/custompython/bin</code> para a vari\u00e1vel de ambiente <code>PATH</code>.</p> <p>Poderia parecer assim:</p> <pre><code>/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/custompython/bin\n</code></pre> <p>Dessa forma, ao digitar <code>python</code> no terminal, o sistema encontrar\u00e1 o programa Python em <code>/opt/custompython/bin</code> (\u00faltimo diret\u00f3rio) e o utilizar\u00e1.</p> <p>Digamos que voc\u00ea instala o Python e ele acaba em um diret\u00f3rio <code>C:\\opt\\custompython\\bin</code>.</p> <p>Se voc\u00ea disser sim para atualizar a vari\u00e1vel de ambiente <code>PATH</code>, o instalador adicionar\u00e1 <code>C:\\opt\\custompython\\bin</code> \u00e0 vari\u00e1vel de ambiente <code>PATH</code>.</p> <pre><code>C:\\Program Files\\Python312\\Scripts;C:\\Program Files\\Python312;C:\\Windows\\System32;C:\\opt\\custompython\\bin\n</code></pre> <p>Dessa forma, quando voc\u00ea digitar <code>python</code> no terminal, o sistema encontrar\u00e1 o programa Python em <code>C:\\opt\\custompython\\bin</code> (o \u00faltimo diret\u00f3rio) e o utilizar\u00e1.</p> <p>Ent\u00e3o, se voc\u00ea digitar:</p> <pre><code>$ python\n</code></pre> Linux, macOSWindows <p>O sistema encontrar\u00e1 o programa <code>python</code> em <code>/opt/custompython/bin</code> e o executar\u00e1.</p> <p>Seria aproximadamente equivalente a digitar:</p> <pre><code>$ /opt/custompython/bin/python\n</code></pre> <p>O sistema encontrar\u00e1 o programa <code>python</code> em <code>C:\\opt\\custompython\\bin\\python</code> e o executar\u00e1.</p> <p>Seria aproximadamente equivalente a digitar:</p> <pre><code>$ C:\\opt\\custompython\\bin\\python\n</code></pre> <p>Essas informa\u00e7\u00f5es ser\u00e3o \u00fateis ao aprender sobre Ambientes Virtuais.</p>"},{"location":"environment-variables/#conclusao","title":"Conclus\u00e3o","text":"<p>Com isso, voc\u00ea deve ter uma compreens\u00e3o b\u00e1sica do que s\u00e3o vari\u00e1veis \u200b\u200bde ambiente e como us\u00e1-las em Python.</p> <p>Voc\u00ea tamb\u00e9m pode ler mais sobre elas na Wikipedia para Vari\u00e1veis \u200b\u200bde Ambiente.</p> <p>Em muitos casos, n\u00e3o \u00e9 muito \u00f3bvio como as vari\u00e1veis \u200b\u200bde ambiente seriam \u00fateis e aplic\u00e1veis \u200b\u200bimediatamente. Mas elas continuam aparecendo em muitos cen\u00e1rios diferentes quando voc\u00ea est\u00e1 desenvolvendo, ent\u00e3o \u00e9 bom saber sobre elas.</p> <p>Por exemplo, voc\u00ea precisar\u00e1 dessas informa\u00e7\u00f5es na pr\u00f3xima se\u00e7\u00e3o, sobre Ambientes Virtuais.</p>"},{"location":"features/","title":"Recursos","text":""},{"location":"features/#recursos-do-readyapi","title":"Recursos do ReadyAPI","text":"<p>ReadyAPI te oferece o seguinte:</p>"},{"location":"features/#baseado-em-padroes-abertos","title":"Baseado em padr\u00f5es abertos","text":"<ul> <li>OpenAPI para cria\u00e7\u00e3o de APIs, incluindo declara\u00e7\u00f5es de opera\u00e7\u00f5es de caminho, par\u00e2metros, requisi\u00e7\u00f5es de corpo, seguran\u00e7a etc.</li> <li>Modelo de documenta\u00e7\u00e3o autom\u00e1tica com JSON Schema (j\u00e1 que o OpenAPI em si \u00e9 baseado no JSON Schema).</li> <li>Projetado em cima desses padr\u00f5es ap\u00f3s um estudo meticuloso, em vez de uma reflex\u00e3o breve.</li> <li>Isso tamb\u00e9m permite o uso de gera\u00e7\u00e3o de c\u00f3digo do cliente automaticamente em muitas linguagens.</li> </ul>"},{"location":"features/#documentacao-automatica","title":"Documenta\u00e7\u00e3o autom\u00e1tica","text":"<p>Documenta\u00e7\u00e3o interativa da API e navega\u00e7\u00e3o web da interface de usu\u00e1rio. Como o framework \u00e9 baseado no OpenAPI, h\u00e1 v\u00e1rias op\u00e7\u00f5es, 2 inclu\u00eddas por padr\u00e3o.</p> <ul> <li>Swagger UI, com navega\u00e7\u00e3o interativa, chame e teste sua API diretamente do navegador.</li> </ul> <p></p> <ul> <li>Documenta\u00e7\u00e3o alternativa da API com ReDoc.</li> </ul> <p></p>"},{"location":"features/#apenas-python-moderno","title":"Apenas Python moderno","text":"<p>Tudo \u00e9 baseado no padr\u00e3o das declara\u00e7\u00f5es de tipos do Python 3.8 (gra\u00e7as ao Pydantic). Nenhuma sintaxe nova para aprender. Apenas o padr\u00e3o moderno do Python.</p> <p>Se voc\u00ea precisa refrescar a mem\u00f3ria rapidamente sobre como usar tipos do Python (mesmo que voc\u00ea n\u00e3o use o ReadyAPI), confira esse r\u00e1pido tutorial: Tipos do Python.</p> <p>Voc\u00ea escreve Python padr\u00e3o com tipos:</p> <pre><code>from datetime import date\n\nfrom pydantic import BaseModel\n\n# Declare uma vari\u00e1vel como str\n# e obtenha suporte do editor dentro da fun\u00e7\u00e3o\ndef main(user_id: str):\n    return user_id\n\n\n# Um modelo do Pydantic\nclass User(BaseModel):\n    id: int\n    name: str\n    joined: date\n</code></pre> <p>Que ent\u00e3o pode ser usado como:</p> <pre><code>my_user: User = User(id=3, name=\"John Doe\", joined=\"2018-07-19\")\n\nsecond_user_data = {\n    \"id\": 4,\n    \"name\": \"Mary\",\n    \"joined\": \"2018-11-30\",\n}\n\nmy_second_user: User = User(**second_user_data)\n</code></pre> <p>Info</p> <p><code>**second_user_data</code> quer dizer:</p> <p>Passe as chaves e valores do dicion\u00e1rio <code>second_user_data</code> diretamente como argumentos chave-valor, equivalente a: <code>User(id=4, name=\"Mary\", joined=\"2018-11-30\")</code></p>"},{"location":"features/#suporte-de-editores","title":"Suporte de editores","text":"<p>Todo o framework foi projetado para ser f\u00e1cil e intuitivo de usar, todas as decis\u00f5es foram testadas em v\u00e1rios editores antes do in\u00edcio do desenvolvimento, para garantir a melhor experi\u00eancia de desenvolvimento.</p> <p>Na \u00faltima pesquisa do desenvolvedor Python ficou claro que o recurso mais utilizado \u00e9 o \"auto completar\".</p> <p>Todo o framework ReadyAPI \u00e9 feito para satisfazer isso. Auto completa\u00e7\u00e3o funciona em todos os lugares.</p> <p>Voc\u00ea raramente precisar\u00e1 voltar \u00e0 documenta\u00e7\u00e3o.</p> <p>Aqui est\u00e1 como o editor poder\u00e1 te ajudar:</p> <ul> <li>no Visual Studio Code:</li> </ul> <p></p> <ul> <li>no PyCharm:</li> </ul> <p></p> <p>Voc\u00ea ter\u00e1 completa\u00e7\u00e3o do seu c\u00f3digo que voc\u00ea poderia considerar imposs\u00edvel antes. Como por exemplo, a chave <code>price</code> dentro do corpo JSON (que poderia ter sido aninhado) que vem de uma requisi\u00e7\u00e3o.</p> <p>Sem a necessidade de digitar nomes de chaves erroneamente, ir e voltar entre documenta\u00e7\u00f5es, ou rolar pela p\u00e1gina para descobrir se voc\u00ea utilizou <code>username</code> or <code>user_name</code>.</p>"},{"location":"features/#breve","title":"Breve","text":"<p>H\u00e1 padr\u00f5es sens\u00edveis para tudo, com configura\u00e7\u00f5es adicionais em todos os lugares. Todos os par\u00e2metros podem ser regulados para fazer o que voc\u00ea precisa e para definir a API que voc\u00ea necessita.</p> <p>Por padr\u00e3o, tudo \"simplesmente funciona\".</p>"},{"location":"features/#validacao","title":"Valida\u00e7\u00e3o","text":"<ul> <li> <p>Valida\u00e7\u00e3o para a maioria dos (ou todos?) tipos de dados do Python, incluindo:</p> <ul> <li>objetos JSON (<code>dict</code>).</li> <li>arrays JSON (<code>list</code>), definindo tipos dos itens.</li> <li>campos String (<code>str</code>), definindo tamanho m\u00ednimo e m\u00e1ximo.</li> <li>Numbers (<code>int</code>, <code>float</code>) com valores m\u00ednimos e m\u00e1ximos, etc.</li> </ul> </li> <li> <p>Valida\u00e7\u00e3o de tipos mais ex\u00f3ticos, como:</p> <ul> <li>URL.</li> <li>Email.</li> <li>UUID.</li> <li>...e outros.</li> </ul> </li> </ul> <p>Toda a valida\u00e7\u00e3o \u00e9 controlada pelo robusto e bem estabelecido Pydantic.</p>"},{"location":"features/#seguranca-e-autenticacao","title":"Seguran\u00e7a e autentica\u00e7\u00e3o","text":"<p>Seguran\u00e7a e autentica\u00e7\u00e3o integradas. Sem nenhum compromisso com bancos de dados ou modelos de dados.</p> <p>Todos os esquemas de seguran\u00e7as definidos no OpenAPI, incluindo:</p> <ul> <li>HTTP Basic.</li> <li>OAuth2 (tamb\u00e9m com tokens JWT). Confira o tutorial em OAuth2 com JWT.</li> <li>Chaves de API em:<ul> <li>Headers.</li> <li>par\u00e2metros da Query.</li> <li>Cookies etc.</li> </ul> </li> </ul> <p>Al\u00e9m disso, todos os recursos de seguran\u00e7as do Starlette (incluindo cookies de sess\u00e3o).</p> <p>Tudo constru\u00eddo como ferramentas e componentes reutiliz\u00e1veis que s\u00e3o f\u00e1ceis de integrar com seus sistemas, armazenamento de dados, banco de dados relacionais e n\u00e3o-relacionais etc.</p>"},{"location":"features/#injecao-de-dependencia","title":"Inje\u00e7\u00e3o de depend\u00eancia","text":"<p>ReadyAPI inclui um sistema de inje\u00e7\u00e3o de depend\u00eancia extremamente f\u00e1cil de usar, mas extremamente poderoso.</p> <ul> <li>Mesmo depend\u00eancias podem ter depend\u00eancias, criando uma hierarquia ou \"grafo\" de depend\u00eancias.</li> <li>Tudo automaticamente controlado pelo framework.</li> <li>Todas as depend\u00eancias podem pedir dados das requisi\u00e7\u00f5es e ampliar as restri\u00e7\u00f5es e documenta\u00e7\u00e3o autom\u00e1tica da opera\u00e7\u00e3o de caminho.</li> <li>Valida\u00e7\u00e3o autom\u00e1tica mesmo para par\u00e2metros da opera\u00e7\u00e3o de caminho definidos em depend\u00eancias.</li> <li>Suporte para sistemas de autentica\u00e7\u00e3o complexos, conex\u00f5es com banco de dados etc.</li> <li>Sem comprometer os bancos de dados, frontends etc. Mas f\u00e1cil integra\u00e7\u00e3o com todos eles.</li> </ul>"},{"location":"features/#plug-ins-ilimitados","title":"\"Plug-ins\" ilimitados","text":"<p>Ou, de outra forma, sem a necessidade deles, importe e use o c\u00f3digo que precisar.</p> <p>Qualquer integra\u00e7\u00e3o \u00e9 projetada para ser t\u00e3o simples de usar (com depend\u00eancias) que voc\u00ea pode criar um \"plug-in\" para suas aplica\u00e7\u00f5es com 2 linhas de c\u00f3digo usando a mesma estrutura e sintaxe para as suas opera\u00e7\u00f5es de caminho.</p>"},{"location":"features/#testado","title":"Testado","text":"<ul> <li>100% de cobertura de testes.</li> <li>100% do c\u00f3digo utiliza type annotations.</li> <li>Usado para aplica\u00e7\u00f5es em produ\u00e7\u00e3o.</li> </ul>"},{"location":"features/#recursos-do-starlette","title":"Recursos do Starlette","text":"<p>ReadyAPI \u00e9 totalmente compat\u00edvel com (e baseado no) Starlette. Ent\u00e3o, qualquer c\u00f3digo adicional Starlette que voc\u00ea tiver, tamb\u00e9m funcionar\u00e1.</p> <p><code>ReadyAPI</code> \u00e9 na verdade uma sub-classe do <code>Starlette</code>. Ent\u00e3o, se voc\u00ea j\u00e1 conhece ou usa Starlette, a maioria das funcionalidades se comportar\u00e1 da mesma forma.</p> <p>Com ReadyAPI, voc\u00ea ter\u00e1 todos os recursos do Starlette (j\u00e1 que ReadyAPI \u00e9 apenas um Starlette com ester\u00f3ides):</p> <ul> <li>Desempenho realmente impressionante. \u00c9 um dos frameworks Python dispon\u00edveis mais r\u00e1pidos, a par com o NodeJS e Go.</li> <li>Suporte a WebSocket.</li> <li>Suporte a GraphQL.</li> <li>Tarefas em processo background.</li> <li>Eventos na inicializa\u00e7\u00e3o e encerramento.</li> <li>Cliente de testes constru\u00eddo sobre HTTPX.</li> <li>Respostas em CORS, GZip, Static Files, Streaming.</li> <li>Suporte a Session e Cookie.</li> <li>100% de cobertura de testes.</li> <li>100% do c\u00f3digo utilizando type annotations.</li> </ul>"},{"location":"features/#recursos-do-pydantic","title":"Recursos do Pydantic","text":"<p>ReadyAPI \u00e9 totalmente compat\u00edvel com (e baseado no) Pydantic. Ent\u00e3o, qualquer c\u00f3digo Pydantic adicional que voc\u00ea tiver, tamb\u00e9m funcionar\u00e1.</p> <p>Incluindo bibliotecas externas tamb\u00e9m baseadas no Pydantic, como ORMs e ODMs para bancos de dados.</p> <p>Isso tamb\u00e9m significa que em muitos casos voc\u00ea poder\u00e1 passar o mesmo objeto que voc\u00ea receber de uma requisi\u00e7\u00e3o diretamente para o banco de dados, j\u00e1 que tudo \u00e9 validado automaticamente.</p> <p>O mesmo se aplica no sentido inverso, em muitos casos voc\u00ea poder\u00e1 simplesmente passar o objeto que voc\u00ea recebeu do banco de dados diretamente para o cliente.</p> <p>Com ReadyAPI voc\u00ea ter\u00e1 todos os recursos do Pydantic (j\u00e1 que ReadyAPI utiliza o Pydantic para todo o controle dos dados):</p> <ul> <li>Sem pegadinhas:<ul> <li>Sem novas defini\u00e7\u00f5es de esquema de micro-linguagem para aprender.</li> <li>Se voc\u00ea conhece os tipos do Python, voc\u00ea sabe como usar o Pydantic.</li> </ul> </li> <li>Vai bem com o/a seu/sua IDE/linter/c\u00e9rebro:<ul> <li>Como as estruturas de dados do Pydantic s\u00e3o apenas inst\u00e2ncias de classes que voc\u00ea define, a auto completa\u00e7\u00e3o, linting, mypy e a sua intui\u00e7\u00e3o devem funcionar corretamente com seus dados validados.</li> </ul> </li> <li>Valida estruturas complexas:<ul> <li>Use modelos hier\u00e1rquicos do Pydantic, <code>List</code> e <code>Dict</code> do <code>typing</code> do Python, etc.</li> <li>Validadores permitem que esquemas de dados complexos sejam limpos e facilmente definidos, conferidos e documentados como JSON Schema.</li> <li>Voc\u00ea pode ter JSONs aninhados profundamente e t\u00ea-los todos validados e anotados.</li> </ul> </li> <li>Extens\u00edvel:<ul> <li>Pydantic permite que tipos de dados personalizados sejam definidos ou voc\u00ea pode estender a valida\u00e7\u00e3o com m\u00e9todos em um modelo decorado com seu decorador de validador.</li> </ul> </li> <li>100% de cobertura de testes.</li> </ul>"},{"location":"help-readyapi/","title":"Ajuda ReadyAPI - Obter Ajuda","text":"<p>Voc\u00ea gosta do ReadyAPI?</p> <p>Voc\u00ea gostaria de ajudar o ReadyAPI, outros us\u00e1rios, e o autor?</p> <p>Ou voc\u00ea gostaria de obter ajuda relacionada ao ReadyAPI??</p> <p>Existem m\u00e9todos muito simples de ajudar (A maioria das ajudas podem ser feitas com um ou dois cliques).</p> <p>E tamb\u00e9m existem v\u00e1rios modos de se conseguir ajuda.</p>"},{"location":"help-readyapi/#inscreva-se-na-newsletter","title":"Inscreva-se na newsletter","text":"<p>Voc\u00ea pode se inscrever (pouco frequente) ReadyAPI e amigos newsletter para receber atualiza\u00e7\u00f5es:</p> <ul> <li>Not\u00edcias sobre ReadyAPI e amigos \ud83d\ude80</li> <li>Tutoriais \ud83d\udcdd</li> <li>Recursos \u2728</li> <li>Mudan\u00e7as de \u00faltima hora \ud83d\udea8</li> <li>Truques e dicas \u2705</li> </ul>"},{"location":"help-readyapi/#siga-o-readyapi-no-twitter","title":"Siga o ReadyAPI no twitter","text":"<p>Siga @readyapi no Twitter para receber as \u00faltimas not\u00edcias sobre o ReadyAPI. \ud83d\udc26</p>"},{"location":"help-readyapi/#favorite-o-readyapi-no-github","title":"Favorite o ReadyAPI no GitHub","text":"<p>Voc\u00ea pode \"favoritar\" o ReadyAPI no GitHub (clicando na estrela no canto superior direito): https://github.com/readyapi/readyapi. \u2b50\ufe0f</p> <p>Favoritando, outros usu\u00e1rios poder\u00e3o encontrar mais facilmente e ver\u00e3o que j\u00e1 foi \u00fatil para muita gente.</p>"},{"location":"help-readyapi/#acompanhe-novos-updates-no-repositorio-do-github","title":"Acompanhe novos updates no repositorio do GitHub","text":"<p>Voc\u00ea pode \"acompanhar\" (watch) o ReadyAPI no GitHub (clicando no bot\u00e3o com um \"olho\" no canto superior direito): https://github.com/readyapi/readyapi. \ud83d\udc40</p> <p>Podendo selecionar apenas \"Novos Updates\".</p> <p>Fazendo isto, ser\u00e3o enviadas notifica\u00e7\u00f5es (em seu email) sempre que tiver novos updates (uma nova vers\u00e3o) com corre\u00e7\u00f5es de bugs e novos recursos no ReadyAPI</p>"},{"location":"help-readyapi/#conect-se-com-o-autor","title":"Conect-se com o autor","text":"<p>Voc\u00ea pode se conectar comigo (KhulnaSoft Ltd / <code>khulnasoft</code>), o autor.</p> <p>Voc\u00ea pode:</p> <ul> <li>Me siga no GitHub.<ul> <li>Ver tamb\u00e9m outros projetos Open Source criados por mim que podem te ajudar.</li> <li>Me seguir para saber quando um novo projeto Open Source for criado.</li> </ul> </li> <li>Me siga no Twitter.<ul> <li>Me dizer o motivo pelo o qual voc\u00ea est\u00e1 usando o ReadyAPI(Adoro ouvir esse tipo de coment\u00e1rio).</li> <li>Saber quando eu soltar novos an\u00fancios ou novas ferramentas.</li> <li>Tamb\u00e9m \u00e9 possivel seguir o @readyapi no Twitter (uma conta aparte).</li> </ul> </li> <li>Conect-se comigo no Linkedin.<ul> <li>Saber quando eu fizer novos an\u00fancios ou novas ferramentas (apesar de que uso o twitter com mais frequ\u00eancia \ud83e\udd37\u200d\u2642).</li> </ul> </li> <li>Ler meus artigos (ou me seguir) no Dev.to ou no Medium.<ul> <li>Ficar por dentro de novas ideias, artigos, e ferramentas criadas por mim.</li> <li>Me siga para saber quando eu publicar algo novo.</li> </ul> </li> </ul>"},{"location":"help-readyapi/#tweete-sobre-readyapi","title":"Tweete sobre ReadyAPI","text":"<p>Tweete sobre o ReadyAPI e compartilhe comigo e com os outros o porque de gostar do ReadyAPI. \ud83c\udf89</p> <p>Adoro ouvir sobre como o ReadyAPI \u00e9 usado, o que voc\u00ea gosta nele, em qual projeto/empresa est\u00e1 sendo usado, etc.</p>"},{"location":"help-readyapi/#vote-no-readyapi","title":"Vote no ReadyAPI","text":"<ul> <li>Vote no ReadyAPI no Slant.</li> <li>Vote no ReadyAPI no AlternativeTo.</li> </ul>"},{"location":"help-readyapi/#responda-perguntas-no-github","title":"Responda perguntas no GitHub","text":"<p>Voc\u00ea pode acompanhar as perguntas existentes e tentar ajudar outros,            . \ud83e\udd13</p> <p>Ajudando a responder as quest\u00f5es de varias pessoas, voc\u00ea pode se tornar um Expert em ReadyAPI oficial. \ud83c\udf89</p>"},{"location":"help-readyapi/#acompanhe-o-repositorio-do-github","title":"Acompanhe o reposit\u00f3rio do GitHub","text":"<p>Voc\u00ea pode \"acompanhar\" (watch) o ReadyAPI no GitHub (clicando no \"olho\" no canto superior direito): https://github.com/readyapi/readyapi. \ud83d\udc40</p> <p>Se voc\u00ea selecionar \"Acompanhando\" (Watching) em vez de \"Apenas Lan\u00e7amentos\" (Releases only) voc\u00ea receber\u00e1 notifica\u00e7\u00f5es quando algu\u00e9m tiver uma nova pergunta.</p> <p>Assim podendo tentar ajudar a resolver essas quest\u00f5es.</p>"},{"location":"help-readyapi/#faca-perguntas","title":"Fa\u00e7a perguntas","text":"<p>\u00c9 poss\u00edvel criar uma nova pergunta no reposit\u00f3rio do GitHub, por exemplo:</p> <ul> <li>Fa\u00e7a uma pergunta ou pergunte sobre um problema.</li> <li>Sugira novos recursos.</li> </ul> <p>Nota: Se voc\u00ea fizer uma pergunta, ent\u00e3o eu gostaria de pedir que voc\u00ea tamb\u00e9m ajude os outros com suas respectivas perguntas. \ud83d\ude09</p>"},{"location":"help-readyapi/#crie-um-pull-request","title":"Crie um Pull Request","text":"<p>\u00c9 poss\u00edvel contribuir no c\u00f3digo fonte fazendo Pull Requests, por exemplo:</p> <ul> <li>Para corrigir um erro de digita\u00e7\u00e3o que voc\u00ea encontrou na documenta\u00e7\u00e3o.</li> <li>Para compartilhar um artigo, video, ou podcast criados por voc\u00ea sobre o ReadyAPI editando este arquivo.<ul> <li>N\u00e3o se esque\u00e7a de adicionar o link no come\u00e7o da se\u00e7\u00e3o correspondente.</li> </ul> </li> <li>Para ajudar traduzir a documenta\u00e7\u00e3o para sua lingua.<ul> <li>Tamb\u00e9m \u00e9 possivel revisar as tradu\u00e7\u00f5es j\u00e1 existentes.</li> </ul> </li> <li>Para propor novas se\u00e7\u00f5es na documenta\u00e7\u00e3o.</li> <li>Para corrigir um bug/quest\u00e3o.</li> <li>Para adicionar um novo recurso.</li> </ul>"},{"location":"help-readyapi/#entre-no-chat","title":"Entre no chat","text":"<p>Entre no \ud83d\udc65 server de conversa do Discord \ud83d\udc65 e conhe\u00e7a novas pessoas da comunidade do ReadyAPI.</p> <p>Dica</p> <p>Para perguntas, pergunte nas quest\u00f5es do GitHub, l\u00e1 tem um chance maior de voc\u00ea ser ajudado sobre o ReadyAPI ReadyAPI Experts.</p> <p>Use o chat apenas para outro tipo de assunto.</p>"},{"location":"help-readyapi/#nao-faca-perguntas-no-chat","title":"N\u00e3o fa\u00e7a perguntas no chat","text":"<p>Tenha em mente que os chats permitem uma \"conversa mais livre\", dessa forma \u00e9 muito f\u00e1cil fazer perguntas que s\u00e3o muito gen\u00e9ricas e difice\u00eds de responder, assim voc\u00ea pode acabar n\u00e3o sendo respondido.</p> <p>Nas quest\u00f5es do GitHub o template ir\u00e1 te guiar para que voc\u00ea fa\u00e7a a sua pergunta de um jeito mais correto, fazendo com que voc\u00ea receba respostas mais completas, e at\u00e9 mesmo que voc\u00ea mesmo resolva o problema antes de perguntar. E no GitHub eu garanto que sempre irei responder todas as perguntas, mesmo que leve um tempo. Eu pessoalmente n\u00e3o consigo fazer isso via chat. \ud83d\ude05</p> <p>Conversas no chat n\u00e3o s\u00e3o t\u00e3o f\u00e1ceis de serem encontrados quanto no GitHub, ent\u00e3o quest\u00f5es e respostas podem se perder dentro da conversa. E apenas as que est\u00e3o nas quest\u00f5es do GitHub contam para voc\u00ea se tornar um Expert em ReadyAPI, ent\u00e3o voc\u00ea receber\u00e1 mais aten\u00e7\u00e3o nas quest\u00f5es do GitHub.</p> <p>Por outro lado, existem milhares de usu\u00e1rios no chat, ent\u00e3o tem uma grande chance de voc\u00ea encontrar algu\u00e9m para trocar uma id\u00e9ia por l\u00e1 em qualquer hor\u00e1rio. \ud83d\ude04</p>"},{"location":"help-readyapi/#patrocine-o-autor","title":"Patrocine o autor","text":"<p>Voc\u00ea tamb\u00e9m pode ajudar o autor financeiramente (eu) atrav\u00e9s do GitHub sponsors.</p> <p>L\u00e1 voc\u00ea pode me pagar um caf\u00e9zinho \u2615\ufe0f como agradecimento. \ud83d\ude04</p> <p>E voc\u00ea tamb\u00e9m pode se tornar um patrocinador Prata ou Ouro do ReadyAPI. \ud83c\udfc5\ud83c\udf89</p>"},{"location":"help-readyapi/#patrocine-as-ferramente-que-potencializam-o-readyapi","title":"Patrocine as ferramente que potencializam o ReadyAPI","text":"<p>Como voc\u00ea viu na documenta\u00e7\u00e3o, o ReadyAPI se apoia em nos gigantes, Starlette e Pydantic.</p> <p>Patrocine tamb\u00e9m:</p> <ul> <li>Samuel Colvin (Pydantic)</li> <li>Encode (Starlette, Uvicorn)</li> </ul> <p>Muito Obrigado! \ud83d\ude80</p>"},{"location":"history-design-future/","title":"Hist\u00f3ria, Design e Futuro","text":"<p>H\u00e1 algum tempo, um usu\u00e1rio ReadyAPI perguntou:</p> <p>Qual \u00e9 a hist\u00f3ria desse projeto? Parece que surgiu do nada e se tornou incr\u00edvel em poucas semanas [...]</p> <p>Aqui est\u00e1 um pouco dessa hist\u00f3ria.</p>"},{"location":"history-design-future/#alternativas","title":"Alternativas","text":"<p>Eu tenho criado APIs com requisitos complexos por v\u00e1rios anos (Aprendizado de M\u00e1quina, sistemas distribu\u00eddos, tarefas ass\u00edncronas, banco de dados NoSQL etc.), liderando v\u00e1rios times de desenvolvedores.</p> <p>Como parte disso, eu precisava investigar, testar e usar muitas alternativas.</p> <p>A hist\u00f3ria do ReadyAPI \u00e9, em grande parte, a hist\u00f3ria de seus predecessores.</p> <p>Como dito na se\u00e7\u00e3o Alternativas:</p> <p>ReadyAPI n\u00e3o existiria se n\u00e3o pelo trabalho anterior de outros.</p> <p>H\u00e1 muitas ferramentas criadas antes que ajudaram a inspirar sua cria\u00e7\u00e3o.</p> <p>Eu estive evitando a cria\u00e7\u00e3o de um novo framework por v\u00e1rios anos. Primeiro tentei resolver todas as funcionalidades cobertas por ReadyAPI usando muitos frameworks, plug-ins e ferramentas diferentes.</p> <p>Mas em algum ponto, n\u00e3o havia outra op\u00e7\u00e3o sen\u00e3o criar algo que oferecia todas as funcionalidades, aproveitando as melhores ideias de ferramentas anteriores, e combinando-as da melhor maneira poss\u00edvel, usando funcionalidades da linguagem que nem estavam dispon\u00edveis antes (type hints do Python 3.6+).</p>"},{"location":"history-design-future/#investigacao","title":"Investiga\u00e7\u00e3o","text":"<p>Ao usar todas as alternativas anteriores, eu tive a chance de aprender com todas elas, aproveitar ideias e combin\u00e1-las da melhor maneira que encontrei para mim e para os times de desenvolvedores com os quais trabalhava.</p> <p>Por exemplo, estava claro que idealmente ele deveria ser baseado nos type hints padr\u00f5es do Python.</p> <p>Tamb\u00e9m, a melhor abordagem era usar padr\u00f5es j\u00e1 existentes.</p> <p>Ent\u00e3o, antes mesmo de come\u00e7ar a codificar o ReadyAPI, eu investi v\u00e1rios meses estudando as especifica\u00e7\u00f5es do OpenAPI, JSON Schema, OAuth2 etc. Entendendo suas rela\u00e7\u00f5es, sobreposi\u00e7\u00f5es e diferen\u00e7as.</p>"},{"location":"history-design-future/#design","title":"Design","text":"<p>Eu ent\u00e3o dediquei algum tempo projetando a \"API\" de desenvolvimento que eu queria como usu\u00e1rio (como um desenvolvedor usando o ReadyAPI).</p> <p>Eu testei v\u00e1rias ideias nos editores Python mais populares: PyCharm, VS Code, e editores baseados no Jedi.</p> <p>Pela \u00faltima Pesquisa do Desenvolvedor Python, isso cobre cerca de 80% dos usu\u00e1rios.</p> <p>Isso significa que o ReadyAPI foi testado especificamente com os editores usados por 80% dos desenvolvedores Python. Como a maioria dos outros editores tendem a funcionar de forma similar, todos os seus benef\u00edcios devem funcionar para virtualmente todos os editores.</p> <p>Dessa forma eu pude encontrar a melhor maneira de reduzir duplica\u00e7\u00e3o de c\u00f3digo o m\u00e1ximo poss\u00edvel, ter completa\u00e7\u00e3o de texto em todos os lugares, confer\u00eancia de tipos e erros etc.</p> <p>Tudo de uma forma que oferecesse a melhor experi\u00eancia de desenvolvimento para todos os desenvolvedores.</p>"},{"location":"history-design-future/#requisitos","title":"Requisitos","text":"<p>Ap\u00f3s testar v\u00e1rias alternativas, eu decidi que usaria o Pydantic por suas vantagens.</p> <p>Ent\u00e3o eu contribu\u00ed com ele, para deix\u00e1-lo completamente de acordo com o JSON Schema, para dar suporte a diferentes maneiras de definir declara\u00e7\u00f5es de restri\u00e7\u00f5es, e melhorar o suporte a editores (confer\u00eancias de tipos, auto completa\u00e7\u00f5es) baseado nos testes em v\u00e1rios editores.</p> <p>Durante o desenvolvimento, eu tamb\u00e9m contribu\u00ed com o Starlette, outro requisito chave.</p>"},{"location":"history-design-future/#desenvolvimento","title":"Desenvolvimento","text":"<p>Quando comecei a criar o ReadyAPI de fato, a maior parte das pe\u00e7as j\u00e1 estavam encaixadas, o design estava definido, os requisitos e ferramentas j\u00e1 estavam prontos, e o conhecimento sobre os padr\u00f5es e especifica\u00e7\u00f5es estavam claros e frescos.</p>"},{"location":"history-design-future/#futuro","title":"Futuro","text":"<p>Nesse ponto, j\u00e1 est\u00e1 claro que o ReadyAPI com suas ideias est\u00e1 sendo \u00fatil para muitas pessoas.</p> <p>Ele foi escolhido sobre outras alternativas anteriores por se adequar melhor em muitos casos.</p> <p>Muitos desenvolvedores e times j\u00e1 dependem do ReadyAPI para seus projetos (incluindo eu e meu time).</p> <p>Mas ainda h\u00e1 muitas melhorias e funcionalidades a vir.</p> <p>ReadyAPI tem um grande futuro \u00e0 frente.</p> <p>E sua ajuda \u00e9 muito bem-vinda.</p>"},{"location":"project-generation/","title":"Gera\u00e7\u00e3o de Projetos - Modelo","text":"<p>Voc\u00ea pode usar um gerador de projetos para come\u00e7ar, por j\u00e1 incluir configura\u00e7\u00f5es iniciais, seguran\u00e7a, banco de dados e os primeiros endpoints API j\u00e1 feitos para voc\u00ea.</p> <p>Um gerador de projetos sempre ter\u00e1 uma pr\u00e9-configura\u00e7\u00e3o que voc\u00ea pode atualizar e adaptar para suas pr\u00f3prias necessidades, mas pode ser um bom ponto de partida para seu projeto.</p>"},{"location":"project-generation/#full-stack-readyapi-postgresql","title":"Full Stack ReadyAPI PostgreSQL","text":"<p>GitHub: https://github.com/khulnasoft/full-stack-readyapi-postgresql</p>"},{"location":"project-generation/#full-stack-readyapi-postgresql-recursos","title":"Full Stack ReadyAPI PostgreSQL - Recursos","text":"<ul> <li>Integra\u00e7\u00e3o completa Docker.</li> <li>Modo de implanta\u00e7\u00e3o Docker Swarm.</li> <li>Integra\u00e7\u00e3o e otimiza\u00e7\u00e3o Docker Compose para desenvolvimento local.</li> <li>Pronto para Produ\u00e7\u00e3o com servidor web usando Uvicorn e Gunicorn.</li> <li>Backend ReadyAPI Python:<ul> <li>R\u00e1pido: Alta performance, no n\u00edvel de NodeJS e Go (gra\u00e7as ao Starlette e Pydantic).</li> <li>Intuitivo: \u00d3timo suporte de editor. Auto-Complete em todo lugar. Menos tempo debugando.</li> <li>F\u00e1cil: Projetado para ser f\u00e1cil de usar e aprender. Menos tempo lendo documenta\u00e7\u00f5es.</li> <li>Curto: Minimize duplica\u00e7\u00e3o de c\u00f3digo. M\u00faltiplos recursos para cada declara\u00e7\u00e3o de par\u00e2metro.</li> <li>Robusto: Tenha c\u00f3digo pronto para produ\u00e7\u00e3o. Com documenta\u00e7\u00e3o interativa autom\u00e1tica.</li> <li>Baseado em Padr\u00f5es: Baseado em (e completamente compat\u00edvel com) padr\u00f5es abertos para APIs: OpenAPI e JSON Schema.</li> <li>Muitos outros recursos incluindo valida\u00e7\u00e3o autom\u00e1tica, serializa\u00e7\u00e3o, documenta\u00e7\u00e3o interativa, autentica\u00e7\u00e3o com tokens OAuth2 JWT etc.</li> </ul> </li> <li>Senha segura hashing por padr\u00e3o.</li> <li>Autentica\u00e7\u00e3o Token JWT.</li> <li>Modelos SQLAlchemy (independente de extens\u00f5es Flask, para que eles possam ser usados com workers Celery diretamente).</li> <li>Modelos b\u00e1sicos para usu\u00e1rios (modifique e remova conforme suas necessidades).</li> <li>Migra\u00e7\u00f5es Alembic.</li> <li>CORS (Cross Origin Resource Sharing - Compartilhamento de Recursos Entre Origens).</li> <li>Worker Celery que pode importar e usar modelos e c\u00f3digos do resto do backend seletivamente.</li> <li>Testes backend REST baseados no Pytest, integrados com Docker, ent\u00e3o voc\u00ea pode testar a intera\u00e7\u00e3o completa da API, independente do banco de dados. Como roda no Docker, ele pode construir um novo reposit\u00f3rio de dados do zero toda vez (assim voc\u00ea pode usar ElasticSearch, MongoDB, CouchDB, ou o que quiser, e apenas testar que a API esteja funcionando).</li> <li>F\u00e1cil integra\u00e7\u00e3o com Python atrav\u00e9s dos Kernels Jupyter para desenvolvimento remoto ou no Docker com extens\u00f5es como Atom Hydrogen ou Visual Studio Code Jupyter.</li> <li>Frontend Vue:<ul> <li>Gerado com Vue CLI.</li> <li>Controle de Autentica\u00e7\u00e3o JWT.</li> <li>Visualiza\u00e7\u00e3o de login.</li> <li>Ap\u00f3s o login, visualiza\u00e7\u00e3o do painel de controle principal.</li> <li>Painel de controle principal com cria\u00e7\u00e3o e edi\u00e7\u00e3o de usu\u00e1rio.</li> <li>Edi\u00e7\u00e3o do pr\u00f3prio usu\u00e1rio.</li> <li>Vuex.</li> <li>Vue-router.</li> <li>Vuetify para belos componentes material design.</li> <li>TypeScript.</li> <li>Servidor Docker baseado em Nginx (configurado para rodar \"lindamente\" com Vue-router).</li> <li>Constru\u00e7\u00e3o multi-est\u00e1gio Docker, ent\u00e3o voc\u00ea n\u00e3o precisa salvar ou commitar c\u00f3digo compilado.</li> <li>Testes frontend rodados na hora da constru\u00e7\u00e3o (pode ser desabilitado tamb\u00e9m).</li> <li>Feito t\u00e3o modular quanto poss\u00edvel, ent\u00e3o ele funciona fora da caixa, mas voc\u00ea pode gerar novamente com Vue CLI ou criar conforme voc\u00ea queira, e reutilizar o que quiser.</li> </ul> </li> <li>PGAdmin para banco de dados PostgreSQL, voc\u00ea pode modificar para usar PHPMyAdmin e MySQL facilmente.</li> <li>Flower para monitora\u00e7\u00e3o de tarefas Celery.</li> <li>Balanceamento de carga entre frontend e backend com Traefik, ent\u00e3o voc\u00ea pode ter ambos sob o mesmo dom\u00ednio, separados por rota, mas servidos por diferentes containers.</li> <li>Integra\u00e7\u00e3o Traefik, incluindo gera\u00e7\u00e3o autom\u00e1tica de certificados HTTPS Let's Encrypt.</li> <li>GitLab CI (integra\u00e7\u00e3o cont\u00ednua), incluindo testes frontend e backend.</li> </ul>"},{"location":"project-generation/#full-stack-readyapi-couchbase","title":"Full Stack ReadyAPI Couchbase","text":"<p>GitHub: https://github.com/khulnasoft/full-stack-readyapi-couchbase</p> <p>\u26a0\ufe0f WARNING \u26a0\ufe0f</p> <p>Se voc\u00ea est\u00e1 iniciando um novo projeto do zero, verifique as alternativas aqui.</p> <p>Por exemplo, o gerador de projetos Full Stack ReadyAPI PostgreSQL pode ser uma alternativa melhor, como ele \u00e9 ativamente mantido e utilizado. E ele inclui todos os novos recursos e melhorias.</p> <p>Voc\u00ea ainda \u00e9 livre para utilizar o gerador baseado em Couchbase se quiser, ele provavelmente ainda funciona bem, e voc\u00ea j\u00e1 tem um projeto gerado com ele que roda bem tamb\u00e9m (e voc\u00ea provavelmente j\u00e1 atualizou ele para encaixar nas suas necessidades).</p> <p>Voc\u00ea pode ler mais sobre nas documenta\u00e7\u00e3oes do reposit\u00f3rio.</p>"},{"location":"project-generation/#full-stack-readyapi-mongodb","title":"Full Stack ReadyAPI MongoDB","text":"<p>...pode demorar, dependendo do meu tempo dispon\u00edvel e outros fatores. \ud83d\ude05 \ud83c\udf89</p>"},{"location":"project-generation/#modelos-de-aprendizado-de-maquina-com-spacy-e-readyapi","title":"Modelos de Aprendizado de M\u00e1quina com spaCy e ReadyAPI","text":"<p>GitHub: https://github.com/microsoft/cookiecutter-spacy-readyapi</p>"},{"location":"project-generation/#modelos-de-aprendizado-de-maquina-com-spacy-e-readyapi-recursos","title":"Modelos de Aprendizado de M\u00e1quina com spaCy e ReadyAPI - Recursos","text":"<ul> <li>Integra\u00e7\u00e3o com modelo NER spaCy.</li> <li>Formato de requisi\u00e7\u00e3o Busca Cognitiva Azure acoplado.</li> <li>Servidor Python web Pronto para Produ\u00e7\u00e3o usando Uvicorn e Gunicorn.</li> <li>Implanta\u00e7\u00e3o Azure DevOps Kubernetes (AKS) CI/CD acoplada.</li> <li>Multilingual facilmente escolhido como uma das linguagens spaCy acopladas durante a configura\u00e7\u00e3o do projeto.</li> <li>Facilmente extens\u00edvel para outros modelos de frameworks (Pytorch, Tensorflow), n\u00e3o apenas spaCy.</li> </ul>"},{"location":"python-types/","title":"Introdu\u00e7\u00e3o aos tipos Python","text":"<p>O Python possui suporte para \"dicas de tipo\" ou \"type hints\" (tamb\u00e9m chamado de \"anota\u00e7\u00f5es de tipo\" ou \"type annotations\")</p> <p>Esses \"type hints\" s\u00e3o uma sintaxe especial que permite declarar o tipo de uma vari\u00e1vel.</p> <p>Ao declarar tipos para suas vari\u00e1veis, editores e ferramentas podem oferecer um melhor suporte.</p> <p>Este \u00e9 apenas um tutorial r\u00e1pido / atualiza\u00e7\u00e3o sobre type hints do Python. Ele cobre apenas o m\u00ednimo necess\u00e1rio para us\u00e1-los com o ReadyAPI... que \u00e9 realmente muito pouco.</p> <p>O ReadyAPI \u00e9 baseado nesses type hints, eles oferecem muitas vantagens e benef\u00edcios.</p> <p>Mas mesmo que voc\u00ea nunca use o ReadyAPI, voc\u00ea se beneficiaria de aprender um pouco sobre eles.</p> <p>Nota</p> <p>Se voc\u00ea \u00e9 um especialista em Python e j\u00e1 sabe tudo sobre type hints, pule para o pr\u00f3ximo cap\u00edtulo.</p>"},{"location":"python-types/#motivacao","title":"Motiva\u00e7\u00e3o","text":"<p>Vamos come\u00e7ar com um exemplo simples:</p> Python 3.8+ <pre><code>def get_full_name(first_name, last_name):\n    full_name = first_name.title() + \" \" + last_name.title()\n    return full_name\n\n\nprint(get_full_name(\"john\", \"doe\"))\n</code></pre> <p>A chamada deste programa gera:</p> <pre><code>John Doe\n</code></pre> <p>A fun\u00e7\u00e3o faz o seguinte:</p> <ul> <li>Pega um <code>first_name</code> e <code>last_name</code>.</li> <li>Converte a primeira letra de cada uma em mai\u00fasculas com <code>title()</code>.</li> <li>Concatena com um espa\u00e7o no meio.</li> </ul> Python 3.8+ <pre><code>def get_full_name(first_name, last_name):\n    full_name = first_name.title() + \" \" + last_name.title()\n    return full_name\n\n\nprint(get_full_name(\"john\", \"doe\"))\n</code></pre>"},{"location":"python-types/#edite-o","title":"Edite-o","text":"<p>\u00c9 um programa muito simples.</p> <p>Mas agora imagine que voc\u00ea estava escrevendo do zero.</p> <p>Em algum momento voc\u00ea teria iniciado a defini\u00e7\u00e3o da fun\u00e7\u00e3o, j\u00e1 tinha os par\u00e2metros prontos...</p> <p>Mas ent\u00e3o voc\u00ea deve chamar \"esse m\u00e9todo que converte a primeira letra em mai\u00fascula\".</p> <p>Era <code>upper</code>? Era <code>uppercase</code>? <code>first_uppercase</code>? <code>capitalize</code>?</p> <p>Em seguida, tente com o velho amigo do programador, o preenchimento autom\u00e1tico do editor.</p> <p>Voc\u00ea digita o primeiro par\u00e2metro da fun\u00e7\u00e3o, <code>first_name</code>, depois um ponto (<code>.</code>) e, em seguida, pressiona <code>Ctrl + Space</code> para acionar a conclus\u00e3o.</p> <p>Mas, infelizmente, voc\u00ea n\u00e3o obt\u00e9m nada \u00fatil:</p> <p></p>"},{"location":"python-types/#adicionar-tipos","title":"Adicionar tipos","text":"<p>Vamos modificar uma \u00fanica linha da vers\u00e3o anterior.</p> <p>Vamos mudar exatamente esse fragmento, os par\u00e2metros da fun\u00e7\u00e3o, de:</p> <pre><code>    first_name, last_name\n</code></pre> <p>para:</p> <pre><code>    first_name: str, last_name: str\n</code></pre> <p>\u00c9 isso a\u00ed.</p> <p>Esses s\u00e3o os \"type hints\":</p> Python 3.8+ <pre><code>def get_full_name(first_name: str, last_name: str):\n    full_name = first_name.title() + \" \" + last_name.title()\n    return full_name\n\n\nprint(get_full_name(\"john\", \"doe\"))\n</code></pre> <p>Isso n\u00e3o \u00e9 o mesmo que declarar valores padr\u00e3o como seria com:</p> <pre><code>    first_name=\"john\", last_name=\"doe\"\n</code></pre> <p>\u00c9 uma coisa diferente.</p> <p>Estamos usando dois pontos (<code>:</code>), n\u00e3o \u00e9 igual a (<code>=</code>).</p> <p>E adicionar type hints normalmente n\u00e3o muda o que acontece do que aconteceria sem eles.</p> <p>Mas agora, imagine que voc\u00ea est\u00e1 novamente no meio da cria\u00e7\u00e3o dessa fun\u00e7\u00e3o, mas com type hints.</p> <p>No mesmo ponto, voc\u00ea tenta acionar o preenchimento autom\u00e1tico com o <code>Ctrl+Space</code> e v\u00ea:</p> <p></p> <p>Com isso, voc\u00ea pode rolar, vendo as op\u00e7\u00f5es, at\u00e9 encontrar o que \"soa familiar\":</p> <p></p>"},{"location":"python-types/#mais-motivacao","title":"Mais motiva\u00e7\u00e3o","text":"<p>Verifique esta fun\u00e7\u00e3o, ela j\u00e1 possui type hints:</p> Python 3.8+ <pre><code>def get_name_with_age(name: str, age: int):\n    name_with_age = name + \" is this old: \" + age\n    return name_with_age\n</code></pre> <p>Como o editor conhece os tipos de vari\u00e1veis, voc\u00ea n\u00e3o obt\u00e9m apenas o preenchimento autom\u00e1tico, mas tamb\u00e9m as verifica\u00e7\u00f5es de erro:</p> <p></p> <p>Agora voc\u00ea sabe que precisa corrig\u00ed-lo, converta <code>age</code> em uma string com <code>str(age)</code>:</p> Python 3.8+ <pre><code>def get_name_with_age(name: str, age: int):\n    name_with_age = name + \" is this old: \" + str(age)\n    return name_with_age\n</code></pre>"},{"location":"python-types/#declarando-tipos","title":"Declarando Tipos","text":"<p>Voc\u00ea acabou de ver o local principal para declarar type hints. Como par\u00e2metros de fun\u00e7\u00e3o.</p> <p>Este tamb\u00e9m \u00e9 o principal local em que voc\u00ea os usaria com o ReadyAPI.</p>"},{"location":"python-types/#tipos-simples","title":"Tipos simples","text":"<p>Voc\u00ea pode declarar todos os tipos padr\u00e3o de Python, n\u00e3o apenas <code>str</code>.</p> <p>Voc\u00ea pode usar, por exemplo:</p> <ul> <li><code>int</code></li> <li><code>float</code></li> <li><code>bool</code></li> <li><code>bytes</code></li> </ul> Python 3.8+ <pre><code>def get_items(item_a: str, item_b: int, item_c: float, item_d: bool, item_e: bytes):\n    return item_a, item_b, item_c, item_d, item_d, item_e\n</code></pre>"},{"location":"python-types/#tipos-genericos-com-parametros-de-tipo","title":"Tipos gen\u00e9ricos com par\u00e2metros de tipo","text":"<p>Existem algumas estruturas de dados que podem conter outros valores, como <code>dict</code>, <code>list</code>, <code>set</code> e <code>tuple</code>. E os valores internos tamb\u00e9m podem ter seu pr\u00f3prio tipo.</p> <p>Estes tipos que possuem tipos internos s\u00e3o chamados de tipos \"gen\u00e9ricos\". E \u00e9 poss\u00edvel declar\u00e1-los mesmo com os seus tipos internos.</p> <p>Para declarar esses tipos e os tipos internos, voc\u00ea pode usar o m\u00f3dulo Python padr\u00e3o <code>typing</code>. Ele existe especificamente para suportar esses type hints.</p>"},{"location":"python-types/#versoes-mais-recentes-do-python","title":"Vers\u00f5es mais recentes do Python","text":"<p>A sintaxe utilizando <code>typing</code> \u00e9 compat\u00edvel com todas as vers\u00f5es, desde o Python 3.6 at\u00e9 as \u00faltimas, incluindo o Python 3.9, 3.10, etc.</p> <p>Conforme o Python evolui, novas vers\u00f5es chegam com suporte melhorado para esses type annotations, e em muitos casos, voc\u00ea n\u00e3o precisar\u00e1 nem importar e utilizar o m\u00f3dulo <code>typing</code> para declarar os type annotations.</p> <p>Se voc\u00ea pode escolher uma vers\u00e3o mais recente do Python para o seu projeto, voc\u00ea poder\u00e1 aproveitar isso ao seu favor.</p> <p>Em todos os documentos existem exemplos compat\u00edveis com cada vers\u00e3o do Python (quando existem diferen\u00e7as).</p> <p>Por exemplo, \"Python 3.6+\" significa que \u00e9 compat\u00edvel com o Python 3.6 ou superior (incluindo o 3.7, 3.8, 3.9, 3.10, etc). E \"Python 3.9+\" significa que \u00e9 compat\u00edvel com o Python 3.9 ou mais recente (incluindo o 3.10, etc).</p> <p>Se voc\u00ea pode utilizar a vers\u00e3o mais recente do Python, utilize os exemplos para as \u00faltimas vers\u00f5es. Eles ter\u00e3o as melhores e mais simples sintaxes, como por exemplo, \"Python 3.10+\".</p>"},{"location":"python-types/#list","title":"List","text":"<p>Por exemplo, vamos definir uma vari\u00e1vel para ser uma <code>list</code> de <code>str</code>.</p> Python 3.9+Python 3.8+ <p>Declare uma vari\u00e1vel com a mesma sintaxe com dois pontos (<code>:</code>)</p> <p>Como tipo, coloque <code>list</code>.</p> <p>Como a lista \u00e9 o tipo que cont\u00e9m algum tipo interno, voc\u00ea coloca o tipo dentro de colchetes:</p> <pre><code>def process_items(items: list[str]):\n    for item in items:\n        print(item)\n</code></pre> <p>De <code>typing</code>, importe <code>List</code> (com o <code>L</code> mai\u00fasculo):</p> <pre><code>from typing import List\n\n\ndef process_items(items: List[str]):\n    for item in items:\n        print(item)\n</code></pre> <p>Declare uma vari\u00e1vel com a mesma sintaxe com dois pontos (<code>:</code>)</p> <p>Como tipo, coloque o <code>List</code> que voc\u00ea importou de <code>typing</code>.</p> <p>Como a lista \u00e9 o tipo que cont\u00e9m algum tipo interno, voc\u00ea coloca o tipo dentro de colchetes:</p> <pre><code>from typing import List\n\n\ndef process_items(items: List[str]):\n    for item in items:\n        print(item)\n</code></pre> <p>Informa\u00e7\u00e3o</p> <p>Estes tipos internos dentro dos colchetes s\u00e3o chamados \"par\u00e2metros de tipo\" (type parameters).</p> <p>Neste caso, <code>str</code> \u00e9 o par\u00e2metro de tipo passado para <code>List</code> (ou <code>list</code> no Python 3.9 ou superior).</p> <p>Isso significa: \"a vari\u00e1vel <code>items</code> \u00e9 uma <code>list</code>, e cada um dos itens desta lista \u00e9 uma <code>str</code>\".</p> <p>Dica</p> <p>Se voc\u00ea usa o Python 3.9 ou superior, voc\u00ea n\u00e3o precisa importar <code>List</code> de <code>typing</code>. Voc\u00ea pode utilizar o mesmo tipo <code>list</code> no lugar.</p> <p>Ao fazer isso, seu editor pode fornecer suporte mesmo durante o processamento de itens da lista:</p> <p></p> <p>Sem tipos, isso \u00e9 quase imposs\u00edvel de alcan\u00e7ar.</p> <p>Observe que a vari\u00e1vel <code>item</code> \u00e9 um dos elementos da lista <code>items</code>.</p> <p>E, ainda assim, o editor sabe que \u00e9 um <code>str</code> e fornece suporte para isso.</p>"},{"location":"python-types/#tuple-e-set","title":"Tuple e Set","text":"<p>Voc\u00ea faria o mesmo para declarar <code>tuple</code>s e <code>set</code>s:</p> Python 3.9+Python 3.8+ <pre><code>def process_items(items_t: tuple[int, int, str], items_s: set[bytes]):\n    return items_t, items_s\n</code></pre> <pre><code>from typing import Set, Tuple\n\n\ndef process_items(items_t: Tuple[int, int, str], items_s: Set[bytes]):\n    return items_t, items_s\n</code></pre> <p>Isso significa que:</p> <ul> <li>A vari\u00e1vel <code>items_t</code> \u00e9 uma <code>tuple</code> com 3 itens, um <code>int</code>, outro <code>int</code> e uma <code>str</code>.</li> <li>A vari\u00e1vel <code>items_s</code> \u00e9 um <code>set</code>, e cada um de seus itens \u00e9 do tipo <code>bytes</code>.</li> </ul>"},{"location":"python-types/#dict","title":"Dict","text":"<p>Para definir um <code>dict</code>, voc\u00ea passa 2 par\u00e2metros de tipo, separados por v\u00edrgulas.</p> <p>O primeiro par\u00e2metro de tipo \u00e9 para as chaves do <code>dict</code>.</p> <p>O segundo par\u00e2metro de tipo \u00e9 para os valores do <code>dict</code>:</p> Python 3.9+Python 3.8+ <pre><code>def process_items(prices: dict[str, float]):\n    for item_name, item_price in prices.items():\n        print(item_name)\n        print(item_price)\n</code></pre> <pre><code>from typing import Dict\n\n\ndef process_items(prices: Dict[str, float]):\n    for item_name, item_price in prices.items():\n        print(item_name)\n        print(item_price)\n</code></pre> <p>Isso significa que:</p> <ul> <li>A vari\u00e1vel <code>prices</code> \u00e9 um dict`:<ul> <li>As chaves deste <code>dict</code> s\u00e3o do tipo <code>str</code> (digamos, o nome de cada item).</li> <li>Os valores deste <code>dict</code> s\u00e3o do tipo <code>float</code> (digamos, o pre\u00e7o de cada item).</li> </ul> </li> </ul>"},{"location":"python-types/#union","title":"Union","text":"<p>Voc\u00ea pode declarar que uma vari\u00e1vel pode ser de qualquer um dentre diversos tipos. Por exemplo, um <code>int</code> ou um <code>str</code>.</p> <p>No Python 3.6 e superior (incluindo o Python 3.10), voc\u00ea pode utilizar o tipo <code>Union</code> de <code>typing</code>, e colocar dentro dos colchetes os poss\u00edveis tipos aceit\u00e1veis.</p> <p>No Python 3.10 tamb\u00e9m existe uma nova sintaxe onde voc\u00ea pode colocar os poss\u00edvels tipos separados por uma barra vertical (<code>|</code>).</p> Python 3.10+Python 3.8+ <pre><code>def process_item(item: int | str):\n    print(item)\n</code></pre> <pre><code>from typing import Union\n\n\ndef process_item(item: Union[int, str]):\n    print(item)\n</code></pre> <p>Em ambos os casos, isso significa que <code>item</code> poderia ser um <code>int</code> ou um <code>str</code>.</p>"},{"location":"python-types/#possivelmente-none","title":"Poss\u00edvelmente <code>None</code>","text":"<p>Voc\u00ea pode declarar que um valor pode ter um tipo, como <code>str</code>, mas que ele tamb\u00e9m pode ser <code>None</code>.</p> <p>No Python 3.6 e superior (incluindo o Python 3.10) voc\u00ea pode declar\u00e1-lo importando e utilizando <code>Optional</code> do m\u00f3dulo <code>typing</code>.</p> <pre><code>from typing import Optional\n\n\ndef say_hi(name: Optional[str] = None):\n    if name is not None:\n        print(f\"Hey {name}!\")\n    else:\n        print(\"Hello World\")\n</code></pre> <p>O uso de <code>Optional[str]</code> em vez de apenas <code>str</code> permitir\u00e1 que o editor o ajude a detectar erros, onde voc\u00ea pode estar assumindo que um valor \u00e9 sempre um <code>str</code>, quando na verdade tamb\u00e9m pode ser <code>None</code>.</p> <p><code>Optional[Something]</code> \u00e9 na verdade um atalho para <code>Union[Something, None]</code>, eles s\u00e3o equivalentes.</p> <p>Isso tamb\u00e9m significa que no Python 3.10, voc\u00ea pode utilizar <code>Something | None</code>:</p> Python 3.10+Python 3.8+Python 3.8+ alternative <pre><code>def say_hi(name: str | None = None):\n    if name is not None:\n        print(f\"Hey {name}!\")\n    else:\n        print(\"Hello World\")\n</code></pre> <pre><code>from typing import Optional\n\n\ndef say_hi(name: Optional[str] = None):\n    if name is not None:\n        print(f\"Hey {name}!\")\n    else:\n        print(\"Hello World\")\n</code></pre> <pre><code>from typing import Union\n\n\ndef say_hi(name: Union[str, None] = None):\n    if name is not None:\n        print(f\"Hey {name}!\")\n    else:\n        print(\"Hello World\")\n</code></pre>"},{"location":"python-types/#utilizando-union-ou-optional","title":"Utilizando <code>Union</code> ou <code>Optional</code>","text":"<p>Se voc\u00ea est\u00e1 utilizando uma vers\u00e3o do Python abaixo da 3.10, aqui vai uma dica do meu ponto de vista bem subjetivo:</p> <ul> <li>\ud83d\udea8 Evite utilizar <code>Optional[SomeType]</code></li> <li>No lugar, \u2728 use <code>Union[SomeType, None]</code> \u2728.</li> </ul> <p>Ambos s\u00e3o equivalentes, e no final das contas, eles s\u00e3o o mesmo. Mas eu recomendaria o <code>Union</code> ao inv\u00e9s de <code>Optional</code> porque a palavra Optional parece implicar que o valor \u00e9 opcional, quando na verdade significa \"isso pode ser <code>None</code>\", mesmo que ele n\u00e3o seja opcional e ainda seja obrigat\u00f3rio.</p> <p>Eu penso que <code>Union[SomeType, None]</code> \u00e9 mais expl\u00edcito sobre o que ele significa.</p> <p>Isso \u00e9 apenas sobre palavras e nomes. Mas estas palavras podem afetar como os seus colegas de trabalho pensam sobre o c\u00f3digo.</p> <p>Por exemplo, vamos pegar esta fun\u00e7\u00e3o:</p> Python 3.8+ <pre><code>from typing import Optional\n\n\ndef say_hi(name: Optional[str]):\n    print(f\"Hey {name}!\")\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+ <pre><code>def say_hi(name: str | None):\n    print(f\"Hey {name}!\")\n</code></pre> <p>O pa\u00e2metro <code>name</code> \u00e9 definido como <code>Optional[str]</code>, mas ele n\u00e3o \u00e9 opcional, voc\u00ea n\u00e3o pode chamar a fun\u00e7\u00e3o sem o par\u00e2metro:</p> <pre><code>say_hi()  # Oh, no, this throws an error! \ud83d\ude31\n</code></pre> <p>O par\u00e2metro <code>name</code> ainda \u00e9 obrigat\u00f3rio (n\u00e3o opicional) porque ele n\u00e3o possui um valor padr\u00e3o. Mesmo assim, <code>name</code> aceita <code>None</code> como valor:</p> <pre><code>say_hi(name=None)  # This works, None is valid \ud83c\udf89\n</code></pre> <p>A boa not\u00edcia \u00e9, quando voc\u00ea estiver no Python 3.10 voc\u00ea n\u00e3o precisar\u00e1 se preocupar mais com isso, pois voc\u00ea poder\u00e1 simplesmente utilizar o <code>|</code> para definir uni\u00f5es de tipos:</p> Python 3.10+ <pre><code>def say_hi(name: str | None):\n    print(f\"Hey {name}!\")\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Optional\n\n\ndef say_hi(name: Optional[str]):\n    print(f\"Hey {name}!\")\n</code></pre> <p>E ent\u00e3o voc\u00ea n\u00e3o precisar\u00e1 mais se preocupar com nomes como <code>Optional</code> e <code>Union</code>. \ud83d\ude0e</p>"},{"location":"python-types/#tipos-genericos","title":"Tipos gen\u00e9ricos","text":"<p>Esses tipos que usam par\u00e2metros de tipo entre colchetes s\u00e3o chamados tipos gen\u00e9ricos ou gen\u00e9ricos. Por exemplo:</p> Python 3.10+Python 3.9+Python 3.8+ <p>Voc\u00ea pode utilizar os mesmos tipos internos como gen\u00e9ricos (com colchetes e tipos dentro):</p> <ul> <li><code>list</code></li> <li><code>tuple</code></li> <li><code>set</code></li> <li><code>dict</code></li> </ul> <p>E o mesmo como no Python 3.8, do m\u00f3dulo <code>typing</code>:</p> <ul> <li><code>Union</code></li> <li><code>Optional</code> (o mesmo que com o 3.8)</li> <li>...entro outros.</li> </ul> <p>No Python 3.10, como uma alternativa para a utiliza\u00e7\u00e3o dos gen\u00e9ricos <code>Union</code> e <code>Optional</code>, voc\u00ea pode usar a barra vertical (<code>|</code>) para declarar uni\u00f5es de tipos. Isso \u00e9 muito melhor e mais simples.</p> <p>Voc\u00ea pode utilizar os mesmos tipos internos como gen\u00e9ricos (com colchetes e tipos dentro):</p> <ul> <li><code>list</code></li> <li><code>tuple</code></li> <li><code>set</code></li> <li><code>dict</code></li> </ul> <p>E o mesmo como no Python 3.8, do m\u00f3dulo <code>typing</code>:</p> <ul> <li><code>Union</code></li> <li><code>Optional</code></li> <li>...entro outros.</li> </ul> <ul> <li><code>List</code></li> <li><code>Tuple</code></li> <li><code>Set</code></li> <li><code>Dict</code></li> <li><code>Union</code></li> <li><code>Optional</code></li> <li>...entro outros.</li> </ul>"},{"location":"python-types/#classes-como-tipos","title":"Classes como tipos","text":"<p>Voc\u00ea tamb\u00e9m pode declarar uma classe como o tipo de uma vari\u00e1vel.</p> <p>Digamos que voc\u00ea tenha uma classe <code>Person</code>, com um nome:</p> Python 3.8+ <pre><code>class Person:\n    def __init__(self, name: str):\n        self.name = name\n\n\ndef get_person_name(one_person: Person):\n    return one_person.name\n</code></pre> <p>Ent\u00e3o voc\u00ea pode declarar que uma vari\u00e1vel \u00e9 do tipo <code>Person</code>:</p> Python 3.8+ <pre><code>class Person:\n    def __init__(self, name: str):\n        self.name = name\n\n\ndef get_person_name(one_person: Person):\n    return one_person.name\n</code></pre> <p>E ent\u00e3o, novamente, voc\u00ea recebe todo o suporte do editor:</p> <p></p> <p>Perceba que isso significa que \"<code>one_person</code> \u00e9 uma inst\u00e2ncia da classe <code>Person</code>\".</p> <p>Isso n\u00e3o significa que \"<code>one_person</code> \u00e9 a classe chamada <code>Person</code>\".</p>"},{"location":"python-types/#modelos-pydantic","title":"Modelos Pydantic","text":"<p>O Pydantic \u00e9 uma biblioteca Python para executar a valida\u00e7\u00e3o de dados.</p> <p>Voc\u00ea declara a \"forma\" dos dados como classes com atributos.</p> <p>E cada atributo tem um tipo.</p> <p>Em seguida, voc\u00ea cria uma inst\u00e2ncia dessa classe com alguns valores e ela os validar\u00e1, os converter\u00e1 para o tipo apropriado (se for esse o caso) e fornecer\u00e1 um objeto com todos os dados.</p> <p>E voc\u00ea recebe todo o suporte do editor com esse objeto resultante.</p> <p>Retirado dos documentos oficiais dos Pydantic:</p> Python 3.10+Python 3.9+Python 3.8+ <pre><code>from datetime import datetime\n\nfrom pydantic import BaseModel\n\n\nclass User(BaseModel):\n    id: int\n    name: str = \"John Doe\"\n    signup_ts: datetime | None = None\n    friends: list[int] = []\n\n\nexternal_data = {\n    \"id\": \"123\",\n    \"signup_ts\": \"2017-06-01 12:22\",\n    \"friends\": [1, \"2\", b\"3\"],\n}\nuser = User(**external_data)\nprint(user)\n# &gt; User id=123 name='John Doe' signup_ts=datetime.datetime(2017, 6, 1, 12, 22) friends=[1, 2, 3]\nprint(user.id)\n# &gt; 123\n</code></pre> <pre><code>from datetime import datetime\nfrom typing import Union\n\nfrom pydantic import BaseModel\n\n\nclass User(BaseModel):\n    id: int\n    name: str = \"John Doe\"\n    signup_ts: Union[datetime, None] = None\n    friends: list[int] = []\n\n\nexternal_data = {\n    \"id\": \"123\",\n    \"signup_ts\": \"2017-06-01 12:22\",\n    \"friends\": [1, \"2\", b\"3\"],\n}\nuser = User(**external_data)\nprint(user)\n# &gt; User id=123 name='John Doe' signup_ts=datetime.datetime(2017, 6, 1, 12, 22) friends=[1, 2, 3]\nprint(user.id)\n# &gt; 123\n</code></pre> <pre><code>from datetime import datetime\nfrom typing import List, Union\n\nfrom pydantic import BaseModel\n\n\nclass User(BaseModel):\n    id: int\n    name: str = \"John Doe\"\n    signup_ts: Union[datetime, None] = None\n    friends: List[int] = []\n\n\nexternal_data = {\n    \"id\": \"123\",\n    \"signup_ts\": \"2017-06-01 12:22\",\n    \"friends\": [1, \"2\", b\"3\"],\n}\nuser = User(**external_data)\nprint(user)\n# &gt; User id=123 name='John Doe' signup_ts=datetime.datetime(2017, 6, 1, 12, 22) friends=[1, 2, 3]\nprint(user.id)\n# &gt; 123\n</code></pre> <p>Informa\u00e7\u00e3o</p> <p>Para saber mais sobre o Pydantic, verifique a sua documenta\u00e7\u00e3o.</p> <p>O ReadyAPI \u00e9 todo baseado em Pydantic.</p> <p>Voc\u00ea ver\u00e1 muito mais disso na pr\u00e1tica no Tutorial - Guia do usu\u00e1rio.</p> <p>Dica</p> <p>O Pydantic tem um comportamento especial quando voc\u00ea usa <code>Optional</code> ou <code>Union[Something, None]</code> sem um valor padr\u00e3o. Voc\u00ea pode ler mais sobre isso na documenta\u00e7\u00e3o do Pydantic sobre campos Opcionais Obrigat\u00f3rios.</p>"},{"location":"python-types/#type-hints-com-metadados-de-anotacoes","title":"Type Hints com Metadados de Anota\u00e7\u00f5es","text":"<p>O Python possui uma funcionalidade que nos permite incluir metadados adicionais nos type hints utilizando <code>Annotated</code>.</p> Python 3.9+Python 3.8+ <p>No Python 3.9, <code>Annotated</code> \u00e9 parte da biblioteca padr\u00e3o, ent\u00e3o voc\u00ea pode import\u00e1-lo de <code>typing</code>.</p> <pre><code>from typing import Annotated\n\n\ndef say_hello(name: Annotated[str, \"this is just metadata\"]) -&gt; str:\n    return f\"Hello {name}\"\n</code></pre> <p>Em vers\u00f5es abaixo do Python 3.9, voc\u00ea importa <code>Annotated</code> de <code>typing_extensions</code>.</p> <p>Ele j\u00e1 estar\u00e1 instalado com o ReadyAPI.</p> <pre><code>from typing_extensions import Annotated\n\n\ndef say_hello(name: Annotated[str, \"this is just metadata\"]) -&gt; str:\n    return f\"Hello {name}\"\n</code></pre> <p>O Python em si n\u00e3o faz nada com este <code>Annotated</code>. E para editores e outras ferramentas, o tipo ainda \u00e9 <code>str</code>.</p> <p>Mas voc\u00ea pode utilizar este espa\u00e7o dentro do <code>Annotated</code> para fornecer ao ReadyAPI metadata adicional sobre como voc\u00ea deseja que a sua aplica\u00e7\u00e3o se comporte.</p> <p>O importante aqui de se lembrar \u00e9 que o primeiro type parameter que voc\u00ea informar ao <code>Annotated</code> \u00e9 o tipo de fato. O resto \u00e9 apenas metadado para outras ferramentas.</p> <p>Por hora, voc\u00ea precisa apenas saber que o <code>Annotated</code> existe, e que ele \u00e9 Python padr\u00e3o. \ud83d\ude0e</p> <p>Mais tarde voc\u00ea ver\u00e1 o qu\u00e3o poderoso ele pode ser.</p> <p>Dica</p> <p>O fato de que isso \u00e9 Python padr\u00e3o significa que voc\u00ea ainda obt\u00e9m a melhor experi\u00eancia de desenvolvedor poss\u00edvel no seu editor, com as ferramentas que voc\u00ea utiliza para analisar e refatorar o seu c\u00f3digo, etc. \u2728</p> <p>E tamb\u00e9m que o seu c\u00f3digo ser\u00e1 muito compat\u00edvel com diversas outras ferramentas e bibliotecas Python. \ud83d\ude80</p>"},{"location":"python-types/#type-hints-no-readyapi","title":"Type hints no ReadyAPI","text":"<p>O ReadyAPI aproveita esses type hints para fazer v\u00e1rias coisas.</p> <p>Com o ReadyAPI, voc\u00ea declara par\u00e2metros com type hints e obt\u00e9m:</p> <ul> <li>Suporte ao editor.</li> <li>Verifica\u00e7\u00f5es de tipo.</li> </ul> <p>... e o ReadyAPI usa as mesmas declara\u00e7\u00f5es para:</p> <ul> <li>Definir requisitos: dos par\u00e2metros de rota, par\u00e2metros da consulta, cabe\u00e7alhos, corpos, depend\u00eancias, etc.</li> <li>Converter dados: da solicita\u00e7\u00e3o para o tipo necess\u00e1rio.</li> <li>Validar dados: provenientes de cada solicita\u00e7\u00e3o:<ul> <li>Gerando erros autom\u00e1ticos retornados ao cliente quando os dados s\u00e3o inv\u00e1lidos.</li> </ul> </li> <li>Documentar a API usando OpenAPI:<ul> <li>que \u00e9 usado pelas interfaces de usu\u00e1rio da documenta\u00e7\u00e3o interativa autom\u00e1tica.</li> </ul> </li> </ul> <p>Tudo isso pode parecer abstrato. N\u00e3o se preocupe. Voc\u00ea ver\u00e1 tudo isso em a\u00e7\u00e3o no Tutorial - Guia do usu\u00e1rio.</p> <p>O importante \u00e9 que, usando tipos padr\u00e3o de Python, em um \u00fanico local (em vez de adicionar mais classes, decoradores, etc.), o ReadyAPI far\u00e1 muito trabalho para voc\u00ea.</p> <p>Informa\u00e7\u00e3o</p> <p>Se voc\u00ea j\u00e1 passou por todo o tutorial e voltou para ver mais sobre os tipos, um bom recurso \u00e9  a \"cheat sheet\" do <code>mypy</code> .</p>"},{"location":"readyapi-cli/","title":"ReadyAPI CLI","text":"<p>ReadyAPI CLI \u00e9 uma interface por linha de comando do <code>readyapi</code> que voc\u00ea pode usar para rodar sua app ReadyAPI, gerenciar seu projeto ReadyAPI e mais.</p> <p>Quando voc\u00ea instala o ReadyAPI (ex.: com <code>pip install readyapi</code>), isso inclui um pacote chamado <code>readyapi-cli</code>. Esse pacote disponibiliza o comando <code>readyapi</code> no terminal.</p> <p>Para rodar seu app ReadyAPI em desenvolvimento, voc\u00ea pode usar o comando <code>readyapi dev</code>:</p> <pre><code>$ &lt;font color=\"#4E9A06\"&gt;readyapi&lt;/font&gt; dev &lt;u style=\"text-decoration-style:single\"&gt;main.py&lt;/u&gt;\n&lt;font color=\"#3465A4\"&gt;INFO    &lt;/font&gt; Using path &lt;font color=\"#3465A4\"&gt;main.py&lt;/font&gt;\n&lt;font color=\"#3465A4\"&gt;INFO    &lt;/font&gt; Resolved absolute path &lt;font color=\"#75507B\"&gt;/home/user/code/awesomeapp/&lt;/font&gt;&lt;font color=\"#AD7FA8\"&gt;main.py&lt;/font&gt;\n&lt;font color=\"#3465A4\"&gt;INFO    &lt;/font&gt; Searching for package file structure from directories with &lt;font color=\"#3465A4\"&gt;__init__.py&lt;/font&gt; files\n&lt;font color=\"#3465A4\"&gt;INFO    &lt;/font&gt; Importing from &lt;font color=\"#75507B\"&gt;/home/user/code/&lt;/font&gt;&lt;font color=\"#AD7FA8\"&gt;awesomeapp&lt;/font&gt;\n\n \u256d\u2500 &lt;font color=\"#8AE234\"&gt;&lt;b&gt;Python module file&lt;/b&gt;&lt;/font&gt; \u2500\u256e\n \u2502                      \u2502\n \u2502  \ud83d\udc0d main.py          \u2502\n \u2502                      \u2502\n \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n&lt;font color=\"#3465A4\"&gt;INFO    &lt;/font&gt; Importing module &lt;font color=\"#4E9A06\"&gt;main&lt;/font&gt;\n&lt;font color=\"#3465A4\"&gt;INFO    &lt;/font&gt; Found importable ReadyAPI app\n\n \u256d\u2500 &lt;font color=\"#8AE234\"&gt;&lt;b&gt;Importable ReadyAPI app&lt;/b&gt;&lt;/font&gt; \u2500\u256e\n \u2502                          \u2502\n \u2502  &lt;span style=\"background-color:#272822\"&gt;&lt;font color=\"#FF4689\"&gt;from&lt;/font&gt;&lt;/span&gt;&lt;span style=\"background-color:#272822\"&gt;&lt;font color=\"#F8F8F2\"&gt; main &lt;/font&gt;&lt;/span&gt;&lt;span style=\"background-color:#272822\"&gt;&lt;font color=\"#FF4689\"&gt;import&lt;/font&gt;&lt;/span&gt;&lt;span style=\"background-color:#272822\"&gt;&lt;font color=\"#F8F8F2\"&gt; app&lt;/font&gt;&lt;/span&gt;&lt;span style=\"background-color:#272822\"&gt;  &lt;/span&gt;  \u2502\n \u2502                          \u2502\n \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n&lt;font color=\"#3465A4\"&gt;INFO    &lt;/font&gt; Using import string &lt;font color=\"#8AE234\"&gt;&lt;b&gt;main:app&lt;/b&gt;&lt;/font&gt;\n\n &lt;span style=\"background-color:#C4A000\"&gt;&lt;font color=\"#2E3436\"&gt;\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 ReadyAPI CLI - Development mode \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e&lt;/font&gt;&lt;/span&gt;\n &lt;span style=\"background-color:#C4A000\"&gt;&lt;font color=\"#2E3436\"&gt;\u2502                                                     \u2502&lt;/font&gt;&lt;/span&gt;\n &lt;span style=\"background-color:#C4A000\"&gt;&lt;font color=\"#2E3436\"&gt;\u2502  Serving at: http://127.0.0.1:8000                  \u2502&lt;/font&gt;&lt;/span&gt;\n &lt;span style=\"background-color:#C4A000\"&gt;&lt;font color=\"#2E3436\"&gt;\u2502                                                     \u2502&lt;/font&gt;&lt;/span&gt;\n &lt;span style=\"background-color:#C4A000\"&gt;&lt;font color=\"#2E3436\"&gt;\u2502  API docs: http://127.0.0.1:8000/docs               \u2502&lt;/font&gt;&lt;/span&gt;\n &lt;span style=\"background-color:#C4A000\"&gt;&lt;font color=\"#2E3436\"&gt;\u2502                                                     \u2502&lt;/font&gt;&lt;/span&gt;\n &lt;span style=\"background-color:#C4A000\"&gt;&lt;font color=\"#2E3436\"&gt;\u2502  Running in development mode, for production use:   \u2502&lt;/font&gt;&lt;/span&gt;\n &lt;span style=\"background-color:#C4A000\"&gt;&lt;font color=\"#2E3436\"&gt;\u2502                                                     \u2502&lt;/font&gt;&lt;/span&gt;\n &lt;span style=\"background-color:#C4A000\"&gt;&lt;font color=\"#2E3436\"&gt;\u2502  &lt;/font&gt;&lt;/span&gt;&lt;span style=\"background-color:#C4A000\"&gt;&lt;font color=\"#555753\"&gt;&lt;b&gt;readyapi run&lt;/b&gt;&lt;/font&gt;&lt;/span&gt;&lt;span style=\"background-color:#C4A000\"&gt;&lt;font color=\"#2E3436\"&gt;                                        \u2502&lt;/font&gt;&lt;/span&gt;\n &lt;span style=\"background-color:#C4A000\"&gt;&lt;font color=\"#2E3436\"&gt;\u2502                                                     \u2502&lt;/font&gt;&lt;/span&gt;\n &lt;span style=\"background-color:#C4A000\"&gt;&lt;font color=\"#2E3436\"&gt;\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f&lt;/font&gt;&lt;/span&gt;\n\n&lt;font color=\"#4E9A06\"&gt;INFO&lt;/font&gt;:     Will watch for changes in these directories: [&amp;apos;/home/user/code/awesomeapp&amp;apos;]\n&lt;font color=\"#4E9A06\"&gt;INFO&lt;/font&gt;:     Uvicorn running on &lt;b&gt;http://127.0.0.1:8000&lt;/b&gt; (Press CTRL+C to quit)\n&lt;font color=\"#4E9A06\"&gt;INFO&lt;/font&gt;:     Started reloader process [&lt;font color=\"#34E2E2\"&gt;&lt;b&gt;2265862&lt;/b&gt;&lt;/font&gt;] using &lt;font color=\"#34E2E2\"&gt;&lt;b&gt;WatchFiles&lt;/b&gt;&lt;/font&gt;\n&lt;font color=\"#4E9A06\"&gt;INFO&lt;/font&gt;:     Started server process [&lt;font color=\"#06989A\"&gt;2265873&lt;/font&gt;]\n&lt;font color=\"#4E9A06\"&gt;INFO&lt;/font&gt;:     Waiting for application startup.\n&lt;font color=\"#4E9A06\"&gt;INFO&lt;/font&gt;:     Application startup complete.\n</code></pre> <p>Aquele commando por linha de programa chamado <code>readyapi</code> \u00e9 o ReadyAPI CLI.</p> <p>O ReadyAPI CLI recebe o caminho do seu programa Python, detecta automaticamente a vari\u00e1vel com o ReadyAPI (comumente nomeada <code>app</code>) e como import\u00e1-la, e ent\u00e3o a serve.</p> <p>Para produ\u00e7\u00e3o voc\u00ea usaria <code>readyapi run</code> no lugar. \ud83d\ude80</p> <p>Internamente, ReadyAPI CLI usa Uvicorn, um servidor ASGI de alta performance e pronto para produ\u00e7\u00e3o. \ud83d\ude0e</p>"},{"location":"readyapi-cli/#readyapi-dev","title":"<code>readyapi dev</code>","text":"<p>Quando voc\u00ea roda <code>readyapi dev</code>, isso vai executar em modo de desenvolvimento.</p> <p>Por padr\u00e3o, teremos o recarregamento autom\u00e1tico ativo, ent\u00e3o o programa ir\u00e1 recarregar o servidor automaticamente toda vez que voc\u00ea fizer mudan\u00e7as no seu c\u00f3digo. Isso usa muitos recursos e pode ser menos est\u00e1vel. Voc\u00ea deve apenas us\u00e1-lo em modo de desenvolvimento.</p> <p>O servidor de desenvolvimento escutar\u00e1 no endere\u00e7o de IP <code>127.0.0.1</code> por padr\u00e3o, este \u00e9 o IP que sua m\u00e1quina usa para se comunicar com ela mesma (<code>localhost</code>).</p>"},{"location":"readyapi-cli/#readyapi-run","title":"<code>readyapi run</code>","text":"<p>Quando voc\u00ea rodar <code>readyapi run</code>, isso executar\u00e1 em modo de produ\u00e7\u00e3o por padr\u00e3o.</p> <p>Este modo ter\u00e1 recarregamento autom\u00e1tico desativado por padr\u00e3o.</p> <p>Isso ir\u00e1 escutar no endere\u00e7o de IP <code>0.0.0.0</code>, o que significa todos os endere\u00e7os IP dispon\u00edveis, dessa forma o programa estar\u00e1 acess\u00edvel publicamente para qualquer um que consiga se comunicar com a m\u00e1quina. Isso \u00e9 como voc\u00ea normalmente roda em produ\u00e7\u00e3o em um cont\u00eainer, por exemplo.</p> <p>Em muitos casos voc\u00ea pode ter (e deveria ter) um \"proxy de sa\u00edda\" tratando HTTPS no topo, isso depender\u00e1 de como voc\u00ea far\u00e1 o deploy da sua aplica\u00e7\u00e3o, seu provedor pode fazer isso pra voc\u00ea ou talvez seja necess\u00e1rio fazer voc\u00ea mesmo.</p> <p>Tip</p> <p>Voc\u00ea pode aprender mais sobre em documenta\u00e7\u00e3o de deployment.</p>"},{"location":"virtual-environments/","title":"Ambientes Virtuais","text":"<p>Ao trabalhar em projetos Python, voc\u00ea provavelmente deve usar um ambiente virtual (ou um mecanismo similar) para isolar os pacotes que voc\u00ea instala para cada projeto.</p> <p>Informa\u00e7\u00e3o</p> <p>Se voc\u00ea j\u00e1 sabe sobre ambientes virtuais, como cri\u00e1-los e us\u00e1-los, talvez seja melhor pular esta se\u00e7\u00e3o. \ud83e\udd13</p> <p>Dica</p> <p>Um ambiente virtual \u00e9 diferente de uma vari\u00e1vel de ambiente.</p> <p>Uma vari\u00e1vel de ambiente \u00e9 uma vari\u00e1vel no sistema que pode ser usada por programas.</p> <p>Um ambiente virtual \u00e9 um diret\u00f3rio com alguns arquivos.</p> <p>Informa\u00e7\u00e3o</p> <p>Esta p\u00e1gina lhe ensinar\u00e1 como usar ambientes virtuais e como eles funcionam.</p> <p>Se voc\u00ea estiver pronto para adotar uma ferramenta que gerencia tudo para voc\u00ea (incluindo a instala\u00e7\u00e3o do Python), experimente uv.</p>"},{"location":"virtual-environments/#criar-um-projeto","title":"Criar um Projeto","text":"<p>Primeiro, crie um diret\u00f3rio para seu projeto.</p> <p>O que normalmente fa\u00e7o \u00e9 criar um diret\u00f3rio chamado <code>code</code> dentro do meu diret\u00f3rio home/user.</p> <p>E dentro disso eu crio um diret\u00f3rio por projeto.</p> <pre><code>// V\u00e1 para o diret\u00f3rio inicial\n$ cd\n// Crie um diret\u00f3rio para todos os seus projetos de c\u00f3digo\n$ mkdir code\n// Entre nesse diret\u00f3rio de c\u00f3digo\n$ cd code\n// Crie um diret\u00f3rio para este projeto\n$ mkdir awesome-project\n// Entre no diret\u00f3rio do projeto\n$ cd awesome-project\n</code></pre>"},{"location":"virtual-environments/#crie-um-ambiente-virtual","title":"Crie um ambiente virtual","text":"<p>Ao come\u00e7ar a trabalhar em um projeto Python pela primeira vez, crie um ambiente virtual dentro do seu projeto.</p> <p>Dica</p> <p>Voc\u00ea s\u00f3 precisa fazer isso uma vez por projeto, n\u00e3o toda vez que trabalhar.</p> <code>venv</code><code>uv</code> <p>Para criar um ambiente virtual, voc\u00ea pode usar o m\u00f3dulo <code>venv</code> que vem com o Python.</p> <pre><code>$ python -m venv .venv\n</code></pre> O que esse comando significa <ul> <li><code>python</code>: usa o programa chamado <code>python</code></li> <li><code>-m</code>: chama um m\u00f3dulo como um script, n\u00f3s diremos a ele qual m\u00f3dulo vem em seguida</li> <li><code>venv</code>: usa o m\u00f3dulo chamado <code>venv</code> que normalmente vem instalado com o Python</li> <li><code>.venv</code>: cria o ambiente virtual no novo diret\u00f3rio <code>.venv</code></li> </ul> <p>Se voc\u00ea tiver o <code>uv</code> instalado, poder\u00e1 us\u00e1-lo para criar um ambiente virtual.</p> <pre><code>$ uv venv\n</code></pre> <p>Dica</p> <p>Por padr\u00e3o, <code>uv</code> criar\u00e1 um ambiente virtual em um diret\u00f3rio chamado <code>.venv</code>.</p> <p>Mas voc\u00ea pode personaliz\u00e1-lo passando um argumento adicional com o nome do diret\u00f3rio.</p> <p>Esse comando cria um novo ambiente virtual em um diret\u00f3rio chamado <code>.venv</code>.</p> <code>.venv</code> ou outro nome <p>Voc\u00ea pode criar o ambiente virtual em um diret\u00f3rio diferente, mas h\u00e1 uma conven\u00e7\u00e3o para cham\u00e1-lo de <code>.venv</code>.</p>"},{"location":"virtual-environments/#ative-o-ambiente-virtual","title":"Ative o ambiente virtual","text":"<p>Ative o novo ambiente virtual para que qualquer comando Python que voc\u00ea executar ou pacote que voc\u00ea instalar o utilize.</p> <p>Dica</p> <p>Fa\u00e7a isso toda vez que iniciar uma nova sess\u00e3o de terminal para trabalhar no projeto.</p> Linux, macOSWindows PowerShellWindows Bash <pre><code>$ source .venv/bin/activate\n</code></pre> <pre><code>$ .venv\\Scripts\\Activate.ps1\n</code></pre> <p>Ou se voc\u00ea usa o Bash para Windows (por exemplo, Git Bash):</p> <pre><code>$ source .venv/Scripts/activate\n</code></pre> <p>Dica</p> <p>Toda vez que voc\u00ea instalar um novo pacote naquele ambiente, ative o ambiente novamente.</p> <p>Isso garante que, se voc\u00ea usar um programa de terminal (CLI) instalado por esse pacote, voc\u00ea usar\u00e1 aquele do seu ambiente virtual e n\u00e3o qualquer outro que possa ser instalado globalmente, provavelmente com uma vers\u00e3o diferente do que voc\u00ea precisa.</p>"},{"location":"virtual-environments/#verifique-se-o-ambiente-virtual-esta-ativo","title":"Verifique se o ambiente virtual est\u00e1 ativo","text":"<p>Verifique se o ambiente virtual est\u00e1 ativo (o comando anterior funcionou).</p> <p>Dica</p> <p>Isso \u00e9 opcional, mas \u00e9 uma boa maneira de verificar se tudo est\u00e1 funcionando conforme o esperado e se voc\u00ea est\u00e1 usando o ambiente virtual pretendido.</p> Linux, macOS, Windows BashWindows PowerShell <pre><code>$ which python\n\n/home/user/code/awesome-project/.venv/bin/python\n</code></pre> <p>Se ele mostrar o bin\u00e1rio <code>python</code> em <code>.venv/bin/python</code>, dentro do seu projeto (neste caso <code>awesome-project</code>), ent\u00e3o funcionou. \ud83c\udf89</p> <pre><code>$ Get-Command python\n\nC:\\Users\\user\\code\\awesome-project\\.venv\\Scripts\\python\n</code></pre> <p>Se ele mostrar o bin\u00e1rio <code>python</code> em <code>.venv\\Scripts\\python</code>, dentro do seu projeto (neste caso <code>awesome-project</code>), ent\u00e3o funcionou. \ud83c\udf89</p>"},{"location":"virtual-environments/#atualizar-pip","title":"Atualizar <code>pip</code>","text":"<p>Dica</p> <p>Se voc\u00ea usar <code>uv</code>, voc\u00ea o usar\u00e1 para instalar coisas em vez do <code>pip</code>, ent\u00e3o n\u00e3o precisar\u00e1 atualizar o <code>pip</code>. \ud83d\ude0e</p> <p>Se voc\u00ea estiver usando <code>pip</code> para instalar pacotes (ele vem por padr\u00e3o com o Python), voc\u00ea deve atualiz\u00e1-lo para a vers\u00e3o mais recente.</p> <p>Muitos erros ex\u00f3ticos durante a instala\u00e7\u00e3o de um pacote s\u00e3o resolvidos apenas atualizando o <code>pip</code> primeiro.</p> <p>Dica</p> <p>Normalmente, voc\u00ea faria isso uma vez, logo ap\u00f3s criar o ambiente virtual.</p> <p>Certifique-se de que o ambiente virtual esteja ativo (com o comando acima) e execute:</p> <pre><code>$ python -m pip install --upgrade pip\n\n---&gt; 100%\n</code></pre>"},{"location":"virtual-environments/#adicionar-gitignore","title":"Adicionar <code>.gitignore</code>","text":"<p>Se voc\u00ea estiver usando Git (voc\u00ea deveria), adicione um arquivo <code>.gitignore</code> para excluir tudo em seu <code>.venv</code> do Git.</p> <p>Dica</p> <p>Se voc\u00ea usou <code>uv</code> para criar o ambiente virtual, ele j\u00e1 fez isso para voc\u00ea, voc\u00ea pode pular esta etapa. \ud83d\ude0e</p> <p>Dica</p> <p>Fa\u00e7a isso uma vez, logo ap\u00f3s criar o ambiente virtual.</p> <pre><code>$ echo \"*\" &gt; .venv/.gitignore\n</code></pre> O que esse comando significa <ul> <li><code>echo \"*\"</code>: ir\u00e1 \"imprimir\" o texto <code>*</code> no terminal (a pr\u00f3xima parte muda isso um pouco)</li> <li><code>&gt;</code>: qualquer coisa impressa no terminal pelo comando \u00e0 esquerda de <code>&gt;</code> n\u00e3o deve ser impressa, mas sim escrita no arquivo que vai \u00e0 direita de <code>&gt;</code></li> <li><code>.gitignore</code>: o nome do arquivo onde o texto deve ser escrito</li> </ul> <p>E <code>*</code> para Git significa \"tudo\". Ent\u00e3o, ele ignorar\u00e1 tudo no diret\u00f3rio <code>.venv</code>.</p> <p>Esse comando criar\u00e1 um arquivo <code>.gitignore</code> com o conte\u00fado:</p> <pre><code>*\n</code></pre>"},{"location":"virtual-environments/#instalar-pacotes","title":"Instalar Pacotes","text":"<p>Ap\u00f3s ativar o ambiente, voc\u00ea pode instalar pacotes nele.</p> <p>Dica</p> <p>Fa\u00e7a isso uma vez ao instalar ou atualizar os pacotes que seu projeto precisa.</p> <p>Se precisar atualizar uma vers\u00e3o ou adicionar um novo pacote, voc\u00ea far\u00e1 isso novamente.</p>"},{"location":"virtual-environments/#instalar-pacotes-diretamente","title":"Instalar pacotes diretamente","text":"<p>Se estiver com pressa e n\u00e3o quiser usar um arquivo para declarar os requisitos de pacote do seu projeto, voc\u00ea pode instal\u00e1-los diretamente.</p> <p>Dica</p> <p>\u00c9 uma (muito) boa ideia colocar os pacotes e vers\u00f5es que seu programa precisa em um arquivo (por exemplo <code>requirements.txt</code> ou <code>pyproject.toml</code>).</p> <code>pip</code><code>uv</code> <pre><code>$ pip install \"readyapi[standard]\"\n\n---&gt; 100%\n</code></pre> <p>Se voc\u00ea tem o <code>uv</code>:</p> <pre><code>$ uv pip install \"readyapi[standard]\"\n---&gt; 100%\n</code></pre>"},{"location":"virtual-environments/#instalar-a-partir-de-requirementstxt","title":"Instalar a partir de <code>requirements.txt</code>","text":"<p>Se voc\u00ea tiver um <code>requirements.txt</code>, agora poder\u00e1 us\u00e1-lo para instalar seus pacotes.</p> <code>pip</code><code>uv</code> <pre><code>$ pip install -r requirements.txt\n---&gt; 100%\n</code></pre> <p>Se voc\u00ea tem o <code>uv</code>:</p> <pre><code>$ uv pip install -r requirements.txt\n---&gt; 100%\n</code></pre> <code>requirements.txt</code> <p>Um <code>requirements.txt</code> com alguns pacotes poderia se parecer com:</p> <pre><code>readyapi[standard]==0.113.0\npydantic==2.8.0\n</code></pre>"},{"location":"virtual-environments/#execute-seu-programa","title":"Execute seu programa","text":"<p>Depois de ativar o ambiente virtual, voc\u00ea pode executar seu programa, e ele usar\u00e1 o Python dentro do seu ambiente virtual com os pacotes que voc\u00ea instalou l\u00e1.</p> <pre><code>$ python main.py\n\nHello World\n</code></pre>"},{"location":"virtual-environments/#configure-seu-editor","title":"Configure seu editor","text":"<p>Voc\u00ea provavelmente usaria um editor. Certifique-se de configur\u00e1-lo para usar o mesmo ambiente virtual que voc\u00ea criou (ele provavelmente o detectar\u00e1 automaticamente) para que voc\u00ea possa obter erros de preenchimento autom\u00e1tico e em linha.</p> <p>Por exemplo:</p> <ul> <li>VS Code</li> <li>PyCharm</li> </ul> <p>Dica</p> <p>Normalmente, voc\u00ea s\u00f3 precisa fazer isso uma vez, ao criar o ambiente virtual.</p>"},{"location":"virtual-environments/#desativar-o-ambiente-virtual","title":"Desativar o ambiente virtual","text":"<p>Quando terminar de trabalhar no seu projeto, voc\u00ea pode desativar o ambiente virtual.</p> <pre><code>$ deactivate\n</code></pre> <p>Dessa forma, quando voc\u00ea executar <code>python</code>, ele n\u00e3o tentar\u00e1 execut\u00e1-lo naquele ambiente virtual com os pacotes instalados nele.</p>"},{"location":"virtual-environments/#pronto-para-trabalhar","title":"Pronto para trabalhar","text":"<p>Agora voc\u00ea est\u00e1 pronto para come\u00e7ar a trabalhar no seu projeto.</p> <p>Dica</p> <p>Voc\u00ea quer entender o que \u00e9 tudo isso acima?</p> <p>Continue lendo. \ud83d\udc47\ud83e\udd13</p>"},{"location":"virtual-environments/#por-que-ambientes-virtuais","title":"Por que ambientes virtuais","text":"<p>Para trabalhar com o ReadyAPI, voc\u00ea precisa instalar o Python.</p> <p>Depois disso, voc\u00ea precisar\u00e1 instalar o ReadyAPI e quaisquer outros pacotes que queira usar.</p> <p>Para instalar pacotes, voc\u00ea normalmente usaria o comando <code>pip</code> que vem com o Python (ou alternativas semelhantes).</p> <p>No entanto, se voc\u00ea usar <code>pip</code> diretamente, os pacotes ser\u00e3o instalados no seu ambiente Python global (a instala\u00e7\u00e3o global do Python).</p>"},{"location":"virtual-environments/#o-problema","title":"O Problema","text":"<p>Ent\u00e3o, qual \u00e9 o problema em instalar pacotes no ambiente global do Python?</p> <p>Em algum momento, voc\u00ea provavelmente acabar\u00e1 escrevendo muitos programas diferentes que dependem de pacotes diferentes. E alguns desses projetos em que voc\u00ea trabalha depender\u00e3o de vers\u00f5es diferentes do mesmo pacote. \ud83d\ude31</p> <p>Por exemplo, voc\u00ea pode criar um projeto chamado <code>philosophers-stone</code>, este programa depende de outro pacote chamado <code>harry</code>, usando a vers\u00e3o <code>1</code>. Ent\u00e3o, voc\u00ea precisa instalar <code>harry</code>.</p> <pre><code>flowchart LR\n    stone(philosophers-stone) --&gt;|requires| harry-1[harry v1]</code></pre> <p>Ent\u00e3o, em algum momento depois, voc\u00ea cria outro projeto chamado <code>prisoner-of-azkaban</code>, e esse projeto tamb\u00e9m depende de <code>harry</code>, mas esse projeto precisa do <code>harry</code> vers\u00e3o <code>3</code>.</p> <pre><code>flowchart LR\n    azkaban(prisoner-of-azkaban) --&gt; |requires| harry-3[harry v3]</code></pre> <p>Mas agora o problema \u00e9 que, se voc\u00ea instalar os pacotes globalmente (no ambiente global) em vez de em um ambiente virtual local, voc\u00ea ter\u00e1 que escolher qual vers\u00e3o do <code>harry</code> instalar.</p> <p>Se voc\u00ea quiser executar <code>philosophers-stone</code>, precisar\u00e1 primeiro instalar <code>harry</code> vers\u00e3o <code>1</code>, por exemplo com:</p> <pre><code>$ pip install \"harry==1\"\n</code></pre> <p>E ent\u00e3o voc\u00ea acabaria com <code>harry</code> vers\u00e3o <code>1</code> instalado em seu ambiente Python global.</p> <pre><code>flowchart LR\n    subgraph global[global env]\n        harry-1[harry v1]\n    end\n    subgraph stone-project[philosophers-stone project]\n        stone(philosophers-stone) --&gt;|requires| harry-1\n    end</code></pre> <p>Mas se voc\u00ea quiser executar <code>prisoner-of-azkaban</code>, voc\u00ea precisar\u00e1 desinstalar <code>harry</code> vers\u00e3o <code>1</code> e instalar <code>harry</code> vers\u00e3o <code>3</code> (ou apenas instalar a vers\u00e3o <code>3</code> desinstalaria automaticamente a vers\u00e3o <code>1</code>).</p> <pre><code>$ pip install \"harry==3\"\n</code></pre> <p>E ent\u00e3o voc\u00ea acabaria com <code>harry</code> vers\u00e3o <code>3</code> instalado em seu ambiente Python global.</p> <p>E se voc\u00ea tentar executar <code>philosophers-stone</code> novamente, h\u00e1 uma chance de que n\u00e3o funcione porque ele precisa de <code>harry</code> vers\u00e3o <code>1</code>.</p> <pre><code>flowchart LR\n    subgraph global[global env]\n        harry-1[&lt;strike&gt;harry v1&lt;/strike&gt;]\n        style harry-1 fill:#ccc,stroke-dasharray: 5 5\n        harry-3[harry v3]\n    end\n    subgraph stone-project[philosophers-stone project]\n        stone(philosophers-stone) -.-x|\u26d4\ufe0f| harry-1\n    end\n    subgraph azkaban-project[prisoner-of-azkaban project]\n        azkaban(prisoner-of-azkaban) --&gt; |requires| harry-3\n    end</code></pre> <p>Dica</p> <p>\u00c9 muito comum em pacotes Python tentar ao m\u00e1ximo evitar altera\u00e7\u00f5es dr\u00e1sticas em novas vers\u00f5es, mas \u00e9 melhor prevenir do que remediar e instalar vers\u00f5es mais recentes intencionalmente e, quando poss\u00edvel, executar os testes para verificar se tudo est\u00e1 funcionando corretamente.</p> <p>Agora, imagine isso com muitos outros pacotes dos quais todos os seus projetos dependem. Isso \u00e9 muito dif\u00edcil de gerenciar. E voc\u00ea provavelmente acabaria executando alguns projetos com algumas vers\u00f5es incompat\u00edveis dos pacotes, e n\u00e3o saberia por que algo n\u00e3o est\u00e1 funcionando.</p> <p>Al\u00e9m disso, dependendo do seu sistema operacional (por exemplo, Linux, Windows, macOS), ele pode ter vindo com o Python j\u00e1 instalado. E, nesse caso, provavelmente tinha alguns pacotes pr\u00e9-instalados com algumas vers\u00f5es espec\u00edficas necess\u00e1rias para o seu sistema. Se voc\u00ea instalar pacotes no ambiente global do Python, poder\u00e1 acabar quebrando alguns dos programas que vieram com seu sistema operacional.</p>"},{"location":"virtual-environments/#onde-os-pacotes-sao-instalados","title":"Onde os pacotes s\u00e3o instalados","text":"<p>Quando voc\u00ea instala o Python, ele cria alguns diret\u00f3rios com alguns arquivos no seu computador.</p> <p>Alguns desses diret\u00f3rios s\u00e3o os respons\u00e1veis \u200b\u200bpor ter todos os pacotes que voc\u00ea instala.</p> <p>Quando voc\u00ea executa:</p> <pre><code>// N\u00e3o execute isso agora, \u00e9 apenas um exemplo \ud83e\udd13\n$ pip install \"readyapi[standard]\"\n---&gt; 100%\n</code></pre> <p>Isso far\u00e1 o download de um arquivo compactado com o c\u00f3digo ReadyAPI, normalmente do PyPI.</p> <p>Ele tamb\u00e9m far\u00e1 o download de arquivos para outros pacotes dos quais o ReadyAPI depende.</p> <p>Em seguida, ele extrair\u00e1 todos esses arquivos e os colocar\u00e1 em um diret\u00f3rio no seu computador.</p> <p>Por padr\u00e3o, ele colocar\u00e1 os arquivos baixados e extra\u00eddos no diret\u00f3rio que vem com a instala\u00e7\u00e3o do Python, que \u00e9 o ambiente global.</p>"},{"location":"virtual-environments/#o-que-sao-ambientes-virtuais","title":"O que s\u00e3o ambientes virtuais","text":"<p>A solu\u00e7\u00e3o para os problemas de ter todos os pacotes no ambiente global \u00e9 usar um ambiente virtual para cada projeto em que voc\u00ea trabalha.</p> <p>Um ambiente virtual \u00e9 um diret\u00f3rio, muito semelhante ao global, onde voc\u00ea pode instalar os pacotes para um projeto.</p> <p>Dessa forma, cada projeto ter\u00e1 seu pr\u00f3prio ambiente virtual (diret\u00f3rio <code>.venv</code>) com seus pr\u00f3prios pacotes.</p> <pre><code>flowchart TB\n    subgraph stone-project[philosophers-stone project]\n        stone(philosophers-stone) ---&gt;|requires| harry-1\n        subgraph venv1[.venv]\n            harry-1[harry v1]\n        end\n    end\n    subgraph azkaban-project[prisoner-of-azkaban project]\n        azkaban(prisoner-of-azkaban) ---&gt;|requires| harry-3\n        subgraph venv2[.venv]\n            harry-3[harry v3]\n        end\n    end\n    stone-project ~~~ azkaban-project</code></pre>"},{"location":"virtual-environments/#o-que-significa-ativar-um-ambiente-virtual","title":"O que significa ativar um ambiente virtual","text":"<p>Quando voc\u00ea ativa um ambiente virtual, por exemplo com:</p> Linux, macOSWindows PowerShellWindows Bash <pre><code>$ source .venv/bin/activate\n</code></pre> <pre><code>$ .venv\\Scripts\\Activate.ps1\n</code></pre> <p>Ou se voc\u00ea usa o Bash para Windows (por exemplo, Git Bash):</p> <pre><code>$ source .venv/Scripts/activate\n</code></pre> <p>Esse comando criar\u00e1 ou modificar\u00e1 algumas vari\u00e1veis \u200b\u200bde ambiente que estar\u00e3o dispon\u00edveis para os pr\u00f3ximos comandos.</p> <p>Uma dessas vari\u00e1veis \u200b\u200b\u00e9 a vari\u00e1vel <code>PATH</code>.</p> <p>Dica</p> <p>Voc\u00ea pode aprender mais sobre a vari\u00e1vel de ambiente <code>PATH</code> na se\u00e7\u00e3o Vari\u00e1veis \u200b\u200bde ambiente.</p> <p>A ativa\u00e7\u00e3o de um ambiente virtual adiciona seu caminho <code>.venv/bin</code> (no Linux e macOS) ou <code>.venv\\Scripts</code> (no Windows) \u00e0 vari\u00e1vel de ambiente <code>PATH</code>.</p> <p>Digamos que antes de ativar o ambiente, a vari\u00e1vel <code>PATH</code> estava assim:</p> Linux, macOSWindows <pre><code>/usr/bin:/bin:/usr/sbin:/sbin\n</code></pre> <p>Isso significa que o sistema procuraria programas em:</p> <ul> <li><code>/usr/bin</code></li> <li><code>/bin</code></li> <li><code>/usr/sbin</code></li> <li><code>/sbin</code></li> </ul> <pre><code>C:\\Windows\\System32\n</code></pre> <p>Isso significa que o sistema procuraria programas em:</p> <ul> <li><code>C:\\Windows\\System32</code></li> </ul> <p>Ap\u00f3s ativar o ambiente virtual, a vari\u00e1vel <code>PATH</code> ficaria mais ou menos assim:</p> Linux, macOSWindows <pre><code>/home/user/code/awesome-project/.venv/bin:/usr/bin:/bin:/usr/sbin:/sbin\n</code></pre> <p>Isso significa que o sistema agora come\u00e7ar\u00e1 a procurar primeiro por programas em:</p> <pre><code>/home/user/code/awesome-project/.venv/bin\n</code></pre> <p>antes de procurar nos outros diret\u00f3rios.</p> <p>Ent\u00e3o, quando voc\u00ea digita <code>python</code> no terminal, o sistema encontrar\u00e1 o programa Python em</p> <pre><code>/home/user/code/awesome-project/.venv/bin/python\n</code></pre> <p>e usa esse.</p> <pre><code>C:\\Users\\user\\code\\awesome-project\\.venv\\Scripts;C:\\Windows\\System32\n</code></pre> <p>Isso significa que o sistema agora come\u00e7ar\u00e1 a procurar primeiro por programas em:</p> <pre><code>C:\\Users\\user\\code\\awesome-project\\.venv\\Scripts\n</code></pre> <p>antes de procurar nos outros diret\u00f3rios.</p> <p>Ent\u00e3o, quando voc\u00ea digita <code>python</code> no terminal, o sistema encontrar\u00e1 o programa Python em</p> <pre><code>C:\\Users\\user\\code\\awesome-project\\.venv\\Scripts\\python\n</code></pre> <p>e usa esse.</p> <p>Um detalhe importante \u00e9 que ele colocar\u00e1 o caminho do ambiente virtual no in\u00edcio da vari\u00e1vel <code>PATH</code>. O sistema o encontrar\u00e1 antes de encontrar qualquer outro Python dispon\u00edvel. Dessa forma, quando voc\u00ea executar <code>python</code>, ele usar\u00e1 o Python do ambiente virtual em vez de qualquer outro <code>python</code> (por exemplo, um <code>python</code> de um ambiente global).</p> <p>Ativar um ambiente virtual tamb\u00e9m muda algumas outras coisas, mas esta \u00e9 uma das mais importantes.</p>"},{"location":"virtual-environments/#verificando-um-ambiente-virtual","title":"Verificando um ambiente virtual","text":"<p>Ao verificar se um ambiente virtual est\u00e1 ativo, por exemplo com:</p> Linux, macOS, Windows BashWindows PowerShell <pre><code>$ which python\n\n/home/user/code/awesome-project/.venv/bin/python\n</code></pre> <pre><code>$ Get-Command python\n\nC:\\Users\\user\\code\\awesome-project\\.venv\\Scripts\\python\n</code></pre> <p>Isso significa que o programa <code>python</code> que ser\u00e1 usado \u00e9 aquele no ambiente virtual.</p> <p>voc\u00ea usa <code>which</code> no Linux e macOS e <code>Get-Command</code> no Windows PowerShell.</p> <p>A maneira como esse comando funciona \u00e9 que ele vai e verifica na vari\u00e1vel de ambiente <code>PATH</code>, passando por cada caminho em ordem, procurando pelo programa chamado <code>python</code>. Uma vez que ele o encontre, ele mostrar\u00e1 o caminho para esse programa.</p> <p>A parte mais importante \u00e9 que quando voc\u00ea chama <code>`python</code>, esse \u00e9 exatamente o \"<code>python</code>\" que ser\u00e1 executado.</p> <p>Assim, voc\u00ea pode confirmar se est\u00e1 no ambiente virtual correto.</p> <p>Dica</p> <p>\u00c9 f\u00e1cil ativar um ambiente virtual, obter um Python e ent\u00e3o ir para outro projeto.</p> <p>E o segundo projeto n\u00e3o funcionaria porque voc\u00ea est\u00e1 usando o Python incorreto, de um ambiente virtual para outro projeto.</p> <p>\u00c9 \u00fatil poder verificar qual <code>python</code> est\u00e1 sendo usado. \ud83e\udd13</p>"},{"location":"virtual-environments/#por-que-desativar-um-ambiente-virtual","title":"Por que desativar um ambiente virtual","text":"<p>Por exemplo, voc\u00ea pode estar trabalhando em um projeto <code>philosophers-stone</code>, ativar esse ambiente virtual, instalar pacotes e trabalhar com esse ambiente.</p> <p>E ent\u00e3o voc\u00ea quer trabalhar em outro projeto <code>prisoner-of-azkaban</code>.</p> <p>Voc\u00ea vai para aquele projeto:</p> <pre><code>$ cd ~/code/prisoner-of-azkaban\n</code></pre> <p>Se voc\u00ea n\u00e3o desativar o ambiente virtual para <code>philosophers-stone</code>, quando voc\u00ea executar <code>python</code> no terminal, ele tentar\u00e1 usar o Python de <code>philosophers-stone</code>.</p> <pre><code>$ cd ~/code/prisoner-of-azkaban\n\n$ python main.py\n\n// Erro ao importar o Sirius, ele n\u00e3o est\u00e1 instalado \ud83d\ude31\nTraceback (most recent call last):\n    File \"main.py\", line 1, in &lt;module&gt;\n        import sirius\n</code></pre> <p>Mas se voc\u00ea desativar o ambiente virtual e ativar o novo para <code>prisoner-of-askaban</code>, quando voc\u00ea executar <code>python</code>, ele usar\u00e1 o Python do ambiente virtual em <code>prisoner-of-azkaban</code>.</p> <pre><code>$ cd ~/code/prisoner-of-azkaban\n\n// Voc\u00ea n\u00e3o precisa estar no diret\u00f3rio antigo para desativar, voc\u00ea pode fazer isso de onde estiver, mesmo depois de ir para o outro projeto \ud83d\ude0e\n$ deactivate\n\n// Ative o ambiente virtual em prisoner-of-azkaban/.venv \ud83d\ude80\n$ source .venv/bin/activate\n\n// Agora, quando voc\u00ea executar o python, ele encontrar\u00e1 o pacote sirius instalado neste ambiente virtual \u2728\n$ python main.py\n\nEu juro solenemente \ud83d\udc3a\n</code></pre>"},{"location":"virtual-environments/#alternativas","title":"Alternativas","text":"<p>Este \u00e9 um guia simples para voc\u00ea come\u00e7ar e lhe ensinar como tudo funciona por baixo.</p> <p>Existem muitas alternativas para gerenciar ambientes virtuais, depend\u00eancias de pacotes (requisitos) e projetos.</p> <p>Quando estiver pronto e quiser usar uma ferramenta para gerenciar todo o projeto, depend\u00eancias de pacotes, ambientes virtuais, etc., sugiro que voc\u00ea experimente o uv.</p> <p><code>uv</code> pode fazer muitas coisas, ele pode:</p> <ul> <li>Instalar o Python para voc\u00ea, incluindo vers\u00f5es diferentes</li> <li>Gerenciar o ambiente virtual para seus projetos</li> <li>Instalar pacotes</li> <li>Gerenciar depend\u00eancias e vers\u00f5es de pacotes para seu projeto</li> <li>Certifique-se de ter um conjunto exato de pacotes e vers\u00f5es para instalar, incluindo suas depend\u00eancias, para que voc\u00ea possa ter certeza de que pode executar seu projeto em produ\u00e7\u00e3o exatamente da mesma forma que em seu computador durante o desenvolvimento, isso \u00e9 chamado de bloqueio</li> <li>E muitas outras coisas</li> </ul>"},{"location":"virtual-environments/#conclusao","title":"Conclus\u00e3o","text":"<p>Se voc\u00ea leu e entendeu tudo isso, agora voc\u00ea sabe muito mais sobre ambientes virtuais do que muitos desenvolvedores por a\u00ed. \ud83e\udd13</p> <p>Saber esses detalhes provavelmente ser\u00e1 \u00fatil no futuro, quando voc\u00ea estiver depurando algo que parece complexo, mas voc\u00ea saber\u00e1 como tudo funciona. \ud83d\ude0e</p>"},{"location":"about/","title":"Sobre","text":"<p>Sobre o ReadyAPI, seus padr\u00f5es, inspira\u00e7\u00f5es e muito mais. \ud83e\udd13</p>"},{"location":"advanced/","title":"Guia de Usu\u00e1rio Avan\u00e7ado","text":""},{"location":"advanced/#recursos-adicionais","title":"Recursos Adicionais","text":"<p>O Tutorial - Guia de Usu\u00e1rio deve ser o suficiente para dar a voc\u00ea um tour por todos os principais recursos do ReadyAPI.</p> <p>Na pr\u00f3xima se\u00e7\u00e3o voc\u00ea ver\u00e1 outras op\u00e7\u00f5es, configura\u00e7\u00f5es, e recursos adicionais.</p> <p>Dica</p> <p>As pr\u00f3ximas se\u00e7\u00f5es n\u00e3o s\u00e3o necess\u00e1riamente \"avan\u00e7adas\"</p> <p>E \u00e9 poss\u00edvel que para seu caso de uso, a solu\u00e7\u00e3o esteja em uma delas.</p>"},{"location":"advanced/#leia-o-tutorial-primeiro","title":"Leia o Tutorial primeiro","text":"<p>Voc\u00ea ainda pode usar a maior parte dos recursos no ReadyAPI com o conhecimento do Tutorial - Guia de Usu\u00e1rio.</p> <p>E as pr\u00f3ximas se\u00e7\u00f5es assumem que voc\u00ea j\u00e1 leu ele, e que voc\u00ea conhece suas ideias principais.</p>"},{"location":"advanced/#curso-testdrivenio","title":"Curso TestDriven.io","text":"<p>Se voc\u00ea gostaria de fazer um curso avan\u00e7ado-iniciante para complementar essa se\u00e7\u00e3o da documenta\u00e7\u00e3o, voc\u00ea pode querer conferir: Test-Driven Development com ReadyAPI e Docker por TestDriven.io.</p> <p>Eles est\u00e3o atualmente doando 10% de todos os lucros para o desenvolvimento do ReadyAPI. \ud83c\udf89 \ud83d\ude04</p>"},{"location":"advanced/additional-responses/","title":"Retornos Adicionais no OpenAPI","text":"<p>Aviso</p> <p>Este \u00e9 um tema bem avan\u00e7ado.</p> <p>Se voc\u00ea est\u00e1 come\u00e7ando com o ReadyAPI, provavelmente voc\u00ea n\u00e3o precisa disso.</p> <p>Voc\u00ea pode declarar retornos adicionais, com c\u00f3digos de status adicionais, media types, descri\u00e7\u00f5es, etc.</p> <p>Essas respostas adicionais ser\u00e3o inclu\u00eddas no esquema do OpenAPI, e tamb\u00e9m aparecer\u00e3o na documenta\u00e7\u00e3o da API.</p> <p>Por\u00e9m para as respostas adicionais, voc\u00ea deve garantir que est\u00e1 retornando um <code>Response</code> como por exemplo o <code>JSONResponse</code> diretamente, junto com o c\u00f3digo de status e o conte\u00fado.</p>"},{"location":"advanced/additional-responses/#retorno-adicional-com-model","title":"Retorno Adicional com <code>model</code>","text":"<p>Voc\u00ea pode fornecer o par\u00e2metro <code>responses</code> aos seus decoradores de caminho.</p> <p>Este par\u00e2metro recebe um <code>dict</code>, as chaves s\u00e3o os c\u00f3digos de status para cada retorno, como por exemplo <code>200</code>, e os valores s\u00e3o um outro <code>dict</code> com a informa\u00e7\u00e3o de cada um deles.</p> <p>Cada um desses <code>dict</code> de retorno pode ter uma chave <code>model</code>, contendo um modelo do Pydantic, assim como o <code>response_model</code>.</p> <p>O ReadyAPI pegar\u00e1 este modelo, gerar\u00e1 o esquema JSON dele e incluir\u00e1 no local correto do OpenAPI.</p> <p>Por exemplo, para declarar um outro retorno com o status code <code>404</code> e um modelo do Pydantic chamado <code>Message</code>, voc\u00ea pode escrever:</p> Python 3.8+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.responses import JSONResponse\n\n\nclass Item(BaseModel):\n    id: str\n    value: str\n\n\nclass Message(BaseModel):\n    message: str\n\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\", response_model=Item, responses={404: {\"model\": Message}})\nasync def read_item(item_id: str):\n    if item_id == \"foo\":\n        return {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n    return JSONResponse(status_code=404, content={\"message\": \"Item not found\"})\n</code></pre> <p>Nota</p> <p>Lembre-se que voc\u00ea deve retornar o <code>JSONResponse</code> diretamente.</p> <p>Informa\u00e7\u00e3o</p> <p>A chave <code>model</code> n\u00e3o \u00e9 parte do OpenAPI.</p> <p>O ReadyAPI pegar\u00e1 o modelo do Pydantic, gerar\u00e1 o <code>JSON Schema</code>, e adicionar\u00e1 no local correto.</p> <p>O local correto \u00e9:</p> <ul> <li>Na chave <code>content</code>, que tem como valor um outro objeto JSON (<code>dict</code>) que cont\u00e9m:<ul> <li>Uma chave com o media type, como por exemplo <code>application/json</code>, que cont\u00e9m como valor um outro objeto JSON, contendo::<ul> <li>Uma chave <code>schema</code>, que cont\u00e9m como valor o JSON Schema do modelo, sendo este o local correto.<ul> <li>O ReadyAPI adiciona aqui a refer\u00eancia dos esquemas JSON globais que est\u00e3o localizados em outro lugar, ao inv\u00e9s de inclu\u00ed-lo diretamente. Deste modo, outras aplica\u00e7\u00f5es e clientes podem utilizar estes esquemas JSON diretamente, fornecer melhores ferramentas de gera\u00e7\u00e3o de c\u00f3digo, etc.</li> </ul> </li> </ul> </li> </ul> </li> </ul> <p>O retorno gerado no OpenAI para esta opera\u00e7\u00e3o de caminho ser\u00e1:</p> <pre><code>{\n    \"responses\": {\n        \"404\": {\n            \"description\": \"Additional Response\",\n            \"content\": {\n                \"application/json\": {\n                    \"schema\": {\n                        \"$ref\": \"#/components/schemas/Message\"\n                    }\n                }\n            }\n        },\n        \"200\": {\n            \"description\": \"Successful Response\",\n            \"content\": {\n                \"application/json\": {\n                    \"schema\": {\n                        \"$ref\": \"#/components/schemas/Item\"\n                    }\n                }\n            }\n        },\n        \"422\": {\n            \"description\": \"Validation Error\",\n            \"content\": {\n                \"application/json\": {\n                    \"schema\": {\n                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre> <p>Os esquemas s\u00e3o referenciados em outro local dentro do esquema OpenAPI:</p> <pre><code>{\n    \"components\": {\n        \"schemas\": {\n            \"Message\": {\n                \"title\": \"Message\",\n                \"required\": [\n                    \"message\"\n                ],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"message\": {\n                        \"title\": \"Message\",\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"Item\": {\n                \"title\": \"Item\",\n                \"required\": [\n                    \"id\",\n                    \"value\"\n                ],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"title\": \"Id\",\n                        \"type\": \"string\"\n                    },\n                    \"value\": {\n                        \"title\": \"Value\",\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"ValidationError\": {\n                \"title\": \"ValidationError\",\n                \"required\": [\n                    \"loc\",\n                    \"msg\",\n                    \"type\"\n                ],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"loc\": {\n                        \"title\": \"Location\",\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"msg\": {\n                        \"title\": \"Message\",\n                        \"type\": \"string\"\n                    },\n                    \"type\": {\n                        \"title\": \"Error Type\",\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"HTTPValidationError\": {\n                \"title\": \"HTTPValidationError\",\n                \"type\": \"object\",\n                \"properties\": {\n                    \"detail\": {\n                        \"title\": \"Detail\",\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/ValidationError\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"advanced/additional-responses/#media-types-adicionais-para-o-retorno-principal","title":"Media types adicionais para o retorno principal","text":"<p>Voc\u00ea pode utilizar o mesmo par\u00e2metro <code>responses</code> para adicionar diferentes media types para o mesmo retorno principal.</p> <p>Por exemplo, voc\u00ea pode adicionar um media type adicional de <code>image/png</code>, declarando que a sua opera\u00e7\u00e3o de caminho pode retornar um objeto JSON (com o media type <code>application/json</code>) ou uma imagem PNG:</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.responses import FileResponse\n\n\nclass Item(BaseModel):\n    id: str\n    value: str\n\n\napp = ReadyAPI()\n\n\n@app.get(\n    \"/items/{item_id}\",\n    response_model=Item,\n    responses={\n        200: {\n            \"content\": {\"image/png\": {}},\n            \"description\": \"Return the JSON item or an image.\",\n        }\n    },\n)\nasync def read_item(item_id: str, img: Union[bool, None] = None):\n    if img:\n        return FileResponse(\"image.png\", media_type=\"image/png\")\n    else:\n        return {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n</code></pre> <p>Nota</p> <p>Note que voc\u00ea deve retornar a imagem utilizando um <code>FileResponse</code> diretamente.</p> <p>Informa\u00e7\u00e3o</p> <p>A menos que voc\u00ea especifique um media type diferente explicitamente em seu par\u00e2metro <code>responses</code>, o ReadyAPI assumir\u00e1 que o retorno possui o mesmo media type contido na classe principal de retorno (padr\u00e3o <code>application/json</code>).</p> <p>Por\u00e9m se voc\u00ea especificou uma classe de retorno com o valor <code>None</code> como media type, o ReadyAPI utilizar\u00e1 <code>application/json</code> para qualquer retorno adicional que possui um modelo associado.</p>"},{"location":"advanced/additional-responses/#combinando-informacoes","title":"Combinando informa\u00e7\u00f5es","text":"<p>Voc\u00ea tamb\u00e9m pode combinar informa\u00e7\u00f5es de diferentes lugares, incluindo os par\u00e2metros <code>response_model</code>, <code>status_code</code>, e <code>responses</code>.</p> <p>Voc\u00ea pode declarar um <code>response_model</code>, utilizando o c\u00f3digo de status padr\u00e3o <code>200</code> (ou um customizado caso voc\u00ea precise), e depois adicionar informa\u00e7\u00f5es adicionais para esse mesmo retorno em <code>responses</code>, diretamente no esquema OpenAPI.</p> <p>O ReadyAPI manter\u00e1 as informa\u00e7\u00f5es adicionais do <code>responses</code>, e combinar\u00e1 com o esquema JSON do seu modelo.</p> <p>Por exemplo, voc\u00ea pode declarar um retorno com o c\u00f3digo de status <code>404</code> que utiliza um modelo do Pydantic que possui um <code>description</code> customizado.</p> <p>E um retorno com o c\u00f3digo de status <code>200</code> que utiliza o seu <code>response_model</code>, por\u00e9m inclui um <code>example</code> customizado:</p> Python 3.8+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.responses import JSONResponse\n\n\nclass Item(BaseModel):\n    id: str\n    value: str\n\n\nclass Message(BaseModel):\n    message: str\n\n\napp = ReadyAPI()\n\n\n@app.get(\n    \"/items/{item_id}\",\n    response_model=Item,\n    responses={\n        404: {\"model\": Message, \"description\": \"The item was not found\"},\n        200: {\n            \"description\": \"Item requested by ID\",\n            \"content\": {\n                \"application/json\": {\n                    \"example\": {\"id\": \"bar\", \"value\": \"The bar tenders\"}\n                }\n            },\n        },\n    },\n)\nasync def read_item(item_id: str):\n    if item_id == \"foo\":\n        return {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n    else:\n        return JSONResponse(status_code=404, content={\"message\": \"Item not found\"})\n</code></pre> <p>Isso ser\u00e1 combinado e inclu\u00eddo em seu OpenAPI, e disponibilizado na documenta\u00e7\u00e3o da sua API:</p> <p></p>"},{"location":"advanced/additional-responses/#combinar-retornos-predefinidos-e-personalizados","title":"Combinar retornos predefinidos e personalizados","text":"<p>Voc\u00ea pode querer possuir alguns retornos predefinidos que s\u00e3o aplicados para diversas opera\u00e7\u00f5es de caminho, por\u00e9m voc\u00ea deseja combinar com retornos personalizados que s\u00e3o necess\u00e1rios para cada opera\u00e7\u00e3o de caminho.</p> <p>Para estes casos, voc\u00ea pode utilizar a t\u00e9cnica do Python de \"desempacotamento\" de um <code>dict</code> utilizando <code>**dict_to_unpack</code>:</p> <pre><code>old_dict = {\n    \"old key\": \"old value\",\n    \"second old key\": \"second old value\",\n}\nnew_dict = {**old_dict, \"new key\": \"new value\"}\n</code></pre> <p>Aqui, o <code>new_dict</code> ter\u00e1 todos os pares de chave-valor do <code>old_dict</code> mais o novo par de chave-valor:</p> <pre><code>{\n    \"old key\": \"old value\",\n    \"second old key\": \"second old value\",\n    \"new key\": \"new value\",\n}\n</code></pre> <p>Voc\u00ea pode utilizar essa t\u00e9cnica para reutilizar alguns retornos predefinidos nas suas opera\u00e7\u00f5es de caminho e combin\u00e1-las com personaliza\u00e7\u00f5es adicionais.</p> <p>Por exemplo:</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.responses import FileResponse\n\n\nclass Item(BaseModel):\n    id: str\n    value: str\n\n\nresponses = {\n    404: {\"description\": \"Item not found\"},\n    302: {\"description\": \"The item was moved\"},\n    403: {\"description\": \"Not enough privileges\"},\n}\n\n\napp = ReadyAPI()\n\n\n@app.get(\n    \"/items/{item_id}\",\n    response_model=Item,\n    responses={**responses, 200: {\"content\": {\"image/png\": {}}}},\n)\nasync def read_item(item_id: str, img: Union[bool, None] = None):\n    if img:\n        return FileResponse(\"image.png\", media_type=\"image/png\")\n    else:\n        return {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n</code></pre>"},{"location":"advanced/additional-responses/#mais-informacoes-sobre-retornos-openapi","title":"Mais informa\u00e7\u00f5es sobre retornos OpenAPI","text":"<p>Para verificar exatamente o que voc\u00ea pode incluir nos retornos, voc\u00ea pode conferir estas se\u00e7\u00f5es na especifica\u00e7\u00e3o do OpenAPI:</p> <ul> <li>Objeto de Retorno OpenAPI, inclui o <code>Response Object</code>.</li> <li>Objeto de Retorno OpenAPI, voc\u00ea pode incluir qualquer coisa dele diretamente em cada retorno dentro do seu par\u00e2metro <code>responses</code>. Incluindo <code>description</code>, <code>headers</code>, <code>content</code> (dentro dele que voc\u00ea declara diferentes media types e esquemas JSON), e <code>links</code>.</li> </ul>"},{"location":"advanced/additional-status-codes/","title":"C\u00f3digos de status adicionais","text":"<p>Por padr\u00e3o, o ReadyAPI retornar\u00e1 as respostas utilizando o <code>JSONResponse</code>, adicionando o conte\u00fado do retorno da sua opera\u00e7\u00e3o de caminho dentro do <code>JSONResponse</code>.</p> <p>Ele usar\u00e1 o c\u00f3digo de status padr\u00e3o ou o que voc\u00ea definir na sua opera\u00e7\u00e3o de caminho.</p>"},{"location":"advanced/additional-status-codes/#codigos-de-status-adicionais_1","title":"C\u00f3digos de status adicionais","text":"<p>Caso voc\u00ea queira retornar c\u00f3digos de status adicionais al\u00e9m do c\u00f3digo principal, voc\u00ea pode fazer isso retornando um <code>Response</code> diretamente, como por exemplo um <code>JSONResponse</code>, e definir os c\u00f3digos de status adicionais diretamente.</p> <p>Por exemplo, vamos dizer que voc\u00ea deseja ter uma opera\u00e7\u00e3o de caminho que permita atualizar itens, e retornar um c\u00f3digo de status HTTP 200 \"OK\" quando for bem sucedido.</p> <p>Mas voc\u00ea tamb\u00e9m deseja aceitar novos itens. E quando os itens n\u00e3o existiam, ele os cria, e retorna o c\u00f3digo de status HTTP 201 \"Created.</p> <p>Para conseguir isso, importe <code>JSONResponse</code> e retorne o seu conte\u00fado diretamente, definindo o <code>status_code</code> que voc\u00ea deseja:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Body, ReadyAPI, status\nfrom readyapi.responses import JSONResponse\n\napp = ReadyAPI()\n\nitems = {\"foo\": {\"name\": \"Fighters\", \"size\": 6}, \"bar\": {\"name\": \"Tenders\", \"size\": 3}}\n\n\n@app.put(\"/items/{item_id}\")\nasync def upsert_item(\n    item_id: str,\n    name: Annotated[str | None, Body()] = None,\n    size: Annotated[int | None, Body()] = None,\n):\n    if item_id in items:\n        item = items[item_id]\n        item[\"name\"] = name\n        item[\"size\"] = size\n        return item\n    else:\n        item = {\"name\": name, \"size\": size}\n        items[item_id] = item\n        return JSONResponse(status_code=status.HTTP_201_CREATED, content=item)\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Body, ReadyAPI, status\nfrom readyapi.responses import JSONResponse\n\napp = ReadyAPI()\n\nitems = {\"foo\": {\"name\": \"Fighters\", \"size\": 6}, \"bar\": {\"name\": \"Tenders\", \"size\": 3}}\n\n\n@app.put(\"/items/{item_id}\")\nasync def upsert_item(\n    item_id: str,\n    name: Annotated[Union[str, None], Body()] = None,\n    size: Annotated[Union[int, None], Body()] = None,\n):\n    if item_id in items:\n        item = items[item_id]\n        item[\"name\"] = name\n        item[\"size\"] = size\n        return item\n    else:\n        item = {\"name\": name, \"size\": size}\n        items[item_id] = item\n        return JSONResponse(status_code=status.HTTP_201_CREATED, content=item)\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Body, ReadyAPI, status\nfrom readyapi.responses import JSONResponse\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\nitems = {\"foo\": {\"name\": \"Fighters\", \"size\": 6}, \"bar\": {\"name\": \"Tenders\", \"size\": 3}}\n\n\n@app.put(\"/items/{item_id}\")\nasync def upsert_item(\n    item_id: str,\n    name: Annotated[Union[str, None], Body()] = None,\n    size: Annotated[Union[int, None], Body()] = None,\n):\n    if item_id in items:\n        item = items[item_id]\n        item[\"name\"] = name\n        item[\"size\"] = size\n        return item\n    else:\n        item = {\"name\": name, \"size\": size}\n        items[item_id] = item\n        return JSONResponse(status_code=status.HTTP_201_CREATED, content=item)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Body, ReadyAPI, status\nfrom readyapi.responses import JSONResponse\n\napp = ReadyAPI()\n\nitems = {\"foo\": {\"name\": \"Fighters\", \"size\": 6}, \"bar\": {\"name\": \"Tenders\", \"size\": 3}}\n\n\n@app.put(\"/items/{item_id}\")\nasync def upsert_item(\n    item_id: str,\n    name: str | None = Body(default=None),\n    size: int | None = Body(default=None),\n):\n    if item_id in items:\n        item = items[item_id]\n        item[\"name\"] = name\n        item[\"size\"] = size\n        return item\n    else:\n        item = {\"name\": name, \"size\": size}\n        items[item_id] = item\n        return JSONResponse(status_code=status.HTTP_201_CREATED, content=item)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Body, ReadyAPI, status\nfrom readyapi.responses import JSONResponse\n\napp = ReadyAPI()\n\nitems = {\"foo\": {\"name\": \"Fighters\", \"size\": 6}, \"bar\": {\"name\": \"Tenders\", \"size\": 3}}\n\n\n@app.put(\"/items/{item_id}\")\nasync def upsert_item(\n    item_id: str,\n    name: Union[str, None] = Body(default=None),\n    size: Union[int, None] = Body(default=None),\n):\n    if item_id in items:\n        item = items[item_id]\n        item[\"name\"] = name\n        item[\"size\"] = size\n        return item\n    else:\n        item = {\"name\": name, \"size\": size}\n        items[item_id] = item\n        return JSONResponse(status_code=status.HTTP_201_CREATED, content=item)\n</code></pre> <p>Aviso</p> <p>Quando voc\u00ea retorna um <code>Response</code> diretamente, como no exemplo acima, ele ser\u00e1 retornado diretamente.</p> <p>Ele n\u00e3o ser\u00e1 serializado com um modelo, etc.</p> <p>Garanta que ele tenha toda informa\u00e7\u00e3o que voc\u00ea deseja, e que os valores sejam um JSON v\u00e1lido (caso voc\u00ea esteja usando <code>JSONResponse</code>).</p> <p>Detalhes t\u00e9cnicos</p> <p>Voc\u00ea tamb\u00e9m pode utilizar <code>from starlette.responses import JSONResponse</code>.</p> <p>O ReadyAPI disponibiliza o <code>starlette.responses</code> como <code>readyapi.responses</code> apenas por conveni\u00eancia para voc\u00ea, o programador. Por\u00e9m a maioria dos retornos dispon\u00edveis vem diretamente do Starlette. O mesmo com <code>status</code>.</p>"},{"location":"advanced/additional-status-codes/#openapi-e-documentacao-da-api","title":"OpenAPI e documenta\u00e7\u00e3o da API","text":"<p>Se voc\u00ea retorna c\u00f3digos de status adicionais e retornos diretamente, eles n\u00e3o ser\u00e3o inclu\u00eddos no esquema do OpenAPI (a documenta\u00e7\u00e3o da API), porque o ReadyAPI n\u00e3o tem como saber de antem\u00e3o o que ser\u00e1 retornado.</p> <p>Mas voc\u00ea pode documentar isso no seu c\u00f3digo, utilizando: Retornos Adicionais.</p>"},{"location":"advanced/advanced-dependencies/","title":"Depend\u00eancias avan\u00e7adas","text":""},{"location":"advanced/advanced-dependencies/#dependencias-parametrizadas","title":"Depend\u00eancias parametrizadas","text":"<p>Todas as depend\u00eancias que vimos at\u00e9 agora s\u00e3o fun\u00e7\u00f5es ou classes fixas.</p> <p>Mas podem ocorrer casos onde voc\u00ea deseja ser capaz de definir par\u00e2metros na depend\u00eancia, sem ter a necessidade de declarar diversas fun\u00e7\u00f5es ou classes.</p> <p>Vamos imaginar que queremos ter uma depend\u00eancia que verifica se o par\u00e2metro de consulta <code>q</code> possui um valor fixo.</p> <p>Por\u00e9m n\u00f3s queremos poder parametrizar o conte\u00fado fixo.</p>"},{"location":"advanced/advanced-dependencies/#uma-instancia-chamavel","title":"Uma inst\u00e2ncia \"cham\u00e1vel\"","text":"<p>Em Python existe uma maneira de fazer com que uma inst\u00e2ncia de uma classe seja um \"cham\u00e1vel\".</p> <p>N\u00e3o propriamente a classe (que j\u00e1 \u00e9 um cham\u00e1vel), mas a inst\u00e2ncia desta classe.</p> <p>Para fazer isso, n\u00f3s declaramos o m\u00e9todo <code>__call__</code>:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: bool = Depends(checker)):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> <p>Neste caso, o <code>__call__</code> \u00e9 o que o ReadyAPI utilizar\u00e1 para verificar par\u00e2metros adicionais e sub depend\u00eancias, e isso \u00e9 o que ser\u00e1 chamado para passar o valor ao par\u00e2metro na sua fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota posteriormente.</p>"},{"location":"advanced/advanced-dependencies/#parametrizar-a-instancia","title":"Parametrizar a inst\u00e2ncia","text":"<p>E agora, n\u00f3s podemos utilizar o <code>__init__</code> para declarar os par\u00e2metros da inst\u00e2ncia que podemos utilizar para \"parametrizar\" a depend\u00eancia:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: bool = Depends(checker)):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> <p>Neste caso, o ReadyAPI nunca tocar\u00e1 ou se importar\u00e1 com o <code>__init__</code>, n\u00f3s vamos utilizar diretamente em nosso c\u00f3digo.</p>"},{"location":"advanced/advanced-dependencies/#crie-uma-instancia","title":"Crie uma inst\u00e2ncia","text":"<p>N\u00f3s poder\u00edamos criar uma inst\u00e2ncia desta classe com:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: bool = Depends(checker)):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> <p>E deste modo n\u00f3s podemos \"parametrizar\" a nossa depend\u00eancia, que agora possui <code>\"bar\"</code> dentro dele, como o atributo <code>checker.fixed_content</code>.</p>"},{"location":"advanced/advanced-dependencies/#utilize-a-instancia-como-dependencia","title":"Utilize a inst\u00e2ncia como depend\u00eancia","text":"<p>Ent\u00e3o, n\u00f3s podemos utilizar este <code>checker</code> em um <code>Depends(checker)</code>, no lugar de <code>Depends(FixedContentQueryChecker)</code>, porque a depend\u00eancia \u00e9 a inst\u00e2ncia, <code>checker</code>, e n\u00e3o a pr\u00f3pria classe.</p> <p>E quando a depend\u00eancia for resolvida, o ReadyAPI chamar\u00e1 este <code>checker</code> como:</p> <pre><code>checker(q=\"somequery\")\n</code></pre> <p>...e passar o que quer que isso retorne como valor da depend\u00eancia em nossa fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota como o par\u00e2metro <code>fixed_content_included</code>:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: bool = Depends(checker)):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> <p>Dica</p> <p>Tudo isso parece n\u00e3o ser natural. E pode n\u00e3o estar muito claro ou aparentar ser \u00fatil ainda.</p> <p>Estes exemplos s\u00e3o intencionalmente simples, por\u00e9m mostram como tudo funciona.</p> <p>Nos cap\u00edtulos sobre seguran\u00e7a, existem fun\u00e7\u00f5es utilit\u00e1rias que s\u00e3o implementadas desta maneira.</p> <p>Se voc\u00ea entendeu tudo isso, voc\u00ea j\u00e1 sabe como essas fun\u00e7\u00f5es utilit\u00e1rias para seguran\u00e7a funcionam por debaixo dos panos.</p>"},{"location":"advanced/async-tests/","title":"Testes Ass\u00edncronos","text":"<p>Voc\u00ea j\u00e1 viu como testar as suas aplica\u00e7\u00f5es ReadyAPI utilizando o <code>TestClient</code> que \u00e9 fornecido. At\u00e9 agora, voc\u00ea viu apenas como escrever testes s\u00edncronos, sem utilizar fun\u00e7\u00f5es <code>async</code>.</p> <p>Ser capaz de utilizar fun\u00e7\u00f5es ass\u00edncronas em seus testes pode ser \u00fatil, por exemplo, quando voc\u00ea est\u00e1 realizando uma consulta em seu banco de dados de maneira ass\u00edncrona. Imagine que voc\u00ea deseja testar realizando requisi\u00e7\u00f5es para a sua aplica\u00e7\u00e3o ReadyAPI e depois verificar que a sua aplica\u00e7\u00e3o inseriu corretamente as informa\u00e7\u00f5es no banco de dados, ao utilizar uma biblioteca ass\u00edncrona para banco de dados.</p> <p>Vamos ver como n\u00f3s podemos fazer isso funcionar.</p>"},{"location":"advanced/async-tests/#pytestmarkanyio","title":"pytest.mark.anyio","text":"<p>Se quisermos chamar fun\u00e7\u00f5es ass\u00edncronas em nossos testes, as nossas fun\u00e7\u00f5es de teste precisam ser ass\u00edncronas. O AnyIO oferece um plugin bem legal para isso, que nos permite especificar que algumas das nossas fun\u00e7\u00f5es de teste precisam ser chamadas de forma ass\u00edncrona.</p>"},{"location":"advanced/async-tests/#httpx","title":"HTTPX","text":"<p>Mesmo que a sua aplica\u00e7\u00e3o ReadyAPI utilize fun\u00e7\u00f5es normais com <code>def</code> no lugar de <code>async def</code>, ela ainda \u00e9 uma aplica\u00e7\u00e3o <code>async</code> por baixo dos panos.</p> <p>O <code>TestClient</code> faz algumas m\u00e1gicas para invocar a aplica\u00e7\u00e3o ReadyAPI ass\u00edncrona em suas fun\u00e7\u00f5es <code>def</code> normais, utilizando o pytest padr\u00e3o. Por\u00e9m a m\u00e1gica n\u00e3o acontece mais quando n\u00f3s estamos utilizando dentro de fun\u00e7\u00f5es ass\u00edncronas. Ao executar os nossos testes de forma ass\u00edncrona, n\u00f3s n\u00e3o podemos mais utilizar o <code>TestClient</code> dentro das nossas fun\u00e7\u00f5es de teste.</p> <p>O <code>TestClient</code> \u00e9 baseado no HTTPX, e felizmente n\u00f3s podemos utiliz\u00e1-lo diretamente para testar a API.</p>"},{"location":"advanced/async-tests/#exemplo","title":"Exemplo","text":"<p>Para um exemplos simples, vamos considerar uma estrutura de arquivos semelhante ao descrito em Bigger Applications e Testing:</p> <pre><code>.\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 test_main.py\n</code></pre> <p>O arquivo <code>main.py</code> teria:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Tomato\"}\n</code></pre> <p>O arquivo <code>test_main.py</code> teria os testes para para o arquivo <code>main.py</code>, ele poderia ficar assim:</p> Python 3.8+ <pre><code>import pytest\nfrom httpx import ASGITransport, AsyncClient\n\nfrom .main import app\n\n\n@pytest.mark.anyio\nasync def test_root():\n    async with AsyncClient(\n        transport=ASGITransport(app=app), base_url=\"http://test\"\n    ) as ac:\n        response = await ac.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"Tomato\"}\n</code></pre>"},{"location":"advanced/async-tests/#executa-lo","title":"Execut\u00e1-lo","text":"<p>Voc\u00ea pode executar os seus testes normalmente via:</p> <pre><code>$ pytest\n\n---&gt; 100%\n</code></pre>"},{"location":"advanced/async-tests/#em-detalhes","title":"Em Detalhes","text":"<p>O marcador <code>@pytest.mark.anyio</code> informa ao pytest que esta fun\u00e7\u00e3o de teste deve ser invocada de maneira ass\u00edncrona:</p> Python 3.8+ <pre><code>import pytest\nfrom httpx import ASGITransport, AsyncClient\n\nfrom .main import app\n\n\n@pytest.mark.anyio\nasync def test_root():\n    async with AsyncClient(\n        transport=ASGITransport(app=app), base_url=\"http://test\"\n    ) as ac:\n        response = await ac.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"Tomato\"}\n</code></pre> <p>Dica</p> <p>Note que a fun\u00e7\u00e3o de teste \u00e9 <code>async def</code> agora, no lugar de apenas <code>def</code> como quando est\u00e1vamos utilizando o <code>TestClient</code> anteriormente.</p> <p>Ent\u00e3o podemos criar um <code>AsyncClient</code> com a aplica\u00e7\u00e3o, e enviar requisi\u00e7\u00f5es ass\u00edncronas para ela utilizando <code>await</code>.</p> Python 3.8+ <pre><code>import pytest\nfrom httpx import ASGITransport, AsyncClient\n\nfrom .main import app\n\n\n@pytest.mark.anyio\nasync def test_root():\n    async with AsyncClient(\n        transport=ASGITransport(app=app), base_url=\"http://test\"\n    ) as ac:\n        response = await ac.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"Tomato\"}\n</code></pre> <p>Isso \u00e9 equivalente a:</p> <pre><code>response = client.get('/')\n</code></pre> <p>...que n\u00f3s utilizamos para fazer as nossas requisi\u00e7\u00f5es utilizando o <code>TestClient</code>.</p> <p>Dica</p> <p>Note que n\u00f3s estamos utilizando async/await com o novo <code>AsyncClient</code> - a requisi\u00e7\u00e3o \u00e9 ass\u00edncrona.</p> <p>Aviso</p> <p>Se a sua aplica\u00e7\u00e3o depende dos eventos de vida \u00fatil (lifespan), o <code>AsyncClient</code> n\u00e3o acionar\u00e1 estes eventos. Para garantir que eles s\u00e3o acionados, utilize o <code>LifespanManager</code> do florimondmanca/asgi-lifespan.</p>"},{"location":"advanced/async-tests/#outras-chamadas-de-funcoes-assincronas","title":"Outras Chamadas de Fun\u00e7\u00f5es Ass\u00edncronas","text":"<p>Como a fun\u00e7\u00e3o de teste agora \u00e9 ass\u00edncrona, voc\u00ea pode chamar (e <code>esperar</code>) outras fun\u00e7\u00f5es <code>async</code> al\u00e9m de enviar requisi\u00e7\u00f5es para a sua aplica\u00e7\u00e3o ReadyAPI em seus testes, exatamente como voc\u00ea as chamaria em qualquer outro lugar do seu c\u00f3digo.</p> <p>Dica</p> <p>Se voc\u00ea se deparar com um <code>RuntimeError: Task attached to a different loop</code> ao integrar fun\u00e7\u00f5es ass\u00edncronas em seus testes (e.g. ao utilizar o MotorClient do MongoDB) Lembre-se de instanciar objetos que precisam de um loop de eventos (event loop) apenas em fun\u00e7\u00f5es ass\u00edncronas, e.g. um \"callback\" <code>'@app.on_event(\"startup\")</code>.</p>"},{"location":"advanced/behind-a-proxy/","title":"Atr\u00e1s de um Proxy","text":"<p>Em algumas situa\u00e7\u00f5es, voc\u00ea pode precisar usar um servidor proxy como Traefik ou Nginx com uma configura\u00e7\u00e3o que adiciona um prefixo de caminho extra que n\u00e3o \u00e9 visto pela sua aplica\u00e7\u00e3o.</p> <p>Nesses casos, voc\u00ea pode usar <code>root_path</code> para configurar sua aplica\u00e7\u00e3o.</p> <p>O <code>root_path</code> \u00e9 um mecanismo fornecido pela especifica\u00e7\u00e3o ASGI (que o ReadyAPI utiliza, atrav\u00e9s do Starlette).</p> <p>O <code>root_path</code> \u00e9 usado para lidar com esses casos espec\u00edficos.</p> <p>E tamb\u00e9m \u00e9 usado internamente ao montar sub-aplica\u00e7\u00f5es.</p>"},{"location":"advanced/behind-a-proxy/#proxy-com-um-prefixo-de-caminho-removido","title":"Proxy com um prefixo de caminho removido","text":"<p>Ter um proxy com um prefixo de caminho removido, nesse caso, significa que voc\u00ea poderia declarar um caminho em <code>/app</code> no seu c\u00f3digo, mas ent\u00e3o, voc\u00ea adiciona uma camada no topo (o proxy) que colocaria sua aplica\u00e7\u00e3o ReadyAPI sob um caminho como <code>/api/v1</code>.</p> <p>Nesse caso, o caminho original <code>/app</code> seria servido em <code>/api/v1/app</code>.</p> <p>Embora todo o seu c\u00f3digo esteja escrito assumindo que existe apenas <code>/app</code>.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Request\n\napp = ReadyAPI()\n\n\n@app.get(\"/app\")\ndef read_main(request: Request):\n    return {\"message\": \"Hello World\", \"root_path\": request.scope.get(\"root_path\")}\n</code></pre> <p>E o proxy estaria \"removendo\" o prefixo do caminho dinamicamente antes de transmitir a solicita\u00e7\u00e3o para o servidor da aplica\u00e7\u00e3o (provavelmente Uvicorn via CLI do ReadyAPI), mantendo sua aplica\u00e7\u00e3o convencida de que est\u00e1 sendo servida em <code>/app</code>, para que voc\u00ea n\u00e3o precise atualizar todo o seu c\u00f3digo para incluir o prefixo <code>/api/v1</code>.</p> <p>At\u00e9 aqui, tudo funcionaria normalmente.</p> <p>Mas ent\u00e3o, quando voc\u00ea abre a interface de documenta\u00e7\u00e3o integrada (o frontend), ele esperaria obter o OpenAPI schema em <code>/openapi.json</code>, em vez de <code>/api/v1/openapi.json</code>.</p> <p>Ent\u00e3o, o frontend (que roda no navegador) tentaria acessar <code>/openapi.json</code> e n\u00e3o conseguiria obter o OpenAPI schema.</p> <p>Como temos um proxy com um prefixo de caminho de <code>/api/v1</code> para nossa aplica\u00e7\u00e3o, o frontend precisa buscar o OpenAPI schema em <code>/api/v1/openapi.json</code>.</p> <pre><code>graph LR\n\nbrowser(\"Browser\")\nproxy[\"Proxy on http://0.0.0.0:9999/api/v1/app\"]\nserver[\"Server on http://127.0.0.1:8000/app\"]\n\nbrowser --&gt; proxy\nproxy --&gt; server</code></pre> <p>Dica</p> <p>O IP <code>0.0.0.0</code> \u00e9 comumente usado para significar que o programa escuta em todos os IPs dispon\u00edveis naquela m\u00e1quina/servidor.</p> <p>A interface de documenta\u00e7\u00e3o tamb\u00e9m precisaria do OpenAPI schema para declarar que API <code>server</code> est\u00e1 localizado em <code>/api/v1</code> (atr\u00e1s do proxy). Por exemplo:</p> <pre><code>{\n    \"openapi\": \"3.1.0\",\n    // Mais coisas aqui\n    \"servers\": [\n        {\n            \"url\": \"/api/v1\"\n        }\n    ],\n    \"paths\": {\n            // Mais coisas aqui\n    }\n}\n</code></pre> <p>Neste exemplo, o \"Proxy\" poderia ser algo como Traefik. E o servidor seria algo como CLI do ReadyAPI com Uvicorn, executando sua aplica\u00e7\u00e3o ReadyAPI.</p>"},{"location":"advanced/behind-a-proxy/#fornecendo-o-root_path","title":"Fornecendo o <code>root_path</code>","text":"<p>Para conseguir isso, voc\u00ea pode usar a op\u00e7\u00e3o de linha de comando <code>--root-path</code> assim:</p> <pre><code>$ readyapi run main.py --root-path /api/v1\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>Se voc\u00ea usar Hypercorn, ele tamb\u00e9m tem a op\u00e7\u00e3o <code>--root-path</code>.</p> <p>Detalhes T\u00e9cnicos</p> <p>A especifica\u00e7\u00e3o ASGI define um <code>root_path</code> para esse caso de uso.</p> <p>E a op\u00e7\u00e3o de linha de comando <code>--root-path</code> fornece esse <code>root_path</code>.</p>"},{"location":"advanced/behind-a-proxy/#verificando-o-root_path-atual","title":"Verificando o <code>root_path</code> atual","text":"<p>Voc\u00ea pode obter o <code>root_path</code> atual usado pela sua aplica\u00e7\u00e3o para cada solicita\u00e7\u00e3o, ele faz parte do dicion\u00e1rio <code>scope</code> (que faz parte da especifica\u00e7\u00e3o ASGI).</p> <p>Aqui estamos incluindo ele na mensagem apenas para fins de demonstra\u00e7\u00e3o.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Request\n\napp = ReadyAPI()\n\n\n@app.get(\"/app\")\ndef read_main(request: Request):\n    return {\"message\": \"Hello World\", \"root_path\": request.scope.get(\"root_path\")}\n</code></pre> <p>Ent\u00e3o, se voc\u00ea iniciar o Uvicorn com:</p> <pre><code>$ readyapi run main.py --root-path /api/v1\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>A resposta seria algo como:</p> <pre><code>{\n    \"message\": \"Hello World\",\n    \"root_path\": \"/api/v1\"\n}\n</code></pre>"},{"location":"advanced/behind-a-proxy/#configurando-o-root_path-na-aplicacao-readyapi","title":"Configurando o <code>root_path</code> na aplica\u00e7\u00e3o ReadyAPI","text":"<p>Alternativamente, se voc\u00ea n\u00e3o tiver uma maneira de fornecer uma op\u00e7\u00e3o de linha de comando como <code>--root-path</code> ou equivalente, voc\u00ea pode definir o par\u00e2metro <code>--root-path</code> ao criar sua aplica\u00e7\u00e3o ReadyAPI:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Request\n\napp = ReadyAPI(root_path=\"/api/v1\")\n\n\n@app.get(\"/app\")\ndef read_main(request: Request):\n    return {\"message\": \"Hello World\", \"root_path\": request.scope.get(\"root_path\")}\n</code></pre> <p>Passar o <code>root_path</code>h para <code>ReadyAPI</code> seria o equivalente a passar a op\u00e7\u00e3o de linha de comando <code>--root-path</code> para Uvicorn ou Hypercorn.</p>"},{"location":"advanced/behind-a-proxy/#sobre-root_path","title":"Sobre <code>root_path</code>","text":"<p>Tenha em mente que o servidor (Uvicorn) n\u00e3o usar\u00e1 esse <code>root_path</code> para nada al\u00e9m de pass\u00e1-lo para a aplica\u00e7\u00e3o.</p> <p>Mas se voc\u00ea acessar com seu navegador http://127.0.0.1:8000/app voc\u00ea ver\u00e1 a resposta normal:</p> <pre><code>{\n    \"message\": \"Hello World\",\n    \"root_path\": \"/api/v1\"\n}\n</code></pre> <p>Portanto, ele n\u00e3o esperar\u00e1 ser acessado em <code>http://127.0.0.1:8000/api/v1/app</code>.</p> <p>O Uvicorn esperar\u00e1 que o proxy acesse o Uvicorn em <code>http://127.0.0.1:8000/app</code>, e ent\u00e3o seria responsabilidade do proxy adicionar o prefixo extra <code>/api/v1</code> no topo.</p>"},{"location":"advanced/behind-a-proxy/#sobre-proxies-com-um-prefixo-de-caminho-removido","title":"Sobre proxies com um prefixo de caminho removido","text":"<p>Tenha em mente que um proxy com prefixo de caminho removido \u00e9 apenas uma das maneiras de configur\u00e1-lo.</p> <p>Provavelmente, em muitos casos, o padr\u00e3o ser\u00e1 que o proxy n\u00e3o tenha um prefixo de caminho removido.</p> <p>Em um caso como esse (sem um prefixo de caminho removido), o proxy escutaria em algo como <code>https://myawesomeapp.com</code>, e ent\u00e3o se o navegador acessar <code>https://myawesomeapp.com/api/v1/app</code> e seu servidor (por exemplo, Uvicorn) escutar em <code>http://127.0.0.1:8000</code> o proxy (sem um prefixo de caminho removido) acessaria o Uvicorn no mesmo caminho: <code>http://127.0.0.1:8000/api/v1/app</code>.</p>"},{"location":"advanced/behind-a-proxy/#testando-localmente-com-traefik","title":"Testando localmente com Traefik","text":"<p>Voc\u00ea pode facilmente executar o experimento localmente com um prefixo de caminho removido usando Traefik.</p> <p>Fa\u00e7a o download do Traefik., Ele \u00e9 um \u00fanico bin\u00e1rio e voc\u00ea pode extrair o arquivo compactado e execut\u00e1-lo diretamente do terminal.</p> <p>Ent\u00e3o, crie um arquivo <code>traefik.toml</code> com:</p> <pre><code>[entryPoints]\n  [entryPoints.http]\n    address = \":9999\"\n\n[providers]\n  [providers.file]\n    filename = \"routes.toml\"\n</code></pre> <p>Isso diz ao Traefik para escutar na porta 9999 e usar outro arquivo <code>routes.toml</code>.</p> <p>Dica</p> <p>Estamos usando a porta 9999 em vez da porta padr\u00e3o HTTP 80 para que voc\u00ea n\u00e3o precise execut\u00e1-lo com privil\u00e9gios de administrador (<code>sudo</code>).</p> <p>Agora crie esse outro arquivo <code>routes.toml</code>:</p> <pre><code>[http]\n  [http.middlewares]\n\n    [http.middlewares.api-stripprefix.stripPrefix]\n      prefixes = [\"/api/v1\"]\n\n  [http.routers]\n\n    [http.routers.app-http]\n      entryPoints = [\"http\"]\n      service = \"app\"\n      rule = \"PathPrefix(`/api/v1`)\"\n      middlewares = [\"api-stripprefix\"]\n\n  [http.services]\n\n    [http.services.app]\n      [http.services.app.loadBalancer]\n        [[http.services.app.loadBalancer.servers]]\n          url = \"http://127.0.0.1:8000\"\n</code></pre> <p>Esse arquivo configura o Traefik para usar o prefixo de caminho <code>/api/v1</code>.</p> <p>E ent\u00e3o ele redirecionar\u00e1 suas solicita\u00e7\u00f5es para seu Uvicorn rodando em <code>http://127.0.0.1:8000</code>.</p> <p>Agora inicie o Traefik:</p> <pre><code>$ ./traefik --configFile=traefik.toml\n\nINFO[0000] Configuration loaded from file: /home/user/awesomeapi/traefik.toml\n</code></pre> <p>E agora inicie sua aplica\u00e7\u00e3o, usando a op\u00e7\u00e3o <code>--root-path</code>:</p> <pre><code>$ readyapi run main.py --root-path /api/v1\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre>"},{"location":"advanced/behind-a-proxy/#verifique-as-respostas","title":"Verifique as respostas","text":"<p>Agora, se voc\u00ea for ao URL com a porta para o Uvicorn: http://127.0.0.1:8000/app, voc\u00ea ver\u00e1 a resposta normal:</p> <pre><code>{\n    \"message\": \"Hello World\",\n    \"root_path\": \"/api/v1\"\n}\n</code></pre> <p>Dica</p> <p>Perceba que, mesmo acessando em <code>http://127.0.0.1:8000/app</code>, ele mostra o <code>root_path</code> de <code>/api/v1</code>, retirado da op\u00e7\u00e3o <code>--root-path</code>.</p> <p>E agora abra o URL com a porta para o Traefik, incluindo o prefixo de caminho: http://127.0.0.1:9999/api/v1/app.</p> <p>Obtemos a mesma resposta:</p> <pre><code>{\n    \"message\": \"Hello World\",\n    \"root_path\": \"/api/v1\"\n}\n</code></pre> <p>mas desta vez no URL com o prefixo de caminho fornecido pelo proxy: <code>/api/v1</code>.</p> <p>Claro, a ideia aqui \u00e9 que todos acessariam a aplica\u00e7\u00e3o atrav\u00e9s do proxy, ent\u00e3o a vers\u00e3o com o prefixo de caminho <code>/api/v1</code> \u00e9 a \"correta\".</p> <p>E a vers\u00e3o sem o prefixo de caminho (<code>http://127.0.0.1:8000/app</code>), fornecida diretamente pelo Uvicorn, seria exclusivamente para o proxy (Traefik) acess\u00e1-la.</p> <p>Isso demonstra como o Proxy (Traefik) usa o prefixo de caminho e como o servidor (Uvicorn) usa o <code>root_path</code> da op\u00e7\u00e3o <code>--root-path</code>.</p>"},{"location":"advanced/behind-a-proxy/#verifique-a-interface-de-documentacao","title":"Verifique a interface de documenta\u00e7\u00e3o","text":"<p>Mas aqui est\u00e1 a parte divertida. \u2728</p> <p>A maneira \"oficial\" de acessar a aplica\u00e7\u00e3o seria atrav\u00e9s do proxy com o prefixo de caminho que definimos. Ent\u00e3o, como esperar\u00edamos, se voc\u00ea tentar a interface de documenta\u00e7\u00e3o servida diretamente pelo Uvicorn, sem o prefixo de caminho no URL, ela n\u00e3o funcionar\u00e1, porque espera ser acessada atrav\u00e9s do proxy.</p> <p>Voc\u00ea pode verificar em http://127.0.0.1:8000/docs:</p> <p></p> <p>Mas se acessarmos a interface de documenta\u00e7\u00e3o no URL \"oficial\" usando o proxy com a porta <code>9999</code>, em <code>/api/v1/docs</code>, ela funciona corretamente! \ud83c\udf89</p> <p>Voc\u00ea pode verificar em http://127.0.0.1:9999/api/v1/docs:</p> <p></p> <p>Exatamente como quer\u00edamos. \u2714\ufe0f</p> <p>Isso porque o ReadyAPI usa esse <code>root_path</code> para criar o <code>server</code> padr\u00e3o no OpenAPI com o URL fornecido pelo <code>root_path</code>.</p>"},{"location":"advanced/behind-a-proxy/#servidores-adicionais","title":"Servidores adicionais","text":"<p>Aviso</p> <p>Este \u00e9 um caso de uso mais avan\u00e7ado. Sinta-se \u00e0 vontade para pular.</p> <p>Por padr\u00e3o, o ReadyAPI criar\u00e1 um <code>server</code> no OpenAPI schema com o URL para o <code>root_path</code>.</p> <p>Mas voc\u00ea tamb\u00e9m pode fornecer outros <code>servers</code> alternativos, por exemplo, se quiser que a mesma interface de documenta\u00e7\u00e3o interaja com ambientes de staging e produ\u00e7\u00e3o.</p> <p>Se voc\u00ea passar uma lista personalizada de <code>servers</code> e houver um <code>root_path</code> (porque sua API est\u00e1 atr\u00e1s de um proxy), o ReadyAPI inserir\u00e1 um \"server\" com esse <code>root_path</code> no in\u00edcio da lista.</p> <p>Por exemplo:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Request\n\napp = ReadyAPI(\n    servers=[\n        {\"url\": \"https://stag.example.com\", \"description\": \"Staging environment\"},\n        {\"url\": \"https://prod.example.com\", \"description\": \"Production environment\"},\n    ],\n    root_path=\"/api/v1\",\n)\n\n\n@app.get(\"/app\")\ndef read_main(request: Request):\n    return {\"message\": \"Hello World\", \"root_path\": request.scope.get(\"root_path\")}\n</code></pre> <p>Gerar\u00e1 um OpenAPI schema como:</p> <pre><code>{\n    \"openapi\": \"3.1.0\",\n    // Mais coisas aqui\n    \"servers\": [\n        {\n            \"url\": \"/api/v1\"\n        },\n        {\n            \"url\": \"https://stag.example.com\",\n            \"description\": \"Staging environment\"\n        },\n        {\n            \"url\": \"https://prod.example.com\",\n            \"description\": \"Production environment\"\n        }\n    ],\n    \"paths\": {\n            // Mais coisas aqui\n    }\n}\n</code></pre> <p>Dica</p> <p>Perceba o servidor gerado automaticamente com um valor <code>url</code> de <code>/api/v1</code>, retirado do <code>root_path</code>.</p> <p>Na interface de documenta\u00e7\u00e3o em http://127.0.0.1:9999/api/v1/docs parecer\u00e1:</p> <p></p> <p>Dica</p> <p>A interface de documenta\u00e7\u00e3o interagir\u00e1 com o servidor que voc\u00ea selecionar.</p>"},{"location":"advanced/behind-a-proxy/#desabilitar-servidor-automatico-de-root_path","title":"Desabilitar servidor autom\u00e1tico de <code>root_path</code>","text":"<p>Se voc\u00ea n\u00e3o quiser que o ReadyAPI inclua um servidor autom\u00e1tico usando o <code>root_path</code>, voc\u00ea pode usar o par\u00e2metro <code>root_path_in_servers=False</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Request\n\napp = ReadyAPI(\n    servers=[\n        {\"url\": \"https://stag.example.com\", \"description\": \"Staging environment\"},\n        {\"url\": \"https://prod.example.com\", \"description\": \"Production environment\"},\n    ],\n    root_path=\"/api/v1\",\n    root_path_in_servers=False,\n)\n\n\n@app.get(\"/app\")\ndef read_main(request: Request):\n    return {\"message\": \"Hello World\", \"root_path\": request.scope.get(\"root_path\")}\n</code></pre> <p>e ent\u00e3o ele n\u00e3o ser\u00e1 inclu\u00eddo no OpenAPI schema.</p>"},{"location":"advanced/behind-a-proxy/#montando-uma-sub-aplicacao","title":"Montando uma sub-aplica\u00e7\u00e3o","text":"<p>Se voc\u00ea precisar montar uma sub-aplica\u00e7\u00e3o (como descrito em Sub Aplica\u00e7\u00f5es - Montagens) enquanto tamb\u00e9m usa um proxy com <code>root_path</code>, voc\u00ea pode fazer isso normalmente, como esperaria.</p> <p>O ReadyAPI usar\u00e1 internamente o <code>root_path</code> de forma inteligente, ent\u00e3o tudo funcionar\u00e1. \u2728</p>"},{"location":"advanced/custom-response/","title":"Resposta Personalizada - HTML, Stream, File e outras","text":"<p>Por padr\u00e3o, o ReadyAPI ir\u00e1 retornar respostas utilizando <code>JSONResponse</code>.</p> <p>Mas voc\u00ea pode sobrescrever esse comportamento utilizando <code>Response</code> diretamente, como visto em Retornando uma Resposta Diretamente.</p> <p>Mas se voc\u00ea retornar uma <code>Response</code> diretamente (ou qualquer subclasse, como <code>JSONResponse</code>), os dados n\u00e3o ser\u00e3o convertidos automaticamente (mesmo que voc\u00ea declare um <code>response_model</code>), e a documenta\u00e7\u00e3o n\u00e3o ser\u00e1 gerada automaticamente (por exemplo, incluindo o \"media type\", no cabe\u00e7alho HTTP <code>Content-Type</code> como parte do esquema OpenAPI gerado).</p> <p>Mas voc\u00ea tamb\u00e9m pode declarar a <code>Response</code> que voc\u00ea deseja utilizar (e.g. qualquer subclasse de <code>Response</code>), em um decorador de opera\u00e7\u00e3o de rota utilizando o par\u00e2metro <code>response_class</code>.</p> <p>Os conte\u00fados que voc\u00ea retorna em sua fun\u00e7\u00e3o de operador de rota ser\u00e3o colocados dentro dessa <code>Response</code>.</p> <p>E se a <code>Response</code> tiver um media type JSON (<code>application/json</code>), como \u00e9 o caso com <code>JSONResponse</code> e <code>UJSONResponse</code>, os dados que voc\u00ea retornar ser\u00e3o automaticamente convertidos (e filtrados) com qualquer <code>response_model</code> do Pydantic que for declarado em sua fun\u00e7\u00e3o de operador de rota.</p> <p>Nota</p> <p>Se voc\u00ea utilizar uma classe de Resposta sem media type, o ReadyAPI esperar\u00e1 que sua resposta n\u00e3o tenha conte\u00fado, ent\u00e3o ele n\u00e3o ir\u00e1 documentar o formato da resposta na documenta\u00e7\u00e3o OpenAPI gerada.</p>"},{"location":"advanced/custom-response/#utilizando-orjsonresponse","title":"Utilizando <code>ORJSONResponse</code>","text":"<p>Por exemplo, se voc\u00ea precisa bastante de performance, voc\u00ea pode instalar e utilizar o <code>orjson</code> e definir a resposta para ser uma <code>ORJSONResponse</code>.</p> <p>Importe a classe, ou subclasse, de <code>Response</code> que voc\u00ea deseja utilizar e declare ela no decorador de opera\u00e7\u00e3o de rota.</p> <p>Para respostas grandes, retornar uma <code>Response</code> diretamente \u00e9 muito mais r\u00e1pido que retornar um dicion\u00e1rio.</p> <p>Isso ocorre por que, por padr\u00e3o, o ReadyAPI ir\u00e1 verificar cada item dentro do dicion\u00e1rio e garantir que ele seja serializ\u00e1vel para JSON, utilizando o mesmoCodificador Compat\u00edvel com JSON explicado no tutorial. Isso permite que voc\u00ea retorne objetos abstratos, como modelos do banco de dados, por exemplo.</p> <p>Mas se voc\u00ea tem certeza que o conte\u00fado que voc\u00ea est\u00e1 retornando \u00e9 serializ\u00e1vel com JSON, voc\u00ea pode pass\u00e1-lo diretamente para a classe de resposta e evitar o trabalho extra que o ReadyAPI teria ao passar o conte\u00fado pelo <code>jsonable_encoder</code> antes de passar para a classe de resposta.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import ORJSONResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\", response_class=ORJSONResponse)\nasync def read_items():\n    return ORJSONResponse([{\"item_id\": \"Foo\"}])\n</code></pre> <p>Informa\u00e7\u00e3o</p> <p>O par\u00e2metro <code>response_class</code> tamb\u00e9m ser\u00e1 usado para definir o \"media type\" da resposta.</p> <p>Neste caso, o cabe\u00e7alho HTTP <code>Content-Type</code> ir\u00e1 ser definido como <code>application/json</code>.</p> <p>E ser\u00e1 documentado como tal no OpenAPI.</p> <p>Dica</p> <p>A <code>ORJSONResponse</code> est\u00e1 dispon\u00edvel apenas no ReadyAPI, e n\u00e3o no Starlette.</p>"},{"location":"advanced/custom-response/#resposta-html","title":"Resposta HTML","text":"<p>Para retornar uma resposta com HTML diretamente do ReadyAPI, utilize <code>HTMLResponse</code>.</p> <ul> <li>Importe <code>HTMLResponse</code></li> <li>Passe <code>HTMLResponse</code> como o par\u00e2metro de <code>response_class</code> do seu decorador de opera\u00e7\u00e3o de rota.</li> </ul> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\", response_class=HTMLResponse)\nasync def read_items():\n    return \"\"\"\n    &lt;html&gt;\n        &lt;head&gt;\n            &lt;title&gt;Some HTML in here&lt;/title&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n            &lt;h1&gt;Look ma! HTML!&lt;/h1&gt;\n        &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\"\n</code></pre> <p>Informa\u00e7\u00e3o</p> <p>O par\u00e2metro <code>response_class</code> tamb\u00e9m ser\u00e1 usado para definir o \"media type\" da resposta.</p> <p>Neste caso, o cabe\u00e7alho HTTP <code>Content-Type</code> ser\u00e1 definido como <code>text/html</code>.</p> <p>E ser\u00e1 documentado como tal no OpenAPI.</p>"},{"location":"advanced/custom-response/#retornando-uma-response","title":"Retornando uma <code>Response</code>","text":"<p>Como visto em Retornando uma Resposta Diretamente, voc\u00ea tamb\u00e9m pode sobrescrever a resposta diretamente na sua opera\u00e7\u00e3o de rota, ao retornar ela.</p> <p>O mesmo exemplo de antes, retornando uma <code>HTMLResponse</code>, poderia parecer com:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    html_content = \"\"\"\n    &lt;html&gt;\n        &lt;head&gt;\n            &lt;title&gt;Some HTML in here&lt;/title&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n            &lt;h1&gt;Look ma! HTML!&lt;/h1&gt;\n        &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\"\n    return HTMLResponse(content=html_content, status_code=200)\n</code></pre> <p>Aviso</p> <p>Uma <code>Response</code> retornada diretamente em sua fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota n\u00e3o ser\u00e1 documentada no OpenAPI (por exemplo, o <code>Content-Type</code> n\u00e3o ser\u00e1 documentado) e n\u00e3o ser\u00e1 vis\u00edvel na documenta\u00e7\u00e3o interativa autom\u00e1tica.</p> <p>Informa\u00e7\u00e3o</p> <p>Obviamente, o cabe\u00e7alho <code>Content-Type</code>, o c\u00f3digo de status, etc, vir\u00e3o do objeto <code>Response</code> que voc\u00ea retornou.</p>"},{"location":"advanced/custom-response/#documentar-no-openapi-e-sobrescrever-response","title":"Documentar no OpenAPI e sobrescrever <code>Response</code>","text":"<p>Se voc\u00ea deseja sobrescrever a resposta dentro de uma fun\u00e7\u00e3o, mas ao mesmo tempo documentar o \"media type\" no OpenAPI, voc\u00ea pode utilizar o par\u00e2metro <code>response_class</code> E retornar um objeto <code>Response</code>.</p> <p>A <code>response_class</code> ser\u00e1 usada apenas para documentar o OpenAPI da opera\u00e7\u00e3o de rota, mas sua <code>Response</code> ser\u00e1 usada como foi definida.</p>"},{"location":"advanced/custom-response/#retornando-uma-htmlresponse-diretamente","title":"Retornando uma <code>HTMLResponse</code> diretamente","text":"<p>Por exemplo, poderia ser algo como:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\ndef generate_html_response():\n    html_content = \"\"\"\n    &lt;html&gt;\n        &lt;head&gt;\n            &lt;title&gt;Some HTML in here&lt;/title&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n            &lt;h1&gt;Look ma! HTML!&lt;/h1&gt;\n        &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\"\n    return HTMLResponse(content=html_content, status_code=200)\n\n\n@app.get(\"/items/\", response_class=HTMLResponse)\nasync def read_items():\n    return generate_html_response()\n</code></pre> <p>Neste exemplo, a fun\u00e7\u00e3o <code>generate_html_response()</code> j\u00e1 cria e retorna uma <code>Response</code> em vez de retornar o HTML em uma <code>str</code>.</p> <p>Ao retornar o resultado chamando <code>generate_html_response()</code>, voc\u00ea j\u00e1 est\u00e1 retornando uma <code>Response</code> que ir\u00e1 sobrescrever o comportamento padr\u00e3o do ReadyAPI.</p> <p>Mas se voc\u00ea passasse uma <code>HTMLResponse</code> em <code>response_class</code> tamb\u00e9m, o ReadyAPI saberia como documentar isso no OpenAPI e na documenta\u00e7\u00e3o interativa como um HTML com <code>text/html</code>:</p> <p></p>"},{"location":"advanced/custom-response/#respostas-disponiveis","title":"Respostas dispon\u00edveis","text":"<p>Aqui est\u00e3o algumas dos tipos de resposta dispon\u00edveis.</p> <p>Lembre-se que voc\u00ea pode utilizar <code>Response</code> para retornar qualquer outra coisa, ou at\u00e9 mesmo criar uma subclasse personalizada.</p> <p>Detalhes T\u00e9cnicos</p> <p>Voc\u00ea tamb\u00e9m pode utilizar <code>from starlette.responses import HTMLResponse</code>.</p> <p>O ReadyAPI prov\u00ea a mesma <code>starlette.responses</code> como <code>readyapi.responses</code> apenas como uma facilidade para voc\u00ea, desenvolvedor. Mas a maioria das respostas dispon\u00edveis v\u00eam diretamente do Starlette.</p>"},{"location":"advanced/custom-response/#response","title":"<code>Response</code>","text":"<p>A classe principal de respostas, todas as outras respostas herdam dela.</p> <p>Voc\u00ea pode retorn\u00e1-la diretamente.</p> <p>Ela aceita os seguintes par\u00e2metros:</p> <ul> <li><code>content</code> - Uma sequ\u00eancia de caracteres (<code>str</code>) ou <code>bytes</code>.</li> <li><code>status_code</code> - Um c\u00f3digo de status HTTP do tipo <code>int</code>.</li> <li><code>headers</code> - Um dicion\u00e1rio <code>dict</code> de strings.</li> <li><code>media_type</code> - Uma <code>str</code> informando o media type. E.g. <code>\"text/html\"</code>.</li> </ul> <p>O ReadyAPI (Starlette, na verdade) ir\u00e1 incluir o cabe\u00e7alho Content-Length automaticamente. Ele tamb\u00e9m ir\u00e1 incluir o cabe\u00e7alho Content-Type, baseado no <code>media_type</code> e acrescentando uma codifica\u00e7\u00e3o para tipos textuais.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Response\n\napp = ReadyAPI()\n\n\n@app.get(\"/legacy/\")\ndef get_legacy_data():\n    data = \"\"\"&lt;?xml version=\"1.0\"?&gt;\n    &lt;shampoo&gt;\n    &lt;Header&gt;\n        Apply shampoo here.\n    &lt;/Header&gt;\n    &lt;Body&gt;\n        You'll have to use soap here.\n    &lt;/Body&gt;\n    &lt;/shampoo&gt;\n    \"\"\"\n    return Response(content=data, media_type=\"application/xml\")\n</code></pre>"},{"location":"advanced/custom-response/#htmlresponse","title":"<code>HTMLResponse</code>","text":"<p>Usa algum texto ou sequ\u00eancia de bytes e retorna uma resposta HTML. Como voc\u00ea leu acima.</p>"},{"location":"advanced/custom-response/#plaintextresponse","title":"<code>PlainTextResponse</code>","text":"<p>Usa algum texto ou sequ\u00eancia de bytes para retornar uma resposta de texto n\u00e3o formatado.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import PlainTextResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/\", response_class=PlainTextResponse)\nasync def main():\n    return \"Hello World\"\n</code></pre>"},{"location":"advanced/custom-response/#jsonresponse","title":"<code>JSONResponse</code>","text":"<p>Pega alguns dados e retorna uma resposta com codifica\u00e7\u00e3o <code>application/json</code>.</p> <p>\u00c9 a resposta padr\u00e3o utilizada no ReadyAPI, como voc\u00ea leu acima.</p>"},{"location":"advanced/custom-response/#orjsonresponse","title":"<code>ORJSONResponse</code>","text":"<p>Uma alternativa mais r\u00e1pida de resposta JSON utilizando o <code>orjson</code>, como voc\u00ea leu acima.</p> <p>Informa\u00e7\u00e3o</p> <p>Essa resposta requer a instala\u00e7\u00e3o do pacote <code>orjson</code>, com o comando <code>pip install orjson</code>, por exemplo.</p>"},{"location":"advanced/custom-response/#ujsonresponse","title":"<code>UJSONResponse</code>","text":"<p>Uma alternativa de resposta JSON utilizando a biblioteca <code>ujson</code>.</p> <p>Informa\u00e7\u00e3o</p> <p>Essa resposta requer a instala\u00e7\u00e3o do pacote <code>ujson</code>, com o comando <code>pip install ujson</code>, por exemplo.</p> <p>Aviso</p> <p><code>ujson</code> \u00e9 menos cauteloso que a implementa\u00e7\u00e3o nativa do Python na forma que os casos especiais s\u00e3o tratados</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import UJSONResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\", response_class=UJSONResponse)\nasync def read_items():\n    return [{\"item_id\": \"Foo\"}]\n</code></pre> <p>Dica</p> <p>\u00c9 poss\u00edvel que <code>ORJSONResponse</code> seja uma alternativa mais r\u00e1pida.</p>"},{"location":"advanced/custom-response/#redirectresponse","title":"<code>RedirectResponse</code>","text":"<p>Retorna um redirecionamento HTTP. Utiliza o c\u00f3digo de status 307 (Redirecionamento Tempor\u00e1rio) por padr\u00e3o.</p> <p>Voc\u00ea pode retornar uma <code>RedirectResponse</code> diretamente:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import RedirectResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/cligenius\")\nasync def redirect_cligenius():\n    return RedirectResponse(\"https://cligenius.khulnasoft.com\")\n</code></pre> <p>Ou voc\u00ea pode utiliz\u00e1-la no par\u00e2metro <code>response_class</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import RedirectResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/readyapi\", response_class=RedirectResponse)\nasync def redirect_readyapi():\n    return \"https://readyapi.github.io\"\n</code></pre> <p>Se voc\u00ea fizer isso, ent\u00e3o voc\u00ea pode retornar a URL diretamente da sua fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota</p> <p>Neste caso, o <code>status_code</code> utilizada ser\u00e1 o padr\u00e3o de <code>RedirectResponse</code>, que \u00e9 <code>307</code>.</p> <p>Voc\u00ea tamb\u00e9m pode utilizar o par\u00e2metro <code>status_code</code> combinado com o par\u00e2metro <code>response_class</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import RedirectResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/pydantic\", response_class=RedirectResponse, status_code=302)\nasync def redirect_pydantic():\n    return \"https://docs.pydantic.dev/\"\n</code></pre>"},{"location":"advanced/custom-response/#streamingresponse","title":"<code>StreamingResponse</code>","text":"<p>Recebe uma gerador ass\u00edncrono ou um gerador/iterador comum e retorna o corpo da requisi\u00e7\u00e3o continuamente (stream).</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import StreamingResponse\n\napp = ReadyAPI()\n\n\nasync def fake_video_streamer():\n    for i in range(10):\n        yield b\"some fake video bytes\"\n\n\n@app.get(\"/\")\nasync def main():\n    return StreamingResponse(fake_video_streamer())\n</code></pre>"},{"location":"advanced/custom-response/#utilizando-streamingresponse-com-objetos-semelhantes-a-arquivos","title":"Utilizando <code>StreamingResponse</code> com objetos semelhantes a arquivos","text":"<p>Se voc\u00ea tiver um objeto semelhante a um arquivo (e.g. o objeto retornado por <code>open()</code>), voc\u00ea pode criar uma fun\u00e7\u00e3o geradora para iterar sobre esse objeto.</p> <p>Dessa forma, voc\u00ea n\u00e3o precisa ler todo o arquivo na mem\u00f3ria primeiro, e voc\u00ea pode passar essa fun\u00e7\u00e3o geradora para <code>StreamingResponse</code> e retorn\u00e1-la.</p> <p>Isso inclui muitas bibliotecas que interagem com armazenamento em nuvem, processamento de v\u00eddeos, entre outras.</p> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import StreamingResponse\n\nsome_file_path = \"large-video-file.mp4\"\napp = ReadyAPI()\n\n\n@app.get(\"/\")\ndef main():\n    def iterfile():  # (1)\n        with open(some_file_path, mode=\"rb\") as file_like:  # (2)\n            yield from file_like  # (3)\n\n    return StreamingResponse(iterfile(), media_type=\"video/mp4\")\n</code></pre> <ol> <li>Essa \u00e9 a fun\u00e7\u00e3o geradora. \u00c9 definida como \"fun\u00e7\u00e3o geradora\" porque cont\u00e9m declara\u00e7\u00f5es <code>yield</code> nela.</li> <li>Ao utilizar o bloco <code>with</code>, n\u00f3s garantimos que o objeto semelhante a um arquivo \u00e9 fechado ap\u00f3s a fun\u00e7\u00e3o geradora ser finalizada. Isto \u00e9, ap\u00f3s a resposta terminar de ser enivada.</li> <li> <p>Essa declara\u00e7\u00e3o <code>yield from</code> informa a fun\u00e7\u00e3o para iterar sobre essa coisa nomeada de <code>file_like</code>. E ent\u00e3o, para cada parte iterada, fornece essa parte como se viesse dessa fun\u00e7\u00e3o geradora (<code>iterfile</code>).</p> <p>Ent\u00e3o, \u00e9 uma fun\u00e7\u00e3o geradora que transfere o trabalho de \"gera\u00e7\u00e3o\" para alguma outra coisa interna.</p> <p>Fazendo dessa forma, podemos coloc\u00e1-la em um bloco <code>with</code>, e assim garantir que o objeto semelhante a um arquivo \u00e9 fechado quando a fun\u00e7\u00e3o termina.</p> </li> </ol> <p>Dica</p> <p>Perceba que aqui estamos utilizando o <code>open()</code> da biblioteca padr\u00e3o que n\u00e3o suporta <code>async</code> e <code>await</code>, e declaramos a opera\u00e7\u00e3o de rota com o <code>def</code> b\u00e1sico.</p>"},{"location":"advanced/custom-response/#fileresponse","title":"<code>FileResponse</code>","text":"<p>Envia um arquivo  de forma ass\u00edncrona e cont\u00ednua (stream). * Recebe um conjunto de argumentos do construtor diferente dos outros tipos de resposta:</p> <ul> <li><code>path</code> - O caminho do arquivo que ser\u00e1 transmitido</li> <li><code>headers</code> - quaisquer cabe\u00e7alhos que ser\u00e3o inclu\u00eddos, como um dicion\u00e1rio.</li> <li><code>media_type</code> - Uma string com o media type. Se n\u00e3o for definida, o media type \u00e9 inferido a partir do nome ou caminho do arquivo.</li> <li><code>filename</code> - Se for definido, \u00e9 inclu\u00eddo no cabe\u00e7alho <code>Content-Disposition</code>.</li> </ul> <p>Respostas de Arquivos incluem o tamanho do arquivo, data da \u00faltima modifica\u00e7\u00e3o e ETags apropriados, nos cabe\u00e7alhos <code>Content-Length</code>, <code>Last-Modified</code> e <code>ETag</code>, respectivamente.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import FileResponse\n\nsome_file_path = \"large-video-file.mp4\"\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def main():\n    return FileResponse(some_file_path)\n</code></pre> <p>Voc\u00ea tamb\u00e9m pode usar o par\u00e2metro <code>response_class</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import FileResponse\n\nsome_file_path = \"large-video-file.mp4\"\napp = ReadyAPI()\n\n\n@app.get(\"/\", response_class=FileResponse)\nasync def main():\n    return some_file_path\n</code></pre> <p>Nesse caso, voc\u00ea pode retornar o caminho do arquivo diretamente da sua fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota.</p>"},{"location":"advanced/custom-response/#classe-de-resposta-personalizada","title":"Classe de resposta personalizada","text":"<p>Voc\u00ea pode criar sua pr\u00f3pria classe de resposta, herdando de <code>Response</code> e usando essa nova classe.</p> <p>Por exemplo, vamos supor que voc\u00ea queira utilizar o <code>orjson</code>, mas com algumas configura\u00e7\u00f5es personalizadas que n\u00e3o est\u00e3o inclu\u00eddas na classe <code>ORJSONResponse</code>.</p> <p>Vamos supor tamb\u00e9m que voc\u00ea queira retornar um JSON indentado e formatado, ent\u00e3o voc\u00ea quer utilizar a op\u00e7\u00e3o <code>orjson.OPT_INDENT_2</code> do orjson.</p> <p>Voc\u00ea poderia criar uma classe <code>CustomORJSONResponse</code>. A principal coisa a ser feita \u00e9 sobrecarregar o m\u00e9todo render da classe Response, <code>Response.render(content)</code>, que retorna o conte\u00fado em bytes, para retornar o conte\u00fado que voc\u00ea deseja:</p> Python 3.8+ <pre><code>from typing import Any\n\nimport orjson\nfrom readyapi import ReadyAPI, Response\n\napp = ReadyAPI()\n\n\nclass CustomORJSONResponse(Response):\n    media_type = \"application/json\"\n\n    def render(self, content: Any) -&gt; bytes:\n        assert orjson is not None, \"orjson must be installed\"\n        return orjson.dumps(content, option=orjson.OPT_INDENT_2)\n\n\n@app.get(\"/\", response_class=CustomORJSONResponse)\nasync def main():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>Agora em vez de retornar:</p> <pre><code>{\"message\": \"Hello World\"}\n</code></pre> <p>...essa resposta retornar\u00e1:</p> <pre><code>{\n  \"message\": \"Hello World\"\n}\n</code></pre> <p>Obviamente, voc\u00ea provavelmente vai encontrar maneiras muito melhores de se aproveitar disso do que a formata\u00e7\u00e3o de JSON. \ud83d\ude09</p>"},{"location":"advanced/custom-response/#classe-de-resposta-padrao","title":"Classe de resposta padr\u00e3o","text":"<p>Quando voc\u00ea criar uma inst\u00e2ncia da classe ReadyAPI ou um <code>APIRouter</code> voc\u00ea pode especificar qual classe de resposta utilizar por padr\u00e3o.</p> <p>O padr\u00e3o que define isso \u00e9 o <code>default_response_class</code>.</p> <p>No exemplo abaixo, o ReadyAPI ir\u00e1 utilizar <code>ORJSONResponse</code> por padr\u00e3o, em todas as opera\u00e7\u00f5es de rota, em vez de <code>JSONResponse</code>.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import ORJSONResponse\n\napp = ReadyAPI(default_response_class=ORJSONResponse)\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"item_id\": \"Foo\"}]\n</code></pre> <p>Dica</p> <p>Voc\u00ea ainda pode substituir <code>response_class</code> em opera\u00e7\u00f5es de rota como antes.</p>"},{"location":"advanced/custom-response/#documentacao-adicional","title":"Documenta\u00e7\u00e3o adicional","text":"<p>Voc\u00ea tamb\u00e9m pode declarar o media type e muitos outros detalhes no OpenAPI utilizando <code>responses</code>: Retornos Adicionais no OpenAPI.</p>"},{"location":"advanced/dataclasses/","title":"Usando Dataclasses","text":"<p>ReadyAPI \u00e9 constru\u00eddo em cima do Pydantic, e eu tenho mostrado como usar modelos Pydantic para declarar requisi\u00e7\u00f5es e respostas.</p> <p>Mas o ReadyAPI tamb\u00e9m suporta o uso de <code>dataclasses</code> da mesma forma:</p> Python 3.8+ <pre><code>from dataclasses import dataclass\nfrom typing import Union\n\nfrom readyapi import ReadyAPI\n\n\n@dataclass\nclass Item:\n    name: str\n    price: float\n    description: Union[str, None] = None\n    tax: Union[float, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n</code></pre> <p>Isso ainda \u00e9 suportado gra\u00e7as ao Pydantic, pois ele tem suporte interno para <code>dataclasses</code>.</p> <p>Ent\u00e3o, mesmo com o c\u00f3digo acima que n\u00e3o usa Pydantic explicitamente, o ReadyAPI est\u00e1 usando Pydantic para converter essas dataclasses padr\u00e3o para a vers\u00e3o do Pydantic.</p> <p>E claro, ele suporta o mesmo:</p> <ul> <li>valida\u00e7\u00e3o de dados</li> <li>serializa\u00e7\u00e3o de dados</li> <li>documenta\u00e7\u00e3o de dados, etc.</li> </ul> <p>Isso funciona da mesma forma que com os modelos Pydantic. E na verdade \u00e9 alcan\u00e7ado da mesma maneira por baixo dos panos, usando Pydantic.</p> <p>Informa\u00e7\u00e3o</p> <p>Lembre-se de que dataclasses n\u00e3o podem fazer tudo o que os modelos Pydantic podem fazer.</p> <p>Ent\u00e3o, voc\u00ea ainda pode precisar usar modelos Pydantic.</p> <p>Mas se voc\u00ea tem um monte de dataclasses por a\u00ed, este \u00e9 um truque legal para us\u00e1-las para alimentar uma API web usando ReadyAPI. \ud83e\udd13</p>"},{"location":"advanced/dataclasses/#dataclasses-em-response_model","title":"Dataclasses em <code>response_model</code>","text":"<p>Voc\u00ea tamb\u00e9m pode usar <code>dataclasses</code> no par\u00e2metro <code>response_model</code>:</p> Python 3.8+ <pre><code>from dataclasses import dataclass, field\nfrom typing import List, Union\n\nfrom readyapi import ReadyAPI\n\n\n@dataclass\nclass Item:\n    name: str\n    price: float\n    tags: List[str] = field(default_factory=list)\n    description: Union[str, None] = None\n    tax: Union[float, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/next\", response_model=Item)\nasync def read_next_item():\n    return {\n        \"name\": \"Island In The Moon\",\n        \"price\": 12.99,\n        \"description\": \"A place to be playin' and havin' fun\",\n        \"tags\": [\"breater\"],\n    }\n</code></pre> <p>A dataclass ser\u00e1 automaticamente convertida para uma dataclass Pydantic.</p> <p>Dessa forma, seu esquema aparecer\u00e1 na interface de documenta\u00e7\u00e3o da API:</p> <p></p>"},{"location":"advanced/dataclasses/#dataclasses-em-estruturas-de-dados-aninhadas","title":"Dataclasses em Estruturas de Dados Aninhadas","text":"<p>Voc\u00ea tamb\u00e9m pode combinar <code>dataclasses</code> com outras anota\u00e7\u00f5es de tipo para criar estruturas de dados aninhadas.</p> <p>Em alguns casos, voc\u00ea ainda pode ter que usar a vers\u00e3o do Pydantic das <code>dataclasses</code>. Por exemplo, se voc\u00ea tiver erros com a documenta\u00e7\u00e3o da API gerada automaticamente.</p> <p>Nesse caso, voc\u00ea pode simplesmente trocar as <code>dataclasses</code> padr\u00e3o por <code>pydantic.dataclasses</code>, que \u00e9 um substituto direto:</p> <pre><code>from dataclasses import field  # (1)\nfrom typing import List, Union\n\nfrom readyapi import ReadyAPI\nfrom pydantic.dataclasses import dataclass  # (2)\n\n\n@dataclass\nclass Item:\n    name: str\n    description: Union[str, None] = None\n\n\n@dataclass\nclass Author:\n    name: str\n    items: List[Item] = field(default_factory=list)  # (3)\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/authors/{author_id}/items/\", response_model=Author)  # (4)\nasync def create_author_items(author_id: str, items: List[Item]):  # (5)\n    return {\"name\": author_id, \"items\": items}  # (6)\n\n\n@app.get(\"/authors/\", response_model=List[Author])  # (7)\ndef get_authors():  # (8)\n    return [  # (9)\n        {\n            \"name\": \"Breaters\",\n            \"items\": [\n                {\n                    \"name\": \"Island In The Moon\",\n                    \"description\": \"A place to be playin' and havin' fun\",\n                },\n                {\"name\": \"Holy Buddies\"},\n            ],\n        },\n        {\n            \"name\": \"System of an Up\",\n            \"items\": [\n                {\n                    \"name\": \"Salt\",\n                    \"description\": \"The kombucha mushroom people's favorite\",\n                },\n                {\"name\": \"Pad Thai\"},\n                {\n                    \"name\": \"Lonely Night\",\n                    \"description\": \"The mostests lonliest nightiest of allest\",\n                },\n            ],\n        },\n    ]\n</code></pre> <ol> <li> <p>Ainda importamos <code>field</code> das <code>dataclasses</code> padr\u00e3o.</p> </li> <li> <p><code>pydantic.dataclasses</code> \u00e9 um substituto direto para <code>dataclasses</code>.</p> </li> <li> <p>A dataclass <code>Author</code> inclui uma lista de dataclasses <code>Item</code>.</p> </li> <li> <p>A dataclass <code>Author</code> \u00e9 usada como o par\u00e2metro <code>response_model</code>.</p> </li> <li> <p>Voc\u00ea pode usar outras anota\u00e7\u00f5es de tipo padr\u00e3o com dataclasses como o corpo da requisi\u00e7\u00e3o.</p> <p>Neste caso, \u00e9 uma lista de dataclasses <code>Item</code>.</p> </li> <li> <p>Aqui estamos retornando um dicion\u00e1rio que cont\u00e9m <code>items</code>, que \u00e9 uma lista de dataclasses.</p> <p>O ReadyAPI ainda \u00e9 capaz de serializar os dados para JSON.</p> </li> <li> <p>Aqui o <code>response_model</code> est\u00e1 usando uma anota\u00e7\u00e3o de tipo de uma lista de dataclasses <code>Author</code>.</p> <p>Novamente, voc\u00ea pode combinar <code>dataclasses</code> com anota\u00e7\u00f5es de tipo padr\u00e3o.</p> </li> <li> <p>Note que esta fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota usa <code>def</code> regular em vez de <code>async def</code>.</p> <p>Como sempre, no ReadyAPI voc\u00ea pode combinar <code>def</code> e <code>async def</code> conforme necess\u00e1rio.</p> <p>Se voc\u00ea precisar de uma atualiza\u00e7\u00e3o sobre quando usar qual, confira a se\u00e7\u00e3o \"Com pressa?\" na documenta\u00e7\u00e3o sobre <code>async</code> e <code>await</code>.</p> </li> <li> <p>Esta fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota n\u00e3o est\u00e1 retornando dataclasses (embora pudesse), mas uma lista de dicion\u00e1rios com dados internos.</p> <p>O ReadyAPI usar\u00e1 o par\u00e2metro <code>response_model</code> (que inclui dataclasses) para converter a resposta.</p> </li> </ol> <p>Voc\u00ea pode combinar <code>dataclasses</code> com outras anota\u00e7\u00f5es de tipo em muitas combina\u00e7\u00f5es diferentes para formar estruturas de dados complexas.</p> <p>Confira as dicas de anota\u00e7\u00e3o no c\u00f3digo acima para ver mais detalhes espec\u00edficos.</p>"},{"location":"advanced/dataclasses/#saiba-mais","title":"Saiba Mais","text":"<p>Voc\u00ea tamb\u00e9m pode combinar <code>dataclasses</code> com outros modelos Pydantic, herdar deles, inclu\u00ed-los em seus pr\u00f3prios modelos, etc.</p> <p>Para saber mais, confira a documenta\u00e7\u00e3o do Pydantic sobre dataclasses.</p>"},{"location":"advanced/dataclasses/#versao","title":"Vers\u00e3o","text":"<p>Isso est\u00e1 dispon\u00edvel desde a vers\u00e3o <code>0.67.0</code> do ReadyAPI. \ud83d\udd16</p>"},{"location":"advanced/events/","title":"Eventos de vida \u00fatil","text":"<p>Voc\u00ea pode definir a l\u00f3gica (c\u00f3digo) que poderia ser executada antes da aplica\u00e7\u00e3o inicializar. Isso significa que esse c\u00f3digo ser\u00e1 executado uma vez, antes da aplica\u00e7\u00e3o come\u00e7ar a receber requisi\u00e7\u00f5es.</p> <p>Do mesmo modo, voc\u00ea pode definir a l\u00f3gica (c\u00f3digo) que ser\u00e1 executada quando a aplica\u00e7\u00e3o estiver sendo encerrada. Nesse caso, este c\u00f3digo ser\u00e1 executado uma vez, depois de ter possivelmente tratado v\u00e1rias requisi\u00e7\u00f5es.</p> <p>Por conta desse c\u00f3digo ser executado antes da aplica\u00e7\u00e3o come\u00e7ar a receber requisi\u00e7\u00f5es, e logo ap\u00f3s terminar de lidar com as requisi\u00e7\u00f5es, ele cobre toda a vida \u00fatil (lifespan) da aplica\u00e7\u00e3o (o termo \"vida \u00fatil\" ser\u00e1 importante em um segundo \ud83d\ude09).</p> <p>Pode ser muito \u00fatil para configurar recursos que voc\u00ea precisa usar por toda aplica\u00e7\u00e3o, e que s\u00e3o compartilhados entre as requisi\u00e7\u00f5es, e/ou que voc\u00ea precisa limpar depois. Por exemplo, o pool de uma conex\u00e3o com o banco de dados ou carregamento de um modelo compartilhado de aprendizado de m\u00e1quina (machine learning).</p>"},{"location":"advanced/events/#caso-de-uso","title":"Caso de uso","text":"<p>Vamos iniciar com um exemplo de caso de uso e ent\u00e3o ver como resolv\u00ea-lo com isso.</p> <p>Vamos imaginar que voc\u00ea tem alguns modelos de machine learning que deseja usar para lidar com as requisi\u00e7\u00f5es. \ud83e\udd16</p> <p>Os mesmos modelos s\u00e3o compartilhados entre as requisi\u00e7\u00f5es, ent\u00e3o n\u00e3o \u00e9 um modelo por requisi\u00e7\u00e3o, ou um por usu\u00e1rio ou algo parecido.</p> <p>Vamos imaginar que o carregamento do modelo pode demorar bastante tempo, porque ele tem que ler muitos dados do disco. Ent\u00e3o voc\u00ea n\u00e3o quer fazer isso a cada requisi\u00e7\u00e3o.</p> <p>Voc\u00ea poderia carreg\u00e1-lo no n\u00edvel mais alto do m\u00f3dulo/arquivo, mas isso tamb\u00e9m poderia significaria carregar o modelo mesmo se voc\u00ea estiver executando um simples teste automatizado, ent\u00e3o esse teste poderia ser lento porque teria que esperar o carregamento do modelo antes de ser capaz de executar uma parte independente do c\u00f3digo.</p> <p>Isso \u00e9 que n\u00f3s iremos resolver, vamos carregar o modelo antes das requisi\u00e7\u00f5es serem manuseadas, mas apenas um pouco antes da aplica\u00e7\u00e3o come\u00e7ar a receber requisi\u00e7\u00f5es, n\u00e3o enquanto o c\u00f3digo estiver sendo carregado.</p>"},{"location":"advanced/events/#vida-util-lifespan","title":"Vida \u00fatil (Lifespan)","text":"<p>Voc\u00ea pode definir essa l\u00f3gica de inicializa\u00e7\u00e3o e encerramento usando os par\u00e2metros de <code>lifespan</code> da aplica\u00e7\u00e3o <code>ReadyAPI</code>, e um \"gerenciador de contexto\" (te mostrarei o que \u00e9 isso a seguir).</p> <p>Vamos iniciar com um exemplo e ver isso detalhadamente.</p> <p>N\u00f3s criamos uma fun\u00e7\u00e3o ass\u00edncrona chamada <code>lifespan()</code> com <code>yield</code> como este:</p> Python 3.8+ <pre><code>from contextlib import asynccontextmanager\n\nfrom readyapi import ReadyAPI\n\n\ndef fake_answer_to_everything_ml_model(x: float):\n    return x * 42\n\n\nml_models = {}\n\n\n@asynccontextmanager\nasync def lifespan(app: ReadyAPI):\n    # Load the ML model\n    ml_models[\"answer_to_everything\"] = fake_answer_to_everything_ml_model\n    yield\n    # Clean up the ML models and release the resources\n    ml_models.clear()\n\n\napp = ReadyAPI(lifespan=lifespan)\n\n\n@app.get(\"/predict\")\nasync def predict(x: float):\n    result = ml_models[\"answer_to_everything\"](x)\n    return {\"result\": result}\n</code></pre> <p>Aqui n\u00f3s estamos simulando a inicializa\u00e7\u00e3o custosa do carregamento do modelo colocando a (falsa) fun\u00e7\u00e3o de modelo no dicion\u00e1rio com modelos de machine learning antes do <code>yield</code>. Este c\u00f3digo ser\u00e1 executado antes da aplica\u00e7\u00e3o come\u00e7ar a receber requisi\u00e7\u00f5es, durante a inicializa\u00e7\u00e3o.</p> <p>E ent\u00e3o, logo ap\u00f3s o <code>yield</code>, descarregaremos o modelo. Esse c\u00f3digo ser\u00e1 executado ap\u00f3s a aplica\u00e7\u00e3o terminar de lidar com as requisi\u00e7\u00f5es, pouco antes do encerramento. Isso poderia, por exemplo, liberar recursos como mem\u00f3ria ou GPU.</p> <p>Dica</p> <p>O <code>shutdown</code> aconteceria quando voc\u00ea estivesse encerrando a aplica\u00e7\u00e3o.</p> <p>Talvez voc\u00ea precise inicializar uma nova vers\u00e3o, ou apenas cansou de execut\u00e1-la. \ud83e\udd37</p>"},{"location":"advanced/events/#funcao-lifespan","title":"Fun\u00e7\u00e3o lifespan","text":"<p>A primeira coisa a notar, \u00e9 que estamos definindo uma fun\u00e7\u00e3o ass\u00edncrona com <code>yield</code>. Isso \u00e9 muito semelhante \u00e0 Depend\u00eancias com <code>yield</code>.</p> Python 3.8+ <pre><code>from contextlib import asynccontextmanager\n\nfrom readyapi import ReadyAPI\n\n\ndef fake_answer_to_everything_ml_model(x: float):\n    return x * 42\n\n\nml_models = {}\n\n\n@asynccontextmanager\nasync def lifespan(app: ReadyAPI):\n    # Load the ML model\n    ml_models[\"answer_to_everything\"] = fake_answer_to_everything_ml_model\n    yield\n    # Clean up the ML models and release the resources\n    ml_models.clear()\n\n\napp = ReadyAPI(lifespan=lifespan)\n\n\n@app.get(\"/predict\")\nasync def predict(x: float):\n    result = ml_models[\"answer_to_everything\"](x)\n    return {\"result\": result}\n</code></pre> <p>A primeira parte da fun\u00e7\u00e3o, antes do <code>yield</code>, ser\u00e1  executada antes da aplica\u00e7\u00e3o inicializar.</p> <p>E a parte posterior do <code>yield</code> ir\u00e1 executar ap\u00f3s a aplica\u00e7\u00e3o ser encerrada.</p>"},{"location":"advanced/events/#gerenciador-de-contexto-assincrono","title":"Gerenciador de Contexto Ass\u00edncrono","text":"<p>Se voc\u00ea verificar, a fun\u00e7\u00e3o est\u00e1 decorada com um <code>@asynccontextmanager</code>.</p> <p>Que converte a fun\u00e7\u00e3o em algo chamado de \"Gerenciador de Contexto Ass\u00edncrono\".</p> Python 3.8+ <pre><code>from contextlib import asynccontextmanager\n\nfrom readyapi import ReadyAPI\n\n\ndef fake_answer_to_everything_ml_model(x: float):\n    return x * 42\n\n\nml_models = {}\n\n\n@asynccontextmanager\nasync def lifespan(app: ReadyAPI):\n    # Load the ML model\n    ml_models[\"answer_to_everything\"] = fake_answer_to_everything_ml_model\n    yield\n    # Clean up the ML models and release the resources\n    ml_models.clear()\n\n\napp = ReadyAPI(lifespan=lifespan)\n\n\n@app.get(\"/predict\")\nasync def predict(x: float):\n    result = ml_models[\"answer_to_everything\"](x)\n    return {\"result\": result}\n</code></pre> <p>Um gerenciador de contexto em Python \u00e9 algo que voc\u00ea pode usar em uma declara\u00e7\u00e3o <code>with</code>, por exemplo, <code>open()</code> pode ser usado como um gerenciador de contexto:</p> <pre><code>with open(\"file.txt\") as file:\n    file.read()\n</code></pre> <p>Nas vers\u00f5es mais recentes de Python, h\u00e1 tamb\u00e9m um gerenciador de contexto ass\u00edncrono. Voc\u00ea o usaria com <code>async with</code>:</p> <pre><code>async with lifespan(app):\n    await do_stuff()\n</code></pre> <p>Quando voc\u00ea cria um gerenciador de contexto ou um gerenciador de contexto ass\u00edncrono como mencionado acima, o que ele faz \u00e9 que, antes de entrar no bloco <code>with</code>, ele ir\u00e1 executar o c\u00f3digo anterior ao <code>yield</code>, e depois de sair do bloco <code>with</code>, ele ir\u00e1 executar o c\u00f3digo depois do <code>yield</code>.</p> <p>No nosso exemplo de c\u00f3digo acima, n\u00f3s n\u00e3o usamos ele diretamente, mas n\u00f3s passamos para o ReadyAPI para ele us\u00e1-lo.</p> <p>O par\u00e2metro <code>lifespan</code> da aplica\u00e7\u00e3o <code>ReadyAPI</code> usa um Gerenciador de Contexto Ass\u00edncrono, ent\u00e3o n\u00f3s podemos passar nosso novo gerenciador de contexto ass\u00edncrono do <code>lifespan</code> para ele.</p> Python 3.8+ <pre><code>from contextlib import asynccontextmanager\n\nfrom readyapi import ReadyAPI\n\n\ndef fake_answer_to_everything_ml_model(x: float):\n    return x * 42\n\n\nml_models = {}\n\n\n@asynccontextmanager\nasync def lifespan(app: ReadyAPI):\n    # Load the ML model\n    ml_models[\"answer_to_everything\"] = fake_answer_to_everything_ml_model\n    yield\n    # Clean up the ML models and release the resources\n    ml_models.clear()\n\n\napp = ReadyAPI(lifespan=lifespan)\n\n\n@app.get(\"/predict\")\nasync def predict(x: float):\n    result = ml_models[\"answer_to_everything\"](x)\n    return {\"result\": result}\n</code></pre>"},{"location":"advanced/events/#eventos-alternativos-deprecados","title":"Eventos alternativos (deprecados)","text":"<p>Aviso</p> <p>A maneira recomendada para lidar com a inicializa\u00e7\u00e3o e o encerramento \u00e9 usando o par\u00e2metro <code>lifespan</code> da aplica\u00e7\u00e3o <code>ReadyAPI</code> como descrito acima.</p> <p>Voc\u00ea provavelmente pode pular essa parte.</p> <p>Existe uma forma alternativa para definir a execu\u00e7\u00e3o dessa l\u00f3gica durante inicializa\u00e7\u00e3o e durante encerramento.</p> <p>Voc\u00ea pode definir manipuladores de eventos (fun\u00e7\u00f5es) que precisam ser executadas antes da aplica\u00e7\u00e3o inicializar, ou quando a aplica\u00e7\u00e3o estiver encerrando.</p> <p>Essas fun\u00e7\u00f5es podem ser declaradas com <code>async def</code> ou <code>def</code> normal.</p>"},{"location":"advanced/events/#evento-startup","title":"Evento <code>startup</code>","text":"<p>Para adicionar uma fun\u00e7\u00e3o que deve rodar antes da aplica\u00e7\u00e3o iniciar, declare-a com o evento <code>\"startup\"</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\nitems = {}\n\n\n@app.on_event(\"startup\")\nasync def startup_event():\n    items[\"foo\"] = {\"name\": \"Fighters\"}\n    items[\"bar\"] = {\"name\": \"Tenders\"}\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(item_id: str):\n    return items[item_id]\n</code></pre> <p>Nesse caso, a fun\u00e7\u00e3o de manipula\u00e7\u00e3o de evento <code>startup</code> ir\u00e1 inicializar os itens do \"banco de dados\" (s\u00f3 um <code>dict</code>) com alguns valores.</p> <p>Voc\u00ea pode adicionar mais que uma fun\u00e7\u00e3o de manipula\u00e7\u00e3o de evento.</p> <p>E sua aplica\u00e7\u00e3o n\u00e3o ir\u00e1 come\u00e7ar a receber requisi\u00e7\u00f5es at\u00e9 que todos os manipuladores de eventos de <code>startup</code> sejam conclu\u00eddos.</p>"},{"location":"advanced/events/#evento-shutdown","title":"Evento <code>shutdown</code>","text":"<p>Para adicionar uma fun\u00e7\u00e3o que deve ser executada quando a aplica\u00e7\u00e3o estiver encerrando, declare ela com o evento <code>\"shutdown\"</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.on_event(\"shutdown\")\ndef shutdown_event():\n    with open(\"log.txt\", mode=\"a\") as log:\n        log.write(\"Application shutdown\")\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n</code></pre> <p>Aqui, a fun\u00e7\u00e3o de manipula\u00e7\u00e3o de evento <code>shutdown</code> ir\u00e1 escrever uma linha de texto <code>\"Application shutdown\"</code> no arquivo <code>log.txt</code>.</p> <p>Informa\u00e7\u00e3o</p> <p>Na fun\u00e7\u00e3o <code>open()</code>, o <code>mode=\"a\"</code> significa \"acrescentar\", ent\u00e3o, a linha ir\u00e1 ser adicionada depois de qualquer coisa que esteja naquele arquivo, sem sobrescrever o conte\u00fado anterior.</p> <p>Dica</p> <p>Perceba que nesse caso n\u00f3s estamos usando a fun\u00e7\u00e3o padr\u00e3o do Python <code>open()</code> que interage com um arquivo.</p> <p>Ent\u00e3o, isso envolve I/O (input/output), que exige \"esperar\" que coisas sejam escritas em disco.</p> <p>Mas <code>open()</code> n\u00e3o usa <code>async</code> e <code>await</code>.</p> <p>Ent\u00e3o, n\u00f3s declaramos uma fun\u00e7\u00e3o de manipula\u00e7\u00e3o de evento com o padr\u00e3o <code>def</code> ao inv\u00e9s de <code>async def</code>.</p>"},{"location":"advanced/events/#startup-e-shutdown-juntos","title":"<code>startup</code> e <code>shutdown</code> juntos","text":"<p>H\u00e1 uma grande chance que a l\u00f3gica para sua inicializa\u00e7\u00e3o e encerramento esteja conectada, voc\u00ea pode querer iniciar alguma coisa e ent\u00e3o finaliz\u00e1-la, adquirir um recurso e ent\u00e3o liber\u00e1-lo, etc.</p> <p>Fazendo isso em fun\u00e7\u00f5es separadas que n\u00e3o compartilham l\u00f3gica ou vari\u00e1veis entre elas \u00e9 mais dif\u00edcil j\u00e1 que voc\u00ea precisa armazenar os valores em vari\u00e1veis globais ou truques parecidos.</p> <p>Por causa disso, agora \u00e9 recomendado em vez disso usar o <code>lifespan</code> como explicado acima.</p>"},{"location":"advanced/events/#detalhes-tecnicos","title":"Detalhes t\u00e9cnicos","text":"<p>S\u00f3 um detalhe t\u00e9cnico para nerds curiosos. \ud83e\udd13</p> <p>Por baixo, na especifica\u00e7\u00e3o t\u00e9cnica ASGI, essa \u00e9 a parte do Protocolo Lifespan, e define eventos chamados <code>startup</code> e <code>shutdown</code>.</p> <p>Informa\u00e7\u00e3o</p> <p>Voc\u00ea pode ler mais sobre o manipulador <code>lifespan</code> do Starlette na Documenta\u00e7\u00e3o do Lifespan Starlette.</p> <p>Incluindo como manipular estado do lifespan que pode ser usado em outras \u00e1reas do seu c\u00f3digo.</p>"},{"location":"advanced/events/#sub-aplicacoes","title":"Sub Aplica\u00e7\u00f5es","text":"<p>\ud83d\udea8 Tenha em mente que esses eventos de lifespan (de inicializa\u00e7\u00e3o e desligamento) ir\u00e3o somente ser executados para a aplica\u00e7\u00e3o principal, n\u00e3o para Sub Aplica\u00e7\u00f5es - Montagem.</p>"},{"location":"advanced/generate-clients/","title":"Generate Clients","text":"<p>Como o ReadyAPI \u00e9 baseado na especifica\u00e7\u00e3o OpenAPI, voc\u00ea obt\u00e9m compatibilidade autom\u00e1tica com muitas ferramentas, incluindo a documenta\u00e7\u00e3o autom\u00e1tica da API (fornecida pelo Swagger UI).</p> <p>Uma vantagem particular que nem sempre \u00e9 \u00f3bvia \u00e9 que voc\u00ea pode gerar clientes (\u00e0s vezes chamados de SDKs) para a sua API, para muitas linguagens de programa\u00e7\u00e3o diferentes.</p>"},{"location":"advanced/generate-clients/#geradores-de-clientes-openapi","title":"Geradores de Clientes OpenAPI","text":"<p>Existem muitas ferramentas para gerar clientes a partir do OpenAPI.</p> <p>Uma ferramenta comum \u00e9 o OpenAPI Generator.</p> <p>Se voce est\u00e1 construindo um frontend, uma alternativa muito interessante \u00e9 o openapi-ts.</p>"},{"location":"advanced/generate-clients/#geradores-de-clientes-e-sdks-patrocinadores","title":"Geradores de Clientes e SDKs - Patrocinadores","text":"<p>Existem tamb\u00e9m alguns geradores de clientes e SDKs baseados na OpenAPI (ReadyAPI) patrocinados por empresas, em alguns casos eles podem oferecer recursos adicionais al\u00e9m de SDKs/clientes gerados de alta qualidade.</p> <p>Alguns deles tamb\u00e9m \u2728 patrocinam o ReadyAPI \u2728, isso garante o desenvolvimento cont\u00ednuo e saud\u00e1vel do ReadyAPI e seu ecossistema.</p> <p>E isso mostra o verdadeiro compromisso deles com o ReadyAPI e sua comunidade (voc\u00ea), pois eles n\u00e3o apenas querem fornecer um bom servi\u00e7o, mas tamb\u00e9m querem garantir que voc\u00ea tenha um framework bom e saud\u00e1vel, o ReadyAPI. \ud83d\ude47</p> <p>Por exemplo, voc\u00ea pode querer experimentar:</p> <ul> <li>Speakeasy</li> <li>Stainless</li> <li>liblab</li> </ul> <p>Existem tamb\u00e9m v\u00e1rias outras empresas que oferecem servi\u00e7os semelhantes que voc\u00ea pode pesquisar e encontrar online. \ud83e\udd13</p>"},{"location":"advanced/generate-clients/#gerar-um-cliente-frontend-typescript","title":"Gerar um Cliente Frontend TypeScript","text":"<p>Vamos come\u00e7ar com um aplicativo ReadyAPI simples:</p> Python 3.9+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n\nclass ResponseMessage(BaseModel):\n    message: str\n\n\n@app.post(\"/items/\", response_model=ResponseMessage)\nasync def create_item(item: Item):\n    return {\"message\": \"item received\"}\n\n\n@app.get(\"/items/\", response_model=list[Item])\nasync def get_items():\n    return [\n        {\"name\": \"Plumbus\", \"price\": 3},\n        {\"name\": \"Portal Gun\", \"price\": 9001},\n    ]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import List\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n\nclass ResponseMessage(BaseModel):\n    message: str\n\n\n@app.post(\"/items/\", response_model=ResponseMessage)\nasync def create_item(item: Item):\n    return {\"message\": \"item received\"}\n\n\n@app.get(\"/items/\", response_model=List[Item])\nasync def get_items():\n    return [\n        {\"name\": \"Plumbus\", \"price\": 3},\n        {\"name\": \"Portal Gun\", \"price\": 9001},\n    ]\n</code></pre> <p>Note que as opera\u00e7\u00f5es de rota definem os modelos que usam para o corpo da requisi\u00e7\u00e3o e o corpo da resposta, usando os modelos <code>Item</code> e <code>ResponseMessage</code>.</p>"},{"location":"advanced/generate-clients/#documentacao-da-api","title":"Documenta\u00e7\u00e3o da API","text":"<p>Se voc\u00ea acessar a documenta\u00e7\u00e3o da API, ver\u00e1 que ela tem os schemas para os dados a serem enviados nas requisi\u00e7\u00f5es e recebidos nas respostas:</p> <p></p> <p>Voc\u00ea pode ver esses schemas porque eles foram declarados com os modelos no app.</p> <p>Essas informa\u00e7\u00f5es est\u00e3o dispon\u00edveis no OpenAPI schema do app e s\u00e3o mostradas na documenta\u00e7\u00e3o da API (pelo Swagger UI).</p> <p>E essas mesmas informa\u00e7\u00f5es dos modelos que est\u00e3o inclu\u00eddas no OpenAPI s\u00e3o o que pode ser usado para gerar o c\u00f3digo do cliente.</p>"},{"location":"advanced/generate-clients/#gerar-um-cliente-typescript","title":"Gerar um Cliente TypeScript","text":"<p>Agora que temos o app com os modelos, podemos gerar o c\u00f3digo do cliente para o frontend.</p>"},{"location":"advanced/generate-clients/#instalar-o-openapi-ts","title":"Instalar o <code>openapi-ts</code>","text":"<p>Voc\u00ea pode instalar o <code>openapi-ts</code> no seu c\u00f3digo frontend com:</p> <pre><code>$ npm install @hey-api/openapi-ts --save-dev\n\n---&gt; 100%\n</code></pre>"},{"location":"advanced/generate-clients/#gerar-o-codigo-do-cliente","title":"Gerar o C\u00f3digo do Cliente","text":"<p>Para gerar o c\u00f3digo do cliente, voc\u00ea pode usar a aplica\u00e7\u00e3o de linha de comando <code>openapi-ts</code> que agora est\u00e1 instalada.</p> <p>Como ela est\u00e1 instalada no projeto local, voc\u00ea provavelmente n\u00e3o conseguiria chamar esse comando diretamente, mas voc\u00ea o colocaria no seu arquivo <code>package.json</code>.</p> <p>Poderia ser assim:</p> <pre><code>{\n  \"name\": \"frontend-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"generate-client\": \"openapi-ts --input http://localhost:8000/openapi.json --output ./src/client --client axios\"\n  },\n  \"author\": \"\",\n  \"license\": \"\",\n  \"devDependencies\": {\n    \"@hey-api/openapi-ts\": \"^0.27.38\",\n    \"typescript\": \"^4.6.2\"\n  }\n}\n</code></pre> <p>Depois de ter esse script NPM <code>generate-client</code> l\u00e1, voc\u00ea pode execut\u00e1-lo com:</p> <pre><code>$ npm run generate-client\n\nfrontend-app@1.0.0 generate-client /home/user/code/frontend-app\n&gt; openapi-ts --input http://localhost:8000/openapi.json --output ./src/client --client axios\n</code></pre> <p>Esse comando gerar\u00e1 o c\u00f3digo em <code>./src/client</code> e usar\u00e1 o <code>axios</code> (a biblioteca HTTP frontend) internamente.</p>"},{"location":"advanced/generate-clients/#experimente-o-codigo-do-cliente","title":"Experimente o C\u00f3digo do Cliente","text":"<p>Agora voc\u00ea pode importar e usar o c\u00f3digo do cliente, ele poderia ser assim, observe que voc\u00ea obt\u00e9m preenchimento autom\u00e1tico para os m\u00e9todos:</p> <p></p> <p>Voc\u00ea tamb\u00e9m obter\u00e1 preenchimento autom\u00e1tico para o corpo a ser enviado:</p> <p></p> <p>Dica</p> <p>Observe o preenchimento autom\u00e1tico para <code>name</code> e <code>price</code>, que foi definido no aplicativo ReadyAPI, no modelo <code>Item</code>.</p> <p>Voc\u00ea ter\u00e1 erros em linha para os dados que voc\u00ea envia:</p> <p></p> <p>O objeto de resposta tamb\u00e9m ter\u00e1 preenchimento autom\u00e1tico:</p> <p></p>"},{"location":"advanced/generate-clients/#app-readyapi-com-tags","title":"App ReadyAPI com Tags","text":"<p>Em muitos casos seu app ReadyAPI ser\u00e1 maior, e voc\u00ea provavelmente usar\u00e1 tags para separar diferentes grupos de opera\u00e7\u00f5es de rota.</p> <p>Por exemplo, voc\u00ea poderia ter uma se\u00e7\u00e3o para items e outra se\u00e7\u00e3o para users, e elas poderiam ser separadas por tags:</p> Python 3.9+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n\nclass ResponseMessage(BaseModel):\n    message: str\n\n\nclass User(BaseModel):\n    username: str\n    email: str\n\n\n@app.post(\"/items/\", response_model=ResponseMessage, tags=[\"items\"])\nasync def create_item(item: Item):\n    return {\"message\": \"Item received\"}\n\n\n@app.get(\"/items/\", response_model=list[Item], tags=[\"items\"])\nasync def get_items():\n    return [\n        {\"name\": \"Plumbus\", \"price\": 3},\n        {\"name\": \"Portal Gun\", \"price\": 9001},\n    ]\n\n\n@app.post(\"/users/\", response_model=ResponseMessage, tags=[\"users\"])\nasync def create_user(user: User):\n    return {\"message\": \"User received\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import List\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n\nclass ResponseMessage(BaseModel):\n    message: str\n\n\nclass User(BaseModel):\n    username: str\n    email: str\n\n\n@app.post(\"/items/\", response_model=ResponseMessage, tags=[\"items\"])\nasync def create_item(item: Item):\n    return {\"message\": \"Item received\"}\n\n\n@app.get(\"/items/\", response_model=List[Item], tags=[\"items\"])\nasync def get_items():\n    return [\n        {\"name\": \"Plumbus\", \"price\": 3},\n        {\"name\": \"Portal Gun\", \"price\": 9001},\n    ]\n\n\n@app.post(\"/users/\", response_model=ResponseMessage, tags=[\"users\"])\nasync def create_user(user: User):\n    return {\"message\": \"User received\"}\n</code></pre>"},{"location":"advanced/generate-clients/#gerar-um-cliente-typescript-com-tags","title":"Gerar um Cliente TypeScript com Tags","text":"<p>Se voc\u00ea gerar um cliente para um app ReadyAPI usando tags, normalmente tamb\u00e9m separar\u00e1 o c\u00f3digo do cliente com base nas tags.</p> <p>Dessa forma, voc\u00ea poder\u00e1 ter as coisas ordenadas e agrupadas corretamente para o c\u00f3digo do cliente:</p> <p></p> <p>Nesse caso voc\u00ea tem:</p> <ul> <li><code>ItemsService</code></li> <li><code>UsersService</code></li> </ul>"},{"location":"advanced/generate-clients/#nomes-dos-metodos-do-cliente","title":"Nomes dos M\u00e9todos do Cliente","text":"<p>Agora os nomes dos m\u00e9todos gerados como <code>createItemItemsPost</code> n\u00e3o parecem muito \"limpos\":</p> <pre><code>ItemsService.createItemItemsPost({name: \"Plumbus\", price: 5})\n</code></pre> <p>...isto ocorre porque o gerador de clientes usa o operation ID interno do OpenAPI para cada opera\u00e7\u00e3o de rota.</p> <p>O OpenAPI exige que cada operation ID seja \u00fanico em todas as opera\u00e7\u00f5es de rota, ent\u00e3o o ReadyAPI usa o nome da fun\u00e7\u00e3o, o caminho e o m\u00e9todo/operacao HTTP para gerar esse operation ID, porque dessa forma ele pode garantir que os operation IDs sejam \u00fanicos.</p> <p>Mas eu vou te mostrar como melhorar isso a seguir. \ud83e\udd13</p>"},{"location":"advanced/generate-clients/#ids-de-operacao-personalizados-e-melhores-nomes-de-metodo","title":"IDs de Opera\u00e7\u00e3o Personalizados e Melhores Nomes de M\u00e9todo","text":"<p>Voc\u00ea pode modificar a maneira como esses IDs de opera\u00e7\u00e3o s\u00e3o gerados para torn\u00e1-los mais simples e ter nomes de m\u00e9todo mais simples nos clientes.</p> <p>Neste caso, voc\u00ea ter\u00e1 que garantir que cada ID de opera\u00e7\u00e3o seja \u00fanico de alguma outra maneira.</p> <p>Por exemplo, voc\u00ea poderia garantir que cada opera\u00e7\u00e3o de rota tenha uma tag, e ent\u00e3o gerar o ID da opera\u00e7\u00e3o com base na tag e no nome da opera\u00e7\u00e3o de rota (o nome da fun\u00e7\u00e3o).</p>"},{"location":"advanced/generate-clients/#funcao-personalizada-para-gerar-ids-de-operacao-unicos","title":"Fun\u00e7\u00e3o Personalizada para Gerar IDs de Opera\u00e7\u00e3o \u00danicos","text":"<p>O ReadyAPI usa um ID \u00fanico para cada opera\u00e7\u00e3o de rota, ele \u00e9 usado para o ID da opera\u00e7\u00e3o e tamb\u00e9m para os nomes de quaisquer modelos personalizados necess\u00e1rios, para requisi\u00e7\u00f5es ou respostas.</p> <p>Voc\u00ea pode personalizar essa fun\u00e7\u00e3o. Ela recebe uma <code>APIRoute</code> e gera uma string.</p> <p>Por exemplo, aqui est\u00e1 usando a primeira tag (voc\u00ea provavelmente ter\u00e1 apenas uma tag) e o nome da opera\u00e7\u00e3o de rota (o nome da fun\u00e7\u00e3o).</p> <p>Voc\u00ea pode ent\u00e3o passar essa fun\u00e7\u00e3o personalizada para o ReadyAPI como o par\u00e2metro <code>generate_unique_id_function</code>:</p> Python 3.9+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.routing import APIRoute\n\n\ndef custom_generate_unique_id(route: APIRoute):\n    return f\"{route.tags[0]}-{route.name}\"\n\n\napp = ReadyAPI(generate_unique_id_function=custom_generate_unique_id)\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n\nclass ResponseMessage(BaseModel):\n    message: str\n\n\nclass User(BaseModel):\n    username: str\n    email: str\n\n\n@app.post(\"/items/\", response_model=ResponseMessage, tags=[\"items\"])\nasync def create_item(item: Item):\n    return {\"message\": \"Item received\"}\n\n\n@app.get(\"/items/\", response_model=list[Item], tags=[\"items\"])\nasync def get_items():\n    return [\n        {\"name\": \"Plumbus\", \"price\": 3},\n        {\"name\": \"Portal Gun\", \"price\": 9001},\n    ]\n\n\n@app.post(\"/users/\", response_model=ResponseMessage, tags=[\"users\"])\nasync def create_user(user: User):\n    return {\"message\": \"User received\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import List\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.routing import APIRoute\n\n\ndef custom_generate_unique_id(route: APIRoute):\n    return f\"{route.tags[0]}-{route.name}\"\n\n\napp = ReadyAPI(generate_unique_id_function=custom_generate_unique_id)\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n\nclass ResponseMessage(BaseModel):\n    message: str\n\n\nclass User(BaseModel):\n    username: str\n    email: str\n\n\n@app.post(\"/items/\", response_model=ResponseMessage, tags=[\"items\"])\nasync def create_item(item: Item):\n    return {\"message\": \"Item received\"}\n\n\n@app.get(\"/items/\", response_model=List[Item], tags=[\"items\"])\nasync def get_items():\n    return [\n        {\"name\": \"Plumbus\", \"price\": 3},\n        {\"name\": \"Portal Gun\", \"price\": 9001},\n    ]\n\n\n@app.post(\"/users/\", response_model=ResponseMessage, tags=[\"users\"])\nasync def create_user(user: User):\n    return {\"message\": \"User received\"}\n</code></pre>"},{"location":"advanced/generate-clients/#gerar-um-cliente-typescript-com-ids-de-operacao-personalizados","title":"Gerar um Cliente TypeScript com IDs de Opera\u00e7\u00e3o Personalizados","text":"<p>Agora, se voc\u00ea gerar o cliente novamente, ver\u00e1 que ele tem os nomes dos m\u00e9todos melhorados:</p> <p></p> <p>Como voc\u00ea pode ver, os nomes dos m\u00e9todos agora t\u00eam a tag e, em seguida, o nome da fun\u00e7\u00e3o. Agora eles n\u00e3o incluem informa\u00e7\u00f5es do caminho da URL e da opera\u00e7\u00e3o HTTP.</p>"},{"location":"advanced/generate-clients/#pre-processar-a-especificacao-openapi-para-o-gerador-de-clientes","title":"Pr\u00e9-processar a Especifica\u00e7\u00e3o OpenAPI para o Gerador de Clientes","text":"<p>O c\u00f3digo gerado ainda tem algumas informa\u00e7\u00f5es duplicadas.</p> <p>N\u00f3s j\u00e1 sabemos que esse m\u00e9todo est\u00e1 relacionado aos items porque essa palavra est\u00e1 no <code>ItemsService</code> (retirada da tag), mas ainda temos o nome da tag prefixado no nome do m\u00e9todo tamb\u00e9m. \ud83d\ude15</p> <p>Provavelmente ainda queremos mant\u00ea-lo para o OpenAPI em geral, pois isso garantir\u00e1 que os IDs de opera\u00e7\u00e3o sejam \u00fanicos.</p> <p>Mas para o cliente gerado, poder\u00edamos modificar os IDs de opera\u00e7\u00e3o do OpenAPI logo antes de gerar os clientes, apenas para tornar esses nomes de m\u00e9todo mais simples.</p> <p>Poder\u00edamos baixar o JSON do OpenAPI para um arquivo <code>openapi.json</code> e ent\u00e3o poder\u00edamos remover essa tag prefixada com um script como este:</p> Python 3.8+Node.js <pre><code>import json\nfrom pathlib import Path\n\nfile_path = Path(\"./openapi.json\")\nopenapi_content = json.loads(file_path.read_text())\n\nfor path_data in openapi_content[\"paths\"].values():\n    for operation in path_data.values():\n        tag = operation[\"tags\"][0]\n        operation_id = operation[\"operationId\"]\n        to_remove = f\"{tag}-\"\n        new_operation_id = operation_id[len(to_remove) :]\n        operation[\"operationId\"] = new_operation_id\n\nfile_path.write_text(json.dumps(openapi_content))\n</code></pre> <pre><code>import * as fs from 'fs'\n\nasync function modifyOpenAPIFile(filePath) {\n  try {\n    const data = await fs.promises.readFile(filePath)\n    const openapiContent = JSON.parse(data)\n\n    const paths = openapiContent.paths\n    for (const pathKey of Object.keys(paths)) {\n      const pathData = paths[pathKey]\n      for (const method of Object.keys(pathData)) {\n        const operation = pathData[method]\n        if (operation.tags &amp;&amp; operation.tags.length &gt; 0) {\n          const tag = operation.tags[0]\n          const operationId = operation.operationId\n          const toRemove = `${tag}-`\n          if (operationId.startsWith(toRemove)) {\n            const newOperationId = operationId.substring(toRemove.length)\n            operation.operationId = newOperationId\n          }\n        }\n      }\n    }\n\n    await fs.promises.writeFile(\n      filePath,\n      JSON.stringify(openapiContent, null, 2),\n    )\n    console.log('File successfully modified')\n  } catch (err) {\n    console.error('Error:', err)\n  }\n}\n\nconst filePath = './openapi.json'\nmodifyOpenAPIFile(filePath)\n</code></pre> <p>Com isso, os IDs de opera\u00e7\u00e3o seriam renomeados de coisas como <code>items-get_items</code> para apenas <code>get_items</code>, dessa forma o gerador de clientes pode gerar nomes de m\u00e9todos mais simples.</p>"},{"location":"advanced/generate-clients/#gerar-um-cliente-typescript-com-o-openapi-pre-processado","title":"Gerar um Cliente TypeScript com o OpenAPI Pr\u00e9-processado","text":"<p>Agora, como o resultado final est\u00e1 em um arquivo <code>openapi.json</code>, voc\u00ea modificaria o <code>package.json</code> para usar esse arquivo local, por exemplo:</p> <pre><code>{\n  \"name\": \"frontend-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"generate-client\": \"openapi-ts --input ./openapi.json --output ./src/client --client axios\"\n  },\n  \"author\": \"\",\n  \"license\": \"\",\n  \"devDependencies\": {\n    \"@hey-api/openapi-ts\": \"^0.27.38\",\n    \"typescript\": \"^4.6.2\"\n  }\n}\n</code></pre> <p>Depois de gerar o novo cliente, voc\u00ea teria agora nomes de m\u00e9todos \"limpos\", com todo o preenchimento autom\u00e1tico, erros em linha, etc:</p> <p></p>"},{"location":"advanced/generate-clients/#beneficios","title":"Benef\u00edcios","text":"<p>Ao usar os clientes gerados automaticamente, voc\u00ea teria preenchimento autom\u00e1tico para:</p> <ul> <li>M\u00e9todos.</li> <li>Corpo de requisi\u00e7\u00f5es, par\u00e2metros da query, etc.</li> <li>Corpo de respostas.</li> </ul> <p>Voc\u00ea tamb\u00e9m teria erros em linha para tudo.</p> <p>E sempre que voc\u00ea atualizar o c\u00f3digo do backend, e regenerar o frontend, ele teria quaisquer novas opera\u00e7\u00f5es de rota dispon\u00edveis como m\u00e9todos, as antigas removidas, e qualquer outra altera\u00e7\u00e3o seria refletida no c\u00f3digo gerado. \ud83e\udd13</p> <p>Isso tamb\u00e9m significa que se algo mudar, ser\u00e1 refletido no c\u00f3digo do cliente automaticamente. E se voc\u00ea construir o cliente, ele dar\u00e1 erro se houver alguma incompatibilidade nos dados usados.</p> <p>Ent\u00e3o, voc\u00ea detectaria v\u00e1rios erros muito cedo no ciclo de desenvolvimento, em vez de ter que esperar que os erros apare\u00e7am para seus usu\u00e1rios finais em produ\u00e7\u00e3o e ent\u00e3o tentar depurar onde est\u00e1 o problema. \u2728</p>"},{"location":"advanced/middleware/","title":"Middleware Avan\u00e7ado","text":"<p>No tutorial principal voc\u00ea leu como adicionar Middleware Personalizado \u00e0 sua aplica\u00e7\u00e3o.</p> <p>E ent\u00e3o voc\u00ea tamb\u00e9m leu como lidar com CORS com o <code>CORSMiddleware</code>.</p> <p>Nesta se\u00e7\u00e3o, veremos como usar outros middlewares.</p>"},{"location":"advanced/middleware/#adicionando-middlewares-asgi","title":"Adicionando middlewares ASGI","text":"<p>Como o ReadyAPI \u00e9 baseado no Starlette e implementa a especifica\u00e7\u00e3o ASGI, voc\u00ea pode usar qualquer middleware ASGI.</p> <p>O middleware n\u00e3o precisa ser feito para o ReadyAPI ou Starlette para funcionar, desde que siga a especifica\u00e7\u00e3o ASGI.</p> <p>No geral, os middlewares ASGI s\u00e3o classes que esperam receber um aplicativo ASGI como o primeiro argumento.</p> <p>Ent\u00e3o, na documenta\u00e7\u00e3o de middlewares ASGI de terceiros, eles provavelmente dir\u00e3o para voc\u00ea fazer algo como:</p> <pre><code>from unicorn import UnicornMiddleware\n\napp = SomeASGIApp()\n\nnew_app = UnicornMiddleware(app, some_config=\"rainbow\")\n</code></pre> <p>Mas, o ReadyAPI (na verdade, o Starlette) fornece uma maneira mais simples de fazer isso que garante que os middlewares internos lidem com erros do servidor e que os manipuladores de exce\u00e7\u00f5es personalizados funcionem corretamente.</p> <p>Para isso, voc\u00ea usa <code>app.add_middleware()</code> (como no exemplo para CORS).</p> <pre><code>from readyapi import ReadyAPI\nfrom unicorn import UnicornMiddleware\n\napp = ReadyAPI()\n\napp.add_middleware(UnicornMiddleware, some_config=\"rainbow\")\n</code></pre> <p><code>app.add_middleware()</code> recebe uma classe de middleware como o primeiro argumento e quaisquer argumentos adicionais a serem passados para o middleware.</p>"},{"location":"advanced/middleware/#middlewares-integrados","title":"Middlewares Integrados","text":"<p>ReadyAPI inclui v\u00e1rios middlewares para casos de uso comuns, veremos a seguir como us\u00e1-los.</p> <p>Detalhes T\u00e9cnicos</p> <p>Para o pr\u00f3ximo exemplo, voc\u00ea tamb\u00e9m poderia usar <code>from starlette.middleware.something import SomethingMiddleware</code>.</p> <p>ReadyAPI fornece v\u00e1rios middlewares em <code>readyapi.middleware</code> apenas como uma conveni\u00eancia para voc\u00ea, o desenvolvedor. Mas a maioria dos middlewares dispon\u00edveis vem diretamente do Starlette.</p>"},{"location":"advanced/middleware/#httpsredirectmiddleware","title":"<code>HTTPSRedirectMiddleware</code>","text":"<p>Garante que todas as requisi\u00e7\u00f5es devem ser <code>https</code> ou <code>wss</code>.</p> <p>Qualquer requisi\u00e7\u00e3o para <code>http</code> ou <code>ws</code> ser\u00e1 redirecionada para o esquema seguro.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.middleware.httpsredirect import HTTPSRedirectMiddleware\n\napp = ReadyAPI()\n\napp.add_middleware(HTTPSRedirectMiddleware)\n\n\n@app.get(\"/\")\nasync def main():\n    return {\"message\": \"Hello World\"}\n</code></pre>"},{"location":"advanced/middleware/#trustedhostmiddleware","title":"<code>TrustedHostMiddleware</code>","text":"<p>Garante que todas as requisi\u00e7\u00f5es recebidas tenham um cabe\u00e7alho <code>Host</code> corretamente configurado, a fim de proteger contra ataques de cabe\u00e7alho de host HTTP.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.middleware.trustedhost import TrustedHostMiddleware\n\napp = ReadyAPI()\n\napp.add_middleware(\n    TrustedHostMiddleware, allowed_hosts=[\"example.com\", \"*.example.com\"]\n)\n\n\n@app.get(\"/\")\nasync def main():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>Os seguintes argumentos s\u00e3o suportados:</p> <ul> <li><code>allowed_hosts</code> - Uma lista de nomes de dom\u00ednio que s\u00e3o permitidos como nomes de host. Dom\u00ednios com coringa, como <code>*.example.com</code>, s\u00e3o suportados para corresponder a subdom\u00ednios. Para permitir qualquer nome de host, use <code>allowed_hosts=[\"*\"]</code> ou omita o middleware.</li> </ul> <p>Se uma requisi\u00e7\u00e3o recebida n\u00e3o for validada corretamente, uma resposta <code>400</code> ser\u00e1 enviada.</p>"},{"location":"advanced/middleware/#gzipmiddleware","title":"<code>GZipMiddleware</code>","text":"<p>Gerencia respostas GZip para qualquer requisi\u00e7\u00e3o que inclua <code>\"gzip\"</code> no cabe\u00e7alho <code>Accept-Encoding</code>.</p> <p>O middleware lidar\u00e1 com respostas padr\u00e3o e de streaming.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.middleware.gzip import GZipMiddleware\n\napp = ReadyAPI()\n\napp.add_middleware(GZipMiddleware, minimum_size=1000, compresslevel=5)\n\n\n@app.get(\"/\")\nasync def main():\n    return \"somebigcontent\"\n</code></pre> <p>Os seguintes argumentos s\u00e3o suportados:</p> <ul> <li><code>minimum_size</code> - N\u00e3o comprima respostas menores que este tamanho m\u00ednimo em bytes. O padr\u00e3o \u00e9 <code>500</code>.</li> <li><code>compresslevel</code> - Usado durante a compress\u00e3o GZip. \u00c9 um inteiro variando de 1 a 9. O padr\u00e3o \u00e9 <code>9</code>. Um valor menor resulta em uma compress\u00e3o mais r\u00e1pida, mas em arquivos maiores, enquanto um valor maior resulta em uma compress\u00e3o mais lenta, mas em arquivos menores.</li> </ul>"},{"location":"advanced/middleware/#outros-middlewares","title":"Outros middlewares","text":"<p>H\u00e1 muitos outros middlewares ASGI.</p> <p>Por exemplo:</p> <ul> <li>Uvicorn's <code>ProxyHeadersMiddleware</code></li> <li>MessagePack</li> </ul> <p>Para checar outros middlewares dispon\u00edveis, confira Documenta\u00e7\u00e3o de Middlewares do Starlette e a  Lista Incr\u00edvel do ASGI.</p>"},{"location":"advanced/openapi-callbacks/","title":"Callbacks na OpenAPI","text":"<p>Voc\u00ea poderia criar uma API com uma opera\u00e7\u00e3o de rota que poderia acionar uma solicita\u00e7\u00e3o a uma API externa criada por outra pessoa (provavelmente o mesmo desenvolvedor que estaria usando sua API).</p> <p>O processo que acontece quando seu aplicativo de API chama a API externa \u00e9 chamado de \"callback\". Porque o software que o desenvolvedor externo escreveu envia uma solicita\u00e7\u00e3o para sua API e ent\u00e3o sua API chama de volta, enviando uma solicita\u00e7\u00e3o para uma API externa (que provavelmente foi criada pelo mesmo desenvolvedor).</p> <p>Nesse caso, voc\u00ea poderia querer documentar como essa API externa deveria ser. Que opera\u00e7\u00e3o de rota ela deveria ter, que corpo ela deveria esperar, que resposta ela deveria retornar, etc.</p>"},{"location":"advanced/openapi-callbacks/#um-aplicativo-com-callbacks","title":"Um aplicativo com callbacks","text":"<p>Vamos ver tudo isso com um exemplo.</p> <p>Imagine que voc\u00ea tem um aplicativo que permite criar faturas.</p> <p>Essas faturas ter\u00e3o um <code>id</code>, <code>title</code> (opcional), <code>customer</code> e <code>total</code>.</p> <p>O usu\u00e1rio da sua API (um desenvolvedor externo) criar\u00e1 uma fatura em sua API com uma solicita\u00e7\u00e3o POST.</p> <p>Ent\u00e3o sua API ir\u00e1 (vamos imaginar):</p> <ul> <li>Enviar uma solicita\u00e7\u00e3o de pagamento para o desenvolvedor externo.</li> <li>Coletar o dinheiro.</li> <li>Enviar a notifica\u00e7\u00e3o de volta para o usu\u00e1rio da API (o desenvolvedor externo).</li> <li>Isso ser\u00e1 feito enviando uma solicita\u00e7\u00e3o POST (de sua API) para alguma API externa fornecida por esse desenvolvedor externo (este \u00e9 o \"callback\").</li> </ul>"},{"location":"advanced/openapi-callbacks/#o-aplicativo-readyapi-normal","title":"O aplicativo ReadyAPI normal","text":"<p>Vamos primeiro ver como o aplicativo da API normal se pareceria antes de adicionar o callback.</p> <p>Ele ter\u00e1 uma opera\u00e7\u00e3o de rota que receber\u00e1 um corpo <code>Invoice</code>, e um par\u00e2metro de consulta <code>callback_url</code> que conter\u00e1 a URL para o callback.</p> <p>Essa parte \u00e9 bastante normal, a maior parte do c\u00f3digo provavelmente j\u00e1 \u00e9 familiar para voc\u00ea:</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import APIRouter, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Invoice(BaseModel):\n    id: str\n    title: Union[str, None] = None\n    customer: str\n    total: float\n\n\nclass InvoiceEvent(BaseModel):\n    description: str\n    paid: bool\n\n\nclass InvoiceEventReceived(BaseModel):\n    ok: bool\n\n\ninvoices_callback_router = APIRouter()\n\n\n@invoices_callback_router.post(\n    \"{$callback_url}/invoices/{$request.body.id}\", response_model=InvoiceEventReceived\n)\ndef invoice_notification(body: InvoiceEvent):\n    pass\n\n\n@app.post(\"/invoices/\", callbacks=invoices_callback_router.routes)\ndef create_invoice(invoice: Invoice, callback_url: Union[HttpUrl, None] = None):\n    \"\"\"\n    Create an invoice.\n\n    This will (let's imagine) let the API user (some external developer) create an\n    invoice.\n\n    And this path operation will:\n\n    * Send the invoice to the client.\n    * Collect the money from the client.\n    * Send a notification back to the API user (the external developer), as a callback.\n        * At this point is that the API will somehow send a POST request to the\n            external API with the notification of the invoice event\n            (e.g. \"payment successful\").\n    \"\"\"\n    # Send the invoice, collect the money, send the notification (the callback)\n    return {\"msg\": \"Invoice received\"}\n</code></pre> <p>Dica</p> <p>O par\u00e2metro de consulta <code>callback_url</code> usa um tipo Pydantic Url.</p> <p>A \u00fanica coisa nova \u00e9 o argumento <code>callbacks=invoices_callback_router.routes</code> no decorador da opera\u00e7\u00e3o de rota. Veremos o que \u00e9 isso a seguir.</p>"},{"location":"advanced/openapi-callbacks/#documentando-o-callback","title":"Documentando o callback","text":"<p>O c\u00f3digo real do callback depender\u00e1 muito do seu pr\u00f3prio aplicativo de API.</p> <p>E provavelmente variar\u00e1 muito de um aplicativo para o outro.</p> <p>Poderia ser apenas uma ou duas linhas de c\u00f3digo, como:</p> <pre><code>callback_url = \"https://example.com/api/v1/invoices/events/\"\nhttpx.post(callback_url, json={\"description\": \"Invoice paid\", \"paid\": True})\n</code></pre> <p>Mas possivelmente a parte mais importante do callback \u00e9 garantir que o usu\u00e1rio da sua API (o desenvolvedor externo) implemente a API externa corretamente, de acordo com os dados que sua API vai enviar no corpo da solicita\u00e7\u00e3o do callback, etc.</p> <p>Ent\u00e3o, o que faremos a seguir \u00e9 adicionar o c\u00f3digo para documentar como essa API externa deve ser para receber o callback de sua API.</p> <p>A documenta\u00e7\u00e3o aparecer\u00e1 na interface do Swagger em <code>/docs</code> em sua API, e permitir\u00e1 que os desenvolvedores externos saibam como construir a API externa.</p> <p>Esse exemplo n\u00e3o implementa o callback em si (que poderia ser apenas uma linha de c\u00f3digo), apenas a parte da documenta\u00e7\u00e3o.</p> <p>Dica</p> <p>O callback real \u00e9 apenas uma solicita\u00e7\u00e3o HTTP.</p> <p>Quando implementando o callback por voc\u00ea mesmo, voc\u00ea pode usar algo como HTTPX ou Requisi\u00e7\u00f5es.</p>"},{"location":"advanced/openapi-callbacks/#escrevendo-o-codigo-de-documentacao-do-callback","title":"Escrevendo o c\u00f3digo de documenta\u00e7\u00e3o do callback","text":"<p>Esse c\u00f3digo n\u00e3o ser\u00e1 executado em seu aplicativo, n\u00f3s s\u00f3 precisamos dele para documentar como essa API externa deveria ser.</p> <p>Mas, voc\u00ea j\u00e1 sabe como criar facilmente documenta\u00e7\u00e3o autom\u00e1tica para uma API com o ReadyAPI.</p> <p>Ent\u00e3o vamos usar esse mesmo conhecimento para documentar como a API externa deveria ser... criando as opera\u00e7\u00f5es de rota que a API externa deveria implementar (as que sua API ir\u00e1 chamar).</p> <p>Dica</p> <p>Quando escrever o c\u00f3digo para documentar um callback, pode ser \u00fatil imaginar que voc\u00ea \u00e9 aquele desenvolvedor externo. E que voc\u00ea est\u00e1 atualmente implementando a API externa, n\u00e3o sua API.</p> <p>Adotar temporariamente esse ponto de vista (do desenvolvedor externo) pode ajudar a sentir que \u00e9 mais \u00f3bvio onde colocar os par\u00e2metros, o modelo Pydantic para o corpo, para a resposta, etc. para essa API externa.</p>"},{"location":"advanced/openapi-callbacks/#criar-um-apirouter-para-o-callback","title":"Criar um <code>APIRouter</code> para o callback","text":"<p>Primeiramente crie um novo <code>APIRouter</code> que conter\u00e1 um ou mais callbacks.</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import APIRouter, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Invoice(BaseModel):\n    id: str\n    title: Union[str, None] = None\n    customer: str\n    total: float\n\n\nclass InvoiceEvent(BaseModel):\n    description: str\n    paid: bool\n\n\nclass InvoiceEventReceived(BaseModel):\n    ok: bool\n\n\ninvoices_callback_router = APIRouter()\n\n\n@invoices_callback_router.post(\n    \"{$callback_url}/invoices/{$request.body.id}\", response_model=InvoiceEventReceived\n)\ndef invoice_notification(body: InvoiceEvent):\n    pass\n\n\n@app.post(\"/invoices/\", callbacks=invoices_callback_router.routes)\ndef create_invoice(invoice: Invoice, callback_url: Union[HttpUrl, None] = None):\n    \"\"\"\n    Create an invoice.\n\n    This will (let's imagine) let the API user (some external developer) create an\n    invoice.\n\n    And this path operation will:\n\n    * Send the invoice to the client.\n    * Collect the money from the client.\n    * Send a notification back to the API user (the external developer), as a callback.\n        * At this point is that the API will somehow send a POST request to the\n            external API with the notification of the invoice event\n            (e.g. \"payment successful\").\n    \"\"\"\n    # Send the invoice, collect the money, send the notification (the callback)\n    return {\"msg\": \"Invoice received\"}\n</code></pre>"},{"location":"advanced/openapi-callbacks/#crie-a-operacao-de-rota-do-callback","title":"Crie a opera\u00e7\u00e3o de rota do callback","text":"<p>Para criar a opera\u00e7\u00e3o de rota do callback, use o mesmo <code>APIRouter</code> que voc\u00ea criou acima.</p> <p>Ele deve parecer exatamente como uma opera\u00e7\u00e3o de rota normal do ReadyAPI:</p> <ul> <li>Ele provavelmente deveria ter uma declara\u00e7\u00e3o do corpo que deveria receber, por exemplo. <code>body: InvoiceEvent</code>.</li> <li>E tamb\u00e9m deveria ter uma declara\u00e7\u00e3o de um c\u00f3digo de status de resposta, por exemplo. <code>response_model=InvoiceEventReceived</code>.</li> </ul> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import APIRouter, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Invoice(BaseModel):\n    id: str\n    title: Union[str, None] = None\n    customer: str\n    total: float\n\n\nclass InvoiceEvent(BaseModel):\n    description: str\n    paid: bool\n\n\nclass InvoiceEventReceived(BaseModel):\n    ok: bool\n\n\ninvoices_callback_router = APIRouter()\n\n\n@invoices_callback_router.post(\n    \"{$callback_url}/invoices/{$request.body.id}\", response_model=InvoiceEventReceived\n)\ndef invoice_notification(body: InvoiceEvent):\n    pass\n\n\n@app.post(\"/invoices/\", callbacks=invoices_callback_router.routes)\ndef create_invoice(invoice: Invoice, callback_url: Union[HttpUrl, None] = None):\n    \"\"\"\n    Create an invoice.\n\n    This will (let's imagine) let the API user (some external developer) create an\n    invoice.\n\n    And this path operation will:\n\n    * Send the invoice to the client.\n    * Collect the money from the client.\n    * Send a notification back to the API user (the external developer), as a callback.\n        * At this point is that the API will somehow send a POST request to the\n            external API with the notification of the invoice event\n            (e.g. \"payment successful\").\n    \"\"\"\n    # Send the invoice, collect the money, send the notification (the callback)\n    return {\"msg\": \"Invoice received\"}\n</code></pre> <p>H\u00e1 2 diferen\u00e7as principais de uma opera\u00e7\u00e3o de rota normal:</p> <ul> <li>Ela n\u00e3o necessita ter nenhum c\u00f3digo real, porque seu aplicativo nunca chamar\u00e1 esse c\u00f3digo. Ele \u00e9 usado apenas para documentar a API externa. Ent\u00e3o, a fun\u00e7\u00e3o poderia ter apenas <code>pass</code>.</li> <li>A rota pode conter uma express\u00e3o OpenAPI 3 (veja mais abaixo) onde pode usar vari\u00e1veis com par\u00e2metros e partes da solicita\u00e7\u00e3o original enviada para sua API.</li> </ul>"},{"location":"advanced/openapi-callbacks/#a-expressao-do-caminho-do-callback","title":"A express\u00e3o do caminho do callback","text":"<p>A rota do callback pode ter uma express\u00e3o OpenAPI 3 que pode conter partes da solicita\u00e7\u00e3o original enviada para sua API.</p> <p>Nesse caso, \u00e9 a <code>str</code>:</p> <pre><code>\"{$callback_url}/invoices/{$request.body.id}\"\n</code></pre> <p>Ent\u00e3o, se o usu\u00e1rio da sua API (o desenvolvedor externo) enviar uma solicita\u00e7\u00e3o para sua API para:</p> <pre><code>https://yourapi.com/invoices/?callback_url=https://www.external.org/events\n</code></pre> <p>com um corpo JSON de:</p> <pre><code>{\n    \"id\": \"2expen51ve\",\n    \"customer\": \"Mr. Richie Rich\",\n    \"total\": \"9999\"\n}\n</code></pre> <p>ent\u00e3o sua API processar\u00e1 a fatura e, em algum momento posterior, enviar\u00e1 uma solicita\u00e7\u00e3o de callback para o <code>callback_url</code> (a API externa):</p> <pre><code>https://www.external.org/events/invoices/2expen51ve\n</code></pre> <p>com um corpo JSON contendo algo como:</p> <pre><code>{\n    \"description\": \"Payment celebration\",\n    \"paid\": true\n}\n</code></pre> <p>e esperaria uma resposta daquela API externa com um corpo JSON como:</p> <pre><code>{\n    \"ok\": true\n}\n</code></pre> <p>Dica</p> <p>Perceba como a URL de callback usada cont\u00e9m a URL recebida como um par\u00e2metro de consulta em <code>callback_url</code> (<code>https://www.external.org/events</code>) e tamb\u00e9m o <code>id</code> da fatura de dentro do corpo JSON (<code>2expen51ve</code>).</p>"},{"location":"advanced/openapi-callbacks/#adicionar-o-roteador-de-callback","title":"Adicionar o roteador de callback","text":"<p>Nesse ponto voc\u00ea tem a(s) opera\u00e7\u00e3o de rota de callback necess\u00e1ria(s) (a(s) que o desenvolvedor externo deveria implementar na API externa) no roteador de callback que voc\u00ea criou acima.</p> <p>Agora use o par\u00e2metro <code>callbacks</code> no decorador da opera\u00e7\u00e3o de rota de sua API para passar o atributo <code>.routes</code> (que \u00e9 na verdade apenas uma <code>list</code> de rotas/opera\u00e7\u00f5es de rota) do roteador de callback que voc\u00ea criou acima:</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import APIRouter, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Invoice(BaseModel):\n    id: str\n    title: Union[str, None] = None\n    customer: str\n    total: float\n\n\nclass InvoiceEvent(BaseModel):\n    description: str\n    paid: bool\n\n\nclass InvoiceEventReceived(BaseModel):\n    ok: bool\n\n\ninvoices_callback_router = APIRouter()\n\n\n@invoices_callback_router.post(\n    \"{$callback_url}/invoices/{$request.body.id}\", response_model=InvoiceEventReceived\n)\ndef invoice_notification(body: InvoiceEvent):\n    pass\n\n\n@app.post(\"/invoices/\", callbacks=invoices_callback_router.routes)\ndef create_invoice(invoice: Invoice, callback_url: Union[HttpUrl, None] = None):\n    \"\"\"\n    Create an invoice.\n\n    This will (let's imagine) let the API user (some external developer) create an\n    invoice.\n\n    And this path operation will:\n\n    * Send the invoice to the client.\n    * Collect the money from the client.\n    * Send a notification back to the API user (the external developer), as a callback.\n        * At this point is that the API will somehow send a POST request to the\n            external API with the notification of the invoice event\n            (e.g. \"payment successful\").\n    \"\"\"\n    # Send the invoice, collect the money, send the notification (the callback)\n    return {\"msg\": \"Invoice received\"}\n</code></pre> <p>Dica</p> <p>Perceba que voc\u00ea n\u00e3o est\u00e1 passando o roteador em si (<code>invoices_callback_router</code>) para <code>callback=</code>, mas o atributo <code>.routes</code>, como em <code>invoices_callback_router.routes</code>.</p>"},{"location":"advanced/openapi-callbacks/#verifique-a-documentacao","title":"Verifique a documenta\u00e7\u00e3o","text":"<p>Agora voc\u00ea pode iniciar seu aplicativo e ir para http://127.0.0.1:8000/docs.</p> <p>Voc\u00ea ver\u00e1 sua documenta\u00e7\u00e3o incluindo uma se\u00e7\u00e3o \"Callbacks\" para sua opera\u00e7\u00e3o de rota que mostra como a API externa deveria ser:</p> <p></p>"},{"location":"advanced/openapi-webhooks/","title":"Webhooks OpenAPI","text":"<p>Existem situa\u00e7\u00f5es onde voc\u00ea deseja informar os usu\u00e1rios da sua API que a sua aplica\u00e7\u00e3o pode chamar a aplica\u00e7\u00e3o deles (enviando uma requisi\u00e7\u00e3o) com alguns dados, normalmente para notificar algum tipo de evento.</p> <p>Isso significa que no lugar do processo normal de seus usu\u00e1rios enviarem requisi\u00e7\u00f5es para a sua API, \u00e9 a sua API (ou sua aplica\u00e7\u00e3o) que poderia enviar requisi\u00e7\u00f5es para o sistema deles (para a API deles, a aplica\u00e7\u00e3o deles).</p> <p>Isso normalmente \u00e9 chamado de webhook.</p>"},{"location":"advanced/openapi-webhooks/#etapas-dos-webhooks","title":"Etapas dos Webhooks","text":"<p>Normalmente, o processo \u00e9 que voc\u00ea define em seu c\u00f3digo qual \u00e9 a mensagem que voc\u00ea ir\u00e1 mandar, o corpo da sua requisi\u00e7\u00e3o.</p> <p>Voc\u00ea tamb\u00e9m define de alguma maneira em quais momentos a sua aplica\u00e7\u00e3o mandar\u00e1 essas requisi\u00e7\u00f5es ou eventos.</p> <p>E os seus usu\u00e1rios definem de alguma forma (em algum painel por exemplo) a URL que a sua aplica\u00e7\u00e3o deve enviar essas requisi\u00e7\u00f5es.</p> <p>Toda a l\u00f3gica sobre como cadastrar as URLs para os webhooks e o c\u00f3digo para enviar de fato as requisi\u00e7\u00f5es cabe a voc\u00ea definir. Voc\u00ea escreve da maneira que voc\u00ea desejar no seu pr\u00f3prio c\u00f3digo.</p>"},{"location":"advanced/openapi-webhooks/#documentando-webhooks-com-o-readyapi-e-openapi","title":"Documentando webhooks com o ReadyAPI e OpenAPI","text":"<p>Com o ReadyAPI, utilizando o OpenAPI, voc\u00ea pode definir os nomes destes webhooks, os tipos das opera\u00e7\u00f5es HTTP que a sua aplica\u00e7\u00e3o pode enviar (e.g. <code>POST</code>, <code>PUT</code>, etc.) e os corpos da requisi\u00e7\u00e3o que a sua aplica\u00e7\u00e3o enviaria.</p> <p>Isto pode facilitar bastante para os seus usu\u00e1rios implementarem as APIs deles para receber as requisi\u00e7\u00f5es dos seus webhooks, eles podem inclusive ser capazes de gerar parte do c\u00f3digo da API deles.</p> <p>Informa\u00e7\u00e3o</p> <p>Webhooks est\u00e3o dispon\u00edveis a partir do OpenAPI 3.1.0, e possui suporte do ReadyAPI a partir da vers\u00e3o <code>0.99.0</code>.</p>"},{"location":"advanced/openapi-webhooks/#uma-aplicacao-com-webhooks","title":"Uma aplica\u00e7\u00e3o com webhooks","text":"<p>Quando voc\u00ea cria uma aplica\u00e7\u00e3o com o ReadyAPI, existe um atributo chamado <code>webhooks</code>, que voc\u00ea utilizar para defini-los da mesma maneira que voc\u00ea definiria as suas opera\u00e7\u00f5es de rotas, utilizando por exemplo <code>@app.webhooks.post()</code>.</p> Python 3.8+ <pre><code>from datetime import datetime\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Subscription(BaseModel):\n    username: str\n    monthly_fee: float\n    start_date: datetime\n\n\n@app.webhooks.post(\"new-subscription\")\ndef new_subscription(body: Subscription):\n    \"\"\"\n    When a new user subscribes to your service we'll send you a POST request with this\n    data to the URL that you register for the event `new-subscription` in the dashboard.\n    \"\"\"\n\n\n@app.get(\"/users/\")\ndef read_users():\n    return [\"Rick\", \"Morty\"]\n</code></pre> <p>Os webhooks que voc\u00ea define aparecer\u00e3o no esquema do OpenAPI e na p\u00e1gina de documenta\u00e7\u00e3o gerada automaticamente.</p> <p>Informa\u00e7\u00e3o</p> <p>O objeto <code>app.webhooks</code> \u00e9 na verdade apenas um <code>APIRouter</code>, o mesmo tipo que voc\u00ea utilizaria ao estruturar a sua aplica\u00e7\u00e3o com diversos arquivos.</p> <p>Note que utilizando webhooks voc\u00ea n\u00e3o est\u00e1 de fato declarando uma rota (como <code>/items/</code>), o texto que informa \u00e9 apenas um identificador do webhook (o nome do evento), por exemplo em <code>@app.webhooks.post(\"new-subscription\")</code>, o nome do webhook \u00e9 <code>new-subscription</code>.</p> <p>Isto porque espera-se que os seus usu\u00e1rios definam o verdadeiro caminho da URL onde eles desejam receber a requisi\u00e7\u00e3o do webhook de algum outra maneira. (e.g. um painel).</p>"},{"location":"advanced/openapi-webhooks/#confira-a-documentacao","title":"Confira a documenta\u00e7\u00e3o","text":"<p>Agora voc\u00ea pode iniciar a sua aplica\u00e7\u00e3o e ir at\u00e9 http://127.0.0.1:8000/docs.</p> <p>Voc\u00ea ver\u00e1 que a sua documenta\u00e7\u00e3o possui as opera\u00e7\u00f5es de rota normais e agora tamb\u00e9m possui alguns webhooks:</p> <p></p>"},{"location":"advanced/path-operation-advanced-configuration/","title":"Configura\u00e7\u00e3o Avan\u00e7ada da Opera\u00e7\u00e3o de Rota","text":""},{"location":"advanced/path-operation-advanced-configuration/#operationid-do-openapi","title":"operationId do OpenAPI","text":"<p>Aviso</p> <p>Se voc\u00ea n\u00e3o \u00e9 um \"especialista\" no OpenAPI, voc\u00ea provavelmente n\u00e3o precisa disso.</p> <p>Voc\u00ea pode definir o <code>operationId</code> do OpenAPI que ser\u00e1 utilizado na sua opera\u00e7\u00e3o de rota com o par\u00e2metro <code>operation_id</code>.</p> <p>Voc\u00ea precisa ter certeza que ele \u00e9 \u00fanico para cada opera\u00e7\u00e3o.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\", operation_id=\"some_specific_id_you_define\")\nasync def read_items():\n    return [{\"item_id\": \"Foo\"}]\n</code></pre>"},{"location":"advanced/path-operation-advanced-configuration/#utilizando-o-nome-da-funcao-de-operacao-de-rota-como-o-operationid","title":"Utilizando o nome da fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota como o operationId","text":"<p>Se voc\u00ea quiser utilizar o nome das fun\u00e7\u00f5es da sua API como <code>operationId</code>s, voc\u00ea pode iterar sobre todos esses nomes e sobrescrever o <code>operationId</code> em  cada opera\u00e7\u00e3o de rota utilizando o <code>APIRoute.name</code> dela.</p> <p>Voc\u00ea deve fazer isso depois de adicionar todas as suas opera\u00e7\u00f5es de rota.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.routing import APIRoute\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"item_id\": \"Foo\"}]\n\n\ndef use_route_names_as_operation_ids(app: ReadyAPI) -&gt; None:\n    \"\"\"\n    Simplify operation IDs so that generated API clients have simpler function\n    names.\n\n    Should be called only after all routes have been added.\n    \"\"\"\n    for route in app.routes:\n        if isinstance(route, APIRoute):\n            route.operation_id = route.name  # in this case, 'read_items'\n\n\nuse_route_names_as_operation_ids(app)\n</code></pre> <p>Dica</p> <p>Se voc\u00ea chamar <code>app.openapi()</code> manualmente, os <code>operationId</code>s devem ser atualizados antes dessa chamada.</p> <p>Aviso</p> <p>Se voc\u00ea fizer isso, voc\u00ea tem que ter certeza de que cada uma das suas fun\u00e7\u00f5es de opera\u00e7\u00e3o de rota tem um nome \u00fanico.</p> <p>Mesmo que elas estejam em m\u00f3dulos (arquivos Python) diferentes.</p>"},{"location":"advanced/path-operation-advanced-configuration/#excluir-do-openapi","title":"Excluir do OpenAPI","text":"<p>Para excluir uma opera\u00e7\u00e3o de rota do esquema OpenAPI gerado (e por consequ\u00eancia, dos sistemas de documenta\u00e7\u00e3o autom\u00e1ticos), utilize o par\u00e2metro <code>include_in_schema</code> e defina ele como <code>False</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\", include_in_schema=False)\nasync def read_items():\n    return [{\"item_id\": \"Foo\"}]\n</code></pre>"},{"location":"advanced/path-operation-advanced-configuration/#descricao-avancada-a-partir-de-docstring","title":"Descri\u00e7\u00e3o avan\u00e7ada a partir de docstring","text":"<p>Voc\u00ea pode limitar as linhas utilizadas a partir de uma docstring de uma fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota para o OpenAPI.</p> <p>Adicionar um <code>\\f</code> (um caractere de escape para alimenta\u00e7\u00e3o de formul\u00e1rio) faz com que o ReadyAPI restrinja a sa\u00edda utilizada pelo OpenAPI at\u00e9 esse ponto.</p> <p>Ele n\u00e3o ser\u00e1 mostrado na documenta\u00e7\u00e3o, mas outras ferramentas (como o Sphinx) ser\u00e3o capazes de utilizar o resto do texto.</p> Python 3.8+ <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, summary=\"Create an item\")\nasync def create_item(item: Item):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \\f\n    :param item: User input.\n    \"\"\"\n    return item\n</code></pre>"},{"location":"advanced/path-operation-advanced-configuration/#respostas-adicionais","title":"Respostas Adicionais","text":"<p>Voc\u00ea provavelmente j\u00e1 viu como declarar o <code>response_model</code> e <code>status_code</code> para uma opera\u00e7\u00e3o de rota.</p> <p>Isso define os metadados sobre a resposta principal da opera\u00e7\u00e3o de rota.</p> <p>Voc\u00ea tamb\u00e9m pode declarar respostas adicionais, com seus modelos, c\u00f3digos de status, etc.</p> <p>Existe um cap\u00edtulo inteiro da nossa documenta\u00e7\u00e3o sobre isso, voc\u00ea pode ler em Retornos Adicionais no OpenAPI.</p>"},{"location":"advanced/path-operation-advanced-configuration/#extras-do-openapi","title":"Extras do OpenAPI","text":"<p>Quando voc\u00ea declara uma opera\u00e7\u00e3o de rota na sua aplica\u00e7\u00e3o, o ReadyAPI ir\u00e1 gerar os metadados relevantes da opera\u00e7\u00e3o de rota automaticamente para serem inclu\u00eddos no esquema do OpenAPI.</p> <p>Nota</p> <p>Na especifica\u00e7\u00e3o do OpenAPI, isso \u00e9 chamado de um Objeto de Opera\u00e7\u00e3o.</p> <p>Ele possui toda a informa\u00e7\u00e3o sobre a opera\u00e7\u00e3o de rota e \u00e9 usado para gerar a documenta\u00e7\u00e3o automaticamente.</p> <p>Ele inclui os atributos <code>tags</code>, <code>parameters</code>, <code>requestBody</code>, <code>responses</code>, etc.</p> <p>Esse esquema espec\u00edfico para uma opera\u00e7\u00e3o de rota normalmente \u00e9 gerado automaticamente pelo ReadyAPI, mas voc\u00ea tamb\u00e9m pode estender ele.</p> <p>Dica</p> <p>Esse \u00e9 um ponto de extens\u00e3o de baixo n\u00edvel.</p> <p>Caso voc\u00ea s\u00f3 precise declarar respostas adicionais, uma forma conveniente de fazer isso \u00e9 com Retornos Adicionais no OpenAPI.</p> <p>Voc\u00ea pode estender o esquema do OpenAPI para uma opera\u00e7\u00e3o de rota utilizando o par\u00e2metro <code>openapi_extra</code>.</p>"},{"location":"advanced/path-operation-advanced-configuration/#extensoes-do-openapi","title":"Extens\u00f5es do OpenAPI","text":"<p>Esse par\u00e2metro <code>openapi_extra</code> pode ser \u00fatil, por exemplo, para declarar Extens\u00f5es do OpenAPI:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\", openapi_extra={\"x-aperture-labs-portal\": \"blue\"})\nasync def read_items():\n    return [{\"item_id\": \"portal-gun\"}]\n</code></pre> <p>Se voc\u00ea abrir os documentos criados automaticamente para a API, sua extens\u00e3o aparecer\u00e1 no final da opera\u00e7\u00e3o de rota espec\u00edfica.</p> <p></p> <p>E se voc\u00ea olhar o esquema OpenAPI resultante (na rota <code>/openapi.json</code> da sua API), voc\u00ea ver\u00e1 que a sua extens\u00e3o tamb\u00e9m faz parte da opera\u00e7\u00e3o de rota espec\u00edfica:</p> <pre><code>{\n    \"openapi\": \"3.1.0\",\n    \"info\": {\n        \"title\": \"ReadyAPI\",\n        \"version\": \"0.1.0\"\n    },\n    \"paths\": {\n        \"/items/\": {\n            \"get\": {\n                \"summary\": \"Read Items\",\n                \"operationId\": \"read_items_items__get\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Successful Response\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {}\n                            }\n                        }\n                    }\n                },\n                \"x-aperture-labs-portal\": \"blue\"\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"advanced/path-operation-advanced-configuration/#esquema-de-operacao-de-rota-do-openapi-personalizado","title":"Esquema de opera\u00e7\u00e3o de rota do OpenAPI personalizado","text":"<p>O dicion\u00e1rio em <code>openapi_extra</code> vai ter todos os seus n\u00edveis mesclados dentro do esquema OpenAPI gerado automaticamente para a opera\u00e7\u00e3o de rota.</p> <p>Ent\u00e3o, voc\u00ea pode adicionar dados extras para o esquema gerado automaticamente.</p> <p>Por exemplo, voc\u00ea poderia optar por ler e validar a requisi\u00e7\u00e3o com seu pr\u00f3prio c\u00f3digo, sem utilizar funcionalidades automatizadas do ReadyAPI com o Pydantic, mas voc\u00ea ainda pode quere definir a requisi\u00e7\u00e3o no esquema OpenAPI.</p> <p>Voc\u00ea pode fazer isso com <code>openapi_extra</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Request\n\napp = ReadyAPI()\n\n\ndef magic_data_reader(raw_body: bytes):\n    return {\n        \"size\": len(raw_body),\n        \"content\": {\n            \"name\": \"Maaaagic\",\n            \"price\": 42,\n            \"description\": \"Just kiddin', no magic here. \u2728\",\n        },\n    }\n\n\n@app.post(\n    \"/items/\",\n    openapi_extra={\n        \"requestBody\": {\n            \"content\": {\n                \"application/json\": {\n                    \"schema\": {\n                        \"required\": [\"name\", \"price\"],\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"name\": {\"type\": \"string\"},\n                            \"price\": {\"type\": \"number\"},\n                            \"description\": {\"type\": \"string\"},\n                        },\n                    }\n                }\n            },\n            \"required\": True,\n        },\n    },\n)\nasync def create_item(request: Request):\n    raw_body = await request.body()\n    data = magic_data_reader(raw_body)\n    return data\n</code></pre> <p>Nesse exemplo, n\u00f3s n\u00e3o declaramos nenhum modelo do Pydantic. Na verdade, o corpo da requisi\u00e7\u00e3o n\u00e3o est\u00e1 nem mesmo analisado como JSON, ele \u00e9 lido diretamente como <code>bytes</code> e a fun\u00e7\u00e3o <code>magic_data_reader()</code> seria a respons\u00e1vel por analisar ele de alguma forma.</p> <p>De toda forma, n\u00f3s podemos declarar o esquema esperado para o corpo da requisi\u00e7\u00e3o.</p>"},{"location":"advanced/path-operation-advanced-configuration/#tipo-de-conteudo-do-openapi-personalizado","title":"Tipo de conte\u00fado do OpenAPI personalizado","text":"<p>Utilizando esse mesmo truque, voc\u00ea pode utilizar um modelo Pydantic para definir o esquema JSON que \u00e9 ent\u00e3o inclu\u00eddo na se\u00e7\u00e3o do esquema personalizado do OpenAPI na opera\u00e7\u00e3o de rota.</p> <p>E voc\u00ea pode fazer isso at\u00e9 mesmo quando os dados da requisi\u00e7\u00e3o n\u00e3o seguem o formato JSON.</p> <p>Por exemplo, nesta aplica\u00e7\u00e3o n\u00f3s n\u00e3o usamos a funcionalidade integrada ao ReadyAPI de extrair o esquema JSON dos modelos Pydantic nem a valida\u00e7\u00e3o autom\u00e1tica do JSON. Na verdade, estamos declarando o tipo do conte\u00fado da requisi\u00e7\u00e3o como YAML, em vez de JSON:</p> Pydantic v2Pydantic v1 Python 3.8+ <pre><code>from typing import List\n\nimport yaml\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import HTTPException, ReadyAPI, Request\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    tags: List[str]\n\n\n@app.post(\n    \"/items/\",\n    openapi_extra={\n        \"requestBody\": {\n            \"content\": {\"application/x-yaml\": {\"schema\": Item.model_json_schema()}},\n            \"required\": True,\n        },\n    },\n)\nasync def create_item(request: Request):\n    raw_body = await request.body()\n    try:\n        data = yaml.safe_load(raw_body)\n    except yaml.YAMLError:\n        raise HTTPException(status_code=422, detail=\"Invalid YAML\")\n    try:\n        item = Item.model_validate(data)\n    except ValidationError as e:\n        raise HTTPException(status_code=422, detail=e.errors(include_url=False))\n    return item\n</code></pre> Python 3.8+ <pre><code>from typing import List\n\nimport yaml\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import HTTPException, ReadyAPI, Request\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    tags: List[str]\n\n\n@app.post(\n    \"/items/\",\n    openapi_extra={\n        \"requestBody\": {\n            \"content\": {\"application/x-yaml\": {\"schema\": Item.schema()}},\n            \"required\": True,\n        },\n    },\n)\nasync def create_item(request: Request):\n    raw_body = await request.body()\n    try:\n        data = yaml.safe_load(raw_body)\n    except yaml.YAMLError:\n        raise HTTPException(status_code=422, detail=\"Invalid YAML\")\n    try:\n        item = Item.parse_obj(data)\n    except ValidationError as e:\n        raise HTTPException(status_code=422, detail=e.errors())\n    return item\n</code></pre> <p>Informa\u00e7\u00e3o</p> <p>Na vers\u00e3o 1 do Pydantic, o m\u00e9todo para obter o esquema JSON de um modelo \u00e9 <code>Item.schema()</code>, na vers\u00e3o 2 do Pydantic, o m\u00e9todo \u00e9 <code>Item.model_json_schema()</code></p> <p>Entretanto, mesmo que n\u00e3o utilizemos a funcionalidade integrada por padr\u00e3o, ainda estamos usando um modelo Pydantic para gerar um esquema JSON manualmente para os dados que queremos receber no formato YAML.</p> <p>Ent\u00e3o utilizamos a requisi\u00e7\u00e3o diretamente, e extra\u00edmos o corpo como <code>bytes</code>. Isso significa que o ReadyAPI n\u00e3o vai sequer tentar analisar o corpo da requisi\u00e7\u00e3o como JSON.</p> <p>E ent\u00e3o no nosso c\u00f3digo, n\u00f3s analisamos o conte\u00fado YAML diretamente, e estamos utilizando o mesmo modelo Pydantic para validar o conte\u00fado YAML:</p> Pydantic v2Pydantic v1 Python 3.8+ <pre><code>from typing import List\n\nimport yaml\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import HTTPException, ReadyAPI, Request\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    tags: List[str]\n\n\n@app.post(\n    \"/items/\",\n    openapi_extra={\n        \"requestBody\": {\n            \"content\": {\"application/x-yaml\": {\"schema\": Item.model_json_schema()}},\n            \"required\": True,\n        },\n    },\n)\nasync def create_item(request: Request):\n    raw_body = await request.body()\n    try:\n        data = yaml.safe_load(raw_body)\n    except yaml.YAMLError:\n        raise HTTPException(status_code=422, detail=\"Invalid YAML\")\n    try:\n        item = Item.model_validate(data)\n    except ValidationError as e:\n        raise HTTPException(status_code=422, detail=e.errors(include_url=False))\n    return item\n</code></pre> Python 3.8+ <pre><code>from typing import List\n\nimport yaml\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import HTTPException, ReadyAPI, Request\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    tags: List[str]\n\n\n@app.post(\n    \"/items/\",\n    openapi_extra={\n        \"requestBody\": {\n            \"content\": {\"application/x-yaml\": {\"schema\": Item.schema()}},\n            \"required\": True,\n        },\n    },\n)\nasync def create_item(request: Request):\n    raw_body = await request.body()\n    try:\n        data = yaml.safe_load(raw_body)\n    except yaml.YAMLError:\n        raise HTTPException(status_code=422, detail=\"Invalid YAML\")\n    try:\n        item = Item.parse_obj(data)\n    except ValidationError as e:\n        raise HTTPException(status_code=422, detail=e.errors())\n    return item\n</code></pre> <p>Informa\u00e7\u00e3o</p> <p>Na vers\u00e3o 1 do Pydantic, o m\u00e9todo para analisar e validar um objeto era <code>Item.parse_obj()</code>, na vers\u00e3o 2 do Pydantic, o m\u00e9todo \u00e9 chamado de <code>Item.model_validate()</code>.</p> <p>Dica</p> <p>Aqui reutilizamos o mesmo modelo do Pydantic.</p> <p>Mas da mesma forma, n\u00f3s poder\u00edamos ter validado de alguma outra forma.</p>"},{"location":"advanced/response-change-status-code/","title":"Retorno - Altere o C\u00f3digo de Status","text":"<p>Voc\u00ea provavelmente leu anteriormente que voc\u00ea pode definir um C\u00f3digo de Status do Retorno padr\u00e3o.</p> <p>Por\u00e9m em alguns casos voc\u00ea precisa retornar um c\u00f3digo de status diferente do padr\u00e3o.</p>"},{"location":"advanced/response-change-status-code/#caso-de-uso","title":"Caso de uso","text":"<p>Por exemplo, imagine que voc\u00ea deseja retornar um c\u00f3digo de status HTTP de \"OK\" <code>200</code> por padr\u00e3o.</p> <p>Mas se o dado n\u00e3o existir, voc\u00ea quer cri\u00e1-lo e retornar um c\u00f3digo de status HTTP de \"CREATED\" <code>201</code>.</p> <p>Mas voc\u00ea ainda quer ser capaz de filtrar e converter o dado que voc\u00ea retornar\u00e1 com um <code>response_model</code>.</p> <p>Para estes casos, voc\u00ea pode utilizar um par\u00e2metro <code>Response</code>.</p>"},{"location":"advanced/response-change-status-code/#use-um-parametro-response","title":"Use um par\u00e2metro <code>Response</code>","text":"<p>Voc\u00ea pode declarar um par\u00e2metro do tipo <code>Response</code> em sua fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota (assim como voc\u00ea pode fazer para cookies e headers).</p> <p>E ent\u00e3o voc\u00ea pode definir o <code>status_code</code> neste objeto de retorno temporal.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Response, status\n\napp = ReadyAPI()\n\ntasks = {\"foo\": \"Listen to the Bar Fighters\"}\n\n\n@app.put(\"/get-or-create-task/{task_id}\", status_code=200)\ndef get_or_create_task(task_id: str, response: Response):\n    if task_id not in tasks:\n        tasks[task_id] = \"This didn't exist before\"\n        response.status_code = status.HTTP_201_CREATED\n    return tasks[task_id]\n</code></pre> <p>E ent\u00e3o voc\u00ea pode retornar qualquer objeto que voc\u00ea precise, como voc\u00ea faria normalmente (um <code>dict</code>, um modelo de banco de dados, etc.).</p> <p>E se voc\u00ea declarar um <code>response_model</code>, ele ainda ser\u00e1 utilizado para filtrar e converter o objeto que voc\u00ea retornou.</p> <p>O ReadyAPI utilizar\u00e1 este retorno temporal para extrair o c\u00f3digo de status (e tamb\u00e9m cookies e headers), e ir\u00e1 coloc\u00e1-los no retorno final que cont\u00e9m o valor que voc\u00ea retornou, filtrado por qualquer <code>response_model</code>.</p> <p>Voc\u00ea tamb\u00e9m pode declarar o par\u00e2metro <code>Response</code> nas depend\u00eancias, e definir o c\u00f3digo de status nelas. Mas lembre-se que o \u00faltimo que for definido \u00e9 o que prevalecer\u00e1.</p>"},{"location":"advanced/response-cookies/","title":"Cookies de Resposta","text":""},{"location":"advanced/response-cookies/#usando-um-parametro-response","title":"Usando um par\u00e2metro <code>Response</code>","text":"<p>Voc\u00ea pode declarar um par\u00e2metro do tipo <code>Response</code> na sua fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota.</p> <p>E ent\u00e3o voc\u00ea pode definir cookies nesse objeto de resposta tempor\u00e1rio.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Response\n\napp = ReadyAPI()\n\n\n@app.post(\"/cookie-and-object/\")\ndef create_cookie(response: Response):\n    response.set_cookie(key=\"fakesession\", value=\"fake-cookie-session-value\")\n    return {\"message\": \"Come to the dark side, we have cookies\"}\n</code></pre> <p>Em seguida, voc\u00ea pode retornar qualquer objeto que precise, como normalmente faria (um <code>dict</code>, um modelo de banco de dados, etc).</p> <p>E se voc\u00ea declarou um <code>response_model</code>, ele ainda ser\u00e1 usado para filtrar e converter o objeto que voc\u00ea retornou.</p> <p>ReadyAPI usar\u00e1 essa resposta tempor\u00e1ria para extrair os cookies (tamb\u00e9m os cabe\u00e7alhos e c\u00f3digo de status) e os colocar\u00e1 na resposta final que cont\u00e9m o valor que voc\u00ea retornou, filtrado por qualquer <code>response_model</code>.</p> <p>Voc\u00ea tamb\u00e9m pode declarar o par\u00e2metro <code>Response</code> em depend\u00eancias e definir cookies (e cabe\u00e7alhos) nelas.</p>"},{"location":"advanced/response-cookies/#retornando-uma-response-diretamente","title":"Retornando uma <code>Response</code> diretamente","text":"<p>Voc\u00ea tamb\u00e9m pode criar cookies ao retornar uma <code>Response</code> diretamente no seu c\u00f3digo.</p> <p>Para fazer isso, voc\u00ea pode criar uma resposta como descrito em Retornando uma Resposta Diretamente.</p> <p>Ent\u00e3o, defina os cookies nela e a retorne:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import JSONResponse\n\napp = ReadyAPI()\n\n\n@app.post(\"/cookie/\")\ndef create_cookie():\n    content = {\"message\": \"Come to the dark side, we have cookies\"}\n    response = JSONResponse(content=content)\n    response.set_cookie(key=\"fakesession\", value=\"fake-cookie-session-value\")\n    return response\n</code></pre> <p>Dica</p> <p>Lembre-se de que se voc\u00ea retornar uma resposta diretamente em vez de usar o par\u00e2metro <code>Response</code>, ReadyAPI a retornar\u00e1 diretamente.</p> <p>Portanto, voc\u00ea ter\u00e1 que garantir que seus dados sejam do tipo correto. E.g. ser\u00e1 compat\u00edvel com JSON se voc\u00ea estiver retornando um <code>JSONResponse</code>.</p> <p>E tamb\u00e9m que voc\u00ea n\u00e3o esteja enviando nenhum dado que deveria ter sido filtrado por um <code>response_model</code>.</p>"},{"location":"advanced/response-cookies/#mais-informacoes","title":"Mais informa\u00e7\u00f5es","text":"<p>Detalhes T\u00e9cnicos</p> <p>Voc\u00ea tamb\u00e9m poderia usar <code>from starlette.responses import Response</code> ou <code>from starlette.responses import JSONResponse</code>.</p> <p>ReadyAPI fornece as mesmas <code>starlette.responses</code> em <code>readyapi.responses</code> apenas como uma conveni\u00eancia para voc\u00ea, o desenvolvedor. Mas a maioria das respostas dispon\u00edveis vem diretamente do Starlette.</p> <p>E como o <code>Response</code> pode ser usado frequentemente para definir cabe\u00e7alhos e cookies, o ReadyAPI tamb\u00e9m o fornece em <code>readyapi.Response</code>.</p> <p>Para ver todos os par\u00e2metros e op\u00e7\u00f5es dispon\u00edveis, verifique a documenta\u00e7\u00e3o no Starlette.</p>"},{"location":"advanced/response-directly/","title":"Retornando uma Resposta Diretamente","text":"<p>Quando voc\u00ea cria uma opera\u00e7\u00e3o de rota no ReadyAPI voc\u00ea pode retornar qualquer dado nela: um dicion\u00e1rio (<code>dict</code>), uma lista (<code>list</code>), um modelo do Pydantic ou do seu banco de dados, etc.</p> <p>Por padr\u00e3o, o ReadyAPI ir\u00e1 converter automaticamente o valor do retorno para JSON utilizando o <code>jsonable_encoder</code> explicado em JSON Compatible Encoder.</p> <p>Ent\u00e3o, por baixo dos panos, ele incluiria esses dados compat\u00edveis com JSON (e.g. um <code>dict</code>) dentro de uma <code>JSONResponse</code> que \u00e9 utilizada para enviar uma resposta para o cliente.</p> <p>Mas voc\u00ea pode retornar a <code>JSONResponse</code> diretamente nas suas opera\u00e7\u00f5es de rota.</p> <p>Pode ser \u00fatil para retornar cabe\u00e7alhos e cookies personalizados, por exemplo.</p>"},{"location":"advanced/response-directly/#retornando-uma-response","title":"Retornando uma <code>Response</code>","text":"<p>Na verdade, voc\u00ea pode retornar qualquer <code>Response</code> ou subclasse dela.</p> <p>Dica</p> <p>A pr\u00f3pria <code>JSONResponse</code> \u00e9 uma subclasse de <code>Response</code>.</p> <p>E quando voc\u00ea retorna uma <code>Response</code>, o ReadyAPI vai repass\u00e1-la diretamente.</p> <p>Ele n\u00e3o vai fazer convers\u00f5es de dados com modelos do Pydantic, n\u00e3o ir\u00e1 converter a tipagem de nenhum conte\u00fado, etc.</p> <p>Isso te d\u00e1 bastante flexibilidade. Voc\u00ea pode retornar qualquer tipo de dado, sobrescrever qualquer declara\u00e7\u00e3o e valida\u00e7\u00e3o nos dados, etc.</p>"},{"location":"advanced/response-directly/#utilizando-o-jsonable_encoder-em-uma-response","title":"Utilizando o <code>jsonable_encoder</code> em uma <code>Response</code>","text":"<p>Como o ReadyAPI n\u00e3o realiza nenhuma mudan\u00e7a na <code>Response</code> que voc\u00ea retorna, voc\u00ea precisa garantir que o conte\u00fado dela est\u00e1 pronto para uso.</p> <p>Por exemplo, voc\u00ea n\u00e3o pode colocar um modelo do Pydantic em uma <code>JSONResponse</code> sem antes convert\u00ea-lo em um <code>dict</code> com todos os tipos de dados (como <code>datetime</code>, <code>UUID</code>, etc) convertidos para tipos compat\u00edveis com JSON.</p> <p>Para esses casos, voc\u00ea pode usar o <code>jsonable_encoder</code> para converter seus dados antes de repass\u00e1-los para a resposta:</p> Python 3.8+ <pre><code>from datetime import datetime\nfrom typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\nfrom readyapi.responses import JSONResponse\n\n\nclass Item(BaseModel):\n    title: str\n    timestamp: datetime\n    description: Union[str, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{id}\")\ndef update_item(id: str, item: Item):\n    json_compatible_item_data = jsonable_encoder(item)\n    return JSONResponse(content=json_compatible_item_data)\n</code></pre> <p>Detalhes T\u00e9cnicos</p> <p>Voc\u00ea tamb\u00e9m pode utilizar <code>from starlette.responses import JSONResponse</code>.</p> <p>ReadyAPI utiliza a mesma <code>starlette.responses</code> como <code>readyapi.responses</code> apenas como uma conveni\u00eancia para voc\u00ea, desenvolvedor. Mas maior parte das respostas dispon\u00edveis vem diretamente do Starlette.</p>"},{"location":"advanced/response-directly/#retornando-uma-response_1","title":"Retornando uma <code>Response</code>","text":"<p>O exemplo acima mostra todas as partes que voc\u00ea precisa, mas ainda n\u00e3o \u00e9 muito \u00fatil, j\u00e1 que voc\u00ea poderia ter retornado o <code>item</code> diretamente, e o ReadyAPI colocaria em uma <code>JSONResponse</code> para voc\u00ea, convertendo em um <code>dict</code>, etc. Tudo isso por padr\u00e3o.</p> <p>Agora, vamos ver como voc\u00ea pode usar isso para retornar uma resposta personalizada.</p> <p>Vamos dizer quer retornar uma resposta XML.</p> <p>Voc\u00ea pode colocar o seu conte\u00fado XML em uma string, colocar em uma <code>Response</code>, e retorn\u00e1-lo:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Response\n\napp = ReadyAPI()\n\n\n@app.get(\"/legacy/\")\ndef get_legacy_data():\n    data = \"\"\"&lt;?xml version=\"1.0\"?&gt;\n    &lt;shampoo&gt;\n    &lt;Header&gt;\n        Apply shampoo here.\n    &lt;/Header&gt;\n    &lt;Body&gt;\n        You'll have to use soap here.\n    &lt;/Body&gt;\n    &lt;/shampoo&gt;\n    \"\"\"\n    return Response(content=data, media_type=\"application/xml\")\n</code></pre>"},{"location":"advanced/response-directly/#notas","title":"Notas","text":"<p>Quando voc\u00ea retorna uma <code>Response</code> diretamente os dados n\u00e3o s\u00e3o validados, convertidos (serializados) ou documentados automaticamente.</p> <p>Mas voc\u00ea ainda pode documentar como descrito em Retornos Adicionais no OpenAPI .</p> <p>Voc\u00ea pode ver nas pr\u00f3ximas se\u00e7\u00f5es como usar/declarar essas <code>Responses</code> customizadas enquanto mant\u00e9m a convers\u00e3o e documenta\u00e7\u00e3o autom\u00e1tica dos dados.</p>"},{"location":"advanced/response-headers/","title":"Cabe\u00e7alhos de resposta","text":""},{"location":"advanced/response-headers/#usando-um-parametro-response","title":"Usando um par\u00e2metro <code>Response</code>","text":"<p>Voc\u00ea pode declarar um par\u00e2metro do tipo <code>Response</code> na sua fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota (assim como voc\u00ea pode fazer para cookies).</p> <p>Ent\u00e3o voc\u00ea pode definir os cabe\u00e7alhos nesse objeto de resposta tempor\u00e1rio.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Response\n\napp = ReadyAPI()\n\n\n@app.get(\"/headers-and-object/\")\ndef get_headers(response: Response):\n    response.headers[\"X-Cat-Dog\"] = \"alone in the world\"\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>Em seguida voc\u00ea pode retornar qualquer objeto que precisar, da maneira que faria normalmente (um <code>dict</code>, um modelo de banco de dados, etc.).</p> <p>Se voc\u00ea declarou um <code>response_model</code>, ele ainda ser\u00e1 utilizado para filtrar e converter o objeto que voc\u00ea retornou.</p> <p>ReadyAPI usar\u00e1 essa resposta tempor\u00e1ria para extrair os cabe\u00e7alhos (cookies e c\u00f3digo de status tamb\u00e9m) e os colocar\u00e1 na resposta final que cont\u00e9m o valor que voc\u00ea retornou, filtrado por qualquer <code>response_model</code>.</p> <p>Voc\u00ea tamb\u00e9m pode declarar o par\u00e2metro <code>Response</code> em depend\u00eancias e definir cabe\u00e7alhos (e cookies) nelas.</p>"},{"location":"advanced/response-headers/#retornar-uma-response-diretamente","title":"Retornar uma <code>Response</code> diretamente","text":"<p>Voc\u00ea tamb\u00e9m pode adicionar cabe\u00e7alhos quando retornar uma <code>Response</code> diretamente.</p> <p>Crie uma resposta conforme descrito em Retornar uma resposta diretamente e passe os cabe\u00e7alhos como um par\u00e2metro adicional:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import JSONResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/headers/\")\ndef get_headers():\n    content = {\"message\": \"Hello World\"}\n    headers = {\"X-Cat-Dog\": \"alone in the world\", \"Content-Language\": \"en-US\"}\n    return JSONResponse(content=content, headers=headers)\n</code></pre> <p>Detalhes t\u00e9cnicos</p> <p>Voc\u00ea tamb\u00e9m pode usar <code>from starlette.responses import Response</code> ou <code>from starlette.responses import JSONResponse</code>.</p> <p>ReadyAPI fornece as mesmas <code>starlette.responses</code> como <code>readyapi.responses</code> apenas como uma conveni\u00eancia para voc\u00ea, desenvolvedor. Mas a maioria das respostas dispon\u00edveis vem diretamente do Starlette.</p> <p>E como a <code>Response</code> pode ser usada frequentemente para definir cabe\u00e7alhos e cookies, ReadyAPI tamb\u00e9m a fornece em <code>readyapi.Response</code>.</p>"},{"location":"advanced/response-headers/#cabecalhos-personalizados","title":"Cabe\u00e7alhos personalizados","text":"<p>Tenha em mente que cabe\u00e7alhos personalizados propriet\u00e1rios podem ser adicionados usando o prefixo 'X-'.</p> <p>Por\u00e9m, se voce tiver cabe\u00e7alhos personalizados que deseja que um cliente no navegador possa ver, voc\u00ea precisa adicion\u00e1-los \u00e0s suas configura\u00e7\u00f5es de CORS (saiba mais em CORS (Cross-Origin Resource Sharing)), usando o par\u00e2metro <code>expose_headers</code> descrito na documenta\u00e7\u00e3o de CORS do Starlette.</p>"},{"location":"advanced/settings/","title":"Configura\u00e7\u00f5es e Vari\u00e1veis de Ambiente","text":"<p>Em muitos casos a sua aplica\u00e7\u00e3o pode precisar de configura\u00e7\u00f5es externas, como chaves secretas, credenciais de banco de dados, credenciais para servi\u00e7os de email, etc.</p> <p>A maioria dessas configura\u00e7\u00f5es \u00e9 vari\u00e1vel (podem mudar), como URLs de bancos de dados. E muitas delas podem conter dados sens\u00edveis, como tokens secretos.</p> <p>Por isso \u00e9 comum prover essas configura\u00e7\u00f5es como vari\u00e1veis de ambiente que s\u00e3o utilizidas pela aplica\u00e7\u00e3o.</p>"},{"location":"advanced/settings/#variaveis-de-ambiente","title":"Vari\u00e1veis de Ambiente","text":"<p>Dica</p> <p>Se voc\u00ea j\u00e1 sabe o que s\u00e3o vari\u00e1veis de ambiente e como utiliz\u00e1-las, sinta-se livre para avan\u00e7ar para o pr\u00f3ximo t\u00f3pico.</p> <p>Uma vari\u00e1vel de ambiente (abreviada em ingl\u00eas para \"env var\") \u00e9 uma vari\u00e1vel definida fora do c\u00f3digo Python, no sistema operacional, e pode ser lida pelo seu c\u00f3digo Python (ou por outros programas).</p> <p>Voc\u00ea pode criar e utilizar vari\u00e1veis de ambiente no terminal, sem precisar utilizar Python:</p> Linux, macOS, Windows BashWindows PowerShell <pre><code>// Voc\u00ea pode criar uma env var MY_NAME usando\n$ export MY_NAME=\"Wade Wilson\"\n\n// E utiliz\u00e1-la em outros programas, como\n$ echo \"Hello $MY_NAME\"\n\nHello Wade Wilson\n</code></pre> <pre><code>// Criando env var MY_NAME\n$ $Env:MY_NAME = \"Wade Wilson\"\n\n// Usando em outros programas, como\n$ echo \"Hello $Env:MY_NAME\"\n\nHello Wade Wilson\n</code></pre>"},{"location":"advanced/settings/#lendo-variaveis-de-ambiente-com-python","title":"Lendo vari\u00e1veis de ambiente com Python","text":"<p>Voc\u00ea tamb\u00e9m pode criar vari\u00e1veis de ambiente fora do Python, no terminal (ou com qualquer outro m\u00e9todo), e realizar a leitura delas no Python.</p> <p>Por exemplo, voc\u00ea pode definir um arquivo <code>main.py</code> com o seguinte c\u00f3digo:</p> <pre><code>import os\n\nname = os.getenv(\"MY_NAME\", \"World\")\nprint(f\"Hello {name} from Python\")\n</code></pre> <p>Dica</p> <p>O segundo par\u00e2metro em <code>os.getenv()</code> \u00e9 o valor padr\u00e3o para o retorno.</p> <p>Se nenhum valor for informado, <code>None</code> \u00e9 utilizado por padr\u00e3o, aqui definimos <code>\"World\"</code> como o valor padr\u00e3o a ser utilizado.</p> <p>E depois voc\u00ea pode executar esse arquivo:</p> <pre><code>// Aqui ainda n\u00e3o definimos a env var\n$ python main.py\n\n// Por isso obtemos o valor padr\u00e3o\n\nHello World from Python\n\n// Mas se definirmos uma vari\u00e1vel de ambiente primeiro\n$ export MY_NAME=\"Wade Wilson\"\n\n// E executarmos o programa novamente\n$ python main.py\n\n// Agora ele pode ler a vari\u00e1vel de ambiente\n\nHello Wade Wilson from Python\n</code></pre> <p>Como vari\u00e1veis de ambiente podem ser definidas fora do c\u00f3digo da aplica\u00e7\u00e3o, mas acessadas pela aplica\u00e7\u00e3o, e n\u00e3o precisam ser armazenadas (versionadas com <code>git</code>) junto dos outros arquivos, \u00e9 comum utiliz\u00e1-las para guardar configura\u00e7\u00f5es.</p> <p>Voc\u00ea tamb\u00e9m pode criar uma vari\u00e1vel de ambiente espec\u00edfica para uma invoca\u00e7\u00e3o de um programa, que \u00e9 acess\u00edvel somente para esse programa, e somente enquanto ele estiver executando.</p> <p>Para fazer isso, crie a vari\u00e1vel imediatamente antes de iniciar o programa, na mesma linha:</p> <pre><code>// Criando uma env var MY_NAME na mesma linha da execu\u00e7\u00e3o do programa\n$ MY_NAME=\"Wade Wilson\" python main.py\n\n// Agora a aplica\u00e7\u00e3o consegue ler a vari\u00e1vel de ambiente\n\nHello Wade Wilson from Python\n\n// E a vari\u00e1vel deixa de existir ap\u00f3s isso\n$ python main.py\n\nHello World from Python\n</code></pre> <p>Dica</p> <p>Voc\u00ea pode ler mais sobre isso em: The Twelve-Factor App: Configura\u00e7\u00f5es.</p>"},{"location":"advanced/settings/#tipagem-e-validacao","title":"Tipagem e Valida\u00e7\u00e3o","text":"<p>Essas vari\u00e1veis de ambiente suportam apenas strings, por serem externas ao Python e por que precisam ser compat\u00edveis com outros programas e o resto do sistema (e at\u00e9 mesmo com outros sistemas operacionais, como Linux, Windows e macOS).</p> <p>Isso significa que qualquer valor obtido de uma vari\u00e1vel de ambiente em Python ter\u00e1 o tipo <code>str</code>, e qualquer convers\u00e3o para um tipo diferente ou valida\u00e7\u00e3o deve ser realizada no c\u00f3digo.</p>"},{"location":"advanced/settings/#pydantic-settings","title":"Pydantic <code>Settings</code>","text":"<p>Por sorte, o Pydantic possui uma funcionalidade para lidar com essas configura\u00e7\u00f5es vindas de vari\u00e1veis de ambiente utilizando Pydantic: Settings management.</p>"},{"location":"advanced/settings/#instalando-pydantic-settings","title":"Instalando <code>pydantic-settings</code>","text":"<p>Primeiro, instale o pacote <code>pydantic-settings</code>:</p> <pre><code>$ pip install pydantic-settings\n---&gt; 100%\n</code></pre> <p>Ele tamb\u00e9m est\u00e1 inclu\u00eddo no readyapi quando voc\u00ea instala com a op\u00e7\u00e3o <code>all</code>:</p> <pre><code>$ pip install \"readyapi[all]\"\n---&gt; 100%\n</code></pre> <p>Info</p> <p>Na v1 do Pydantic ele estava inclu\u00eddo no pacote principal. Agora ele est\u00e1 distribuido como um pacote independente para que voc\u00ea possa optar por instalar ou n\u00e3o caso voc\u00ea n\u00e3o precise dessa funcionalidade.</p>"},{"location":"advanced/settings/#criando-o-objeto-settings","title":"Criando o objeto <code>Settings</code>","text":"<p>Importe a classe <code>BaseSettings</code> do Pydantic e crie uma nova subclasse, de forma parecida com um modelo do Pydantic.</p> <p>Os atributos da classe s\u00e3o declarados com anota\u00e7\u00f5es de tipo, e poss\u00edveis valores padr\u00e3o, da mesma maneira que os modelos do Pydantic.</p> <p>Voc\u00ea pode utilizar todas as ferramentas e funcionalidades de valida\u00e7\u00e3o que s\u00e3o utilizadas nos modelos do Pydantic, como tipos de dados diferentes e valida\u00e7\u00f5es adicionei com <code>Field()</code>.</p> Pydantic v2Pydantic v1 Python 3.8+ <pre><code>from pydantic_settings import BaseSettings\nfrom readyapi import ReadyAPI\n\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n\n\nsettings = Settings()\napp = ReadyAPI()\n\n\n@app.get(\"/info\")\nasync def info():\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }\n</code></pre> <p>Info</p> <p>Na vers\u00e3o 1 do Pydantic voc\u00ea importaria <code>BaseSettings</code> diretamente do m\u00f3dulo <code>pydantic</code> em vez do m\u00f3dulo <code>pydantic_settings</code>.</p> Python 3.8+ <pre><code>from pydantic import BaseSettings\nfrom readyapi import ReadyAPI\n\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n\n\nsettings = Settings()\napp = ReadyAPI()\n\n\n@app.get(\"/info\")\nasync def info():\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }\n</code></pre> <p>Dica</p> <p>Se voc\u00ea quiser algo pronto para copiar e colar na sua aplica\u00e7\u00e3o, n\u00e3o use esse exemplo, mas sim o exemplo abaixo.</p> <p>Portanto, quando voc\u00ea cria uma inst\u00e2ncia da classe <code>Settings</code> (nesse caso, o objeto <code>settings</code>), o Pydantic l\u00ea as vari\u00e1veis de ambiente sem diferenciar mai\u00fasculas e min\u00fasculas, por isso, uma vari\u00e1vel mai\u00fascula <code>APP_NAME</code> ser\u00e1 usada para o atributo <code>app_name</code>.</p> <p>Depois ele ir\u00e1 converter e validar os dados. Assim, quando voc\u00ea utilizar aquele objeto <code>settings</code>, os dados ter\u00e3o o tipo que voc\u00ea declarou (e.g. <code>items_per_user</code> ser\u00e1 do tipo <code>int</code>).</p>"},{"location":"advanced/settings/#usando-o-objeto-settings","title":"Usando o objeto <code>settings</code>","text":"<p>Depois, Voc\u00ea pode utilizar o novo objeto <code>settings</code> na sua aplica\u00e7\u00e3o:</p> Python 3.8+ <pre><code>from pydantic_settings import BaseSettings\nfrom readyapi import ReadyAPI\n\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n\n\nsettings = Settings()\napp = ReadyAPI()\n\n\n@app.get(\"/info\")\nasync def info():\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }\n</code></pre>"},{"location":"advanced/settings/#executando-o-servidor","title":"Executando o servidor","text":"<p>No pr\u00f3ximo passo, voc\u00ea pode inicializar o servidor passando as configura\u00e7\u00f5es em forma de vari\u00e1veis de ambiente, por exemplo, voc\u00ea poderia definir <code>ADMIN_EMAIL</code> e <code>APP_NAME</code> da seguinte forma:</p> <pre><code>$ ADMIN_EMAIL=\"deadpool@example.com\" APP_NAME=\"ChimichangApp\" readyapi run main.py\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>Dica</p> <p>Para definir m\u00faltiplas vari\u00e1veis de ambiente para um \u00fanico comando basta separ\u00e1-las utilizando espa\u00e7os, e incluir todas elas antes do comando.</p> <p>Assim, o atributo <code>admin_email</code> seria definido como <code>\"deadpool@example.com\"</code>.</p> <p><code>app_name</code> seria <code>\"ChimichangApp\"</code>.</p> <p>E <code>items_per_user</code> manteria o valor padr\u00e3o de <code>50</code>.</p>"},{"location":"advanced/settings/#configuracoes-em-um-modulo-separado","title":"Configura\u00e7\u00f5es em um m\u00f3dulo separado","text":"<p>Voc\u00ea tamb\u00e9m pode incluir essas configura\u00e7\u00f5es em um arquivo de um m\u00f3dulo separado como visto em Bigger Applications - Multiple Files.</p> <p>Por exemplo, voc\u00ea pode adicionar um arquivo <code>config.py</code> com:</p> Python 3.8+ <pre><code>from pydantic_settings import BaseSettings\n\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n\n\nsettings = Settings()\n</code></pre> <p>E utilizar essa configura\u00e7\u00e3o em <code>main.py</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\nfrom .config import settings\n\napp = ReadyAPI()\n\n\n@app.get(\"/info\")\nasync def info():\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }\n</code></pre> <p>Dica</p> <p>Voc\u00ea tamb\u00e9m precisa incluir um arquivo <code>__init__.py</code> como visto em Bigger Applications - Multiple Files.</p>"},{"location":"advanced/settings/#configuracoes-em-uma-dependencia","title":"Configura\u00e7\u00f5es em uma depend\u00eancia","text":"<p>Em certas ocasi\u00f5es, pode ser \u00fatil fornecer essas configura\u00e7\u00f5es a partir de uma depend\u00eancia, em vez de definir um objeto global <code>settings</code> que \u00e9 utilizado em toda a aplica\u00e7\u00e3o.</p> <p>Isso \u00e9 especialmente \u00fatil durante os testes, j\u00e1 que \u00e9 bastante simples sobrescrever uma depend\u00eancia com suas configura\u00e7\u00f5es personalizadas.</p>"},{"location":"advanced/settings/#o-arquivo-de-configuracao","title":"O arquivo de configura\u00e7\u00e3o","text":"<p>Baseando-se no exemplo anterior, seu arquivo <code>config.py</code> seria parecido com isso:</p> Python 3.8+ <pre><code>from pydantic_settings import BaseSettings\n\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n</code></pre> <p>Perceba que dessa vez n\u00e3o criamos uma inst\u00e2ncia padr\u00e3o <code>settings = Settings()</code>.</p>"},{"location":"advanced/settings/#o-arquivo-principal-da-aplicacao","title":"O arquivo principal da aplica\u00e7\u00e3o","text":"<p>Agora criamos a depend\u00eancia que retorna um novo objeto <code>config.Settings()</code>.</p> Python 3.8+ <pre><code>from functools import lru_cache\nfrom typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\nfrom .config import Settings\n\napp = ReadyAPI()\n\n\n@lru_cache\ndef get_settings():\n    return Settings()\n\n\n@app.get(\"/info\")\nasync def info(settings: Annotated[Settings, Depends(get_settings)]):\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }\n</code></pre> <p>Dica</p> <p>Vamos discutir sobre <code>@lru_cache</code> logo mais.</p> <p>Por enquanto, voc\u00ea pode considerar <code>get_settings()</code> como uma fun\u00e7\u00e3o normal.</p> <p>E ent\u00e3o podemos declarar essas configura\u00e7\u00f5es como uma depend\u00eancia na fun\u00e7\u00e3o de opera\u00e7\u00e3o da rota e utilizar onde for necess\u00e1rio.</p> Python 3.8+ <pre><code>from functools import lru_cache\nfrom typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\nfrom .config import Settings\n\napp = ReadyAPI()\n\n\n@lru_cache\ndef get_settings():\n    return Settings()\n\n\n@app.get(\"/info\")\nasync def info(settings: Annotated[Settings, Depends(get_settings)]):\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }\n</code></pre>"},{"location":"advanced/settings/#configuracoes-e-testes","title":"Configura\u00e7\u00f5es e testes","text":"<p>Ent\u00e3o seria muito f\u00e1cil fornecer uma configura\u00e7\u00e3o diferente durante a execu\u00e7\u00e3o dos testes sobrescrevendo a depend\u00eancia de <code>get_settings</code>:</p> Python 3.8+ <pre><code>from readyapi.testclient import TestClient\n\nfrom .config import Settings\nfrom .main import app, get_settings\n\nclient = TestClient(app)\n\n\ndef get_settings_override():\n    return Settings(admin_email=\"testing_admin@example.com\")\n\n\napp.dependency_overrides[get_settings] = get_settings_override\n\n\ndef test_app():\n    response = client.get(\"/info\")\n    data = response.json()\n    assert data == {\n        \"app_name\": \"Awesome API\",\n        \"admin_email\": \"testing_admin@example.com\",\n        \"items_per_user\": 50,\n    }\n</code></pre> <p>Na sobrescrita da depend\u00eancia, definimos um novo valor para <code>admin_email</code> quando instanciamos um novo objeto <code>Settings</code>, e ent\u00e3o retornamos esse novo objeto.</p> <p>Ap\u00f3s isso, podemos testar se o valor est\u00e1 sendo utilizado.</p>"},{"location":"advanced/settings/#lendo-um-arquivo-env","title":"Lendo um arquivo <code>.env</code>","text":"<p>Se voc\u00ea tiver muitas configura\u00e7\u00f5es que variem bastante, talvez em ambientes distintos, pode ser \u00fatil coloc\u00e1-las em um arquivo e depois l\u00ea-las como se fossem vari\u00e1veis de ambiente.</p> <p>Essa pr\u00e1tica \u00e9 t\u00e3o comum que possui um nome, essas vari\u00e1veis de ambiente normalmente s\u00e3o colocadas em um arquivo <code>.env</code>, e esse arquivo \u00e9 chamado de \"dotenv\".</p> <p>Dica</p> <p>Um arquivo iniciando com um ponto final (<code>.</code>) \u00e9 um arquivo oculto em sistemas baseados em Unix, como Linux e MacOS.</p> <p>Mas um arquivo dotenv n\u00e3o precisa ter esse nome exato.</p> <p>Pydantic suporta a leitura desses tipos de arquivos utilizando uma biblioteca externa. Voc\u00ea pode ler mais em Pydantic Settings: Dotenv (.env) support.</p> <p>Dica</p> <p>Para que isso funcione voc\u00ea precisa executar <code>pip install python-dotenv</code>.</p>"},{"location":"advanced/settings/#o-arquivo-env","title":"O arquivo <code>.env</code>","text":"<p>Voc\u00ea pode definir um arquivo <code>.env</code> com o seguinte conte\u00fado:</p> <pre><code>ADMIN_EMAIL=\"deadpool@example.com\"\nAPP_NAME=\"ChimichangApp\"\n</code></pre>"},{"location":"advanced/settings/#obtendo-configuracoes-do-env","title":"Obtendo configura\u00e7\u00f5es do <code>.env</code>","text":"<p>E ent\u00e3o adicionar o seguinte c\u00f3digo em <code>config.py</code>:</p> Pydantic v2Pydantic v1 Python 3.8+ <pre><code>from pydantic_settings import BaseSettings, SettingsConfigDict\n\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n\n    model_config = SettingsConfigDict(env_file=\".env\")\n</code></pre> <p>Dica</p> <p>O atributo <code>model_config</code> \u00e9 usado apenas para configura\u00e7\u00e3o do Pydantic. Voc\u00ea pode ler mais em Pydantic Model Config.</p> Python 3.8+ <pre><code>from pydantic import BaseSettings\n\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n\n    class Config:\n        env_file = \".env\"\n</code></pre> <p>Dica</p> <p>A classe <code>Config</code> \u00e9 usada apenas para configura\u00e7\u00e3o do Pydantic. Voc\u00ea pode ler mais em Pydantic Model Config.</p> <p>Info</p> <p>Na vers\u00e3o 1 do Pydantic a configura\u00e7\u00e3o \u00e9 realizada por uma classe interna <code>Config</code>, na vers\u00e3o 2 do Pydantic isso \u00e9 feito com o atributo <code>model_config</code>. Esse atributo recebe um <code>dict</code>, para utilizar o autocomplete e checagem de erros do seu editor de texto voc\u00ea pode importar e utilizar <code>SettingsConfigDict</code> para definir esse <code>dict</code>.</p> <p>Aqui definimos a configura\u00e7\u00e3o <code>env_file</code> dentro da classe <code>Settings</code> do Pydantic, e definimos o valor como o nome do arquivo dotenv que queremos utilizar.</p>"},{"location":"advanced/settings/#declarando-settings-apenas-uma-vez-com-lru_cache","title":"Declarando <code>Settings</code> apenas uma vez com <code>lru_cache</code>","text":"<p>Ler o conte\u00fado de um arquivo em disco normalmente \u00e9 uma opera\u00e7\u00e3o custosa (lenta), ent\u00e3o voc\u00ea provavelmente quer fazer isso apenas um vez e reutilizar o mesmo objeto settings depois, em vez de ler os valores a cada requisi\u00e7\u00e3o.</p> <p>Mas cada vez que fazemos:</p> <pre><code>Settings()\n</code></pre> <p>um novo objeto <code>Settings</code> \u00e9 instanciado, e durante a instancia\u00e7\u00e3o, o arquivo <code>.env</code> \u00e9 lido novamente.</p> <p>Se a fun\u00e7\u00e3o da depend\u00eancia fosse apenas:</p> <pre><code>def get_settings():\n    return Settings()\n</code></pre> <p>Iriamos criar um novo objeto a cada requisi\u00e7\u00e3o, e estar\u00edamos lendo o arquivo <code>.env</code> a cada requisi\u00e7\u00e3o. \u26a0\ufe0f</p> <p>Mas como estamos utilizando o decorador <code>@lru_cache</code> acima, o objeto <code>Settings</code> \u00e9 criado apenas uma vez, na primeira vez que a fun\u00e7\u00e3o \u00e9 chamada. \u2714\ufe0f</p> Python 3.8+ <pre><code>from functools import lru_cache\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\nfrom . import config\n\napp = ReadyAPI()\n\n\n@lru_cache\ndef get_settings():\n    return config.Settings()\n\n\n@app.get(\"/info\")\nasync def info(settings: Annotated[config.Settings, Depends(get_settings)]):\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }\n</code></pre> <p>Dessa forma, todas as chamadas da fun\u00e7\u00e3o <code>get_settings()</code> nas depend\u00eancias das pr\u00f3ximas requisi\u00e7\u00f5es, em vez de executar o c\u00f3digo interno de <code>get_settings()</code> e instanciar um novo objeto <code>Settings</code>, ir\u00e3o retornar o mesmo objeto que foi retornado na primeira chamada, de novo e de novo.</p>"},{"location":"advanced/settings/#detalhes-tecnicos-de-lru_cache","title":"Detalhes T\u00e9cnicos de <code>lru_cache</code>","text":"<p><code>@lru_cache</code> modifica a fun\u00e7\u00e3o decorada para retornar o mesmo valor que foi retornado na primeira vez, em vez de calcul\u00e1-lo novamente, executando o c\u00f3digo da fun\u00e7\u00e3o toda vez.</p> <p>Assim, a fun\u00e7\u00e3o abaixo do decorador \u00e9 executada uma \u00fanica vez para cada combina\u00e7\u00e3o dos argumentos passados. E os valores retornados para cada combina\u00e7\u00e3o de argumentos s\u00e3o sempre reutilizados para cada nova chamada da fun\u00e7\u00e3o com a mesma combina\u00e7\u00e3o de argumentos.</p> <p>Por exemplo, se voc\u00ea definir uma fun\u00e7\u00e3o:</p> <pre><code>@lru_cache\ndef say_hi(name: str, salutation: str = \"Ms.\"):\n    return f\"Hello {salutation} {name}\"\n</code></pre> <p>Seu programa poderia executar dessa forma:</p> <pre><code>sequenceDiagram\n\nparticipant code as C\u00f3digo\nparticipant function as say_hi()\nparticipant execute as Executar Fun\u00e7\u00e3o\n\n    rect rgba(0, 255, 0, .1)\n        code -&gt;&gt; function: say_hi(name=\"Camila\")\n        function -&gt;&gt; execute: executar c\u00f3digo da fun\u00e7\u00e3o\n        execute -&gt;&gt; code: retornar o resultado\n    end\n\n    rect rgba(0, 255, 255, .1)\n        code -&gt;&gt; function: say_hi(name=\"Camila\")\n        function -&gt;&gt; code: retornar resultado armazenado\n    end\n\n    rect rgba(0, 255, 0, .1)\n        code -&gt;&gt; function: say_hi(name=\"Rick\")\n        function -&gt;&gt; execute: executar c\u00f3digo da fun\u00e7\u00e3o\n        execute -&gt;&gt; code: retornar o resultado\n    end\n\n    rect rgba(0, 255, 0, .1)\n        code -&gt;&gt; function: say_hi(name=\"Rick\", salutation=\"Mr.\")\n        function -&gt;&gt; execute: executar c\u00f3digo da fun\u00e7\u00e3o\n        execute -&gt;&gt; code: retornar o resultado\n    end\n\n    rect rgba(0, 255, 255, .1)\n        code -&gt;&gt; function: say_hi(name=\"Rick\")\n        function -&gt;&gt; code: retornar resultado armazenado\n    end\n\n    rect rgba(0, 255, 255, .1)\n        code -&gt;&gt; function: say_hi(name=\"Camila\")\n        function -&gt;&gt; code: retornar resultado armazenado\n    end</code></pre> <p>No caso da nossa depend\u00eancia <code>get_settings()</code>, a fun\u00e7\u00e3o n\u00e3o recebe nenhum argumento, ent\u00e3o ela sempre retorna o mesmo valor.</p> <p>Dessa forma, ela se comporta praticamente como uma vari\u00e1vel global, mas ao ser utilizada como uma fun\u00e7\u00e3o de uma depend\u00eancia, pode facilmente ser sobrescrita durante os testes.</p> <p><code>@lru_cache</code> \u00e9 definido no m\u00f3dulo <code>functools</code> que faz parte da biblioteca padr\u00e3o do Python, voc\u00ea pode ler mais sobre esse decorador no link Python Docs sobre <code>@lru_cache</code>.</p>"},{"location":"advanced/settings/#recapitulando","title":"Recapitulando","text":"<p>Voc\u00ea pode usar o m\u00f3dulo Pydantic Settings para gerenciar as configura\u00e7\u00f5es de sua aplica\u00e7\u00e3o, utilizando todo o poder dos modelos Pydantic.</p> <ul> <li>Utilizar depend\u00eancias simplifica os testes.</li> <li>Voc\u00ea pode utilizar arquivos .env junto das configura\u00e7\u00f5es do Pydantic.</li> <li>Utilizar o decorador <code>@lru_cache</code> evita que o arquivo .env seja lido de novo e de novo para cada requisi\u00e7\u00e3o, enquanto permite que voc\u00ea sobrescreva durante os testes.</li> </ul>"},{"location":"advanced/sub-applications/","title":"Sub Aplica\u00e7\u00f5es - Montagens","text":"<p>Se voc\u00ea precisar ter duas aplica\u00e7\u00f5es ReadyAPI independentes, cada uma com seu pr\u00f3prio OpenAPI e suas pr\u00f3prias interfaces de documenta\u00e7\u00e3o, voc\u00ea pode ter um aplicativo principal e \"montar\" uma (ou mais) sub-aplica\u00e7\u00f5es.</p>"},{"location":"advanced/sub-applications/#montando-uma-aplicacao-readyapi","title":"Montando uma aplica\u00e7\u00e3o ReadyAPI","text":"<p>\"Montar\" significa adicionar uma aplica\u00e7\u00e3o completamente \"independente\" em um caminho espec\u00edfico, que ent\u00e3o se encarrega de lidar com tudo sob esse caminho, com as opera\u00e7\u00f5es de rota declaradas nessa sub-aplica\u00e7\u00e3o.</p>"},{"location":"advanced/sub-applications/#aplicacao-de-nivel-superior","title":"Aplica\u00e7\u00e3o de n\u00edvel superior","text":"<p>Primeiro, crie a aplica\u00e7\u00e3o principal, de n\u00edvel superior, ReadyAPI, e suas opera\u00e7\u00f5es de rota:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/app\")\ndef read_main():\n    return {\"message\": \"Hello World from main app\"}\n\n\nsubapi = ReadyAPI()\n\n\n@subapi.get(\"/sub\")\ndef read_sub():\n    return {\"message\": \"Hello World from sub API\"}\n\n\napp.mount(\"/subapi\", subapi)\n</code></pre>"},{"location":"advanced/sub-applications/#sub-aplicacao","title":"Sub-aplica\u00e7\u00e3o","text":"<p>Em seguida, crie sua sub-aplica\u00e7\u00e3o e suas opera\u00e7\u00f5es de rota.</p> <p>Essa sub-aplica\u00e7\u00e3o \u00e9 apenas outra aplica\u00e7\u00e3o ReadyAPI padr\u00e3o, mas esta \u00e9 a que ser\u00e1 \"montada\":</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/app\")\ndef read_main():\n    return {\"message\": \"Hello World from main app\"}\n\n\nsubapi = ReadyAPI()\n\n\n@subapi.get(\"/sub\")\ndef read_sub():\n    return {\"message\": \"Hello World from sub API\"}\n\n\napp.mount(\"/subapi\", subapi)\n</code></pre>"},{"location":"advanced/sub-applications/#monte-a-sub-aplicacao","title":"Monte a sub-aplica\u00e7\u00e3o","text":"<p>Na sua aplica\u00e7\u00e3o de n\u00edvel superior, <code>app</code>, monte a sub-aplica\u00e7\u00e3o, <code>subapi</code>.</p> <p>Neste caso, ela ser\u00e1 montada no caminho <code>/subapi</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/app\")\ndef read_main():\n    return {\"message\": \"Hello World from main app\"}\n\n\nsubapi = ReadyAPI()\n\n\n@subapi.get(\"/sub\")\ndef read_sub():\n    return {\"message\": \"Hello World from sub API\"}\n\n\napp.mount(\"/subapi\", subapi)\n</code></pre>"},{"location":"advanced/sub-applications/#verifique-a-documentacao-automatica-da-api","title":"Verifique a documenta\u00e7\u00e3o autom\u00e1tica da API","text":"<p>Agora, execute <code>uvicorn</code> com a aplica\u00e7\u00e3o principal, se o seu arquivo for <code>main.py</code>, seria:</p> <pre><code>$ uvicorn main:app --reload\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>E abra a documenta\u00e7\u00e3o em http://127.0.0.1:8000/docs.</p> <p>Voc\u00ea ver\u00e1 a documenta\u00e7\u00e3o autom\u00e1tica da API para a aplica\u00e7\u00e3o principal, incluindo apenas suas pr\u00f3prias opera\u00e7\u00f5es de rota:</p> <p></p> <p>E ent\u00e3o, abra a documenta\u00e7\u00e3o para a sub-aplica\u00e7\u00e3o, em http://127.0.0.1:8000/subapi/docs.</p> <p>Voc\u00ea ver\u00e1 a documenta\u00e7\u00e3o autom\u00e1tica da API para a sub-aplica\u00e7\u00e3o, incluindo apenas suas pr\u00f3prias opera\u00e7\u00f5es de rota, todas sob o prefixo de sub-caminho correto <code>/subapi</code>:</p> <p></p> <p>Se voc\u00ea tentar interagir com qualquer uma das duas interfaces de usu\u00e1rio, elas funcionar\u00e3o corretamente, porque o navegador ser\u00e1 capaz de se comunicar com cada aplica\u00e7\u00e3o ou sub-aplica\u00e7\u00e3o espec\u00edfica.</p>"},{"location":"advanced/sub-applications/#detalhes-tecnicos-root_path","title":"Detalhes T\u00e9cnicos: <code>root_path</code>","text":"<p>Quando voc\u00ea monta uma sub-aplica\u00e7\u00e3o como descrito acima, o ReadyAPI se encarrega de comunicar o caminho de montagem para a sub-aplica\u00e7\u00e3o usando um mecanismo da especifica\u00e7\u00e3o ASGI chamado <code>root_path</code>.</p> <p>Dessa forma, a sub-aplica\u00e7\u00e3o saber\u00e1 usar esse prefixo de caminho para a interface de documenta\u00e7\u00e3o.</p> <p>E a sub-aplica\u00e7\u00e3o tamb\u00e9m poderia ter suas pr\u00f3prias sub-aplica\u00e7\u00f5es montadas e tudo funcionaria corretamente, porque o ReadyAPI lida com todos esses <code>root_path</code>s automaticamente.</p> <p>Voc\u00ea aprender\u00e1 mais sobre o <code>root_path</code> e como us\u00e1-lo explicitamente na se\u00e7\u00e3o sobre Atr\u00e1s de um Proxy.</p>"},{"location":"advanced/templates/","title":"Templates","text":"<p>Voc\u00ea pode usar qualquer template engine com o ReadyAPI.</p> <p>Uma escolha comum \u00e9 o Jinja2, o mesmo usado pelo Flask e outras ferramentas.</p> <p>Existem utilit\u00e1rios para configur\u00e1-lo facilmente que voc\u00ea pode usar diretamente em sua aplica\u00e7\u00e3o ReadyAPI (fornecidos pelo Starlette).</p>"},{"location":"advanced/templates/#instalacao-de-dependencias","title":"Instala\u00e7\u00e3o de depend\u00eancias","text":"<p>Para instalar o <code>jinja2</code>, siga o c\u00f3digo abaixo:</p> <pre><code>$ pip install jinja2\n</code></pre>"},{"location":"advanced/templates/#usando-jinja2templates","title":"Usando <code>Jinja2Templates</code>","text":"<ul> <li>Importe <code>Jinja2Templates</code>.</li> <li>Crie um <code>templates</code> que voc\u00ea possa reutilizar posteriormente.</li> <li>Declare um par\u00e2metro <code>Request</code> no path operation que retornar\u00e1 um template.</li> <li>Use o <code>template</code> que voc\u00ea criou para renderizar e retornar uma <code>TemplateResponse</code>, passe o nome do template, o request object, e um \"context\" dict com pares chave-valor a serem usados dentro do template do Jinja2.</li> </ul> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Request\nfrom readyapi.responses import HTMLResponse\nfrom readyapi.staticfiles import StaticFiles\nfrom readyapi.templating import Jinja2Templates\n\napp = ReadyAPI()\n\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n\n\ntemplates = Jinja2Templates(directory=\"templates\")\n\n\n@app.get(\"/items/{id}\", response_class=HTMLResponse)\nasync def read_item(request: Request, id: str):\n    return templates.TemplateResponse(\n        request=request, name=\"item.html\", context={\"id\": id}\n    )\n</code></pre> <p>Note</p> <p>Antes do ReadyAPI 0.108.0, Starlette 0.29.0, <code>name</code> era o primeiro par\u00e2metro.</p> <p>Al\u00e9m disso, em vers\u00f5es anteriores, o objeto <code>request</code> era passado como parte dos pares chave-valor no \"context\" dict para o Jinja2.</p> <p>Dica</p> <p>Ao declarar <code>response_class=HTMLResponse</code>, a documenta\u00e7\u00e3o entender\u00e1 que a resposta ser\u00e1 HTML.</p> <p>Detalhes T\u00e9cnicos</p> <p>Voc\u00ea tamb\u00e9m poderia usar <code>from starlette.templating import Jinja2Templates</code>.</p> <p>ReadyAPI fornece o mesmo <code>starlette.templating</code> como <code>readyapi.templating</code> apenas como uma conveni\u00eancia para voc\u00ea, o desenvolvedor. Mas a maioria das respostas dispon\u00edveis v\u00eam diretamente do Starlette. O mesmo acontece com <code>Request</code> e <code>StaticFiles</code>.</p>"},{"location":"advanced/templates/#escrevendo-templates","title":"Escrevendo Templates","text":"<p>Ent\u00e3o voc\u00ea pode escrever um template em <code>templates/item.html</code>, por exemplo:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Item Details&lt;/title&gt;\n    &lt;link href=\"{{ url_for('static', path='/styles.css') }}\" rel=\"stylesheet\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;&lt;a href=\"{{ url_for('read_item', id=id) }}\"&gt;Item ID: {{ id }}&lt;/a&gt;&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"advanced/templates/#interpolacao-de-valores-no-template","title":"Interpola\u00e7\u00e3o de Valores no Template","text":"<p>No c\u00f3digo HTML que cont\u00e9m:</p> <pre><code>Item ID: {{ id }}\n</code></pre> <p>...aparecer\u00e1 o <code>id</code> obtido do \"context\" <code>dict</code> que voc\u00ea passou:</p> <pre><code>{\"id\": id}\n</code></pre> <p>Por exemplo, dado um ID de valor <code>42</code>, aparecer\u00e1:</p> <pre><code>Item ID: 42\n</code></pre>"},{"location":"advanced/templates/#argumentos-do-url_for","title":"Argumentos do <code>url_for</code>","text":"<p>Voc\u00ea tamb\u00e9m pode usar <code>url_for()</code> dentro do template, ele recebe como argumentos os mesmos argumentos que seriam usados pela sua path operation function.</p> <p>Logo, a se\u00e7\u00e3o com:</p> <pre><code>&lt;a href=\"{{ url_for('read_item', id=id) }}\"&gt;\n</code></pre> <p>...ir\u00e1 gerar um link para a mesma URL que ser\u00e1 tratada pela path operation function <code>read_item(id=id)</code>.</p> <p>Por exemplo, com um ID de <code>42</code>, isso renderizar\u00e1:</p> <pre><code>&lt;a href=\"/items/42\"&gt;\n</code></pre>"},{"location":"advanced/templates/#templates-e-arquivos-estaticos","title":"Templates e Arquivos Est\u00e1ticos","text":"<p>Voc\u00ea tamb\u00e9m pode usar <code>url_for()</code> dentro do template e us\u00e1-lo, por examplo, com o <code>StaticFiles</code> que voc\u00ea montou com o <code>name=\"static\"</code>.</p> <pre><code>&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Item Details&lt;/title&gt;\n    &lt;link href=\"{{ url_for('static', path='/styles.css') }}\" rel=\"stylesheet\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;&lt;a href=\"{{ url_for('read_item', id=id) }}\"&gt;Item ID: {{ id }}&lt;/a&gt;&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Neste exemplo, ele seria vinculado a um arquivo CSS em <code>static/styles.css</code> com:</p> <pre><code>h1 {\n    color: green;\n}\n</code></pre> <p>E como voc\u00ea est\u00e1 usando <code>StaticFiles</code>, este arquivo CSS ser\u00e1 automaticamente servido pela sua aplica\u00e7\u00e3o ReadyAPI na URL <code>/static/styles.css</code>.</p>"},{"location":"advanced/templates/#mais-detalhes","title":"Mais detalhes","text":"<p>Para obter mais detalhes, incluindo como testar templates, consulte a documenta\u00e7\u00e3o da Starlette sobre templates.</p>"},{"location":"advanced/testing-dependencies/","title":"Testando Depend\u00eancias com Sobreposi\u00e7\u00e3o (Overrides)","text":""},{"location":"advanced/testing-dependencies/#sobrepondo-dependencias-durante-os-testes","title":"Sobrepondo depend\u00eancias durante os testes","text":"<p>Existem alguns cen\u00e1rios onde voc\u00ea deseje sobrepor uma depend\u00eancia durante os testes.</p> <p>Voc\u00ea n\u00e3o quer que a depend\u00eancia original execute (e nenhuma das subdepend\u00eancias que voc\u00ea possa ter).</p> <p>Em vez disso, voc\u00ea deseja fornecer uma depend\u00eancia diferente que ser\u00e1 usada somente durante os testes (possivelmente apenas para alguns testes espec\u00edficos) e fornecer\u00e1 um valor que pode ser usado onde o valor da depend\u00eancia original foi usado.</p>"},{"location":"advanced/testing-dependencies/#casos-de-uso-servico-externo","title":"Casos de uso: servi\u00e7o externo","text":"<p>Um exemplo pode ser que voc\u00ea possua um provedor de autentica\u00e7\u00e3o externo que voc\u00ea precisa chamar.</p> <p>Voc\u00ea envia ao servi\u00e7o um token e ele retorna um usu\u00e1rio autenticado.</p> <p>Este provedor pode cobrar por requisi\u00e7\u00e3o, e cham\u00e1-lo pode levar mais tempo do que se voc\u00ea tivesse um usu\u00e1rio fixo para os testes.</p> <p>Voc\u00ea provavelmente quer testar o provedor externo uma vez, mas n\u00e3o necessariamente cham\u00e1-lo em todos os testes que executarem.</p> <p>Neste caso, voc\u00ea pode sobrepor (override) a depend\u00eancia que chama o provedor, e utilizar uma depend\u00eancia customizada que retorna um mock do usu\u00e1rio, apenas para os seus testes.</p>"},{"location":"advanced/testing-dependencies/#utilize-o-atributo-appdependency_overrides","title":"Utilize o atributo <code>app.dependency_overrides</code>","text":"<p>Para estes casos, a sua aplica\u00e7\u00e3o ReadyAPI possui o atributo <code>app.dependency_overrides</code>. Ele \u00e9 um simples <code>dict</code>.</p> <p>Para sobrepor a depend\u00eancia para os testes, voc\u00ea coloca como chave a depend\u00eancia original (a fun\u00e7\u00e3o), e como valor, a sua sobreposi\u00e7\u00e3o da depend\u00eancia (outra fun\u00e7\u00e3o).</p> <p>E ent\u00e3o o ReadyAPI chamar\u00e1 a sobreposi\u00e7\u00e3o no lugar da depend\u00eancia original.</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.testclient import TestClient\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return {\"message\": \"Hello Items!\", \"params\": commons}\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return {\"message\": \"Hello Users!\", \"params\": commons}\n\n\nclient = TestClient(app)\n\n\nasync def override_dependency(q: str | None = None):\n    return {\"q\": q, \"skip\": 5, \"limit\": 10}\n\n\napp.dependency_overrides[common_parameters] = override_dependency\n\n\ndef test_override_in_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_q():\n    response = client.get(\"/items/?q=foo\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_params():\n    response = client.get(\"/items/?q=foo&amp;skip=100&amp;limit=200\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.testclient import TestClient\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return {\"message\": \"Hello Items!\", \"params\": commons}\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return {\"message\": \"Hello Users!\", \"params\": commons}\n\n\nclient = TestClient(app)\n\n\nasync def override_dependency(q: Union[str, None] = None):\n    return {\"q\": q, \"skip\": 5, \"limit\": 10}\n\n\napp.dependency_overrides[common_parameters] = override_dependency\n\n\ndef test_override_in_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_q():\n    response = client.get(\"/items/?q=foo\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_params():\n    response = client.get(\"/items/?q=foo&amp;skip=100&amp;limit=200\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.testclient import TestClient\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return {\"message\": \"Hello Items!\", \"params\": commons}\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return {\"message\": \"Hello Users!\", \"params\": commons}\n\n\nclient = TestClient(app)\n\n\nasync def override_dependency(q: Union[str, None] = None):\n    return {\"q\": q, \"skip\": 5, \"limit\": 10}\n\n\napp.dependency_overrides[common_parameters] = override_dependency\n\n\ndef test_override_in_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_q():\n    response = client.get(\"/items/?q=foo\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_params():\n    response = client.get(\"/items/?q=foo&amp;skip=100&amp;limit=200\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.testclient import TestClient\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return {\"message\": \"Hello Items!\", \"params\": commons}\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return {\"message\": \"Hello Users!\", \"params\": commons}\n\n\nclient = TestClient(app)\n\n\nasync def override_dependency(q: str | None = None):\n    return {\"q\": q, \"skip\": 5, \"limit\": 10}\n\n\napp.dependency_overrides[common_parameters] = override_dependency\n\n\ndef test_override_in_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_q():\n    response = client.get(\"/items/?q=foo\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_params():\n    response = client.get(\"/items/?q=foo&amp;skip=100&amp;limit=200\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.testclient import TestClient\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return {\"message\": \"Hello Items!\", \"params\": commons}\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return {\"message\": \"Hello Users!\", \"params\": commons}\n\n\nclient = TestClient(app)\n\n\nasync def override_dependency(q: Union[str, None] = None):\n    return {\"q\": q, \"skip\": 5, \"limit\": 10}\n\n\napp.dependency_overrides[common_parameters] = override_dependency\n\n\ndef test_override_in_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_q():\n    response = client.get(\"/items/?q=foo\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_params():\n    response = client.get(\"/items/?q=foo&amp;skip=100&amp;limit=200\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n</code></pre> <p>Dica</p> <p>Voc\u00ea pode definir uma sobreposi\u00e7\u00e3o de depend\u00eancia para uma depend\u00eancia que \u00e9 utilizada em qualquer lugar da sua aplica\u00e7\u00e3o ReadyAPI.</p> <p>A depend\u00eancia original pode estar sendo utilizada em uma fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota, um docorador de opera\u00e7\u00e3o de rota (quando voc\u00ea n\u00e3o utiliza o valor retornado), uma chamada ao <code>.include_router()</code>, etc.</p> <p>O ReadyAPI ainda poder\u00e1 sobrescrev\u00ea-lo.</p> <p>E ent\u00e3o voc\u00ea pode redefinir as suas sobreposi\u00e7\u00f5es (remov\u00ea-las) definindo o <code>app.dependency_overrides</code> como um <code>dict</code> vazio:</p> <pre><code>app.dependency_overrides = {}\n</code></pre> <p>Dica</p> <p>Se voc\u00ea quer sobrepor uma depend\u00eancia apenas para alguns testes, voc\u00ea pode definir a sobreposi\u00e7\u00e3o no in\u00edcio do testes (dentro da fun\u00e7\u00e3o de teste) e reinici\u00e1-la ao final (no final da fun\u00e7\u00e3o de teste).</p>"},{"location":"advanced/testing-events/","title":"Testando Eventos: inicializa\u00e7\u00e3o - encerramento","text":"<p>Quando voc\u00ea precisa que os seus manipuladores de eventos (<code>startup</code> e <code>shutdown</code>) sejam executados em seus testes, voc\u00ea pode utilizar o <code>TestClient</code> usando a instru\u00e7\u00e3o <code>with</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.testclient import TestClient\n\napp = ReadyAPI()\n\nitems = {}\n\n\n@app.on_event(\"startup\")\nasync def startup_event():\n    items[\"foo\"] = {\"name\": \"Fighters\"}\n    items[\"bar\"] = {\"name\": \"Tenders\"}\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(item_id: str):\n    return items[item_id]\n\n\ndef test_read_items():\n    with TestClient(app) as client:\n        response = client.get(\"/items/foo\")\n        assert response.status_code == 200\n        assert response.json() == {\"name\": \"Fighters\"}\n</code></pre>"},{"location":"advanced/testing-websockets/","title":"Testando WebSockets","text":"<p>Voc\u00ea pode usar o mesmo <code>TestClient</code> para testar WebSockets.</p> <p>Para isso, voc\u00ea utiliza o <code>TestClient</code> dentro de uma instru\u00e7\u00e3o <code>with</code>, conectando com o WebSocket:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.testclient import TestClient\nfrom readyapi.websockets import WebSocket\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def read_main():\n    return {\"msg\": \"Hello World\"}\n\n\n@app.websocket(\"/ws\")\nasync def websocket(websocket: WebSocket):\n    await websocket.accept()\n    await websocket.send_json({\"msg\": \"Hello WebSocket\"})\n    await websocket.close()\n\n\ndef test_read_main():\n    client = TestClient(app)\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"msg\": \"Hello World\"}\n\n\ndef test_websocket():\n    client = TestClient(app)\n    with client.websocket_connect(\"/ws\") as websocket:\n        data = websocket.receive_json()\n        assert data == {\"msg\": \"Hello WebSocket\"}\n</code></pre> <p>Nota</p> <p>Para mais detalhes, confira a documenta\u00e7\u00e3o do Starlette para testar WebSockets.</p>"},{"location":"advanced/using-request-directly/","title":"Utilizando o Request diretamente","text":"<p>At\u00e9 agora voc\u00ea declarou as partes da requisi\u00e7\u00e3o que voc\u00ea precisa utilizando os seus tipos.</p> <p>Obtendo dados de:</p> <ul> <li>Os par\u00e2metros das rotas.</li> <li>Cabe\u00e7alhos (Headers).</li> <li>Cookies.</li> <li>etc.</li> </ul> <p>E ao fazer isso, o ReadyAPI est\u00e1 validando as informa\u00e7\u00f5es, convertendo-as e gerando documenta\u00e7\u00e3o para a sua API automaticamente.</p> <p>Por\u00e9m h\u00e1 situa\u00e7\u00f5es em que voc\u00ea possa precisar acessar o objeto <code>Request</code> diretamente.</p>"},{"location":"advanced/using-request-directly/#detalhes-sobre-o-objeto-request","title":"Detalhes sobre o objeto <code>Request</code>","text":"<p>Como o ReadyAPI \u00e9 na verdade o Starlette por baixo, com camadas de diversas funcionalidades por cima, voc\u00ea pode utilizar o objeto <code>Request</code> do Starlette diretamente quando precisar.</p> <p>Isso significaria tamb\u00e9m que se voc\u00ea obtiver informa\u00e7\u00f5es do objeto <code>Request</code> diretamente (ler o corpo da requisi\u00e7\u00e3o por exemplo), as informa\u00e7\u00f5es n\u00e3o ser\u00e3o validadas, convertidas ou documentadas (com o OpenAPI, para a interface de usu\u00e1rio autom\u00e1tica da API) pelo ReadyAPI.</p> <p>Embora qualquer outro par\u00e2metro declarado normalmente (o corpo da requisi\u00e7\u00e3o com um modelo Pydantic, por exemplo) ainda seria validado, convertido, anotado, etc.</p> <p>Mas h\u00e1 situa\u00e7\u00f5es espec\u00edficas onde \u00e9 \u00fatil utilizar o objeto <code>Request</code>.</p>"},{"location":"advanced/using-request-directly/#utilize-o-objeto-request-diretamente","title":"Utilize o objeto <code>Request</code> diretamente","text":"<p>Vamos imaginar que voc\u00ea deseja obter o endere\u00e7o de IP/host do cliente dentro da sua fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota.</p> <p>Para isso voc\u00ea precisa acessar a requisi\u00e7\u00e3o diretamente.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Request\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\ndef read_root(item_id: str, request: Request):\n    client_host = request.client.host\n    return {\"client_host\": client_host, \"item_id\": item_id}\n</code></pre> <p>Ao declarar o par\u00e2metro com o tipo sendo um <code>Request</code> em sua fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota, o ReadyAPI saber\u00e1 como passar o <code>Request</code> neste par\u00e2metro.</p> <p>Dica</p> <p>Note que neste caso, n\u00f3s estamos declarando o par\u00e2metro da rota ao lado do par\u00e2metro da requisi\u00e7\u00e3o.</p> <p>Assim, o par\u00e2metro da rota ser\u00e1 extra\u00eddo, validado, convertido para o tipo especificado e anotado com OpenAPI.</p> <p>Do mesmo jeito, voc\u00ea pode declarar qualquer outro par\u00e2metro normalmente, e al\u00e9m disso, obter o <code>Request</code> tamb\u00e9m.</p>"},{"location":"advanced/using-request-directly/#documentacao-do-request","title":"Documenta\u00e7\u00e3o do <code>Request</code>","text":"<p>Voc\u00ea pode ler mais sobre os detalhes do objeto <code>Request</code> no site da documenta\u00e7\u00e3o oficial do Starlette..</p> <p>Detalhes T\u00e9cnicos</p> <p>Voc\u00ea tamb\u00e9m pode utilizar <code>from starlette.requests import Request</code>.</p> <p>O ReadyAPI fornece isso diretamente apenas como uma conveni\u00eancia para voc\u00ea, o desenvolvedor. Mas ele vem diretamente do Starlette.</p>"},{"location":"advanced/websockets/","title":"WebSockets","text":"<p>Voc\u00ea pode usar WebSockets com ReadyAPI.</p>"},{"location":"advanced/websockets/#instalando-websockets","title":"Instalando <code>WebSockets</code>","text":"<p>Garanta que voc\u00ea criou um ambiente virtual, o ativou e instalou o <code>websockets</code>:</p> <pre><code>$ pip install websockets\n\n---&gt; 100%\n</code></pre>"},{"location":"advanced/websockets/#cliente-websockets","title":"Cliente WebSockets","text":""},{"location":"advanced/websockets/#em-producao","title":"Em produ\u00e7\u00e3o","text":"<p>Em seu sistema de produ\u00e7\u00e3o, voc\u00ea provavelmente tem um frontend criado com um framework moderno como React, Vue.js ou Angular.</p> <p>E para comunicar usando WebSockets com seu backend, voc\u00ea provavelmente usaria as utilidades do seu frontend.</p> <p>Ou voc\u00ea pode ter um aplicativo m\u00f3vel nativo que se comunica diretamente com seu backend WebSocket, em c\u00f3digo nativo.</p> <p>Ou voc\u00ea pode ter qualquer outra forma de comunicar com o endpoint WebSocket.</p> <p>Mas para este exemplo, usaremos um documento HTML muito simples com algum JavaScript, tudo dentro de uma string longa.</p> <p>Esse, \u00e9 claro, n\u00e3o \u00e9 o ideal e voc\u00ea n\u00e3o o usaria para produ\u00e7\u00e3o.</p> <p>Na produ\u00e7\u00e3o, voc\u00ea teria uma das op\u00e7\u00f5es acima.</p> <p>Mas \u00e9 a maneira mais simples de focar no lado do servidor de WebSockets e ter um exemplo funcional:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, WebSocket\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n            var ws = new WebSocket(\"ws://localhost:8000/ws\");\n            ws.onmessage = function(event) {\n                var messages = document.getElementById('messages')\n                var message = document.createElement('li')\n                var content = document.createTextNode(event.data)\n                message.appendChild(content)\n                messages.appendChild(message)\n            };\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(f\"Message text was: {data}\")\n</code></pre>"},{"location":"advanced/websockets/#criando-um-websocket","title":"Criando um <code>websocket</code>","text":"<p>Em sua aplica\u00e7\u00e3o ReadyAPI, crie um <code>websocket</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, WebSocket\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n            var ws = new WebSocket(\"ws://localhost:8000/ws\");\n            ws.onmessage = function(event) {\n                var messages = document.getElementById('messages')\n                var message = document.createElement('li')\n                var content = document.createTextNode(event.data)\n                message.appendChild(content)\n                messages.appendChild(message)\n            };\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(f\"Message text was: {data}\")\n</code></pre> <p>Detalhes T\u00e9cnicos</p> <p>Voc\u00ea tamb\u00e9m poderia usar <code>from starlette.websockets import WebSocket</code>.</p> <p>A ReadyAPI fornece o mesmo <code>WebSocket</code> diretamente apenas como uma conveni\u00eancia para voc\u00ea, o desenvolvedor. Mas ele vem diretamente do Starlette.</p>"},{"location":"advanced/websockets/#aguardar-por-mensagens-e-enviar-mensagens","title":"Aguardar por mensagens e enviar mensagens","text":"<p>Em sua rota WebSocket voc\u00ea pode esperar (<code>await</code>) por mensagens e enviar mensagens.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, WebSocket\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n            var ws = new WebSocket(\"ws://localhost:8000/ws\");\n            ws.onmessage = function(event) {\n                var messages = document.getElementById('messages')\n                var message = document.createElement('li')\n                var content = document.createTextNode(event.data)\n                message.appendChild(content)\n                messages.appendChild(message)\n            };\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(f\"Message text was: {data}\")\n</code></pre> <p>Voc\u00ea pode receber e enviar dados bin\u00e1rios, de texto e JSON.</p>"},{"location":"advanced/websockets/#tente-voce-mesmo","title":"Tente voc\u00ea mesmo","text":"<p>Se seu arquivo for nomeado <code>main.py</code>, execute sua aplica\u00e7\u00e3o com:</p> <pre><code>$ readyapi dev main.py\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>Abra seu navegador em: http://127.0.0.1:8000.</p> <p>Voc\u00ea ver\u00e1 uma p\u00e1gina simples como:</p> <p></p> <p>Voc\u00ea pode digitar mensagens na caixa de entrada e envi\u00e1-las:</p> <p></p> <p>E sua aplica\u00e7\u00e3o ReadyAPI com WebSockets responder\u00e1 de volta:</p> <p></p> <p>Voc\u00ea pode enviar (e receber) muitas mensagens:</p> <p></p> <p>E todas elas usar\u00e3o a mesma conex\u00e3o WebSocket.</p>"},{"location":"advanced/websockets/#usando-depends-e-outros","title":"Usando <code>Depends</code> e outros","text":"<p>Nos endpoints WebSocket voc\u00ea pode importar do <code>readyapi</code> e usar:</p> <ul> <li><code>Depends</code></li> <li><code>Security</code></li> <li><code>Cookie</code></li> <li><code>Header</code></li> <li><code>Path</code></li> <li><code>Query</code></li> </ul> <p>Eles funcionam da mesma forma que para outros endpoints ReadyAPI/opera\u00e7\u00f5es de rota:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import (\n    Cookie,\n    Depends,\n    Query,\n    ReadyAPI,\n    WebSocket,\n    WebSocketException,\n    status,\n)\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;label&gt;Item ID: &lt;input type=\"text\" id=\"itemId\" autocomplete=\"off\" value=\"foo\"/&gt;&lt;/label&gt;\n            &lt;label&gt;Token: &lt;input type=\"text\" id=\"token\" autocomplete=\"off\" value=\"some-key-token\"/&gt;&lt;/label&gt;\n            &lt;button onclick=\"connect(event)\"&gt;Connect&lt;/button&gt;\n            &lt;hr&gt;\n            &lt;label&gt;Message: &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;&lt;/label&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n        var ws = null;\n            function connect(event) {\n                var itemId = document.getElementById(\"itemId\")\n                var token = document.getElementById(\"token\")\n                ws = new WebSocket(\"ws://localhost:8000/items/\" + itemId.value + \"/ws?token=\" + token.value);\n                ws.onmessage = function(event) {\n                    var messages = document.getElementById('messages')\n                    var message = document.createElement('li')\n                    var content = document.createTextNode(event.data)\n                    message.appendChild(content)\n                    messages.appendChild(message)\n                };\n                event.preventDefault()\n            }\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\nasync def get_cookie_or_token(\n    websocket: WebSocket,\n    session: Annotated[str | None, Cookie()] = None,\n    token: Annotated[str | None, Query()] = None,\n):\n    if session is None and token is None:\n        raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION)\n    return session or token\n\n\n@app.websocket(\"/items/{item_id}/ws\")\nasync def websocket_endpoint(\n    *,\n    websocket: WebSocket,\n    item_id: str,\n    q: int | None = None,\n    cookie_or_token: Annotated[str, Depends(get_cookie_or_token)],\n):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(\n            f\"Session cookie or query token value is: {cookie_or_token}\"\n        )\n        if q is not None:\n            await websocket.send_text(f\"Query parameter q is: {q}\")\n        await websocket.send_text(f\"Message text was: {data}, for item ID: {item_id}\")\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import (\n    Cookie,\n    Depends,\n    Query,\n    ReadyAPI,\n    WebSocket,\n    WebSocketException,\n    status,\n)\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;label&gt;Item ID: &lt;input type=\"text\" id=\"itemId\" autocomplete=\"off\" value=\"foo\"/&gt;&lt;/label&gt;\n            &lt;label&gt;Token: &lt;input type=\"text\" id=\"token\" autocomplete=\"off\" value=\"some-key-token\"/&gt;&lt;/label&gt;\n            &lt;button onclick=\"connect(event)\"&gt;Connect&lt;/button&gt;\n            &lt;hr&gt;\n            &lt;label&gt;Message: &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;&lt;/label&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n        var ws = null;\n            function connect(event) {\n                var itemId = document.getElementById(\"itemId\")\n                var token = document.getElementById(\"token\")\n                ws = new WebSocket(\"ws://localhost:8000/items/\" + itemId.value + \"/ws?token=\" + token.value);\n                ws.onmessage = function(event) {\n                    var messages = document.getElementById('messages')\n                    var message = document.createElement('li')\n                    var content = document.createTextNode(event.data)\n                    message.appendChild(content)\n                    messages.appendChild(message)\n                };\n                event.preventDefault()\n            }\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\nasync def get_cookie_or_token(\n    websocket: WebSocket,\n    session: Annotated[Union[str, None], Cookie()] = None,\n    token: Annotated[Union[str, None], Query()] = None,\n):\n    if session is None and token is None:\n        raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION)\n    return session or token\n\n\n@app.websocket(\"/items/{item_id}/ws\")\nasync def websocket_endpoint(\n    *,\n    websocket: WebSocket,\n    item_id: str,\n    q: Union[int, None] = None,\n    cookie_or_token: Annotated[str, Depends(get_cookie_or_token)],\n):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(\n            f\"Session cookie or query token value is: {cookie_or_token}\"\n        )\n        if q is not None:\n            await websocket.send_text(f\"Query parameter q is: {q}\")\n        await websocket.send_text(f\"Message text was: {data}, for item ID: {item_id}\")\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import (\n    Cookie,\n    Depends,\n    Query,\n    ReadyAPI,\n    WebSocket,\n    WebSocketException,\n    status,\n)\nfrom readyapi.responses import HTMLResponse\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;label&gt;Item ID: &lt;input type=\"text\" id=\"itemId\" autocomplete=\"off\" value=\"foo\"/&gt;&lt;/label&gt;\n            &lt;label&gt;Token: &lt;input type=\"text\" id=\"token\" autocomplete=\"off\" value=\"some-key-token\"/&gt;&lt;/label&gt;\n            &lt;button onclick=\"connect(event)\"&gt;Connect&lt;/button&gt;\n            &lt;hr&gt;\n            &lt;label&gt;Message: &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;&lt;/label&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n        var ws = null;\n            function connect(event) {\n                var itemId = document.getElementById(\"itemId\")\n                var token = document.getElementById(\"token\")\n                ws = new WebSocket(\"ws://localhost:8000/items/\" + itemId.value + \"/ws?token=\" + token.value);\n                ws.onmessage = function(event) {\n                    var messages = document.getElementById('messages')\n                    var message = document.createElement('li')\n                    var content = document.createTextNode(event.data)\n                    message.appendChild(content)\n                    messages.appendChild(message)\n                };\n                event.preventDefault()\n            }\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\nasync def get_cookie_or_token(\n    websocket: WebSocket,\n    session: Annotated[Union[str, None], Cookie()] = None,\n    token: Annotated[Union[str, None], Query()] = None,\n):\n    if session is None and token is None:\n        raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION)\n    return session or token\n\n\n@app.websocket(\"/items/{item_id}/ws\")\nasync def websocket_endpoint(\n    *,\n    websocket: WebSocket,\n    item_id: str,\n    q: Union[int, None] = None,\n    cookie_or_token: Annotated[str, Depends(get_cookie_or_token)],\n):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(\n            f\"Session cookie or query token value is: {cookie_or_token}\"\n        )\n        if q is not None:\n            await websocket.send_text(f\"Query parameter q is: {q}\")\n        await websocket.send_text(f\"Message text was: {data}, for item ID: {item_id}\")\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import (\n    Cookie,\n    Depends,\n    Query,\n    ReadyAPI,\n    WebSocket,\n    WebSocketException,\n    status,\n)\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;label&gt;Item ID: &lt;input type=\"text\" id=\"itemId\" autocomplete=\"off\" value=\"foo\"/&gt;&lt;/label&gt;\n            &lt;label&gt;Token: &lt;input type=\"text\" id=\"token\" autocomplete=\"off\" value=\"some-key-token\"/&gt;&lt;/label&gt;\n            &lt;button onclick=\"connect(event)\"&gt;Connect&lt;/button&gt;\n            &lt;hr&gt;\n            &lt;label&gt;Message: &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;&lt;/label&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n        var ws = null;\n            function connect(event) {\n                var itemId = document.getElementById(\"itemId\")\n                var token = document.getElementById(\"token\")\n                ws = new WebSocket(\"ws://localhost:8000/items/\" + itemId.value + \"/ws?token=\" + token.value);\n                ws.onmessage = function(event) {\n                    var messages = document.getElementById('messages')\n                    var message = document.createElement('li')\n                    var content = document.createTextNode(event.data)\n                    message.appendChild(content)\n                    messages.appendChild(message)\n                };\n                event.preventDefault()\n            }\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\nasync def get_cookie_or_token(\n    websocket: WebSocket,\n    session: str | None = Cookie(default=None),\n    token: str | None = Query(default=None),\n):\n    if session is None and token is None:\n        raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION)\n    return session or token\n\n\n@app.websocket(\"/items/{item_id}/ws\")\nasync def websocket_endpoint(\n    websocket: WebSocket,\n    item_id: str,\n    q: int | None = None,\n    cookie_or_token: str = Depends(get_cookie_or_token),\n):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(\n            f\"Session cookie or query token value is: {cookie_or_token}\"\n        )\n        if q is not None:\n            await websocket.send_text(f\"Query parameter q is: {q}\")\n        await websocket.send_text(f\"Message text was: {data}, for item ID: {item_id}\")\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import (\n    Cookie,\n    Depends,\n    Query,\n    ReadyAPI,\n    WebSocket,\n    WebSocketException,\n    status,\n)\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;label&gt;Item ID: &lt;input type=\"text\" id=\"itemId\" autocomplete=\"off\" value=\"foo\"/&gt;&lt;/label&gt;\n            &lt;label&gt;Token: &lt;input type=\"text\" id=\"token\" autocomplete=\"off\" value=\"some-key-token\"/&gt;&lt;/label&gt;\n            &lt;button onclick=\"connect(event)\"&gt;Connect&lt;/button&gt;\n            &lt;hr&gt;\n            &lt;label&gt;Message: &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;&lt;/label&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n        var ws = null;\n            function connect(event) {\n                var itemId = document.getElementById(\"itemId\")\n                var token = document.getElementById(\"token\")\n                ws = new WebSocket(\"ws://localhost:8000/items/\" + itemId.value + \"/ws?token=\" + token.value);\n                ws.onmessage = function(event) {\n                    var messages = document.getElementById('messages')\n                    var message = document.createElement('li')\n                    var content = document.createTextNode(event.data)\n                    message.appendChild(content)\n                    messages.appendChild(message)\n                };\n                event.preventDefault()\n            }\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\nasync def get_cookie_or_token(\n    websocket: WebSocket,\n    session: Union[str, None] = Cookie(default=None),\n    token: Union[str, None] = Query(default=None),\n):\n    if session is None and token is None:\n        raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION)\n    return session or token\n\n\n@app.websocket(\"/items/{item_id}/ws\")\nasync def websocket_endpoint(\n    websocket: WebSocket,\n    item_id: str,\n    q: Union[int, None] = None,\n    cookie_or_token: str = Depends(get_cookie_or_token),\n):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(\n            f\"Session cookie or query token value is: {cookie_or_token}\"\n        )\n        if q is not None:\n            await websocket.send_text(f\"Query parameter q is: {q}\")\n        await websocket.send_text(f\"Message text was: {data}, for item ID: {item_id}\")\n</code></pre> <p>Informa\u00e7\u00e3o</p> <p>Como isso \u00e9 um WebSocket, n\u00e3o faz muito sentido levantar uma <code>HTTPException</code>, em vez disso levantamos uma <code>WebSocketException</code>.</p> <p>Voc\u00ea pode usar um c\u00f3digo de fechamento dos c\u00f3digos v\u00e1lidos definidos na especifica\u00e7\u00e3o.</p>"},{"location":"advanced/websockets/#tente-os-websockets-com-dependencias","title":"Tente os WebSockets com depend\u00eancias","text":"<p>Se seu arquivo for nomeado <code>main.py</code>, execute sua aplica\u00e7\u00e3o com:</p> <pre><code>$ readyapi dev main.py\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>Abrar seu browser em: http://127.0.0.1:8000.</p> <p>L\u00e1 voc\u00ea pode definir:</p> <ul> <li>O \"Item ID\", usado na rota.</li> <li>O \"Token\" usado como um par\u00e2metro de consulta.</li> </ul> <p>Dica</p> <p>Perceba que a consulta <code>token</code> ser\u00e1 manipulada por uma depend\u00eancia.</p> <p>Com isso voc\u00ea pode conectar o WebSocket e ent\u00e3o enviar e receber mensagens:</p> <p></p>"},{"location":"advanced/websockets/#lidando-com-desconexoes-e-multiplos-clientes","title":"Lidando com desconex\u00f5es e m\u00faltiplos clientes","text":"<p>Quando uma conex\u00e3o WebSocket \u00e9 fechada, o <code>await websocket.receive_text()</code> levantar\u00e1 uma exce\u00e7\u00e3o <code>WebSocketDisconnect</code>, que voc\u00ea pode ent\u00e3o capturar e lidar como neste exemplo.</p> Python 3.9+ <pre><code>from readyapi import ReadyAPI, WebSocket, WebSocketDisconnect\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;h2&gt;Your ID: &lt;span id=\"ws-id\"&gt;&lt;/span&gt;&lt;/h2&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n            var client_id = Date.now()\n            document.querySelector(\"#ws-id\").textContent = client_id;\n            var ws = new WebSocket(`ws://localhost:8000/ws/${client_id}`);\n            ws.onmessage = function(event) {\n                var messages = document.getElementById('messages')\n                var message = document.createElement('li')\n                var content = document.createTextNode(event.data)\n                message.appendChild(content)\n                messages.appendChild(message)\n            };\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\nclass ConnectionManager:\n    def __init__(self):\n        self.active_connections: list[WebSocket] = []\n\n    async def connect(self, websocket: WebSocket):\n        await websocket.accept()\n        self.active_connections.append(websocket)\n\n    def disconnect(self, websocket: WebSocket):\n        self.active_connections.remove(websocket)\n\n    async def send_personal_message(self, message: str, websocket: WebSocket):\n        await websocket.send_text(message)\n\n    async def broadcast(self, message: str):\n        for connection in self.active_connections:\n            await connection.send_text(message)\n\n\nmanager = ConnectionManager()\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\n@app.websocket(\"/ws/{client_id}\")\nasync def websocket_endpoint(websocket: WebSocket, client_id: int):\n    await manager.connect(websocket)\n    try:\n        while True:\n            data = await websocket.receive_text()\n            await manager.send_personal_message(f\"You wrote: {data}\", websocket)\n            await manager.broadcast(f\"Client #{client_id} says: {data}\")\n    except WebSocketDisconnect:\n        manager.disconnect(websocket)\n        await manager.broadcast(f\"Client #{client_id} left the chat\")\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import List\n\nfrom readyapi import ReadyAPI, WebSocket, WebSocketDisconnect\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;h2&gt;Your ID: &lt;span id=\"ws-id\"&gt;&lt;/span&gt;&lt;/h2&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n            var client_id = Date.now()\n            document.querySelector(\"#ws-id\").textContent = client_id;\n            var ws = new WebSocket(`ws://localhost:8000/ws/${client_id}`);\n            ws.onmessage = function(event) {\n                var messages = document.getElementById('messages')\n                var message = document.createElement('li')\n                var content = document.createTextNode(event.data)\n                message.appendChild(content)\n                messages.appendChild(message)\n            };\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\nclass ConnectionManager:\n    def __init__(self):\n        self.active_connections: List[WebSocket] = []\n\n    async def connect(self, websocket: WebSocket):\n        await websocket.accept()\n        self.active_connections.append(websocket)\n\n    def disconnect(self, websocket: WebSocket):\n        self.active_connections.remove(websocket)\n\n    async def send_personal_message(self, message: str, websocket: WebSocket):\n        await websocket.send_text(message)\n\n    async def broadcast(self, message: str):\n        for connection in self.active_connections:\n            await connection.send_text(message)\n\n\nmanager = ConnectionManager()\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\n@app.websocket(\"/ws/{client_id}\")\nasync def websocket_endpoint(websocket: WebSocket, client_id: int):\n    await manager.connect(websocket)\n    try:\n        while True:\n            data = await websocket.receive_text()\n            await manager.send_personal_message(f\"You wrote: {data}\", websocket)\n            await manager.broadcast(f\"Client #{client_id} says: {data}\")\n    except WebSocketDisconnect:\n        manager.disconnect(websocket)\n        await manager.broadcast(f\"Client #{client_id} left the chat\")\n</code></pre> <p>Para testar:</p> <ul> <li>Abrar o aplicativo com v\u00e1rias abas do navegador.</li> <li>Escreva mensagens a partir delas.</li> <li>Ent\u00e3o feche uma das abas.</li> </ul> <p>Isso levantar\u00e1 a exce\u00e7\u00e3o <code>WebSocketDisconnect</code>, e todos os outros clientes receber\u00e3o uma mensagem como:</p> <pre><code>Client #1596980209979 left the chat\n</code></pre> <p>Dica</p> <p>O app acima \u00e9 um exemplo m\u00ednimo e simples para demonstrar como lidar e transmitir mensagens para v\u00e1rias conex\u00f5es WebSocket.</p> <p>Mas tenha em mente que, como tudo \u00e9 manipulado na mem\u00f3ria, em uma \u00fanica lista, ele s\u00f3 funcionar\u00e1 enquanto o processo estiver em execu\u00e7\u00e3o e s\u00f3 funcionar\u00e1 com um \u00fanico processo.</p> <p>Se voc\u00ea precisa de algo f\u00e1cil de integrar com o ReadyAPI, mas que seja mais robusto, suportado por Redis, PostgreSQL ou outros, verifique o encode/broadcaster.</p>"},{"location":"advanced/websockets/#mais-informacoes","title":"Mais informa\u00e7\u00f5es","text":"<p>Para aprender mais sobre as op\u00e7\u00f5es, verifique a documenta\u00e7\u00e3o do Starlette para:</p> <ul> <li>A classe <code>WebSocket</code>.</li> <li>Manipula\u00e7\u00e3o de WebSockets baseada em classes.</li> </ul>"},{"location":"advanced/wsgi/","title":"Adicionando WSGI - Flask, Django, entre outros","text":"<p>Como voc\u00ea viu em Sub Applications - Mounts e Behind a Proxy, voc\u00ea pode \"montar\" aplica\u00e7\u00f5es WSGI.</p> <p>Para isso, voc\u00ea pode utilizar o <code>WSGIMiddleware</code> para encapsular a sua aplica\u00e7\u00e3o WSGI, como por exemplo Flask, Django, etc.</p>"},{"location":"advanced/wsgi/#usando-o-wsgimiddleware","title":"Usando o <code>WSGIMiddleware</code>","text":"<p>Voc\u00ea precisa importar o <code>WSGIMiddleware</code>.</p> <p>Em seguinda, encapsular a aplica\u00e7\u00e3o WSGI (e.g. Flask) com o middleware.</p> <p>E ent\u00e3o \"montar\" em um caminho de rota.</p> Python 3.8+ <pre><code>from flask import Flask, request\nfrom markupsafe import escape\nfrom readyapi import ReadyAPI\nfrom readyapi.middleware.wsgi import WSGIMiddleware\n\nflask_app = Flask(__name__)\n\n\n@flask_app.route(\"/\")\ndef flask_main():\n    name = request.args.get(\"name\", \"World\")\n    return f\"Hello, {escape(name)} from Flask!\"\n\n\napp = ReadyAPI()\n\n\n@app.get(\"/v2\")\ndef read_main():\n    return {\"message\": \"Hello World\"}\n\n\napp.mount(\"/v1\", WSGIMiddleware(flask_app))\n</code></pre>"},{"location":"advanced/wsgi/#conferindo","title":"Conferindo","text":"<p>Agora todas as requisi\u00e7\u00f5es sob o caminho <code>/v1/</code> ser\u00e3o manipuladas pela aplica\u00e7\u00e3o utilizando Flask.</p> <p>E o resto ser\u00e1 manipulado pelo ReadyAPI.</p> <p>Se voc\u00ea rodar a aplica\u00e7\u00e3o e ir at\u00e9 http://localhost:8000/v1/, voc\u00ea ver\u00e1 o retorno do Flask:</p> <pre><code>Hello, World from Flask!\n</code></pre> <p>E se voc\u00ea for at\u00e9 http://localhost:8000/v2, voc\u00ea ver\u00e1 o retorno do ReadyAPI:</p> <pre><code>{\n    \"message\": \"Hello World\"\n}\n</code></pre>"},{"location":"advanced/security/","title":"Seguran\u00e7a Avan\u00e7ada","text":""},{"location":"advanced/security/#funcionalidades-adicionais","title":"Funcionalidades Adicionais","text":"<p>Existem algumas funcionalidades adicionais para lidar com seguran\u00e7a al\u00e9m das cobertas em Tutorial - Guia de Usu\u00e1rio: Seguran\u00e7a.</p> <p>Dica</p> <p>As pr\u00f3ximas se\u00e7\u00f5es n\u00e3o s\u00e3o necessariamente \"avan\u00e7adas\".</p> <p>E \u00e9 poss\u00edvel que para o seu caso de uso, a solu\u00e7\u00e3o est\u00e1 em uma delas.</p>"},{"location":"advanced/security/#leia-o-tutorial-primeiro","title":"Leia o Tutorial primeiro","text":"<p>As pr\u00f3ximas se\u00e7\u00f5es pressup\u00f5em que voc\u00ea j\u00e1 leu o principal Tutorial - Guia de Usu\u00e1rio: Seguran\u00e7a.</p> <p>Todas elas s\u00e3o baseadas nos mesmos conceitos, mas permitem algumas funcionalidades extras.</p>"},{"location":"advanced/security/http-basic-auth/","title":"HTTP Basic Auth","text":"<p>Para os casos mais simples, voc\u00ea pode utilizar o HTTP Basic Auth.</p> <p>No HTTP Basic Auth, a aplica\u00e7\u00e3o espera um cabe\u00e7alho que cont\u00e9m um usu\u00e1rio e uma senha.</p> <p>Caso ela n\u00e3o receba, ela retorna um erro HTTP 401 \"Unauthorized\" (N\u00e3o Autorizado).</p> <p>E retorna um cabe\u00e7alho <code>WWW-Authenticate</code> com o valor <code>Basic</code>, e um par\u00e2metro opcional <code>realm</code>.</p> <p>Isso sinaliza ao navegador para mostrar o prompt integrado para um usu\u00e1rio e senha.</p> <p>Ent\u00e3o, quando voc\u00ea digitar o usu\u00e1rio e senha, o navegador os envia automaticamente no cabe\u00e7alho.</p>"},{"location":"advanced/security/http-basic-auth/#http-basic-auth-simples","title":"HTTP Basic Auth Simples","text":"<ul> <li>Importe <code>HTTPBasic</code> e <code>HTTPBasicCredentials</code>.</li> <li>Crie um \"esquema <code>security</code>\" utilizando <code>HTTPBasic</code>.</li> <li>Utilize o <code>security</code> com uma depend\u00eancia em sua opera\u00e7\u00e3o de rota.</li> <li>Isso retorna um objeto do tipo <code>HTTPBasicCredentials</code>:<ul> <li>Isto cont\u00e9m o <code>username</code> e o <code>password</code> enviado.</li> </ul> </li> </ul> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\n@app.get(\"/users/me\")\ndef read_current_user(credentials: Annotated[HTTPBasicCredentials, Depends(security)]):\n    return {\"username\": credentials.username, \"password\": credentials.password}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\n@app.get(\"/users/me\")\ndef read_current_user(credentials: Annotated[HTTPBasicCredentials, Depends(security)]):\n    return {\"username\": credentials.username, \"password\": credentials.password}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\n@app.get(\"/users/me\")\ndef read_current_user(credentials: HTTPBasicCredentials = Depends(security)):\n    return {\"username\": credentials.username, \"password\": credentials.password}\n</code></pre> <p>Quando voc\u00ea tentar abrir a URL pela primeira vez (ou clicar no bot\u00e3o \"Executar\" nos documentos) o navegador vai pedir pelo seu usu\u00e1rio e senha:</p> <p></p>"},{"location":"advanced/security/http-basic-auth/#verifique-o-usuario","title":"Verifique o usu\u00e1rio","text":"<p>Aqui est\u00e1 um exemplo mais completo.</p> <p>Utilize uma depend\u00eancia para verificar se o usu\u00e1rio e a senha est\u00e3o corretos.</p> <p>Para isso, utilize o m\u00f3dulo padr\u00e3o do Python <code>secrets</code> para verificar o usu\u00e1rio e senha.</p> <p>O <code>secrets.compare_digest()</code> necessita receber <code>bytes</code> ou <code>str</code> que possuem apenas caracteres ASCII (os em ingl\u00eas). Isso significa que n\u00e3o funcionaria com caracteres como o <code>\u00e1</code>, como em <code>KhulnaSoft</code>.</p> <p>Para lidar com isso, primeiramente n\u00f3s convertemos o <code>username</code> e o <code>password</code> para <code>bytes</code>, codificando-os com UTF-8.</p> <p>Ent\u00e3o n\u00f3s podemos utilizar o <code>secrets.compare_digest()</code> para garantir que o <code>credentials.username</code> \u00e9 <code>\"stanleyjobson\"</code>, e que o <code>credentials.password</code> \u00e9 <code>\"swordfish\"</code>.</p> Python 3.9+ <pre><code>import secrets\nfrom typing import Annotated\n\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\ndef get_current_username(\n    credentials: Annotated[HTTPBasicCredentials, Depends(security)],\n):\n    current_username_bytes = credentials.username.encode(\"utf8\")\n    correct_username_bytes = b\"stanleyjobson\"\n    is_correct_username = secrets.compare_digest(\n        current_username_bytes, correct_username_bytes\n    )\n    current_password_bytes = credentials.password.encode(\"utf8\")\n    correct_password_bytes = b\"swordfish\"\n    is_correct_password = secrets.compare_digest(\n        current_password_bytes, correct_password_bytes\n    )\n    if not (is_correct_username and is_correct_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Basic\"},\n        )\n    return credentials.username\n\n\n@app.get(\"/users/me\")\ndef read_current_user(username: Annotated[str, Depends(get_current_username)]):\n    return {\"username\": username}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>import secrets\n\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\ndef get_current_username(\n    credentials: Annotated[HTTPBasicCredentials, Depends(security)],\n):\n    current_username_bytes = credentials.username.encode(\"utf8\")\n    correct_username_bytes = b\"stanleyjobson\"\n    is_correct_username = secrets.compare_digest(\n        current_username_bytes, correct_username_bytes\n    )\n    current_password_bytes = credentials.password.encode(\"utf8\")\n    correct_password_bytes = b\"swordfish\"\n    is_correct_password = secrets.compare_digest(\n        current_password_bytes, correct_password_bytes\n    )\n    if not (is_correct_username and is_correct_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Basic\"},\n        )\n    return credentials.username\n\n\n@app.get(\"/users/me\")\ndef read_current_user(username: Annotated[str, Depends(get_current_username)]):\n    return {\"username\": username}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import secrets\n\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\ndef get_current_username(credentials: HTTPBasicCredentials = Depends(security)):\n    current_username_bytes = credentials.username.encode(\"utf8\")\n    correct_username_bytes = b\"stanleyjobson\"\n    is_correct_username = secrets.compare_digest(\n        current_username_bytes, correct_username_bytes\n    )\n    current_password_bytes = credentials.password.encode(\"utf8\")\n    correct_password_bytes = b\"swordfish\"\n    is_correct_password = secrets.compare_digest(\n        current_password_bytes, correct_password_bytes\n    )\n    if not (is_correct_username and is_correct_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Basic\"},\n        )\n    return credentials.username\n\n\n@app.get(\"/users/me\")\ndef read_current_user(username: str = Depends(get_current_username)):\n    return {\"username\": username}\n</code></pre> <p>Isso seria parecido com:</p> <pre><code>if not (credentials.username == \"stanleyjobson\") or not (credentials.password == \"swordfish\"):\n    # Return some error\n    ...\n</code></pre> <p>Por\u00e9m, ao utilizar o <code>secrets.compare_digest()</code>, isso estar\u00e1 seguro contra um tipo de ataque chamado \"timing attacks\" (ataques de temporiza\u00e7\u00e3o).</p>"},{"location":"advanced/security/http-basic-auth/#ataques-de-temporizacao","title":"Ataques de Temporiza\u00e7\u00e3o","text":"<p>Mas o que \u00e9 um \"timing attack\" (ataque de temporiza\u00e7\u00e3o)?</p> <p>Vamos imaginar que alguns invasores est\u00e3o tentando adivinhar o usu\u00e1rio e a senha.</p> <p>E eles enviam uma requisi\u00e7\u00e3o com um usu\u00e1rio <code>johndoe</code> e uma senha <code>love123</code>.</p> <p>Ent\u00e3o o c\u00f3digo Python em sua aplica\u00e7\u00e3o seria equivalente a algo como:</p> <pre><code>if \"johndoe\" == \"stanleyjobson\" and \"love123\" == \"swordfish\":\n    ...\n</code></pre> <p>Mas no exato momento que o Python compara o primeiro <code>j</code> em <code>johndoe</code> contra o primeiro <code>s</code> em <code>stanleyjobson</code>, ele retornar\u00e1 <code>False</code>, porque ele j\u00e1 sabe que aquelas duas strings n\u00e3o s\u00e3o a mesma, pensando que \"n\u00e3o existe a necessidade de desperdi\u00e7ar mais poder computacional comparando o resto das letras\". E a sua aplica\u00e7\u00e3o dir\u00e1 \"Usu\u00e1rio ou senha incorretos\".</p> <p>Ent\u00e3o os invasores v\u00e3o tentar com o usu\u00e1rio <code>stanleyjobsox</code> e a senha <code>love123</code>.</p> <p>E a sua aplica\u00e7\u00e3o faz algo como:</p> <pre><code>if \"stanleyjobsox\" == \"stanleyjobson\" and \"love123\" == \"swordfish\":\n    ...\n</code></pre> <p>O Python ter\u00e1 que comparar todo o <code>stanleyjobso</code> tanto em <code>stanleyjobsox</code> como em <code>stanleyjobson</code> antes de perceber que as strings n\u00e3o s\u00e3o a mesma. Ent\u00e3o isso levar\u00e1 alguns microssegundos a mais para retornar \"Usu\u00e1rio ou senha incorretos\".</p>"},{"location":"advanced/security/http-basic-auth/#o-tempo-para-responder-ajuda-os-invasores","title":"O tempo para responder ajuda os invasores","text":"<p>Neste ponto, ao perceber que o servidor demorou alguns microssegundos a mais para enviar o retorno \"Usu\u00e1rio ou senha incorretos\", os invasores ir\u00e3o saber que eles acertaram alguma coisa, algumas das letras iniciais estavam certas.</p> <p>E eles podem tentar de novo sabendo que provavelmente \u00e9 algo mais parecido com <code>stanleyjobsox</code> do que com <code>johndoe</code>.</p>"},{"location":"advanced/security/http-basic-auth/#um-ataque-profissional","title":"Um ataque \"profissional\"","text":"<p>Claro, os invasores n\u00e3o tentariam tudo isso de forma manual, eles escreveriam um programa para fazer isso, possivelmente com milhares ou milh\u00f5es de testes por segundo. E obteriam apenas uma letra a mais por vez.</p> <p>Mas fazendo isso, em alguns minutos ou horas os invasores teriam adivinhado o usu\u00e1rio e senha corretos, com a \"ajuda\" da nossa aplica\u00e7\u00e3o, apenas usando o tempo levado para responder.</p>"},{"location":"advanced/security/http-basic-auth/#corrija-com-o-secretscompare_digest","title":"Corrija com o <code>secrets.compare_digest()</code>","text":"<p>Mas em nosso c\u00f3digo j\u00e1 estamos utilizando o <code>secrets.compare_digest()</code>.</p> <p>Resumindo, levar\u00e1 o mesmo tempo para comparar <code>stanleyjobsox</code> com <code>stanleyjobson</code> do que comparar <code>johndoe</code> com <code>stanleyjobson</code>. E o mesmo para a senha.</p> <p>Deste modo, ao utilizar <code>secrets.compare_digest()</code> no c\u00f3digo de sua aplica\u00e7\u00e3o, ela estar\u00e1 a salvo contra toda essa gama de ataques de seguran\u00e7a.</p>"},{"location":"advanced/security/http-basic-auth/#retorne-o-erro","title":"Retorne o erro","text":"<p>Ap\u00f3s detectar que as credenciais est\u00e3o incorretas, retorne um <code>HTTPException</code> com o status 401 (o mesmo retornado quando nenhuma credencial foi informada) e adicione o cabe\u00e7alho <code>WWW-Authenticate</code> para fazer com que o navegador mostre o prompt de login novamente:</p> Python 3.9+ <pre><code>import secrets\nfrom typing import Annotated\n\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\ndef get_current_username(\n    credentials: Annotated[HTTPBasicCredentials, Depends(security)],\n):\n    current_username_bytes = credentials.username.encode(\"utf8\")\n    correct_username_bytes = b\"stanleyjobson\"\n    is_correct_username = secrets.compare_digest(\n        current_username_bytes, correct_username_bytes\n    )\n    current_password_bytes = credentials.password.encode(\"utf8\")\n    correct_password_bytes = b\"swordfish\"\n    is_correct_password = secrets.compare_digest(\n        current_password_bytes, correct_password_bytes\n    )\n    if not (is_correct_username and is_correct_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Basic\"},\n        )\n    return credentials.username\n\n\n@app.get(\"/users/me\")\ndef read_current_user(username: Annotated[str, Depends(get_current_username)]):\n    return {\"username\": username}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>import secrets\n\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\ndef get_current_username(\n    credentials: Annotated[HTTPBasicCredentials, Depends(security)],\n):\n    current_username_bytes = credentials.username.encode(\"utf8\")\n    correct_username_bytes = b\"stanleyjobson\"\n    is_correct_username = secrets.compare_digest(\n        current_username_bytes, correct_username_bytes\n    )\n    current_password_bytes = credentials.password.encode(\"utf8\")\n    correct_password_bytes = b\"swordfish\"\n    is_correct_password = secrets.compare_digest(\n        current_password_bytes, correct_password_bytes\n    )\n    if not (is_correct_username and is_correct_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Basic\"},\n        )\n    return credentials.username\n\n\n@app.get(\"/users/me\")\ndef read_current_user(username: Annotated[str, Depends(get_current_username)]):\n    return {\"username\": username}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>import secrets\n\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\ndef get_current_username(credentials: HTTPBasicCredentials = Depends(security)):\n    current_username_bytes = credentials.username.encode(\"utf8\")\n    correct_username_bytes = b\"stanleyjobson\"\n    is_correct_username = secrets.compare_digest(\n        current_username_bytes, correct_username_bytes\n    )\n    current_password_bytes = credentials.password.encode(\"utf8\")\n    correct_password_bytes = b\"swordfish\"\n    is_correct_password = secrets.compare_digest(\n        current_password_bytes, correct_password_bytes\n    )\n    if not (is_correct_username and is_correct_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Basic\"},\n        )\n    return credentials.username\n\n\n@app.get(\"/users/me\")\ndef read_current_user(username: str = Depends(get_current_username)):\n    return {\"username\": username}\n</code></pre>"},{"location":"advanced/security/oauth2-scopes/","title":"Escopos OAuth2","text":"<p>Voc\u00ea pode utilizar escopos do OAuth2 diretamente com o ReadyAPI, eles s\u00e3o integrados para funcionar perfeitamente.</p> <p>Isso permitiria que voc\u00ea tivesse um sistema de permissionamento mais refinado, seguindo o padr\u00e3o do OAuth2 integrado na sua aplica\u00e7\u00e3o OpenAPI (e as documenta\u00e7\u00f5es da API).</p> <p>OAuth2 com escopos \u00e9 o mecanismo utilizado por muitos provedores de autentica\u00e7\u00e3o, como o Facebook, Google, GitHub, Microsoft, Twitter, etc. Eles utilizam isso para prover permiss\u00f5es espec\u00edficas para os usu\u00e1rios e aplica\u00e7\u00f5es.</p> <p>Toda vez que voc\u00ea \"se autentica com\" Facebook, Google, GitHub, Microsoft, Twitter, aquela aplica\u00e7\u00e3o est\u00e1 utilizando o OAuth2 com escopos.</p> <p>Nesta se\u00e7\u00e3o, voc\u00ea ver\u00e1 como gerenciar a autentica\u00e7\u00e3o e autoriza\u00e7\u00e3o com os mesmos escopos do OAuth2 em sua aplica\u00e7\u00e3o ReadyAPI.</p> <p>Aviso</p> <p>Isso \u00e9 uma se\u00e7\u00e3o mais ou menos avan\u00e7ada. Se voc\u00ea est\u00e1 apenas come\u00e7ando, voc\u00ea pode pular.</p> <p>Voc\u00ea n\u00e3o necessariamente precisa de escopos do OAuth2, e voc\u00ea pode lidar com autentica\u00e7\u00e3o e autoriza\u00e7\u00e3o da maneira que voc\u00ea achar melhor.</p> <p>Mas o OAuth2 com escopos pode ser integrado de maneira f\u00e1cil em sua API (com OpenAPI) e a sua documenta\u00e7\u00e3o de API.</p> <p>No entando, voc\u00ea ainda aplica estes escopos, ou qualquer outro requisito de seguran\u00e7a/autoriza\u00e7\u00e3o, conforme necess\u00e1rio, em seu c\u00f3digo.</p> <p>Em muitos casos, OAuth2 com escopos pode ser um exagero.</p> <p>Mas se voc\u00ea sabe que precisa, ou est\u00e1 curioso, continue lendo.</p>"},{"location":"advanced/security/oauth2-scopes/#escopos-oauth2-e-openapi","title":"Escopos OAuth2 e OpenAPI","text":"<p>A especifica\u00e7\u00e3o OAuth2 define \"escopos\" como uma lista de strings separadas por espa\u00e7os.</p> <p>O conte\u00fado de cada uma dessas strings pode ter qualquer formato, mas n\u00e3o devem possuir espa\u00e7os.</p> <p>Estes escopos representam \"permiss\u00f5es\".</p> <p>No OpenAPI (e.g. os documentos da API), voc\u00ea pode definir \"esquemas de seguran\u00e7a\".</p> <p>Quando um desses esquemas de seguran\u00e7a utiliza OAuth2, voc\u00ea pode tamb\u00e9m declarar e utilizar escopos.</p> <p>Cada \"escopo\" \u00e9 apenas uma string (sem espa\u00e7os).</p> <p>Eles s\u00e3o normalmente utilizados para declarar permiss\u00f5es de seguran\u00e7a espec\u00edficas, como por exemplo:</p> <ul> <li><code>users:read</code> or <code>users:write</code> s\u00e3o exemplos comuns.</li> <li><code>instagram_basic</code> \u00e9 utilizado pelo Facebook / Instagram.</li> <li><code>https://www.googleapis.com/auth/drive</code> \u00e9 utilizado pelo Google.</li> </ul> <p>Informa\u00e7\u00e3o</p> <p>No OAuth2, um \"escopo\" \u00e9 apenas uma string que declara uma permiss\u00e3o espec\u00edfica necess\u00e1ria.</p> <p>N\u00e3o importa se ela cont\u00e9m outros caracteres como <code>:</code> ou se ela \u00e9 uma URL.</p> <p>Estes detalhes s\u00e3o espec\u00edficos da implementa\u00e7\u00e3o.</p> <p>Para o OAuth2, eles s\u00e3o apenas strings.</p>"},{"location":"advanced/security/oauth2-scopes/#visao-global","title":"Vis\u00e3o global","text":"<p>Primeiro, vamos olhar rapidamente as partes que mudam dos exemplos do Tutorial - Guia de Usu\u00e1rio para OAuth2 com Senha (e hash), Bearer com tokens JWT. Agora utilizando escopos OAuth2:</p> Python 3.10+ <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Agora vamos revisar essas mudan\u00e7as passo a passo.</p>"},{"location":"advanced/security/oauth2-scopes/#esquema-de-seguranca-oauth2","title":"Esquema de seguran\u00e7a OAuth2","text":"<p>A primeira mudan\u00e7a \u00e9 que agora n\u00f3s estamos declarando o esquema de seguran\u00e7a OAuth2 com dois escopos dispon\u00edveis, <code>me</code> e <code>items</code>.</p> <p>O par\u00e2metro <code>scopes</code> recebe um <code>dict</code> contendo cada escopo como chave e a descri\u00e7\u00e3o como valor:</p> Python 3.10+ <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Pelo motivo de estarmos declarando estes escopos, eles aparecer\u00e3o nos documentos da API quando voc\u00ea se autenticar/autorizar.</p> <p>E voc\u00ea poder\u00e1 selecionar quais escopos voc\u00ea deseja dar acesso: <code>me</code> e <code>items</code>.</p> <p>Este \u00e9 o mesmo mecanismo utilizado quando voc\u00ea adiciona permiss\u00f5es enquanto se autentica com o Facebook, Google, GitHub, etc:</p> <p></p>"},{"location":"advanced/security/oauth2-scopes/#token-jwt-com-escopos","title":"Token JWT com escopos","text":"<p>Agora, modifique o caminho de rota para retornar os escopos solicitados.</p> <p>N\u00f3s ainda estamos utilizando o mesmo <code>OAuth2PasswordRequestForm</code>. Ele inclui a propriedade <code>scopes</code> com uma <code>list</code> de <code>str</code>, com cada escopo que ele recebeu na requisi\u00e7\u00e3o.</p> <p>E n\u00f3s retornamos os escopos como parte do token JWT.</p> <p>Cuidado</p> <p>Para manter as coisas simples, aqui n\u00f3s estamos apenas adicionando os escopos recebidos diretamente ao token.</p> <p>Por\u00e9m em sua aplica\u00e7\u00e3o, por seguran\u00e7a, voc\u00ea deve garantir que voc\u00ea apenas adiciona os escopos que o usu\u00e1rio possui permiss\u00e3o de fato, ou aqueles que voc\u00ea predefiniu.</p> Python 3.10+ <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre>"},{"location":"advanced/security/oauth2-scopes/#declare-escopos-em-operacoes-de-rota-e-dependencias","title":"Declare escopos em opera\u00e7\u00f5es de rota e depend\u00eancias","text":"<p>Agora n\u00f3s declaramos que a opera\u00e7\u00e3o de rota para <code>/users/me/items/</code> exige o escopo <code>items</code>.</p> <p>Para isso, n\u00f3s importamos e utilizamos <code>Security</code> de <code>readyapi</code>.</p> <p>Voc\u00ea pode utilizar <code>Security</code> para declarar depend\u00eancias (assim como <code>Depends</code>), por\u00e9m o <code>Security</code> tamb\u00e9m recebe o par\u00e2metros <code>scopes</code> com uma lista de escopos (strings).</p> <p>Neste caso, n\u00f3s passamos a fun\u00e7\u00e3o <code>get_current_active_user</code> como depend\u00eancia para <code>Security</code> (da mesma forma que n\u00f3s far\u00edamos com <code>Depends</code>).</p> <p>Mas n\u00f3s tamb\u00e9m passamos uma <code>list</code> de escopos, neste caso com apenas um escopo: <code>items</code> (poderia ter mais).</p> <p>E a fun\u00e7\u00e3o de depend\u00eancia <code>get_current_active_user</code> tamb\u00e9m pode declarar subdepend\u00eancias, n\u00e3o apenas com <code>Depends</code>, mas tamb\u00e9m com <code>Security</code>. Ao declarar sua pr\u00f3pria fun\u00e7\u00e3o de subdepend\u00eancia (<code>get_current_user</code>), e mais requisitos de escopo.</p> <p>Neste caso, ele requer o escopo <code>me</code> (poderia requerer mais de um escopo).</p> <p>Nota</p> <p>Voc\u00ea n\u00e3o necessariamente precisa adicionar diferentes escopos em diferentes lugares.</p> <p>N\u00f3s estamos fazendo isso aqui para demonstrar como o ReadyAPI lida com escopos declarados em diferentes n\u00edveis.</p> Python 3.10+ <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Informa\u00e7\u00f5es T\u00e9cnicas</p> <p><code>Security</code> \u00e9 na verdade uma subclasse de <code>Depends</code>, e ele possui apenas um par\u00e2metro extra que veremos depois.</p> <p>Por\u00e9m ao utilizar <code>Security</code> no lugar de <code>Depends</code>, o ReadyAPI saber\u00e1 que ele pode declarar escopos de seguran\u00e7a, utiliz\u00e1-los internamente, e documentar a API com o OpenAPI.</p> <p>Mas quando voc\u00ea importa <code>Query</code>, <code>Path</code>, <code>Depends</code>, <code>Security</code> entre outros de <code>readyapi</code>, eles s\u00e3o na verdade fun\u00e7\u00f5es que retornam classes especiais.</p>"},{"location":"advanced/security/oauth2-scopes/#utilize-securityscopes","title":"Utilize <code>SecurityScopes</code>","text":"<p>Agora atualize a depend\u00eancia <code>get_current_user</code>.</p> <p>Este \u00e9 o usado pelas depend\u00eancias acima.</p> <p>Aqui \u00e9 onde estamos utilizando o mesmo esquema OAuth2 que n\u00f3s declaramos antes, declarando-o como uma depend\u00eancia: <code>oauth2_scheme</code>.</p> <p>Porque esta fun\u00e7\u00e3o de depend\u00eancia n\u00e3o possui nenhum requerimento de escopo, n\u00f3s podemos utilizar <code>Depends</code> com o <code>oauth2_scheme</code>. N\u00f3s n\u00e3o precisamos utilizar <code>Security</code> quando n\u00f3s n\u00e3o precisamos especificar escopos de seguran\u00e7a.</p> <p>N\u00f3s tamb\u00e9m declaramos um par\u00e2metro especial do tipo <code>SecurityScopes</code>, importado de <code>readyapi.security</code>.</p> <p>A classe <code>SecurityScopes</code> \u00e9 semelhante \u00e0 classe <code>Request</code> (<code>Request</code> foi utilizada para obter o objeto da requisi\u00e7\u00e3o diretamente).</p> Python 3.10+ <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre>"},{"location":"advanced/security/oauth2-scopes/#utilize-os-scopes","title":"Utilize os <code>scopes</code>","text":"<p>O par\u00e2metro <code>security_scopes</code> ser\u00e1 do tipo <code>SecurityScopes</code>.</p> <p>Ele ter\u00e1 a propriedade <code>scopes</code> com uma lista contendo todos os escopos requeridos por ele e todas as depend\u00eancias que utilizam ele como uma subdepend\u00eancia. Isso significa, todos  os \"dependentes\"... pode soar meio confuso, e isso ser\u00e1 explicado novamente mais adiante.</p> <p>O objeto <code>security_scopes</code> (da classe <code>SecurityScopes</code>) tamb\u00e9m oferece um atributo <code>scope_str</code> com uma \u00fanica string, contendo os escopos separados por espa\u00e7os (n\u00f3s vamos utilizar isso).</p> <p>N\u00f3s criamos uma <code>HTTPException</code> que n\u00f3s podemos reutilizar (<code>raise</code>) mais tarde em diversos lugares.</p> <p>Nesta exce\u00e7\u00e3o, n\u00f3s inclu\u00edmos os escopos necess\u00e1rios (se houver algum) como uma string separada por espa\u00e7os (utilizando <code>scope_str</code>). N\u00f3s colocamos esta string contendo os escopos no cabe\u00e7alho <code>WWW-Authenticate</code> (isso \u00e9 parte da especifica\u00e7\u00e3o).</p> Python 3.10+ <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre>"},{"location":"advanced/security/oauth2-scopes/#verifique-o-username-e-o-formato-dos-dados","title":"Verifique o <code>username</code> e o formato dos dados","text":"<p>N\u00f3s verificamos que n\u00f3s obtemos um <code>username</code>, e extra\u00edmos os escopos.</p> <p>E depois n\u00f3s validamos esse dado com o modelo Pydantic (capturando a exce\u00e7\u00e3o <code>ValidationError</code>), e se n\u00f3s obtemos um erro ao ler o token JWT ou validando os dados com o Pydantic, n\u00f3s levantamos a exce\u00e7\u00e3o <code>HTTPException</code> que criamos anteriormente.</p> <p>Para isso, n\u00f3s atualizamos o modelo Pydantic <code>TokenData</code> com a nova propriedade <code>scopes</code>.</p> <p>Ao validar os dados com o Pydantic n\u00f3s podemos garantir que temos, por exemplo, exatamente uma <code>list</code> de <code>str</code> com os escopos e uma <code>str</code> com o <code>username</code>.</p> <p>No lugar de, por exemplo, um <code>dict</code>, ou alguma outra coisa, que poderia quebrar a aplica\u00e7\u00e3o em algum lugar mais tarde, tornando isso um risco de seguran\u00e7a.</p> <p>N\u00f3s tamb\u00e9m verificamos que n\u00f3s temos um usu\u00e1rio com o \"username\", e caso contr\u00e1rio, n\u00f3s levantamos a mesma exce\u00e7\u00e3o que criamos anteriormente.</p> Python 3.10+ <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre>"},{"location":"advanced/security/oauth2-scopes/#verifique-os-scopes","title":"Verifique os <code>scopes</code>","text":"<p>N\u00f3s verificamos agora que todos os escopos necess\u00e1rios, por essa depend\u00eancia e todos os dependentes (incluindo as opera\u00e7\u00f5es de rota) est\u00e3o inclu\u00eddas nos escopos fornecidos pelo token recebido, caso contr\u00e1rio, levantamos uma <code>HTTPException</code>.</p> <p>Para isso, n\u00f3s utilizamos <code>security_scopes.scopes</code>, que cont\u00e9m uma <code>list</code> com todos esses escopos como uma <code>str</code>.</p> Python 3.10+ <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre>"},{"location":"advanced/security/oauth2-scopes/#arvore-de-dependencia-e-escopos","title":"\u00c1rvore de depend\u00eancia e escopos","text":"<p>Vamos rever novamente essa \u00e1rvore de depend\u00eancia e os escopos.</p> <p>Como a depend\u00eancia <code>get_current_active_user</code> possui uma subdepend\u00eancia em <code>get_current_user</code>, o escopo <code>\"me\"</code> declarado em <code>get_current_active_user</code> ser\u00e1 inclu\u00eddo na lista de escopos necess\u00e1rios em <code>security_scopes.scopes</code> passado para <code>get_current_user</code>.</p> <p>A pr\u00f3pria opera\u00e7\u00e3o de rota tamb\u00e9m declara o escopo, <code>\"items\"</code>, ent\u00e3o ele tamb\u00e9m estar\u00e1 na lista de <code>security_scopes.scopes</code> passado para o <code>get_current_user</code>.</p> <p>Aqui est\u00e1 como a hierarquia de depend\u00eancias e escopos parecem:</p> <ul> <li>A opera\u00e7\u00e3o de rota <code>read_own_items</code> possui:<ul> <li>Escopos necess\u00e1rios <code>[\"items\"]</code> com a depend\u00eancia:</li> <li><code>get_current_active_user</code>:<ul> <li>A fun\u00e7\u00e3o de depend\u00eancia <code>get_current_active_user</code> possui:<ul> <li>Escopos necess\u00e1rios <code>[\"me\"]</code> com a depend\u00eancia:</li> <li><code>get_current_user</code>:<ul> <li>A fun\u00e7\u00e3o de depend\u00eancia <code>get_current_user</code> possui:<ul> <li>Nenhum escopo necess\u00e1rio.</li> <li>Uma depend\u00eancia utilizando <code>oauth2_scheme</code>.</li> <li>Um par\u00e2metro <code>security_scopes</code> do tipo <code>SecurityScopes</code>:<ul> <li>Este par\u00e2metro <code>security_scopes</code> possui uma propriedade <code>scopes</code> com uma <code>list</code> contendo todos estes escopos declarados acima, ent\u00e3o:<ul> <li><code>security_scopes.scopes</code> ter\u00e1 <code>[\"me\", \"items\"]</code> para a opera\u00e7\u00e3o de rota <code>read_own_items</code>.</li> <li><code>security_scopes.scopes</code> ter\u00e1 <code>[\"me\"]</code> para a opera\u00e7\u00e3o de rota <code>read_users_me</code>, porque ela declarou na depend\u00eancia <code>get_current_active_user</code>.</li> <li><code>security_scopes.scopes</code> ter\u00e1 <code>[]</code> (nada) para a opera\u00e7\u00e3o de rota <code>read_system_status</code>, porque ele n\u00e3o declarou nenhum <code>Security</code> com <code>scopes</code>, e sua depend\u00eancia, <code>get_current_user</code>, n\u00e3o declara nenhum <code>scopes</code> tamb\u00e9m.</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> <p>Dica</p> <p>A coisa importante e \"m\u00e1gica\" aqui \u00e9 que <code>get_current_user</code> ter\u00e1 diferentes listas de <code>scopes</code> para validar para cada opera\u00e7\u00e3o de rota.</p> <p>Tudo depende dos <code>scopes</code> declarados em cada opera\u00e7\u00e3o de rota e cada depend\u00eancia da \u00e1rvore de depend\u00eancias para aquela opera\u00e7\u00e3o de rota espec\u00edfica.</p>"},{"location":"advanced/security/oauth2-scopes/#mais-detalhes-sobre-securityscopes","title":"Mais detalhes sobre <code>SecurityScopes</code>","text":"<p>Voc\u00ea pode utilizar <code>SecurityScopes</code> em qualquer lugar, e em diversos lugares. Ele n\u00e3o precisa estar na depend\u00eancia \"raiz\".</p> <p>Ele sempre ter\u00e1 os escopos de seguran\u00e7a declarados nas depend\u00eancias atuais de <code>Security</code> e todos os dependentes para aquela opera\u00e7\u00e3o de rota espec\u00edfica e aquela \u00e1rvore de depend\u00eancia espec\u00edfica.</p> <p>Porque o <code>SecurityScopes</code> ter\u00e1 todos os escopos declarados por dependentes, voc\u00ea pode utiliz\u00e1-lo para verificar se o token possui os escopos necess\u00e1rios em uma fun\u00e7\u00e3o de depend\u00eancia central, e depois declarar diferentes requisitos de escopo em diferentes opera\u00e7\u00f5es de rota.</p> <p>Todos eles ser\u00e3o validados independentemente para cada opera\u00e7\u00e3o de rota.</p>"},{"location":"advanced/security/oauth2-scopes/#verifique","title":"Verifique","text":"<p>Se voc\u00ea abrir os documentos da API, voc\u00ea pode antenticar e especificar quais escopos voc\u00ea quer autorizar.</p> <p></p> <p>Se voc\u00ea n\u00e3o selecionar nenhum escopo, voc\u00ea ter\u00e1 \"autenticado\", mas quando voc\u00ea tentar acessar <code>/users/me/</code> ou <code>/users/me/items/</code>, voc\u00ea vai obter um erro dizendo que voc\u00ea n\u00e3o possui as permiss\u00f5es necess\u00e1rias. Voc\u00ea ainda poder\u00e1 acessar <code>/status/</code>.</p> <p>E se voc\u00ea selecionar o escopo <code>me</code>, mas n\u00e3o o escopo <code>items</code>, voc\u00ea poder\u00e1 acessar <code>/users/me/</code>, mas n\u00e3o <code>/users/me/items/</code>.</p> <p>Isso \u00e9 o que aconteceria se uma aplica\u00e7\u00e3o terceira que tentou acessar uma dessas opera\u00e7\u00f5es de rota com um token fornecido por um usu\u00e1rio, dependendo de quantas permiss\u00f5es o usu\u00e1rio forneceu para a aplica\u00e7\u00e3o.</p>"},{"location":"advanced/security/oauth2-scopes/#sobre-integracoes-de-terceiros","title":"Sobre integra\u00e7\u00f5es de terceiros","text":"<p>Neste exemplos n\u00f3s estamos utilizando o fluxo de senha do OAuth2.</p> <p>Isso \u00e9 apropriado quando n\u00f3s estamos autenticando em nossa pr\u00f3pria aplica\u00e7\u00e3o, provavelmente com o nosso pr\u00f3prio \"frontend\".</p> <p>Porque n\u00f3s podemos confiar nele para receber o <code>username</code> e o <code>password</code>, pois n\u00f3s controlamos isso.</p> <p>Mas se n\u00f3s estamos construindo uma aplica\u00e7\u00e3o OAuth2 que outros poderiam conectar (i.e., se voc\u00ea est\u00e1 construindo um provedor de autentica\u00e7\u00e3o equivalente ao Facebook, Google, GitHub, etc.) voc\u00ea deveria utilizar um dos outros fluxos.</p> <p>O mais comum \u00e9 o fluxo impl\u00edcito.</p> <p>O mais seguro \u00e9 o fluxo de c\u00f3digo, mas ele \u00e9 mais complexo para implementar, pois ele necessita mais passos. Como ele \u00e9 mais complexo, muitos provedores terminam sugerindo o fluxo impl\u00edcito.</p> <p>Nota</p> <p>\u00c9 comum que cada provedor de autentica\u00e7\u00e3o nomeie os seus fluxos de forma diferente, para torn\u00e1-lo parte de sua marca.</p> <p>Mas no final, eles est\u00e3o implementando o mesmo padr\u00e3o OAuth2.</p> <p>O ReadyAPI inclui utilit\u00e1rios para todos esses fluxos de autentica\u00e7\u00e3o OAuth2 em <code>readyapi.security.oauth2</code>.</p>"},{"location":"advanced/security/oauth2-scopes/#security-em-docoradores-de-dependencias","title":"<code>Security</code> em docoradores de <code>depend\u00eancias</code>","text":"<p>Da mesma forma que voc\u00ea pode definir uma <code>list</code> de <code>Depends</code> no par\u00e2metro de <code>dependencias</code> do decorador (como explicado em Depend\u00eancias em decoradores de opera\u00e7\u00f5es de rota), voc\u00ea tamb\u00e9m pode utilizar <code>Security</code> com escopos l\u00e1.</p>"},{"location":"deployment/","title":"Implanta\u00e7\u00e3o","text":"<p>A implanta\u00e7\u00e3o de uma aplica\u00e7\u00e3o ReadyAPI \u00e9 relativamente simples.</p> <p>Existem v\u00e1rias maneiras para fazer isso, dependendo do seu caso espec\u00edfico e das ferramentas que voc\u00ea utiliza.</p> <p>Voc\u00ea ver\u00e1 mais detalhes para se ter em mente e algumas das t\u00e9cnicas para a implanta\u00e7\u00e3o nas pr\u00f3ximas se\u00e7\u00f5es.</p>"},{"location":"deployment/cloud/","title":"Implantar ReadyAPI em provedores de nuvem","text":"<p>Voc\u00ea pode usar praticamente qualquer provedor de nuvem para implantar seu aplicativo ReadyAPI.</p> <p>Na maioria dos casos, os principais provedores de nuvem t\u00eam guias para implantar o ReadyAPI com eles.</p>"},{"location":"deployment/cloud/#provedores-de-nuvem-patrocinadores","title":"Provedores de Nuvem - Patrocinadores","text":"<p>Alguns provedores de nuvem \u2728 patrocinam o ReadyAPI \u2728, o que garante o desenvolvimento cont\u00ednuo e saud\u00e1vel do ReadyAPI e seu ecossistema.</p> <p>E isso mostra seu verdadeiro comprometimento com o ReadyAPI e sua comunidade (voc\u00ea), pois eles n\u00e3o querem apenas fornecer a voc\u00ea um bom servi\u00e7o, mas tamb\u00e9m querem ter certeza de que voc\u00ea tenha uma estrutura boa e saud\u00e1vel, o ReadyAPI. \ud83d\ude47</p> <p>Talvez voc\u00ea queira experimentar os servi\u00e7os deles e seguir os guias:</p> <ul> <li>Platform.sh</li> <li>Porter</li> <li>Coherence</li> </ul>"},{"location":"deployment/concepts/","title":"Conceitos de Implanta\u00e7\u00f5es","text":"<p>Ao implantar um aplicativo ReadyAPI, ou na verdade, qualquer tipo de API da web, h\u00e1 v\u00e1rios conceitos com os quais voc\u00ea provavelmente se importa e, usando-os, voc\u00ea pode encontrar a maneira mais apropriada de implantar seu aplicativo.</p> <p>Alguns dos conceitos importantes s\u00e3o:</p> <ul> <li>Seguran\u00e7a - HTTPS</li> <li>Executando na inicializa\u00e7\u00e3o</li> <li>Reinicializa\u00e7\u00f5es</li> <li>Replica\u00e7\u00e3o (o n\u00famero de processos em execu\u00e7\u00e3o)</li> <li>Mem\u00f3ria</li> <li>Etapas anteriores antes de iniciar</li> </ul> <p>Veremos como eles afetariam as implanta\u00e7\u00f5es.</p> <p>No final, o principal objetivo \u00e9 ser capaz de atender seus clientes de API de uma forma segura, evitar interrup\u00e7\u00f5es e usar os recursos de computa\u00e7\u00e3o (por exemplo, servidores remotos/m\u00e1quinas virtuais) da forma mais eficiente poss\u00edvel. \ud83d\ude80</p> <p>Vou lhe contar um pouco mais sobre esses conceitos aqui, e espero que isso lhe d\u00ea a intui\u00e7\u00e3o necess\u00e1ria para decidir como implantar sua API em ambientes muito diferentes, possivelmente at\u00e9 mesmo em futuros ambientes que ainda n\u00e3o existem.</p> <p>Ao considerar esses conceitos, voc\u00ea ser\u00e1 capaz de avaliar e projetar a melhor maneira de implantar suas pr\u00f3prias APIs.</p> <p>Nos pr\u00f3ximos cap\u00edtulos, darei a voc\u00ea mais receitas concretas para implantar aplicativos ReadyAPI.</p> <p>Mas por enquanto, vamos verificar essas importantes ideias conceituais. Esses conceitos tamb\u00e9m se aplicam a qualquer outro tipo de API da web. \ud83d\udca1</p>"},{"location":"deployment/concepts/#seguranca-https","title":"Seguran\u00e7a - HTTPS","text":"<p>No cap\u00edtulo anterior sobre HTTPS aprendemos como o HTTPS fornece criptografia para sua API.</p> <p>Tamb\u00e9m vimos que o HTTPS normalmente \u00e9 fornecido por um componente externo ao seu servidor de aplicativos, um Proxy de termina\u00e7\u00e3o TLS.</p> <p>E tem que haver algo respons\u00e1vel por renovar os certificados HTTPS, pode ser o mesmo componente ou pode ser algo diferente.</p>"},{"location":"deployment/concepts/#ferramentas-de-exemplo-para-https","title":"Ferramentas de exemplo para HTTPS","text":"<p>Algumas das ferramentas que voc\u00ea pode usar como um proxy de termina\u00e7\u00e3o TLS s\u00e3o:</p> <ul> <li>Traefik<ul> <li>Lida automaticamente com renova\u00e7\u00f5es de certificados \u2728</li> </ul> </li> <li>Caddy<ul> <li>Lida automaticamente com renova\u00e7\u00f5es de certificados \u2728</li> </ul> </li> <li>Nginx<ul> <li>Com um componente externo como o Certbot para renova\u00e7\u00f5es de certificados</li> </ul> </li> <li>HAProxy<ul> <li>Com um componente externo como o Certbot para renova\u00e7\u00f5es de certificados</li> </ul> </li> <li>Kubernetes com um controlador Ingress como o Nginx<ul> <li>Com um componente externo como cert-manager para renova\u00e7\u00f5es de certificados</li> </ul> </li> <li>Gerenciado internamente por um provedor de nuvem como parte de seus servi\u00e7os (leia abaixo \ud83d\udc47)</li> </ul> <p>Outra op\u00e7\u00e3o \u00e9 que voc\u00ea poderia usar um servi\u00e7o de nuvem que faz mais do trabalho, incluindo a configura\u00e7\u00e3o de HTTPS. Ele pode ter algumas restri\u00e7\u00f5es ou cobrar mais, etc. Mas, nesse caso, voc\u00ea n\u00e3o teria que configurar um Proxy de termina\u00e7\u00e3o TLS sozinho.</p> <p>Mostrarei alguns exemplos concretos nos pr\u00f3ximos cap\u00edtulos.</p> <p>Os pr\u00f3ximos conceitos a serem considerados s\u00e3o todos sobre o programa que executa sua API real (por exemplo, Uvicorn).</p>"},{"location":"deployment/concepts/#programa-e-processo","title":"Programa e Processo","text":"<p>Falaremos muito sobre o \"processo\" em execu\u00e7\u00e3o, ent\u00e3o \u00e9 \u00fatil ter clareza sobre o que ele significa e qual \u00e9 a diferen\u00e7a com a palavra \"programa\".</p>"},{"location":"deployment/concepts/#o-que-e-um-programa","title":"O que \u00e9 um Programa","text":"<p>A palavra programa \u00e9 comumente usada para descrever muitas coisas:</p> <ul> <li>O c\u00f3digo que voc\u00ea escreve, os arquivos Python.</li> <li>O arquivo que pode ser executado pelo sistema operacional, por exemplo: <code>python</code>, <code>python.exe</code> ou <code>uvicorn</code>.</li> <li>Um programa espec\u00edfico enquanto est\u00e1 em execu\u00e7\u00e3o no sistema operacional, usando a CPU e armazenando coisas na mem\u00f3ria. Isso tamb\u00e9m \u00e9 chamado de processo.</li> </ul>"},{"location":"deployment/concepts/#o-que-e-um-processo","title":"O que \u00e9 um Processo","text":"<p>A palavra processo normalmente \u00e9 usada de forma mais espec\u00edfica, referindo-se apenas ao que est\u00e1 sendo executado no sistema operacional (como no \u00faltimo ponto acima):</p> <ul> <li>Um programa espec\u00edfico enquanto est\u00e1 em execu\u00e7\u00e3o no sistema operacional.<ul> <li>Isso n\u00e3o se refere ao arquivo, nem ao c\u00f3digo, refere-se especificamente \u00e0 coisa que est\u00e1 sendo executada e gerenciada pelo sistema operacional.</li> </ul> </li> <li>Qualquer programa, qualquer c\u00f3digo, s\u00f3 pode fazer coisas quando est\u00e1 sendo executado. Ent\u00e3o, quando h\u00e1 um processo em execu\u00e7\u00e3o.</li> <li>O processo pode ser terminado (ou \"morto\") por voc\u00ea, ou pelo sistema operacional. Nesse ponto, ele para de rodar/ser executado, e ele n\u00e3o pode mais fazer coisas.</li> <li>Cada aplicativo que voc\u00ea tem em execu\u00e7\u00e3o no seu computador tem algum processo por tr\u00e1s dele, cada programa em execu\u00e7\u00e3o, cada janela, etc. E normalmente h\u00e1 muitos processos em execu\u00e7\u00e3o ao mesmo tempo enquanto um computador est\u00e1 ligado.</li> <li>Pode haver v\u00e1rios processos do mesmo programa em execu\u00e7\u00e3o ao mesmo tempo.</li> </ul> <p>Se voc\u00ea verificar o \"gerenciador de tarefas\" ou o \"monitor do sistema\" (ou ferramentas semelhantes) no seu sistema operacional, poder\u00e1 ver muitos desses processos em execu\u00e7\u00e3o.</p> <p>E, por exemplo, voc\u00ea provavelmente ver\u00e1 que h\u00e1 v\u00e1rios processos executando o mesmo programa de navegador (Firefox, Chrome, Edge, etc.). Eles normalmente executam um processo por aba, al\u00e9m de alguns outros processos extras.</p> <p></p> <p>Agora que sabemos a diferen\u00e7a entre os termos processo e programa, vamos continuar falando sobre implanta\u00e7\u00f5es.</p>"},{"location":"deployment/concepts/#executando-na-inicializacao","title":"Executando na inicializa\u00e7\u00e3o","text":"<p>Na maioria dos casos, quando voc\u00ea cria uma API web, voc\u00ea quer que ela esteja sempre em execu\u00e7\u00e3o, ininterrupta, para que seus clientes possam sempre acess\u00e1-la. Isso \u00e9 claro, a menos que voc\u00ea tenha um motivo espec\u00edfico para querer que ela seja executada somente em certas situa\u00e7\u00f5es, mas na maioria das vezes voc\u00ea quer que ela esteja constantemente em execu\u00e7\u00e3o e dispon\u00edvel.</p>"},{"location":"deployment/concepts/#em-um-servidor-remoto","title":"Em um servidor remoto","text":"<p>Ao configurar um servidor remoto (um servidor em nuvem, uma m\u00e1quina virtual, etc.), a coisa mais simples que voc\u00ea pode fazer \u00e9 usar <code>readyapi run</code> (que usa Uvicorn) ou algo semelhante, manualmente, da mesma forma que voc\u00ea faz ao desenvolver localmente.</p> <p>E funcionar\u00e1 e ser\u00e1 \u00fatil durante o desenvolvimento.</p> <p>Mas se sua conex\u00e3o com o servidor for perdida, o processo em execu\u00e7\u00e3o provavelmente morrer\u00e1.</p> <p>E se o servidor for reiniciado (por exemplo, ap\u00f3s atualiza\u00e7\u00f5es ou migra\u00e7\u00f5es do provedor de nuvem), voc\u00ea provavelmente n\u00e3o notar\u00e1. E por causa disso, voc\u00ea nem saber\u00e1 que precisa reiniciar o processo manualmente. Ent\u00e3o, sua API simplesmente permanecer\u00e1 inativa. \ud83d\ude31</p>"},{"location":"deployment/concepts/#executar-automaticamente-na-inicializacao","title":"Executar automaticamente na inicializa\u00e7\u00e3o","text":"<p>Em geral, voc\u00ea provavelmente desejar\u00e1 que o programa do servidor (por exemplo, Uvicorn) seja iniciado automaticamente na inicializa\u00e7\u00e3o do servidor e, sem precisar de nenhuma interven\u00e7\u00e3o humana, tenha um processo sempre em execu\u00e7\u00e3o com sua API (por exemplo, Uvicorn executando seu aplicativo ReadyAPI).</p>"},{"location":"deployment/concepts/#programa-separado","title":"Programa separado","text":"<p>Para conseguir isso, voc\u00ea normalmente ter\u00e1 um programa separado que garantiria que seu aplicativo fosse executado na inicializa\u00e7\u00e3o. E em muitos casos, ele tamb\u00e9m garantiria que outros componentes ou aplicativos tamb\u00e9m fossem executados, por exemplo, um banco de dados.</p>"},{"location":"deployment/concepts/#ferramentas-de-exemplo-para-executar-na-inicializacao","title":"Ferramentas de exemplo para executar na inicializa\u00e7\u00e3o","text":"<p>Alguns exemplos de ferramentas que podem fazer esse trabalho s\u00e3o:</p> <ul> <li>Docker</li> <li>Kubernetes</li> <li>Docker Compose</li> <li>Docker em Modo Swarm</li> <li>Systemd</li> <li>Supervisor</li> <li>Gerenciado internamente por um provedor de nuvem como parte de seus servi\u00e7os</li> <li>Outros...</li> </ul> <p>Darei exemplos mais concretos nos pr\u00f3ximos cap\u00edtulos.</p>"},{"location":"deployment/concepts/#reinicializacoes","title":"Reinicializa\u00e7\u00f5es","text":"<p>Semelhante a garantir que seu aplicativo seja executado na inicializa\u00e7\u00e3o, voc\u00ea provavelmente tamb\u00e9m deseja garantir que ele seja reiniciado ap\u00f3s falhas.</p>"},{"location":"deployment/concepts/#nos-cometemos-erros","title":"N\u00f3s cometemos erros","text":"<p>N\u00f3s, como humanos, cometemos erros o tempo todo. O software quase sempre tem bugs escondidos em lugares diferentes. \ud83d\udc1b</p> <p>E n\u00f3s, como desenvolvedores, continuamos aprimorando o c\u00f3digo \u00e0 medida que encontramos esses bugs e implementamos novos recursos (possivelmente adicionando novos bugs tamb\u00e9m \ud83d\ude05).</p>"},{"location":"deployment/concepts/#pequenos-erros-sao-tratados-automaticamente","title":"Pequenos erros s\u00e3o tratados automaticamente","text":"<p>Ao criar APIs da web com ReadyAPI, se houver um erro em nosso c\u00f3digo, o ReadyAPI normalmente o conter\u00e1 na \u00fanica solicita\u00e7\u00e3o que acionou o erro. \ud83d\udee1</p> <p>O cliente receber\u00e1 um Erro Interno do Servidor 500 para essa solicita\u00e7\u00e3o, mas o aplicativo continuar\u00e1 funcionando para as pr\u00f3ximas solicita\u00e7\u00f5es em vez de travar completamente.</p>"},{"location":"deployment/concepts/#erros-maiores-travamentos","title":"Erros maiores - Travamentos","text":"<p>No entanto, pode haver casos em que escrevemos algum c\u00f3digo que trava todo o aplicativo, fazendo com que o Uvicorn e o Python travem. \ud83d\udca5</p> <p>E ainda assim, voc\u00ea provavelmente n\u00e3o gostaria que o aplicativo permanecesse inativo porque houve um erro em um lugar, voc\u00ea provavelmente quer que ele continue em execu\u00e7\u00e3o pelo menos para as opera\u00e7\u00f5es de caminho que n\u00e3o est\u00e3o quebradas.</p>"},{"location":"deployment/concepts/#reiniciar-apos-falha","title":"Reiniciar ap\u00f3s falha","text":"<p>Mas nos casos com erros realmente graves que travam o processo em execu\u00e7\u00e3o, voc\u00ea vai querer um componente externo que seja respons\u00e1vel por reiniciar o processo, pelo menos algumas vezes...</p> <p>Dica</p> <p>...Embora se o aplicativo inteiro estiver travando imediatamente, provavelmente n\u00e3o fa\u00e7a sentido reinici\u00e1-lo para sempre. Mas nesses casos, voc\u00ea provavelmente notar\u00e1 isso durante o desenvolvimento, ou pelo menos logo ap\u00f3s a implanta\u00e7\u00e3o.</p> <p>Ent\u00e3o, vamos nos concentrar nos casos principais, onde ele pode travar completamente em alguns casos espec\u00edficos no futuro, e ainda faz sentido reinici\u00e1-lo.</p> <p>Voc\u00ea provavelmente gostaria de ter a coisa respons\u00e1vel por reiniciar seu aplicativo como um componente externo, porque a essa altura, o mesmo aplicativo com Uvicorn e Python j\u00e1 havia travado, ent\u00e3o n\u00e3o h\u00e1 nada no mesmo c\u00f3digo do mesmo aplicativo que possa fazer algo a respeito.</p>"},{"location":"deployment/concepts/#ferramentas-de-exemplo-para-reiniciar-automaticamente","title":"Ferramentas de exemplo para reiniciar automaticamente","text":"<p>Na maioria dos casos, a mesma ferramenta usada para executar o programa na inicializa\u00e7\u00e3o tamb\u00e9m \u00e9 usada para lidar com reinicializa\u00e7\u00f5es autom\u00e1ticas.</p> <p>Por exemplo, isso poderia ser resolvido por:</p> <ul> <li>Docker</li> <li>Kubernetes</li> <li>Docker Compose</li> <li>Docker no Modo Swarm</li> <li>Systemd</li> <li>Supervisor</li> <li>Gerenciado internamente por um provedor de nuvem como parte de seus servi\u00e7os</li> <li>Outros...</li> </ul>"},{"location":"deployment/concepts/#replicacao-processos-e-memoria","title":"Replica\u00e7\u00e3o - Processos e Mem\u00f3ria","text":"<p>Com um aplicativo ReadyAPI, usando um programa de servidor como o comando <code>readyapi</code> que executa o Uvicorn, execut\u00e1-lo uma vez em um processo pode atender a v\u00e1rios clientes simultaneamente.</p> <p>Mas em muitos casos, voc\u00ea desejar\u00e1 executar v\u00e1rios processos de trabalho ao mesmo tempo.</p>"},{"location":"deployment/concepts/#processos-multiplos-trabalhadores","title":"Processos M\u00faltiplos - Trabalhadores","text":"<p>Se voc\u00ea tiver mais clientes do que um \u00fanico processo pode manipular (por exemplo, se a m\u00e1quina virtual n\u00e3o for muito grande) e tiver v\u00e1rios n\u00facleos na CPU do servidor, voc\u00ea poder\u00e1 ter v\u00e1rios processos em execu\u00e7\u00e3o com o mesmo aplicativo ao mesmo tempo e distribuir todas as solicita\u00e7\u00f5es entre eles.</p> <p>Quando voc\u00ea executa v\u00e1rios processos do mesmo programa de API, eles s\u00e3o comumente chamados de trabalhadores.</p>"},{"location":"deployment/concepts/#processos-do-trabalhador-e-portas","title":"Processos do Trabalhador e Portas","text":"<p>Lembra da documenta\u00e7\u00e3o Sobre HTTPS que diz que apenas um processo pode escutar em uma combina\u00e7\u00e3o de porta e endere\u00e7o IP em um servidor?</p> <p>Isso ainda \u00e9 verdade.</p> <p>Ent\u00e3o, para poder ter v\u00e1rios processos ao mesmo tempo, tem que haver um \u00fanico processo escutando em uma porta que ent\u00e3o transmite a comunica\u00e7\u00e3o para cada processo de trabalho de alguma forma.</p>"},{"location":"deployment/concepts/#memoria-por-processo","title":"Mem\u00f3ria por Processo","text":"<p>Agora, quando o programa carrega coisas na mem\u00f3ria, por exemplo, um modelo de aprendizado de m\u00e1quina em uma vari\u00e1vel, ou o conte\u00fado de um arquivo grande em uma vari\u00e1vel, tudo isso consome um pouco da mem\u00f3ria (RAM) do servidor.</p> <p>E v\u00e1rios processos normalmente n\u00e3o compartilham nenhuma mem\u00f3ria. Isso significa que cada processo em execu\u00e7\u00e3o tem suas pr\u00f3prias coisas, vari\u00e1veis \u200b\u200be mem\u00f3ria. E se voc\u00ea estiver consumindo uma grande quantidade de mem\u00f3ria em seu c\u00f3digo, cada processo consumir\u00e1 uma quantidade equivalente de mem\u00f3ria.</p>"},{"location":"deployment/concepts/#memoria-do-servidor","title":"Mem\u00f3ria do servidor","text":"<p>Por exemplo, se seu c\u00f3digo carrega um modelo de Machine Learning com 1 GB de tamanho, quando voc\u00ea executa um processo com sua API, ele consumir\u00e1 pelo menos 1 GB de RAM. E se voc\u00ea iniciar 4 processos (4 trabalhadores), cada um consumir\u00e1 1 GB de RAM. Ent\u00e3o, no total, sua API consumir\u00e1 4 GB de RAM.</p> <p>E se o seu servidor remoto ou m\u00e1quina virtual tiver apenas 3 GB de RAM, tentar carregar mais de 4 GB de RAM causar\u00e1 problemas. \ud83d\udea8</p>"},{"location":"deployment/concepts/#processos-multiplos-um-exemplo","title":"Processos M\u00faltiplos - Um Exemplo","text":"<p>Neste exemplo, h\u00e1 um Processo Gerenciador que inicia e controla dois Processos de Trabalhadores.</p> <p>Este Processo de Gerenciador provavelmente seria o que escutaria na porta no IP. E ele transmitiria toda a comunica\u00e7\u00e3o para os processos de trabalho.</p> <p>Esses processos de trabalho seriam aqueles que executariam seu aplicativo, eles executariam os c\u00e1lculos principais para receber uma solicita\u00e7\u00e3o e retornar uma resposta, e carregariam qualquer coisa que voc\u00ea colocasse em vari\u00e1veis \u200b\u200bna RAM.</p> <p></p> <p>E, claro, a mesma m\u00e1quina provavelmente teria outros processos em execu\u00e7\u00e3o, al\u00e9m do seu aplicativo.</p> <p>Um detalhe interessante \u00e9 que a porcentagem da CPU usada por cada processo pode variar muito ao longo do tempo, mas a mem\u00f3ria (RAM) normalmente fica mais ou menos est\u00e1vel.</p> <p>Se voc\u00ea tiver uma API que faz uma quantidade compar\u00e1vel de c\u00e1lculos todas as vezes e tiver muitos clientes, ent\u00e3o a utiliza\u00e7\u00e3o da CPU provavelmente tamb\u00e9m ser\u00e1 est\u00e1vel (em vez de ficar constantemente subindo e descendo rapidamente).</p>"},{"location":"deployment/concepts/#exemplos-de-ferramentas-e-estrategias-de-replicacao","title":"Exemplos de ferramentas e estrat\u00e9gias de replica\u00e7\u00e3o","text":"<p>Pode haver v\u00e1rias abordagens para conseguir isso, e falarei mais sobre estrat\u00e9gias espec\u00edficas nos pr\u00f3ximos cap\u00edtulos, por exemplo, ao falar sobre Docker e cont\u00eaineres.</p> <p>A principal restri\u00e7\u00e3o a ser considerada \u00e9 que tem que haver um \u00fanico componente manipulando a porta no IP p\u00fablico. E ent\u00e3o tem que ter uma maneira de transmitir a comunica\u00e7\u00e3o para os processos/trabalhadores replicados.</p> <p>Aqui est\u00e3o algumas combina\u00e7\u00f5es e estrat\u00e9gias poss\u00edveis:</p> <ul> <li>Uvicorn com <code>--workers</code><ul> <li>Um gerenciador de processos Uvicorn escutaria no IP e na porta e iniciaria v\u00e1rios processos de trabalho Uvicorn.</li> </ul> </li> <li>Kubernetes e outros sistemas de cont\u00eaineres distribu\u00eddos<ul> <li>Algo na camada Kubernetes escutaria no IP e na porta. A replica\u00e7\u00e3o seria por ter v\u00e1rios cont\u00eaineres, cada um com um processo Uvicorn em execu\u00e7\u00e3o.</li> </ul> </li> <li>Servi\u00e7os de nuvem que cuidam disso para voc\u00ea<ul> <li>O servi\u00e7o de nuvem provavelmente cuidar\u00e1 da replica\u00e7\u00e3o para voc\u00ea. Ele possivelmente deixaria voc\u00ea definir um processo para executar, ou uma imagem de cont\u00eainer para usar, em qualquer caso, provavelmente seria um \u00fanico processo Uvicorn, e o servi\u00e7o de nuvem seria respons\u00e1vel por replic\u00e1-lo.</li> </ul> </li> </ul> <p>Dica</p> <p>N\u00e3o se preocupe se alguns desses itens sobre cont\u00eaineres, Docker ou Kubernetes ainda n\u00e3o fizerem muito sentido.</p> <p>Falarei mais sobre imagens de cont\u00eainer, Docker, Kubernetes, etc. em um cap\u00edtulo futuro: ReadyAPI em cont\u00eaineres - Docker.</p>"},{"location":"deployment/concepts/#etapas-anteriores-antes-de-comecar","title":"Etapas anteriores antes de come\u00e7ar","text":"<p>H\u00e1 muitos casos em que voc\u00ea deseja executar algumas etapas antes de iniciar sua aplica\u00e7\u00e3o.</p> <p>Por exemplo, voc\u00ea pode querer executar migra\u00e7\u00f5es de banco de dados.</p> <p>Mas na maioria dos casos, voc\u00ea precisar\u00e1 executar essas etapas apenas uma vez.</p> <p>Portanto, voc\u00ea vai querer ter um processo \u00fanico para executar essas etapas anteriores antes de iniciar o aplicativo.</p> <p>E voc\u00ea ter\u00e1 que se certificar de que \u00e9 um \u00fanico processo executando essas etapas anteriores mesmo se depois, voc\u00ea iniciar v\u00e1rios processos (v\u00e1rios trabalhadores) para o pr\u00f3prio aplicativo. Se essas etapas fossem executadas por v\u00e1rios processos, eles duplicariam o trabalho executando-o em paralelo, e se as etapas fossem algo delicado como uma migra\u00e7\u00e3o de banco de dados, elas poderiam causar conflitos entre si.</p> <p>Claro, h\u00e1 alguns casos em que n\u00e3o h\u00e1 problema em executar as etapas anteriores v\u00e1rias vezes; nesse caso, \u00e9 muito mais f\u00e1cil de lidar.</p> <p>Dica</p> <p>Al\u00e9m disso, tenha em mente que, dependendo da sua configura\u00e7\u00e3o, em alguns casos voc\u00ea pode nem precisar de nenhuma etapa anterior antes de iniciar sua aplica\u00e7\u00e3o.</p> <p>Nesse caso, voc\u00ea n\u00e3o precisaria se preocupar com nada disso. \ud83e\udd37</p>"},{"location":"deployment/concepts/#exemplos-de-estrategias-de-etapas-anteriores","title":"Exemplos de estrat\u00e9gias de etapas anteriores","text":"<p>Isso depender\u00e1 muito da maneira como voc\u00ea implanta seu sistema e provavelmente estar\u00e1 conectado \u00e0 maneira como voc\u00ea inicia programas, lida com reinicializa\u00e7\u00f5es, etc.</p> <p>Aqui est\u00e3o algumas ideias poss\u00edveis:</p> <ul> <li>Um \"Init Container\" no Kubernetes que roda antes do seu app container</li> <li>Um script bash que roda os passos anteriores e ent\u00e3o inicia seu aplicativo<ul> <li>Voc\u00ea ainda precisaria de uma maneira de iniciar/reiniciar aquele script bash, detectar erros, etc.</li> </ul> </li> </ul> <p>Dica</p> <p>Darei exemplos mais concretos de como fazer isso com cont\u00eaineres em um cap\u00edtulo futuro: ReadyAPI em cont\u00eaineres - Docker.</p>"},{"location":"deployment/concepts/#utilizacao-de-recursos","title":"Utiliza\u00e7\u00e3o de recursos","text":"<p>Seu(s) servidor(es) \u00e9(s\u00e3o) um recurso que voc\u00ea pode consumir ou utilizar, com seus programas, o tempo de computa\u00e7\u00e3o nas CPUs e a mem\u00f3ria RAM dispon\u00edvel.</p> <p>Quanto dos recursos do sistema voc\u00ea quer consumir/utilizar? Pode ser f\u00e1cil pensar \"n\u00e3o muito\", mas, na realidade, voc\u00ea provavelmente vai querer consumir o m\u00e1ximo poss\u00edvel sem travar.</p> <p>Se voc\u00ea est\u00e1 pagando por 3 servidores, mas est\u00e1 usando apenas um pouco de RAM e CPU, voc\u00ea provavelmente est\u00e1 desperdi\u00e7ando dinheiro \ud83d\udcb8, e provavelmente desperdi\u00e7ando energia el\u00e9trica do servidor \ud83c\udf0e, etc.</p> <p>Nesse caso, seria melhor ter apenas 2 servidores e usar uma porcentagem maior de seus recursos (CPU, mem\u00f3ria, disco, largura de banda de rede, etc).</p> <p>Por outro lado, se voc\u00ea tem 2 servidores e est\u00e1 usando 100% da CPU e RAM deles, em algum momento um processo pedir\u00e1 mais mem\u00f3ria, e o servidor ter\u00e1 que usar o disco como \"mem\u00f3ria\" (o que pode ser milhares de vezes mais lento), ou at\u00e9 mesmo travar. Ou um processo pode precisar fazer alguma computa\u00e7\u00e3o e teria que esperar at\u00e9 que a CPU esteja livre novamente.</p> <p>Nesse caso, seria melhor obter um servidor extra e executar alguns processos nele para que todos tenham RAM e tempo de CPU suficientes.</p> <p>Tamb\u00e9m h\u00e1 a chance de que, por algum motivo, voc\u00ea tenha um pico de uso da sua API. Talvez ela tenha se tornado viral, ou talvez alguns outros servi\u00e7os ou bots comecem a us\u00e1-la. E voc\u00ea pode querer ter recursos extras para estar seguro nesses casos.</p> <p>Voc\u00ea poderia colocar um n\u00famero arbitr\u00e1rio para atingir, por exemplo, algo entre 50% a 90% da utiliza\u00e7\u00e3o de recursos. O ponto \u00e9 que essas s\u00e3o provavelmente as principais coisas que voc\u00ea vai querer medir e usar para ajustar suas implanta\u00e7\u00f5es.</p> <p>Voc\u00ea pode usar ferramentas simples como <code>htop</code> para ver a CPU e a RAM usadas no seu servidor ou a quantidade usada por cada processo. Ou voc\u00ea pode usar ferramentas de monitoramento mais complexas, que podem ser distribu\u00eddas entre servidores, etc.</p>"},{"location":"deployment/concepts/#recapitular","title":"Recapitular","text":"<p>Voc\u00ea leu aqui alguns dos principais conceitos que provavelmente precisa ter em mente ao decidir como implantar seu aplicativo:</p> <ul> <li>Seguran\u00e7a - HTTPS</li> <li>Executando na inicializa\u00e7\u00e3o</li> <li>Reinicializa\u00e7\u00f5es</li> <li>Replica\u00e7\u00e3o (o n\u00famero de processos em execu\u00e7\u00e3o)</li> <li>Mem\u00f3ria</li> <li>Etapas anteriores antes de iniciar</li> </ul> <p>Entender essas ideias e como aplic\u00e1-las deve lhe dar a intui\u00e7\u00e3o necess\u00e1ria para tomar qualquer decis\u00e3o ao configurar e ajustar suas implanta\u00e7\u00f5es. \ud83e\udd13</p> <p>Nas pr\u00f3ximas se\u00e7\u00f5es, darei exemplos mais concretos de poss\u00edveis estrat\u00e9gias que voc\u00ea pode seguir. \ud83d\ude80</p>"},{"location":"deployment/docker/","title":"ReadyAPI em cont\u00eaineres - Docker","text":"<p>Ao fazer o deploy de aplica\u00e7\u00f5es ReadyAPI uma abordagem comum \u00e9 construir uma imagem de cont\u00eainer Linux. Isso normalmente \u00e9 feito usando o Docker. Voc\u00ea pode a partir disso fazer o deploy dessa imagem de algumas maneiras.</p> <p>Usando cont\u00eaineres Linux voc\u00ea tem diversas vantagens incluindo seguran\u00e7a, replicabilidade, simplicidade, entre outras.</p> <p>Dica</p> <p>Est\u00e1 com pressa e j\u00e1 sabe dessas coisas? Pode ir direto para <code>Dockerfile</code> abaixo \ud83d\udc47.</p> Visualiza\u00e7\u00e3o do Dockerfile \ud83d\udc40 <pre><code>FROM python:3.9\n\nWORKDIR /code\n\nCOPY ./requirements.txt /code/requirements.txt\n\nRUN pip install --no-cache-dir --upgrade -r /code/requirements.txt\n\nCOPY ./app /code/app\n\nCMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"80\"]\n\n# If running behind a proxy like Nginx or Traefik add --proxy-headers\n# CMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"80\", \"--proxy-headers\"]\n</code></pre>"},{"location":"deployment/docker/#o-que-e-um-conteiner","title":"O que \u00e9 um Cont\u00eainer","text":"<p>Cont\u00eaineres (especificamente cont\u00eaineres Linux) s\u00e3o um jeito muito leve de empacotar aplica\u00e7\u00f5es contendo todas as depend\u00eancias e arquivos necess\u00e1rios enquanto os mant\u00e9m isolados de outros cont\u00eaineres (outras aplica\u00e7\u00f5es ou componentes) no mesmo sistema.</p> <p>Cont\u00eaineres Linux rodam usando o mesmo kernel Linux do hospedeiro (m\u00e1quina, m\u00e1quina virtual, servidor na nuvem, etc). Isso simplesmente significa que eles s\u00e3o muito leves (comparados com m\u00e1quinas virtuais emulando um sistema operacional completo).</p> <p>Dessa forma, cont\u00eaineres consomem poucos recursos, uma quantidade compar\u00e1vel com rodar os processos diretamente (uma m\u00e1quina virtual consumiria muito mais).</p> <p>Cont\u00eaineres tamb\u00e9m possuem seus pr\u00f3prios processos (comumente um \u00fanico processo), sistema de arquivos e rede isolados simplificando deploy, seguran\u00e7a, desenvolvimento, etc.</p>"},{"location":"deployment/docker/#o-que-e-uma-imagem-de-conteiner","title":"O que \u00e9 uma Imagem de Cont\u00eainer","text":"<p>Um cont\u00eainer roda a partir de uma imagem de cont\u00eainer.</p> <p>Uma imagem de cont\u00eainer \u00e9 uma vers\u00e3o est\u00e1tica de todos os arquivos, vari\u00e1veis de ambiente e do comando/programa padr\u00e3o que deve estar presente num cont\u00eainer. Est\u00e1tica aqui significa que a imagem de cont\u00eainer n\u00e3o est\u00e1 rodando, n\u00e3o est\u00e1 sendo executada, somente cont\u00e9m os arquivos e metadados empacotados.</p> <p>Em contraste com a \"imagem de cont\u00eainer\" que cont\u00e9m os conte\u00fados est\u00e1ticos armazenados, um \"cont\u00eainer\" normalmente se refere \u00e0 inst\u00e2ncia rodando, a coisa que est\u00e1 sendo executada.</p> <p>Quando o cont\u00eainer \u00e9 iniciado e est\u00e1 rodando (iniciado a partir de uma imagem de cont\u00eainer), ele pode criar ou modificar arquivos, vari\u00e1veis de ambiente, etc. Essas mudan\u00e7as v\u00e3o existir somente nesse cont\u00eainer, mas n\u00e3o persistir\u00e3o na imagem subjacente do container (n\u00e3o ser\u00e3o salvas no disco).</p> <p>Uma imagem de cont\u00eainer \u00e9 compar\u00e1vel ao arquivo de programa e seus conte\u00fados, ex.: <code>python</code> e algum arquivo <code>main.py</code>.</p> <p>E o cont\u00eainer em si (em contraste \u00e0 imagem de cont\u00eainer) \u00e9 a pr\u00f3pria inst\u00e2ncia da imagem rodando, compar\u00e1vel a um processo. Na verdade, um cont\u00eainer est\u00e1 rodando somente quando h\u00e1 um processo rodando (e normalmente \u00e9 somente um processo). O cont\u00eainer finaliza quando n\u00e3o h\u00e1 um processo rodando nele.</p>"},{"location":"deployment/docker/#imagens-de-conteiner","title":"Imagens de cont\u00eainer","text":"<p>Docker tem sido uma das principais ferramentas para criar e gerenciar imagens de cont\u00eainer e cont\u00eaineres.</p> <p>E existe um Docker Hub p\u00fablico com imagens de cont\u00eainer oficiais pr\u00e9-prontas para diversas ferramentas, ambientes, bancos de dados e aplica\u00e7\u00f5es.</p> <p>Por exemplo, h\u00e1 uma Imagem Python oficial.</p> <p>E existe muitas outras imagens para diferentes coisas, como bancos de dados, por exemplo:</p> <ul> <li>PostgreSQL</li> <li>MySQL</li> <li>MongoDB</li> <li>Redis, etc.</li> </ul> <p>Usando imagens de cont\u00eainer pr\u00e9-prontas \u00e9 muito f\u00e1cil combinar e usar diferentes ferramentas. Por exemplo, para testar um novo banco de dados. Em muitos casos, voc\u00ea pode usar as imagens oficiais precisando somente de vari\u00e1veis de ambiente para configur\u00e1-las.</p> <p>Dessa forma, em muitos casos voc\u00ea pode aprender sobre cont\u00eaineres e Docker e re-usar essa experi\u00eancia com diversos componentes e ferramentas.</p> <p>Ent\u00e3o, voc\u00ea rodaria v\u00e1rios cont\u00eaineres com coisas diferentes, como um banco de dados, uma aplica\u00e7\u00e3o Python, um servidor web com uma aplica\u00e7\u00e3o frontend React, e conect\u00e1-los juntos via sua rede interna.</p> <p>Todos os sistemas de gerenciamento de cont\u00eaineres (como Docker ou Kubernetes) possuem essas funcionalidades de rede integradas a eles.</p>"},{"location":"deployment/docker/#conteineres-e-processos","title":"Cont\u00eaineres e Processos","text":"<p>Uma imagem de cont\u00eainer normalmente inclui em seus metadados o programa padr\u00e3o ou comando que deve ser executado quando o cont\u00eainer \u00e9 iniciado e os par\u00e2metros a serem passados para esse programa. Muito similar ao que seria se estivesse na linha de comando.</p> <p>Quando um cont\u00eainer \u00e9 iniciado, ele ir\u00e1 rodar esse comando/programa (embora voc\u00ea possa sobrescrev\u00ea-lo e fazer com que ele rode um comando/programa diferente).</p> <p>Um cont\u00eainer est\u00e1 rodando enquanto o processo principal (comando ou programa) estiver rodando.</p> <p>Um cont\u00eainer normalmente tem um \u00fanico processo, mas tamb\u00e9m \u00e9 poss\u00edvel iniciar sub-processos a partir do processo principal, e dessa forma voc\u00ea ter\u00e1 v\u00e1rios processos no mesmo cont\u00eainer.</p> <p>Mas n\u00e3o \u00e9 poss\u00edvel ter um cont\u00eainer rodando sem pelo menos um processo rodando. Se o processo principal parar, o cont\u00eainer tamb\u00e9m para.</p>"},{"location":"deployment/docker/#construindo-uma-imagem-docker-para-readyapi","title":"Construindo uma Imagem Docker para ReadyAPI","text":"<p>Okay, vamos construir algo agora! \ud83d\ude80</p> <p>Eu vou mostrar como construir uma imagem Docker para ReadyAPI do zero, baseado na imagem oficial do Python.</p> <p>Isso \u00e9 o que voc\u00ea quer fazer na maioria dos casos, por exemplo:</p> <ul> <li>Usando Kubernetes ou ferramentas similares</li> <li>Quando rodando em uma Raspberry Pi</li> <li>Usando um servi\u00e7o em nuvem que ir\u00e1 rodar uma imagem de cont\u00eainer para voc\u00ea, etc.</li> </ul>"},{"location":"deployment/docker/#o-pacote-requirements","title":"O Pacote Requirements","text":"<p>Voc\u00ea normalmente teria os requisitos do pacote para sua aplica\u00e7\u00e3o em algum arquivo.</p> <p>Isso pode depender principalmente da ferramenta que voc\u00ea usa para instalar esses requisitos.</p> <p>O caminho mais comum de fazer isso \u00e9 ter um arquivo <code>requirements.txt</code> com os nomes dos pacotes e suas vers\u00f5es, um por linha.</p> <p>Voc\u00ea, naturalmente, usaria as mesmas ideias que voc\u00ea leu em Sobre Vers\u00f5es do ReadyAPI para definir os intervalos de vers\u00f5es.</p> <p>Por exemplo, seu <code>requirements.txt</code> poderia parecer com:</p> <pre><code>readyapi&gt;=0.68.0,&lt;0.69.0\npydantic&gt;=1.8.0,&lt;2.0.0\nuvicorn&gt;=0.15.0,&lt;0.16.0\n</code></pre> <p>E voc\u00ea normalmente instalaria essas depend\u00eancias de pacote com <code>pip</code>, por exemplo:</p> <pre><code>$ pip install -r requirements.txt\n---&gt; 100%\nSuccessfully installed readyapi pydantic uvicorn\n</code></pre> <p>Info</p> <p>H\u00e1 outros formatos e ferramentas para definir e instalar depend\u00eancias de pacote.</p> <p>Eu vou mostrar um exemplo depois usando Poetry em uma se\u00e7\u00e3o abaixo. \ud83d\udc47</p>"},{"location":"deployment/docker/#criando-o-codigo-do-readyapi","title":"Criando o C\u00f3digo do ReadyAPI","text":"<ul> <li>Crie um diret\u00f3rio <code>app</code> e entre nele.</li> <li>Crie um arquivo vazio <code>__init__.py</code>.</li> <li>Crie um arquivo <code>main.py</code> com:</li> </ul> <pre><code>from typing import Optional\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n</code></pre>"},{"location":"deployment/docker/#dockerfile","title":"Dockerfile","text":"<p>Agora, no mesmo diret\u00f3rio do projeto, crie um arquivo <code>Dockerfile</code> com:</p> <pre><code># (1)\nFROM python:3.9\n\n# (2)\nWORKDIR /code\n\n# (3)\nCOPY ./requirements.txt /code/requirements.txt\n\n# (4)\nRUN pip install --no-cache-dir --upgrade -r /code/requirements.txt\n\n# (5)\nCOPY ./app /code/app\n\n# (6)\nCMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"80\"]\n</code></pre> <ol> <li> <p>Inicie a partir da imagem base oficial do Python.</p> </li> <li> <p>Defina o diret\u00f3rio de trabalho atual para <code>/code</code>.</p> <p>Esse \u00e9 o diret\u00f3rio onde colocaremos o arquivo <code>requirements.txt</code> e o diret\u00f3rio <code>app</code>.</p> </li> <li> <p>Copie o arquivo com os requisitos para o diret\u00f3rio <code>/code</code>.</p> <p>Copie somente o arquivo com os requisitos primeiro, n\u00e3o o resto do c\u00f3digo.</p> <p>Como esse arquivo n\u00e3o muda com frequ\u00eancia, o Docker ir\u00e1 detect\u00e1-lo e usar o cache para esse passo, habilitando o cache para o pr\u00f3ximo passo tamb\u00e9m.</p> </li> <li> <p>Instale as depend\u00eancias de pacote vindas do arquivo de requisitos.</p> <p>A op\u00e7\u00e3o <code>--no-cache-dir</code> diz ao <code>pip</code> para n\u00e3o salvar os pacotes baixados localmente, pois isso s\u00f3 aconteceria se <code>pip</code> fosse executado novamente para instalar os mesmos pacotes, mas esse n\u00e3o \u00e9 o caso quando trabalhamos com cont\u00eaineres.</p> <p>Note</p> <p><code>--no-cache-dir</code> \u00e9 apenas relacionado ao <code>pip</code>, n\u00e3o tem nada a ver com Docker ou cont\u00eaineres.</p> <p>A op\u00e7\u00e3o <code>--upgrade</code> diz ao <code>pip</code> para atualizar os pacotes se eles j\u00e1 estiverem instalados.</p> <p>Por causa do passo anterior de copiar o arquivo, ele pode ser detectado pelo cache do Docker, esse passo tamb\u00e9m usar\u00e1 o cache do Docker quando dispon\u00edvel.</p> <p>Usando o cache nesse passo ir\u00e1 salvar muito tempo quando voc\u00ea for construir a imagem repetidas vezes durante o desenvolvimento, ao inv\u00e9s de baixar e instalar todas as depend\u00eancias toda vez.</p> </li> <li> <p>Copie o diret\u00f3rio <code>./app</code> dentro do diret\u00f3rio <code>/code</code>.</p> <p>Como isso tem todo o c\u00f3digo contendo o que muda com mais frequ\u00eancia, o cache do Docker n\u00e3o ser\u00e1 usado para esse passo ou para qualquer passo seguinte facilmente.</p> <p>Ent\u00e3o, \u00e9 importante colocar isso perto do final do <code>Dockerfile</code>, para otimizar o tempo de constru\u00e7\u00e3o da imagem do cont\u00eainer.</p> </li> <li> <p>Defina o comando para rodar o servidor <code>uvicorn</code>.</p> <p><code>CMD</code> recebe uma lista de strings, cada uma dessas strings \u00e9 o que voc\u00ea digitaria na linha de comando separado por espa\u00e7os.</p> <p>Esse comando ser\u00e1 executado a partir do diret\u00f3rio de trabalho atual, o mesmo diret\u00f3rio <code>/code</code> que voc\u00ea definiu acima com <code>WORKDIR /code</code>.</p> <p>Porque o programa ser\u00e1 iniciado em <code>/code</code> e dentro dele est\u00e1 o diret\u00f3rio <code>./app</code> com seu c\u00f3digo, o Uvicorn ser\u00e1 capaz de ver e importar <code>app</code> de <code>app.main</code>.</p> </li> </ol> <p>Tip</p> <p>Revise o que cada linha faz clicando em cada bolha com o n\u00famero no c\u00f3digo. \ud83d\udc46</p> <p>Agora voc\u00ea deve ter uma estrutura de diret\u00f3rio como:</p> <pre><code>.\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 main.py\n\u251c\u2500\u2500 Dockerfile\n\u2514\u2500\u2500 requirements.txt\n</code></pre>"},{"location":"deployment/docker/#por-tras-de-um-proxy-de-terminacao-tls","title":"Por Tr\u00e1s de um Proxy de Termina\u00e7\u00e3o TLS","text":"<p>Se voc\u00ea est\u00e1 executando seu cont\u00eainer atr\u00e1s de um Proxy de Termina\u00e7\u00e3o TLS (load balancer) como Nginx ou Traefik, adicione a op\u00e7\u00e3o <code>--proxy-headers</code>, isso far\u00e1 com que o Uvicorn confie nos cabe\u00e7alhos enviados por esse proxy, informando que o aplicativo est\u00e1 sendo executado atr\u00e1s do HTTPS, etc.</p> <pre><code>CMD [\"uvicorn\", \"app.main:app\", \"--proxy-headers\", \"--host\", \"0.0.0.0\", \"--port\", \"80\"]\n</code></pre>"},{"location":"deployment/docker/#cache-docker","title":"Cache Docker","text":"<p>Existe um truque importante nesse <code>Dockerfile</code>, primeiro copiamos o arquivo com as depend\u00eancias sozinho, n\u00e3o o resto do c\u00f3digo. Deixe-me te contar o porqu\u00ea disso.</p> <pre><code>COPY ./requirements.txt /code/requirements.txt\n</code></pre> <p>Docker e outras ferramentas constr\u00f3em essas imagens de cont\u00eainer incrementalmente, adicionando uma camada em cima da outra, come\u00e7ando do topo do <code>Dockerfile</code> e adicionando qualquer arquivo criado por cada uma das instru\u00e7\u00f5es do <code>Dockerfile</code>.</p> <p>Docker e ferramentas similares tamb\u00e9m usam um cache interno ao construir a imagem, se um arquivo n\u00e3o mudou desde a \u00faltima vez que a imagem do cont\u00eainer foi constru\u00edda, ent\u00e3o ele ir\u00e1 reutilizar a mesma camada criada na \u00faltima vez, ao inv\u00e9s de copiar o arquivo novamente e criar uma nova camada do zero.</p> <p>Somente evitar a c\u00f3pia de arquivos n\u00e3o melhora muito as coisas, mas porque ele usou o cache para esse passo, ele pode usar o cache para o pr\u00f3ximo passo. Por exemplo, ele pode usar o cache para a instru\u00e7\u00e3o que instala as depend\u00eancias com:</p> <pre><code>RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt\n</code></pre> <p>O arquivo com os requisitos de pacote n\u00e3o muda com frequ\u00eancia. Ent\u00e3o, ao copiar apenas esse arquivo, o Docker ser\u00e1 capaz de usar o cache para esse passo.</p> <p>E ent\u00e3o, o Docker ser\u00e1 capaz de usar o cache para o pr\u00f3ximo passo que baixa e instala essas depend\u00eancias. E \u00e9 aqui que salvamos muito tempo. \u2728 ...e evitamos t\u00e9dio esperando. \ud83d\ude2a\ud83d\ude06</p> <p>Baixar e instalar as depend\u00eancias do pacote pode levar minutos, mas usando o cache leva segundos no m\u00e1ximo.</p> <p>E como voc\u00ea estaria construindo a imagem do cont\u00eainer novamente e novamente durante o desenvolvimento para verificar se suas altera\u00e7\u00f5es de c\u00f3digo est\u00e3o funcionando, h\u00e1 muito tempo acumulado que isso economizaria.</p> <p>A partir da\u00ed, perto do final do <code>Dockerfile</code>, copiamos todo o c\u00f3digo. Como isso \u00e9 o que muda com mais frequ\u00eancia, colocamos perto do final, porque quase sempre, qualquer coisa depois desse passo n\u00e3o ser\u00e1 capaz de usar o cache.</p> <pre><code>COPY ./app /code/app\n</code></pre>"},{"location":"deployment/docker/#construindo-a-imagem-docker","title":"Construindo a Imagem Docker","text":"<p>Agora que todos os arquivos est\u00e3o no lugar, vamos construir a imagem do cont\u00eainer.</p> <ul> <li>V\u00e1 para o diret\u00f3rio do projeto (onde est\u00e1 o seu <code>Dockerfile</code>, contendo o diret\u00f3rio <code>app</code>).</li> <li>Construa sua imagem ReadyAPI:</li> </ul> <pre><code>$ docker build -t myimage .\n\n---&gt; 100%\n</code></pre> <p>Tip</p> <p>Note o <code>.</code> no final, \u00e9 equivalente a <code>./</code>, ele diz ao Docker o diret\u00f3rio a ser usado para construir a imagem do cont\u00eainer.</p> <p>Nesse caso, \u00e9 o mesmo diret\u00f3rio atual (<code>.</code>).</p>"},{"location":"deployment/docker/#inicie-o-conteiner-docker","title":"Inicie o cont\u00eainer Docker","text":"<ul> <li>Execute um cont\u00eainer baseado na sua imagem:</li> </ul> <pre><code>$ docker run -d --name mycont\u00eainer -p 80:80 myimage\n</code></pre>"},{"location":"deployment/docker/#verifique","title":"Verifique","text":"<p>Voc\u00ea deve ser capaz de verificar isso no URL do seu cont\u00eainer Docker, por exemplo: http://192.168.99.100/items/5?q=somequery ou http://127.0.0.1/items/5?q=somequery (ou equivalente, usando seu host Docker).</p> <p>Voc\u00ea ver\u00e1 algo como:</p> <pre><code>{\"item_id\": 5, \"q\": \"somequery\"}\n</code></pre>"},{"location":"deployment/docker/#documentacao-interativa-da-api","title":"Documenta\u00e7\u00e3o interativa da API","text":"<p>Agora voc\u00ea pode ir para http://192.168.99.100/docs ou http://127.0.0.1/docs (ou equivalente, usando seu host Docker).</p> <p>Voc\u00ea ver\u00e1 a documenta\u00e7\u00e3o interativa autom\u00e1tica da API (fornecida pelo Swagger UI):</p> <p></p>"},{"location":"deployment/docker/#documentacao-alternativa-da-api","title":"Documenta\u00e7\u00e3o alternativa da API","text":"<p>E voc\u00ea tamb\u00e9m pode ir para http://192.168.99.100/redoc ou http://127.0.0.1/redoc (ou equivalente, usando seu host Docker).</p> <p>Voc\u00ea ver\u00e1 a documenta\u00e7\u00e3o alternativa autom\u00e1tica (fornecida pela ReDoc):</p> <p></p>"},{"location":"deployment/docker/#construindo-uma-imagem-docker-com-um-arquivo-unico-readyapi","title":"Construindo uma Imagem Docker com um Arquivo \u00danico ReadyAPI","text":"<p>Se seu ReadyAPI for um \u00fanico arquivo, por exemplo, <code>main.py</code> sem um diret\u00f3rio <code>./app</code>, sua estrutura de arquivos poderia ser assim:</p> <pre><code>.\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 main.py\n\u2514\u2500\u2500 requirements.txt\n</code></pre> <p>Ent\u00e3o voc\u00ea s\u00f3 teria que alterar os caminhos correspondentes para copiar o arquivo dentro do <code>Dockerfile</code>:</p> <pre><code>FROM python:3.9\n\nWORKDIR /code\n\nCOPY ./requirements.txt /code/requirements.txt\n\nRUN pip install --no-cache-dir --upgrade -r /code/requirements.txt\n\n# (1)\nCOPY ./main.py /code/\n\n# (2)\nCMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"80\"]\n</code></pre> <ol> <li> <p>Copie o arquivo <code>main.py</code> para o diret\u00f3rio <code>/code</code> diretamente (sem nenhum diret\u00f3rio <code>./app</code>).</p> </li> <li> <p>Execute o Uvicorn e diga a ele para importar o objeto <code>app</code> de <code>main</code> (em vez de importar de <code>app.main</code>).</p> </li> </ol> <p>Ent\u00e3o ajuste o comando Uvicorn para usar o novo m\u00f3dulo <code>main</code> em vez de <code>app.main</code> para importar o objeto ReadyAPI <code>app</code>.</p>"},{"location":"deployment/docker/#conceitos-de-implantacao","title":"Conceitos de Implanta\u00e7\u00e3o","text":"<p>Vamos falar novamente sobre alguns dos mesmos Conceitos de Implanta\u00e7\u00e3o em termos de cont\u00eaineres.</p> <p>Cont\u00eaineres s\u00e3o principalmente uma ferramenta para simplificar o processo de constru\u00e7\u00e3o e implanta\u00e7\u00e3o de um aplicativo, mas eles n\u00e3o imp\u00f5em uma abordagem particular para lidar com esses conceitos de implanta\u00e7\u00e3o e existem v\u00e1rias estrat\u00e9gias poss\u00edveis.</p> <p>A boa not\u00edcia \u00e9 que com cada estrat\u00e9gia diferente h\u00e1 uma maneira de cobrir todos os conceitos de implanta\u00e7\u00e3o. \ud83c\udf89</p> <p>Vamos revisar esses conceitos de implanta\u00e7\u00e3o em termos de cont\u00eaineres:</p> <ul> <li>HTTPS</li> <li>Executando na inicializa\u00e7\u00e3o</li> <li>Reinicializa\u00e7\u00f5es</li> <li>Replica\u00e7\u00e3o (n\u00famero de processos rodando)</li> <li>Mem\u00f3ria</li> <li>Passos anteriores antes de come\u00e7ar</li> </ul>"},{"location":"deployment/docker/#https","title":"HTTPS","text":"<p>Se nos concentrarmos apenas na imagem do cont\u00eainer para um aplicativo ReadyAPI (e posteriormente no cont\u00eainer em execu\u00e7\u00e3o), o HTTPS normalmente seria tratado externamente por outra ferramenta.</p> <p>Isso poderia ser outro cont\u00eainer, por exemplo, com Traefik, lidando com HTTPS e aquisi\u00e7\u00e3o autom\u00e1tica de certificados.</p> <p>Tip</p> <p>Traefik tem integra\u00e7\u00f5es com Docker, Kubernetes e outros, portanto, \u00e9 muito f\u00e1cil configurar e configurar o HTTPS para seus cont\u00eaineres com ele.</p> <p>Alternativamente, o HTTPS poderia ser tratado por um provedor de nuvem como um de seus servi\u00e7os (enquanto ainda executasse o aplicativo em um cont\u00eainer).</p>"},{"location":"deployment/docker/#executando-na-inicializacao-e-reinicializacoes","title":"Executando na inicializa\u00e7\u00e3o e reinicializa\u00e7\u00f5es","text":"<p>Normalmente, outra ferramenta \u00e9 respons\u00e1vel por iniciar e executar seu cont\u00eainer.</p> <p>Ela poderia ser o Docker diretamente, Docker Compose, Kubernetes, um servi\u00e7o de nuvem, etc.</p> <p>Na maioria (ou em todos) os casos, h\u00e1 uma op\u00e7\u00e3o simples para habilitar a execu\u00e7\u00e3o do cont\u00eainer na inicializa\u00e7\u00e3o e habilitar reinicializa\u00e7\u00f5es em falhas. Por exemplo, no Docker, \u00e9 a op\u00e7\u00e3o de linha de comando <code>--restart</code>.</p> <p>Sem usar cont\u00eaineres, fazer aplicativos executarem na inicializa\u00e7\u00e3o e com reinicializa\u00e7\u00f5es pode ser trabalhoso e dif\u00edcil. Mas quando trabalhando com cont\u00eaineres em muitos casos essa funcionalidade \u00e9 inclu\u00edda por padr\u00e3o. \u2728</p>"},{"location":"deployment/docker/#replicacao-numero-de-processos","title":"Replica\u00e7\u00e3o - N\u00famero de Processos","text":"<p>Se voc\u00ea tiver um cluster de m\u00e1quinas com Kubernetes, Docker Swarm Mode, Nomad ou outro sistema complexo semelhante para gerenciar cont\u00eaineres distribu\u00eddos em v\u00e1rias m\u00e1quinas, ent\u00e3o provavelmente desejar\u00e1 lidar com a replica\u00e7\u00e3o no n\u00edvel do cluster em vez de usar um gerenciador de processos (como o Gunicorn com workers) em cada cont\u00eainer.</p> <p>Um desses sistemas de gerenciamento de cont\u00eaineres distribu\u00eddos como o Kubernetes normalmente tem alguma maneira integrada de lidar com a replica\u00e7\u00e3o de cont\u00eaineres enquanto ainda oferece balanceamento de carga para as solicita\u00e7\u00f5es recebidas. Tudo no n\u00edvel do cluster.</p> <p>Nesses casos, voc\u00ea provavelmente desejar\u00e1 criar uma imagem do cont\u00eainer do zero como explicado acima, instalando suas depend\u00eancias e executando um \u00fanico processo Uvicorn em vez de executar algo como Gunicorn com trabalhadores Uvicorn.</p>"},{"location":"deployment/docker/#balanceamento-de-carga","title":"Balanceamento de Carga","text":"<p>Quando usando cont\u00eaineres, normalmente voc\u00ea ter\u00e1 algum componente escutando na porta principal. Poderia ser outro cont\u00eainer que tamb\u00e9m \u00e9 um Proxy de Termina\u00e7\u00e3o TLS para lidar com HTTPS ou alguma ferramenta semelhante.</p> <p>Como esse componente assumiria a carga de solicita\u00e7\u00f5es e distribuiria isso entre os trabalhadores de uma maneira (esperan\u00e7osamente) balanceada, ele tamb\u00e9m \u00e9 comumente chamado de Balanceador de Carga.</p> <p>Tip</p> <p>O mesmo componente Proxy de Termina\u00e7\u00e3o TLS usado para HTTPS provavelmente tamb\u00e9m seria um Balanceador de Carga.</p> <p>E quando trabalhar com cont\u00eaineres, o mesmo sistema que voc\u00ea usa para iniciar e gerenci\u00e1-los j\u00e1 ter\u00e1 ferramentas internas para transmitir a comunica\u00e7\u00e3o de rede (por exemplo, solicita\u00e7\u00f5es HTTP) do balanceador de carga (que tamb\u00e9m pode ser um Proxy de Termina\u00e7\u00e3o TLS) para o(s) cont\u00eainer(es) com seu aplicativo.</p>"},{"location":"deployment/docker/#um-balanceador-de-carga-multiplos-conteineres-de-workers","title":"Um Balanceador de Carga - M\u00faltiplos Cont\u00eaineres de Workers","text":"<p>Quando trabalhando com Kubernetes ou sistemas similares de gerenciamento de cont\u00eainer distribu\u00eddo, usando seus mecanismos de rede internos permitiria que o \u00fanico balanceador de carga que estivesse escutando na porta principal transmitisse comunica\u00e7\u00e3o (solicita\u00e7\u00f5es) para possivelmente m\u00faltiplos cont\u00eaineres executando seu aplicativo.</p> <p>Cada um desses cont\u00eaineres executando seu aplicativo normalmente teria apenas um processo (ex.: um processo Uvicorn executando seu aplicativo ReadyAPI). Todos seriam cont\u00eaineres id\u00eanticos, executando a mesma coisa, mas cada um com seu pr\u00f3prio processo, mem\u00f3ria, etc. Dessa forma, voc\u00ea aproveitaria a paraleliza\u00e7\u00e3o em n\u00facleos diferentes da CPU, ou at\u00e9 mesmo em m\u00e1quinas diferentes.</p> <p>E o sistema de cont\u00eainer com o balanceador de carga iria distribuir as solicita\u00e7\u00f5es para cada um dos cont\u00eaineres com seu aplicativo em turnos. Portanto, cada solicita\u00e7\u00e3o poderia ser tratada por um dos m\u00faltiplos cont\u00eaineres replicados executando seu aplicativo.</p> <p>E normalmente esse balanceador de carga seria capaz de lidar com solicita\u00e7\u00f5es que v\u00e3o para outros aplicativos em seu cluster (por exemplo, para um dom\u00ednio diferente, ou sob um prefixo de URL diferente), e transmitiria essa comunica\u00e7\u00e3o para os cont\u00eaineres certos para esse outro aplicativo em execu\u00e7\u00e3o em seu cluster.</p>"},{"location":"deployment/docker/#um-processo-por-conteiner","title":"Um Processo por Cont\u00eainer","text":"<p>Nesse tipo de cen\u00e1rio, provavelmente voc\u00ea desejar\u00e1 ter um \u00fanico processo (Uvicorn) por cont\u00eainer, pois j\u00e1 estaria lidando com a replica\u00e7\u00e3o no n\u00edvel do cluster.</p> <p>Ent\u00e3o, nesse caso, voc\u00ea n\u00e3o desejar\u00e1 ter um gerenciador de processos como o Gunicorn com trabalhadores Uvicorn, ou o Uvicorn usando seus pr\u00f3prios trabalhadores Uvicorn. Voc\u00ea desejar\u00e1 ter apenas um \u00fanico processo Uvicorn por cont\u00eainer (mas provavelmente v\u00e1rios cont\u00eaineres).</p> <p>Tendo outro gerenciador de processos dentro do cont\u00eainer (como seria com o Gunicorn ou o Uvicorn gerenciando trabalhadores Uvicorn) s\u00f3 adicionaria complexidade desnecess\u00e1ria que voc\u00ea provavelmente j\u00e1 est\u00e1 cuidando com seu sistema de cluster.</p>"},{"location":"deployment/docker/#conteineres-com-multiplos-processos-e-casos-especiais","title":"Cont\u00eaineres com M\u00faltiplos Processos e Casos Especiais","text":"<p>Claro, existem casos especiais em que voc\u00ea pode querer ter um cont\u00eainer com um gerenciador de processos Gunicorn iniciando v\u00e1rios processos trabalhadores Uvicorn dentro.</p> <p>Nesses casos, voc\u00ea pode usar a imagem oficial do Docker que inclui o Gunicorn como um gerenciador de processos executando v\u00e1rios processos trabalhadores Uvicorn, e algumas configura\u00e7\u00f5es padr\u00e3o para ajustar o n\u00famero de trabalhadores com base nos atuais n\u00facleos da CPU automaticamente. Eu vou te contar mais sobre isso abaixo em Imagem Oficial do Docker com Gunicorn - Uvicorn.</p> <p>Aqui est\u00e3o alguns exemplos de quando isso pode fazer sentido:</p>"},{"location":"deployment/docker/#um-aplicativo-simples","title":"Um Aplicativo Simples","text":"<p>Voc\u00ea pode querer um gerenciador de processos no cont\u00eainer se seu aplicativo for simples o suficiente para que voc\u00ea n\u00e3o precise (pelo menos n\u00e3o agora) ajustar muito o n\u00famero de processos, e voc\u00ea pode simplesmente usar um padr\u00e3o automatizado (com a imagem oficial do Docker), e voc\u00ea est\u00e1 executando em um \u00fanico servidor, n\u00e3o em um cluster.</p>"},{"location":"deployment/docker/#docker-compose","title":"Docker Compose","text":"<p>Voc\u00ea pode estar implantando em um \u00fanico servidor (n\u00e3o em um cluster) com o Docker Compose, ent\u00e3o voc\u00ea n\u00e3o teria uma maneira f\u00e1cil de gerenciar a replica\u00e7\u00e3o de cont\u00eaineres (com o Docker Compose) enquanto preserva a rede compartilhada e o balanceamento de carga.</p> <p>Ent\u00e3o voc\u00ea pode querer ter um \u00fanico cont\u00eainer com um gerenciador de processos iniciando v\u00e1rios processos trabalhadores dentro.</p>"},{"location":"deployment/docker/#prometheus-and-outros-motivos","title":"Prometheus and Outros Motivos","text":"<p>Voc\u00ea tamb\u00e9m pode ter outros motivos que tornariam mais f\u00e1cil ter um \u00fanico cont\u00eainer com m\u00faltiplos processos em vez de ter m\u00faltiplos cont\u00eaineres com um \u00fanico processo em cada um deles.</p> <p>Por exemplo (dependendo de sua configura\u00e7\u00e3o), voc\u00ea poderia ter alguma ferramenta como um exportador do Prometheus no mesmo cont\u00eainer que deve ter acesso a cada uma das solicita\u00e7\u00f5es que chegam.</p> <p>Nesse caso, se voc\u00ea tivesse m\u00faltiplos cont\u00eaineres, por padr\u00e3o, quando o Prometheus fosse ler as m\u00e9tricas, ele receberia as m\u00e9tricas de um \u00fanico cont\u00eainer cada vez (para o cont\u00eainer que tratou essa solicita\u00e7\u00e3o espec\u00edfica), em vez de receber as m\u00e9tricas acumuladas de todos os cont\u00eaineres replicados.</p> <p>Ent\u00e3o, nesse caso, poderia ser mais simples ter um \u00fanico cont\u00eainer com m\u00faltiplos processos, e uma ferramenta local (por exemplo, um exportador do Prometheus) no mesmo cont\u00eainer coletando m\u00e9tricas do Prometheus para todos os processos internos e expor essas m\u00e9tricas no \u00fanico cont\u00eainer.</p> <p>O ponto principal \u00e9 que nenhum desses s\u00e3o regras escritas em pedra que voc\u00ea deve seguir cegamente. Voc\u00ea pode usar essas id\u00e9ias para avaliar seu pr\u00f3prio caso de uso e decidir qual \u00e9 a melhor abordagem para seu sistema, verificando como gerenciar os conceitos de:</p> <ul> <li>Seguran\u00e7a - HTTPS</li> <li>Executando na inicializa\u00e7\u00e3o</li> <li>Reinicializa\u00e7\u00f5es</li> <li>Replica\u00e7\u00e3o (o n\u00famero de processos em execu\u00e7\u00e3o)</li> <li>Mem\u00f3ria</li> <li>Passos anteriores antes de inicializar</li> </ul>"},{"location":"deployment/docker/#memoria","title":"Mem\u00f3ria","text":"<p>Se voc\u00ea executar um \u00fanico processo por cont\u00eainer, ter\u00e1 uma quantidade mais ou menos bem definida, est\u00e1vel e limitada de mem\u00f3ria consumida por cada um desses cont\u00eaineres (mais de um se eles forem replicados).</p> <p>E ent\u00e3o voc\u00ea pode definir esses mesmos limites e requisitos de mem\u00f3ria em suas configura\u00e7\u00f5es para seu sistema de gerenciamento de cont\u00eaineres (por exemplo, no Kubernetes). Dessa forma, ele poder\u00e1 replicar os cont\u00eaineres nas m\u00e1quinas dispon\u00edveis levando em considera\u00e7\u00e3o a quantidade de mem\u00f3ria necess\u00e1ria por eles e a quantidade dispon\u00edvel nas m\u00e1quinas no cluster.</p> <p>Se sua aplica\u00e7\u00e3o for simples, isso provavelmente n\u00e3o ser\u00e1 um problema, e voc\u00ea pode n\u00e3o precisar especificar limites de mem\u00f3ria r\u00edgidos. Mas se voc\u00ea estiver usando muita mem\u00f3ria (por exemplo, com modelos de aprendizado de m\u00e1quina), deve verificar quanta mem\u00f3ria est\u00e1 consumindo e ajustar o n\u00famero de cont\u00eaineres que executa em cada m\u00e1quina (e talvez adicionar mais m\u00e1quinas ao seu cluster).</p> <p>Se voc\u00ea executar m\u00faltiplos processos por cont\u00eainer (por exemplo, com a imagem oficial do Docker), deve garantir que o n\u00famero de processos iniciados n\u00e3o consuma mais mem\u00f3ria do que o dispon\u00edvel.</p>"},{"location":"deployment/docker/#passos-anteriores-antes-de-inicializar-e-conteineres","title":"Passos anteriores antes de inicializar e cont\u00eaineres","text":"<p>Se voc\u00ea estiver usando cont\u00eaineres (por exemplo, Docker, Kubernetes), existem duas abordagens principais que voc\u00ea pode usar.</p>"},{"location":"deployment/docker/#conteineres-multiplos","title":"Cont\u00eaineres M\u00faltiplos","text":"<p>Se voc\u00ea tiver m\u00faltiplos cont\u00eaineres, provavelmente cada um executando um \u00fanico processo (por exemplo, em um cluster do Kubernetes), ent\u00e3o provavelmente voc\u00ea gostaria de ter um cont\u00eainer separado fazendo o trabalho dos passos anteriores em um \u00fanico cont\u00eainer, executando um \u00fanico processo, antes de executar os cont\u00eaineres trabalhadores replicados.</p> <p>Info</p> <p>Se voc\u00ea estiver usando o Kubernetes, provavelmente ser\u00e1 um Init Container.</p> <p>Se no seu caso de uso n\u00e3o houver problema em executar esses passos anteriores em paralelo v\u00e1rias vezes (por exemplo, se voc\u00ea n\u00e3o estiver executando migra\u00e7\u00f5es de banco de dados, mas apenas verificando se o banco de dados est\u00e1 pronto), ent\u00e3o voc\u00ea tamb\u00e9m pode coloc\u00e1-los em cada cont\u00eainer logo antes de iniciar o processo principal.</p>"},{"location":"deployment/docker/#conteiner-unico","title":"Cont\u00eainer \u00danico","text":"<p>Se voc\u00ea tiver uma configura\u00e7\u00e3o simples, com um \u00fanico cont\u00eainer que ent\u00e3o inicia v\u00e1rios processos trabalhadores (ou tamb\u00e9m apenas um processo), ent\u00e3o poderia executar esses passos anteriores no mesmo cont\u00eainer, logo antes de iniciar o processo com o aplicativo. A imagem oficial do Docker suporta isso internamente.</p>"},{"location":"deployment/docker/#imagem-oficial-do-docker-com-gunicorn-uvicorn","title":"Imagem Oficial do Docker com Gunicorn - Uvicorn","text":"<p>H\u00e1 uma imagem oficial do Docker que inclui o Gunicorn executando com trabalhadores Uvicorn, conforme detalhado em um cap\u00edtulo anterior: Server Workers - Gunicorn com Uvicorn.</p> <p>Essa imagem seria \u00fatil principalmente nas situa\u00e7\u00f5es descritas acima em: Cont\u00eaineres com M\u00faltiplos Processos e Casos Especiais.</p> <ul> <li>khulnasoft/uvicorn-gunicorn-readyapi.</li> </ul> <p>Warning</p> <p>Existe uma grande chance de que voc\u00ea n\u00e3o precise dessa imagem base ou de qualquer outra semelhante, e seria melhor construir a imagem do zero, como descrito acima em: Construa uma Imagem Docker para o ReadyAPI.</p> <p>Essa imagem tem um mecanismo de auto-ajuste inclu\u00eddo para definir o n\u00famero de processos trabalhadores com base nos n\u00facleos de CPU dispon\u00edveis.</p> <p>Isso tem padr\u00f5es sens\u00edveis, mas voc\u00ea ainda pode alterar e atualizar todas as configura\u00e7\u00f5es com vari\u00e1veis de ambiente ou arquivos de configura\u00e7\u00e3o.</p> <p>H\u00e1 tamb\u00e9m suporte para executar passos anteriores antes de iniciar com um script.</p> <p>Tip</p> <p>Para ver todas as configura\u00e7\u00f5es e op\u00e7\u00f5es, v\u00e1 para a p\u00e1gina da imagem Docker:  khulnasoft/uvicorn-gunicorn-readyapi.</p>"},{"location":"deployment/docker/#numero-de-processos-na-imagem-oficial-do-docker","title":"N\u00famero de Processos na Imagem Oficial do Docker","text":"<p>O n\u00famero de processos nesta imagem \u00e9 calculado automaticamente a partir dos n\u00facleos de CPU dispon\u00edveis.</p> <p>Isso significa que ele tentar\u00e1 aproveitar o m\u00e1ximo de desempenho da CPU poss\u00edvel.</p> <p>Voc\u00ea tamb\u00e9m pode ajust\u00e1-lo com as configura\u00e7\u00f5es usando vari\u00e1veis de ambiente, etc.</p> <p>Mas isso tamb\u00e9m significa que, como o n\u00famero de processos depende da CPU do cont\u00eainer em execu\u00e7\u00e3o, a quantidade de mem\u00f3ria consumida tamb\u00e9m depender\u00e1 disso.</p> <p>Ent\u00e3o, se seu aplicativo consumir muito mem\u00f3ria (por exemplo, com modelos de aprendizado de m\u00e1quina), e seu servidor tiver muitos n\u00facleos de CPU mas pouca mem\u00f3ria, ent\u00e3o seu cont\u00eainer pode acabar tentando usar mais mem\u00f3ria do que est\u00e1 dispon\u00edvel e degradar o desempenho muito (ou at\u00e9 mesmo travar). \ud83d\udea8</p>"},{"location":"deployment/docker/#criando-um-dockerfile","title":"Criando um <code>Dockerfile</code>","text":"<p>Aqui est\u00e1 como voc\u00ea criaria um <code>Dockerfile</code> baseado nessa imagem:</p> <pre><code>FROM khulnasoft/uvicorn-gunicorn-readyapi:python3.9\n\nCOPY ./requirements.txt /app/requirements.txt\n\nRUN pip install --no-cache-dir --upgrade -r /app/requirements.txt\n\nCOPY ./app /app\n</code></pre>"},{"location":"deployment/docker/#aplicacoes-maiores","title":"Aplica\u00e7\u00f5es Maiores","text":"<p>Se voc\u00ea seguiu a se\u00e7\u00e3o sobre a cria\u00e7\u00e3o de Aplica\u00e7\u00f5es Maiores com M\u00faltiplos Arquivos, seu <code>Dockerfile</code> pode parecer com isso:</p> <pre><code>```Dockerfile hl_lines=\"7\"\nFROM khulnasoft/uvicorn-gunicorn-readyapi:python3.9\n\nCOPY ./requirements.txt /app/requirements.txt\n\nRUN pip install --no-cache-dir --upgrade -r /app/requirements.txt\n\nCOPY ./app /app/app\n</code></pre>"},{"location":"deployment/docker/#quando-usar","title":"Quando Usar","text":"<p>Voc\u00ea provavelmente n\u00e3o deve usar essa imagem base oficial (ou qualquer outra semelhante) se estiver usando Kubernetes (ou outros) e j\u00e1 estiver definindo replica\u00e7\u00e3o no n\u00edvel do cluster, com v\u00e1rios cont\u00eaineres. Nesses casos, \u00e9 melhor construir uma imagem do zero conforme descrito acima: Construindo uma Imagem Docker para ReadyAPI.</p> <p>Essa imagem seria \u00fatil principalmente nos casos especiais descritos acima em Cont\u00eaineres com M\u00faltiplos Processos e Casos Especiais. Por exemplo, se sua aplica\u00e7\u00e3o for simples o suficiente para que a configura\u00e7\u00e3o padr\u00e3o de n\u00famero de processos com base na CPU funcione bem, voc\u00ea n\u00e3o quer se preocupar com a configura\u00e7\u00e3o manual da replica\u00e7\u00e3o no n\u00edvel do cluster e n\u00e3o est\u00e1 executando mais de um cont\u00eainer com seu aplicativo. Ou se voc\u00ea estiver implantando com Docker Compose, executando em um \u00fanico servidor, etc.</p>"},{"location":"deployment/docker/#deploy-da-imagem-do-conteiner","title":"Deploy da Imagem do Cont\u00eainer","text":"<p>Depois de ter uma imagem de cont\u00eainer (Docker), existem v\u00e1rias maneiras de implant\u00e1-la.</p> <p>Por exemplo:</p> <ul> <li>Com Docker Compose em um \u00fanico servidor</li> <li>Com um cluster Kubernetes</li> <li>Com um cluster Docker Swarm Mode</li> <li>Com outra ferramenta como o Nomad</li> <li>Com um servi\u00e7o de nuvem que pega sua imagem de cont\u00eainer e a implanta</li> </ul>"},{"location":"deployment/docker/#imagem-docker-com-poetry","title":"Imagem Docker com Poetry","text":"<p>Se voc\u00ea usa Poetry para gerenciar as depend\u00eancias do seu projeto, pode usar a constru\u00e7\u00e3o multi-est\u00e1gio do Docker:</p> <pre><code># (1)\nFROM python:3.9 as requirements-stage\n\n# (2)\nWORKDIR /tmp\n\n# (3)\nRUN pip install poetry\n\n# (4)\nCOPY ./pyproject.toml ./poetry.lock* /tmp/\n\n# (5)\nRUN poetry export -f requirements.txt --output requirements.txt --without-hashes\n\n# (6)\nFROM python:3.9\n\n# (7)\nWORKDIR /code\n\n# (8)\nCOPY --from=requirements-stage /tmp/requirements.txt /code/requirements.txt\n\n# (9)\nRUN pip install --no-cache-dir --upgrade -r /code/requirements.txt\n\n# (10)\nCOPY ./app /code/app\n\n# (11)\nCMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"80\"]\n</code></pre> <ol> <li> <p>Esse \u00e9 o primeiro est\u00e1gio, ele \u00e9 chamado <code>requirements-stage</code>.</p> </li> <li> <p>Defina <code>/tmp</code> como o diret\u00f3rio de trabalho atual.</p> <p>Aqui \u00e9 onde geraremos o arquivo <code>requirements.txt</code></p> </li> <li> <p>Instale o Poetry nesse est\u00e1gio do Docker.</p> </li> <li> <p>Copie os arquivos <code>pyproject.toml</code> e <code>poetry.lock</code> para o diret\u00f3rio <code>/tmp</code>.</p> <p>Porque est\u00e1 usando <code>./poetry.lock*</code> (terminando com um <code>*</code>), n\u00e3o ir\u00e1 falhar se esse arquivo ainda n\u00e3o estiver dispon\u00edvel.</p> </li> <li> <p>Gere o arquivo <code>requirements.txt</code>.</p> </li> <li> <p>Este \u00e9 o est\u00e1gio final, tudo aqui ser\u00e1 preservado na imagem final do cont\u00eainer.</p> </li> <li> <p>Defina o diret\u00f3rio de trabalho atual como <code>/code</code>.</p> </li> <li> <p>Copie o arquivo <code>requirements.txt</code> para o diret\u00f3rio <code>/code</code>.</p> <p>Essse arquivo s\u00f3 existe no est\u00e1gio anterior do Docker, \u00e9 por isso que usamos <code>--from-requirements-stage</code> para copi\u00e1-lo.</p> </li> <li> <p>Instale as depend\u00eancias de pacote do arquivo <code>requirements.txt</code> gerado.</p> </li> <li> <p>Copie o diret\u00f3rio <code>app</code> para o diret\u00f3rio <code>/code</code>.</p> </li> <li> <p>Execute o comando <code>uvicorn</code>, informando-o para usar o objeto <code>app</code> importado de <code>app.main</code>.</p> </li> </ol> <p>Tip</p> <p>Clique nos n\u00fameros das bolhas para ver o que cada linha faz.</p> <p>Um est\u00e1gio do Docker \u00e9 uma parte de um <code>Dockerfile</code> que funciona como uma imagem tempor\u00e1ria do cont\u00eainer que s\u00f3 \u00e9 usada para gerar alguns arquivos para serem usados posteriormente.</p> <p>O primeiro est\u00e1gio ser\u00e1 usado apenas para instalar Poetry e para gerar o <code>requirements.txt</code> com as depend\u00eancias do seu projeto a partir do arquivo <code>pyproject.toml</code> do Poetry.</p> <p>Esse arquivo <code>requirements.txt</code> ser\u00e1 usado com <code>pip</code> mais tarde no pr\u00f3ximo est\u00e1gio.</p> <p>Na imagem final do cont\u00eainer, somente o est\u00e1gio final \u00e9 preservado. Os est\u00e1gios anteriores ser\u00e3o descartados.</p> <p>Quando usar Poetry, faz sentido usar constru\u00e7\u00f5es multi-est\u00e1gio do Docker porque voc\u00ea realmente n\u00e3o precisa ter o Poetry e suas depend\u00eancias instaladas na imagem final do cont\u00eainer, voc\u00ea apenas precisa ter o arquivo <code>requirements.txt</code> gerado para instalar as depend\u00eancias do seu projeto.</p> <p>Ent\u00e3o, no pr\u00f3ximo (e \u00faltimo) est\u00e1gio, voc\u00ea construiria a imagem mais ou menos da mesma maneira descrita anteriormente.</p>"},{"location":"deployment/docker/#por-tras-de-um-proxy-de-terminacao-tls-poetry","title":"Por tr\u00e1s de um proxy de termina\u00e7\u00e3o TLS - Poetry","text":"<p>Novamente, se voc\u00ea estiver executando seu cont\u00eainer atr\u00e1s de um proxy de termina\u00e7\u00e3o TLS (balanceador de carga) como Nginx ou Traefik, adicione a op\u00e7\u00e3o <code>--proxy-headers</code> ao comando:</p> <pre><code>CMD [\"uvicorn\", \"app.main:app\", \"--proxy-headers\", \"--host\", \"0.0.0.0\", \"--port\", \"80\"]\n</code></pre>"},{"location":"deployment/docker/#recapitulando","title":"Recapitulando","text":"<p>Usando sistemas de cont\u00eainer (por exemplo, com Docker e Kubernetes), torna-se bastante simples lidar com todos os conceitos de implanta\u00e7\u00e3o:</p> <ul> <li>HTTPS</li> <li>Executando na inicializa\u00e7\u00e3o</li> <li>Rein\u00edcios</li> <li>Replica\u00e7\u00e3o (o n\u00famero de processos rodando)</li> <li>Mem\u00f3ria</li> <li>Passos anteriores antes de inicializar</li> </ul> <p>Na maioria dos casos, voc\u00ea provavelmente n\u00e3o desejar\u00e1 usar nenhuma imagem base e, em vez disso, construir uma imagem de cont\u00eainer do zero baseada na imagem oficial do Docker Python.</p> <p>Tendo cuidado com a ordem das instru\u00e7\u00f5es no <code>Dockerfile</code> e o cache do Docker, voc\u00ea pode minimizar os tempos de constru\u00e7\u00e3o, para maximizar sua produtividade (e evitar a t\u00e9dio). \ud83d\ude0e</p> <p>Em alguns casos especiais, voc\u00ea pode querer usar a imagem oficial do Docker para o ReadyAPI. \ud83e\udd13</p>"},{"location":"deployment/https/","title":"Sobre HTTPS","text":"<p>\u00c9 f\u00e1cil assumir que HTTPS \u00e9 algo que \u00e9 apenas \"habilitado\" ou n\u00e3o.</p> <p>Mas \u00e9 bem mais complexo do que isso.</p> <p>Dica</p> <p>Se voc\u00ea est\u00e1 com pressa ou n\u00e3o se importa, continue com as se\u00e7\u00f5es seguintes para instru\u00e7\u00f5es passo a passo para configurar tudo com diferentes t\u00e9cnicas.</p> <p>Para aprender o b\u00e1sico de HTTPS de uma perspectiva do usu\u00e1rio, verifique https://howhttps.works/pt-br/.</p> <p>Agora, a partir de uma perspectiva do desenvolvedor, aqui est\u00e3o algumas coisas para ter em mente ao pensar em HTTPS:</p> <ul> <li>Para HTTPS, o servidor precisa ter certificados gerados por um terceiro.<ul> <li>Esses certificados s\u00e3o na verdade adquiridos de um terceiro, eles n\u00e3o s\u00e3o simplesmente \"gerados\".</li> </ul> </li> <li>Certificados t\u00eam um tempo de vida.<ul> <li>Eles expiram.</li> <li>E ent\u00e3o eles precisam ser renovados, adquirindo-os novamente de um terceiro.</li> </ul> </li> <li>A criptografia da conex\u00e3o acontece no n\u00edvel TCP.<ul> <li>Essa \u00e9 uma camada abaixo do HTTP.</li> <li>Portanto, o manuseio do certificado e da criptografia \u00e9 feito antes do HTTP.</li> </ul> </li> <li>O TCP n\u00e3o sabe sobre \"dom\u00ednios\". Apenas sobre endere\u00e7os IP.<ul> <li>As informa\u00e7\u00f5es sobre o dom\u00ednio solicitado v\u00e3o nos dados HTTP.</li> </ul> </li> <li>Os certificados HTTPS \u201ccertificam\u201d um determinado dom\u00ednio, mas o protocolo e a encripta\u00e7\u00e3o acontecem ao n\u00edvel do TCP, antes de sabermos de que dom\u00ednio se trata.</li> <li>Por padr\u00e3o, isso significa que voc\u00ea s\u00f3 pode ter um certificado HTTPS por endere\u00e7o IP.<ul> <li>N\u00e3o importa o tamanho do seu servidor ou qu\u00e3o pequeno cada aplicativo que voc\u00ea tem nele possa ser.</li> <li>No entanto, existe uma solu\u00e7\u00e3o para isso.</li> </ul> </li> <li>H\u00e1 uma extens\u00e3o para o protocolo TLS (aquele que lida com a criptografia no n\u00edvel TCP, antes do HTTP) chamado SNI.<ul> <li>Esta extens\u00e3o SNI permite que um \u00fanico servidor (com um \u00fanico endere\u00e7o IP) tenha v\u00e1rios certificados HTTPS e atenda a v\u00e1rios dom\u00ednios / aplicativos HTTPS.</li> <li>Para que isso funcione, um \u00fanico componente (programa) em execu\u00e7\u00e3o no servidor, ouvindo no endere\u00e7o IP p\u00fablico, deve ter todos os certificados HTTPS no servidor.</li> </ul> </li> <li>Depois de obter uma conex\u00e3o segura, o protocolo de comunica\u00e7\u00e3o ainda \u00e9 HTTP.<ul> <li>Os conte\u00fados s\u00e3o criptografados, embora sejam enviados com o protocolo HTTP.</li> </ul> </li> </ul> <p>\u00c9 uma pr\u00e1tica comum ter um programa/servidor HTTP em execu\u00e7\u00e3o no servidor (m\u00e1quina, host, etc.) e gerenciar todas as partes HTTPS: recebendo as requisi\u00e7\u00f5es encriptadas, enviando as solicita\u00e7\u00f5es HTTP descriptografadas para o aplicativo HTTP real em execu\u00e7\u00e3o no mesmo servidor (a aplica\u00e7\u00e3o ReadyAPI, neste caso), pegue a resposta HTTP do aplicativo, criptografe-a usando o certificado HTTPS apropriado e envie-a de volta ao cliente usando HTTPS. Este servidor \u00e9 frequentemente chamado de Proxy de Termina\u00e7\u00e3o TLS.</p> <p>Algumas das op\u00e7\u00f5es que voc\u00ea pode usar como Proxy de Termina\u00e7\u00e3o TLS s\u00e3o:</p> <ul> <li>Traefik (que tamb\u00e9m pode gerenciar a renova\u00e7\u00e3o de certificados)</li> <li>Caddy (que tamb\u00e9m pode gerenciar a renova\u00e7\u00e3o de certificados)</li> <li>Nginx</li> <li>HAProxy</li> </ul>"},{"location":"deployment/https/#lets-encrypt","title":"Let's Encrypt","text":"<p>Antes de Let's Encrypt, esses certificados HTTPS eram vendidos por terceiros confi\u00e1veis.</p> <p>O processo de aquisi\u00e7\u00e3o de um desses certificados costumava ser complicado, exigia bastante papelada e os certificados eram bastante caros.</p> <p>Mas ent\u00e3o o Let's Encrypt foi criado.</p> <p>Ele \u00e9 um projeto da Linux Foundation que fornece certificados HTTPS gratuitamente . De forma automatizada. Esses certificados usam toda a seguran\u00e7a criptogr\u00e1fica padr\u00e3o e t\u00eam vida curta (cerca de 3 meses), ent\u00e3o a seguran\u00e7a \u00e9, na verdade, melhor por causa de sua vida \u00fatil reduzida.</p> <p>Os dom\u00ednios s\u00e3o verificados com seguran\u00e7a e os certificados s\u00e3o gerados automaticamente. Isso tamb\u00e9m permite automatizar a renova\u00e7\u00e3o desses certificados.</p> <p>A ideia \u00e9 automatizar a aquisi\u00e7\u00e3o e renova\u00e7\u00e3o desses certificados, para que voc\u00ea tenha HTTPS seguro, de gra\u00e7a e para sempre.</p>"},{"location":"deployment/https/#https-para-desenvolvedores","title":"HTTPS para Desenvolvedores","text":"<p>Aqui est\u00e1 um exemplo de como uma API HTTPS poderia ser estruturada, passo a passo, com foco principal nas ideias relevantes para desenvolvedores.</p>"},{"location":"deployment/https/#nome-do-dominio","title":"Nome do dom\u00ednio","text":"<p>A etapa inicial provavelmente seria adquirir algum nome de dom\u00ednio. Ent\u00e3o, voc\u00ea iria configur\u00e1-lo em um servidor DNS (possivelmente no mesmo provedor em nuvem).</p> <p>Voc\u00ea provavelmente usaria um servidor em nuvem (m\u00e1quina virtual) ou algo parecido, e ele teria fixed Endere\u00e7o IP p\u00fablico.</p> <p>No(s) servidor(es) DNS, voc\u00ea configuraria um registro (<code>registro A</code>) para apontar seu dom\u00ednio para o endere\u00e7o IP p\u00fablico do seu servidor.</p> <p>Voc\u00ea provavelmente far\u00e1 isso apenas uma vez, na primeira vez em que tudo estiver sendo configurado.</p> <p>Dica</p> <p>Essa parte do Nome do Dom\u00ednio se d\u00e1 muito antes do HTTPS, mas como tudo depende do dom\u00ednio e endere\u00e7o IP p\u00fablico, vale a pena mencion\u00e1-la aqui.</p>"},{"location":"deployment/https/#dns","title":"DNS","text":"<p>Agora vamos focar em todas as partes que realmente fazem parte do HTTPS.</p> <p>Primeiro, o navegador iria verificar com os servidores DNS qual o IP do dom\u00ednio, nesse caso, <code>someapp.example.com</code>.</p> <p>Os servidores DNS iriam informar o navegador para utilizar algum endere\u00e7o IP espec\u00edfico. Esse seria o endere\u00e7o IP p\u00fablico em uso no seu servidor, que voc\u00ea configurou nos servidores DNS.</p> <p></p>"},{"location":"deployment/https/#inicio-do-handshake-tls","title":"In\u00edcio do Handshake TLS","text":"<p>O navegador ent\u00e3o ir\u00e1 comunicar-se com esse endere\u00e7o IP na porta 443 (a porta HTTPS).</p> <p>A primeira parte dessa comunica\u00e7\u00e3o \u00e9 apenas para estabelecer a conex\u00e3o entre o cliente e o servidor e para decidir as chaves criptogr\u00e1ficas a serem utilizadas, etc.</p> <p></p> <p>Esse intera\u00e7\u00e3o entre o cliente e o servidor para estabelecer uma conex\u00e3o TLS \u00e9 chamada de Handshake TLS.</p>"},{"location":"deployment/https/#tls-com-a-extensao-sni","title":"TLS com a Extens\u00e3o SNI","text":"<p>Apenas um processo no servidor pode se conectar a uma porta em um endere\u00e7o IP. Poderiam existir outros processos conectados em outras portas desse mesmo endere\u00e7o IP, mas apenas um para cada combina\u00e7\u00e3o de endere\u00e7o IP e porta.</p> <p>TLS (HTTPS) usa a porta <code>443</code> por padr\u00e3o. Ent\u00e3o essa \u00e9 a porta que precisamos.</p> <p>Como apenas um \u00fanico processo pode se comunicar com essa porta, o processo que faria isso seria o Proxy de Termina\u00e7\u00e3o TLS.</p> <p>O Proxy de Termina\u00e7\u00e3o TLS teria acesso a um ou mais certificados TLS (certificados HTTPS).</p> <p>Utilizando a extens\u00e3o SNI discutida acima, o Proxy de Termina\u00e7\u00e3o TLS iria checar qual dos certificados TLS (HTTPS) dispon\u00edveis deve ser usado para essa conex\u00e3o, utilizando o que corresponda ao dom\u00ednio esperado pelo cliente.</p> <p>Nesse caso, ele usaria o certificado para <code>someapp.example.com</code>.</p> <p></p> <p>O cliente j\u00e1 confia na entidade que gerou o certificado TLS (nesse caso, o Let's Encrypt, mas veremos sobre isso mais tarde), ent\u00e3o ele pode verificar que o certificado \u00e9 v\u00e1lido.</p> <p>Ent\u00e3o, utilizando o certificado, o cliente e o Proxy de Termina\u00e7\u00e3o TLS decidem como encriptar o resto da comunica\u00e7\u00e3o TCP. Isso completa a parte do Handshake TLS.</p> <p>Ap\u00f3s isso, o cliente e o servidor possuem uma conex\u00e3o TCP encriptada, que \u00e9 provida pelo TLS. E ent\u00e3o eles podem usar essa conex\u00e3o para come\u00e7ar a comunica\u00e7\u00e3o HTTP propriamente dita.</p> <p>E isso resume o que \u00e9 HTTPS, apenas HTTP simples dentro de uma conex\u00e3o TLS segura em vez de uma conex\u00e3o TCP pura (n\u00e3o encriptada).</p> <p>Dica</p> <p>Percebe que a encripta\u00e7\u00e3o da comunica\u00e7\u00e3o acontece no n\u00edvel do TCP, n\u00e3o no n\u00edvel do HTTP.</p>"},{"location":"deployment/https/#solicitacao-https","title":"Solicita\u00e7\u00e3o HTTPS","text":"<p>Agora que o cliente e servidor (especialmente o navegador e o Proxy de Termina\u00e7\u00e3o TLS) possuem uma conex\u00e3o TCP encriptada, eles podem iniciar a comunica\u00e7\u00e3o HTTP.</p> <p>Ent\u00e3o, o cliente envia uma solicita\u00e7\u00e3o HTTPS. Que \u00e9 apenas uma solicita\u00e7\u00e3o HTTP sobre uma conex\u00e3o TLS encriptada.</p> <p></p>"},{"location":"deployment/https/#desencriptando-a-solicitacao","title":"Desencriptando a Solicita\u00e7\u00e3o","text":"<p>O Proxy de Termina\u00e7\u00e3o TLS ent\u00e3o usaria a encripta\u00e7\u00e3o combinada para desencriptar a solicita\u00e7\u00e3o, e transmitiria a solicita\u00e7\u00e3o b\u00e1sica (desencriptada) para o processo executando a aplica\u00e7\u00e3o (por exemplo, um processo com Uvicorn executando a aplica\u00e7\u00e3o ReadyAPI).</p> <p></p>"},{"location":"deployment/https/#resposta-http","title":"Resposta HTTP","text":"<p>A aplica\u00e7\u00e3o processaria a solicita\u00e7\u00e3o e retornaria uma resposta HTTP b\u00e1sica (n\u00e3o encriptada) para o Proxy de Termina\u00e7\u00e3o TLS.</p> <p></p>"},{"location":"deployment/https/#resposta-https","title":"Resposta HTTPS","text":"<p>O Proxy de Termina\u00e7\u00e3o TLS iria encriptar a resposta utilizando a criptografia combinada anteriormente (que foi definida com o certificado para <code>someapp.example.com</code>), e devolveria para o navegador.</p> <p>No pr\u00f3ximo passo, o navegador verifica que a resposta \u00e9 v\u00e1lida e encriptada com a chave criptogr\u00e1fica correta, etc. E depois desencripta a resposta e a processa.</p> <p></p> <p>O cliente (navegador) saber\u00e1 que a resposta vem do servidor correto por que ela usa a criptografia que foi combinada entre eles usando o certificado HTTPS anterior.</p>"},{"location":"deployment/https/#multiplas-aplicacoes","title":"M\u00faltiplas Aplica\u00e7\u00f5es","text":"<p>Podem existir m\u00faltiplas aplica\u00e7\u00f5es em execu\u00e7\u00e3o no mesmo servidor (ou servidores), por exemplo: outras APIs ou um banco de dados.</p> <p>Apenas um processo pode estar vinculado a um IP e porta (o Proxy de Termina\u00e7\u00e3o TLS, por exemplo), mas outras aplica\u00e7\u00f5es/processos tamb\u00e9m podem estar em execu\u00e7\u00e3o no(s) servidor(es), desde que n\u00e3o tentem usar a mesma combina\u00e7\u00e3o de IP p\u00fablico e porta.</p> <p></p> <p>Dessa forma, o Proxy de Termina\u00e7\u00e3o TLS pode gerenciar o HTTPS e os certificados de m\u00faltiplos dom\u00ednios, para m\u00faltiplas aplica\u00e7\u00f5es, e ent\u00e3o transmitir as requisi\u00e7\u00f5es para a aplica\u00e7\u00e3o correta em cada caso.</p>"},{"location":"deployment/https/#renovacao-de-certificados","title":"Renova\u00e7\u00e3o de Certificados","text":"<p>Em algum momento futuro, cada certificado ir\u00e1 expirar (aproximadamente 3 meses ap\u00f3s a aquisi\u00e7\u00e3o).</p> <p>E ent\u00e3o, haver\u00e1 outro programa (em alguns casos pode ser o pr\u00f3prio Proxy de Termina\u00e7\u00e3o TLS) que ir\u00e1 interagir com o Let's Encrypt e renovar o(s) certificado(s).</p> <p></p> <p>Os certificados TLS s\u00e3o associados com um nome de dom\u00ednio, e n\u00e3o a um endere\u00e7o IP.</p> <p>Ent\u00e3o para renovar os certificados, o programa de renova\u00e7\u00e3o precisa provar para a autoridade (Let's Encrypt) que ele realmente possui e controla esse dom\u00ednio&gt;</p> <p>Para fazer isso, e acomodar as necessidades de diferentes aplica\u00e7\u00f5es, existem diferentes op\u00e7\u00f5es para esse programa. Algumas escolhas populares s\u00e3o:</p> <ul> <li>Modificar alguns registros DNS<ul> <li>Para isso, o programa de renova\u00e7\u00e3o precisa ter suporte as APIs do provedor DNS, ent\u00e3o, dependendo do provedor DNS que voc\u00ea utilize, isso pode ou n\u00e3o ser uma op\u00e7\u00e3o vi\u00e1vel.</li> </ul> </li> <li>Executar como um servidor (ao menos durante o processo de aquisi\u00e7\u00e3o do certificado) no endere\u00e7o IP p\u00fablico associado com o dom\u00ednio.<ul> <li>Como dito anteriormente, apenas um processo pode estar ligado a uma porta e IP espec\u00edficos.</li> <li>Essa \u00e9 uma dos motivos que fazem utilizar o mesmo Proxy de Termina\u00e7\u00e3o TLS para gerenciar a renova\u00e7\u00e3o de certificados ser t\u00e3o \u00fatil.</li> <li>Caso contr\u00e1rio, voc\u00ea pode ter que parar a execu\u00e7\u00e3o do Proxy de Termina\u00e7\u00e3o TLS momentaneamente, inicializar o programa de renova\u00e7\u00e3o para renovar os certificados, e ent\u00e3o reiniciar o Proxy de Termina\u00e7\u00e3o TLS. Isso n\u00e3o \u00e9 o ideal, j\u00e1 que sua(s) aplica\u00e7\u00e3o(\u00f5es) n\u00e3o v\u00e3o estar dispon\u00edveis enquanto o Proxy de Termina\u00e7\u00e3o TLS estiver desligado.</li> </ul> </li> </ul> <p>Todo esse processo de renova\u00e7\u00e3o, enquanto o aplicativo ainda funciona, \u00e9 uma das principais raz\u00f5es para preferir um sistema separado para gerenciar HTTPS com um Proxy de Termina\u00e7\u00e3o TLS em vez de usar os certificados TLS no servidor da aplica\u00e7\u00e3o diretamente (e.g. com o Uvicorn).</p>"},{"location":"deployment/https/#recapitulando","title":"Recapitulando","text":"<p>Possuir HTTPS habilitado na sua aplica\u00e7\u00e3o \u00e9 bastante importante, e at\u00e9 cr\u00edtico na maioria dos casos. A maior parte do esfor\u00e7o que voc\u00ea tem que colocar sobre o HTTPS como desenvolvedor est\u00e1 em entender esses conceitos e como eles funcionam.</p> <p>Mas uma vez que voc\u00ea saiba o b\u00e1sico de HTTPS para desenvolvedores, voc\u00ea pode combinar e configurar diferentes ferramentas facilmente para gerenciar tudo de uma forma simples.</p> <p>Em alguns dos pr\u00f3ximos cap\u00edtulos, eu mostrarei para voc\u00ea v\u00e1rios exemplos concretos de como configurar o HTTPS para aplica\u00e7\u00f5es ReadyAPI. \ud83d\udd12</p>"},{"location":"deployment/manually/","title":"Execute um Servidor Manualmente","text":""},{"location":"deployment/manually/#utilize-o-comando-readyapi-run","title":"Utilize o comando <code>readyapi run</code>","text":"<p>Em resumo, utilize o comando <code>readyapi run</code> para inicializar sua aplica\u00e7\u00e3o ReadyAPI:</p> <pre><code>$ &lt;font color=\"#4E9A06\"&gt;readyapi&lt;/font&gt; run &lt;u style=\"text-decoration-style:solid\"&gt;main.py&lt;/u&gt;\n\n  &lt;span style=\"background-color:#009485\"&gt;&lt;font color=\"#D3D7CF\"&gt; ReadyAPI &lt;/font&gt;&lt;/span&gt;  Starting production server \ud83d\ude80\n\n             Searching for package file structure from directories\n             with &lt;font color=\"#3465A4\"&gt;__init__.py&lt;/font&gt; files\n             Importing from &lt;font color=\"#75507B\"&gt;/home/user/code/&lt;/font&gt;&lt;font color=\"#AD7FA8\"&gt;awesomeapp&lt;/font&gt;\n\n   &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; module &lt;/font&gt;&lt;/span&gt;  \ud83d\udc0d main.py\n\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; code &lt;/font&gt;&lt;/span&gt;  Importing the ReadyAPI app object from the module with\n             the following code:\n\n             &lt;u style=\"text-decoration-style:solid\"&gt;from &lt;/u&gt;&lt;u style=\"text-decoration-style:solid\"&gt;&lt;b&gt;main&lt;/b&gt;&lt;/u&gt;&lt;u style=\"text-decoration-style:solid\"&gt; import &lt;/u&gt;&lt;u style=\"text-decoration-style:solid\"&gt;&lt;b&gt;app&lt;/b&gt;&lt;/u&gt;\n\n      &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; app &lt;/font&gt;&lt;/span&gt;  Using import string: &lt;font color=\"#3465A4\"&gt;main:app&lt;/font&gt;\n\n   &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; server &lt;/font&gt;&lt;/span&gt;  Server started at &lt;font color=\"#729FCF\"&gt;&lt;u style=\"text-decoration-style:solid\"&gt;http://0.0.0.0:8000&lt;/u&gt;&lt;/font&gt;\n   &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; server &lt;/font&gt;&lt;/span&gt;  Documentation at &lt;font color=\"#729FCF\"&gt;&lt;u style=\"text-decoration-style:solid\"&gt;http://0.0.0.0:8000/docs&lt;/u&gt;&lt;/font&gt;\n\n             Logs:\n\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; INFO &lt;/font&gt;&lt;/span&gt;  Started server process &lt;b&gt;[&lt;/b&gt;&lt;font color=\"#34E2E2\"&gt;&lt;b&gt;2306215&lt;/b&gt;&lt;/font&gt;&lt;b&gt;]&lt;/b&gt;\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; INFO &lt;/font&gt;&lt;/span&gt;  Waiting for application startup.\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; INFO &lt;/font&gt;&lt;/span&gt;  Application startup complete.\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; INFO &lt;/font&gt;&lt;/span&gt;  Uvicorn running on &lt;font color=\"#729FCF\"&gt;&lt;u style=\"text-decoration-style:solid\"&gt;http://0.0.0.0:8000&lt;/u&gt;&lt;/font&gt; &lt;b&gt;(&lt;/b&gt;Press CTRL+C\n             to quit&lt;b&gt;)&lt;/b&gt;\n</code></pre> <p>Isto deve funcionar para a maioria dos casos. \ud83d\ude0e</p> <p>Voc\u00ea pode utilizar esse comando, por exemplo, para iniciar sua aplica\u00e7\u00e3o ReadyAPI em um cont\u00eainer, em um servidor, etc.</p>"},{"location":"deployment/manually/#servidores-asgi","title":"Servidores ASGI","text":"<p>Vamos nos aprofundar um pouco mais em detalhes.</p> <p>ReadyAPI utiliza um padr\u00e3o para construir frameworks e servidores web em Python chamado ASGI. ReadyAPI \u00e9 um framework web ASGI.</p> <p>A principal coisa que voc\u00ea precisa para executar uma aplica\u00e7\u00e3o ReadyAPI (ou qualquer outra aplica\u00e7\u00e3o ASGI) em uma m\u00e1quina de servidor remoto \u00e9 um programa de servidor ASGI como o Uvicorn, que \u00e9 o que vem por padr\u00e3o no comando <code>readyapi</code>.</p> <p>Existem diversas alternativas, incluindo:</p> <ul> <li>Uvicorn: um servidor ASGI de alta performance.</li> <li>Hypercorn: um servidor ASGI comp\u00e1tivel com HTTP/2, Trio e outros recursos.</li> <li>Daphne: servidor ASGI constru\u00eddo para Django Channels.</li> <li>Granian: um servidor HTTP Rust para aplica\u00e7\u00f5es Python.</li> <li>NGINX Unit: NGINX Unit \u00e9 um runtime de aplica\u00e7\u00e3o web leve e vers\u00e1til.</li> </ul>"},{"location":"deployment/manually/#maquina-servidora-e-programa-servidor","title":"M\u00e1quina Servidora e Programa Servidor","text":"<p>Existe um pequeno detalhe sobre estes nomes para se manter em mente. \ud83d\udca1</p> <p>A palavra \"servidor\" \u00e9 comumente usada para se referir tanto ao computador remoto/nuvem (a m\u00e1quina f\u00edsica ou virtual) quanto ao programa que est\u00e1 sendo executado nessa m\u00e1quina (por exemplo, Uvicorn).</p> <p>Apenas tenha em mente que quando voc\u00ea ler \"servidor\" em geral, isso pode se referir a uma dessas duas coisas.</p> <p>Quando se refere \u00e0 m\u00e1quina remota, \u00e9 comum cham\u00e1-la de servidor, mas tamb\u00e9m de m\u00e1quina, VM (m\u00e1quina virtual), n\u00f3. Todos esses termos se referem a algum tipo de m\u00e1quina remota, normalmente executando Linux, onde voc\u00ea executa programas.</p>"},{"location":"deployment/manually/#instale-o-programa-servidor","title":"Instale o Programa Servidor","text":"<p>Quando voc\u00ea instala o ReadyAPI, ele vem com um servidor de produ\u00e7\u00e3o, o Uvicorn, e voc\u00ea pode inici\u00e1-lo com o comando <code>readyapi run</code>.</p> <p>Mas voc\u00ea tamb\u00e9m pode instalar um servidor ASGI manualmente.</p> <p>Certifique-se de criar um ambiente virtual, ativ\u00e1-lo e, em seguida, voc\u00ea pode instalar a aplica\u00e7\u00e3o do servidor.</p> <p>Por exemplo, para instalar o Uvicorn:</p> <pre><code>$ pip install \"uvicorn[standard]\"\n\n---&gt; 100%\n</code></pre> <p>Um processo semelhante se aplicaria a qualquer outro programa de servidor ASGI.</p> <p>Dica</p> <p>Adicionando o <code>standard</code>, o Uvicorn instalar\u00e1 e usar\u00e1 algumas depend\u00eancias extras recomendadas.</p> <p>Isso inclui o <code>uvloop</code>, a substitui\u00e7\u00e3o de alto desempenho para <code>asyncio</code>, que fornece um grande aumento de desempenho de concorr\u00eancia.</p> <p>Quando voc\u00ea instala o ReadyAPI com algo como <code>pip install \"readyapi[standard]\"</code>, voc\u00ea j\u00e1 obt\u00e9m <code>uvicorn[standard]</code> tamb\u00e9m.</p>"},{"location":"deployment/manually/#execute-o-programa-servidor","title":"Execute o Programa Servidor","text":"<p>Se voc\u00ea instalou um servidor ASGI manualmente, normalmente precisar\u00e1 passar uma string de importa\u00e7\u00e3o em um formato especial para que ele importe sua aplica\u00e7\u00e3o ReadyAPI:</p> <pre><code>$ uvicorn main:app --host 0.0.0.0 --port 80\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://0.0.0.0:80 (Press CTRL+C to quit)\n</code></pre> <p>Nota</p> <p>O comando <code>uvicorn main:app</code> refere-se a:</p> <ul> <li><code>main</code>: o arquivo <code>main.py</code> (o \"m\u00f3dulo\" Python).</li> <li><code>app</code>: o objeto criado dentro de <code>main.py</code> com a linha <code>app = ReadyAPI()</code>.</li> </ul> <p>\u00c9 equivalente a:</p> <pre><code>from main import app\n</code></pre> <p>Cada programa de servidor ASGI alternativo teria um comando semelhante, voc\u00ea pode ler mais na documenta\u00e7\u00e3o respectiva.</p> <p>Aviso</p> <p>Uvicorn e outros servidores suportam a op\u00e7\u00e3o <code>--reload</code> que \u00e9 \u00fatil durante o desenvolvimento.</p> <p>A op\u00e7\u00e3o <code>--reload</code> consome muito mais recursos, \u00e9 mais inst\u00e1vel, etc.</p> <p>Ela ajuda muito durante o desenvolvimento, mas voc\u00ea n\u00e3o deve us\u00e1-la em produ\u00e7\u00e3o.</p>"},{"location":"deployment/manually/#conceitos-de-implantacao","title":"Conceitos de Implanta\u00e7\u00e3o","text":"<p>Esses exemplos executam o programa do servidor (por exemplo, Uvicorn), iniciando um \u00fanico processo, ouvindo em todos os IPs (<code>0.0.0.0</code>) em uma porta predefinida (por exemplo, <code>80</code>).</p> <p>Esta \u00e9 a ideia b\u00e1sica. Mas voc\u00ea provavelmente vai querer cuidar de algumas coisas adicionais, como:</p> <ul> <li>Seguran\u00e7a - HTTPS</li> <li>Executando na inicializa\u00e7\u00e3o</li> <li>Reinicializa\u00e7\u00f5es</li> <li>Replica\u00e7\u00e3o (o n\u00famero de processos em execu\u00e7\u00e3o)</li> <li>Mem\u00f3ria</li> <li>Passos anteriores antes de come\u00e7ar</li> </ul> <p>Vou te contar mais sobre cada um desses conceitos, como pensar sobre eles e alguns exemplos concretos com estrat\u00e9gias para lidar com eles nos pr\u00f3ximos cap\u00edtulos. \ud83d\ude80</p>"},{"location":"deployment/server-workers/","title":"Trabalhadores do Servidor - Uvicorn com Trabalhadores","text":"<p>Vamos rever os conceitos de implanta\u00e7\u00e3o anteriores:</p> <ul> <li>Seguran\u00e7a - HTTPS</li> <li>Executando na inicializa\u00e7\u00e3o</li> <li>Reinicializa\u00e7\u00f5es</li> <li>Replica\u00e7\u00e3o (o n\u00famero de processos em execu\u00e7\u00e3o)</li> <li>Mem\u00f3ria</li> <li>Etapas anteriores antes de iniciar</li> </ul> <p>At\u00e9 este ponto, com todos os tutoriais nos documentos, voc\u00ea provavelmente estava executando um programa de servidor, por exemplo, usando o comando <code>readyapi</code>, que executa o Uvicorn, executando um \u00fanico processo.</p> <p>Ao implantar aplicativos, voc\u00ea provavelmente desejar\u00e1 ter alguma replica\u00e7\u00e3o de processos para aproveitar v\u00e1rios n\u00facleos e poder lidar com mais solicita\u00e7\u00f5es.</p> <p>Como voc\u00ea viu no cap\u00edtulo anterior sobre Conceitos de implanta\u00e7\u00e3o, h\u00e1 v\u00e1rias estrat\u00e9gias que voc\u00ea pode usar.</p> <p>Aqui mostrarei como usar o Uvicorn com processos de trabalho usando o comando <code>readyapi</code> ou o comando <code>uvicorn</code> diretamente.</p> <p>Informa\u00e7\u00e3o</p> <p>Se voc\u00ea estiver usando cont\u00eaineres, por exemplo com Docker ou Kubernetes, falarei mais sobre isso no pr\u00f3ximo cap\u00edtulo: ReadyAPI em cont\u00eaineres - Docker.</p> <p>Em particular, ao executar no Kubernetes voc\u00ea provavelmente n\u00e3o vai querer usar v\u00e1rios trabalhadores e, em vez disso, executar um \u00fanico processo Uvicorn por cont\u00eainer, mas falarei sobre isso mais adiante neste cap\u00edtulo.</p>"},{"location":"deployment/server-workers/#varios-trabalhadores","title":"V\u00e1rios trabalhadores","text":"<p>Voc\u00ea pode iniciar v\u00e1rios trabalhadores com a op\u00e7\u00e3o de linha de comando <code>--workers</code>:</p> <code>readyapi</code><code>uvicorn</code> <p>Se voc\u00ea usar o comando <code>readyapi</code>:</p> <pre><code>$ &lt;font color=\"#4E9A06\"&gt;readyapi&lt;/font&gt; run --workers 4 &lt;u style=\"text-decoration-style:solid\"&gt;main.py&lt;/u&gt;\n\n  &lt;span style=\"background-color:#009485\"&gt;&lt;font color=\"#D3D7CF\"&gt; ReadyAPI &lt;/font&gt;&lt;/span&gt;  Starting production server \ud83d\ude80\n\n             Searching for package file structure from directories with\n             &lt;font color=\"#3465A4\"&gt;__init__.py&lt;/font&gt; files\n             Importing from &lt;font color=\"#75507B\"&gt;/home/user/code/&lt;/font&gt;&lt;font color=\"#AD7FA8\"&gt;awesomeapp&lt;/font&gt;\n\n   &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; module &lt;/font&gt;&lt;/span&gt;  \ud83d\udc0d main.py\n\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; code &lt;/font&gt;&lt;/span&gt;  Importing the ReadyAPI app object from the module with the\n             following code:\n\n             &lt;u style=\"text-decoration-style:solid\"&gt;from &lt;/u&gt;&lt;u style=\"text-decoration-style:solid\"&gt;&lt;b&gt;main&lt;/b&gt;&lt;/u&gt;&lt;u style=\"text-decoration-style:solid\"&gt; import &lt;/u&gt;&lt;u style=\"text-decoration-style:solid\"&gt;&lt;b&gt;app&lt;/b&gt;&lt;/u&gt;\n\n      &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; app &lt;/font&gt;&lt;/span&gt;  Using import string: &lt;font color=\"#3465A4\"&gt;main:app&lt;/font&gt;\n\n   &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; server &lt;/font&gt;&lt;/span&gt;  Server started at &lt;font color=\"#729FCF\"&gt;&lt;u style=\"text-decoration-style:solid\"&gt;http://0.0.0.0:8000&lt;/u&gt;&lt;/font&gt;\n   &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; server &lt;/font&gt;&lt;/span&gt;  Documentation at &lt;font color=\"#729FCF\"&gt;&lt;u style=\"text-decoration-style:solid\"&gt;http://0.0.0.0:8000/docs&lt;/u&gt;&lt;/font&gt;\n\n             Logs:\n\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; INFO &lt;/font&gt;&lt;/span&gt;  Uvicorn running on &lt;font color=\"#729FCF\"&gt;&lt;u style=\"text-decoration-style:solid\"&gt;http://0.0.0.0:8000&lt;/u&gt;&lt;/font&gt; &lt;b&gt;(&lt;/b&gt;Press CTRL+C to\n             quit&lt;b&gt;)&lt;/b&gt;\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; INFO &lt;/font&gt;&lt;/span&gt;  Started parent process &lt;b&gt;[&lt;/b&gt;&lt;font color=\"#34E2E2\"&gt;&lt;b&gt;27365&lt;/b&gt;&lt;/font&gt;&lt;b&gt;]&lt;/b&gt;\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; INFO &lt;/font&gt;&lt;/span&gt;  Started server process &lt;b&gt;[&lt;/b&gt;&lt;font color=\"#34E2E2\"&gt;&lt;b&gt;27368&lt;/b&gt;&lt;/font&gt;&lt;b&gt;]&lt;/b&gt;\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; INFO &lt;/font&gt;&lt;/span&gt;  Started server process &lt;b&gt;[&lt;/b&gt;&lt;font color=\"#34E2E2\"&gt;&lt;b&gt;27369&lt;/b&gt;&lt;/font&gt;&lt;b&gt;]&lt;/b&gt;\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; INFO &lt;/font&gt;&lt;/span&gt;  Started server process &lt;b&gt;[&lt;/b&gt;&lt;font color=\"#34E2E2\"&gt;&lt;b&gt;27370&lt;/b&gt;&lt;/font&gt;&lt;b&gt;]&lt;/b&gt;\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; INFO &lt;/font&gt;&lt;/span&gt;  Started server process &lt;b&gt;[&lt;/b&gt;&lt;font color=\"#34E2E2\"&gt;&lt;b&gt;27367&lt;/b&gt;&lt;/font&gt;&lt;b&gt;]&lt;/b&gt;\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; INFO &lt;/font&gt;&lt;/span&gt;  Waiting for application startup.\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; INFO &lt;/font&gt;&lt;/span&gt;  Waiting for application startup.\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; INFO &lt;/font&gt;&lt;/span&gt;  Waiting for application startup.\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; INFO &lt;/font&gt;&lt;/span&gt;  Waiting for application startup.\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; INFO &lt;/font&gt;&lt;/span&gt;  Application startup complete.\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; INFO &lt;/font&gt;&lt;/span&gt;  Application startup complete.\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; INFO &lt;/font&gt;&lt;/span&gt;  Application startup complete.\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; INFO &lt;/font&gt;&lt;/span&gt;  Application startup complete.\n</code></pre> <p>Se voc\u00ea preferir usar o comando <code>uvicorn</code> diretamente:</p> <pre><code>$ uvicorn main:app --host 0.0.0.0 --port 8080 --workers 4\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Uvicorn running on &lt;b&gt;http://0.0.0.0:8080&lt;/b&gt; (Press CTRL+C to quit)\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Started parent process [&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;27365&lt;/b&gt;&lt;/font&gt;]\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Started server process [&lt;font color=\"#A1EFE4\"&gt;27368&lt;/font&gt;]\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Waiting for application startup.\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Application startup complete.\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Started server process [&lt;font color=\"#A1EFE4\"&gt;27369&lt;/font&gt;]\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Waiting for application startup.\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Application startup complete.\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Started server process [&lt;font color=\"#A1EFE4\"&gt;27370&lt;/font&gt;]\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Waiting for application startup.\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Application startup complete.\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Started server process [&lt;font color=\"#A1EFE4\"&gt;27367&lt;/font&gt;]\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Waiting for application startup.\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Application startup complete.\n</code></pre> <p>A \u00fanica op\u00e7\u00e3o nova aqui \u00e9 <code>--workers</code> informando ao Uvicorn para iniciar 4 processos de trabalho.</p> <p>Voc\u00ea tamb\u00e9m pode ver que ele mostra o PID de cada processo, <code>27365</code> para o processo pai (este \u00e9 o gerenciador de processos) e um para cada processo de trabalho: <code>27368</code>, <code>27369</code>, <code>27370</code> e <code>27367</code>.</p>"},{"location":"deployment/server-workers/#conceitos-de-implantacao","title":"Conceitos de Implanta\u00e7\u00e3o","text":"<p>Aqui voc\u00ea viu como usar v\u00e1rios trabalhadores para paralelizar a execu\u00e7\u00e3o do aplicativo, aproveitar v\u00e1rios n\u00facleos na CPU e conseguir atender mais solicita\u00e7\u00f5es.</p> <p>Da lista de conceitos de implanta\u00e7\u00e3o acima, o uso de trabalhadores ajudaria principalmente com a parte da replica\u00e7\u00e3o e um pouco com as reinicializa\u00e7\u00f5es, mas voc\u00ea ainda precisa cuidar dos outros:</p> <ul> <li>Seguran\u00e7a - HTTPS</li> <li>Executando na inicializa\u00e7\u00e3o</li> <li>Reinicializa\u00e7\u00f5es</li> <li>Replica\u00e7\u00e3o (o n\u00famero de processos em execu\u00e7\u00e3o)</li> <li>Mem\u00f3ria</li> <li>Etapas anteriores antes de iniciar</li> </ul>"},{"location":"deployment/server-workers/#conteineres-e-docker","title":"Cont\u00eaineres e Docker","text":"<p>No pr\u00f3ximo cap\u00edtulo sobre ReadyAPI em cont\u00eaineres - Docker, explicarei algumas estrat\u00e9gias que voc\u00ea pode usar para lidar com os outros conceitos de implanta\u00e7\u00e3o.</p> <p>Vou mostrar como construir sua pr\u00f3pria imagem do zero para executar um \u00fanico processo Uvicorn. \u00c9 um processo simples e provavelmente \u00e9 o que voc\u00ea gostaria de fazer ao usar um sistema de gerenciamento de cont\u00eaineres distribu\u00eddos como o Kubernetes.</p>"},{"location":"deployment/server-workers/#recapitular","title":"Recapitular","text":"<p>Voc\u00ea pode usar v\u00e1rios processos de trabalho com a op\u00e7\u00e3o CLI <code>--workers</code> com os comandos <code>readyapi</code> ou <code>uvicorn</code> para aproveitar as vantagens de CPUs multi-core e executar v\u00e1rios processos em paralelo.</p> <p>Voc\u00ea pode usar essas ferramentas e ideias se estiver configurando seu pr\u00f3prio sistema de implanta\u00e7\u00e3o enquanto cuida dos outros conceitos de implanta\u00e7\u00e3o.</p> <p>Confira o pr\u00f3ximo cap\u00edtulo para aprender sobre ReadyAPI com cont\u00eaineres (por exemplo, Docker e Kubernetes). Voc\u00ea ver\u00e1 que essas ferramentas t\u00eam maneiras simples de resolver os outros conceitos de implanta\u00e7\u00e3o tamb\u00e9m. \u2728</p>"},{"location":"deployment/versions/","title":"Sobre as vers\u00f5es do ReadyAPI","text":"<p>ReadyAPI j\u00e1 est\u00e1 sendo usado em produ\u00e7\u00e3o em diversas aplica\u00e7\u00f5es e sistemas, a cobertura de testes \u00e9 mantida em 100%, mas seu desenvolvimento est\u00e1 avan\u00e7ando rapidamente.</p> <p>Novos recursos s\u00e3o adicionados com frequ\u00eancia, bugs s\u00e3o corrigidos regularmente e o c\u00f3digo est\u00e1 sempre melhorando.</p> <p>Esse \u00e9 o motivo das vers\u00f5es atuais estarem em <code>0.x.x</code>, significando que em cada vers\u00e3o pode haver mudan\u00e7as significativas, tudo isso seguindo as conven\u00e7\u00f5es de controle de vers\u00e3o sem\u00e2ntica.</p> <p>J\u00e1 \u00e9 poss\u00edvel criar aplicativos de produ\u00e7\u00e3o com ReadyAPI (e provavelmente voc\u00ea j\u00e1 faz isso h\u00e1 algum tempo), apenas precisando ter certeza de usar uma vers\u00e3o que funcione corretamente com o resto do seu c\u00f3digo.</p>"},{"location":"deployment/versions/#fixe-a-sua-versao-de-readyapi","title":"Fixe a sua vers\u00e3o de <code>readyapi</code>","text":"<p>A primeira coisa que voc\u00ea deve fazer \u00e9 \"fixar\" a vers\u00e3o do ReadyAPI que voc\u00ea est\u00e1 utilizando na mais atual, na qual voc\u00ea sabe que funciona corretamente para o seu aplicativo.</p> <p>Por exemplo, supondo que voc\u00ea est\u00e1 usando a vers\u00e3o <code>0.45.0</code> em sua aplica\u00e7\u00e3o.</p> <p>Caso voc\u00ea utilize o arquivo <code>requirements.txt</code>, voc\u00ea poderia especificar a vers\u00e3o com:</p> <pre><code>readyapi==0.45.0\n</code></pre> <p>Isso significa que voc\u00ea conseguiria utilizar a vers\u00e3o exata <code>0.45.0</code>.</p> <p>Ou, voc\u00ea poderia fix\u00e1-la com:</p> <pre><code>readyapi&gt;=0.45.0,&lt;0.46.0\n</code></pre> <p>isso significa que voc\u00ea iria usar as vers\u00f5es <code>0.45.0</code> ou acima, mas inferiores \u00e0 <code>0.46.0</code>, por exemplo, a vers\u00e3o <code>0.45.2</code> ainda seria aceita.</p> <p>Se voc\u00ea usar qualquer outra ferramenta para gerenciar suas instala\u00e7\u00f5es, como Poetry, Pipenv ou outras, todas elas t\u00eam uma maneira que voc\u00ea pode usar para definir as vers\u00f5es espec\u00edficas dos seus pacotes.</p>"},{"location":"deployment/versions/#versoes-disponiveis","title":"Vers\u00f5es dispon\u00edveis","text":"<p>Voc\u00ea pode ver as vers\u00f5es dispon\u00edveis (por exemplo, para verificar qual \u00e9 a vers\u00e3o atual) em Release Notes.</p>"},{"location":"deployment/versions/#sobre-versoes","title":"Sobre vers\u00f5es","text":"<p>Seguindo as conven\u00e7\u00f5es de controle de vers\u00e3o sem\u00e2ntica, qualquer vers\u00e3o abaixo de <code>1.0.0</code> pode adicionar mudan\u00e7as significativas.</p> <p>ReadyAPI tamb\u00e9m segue a conven\u00e7\u00e3o de que qualquer altera\u00e7\u00e3o de vers\u00e3o \"PATCH\" \u00e9 para corre\u00e7\u00e3o de bugs e altera\u00e7\u00f5es n\u00e3o significativas.</p> <p>Dica</p> <p>O \"PATCH\" \u00e9 o \u00faltimo n\u00famero, por exemplo, em <code>0.2.3</code>, a vers\u00e3o PATCH \u00e9 <code>3</code>.</p> <p>Logo, voc\u00ea deveria conseguir fixar a vers\u00e3o, como:</p> <pre><code>readyapi&gt;=0.45.0,&lt;0.46.0\n</code></pre> <p>Mudan\u00e7as significativas e novos recursos s\u00e3o adicionados em vers\u00f5es \"MINOR\".</p> <p>Dica</p> <p>O \"MINOR\" \u00e9 o n\u00famero que est\u00e1 no meio, por exemplo, em <code>0.2.3</code>, a vers\u00e3o MINOR \u00e9 <code>2</code>.</p>"},{"location":"deployment/versions/#atualizando-as-versoes-do-readyapi","title":"Atualizando as vers\u00f5es do ReadyAPI","text":"<p>Voc\u00ea deve adicionar testes para a sua aplica\u00e7\u00e3o.</p> <p>Com ReadyAPI isso \u00e9 muito f\u00e1cil (gra\u00e7as a Starlette), verifique a documenta\u00e7\u00e3o: Testing</p> <p>Ap\u00f3s a cria\u00e7\u00e3o dos testes, voc\u00ea pode atualizar a sua vers\u00e3o do ReadyAPI para uma mais recente, execute os testes para se certificar de que todo o seu c\u00f3digo est\u00e1 funcionando corretamente.</p> <p>Se tudo estiver funcionando, ou ap\u00f3s voc\u00ea realizar as altera\u00e7\u00f5es necess\u00e1rias e todos os testes estiverem passando, ent\u00e3o voc\u00ea pode fixar sua vers\u00e3o de <code>ReadyAPI</code> para essa mais nova.</p>"},{"location":"deployment/versions/#sobre-starlette","title":"Sobre Starlette","text":"<p>N\u00e3o \u00e9 recomendado fixar a vers\u00e3o de <code>starlette</code>.</p> <p>Vers\u00f5es diferentes de ReadyAPI utilizar\u00e3o uma vers\u00e3o espec\u00edfica e mais recente de Starlette.</p> <p>Ent\u00e3o, voc\u00ea pode deixar ReadyAPI escolher a vers\u00e3o compat\u00edvel e correta de Starlette.</p>"},{"location":"deployment/versions/#sobre-pydantic","title":"Sobre Pydantic","text":"<p>Pydantic inclu\u00ed os testes para ReadyAPI em seus pr\u00f3prios testes, ent\u00e3o as novas vers\u00f5es de Pydantic (acima da <code>1.0.0</code>) sempre ser\u00e3o compat\u00edveis com ReadyAPI.</p> <p>Voc\u00ea pode fixar qualquer vers\u00e3o de Pydantic que desejar, desde que seja acima da <code>1.0.0</code> e abaixo da <code>2.0.0</code>.</p> <p>Por exemplo:</p> <pre><code>pydantic&gt;=1.2.0,&lt;2.0.0\n</code></pre>"},{"location":"how-to/","title":"Como Fazer - Exemplos Pr\u00e1ticos","text":"<p>Aqui voc\u00ea encontrar\u00e1 diferentes exemplos pr\u00e1ticos ou tutoriais de \"como fazer\" para v\u00e1rios t\u00f3picos.</p> <p>A maioria dessas ideias ser\u00e1 mais ou menos independente, e na maioria dos casos voc\u00ea s\u00f3 precisar\u00e1 estud\u00e1-las se elas se aplicarem diretamente ao seu projeto.</p> <p>Se algo parecer interessante e \u00fatil para o seu projeto, v\u00e1 em frente e d\u00ea uma olhada. Caso contr\u00e1rio, voc\u00ea pode simplesmente ignor\u00e1-lo.</p> <p>Tip</p> <p>Se voc\u00ea deseja aprender ReadyAPI de forma estruturada (recomendado), leia cap\u00edtulo por cap\u00edtulo Tutorial - Guia de Usu\u00e1rio em vez disso.</p>"},{"location":"how-to/conditional-openapi/","title":"OpenAPI condicional","text":"<p>Se necess\u00e1rio, voc\u00ea pode usar configura\u00e7\u00f5es e vari\u00e1veis \u200b\u200bde ambiente para configurar o OpenAPI condicionalmente, dependendo do ambiente, e at\u00e9 mesmo desativ\u00e1-lo completamente.</p>"},{"location":"how-to/conditional-openapi/#sobre-seguranca-apis-e-documentos","title":"Sobre seguran\u00e7a, APIs e documentos","text":"<p>Ocultar suas interfaces de usu\u00e1rio de documenta\u00e7\u00e3o na produ\u00e7\u00e3o n\u00e3o deveria ser a maneira de proteger sua API.</p> <p>Isso n\u00e3o adiciona nenhuma seguran\u00e7a extra \u00e0 sua API; as opera\u00e7\u00f5es de rotas ainda estar\u00e3o dispon\u00edveis onde est\u00e3o.</p> <p>Se houver uma falha de seguran\u00e7a no seu c\u00f3digo, ela ainda existir\u00e1.</p> <p>Ocultar a documenta\u00e7\u00e3o apenas torna mais dif\u00edcil entender como interagir com sua API e pode dificultar sua depura\u00e7\u00e3o na produ\u00e7\u00e3o. Pode ser considerado simplesmente uma forma de Seguran\u00e7a atrav\u00e9s da obscuridade.</p> <p>Se voc\u00ea quiser proteger sua API, h\u00e1 v\u00e1rias coisas melhores que voc\u00ea pode fazer, por exemplo:</p> <ul> <li>Certifique-se de ter modelos Pydantic bem definidos para seus corpos de solicita\u00e7\u00e3o e respostas.</li> <li>Configure quaisquer permiss\u00f5es e fun\u00e7\u00f5es necess\u00e1rias usando depend\u00eancias.</li> <li>Nunca armazene senhas em texto simples, apenas hashes de senha.</li> <li>Implemente e use ferramentas criptogr\u00e1ficas bem conhecidas, como tokens JWT e Passlib, etc.</li> <li>Adicione controles de permiss\u00e3o mais granulares com escopos OAuth2 quando necess\u00e1rio.</li> <li>...etc.</li> </ul> <p>No entanto, voc\u00ea pode ter um caso de uso muito espec\u00edfico em que realmente precisa desabilitar a documenta\u00e7\u00e3o da API para algum ambiente (por exemplo, para produ\u00e7\u00e3o) ou dependendo de configura\u00e7\u00f5es de vari\u00e1veis \u200b\u200bde ambiente.</p>"},{"location":"how-to/conditional-openapi/#openapi-condicional-com-configuracoes-e-variaveis-de-ambiente","title":"OpenAPI condicional com configura\u00e7\u00f5es e vari\u00e1veis \u200b\u200bde ambiente","text":"<p>Voc\u00ea pode usar facilmente as mesmas configura\u00e7\u00f5es do Pydantic para configurar sua OpenAPI gerada e as interfaces de usu\u00e1rio de documentos.</p> <p>Por exemplo:</p> Python 3.8+ <pre><code>from pydantic_settings import BaseSettings\nfrom readyapi import ReadyAPI\n\n\nclass Settings(BaseSettings):\n    openapi_url: str = \"/openapi.json\"\n\n\nsettings = Settings()\n\napp = ReadyAPI(openapi_url=settings.openapi_url)\n\n\n@app.get(\"/\")\ndef root():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>Aqui declaramos a configura\u00e7\u00e3o <code>openapi_url</code> com o mesmo padr\u00e3o de <code>\"/openapi.json\"</code>.</p> <p>E ent\u00e3o o usamos ao criar o aplicativo <code>ReadyAPI</code>.</p> <p>Ent\u00e3o voc\u00ea pode desabilitar o OpenAPI (incluindo os documentos da interface do usu\u00e1rio) definindo a vari\u00e1vel de ambiente <code>OPENAPI_URL</code> como uma string vazia, como:</p> <pre><code>$ OPENAPI_URL= uvicorn main:app\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>Ent\u00e3o, se voc\u00ea acessar as URLs em <code>/openapi.json</code>, <code>/docs</code> ou <code>/redoc</code>, voc\u00ea receber\u00e1 apenas um erro <code>404 N\u00e3o Encontrado</code> como:</p> <pre><code>{\n    \"detail\": \"Not Found\"\n}\n</code></pre>"},{"location":"how-to/configure-swagger-ui/","title":"Configurar Swagger UI","text":"<p>Voc\u00ea pode configurar alguns par\u00e2metros extras da UI do Swagger.</p> <p>Para configur\u00e1-los, passe o argumento <code>swagger_ui_parameters</code> ao criar o objeto de aplicativo <code>ReadyAPI()</code> ou para a fun\u00e7\u00e3o <code>get_swagger_ui_html()</code>.</p> <p><code>swagger_ui_parameters</code> recebe um dicion\u00e1rio com as configura\u00e7\u00f5es passadas diretamente para o Swagger UI.</p> <p>O ReadyAPI converte as configura\u00e7\u00f5es para JSON para torn\u00e1-las compat\u00edveis com JavaScript, pois \u00e9 disso que o Swagger UI precisa.</p>"},{"location":"how-to/configure-swagger-ui/#desabilitar-realce-de-sintaxe","title":"Desabilitar realce de sintaxe","text":"<p>Por exemplo, voc\u00ea pode desabilitar o destaque de sintaxe na UI do Swagger.</p> <p>Sem alterar as configura\u00e7\u00f5es, o destaque de sintaxe \u00e9 habilitado por padr\u00e3o:</p> <p></p> <p>Mas voc\u00ea pode desabilit\u00e1-lo definindo <code>syntaxHighlight</code> como <code>False</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(swagger_ui_parameters={\"syntaxHighlight\": False})\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre> <p>...e ent\u00e3o o Swagger UI n\u00e3o mostrar\u00e1 mais o destaque de sintaxe:</p> <p></p>"},{"location":"how-to/configure-swagger-ui/#alterar-o-tema","title":"Alterar o tema","text":"<p>Da mesma forma que voc\u00ea pode definir o tema de destaque de sintaxe com a chave <code>\"syntaxHighlight.theme\"</code> (observe que h\u00e1 um ponto no meio):</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(swagger_ui_parameters={\"syntaxHighlight\": {\"theme\": \"obsidian\"}})\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre> <p>Essa configura\u00e7\u00e3o alteraria o tema de cores de destaque de sintaxe:</p> <p></p>"},{"location":"how-to/configure-swagger-ui/#alterar-parametros-de-ui-padrao-do-swagger","title":"Alterar par\u00e2metros de UI padr\u00e3o do Swagger","text":"<p>O ReadyAPI inclui alguns par\u00e2metros de configura\u00e7\u00e3o padr\u00e3o apropriados para a maioria dos casos de uso.</p> <p>Inclui estas configura\u00e7\u00f5es padr\u00e3o:</p> Python 3.8+ <pre><code># Code above omitted \ud83d\udc46\n\n\nswagger_ui_default_parameters: Annotated[\n    Dict[str, Any],\n    Doc(\n        \"\"\"\n        Default configurations for Swagger UI.\n\n        You can use it as a template to add any other configurations needed.\n        \"\"\"\n    ),\n] = {\n    \"dom_id\": \"#swagger-ui\",\n    \"layout\": \"BaseLayout\",\n    \"deepLinking\": True,\n    \"showExtensions\": True,\n    \"showCommonExtensions\": True,\n}\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.8+ <pre><code>import json\nfrom typing import Any, Dict, Optional\n\nfrom readyapi.encoders import jsonable_encoder\nfrom starlette.responses import HTMLResponse\nfrom typing_extensions import Annotated, Doc\n\nswagger_ui_default_parameters: Annotated[\n    Dict[str, Any],\n    Doc(\n        \"\"\"\n        Default configurations for Swagger UI.\n\n        You can use it as a template to add any other configurations needed.\n        \"\"\"\n    ),\n] = {\n    \"dom_id\": \"#swagger-ui\",\n    \"layout\": \"BaseLayout\",\n    \"deepLinking\": True,\n    \"showExtensions\": True,\n    \"showCommonExtensions\": True,\n}\n\n\ndef get_swagger_ui_html(\n    *,\n    openapi_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The OpenAPI URL that Swagger UI should load and use.\n\n            This is normally done automatically by ReadyAPI using the default URL\n            `/openapi.json`.\n            \"\"\"\n        ),\n    ],\n    title: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The HTML `&lt;title&gt;` content, normally shown in the browser tab.\n            \"\"\"\n        ),\n    ],\n    swagger_js_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL to use to load the Swagger UI JavaScript.\n\n            It is normally set to a CDN URL.\n            \"\"\"\n        ),\n    ] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui-bundle.js\",\n    swagger_css_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL to use to load the Swagger UI CSS.\n\n            It is normally set to a CDN URL.\n            \"\"\"\n        ),\n    ] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui.css\",\n    swagger_favicon_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL of the favicon to use. It is normally shown in the browser tab.\n            \"\"\"\n        ),\n    ] = \"https://readyapi.github.io/img/favicon.png\",\n    oauth2_redirect_url: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            The OAuth2 redirect URL, it is normally automatically handled by ReadyAPI.\n            \"\"\"\n        ),\n    ] = None,\n    init_oauth: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            A dictionary with Swagger UI OAuth2 initialization configurations.\n            \"\"\"\n        ),\n    ] = None,\n    swagger_ui_parameters: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Configuration parameters for Swagger UI.\n\n            It defaults to [swagger_ui_default_parameters][readyapi.openapi.docs.swagger_ui_default_parameters].\n            \"\"\"\n        ),\n    ] = None,\n) -&gt; HTMLResponse:\n    \"\"\"\n    Generate and return the HTML  that loads Swagger UI for the interactive\n    API docs (normally served at `/docs`).\n\n    You would only call this function yourself if you needed to override some parts,\n    for example the URLs to use to load Swagger UI's JavaScript and CSS.\n\n    Read more about it in the\n    [ReadyAPI docs for Configure Swagger UI](https://readyapi.github.io/how-to/configure-swagger-ui/)\n    and the [ReadyAPI docs for Custom Docs UI Static Assets (Self-Hosting)](https://readyapi.github.io/how-to/custom-docs-ui-assets/).\n    \"\"\"\n    current_swagger_ui_parameters = swagger_ui_default_parameters.copy()\n    if swagger_ui_parameters:\n        current_swagger_ui_parameters.update(swagger_ui_parameters)\n\n    html = f\"\"\"\n    &lt;!DOCTYPE html&gt;\n    &lt;html&gt;\n    &lt;head&gt;\n    &lt;link type=\"text/css\" rel=\"stylesheet\" href=\"{swagger_css_url}\"&gt;\n    &lt;link rel=\"shortcut icon\" href=\"{swagger_favicon_url}\"&gt;\n    &lt;title&gt;{title}&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;div id=\"swagger-ui\"&gt;\n    &lt;/div&gt;\n    &lt;script src=\"{swagger_js_url}\"&gt;&lt;/script&gt;\n    &lt;!-- `SwaggerUIBundle` is now available on the page --&gt;\n    &lt;script&gt;\n    const ui = SwaggerUIBundle({{\n        url: '{openapi_url}',\n    \"\"\"\n\n    for key, value in current_swagger_ui_parameters.items():\n        html += f\"{json.dumps(key)}: {json.dumps(jsonable_encoder(value))},\\n\"\n\n    if oauth2_redirect_url:\n        html += f\"oauth2RedirectUrl: window.location.origin + '{oauth2_redirect_url}',\"\n\n    html += \"\"\"\n    presets: [\n        SwaggerUIBundle.presets.apis,\n        SwaggerUIBundle.SwaggerUIStandalonePreset\n        ],\n    })\"\"\"\n\n    if init_oauth:\n        html += f\"\"\"\n        ui.initOAuth({json.dumps(jsonable_encoder(init_oauth))})\n        \"\"\"\n\n    html += \"\"\"\n    &lt;/script&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\"\n    return HTMLResponse(html)\n\n\ndef get_redoc_html(\n    *,\n    openapi_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The OpenAPI URL that ReDoc should load and use.\n\n            This is normally done automatically by ReadyAPI using the default URL\n            `/openapi.json`.\n            \"\"\"\n        ),\n    ],\n    title: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The HTML `&lt;title&gt;` content, normally shown in the browser tab.\n            \"\"\"\n        ),\n    ],\n    redoc_js_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL to use to load the ReDoc JavaScript.\n\n            It is normally set to a CDN URL.\n            \"\"\"\n        ),\n    ] = \"https://cdn.jsdelivr.net/npm/redoc@2/bundles/redoc.standalone.js\",\n    redoc_favicon_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL of the favicon to use. It is normally shown in the browser tab.\n            \"\"\"\n        ),\n    ] = \"https://readyapi.github.io/img/favicon.png\",\n    with_google_fonts: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Load and use Google Fonts.\n            \"\"\"\n        ),\n    ] = True,\n) -&gt; HTMLResponse:\n    \"\"\"\n    Generate and return the HTML response that loads ReDoc for the alternative\n    API docs (normally served at `/redoc`).\n\n    You would only call this function yourself if you needed to override some parts,\n    for example the URLs to use to load ReDoc's JavaScript and CSS.\n\n    Read more about it in the\n    [ReadyAPI docs for Custom Docs UI Static Assets (Self-Hosting)](https://readyapi.github.io/how-to/custom-docs-ui-assets/).\n    \"\"\"\n    html = f\"\"\"\n    &lt;!DOCTYPE html&gt;\n    &lt;html&gt;\n    &lt;head&gt;\n    &lt;title&gt;{title}&lt;/title&gt;\n    &lt;!-- needed for adaptive design --&gt;\n    &lt;meta charset=\"utf-8\"/&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    \"\"\"\n    if with_google_fonts:\n        html += \"\"\"\n    &lt;link href=\"https://fonts.googleapis.com/css?family=Montserrat:300,400,700|Roboto:300,400,700\" rel=\"stylesheet\"&gt;\n    \"\"\"\n    html += f\"\"\"\n    &lt;link rel=\"shortcut icon\" href=\"{redoc_favicon_url}\"&gt;\n    &lt;!--\n    ReDoc doesn't change outer page styles\n    --&gt;\n    &lt;style&gt;\n      body {{\n        margin: 0;\n        padding: 0;\n      }}\n    &lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;noscript&gt;\n        ReDoc requires Javascript to function. Please enable it to browse the documentation.\n    &lt;/noscript&gt;\n    &lt;redoc spec-url=\"{openapi_url}\"&gt;&lt;/redoc&gt;\n    &lt;script src=\"{redoc_js_url}\"&gt; &lt;/script&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\"\n    return HTMLResponse(html)\n\n\ndef get_swagger_ui_oauth2_redirect_html() -&gt; HTMLResponse:\n    \"\"\"\n    Generate the HTML response with the OAuth2 redirection for Swagger UI.\n\n    You normally don't need to use or change this.\n    \"\"\"\n    # copied from https://github.com/swagger-api/swagger-ui/blob/v4.14.0/dist/oauth2-redirect.html\n    html = \"\"\"\n    &lt;!doctype html&gt;\n    &lt;html lang=\"en-US\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;Swagger UI: OAuth2 Redirect&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;script&gt;\n        'use strict';\n        function run () {\n            var oauth2 = window.opener.swaggerUIRedirectOauth2;\n            var sentState = oauth2.state;\n            var redirectUrl = oauth2.redirectUrl;\n            var isValid, qp, arr;\n\n            if (/code|token|error/.test(window.location.hash)) {\n                qp = window.location.hash.substring(1).replace('?', '&amp;');\n            } else {\n                qp = location.search.substring(1);\n            }\n\n            arr = qp.split(\"&amp;\");\n            arr.forEach(function (v,i,_arr) { _arr[i] = '\"' + v.replace('=', '\":\"') + '\"';});\n            qp = qp ? JSON.parse('{' + arr.join() + '}',\n                    function (key, value) {\n                        return key === \"\" ? value : decodeURIComponent(value);\n                    }\n            ) : {};\n\n            isValid = qp.state === sentState;\n\n            if ((\n              oauth2.auth.schema.get(\"flow\") === \"accessCode\" ||\n              oauth2.auth.schema.get(\"flow\") === \"authorizationCode\" ||\n              oauth2.auth.schema.get(\"flow\") === \"authorization_code\"\n            ) &amp;&amp; !oauth2.auth.code) {\n                if (!isValid) {\n                    oauth2.errCb({\n                        authId: oauth2.auth.name,\n                        source: \"auth\",\n                        level: \"warning\",\n                        message: \"Authorization may be unsafe, passed state was changed in server. The passed state wasn't returned from auth server.\"\n                    });\n                }\n\n                if (qp.code) {\n                    delete oauth2.state;\n                    oauth2.auth.code = qp.code;\n                    oauth2.callback({auth: oauth2.auth, redirectUrl: redirectUrl});\n                } else {\n                    let oauthErrorMsg;\n                    if (qp.error) {\n                        oauthErrorMsg = \"[\"+qp.error+\"]: \" +\n                            (qp.error_description ? qp.error_description+ \". \" : \"no accessCode received from the server. \") +\n                            (qp.error_uri ? \"More info: \"+qp.error_uri : \"\");\n                    }\n\n                    oauth2.errCb({\n                        authId: oauth2.auth.name,\n                        source: \"auth\",\n                        level: \"error\",\n                        message: oauthErrorMsg || \"[Authorization failed]: no accessCode received from the server.\"\n                    });\n                }\n            } else {\n                oauth2.callback({auth: oauth2.auth, token: qp, isValid: isValid, redirectUrl: redirectUrl});\n            }\n            window.close();\n        }\n\n        if (document.readyState !== 'loading') {\n            run();\n        } else {\n            document.addEventListener('DOMContentLoaded', function () {\n                run();\n            });\n        }\n    &lt;/script&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n        \"\"\"\n    return HTMLResponse(content=html)\n</code></pre> <p>Voc\u00ea pode substituir qualquer um deles definindo um valor diferente no argumento <code>swagger_ui_parameters</code>.</p> <p>Por exemplo, para desabilitar <code>deepLinking</code> voc\u00ea pode passar essas configura\u00e7\u00f5es para <code>swagger_ui_parameters</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(swagger_ui_parameters={\"deepLinking\": False})\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre>"},{"location":"how-to/configure-swagger-ui/#outros-parametros-da-ui-do-swagger","title":"Outros par\u00e2metros da UI do Swagger","text":"<p>Para ver todas as outras configura\u00e7\u00f5es poss\u00edveis que voc\u00ea pode usar, leia a documenta\u00e7\u00e3o oficial dos par\u00e2metros da UI do Swagger.</p>"},{"location":"how-to/configure-swagger-ui/#configuracoes-somente-javascript","title":"Configura\u00e7\u00f5es somente JavaScript","text":"<p>A interface do usu\u00e1rio do Swagger tamb\u00e9m permite que outras configura\u00e7\u00f5es sejam objetos somente JavaScript (por exemplo, fun\u00e7\u00f5es JavaScript).</p> <p>O ReadyAPI tamb\u00e9m inclui estas configura\u00e7\u00f5es de <code>predefini\u00e7\u00f5es</code> somente para JavaScript:</p> <pre><code>presets: [\n    SwaggerUIBundle.presets.apis,\n    SwaggerUIBundle.SwaggerUIStandalonePreset\n]\n</code></pre> <p>Esses s\u00e3o objetos JavaScript, n\u00e3o strings, ent\u00e3o voc\u00ea n\u00e3o pode pass\u00e1-los diretamente do c\u00f3digo Python.</p> <p>Se voc\u00ea precisar usar configura\u00e7\u00f5es somente JavaScript como essas, voc\u00ea pode usar um dos m\u00e9todos acima. Sobrescreva todas as opera\u00e7\u00f5es de rotas do Swagger UI e escreva manualmente qualquer JavaScript que voc\u00ea precisar.</p>"},{"location":"how-to/custom-docs-ui-assets/","title":"Recursos Est\u00e1ticos Personalizados para a UI de Documenta\u00e7\u00e3o (Hospedagem Pr\u00f3pria)","text":"<p>A documenta\u00e7\u00e3o da API usa Swagger UI e ReDoc, e cada um deles precisa de alguns arquivos JavaScript e CSS.</p> <p>Por padr\u00e3o, esses arquivos s\u00e3o fornecidos por um CDN.</p> <p>Mas \u00e9 poss\u00edvel personaliz\u00e1-los, voc\u00ea pode definir um CDN espec\u00edfico ou providenciar os arquivos voc\u00ea mesmo.</p>"},{"location":"how-to/custom-docs-ui-assets/#cdn-personalizado-para-javascript-e-css","title":"CDN Personalizado para JavaScript e CSS","text":"<p>Vamos supor que voc\u00ea deseja usar um CDN diferente, por exemplo, voc\u00ea deseja usar <code>https://unpkg.com/</code>.</p> <p>Isso pode ser \u00fatil se, por exemplo, voc\u00ea mora em um pa\u00eds que restringe algumas URLs.</p>"},{"location":"how-to/custom-docs-ui-assets/#desativar-a-documentacao-automatica","title":"Desativar a documenta\u00e7\u00e3o autom\u00e1tica","text":"<p>O primeiro passo \u00e9 desativar a documenta\u00e7\u00e3o autom\u00e1tica, pois por padr\u00e3o, ela usa o CDN padr\u00e3o.</p> <p>Para desativ\u00e1-los, defina suas URLs como <code>None</code> ao criar seu aplicativo <code>ReadyAPI</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.docs import (\n    get_redoc_html,\n    get_swagger_ui_html,\n    get_swagger_ui_oauth2_redirect_html,\n)\n\napp = ReadyAPI(docs_url=None, redoc_url=None)\n\n\n@app.get(\"/docs\", include_in_schema=False)\nasync def custom_swagger_ui_html():\n    return get_swagger_ui_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - Swagger UI\",\n        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,\n        swagger_js_url=\"https://unpkg.com/swagger-ui-dist@5/swagger-ui-bundle.js\",\n        swagger_css_url=\"https://unpkg.com/swagger-ui-dist@5/swagger-ui.css\",\n    )\n\n\n@app.get(app.swagger_ui_oauth2_redirect_url, include_in_schema=False)\nasync def swagger_ui_redirect():\n    return get_swagger_ui_oauth2_redirect_html()\n\n\n@app.get(\"/redoc\", include_in_schema=False)\nasync def redoc_html():\n    return get_redoc_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - ReDoc\",\n        redoc_js_url=\"https://unpkg.com/redoc@2/bundles/redoc.standalone.js\",\n    )\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre>"},{"location":"how-to/custom-docs-ui-assets/#incluir-a-documentacao-personalizada","title":"Incluir a documenta\u00e7\u00e3o personalizada","text":"<p>Agora voc\u00ea pode criar as opera\u00e7\u00f5es de rota para a documenta\u00e7\u00e3o personalizada.</p> <p>Voc\u00ea pode reutilizar as fun\u00e7\u00f5es internas do ReadyAPI para criar as p\u00e1ginas HTML para a documenta\u00e7\u00e3o e passar os argumentos necess\u00e1rios:</p> <ul> <li><code>openapi_url</code>: a URL onde a p\u00e1gina HTML para a documenta\u00e7\u00e3o pode obter o esquema OpenAPI para a sua API. Voc\u00ea pode usar aqui o atributo <code>app.openapi_url</code>.</li> <li><code>title</code>: o t\u00edtulo da sua API.</li> <li><code>oauth2_redirect_url</code>: voc\u00ea pode usar <code>app.swagger_ui_oauth2_redirect_url</code> aqui para usar o padr\u00e3o.</li> <li><code>swagger_js_url</code>: a URL onde a p\u00e1gina HTML para a sua documenta\u00e7\u00e3o do Swagger UI pode obter o arquivo JavaScript. Este \u00e9 o URL do CDN personalizado.</li> <li><code>swagger_css_url</code>: a URL onde a p\u00e1gina HTML para a sua documenta\u00e7\u00e3o do Swagger UI pode obter o arquivo CSS. Este \u00e9 o URL do CDN personalizado.</li> </ul> <p>E de forma semelhante para o ReDoc...</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.docs import (\n    get_redoc_html,\n    get_swagger_ui_html,\n    get_swagger_ui_oauth2_redirect_html,\n)\n\napp = ReadyAPI(docs_url=None, redoc_url=None)\n\n\n@app.get(\"/docs\", include_in_schema=False)\nasync def custom_swagger_ui_html():\n    return get_swagger_ui_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - Swagger UI\",\n        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,\n        swagger_js_url=\"https://unpkg.com/swagger-ui-dist@5/swagger-ui-bundle.js\",\n        swagger_css_url=\"https://unpkg.com/swagger-ui-dist@5/swagger-ui.css\",\n    )\n\n\n@app.get(app.swagger_ui_oauth2_redirect_url, include_in_schema=False)\nasync def swagger_ui_redirect():\n    return get_swagger_ui_oauth2_redirect_html()\n\n\n@app.get(\"/redoc\", include_in_schema=False)\nasync def redoc_html():\n    return get_redoc_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - ReDoc\",\n        redoc_js_url=\"https://unpkg.com/redoc@2/bundles/redoc.standalone.js\",\n    )\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre> <p>Dica</p> <p>A opera\u00e7\u00e3o de rota para <code>swagger_ui_redirect</code> \u00e9 um auxiliar para quando voc\u00ea usa OAuth2.</p> <p>Se voc\u00ea integrar sua API com um provedor OAuth2, voc\u00ea poder\u00e1 autenticar e voltar para a documenta\u00e7\u00e3o da API com as credenciais adquiridas. E interagir com ela usando a autentica\u00e7\u00e3o OAuth2 real.</p> <p>Swagger UI lidar\u00e1 com isso nos bastidores para voc\u00ea, mas ele precisa desse auxiliar de \"redirecionamento\".</p>"},{"location":"how-to/custom-docs-ui-assets/#criar-uma-operacao-de-rota-para-testar","title":"Criar uma opera\u00e7\u00e3o de rota para testar","text":"<p>Agora, para poder testar se tudo funciona, crie uma opera\u00e7\u00e3o de rota:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.docs import (\n    get_redoc_html,\n    get_swagger_ui_html,\n    get_swagger_ui_oauth2_redirect_html,\n)\n\napp = ReadyAPI(docs_url=None, redoc_url=None)\n\n\n@app.get(\"/docs\", include_in_schema=False)\nasync def custom_swagger_ui_html():\n    return get_swagger_ui_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - Swagger UI\",\n        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,\n        swagger_js_url=\"https://unpkg.com/swagger-ui-dist@5/swagger-ui-bundle.js\",\n        swagger_css_url=\"https://unpkg.com/swagger-ui-dist@5/swagger-ui.css\",\n    )\n\n\n@app.get(app.swagger_ui_oauth2_redirect_url, include_in_schema=False)\nasync def swagger_ui_redirect():\n    return get_swagger_ui_oauth2_redirect_html()\n\n\n@app.get(\"/redoc\", include_in_schema=False)\nasync def redoc_html():\n    return get_redoc_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - ReDoc\",\n        redoc_js_url=\"https://unpkg.com/redoc@2/bundles/redoc.standalone.js\",\n    )\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre>"},{"location":"how-to/custom-docs-ui-assets/#teste","title":"Teste","text":"<p>Agora, voc\u00ea deve ser capaz de ir para a documenta\u00e7\u00e3o em http://127.0.0.1:8000/docs, e recarregar a p\u00e1gina, ela carregar\u00e1 esses recursos do novo CDN.</p>"},{"location":"how-to/custom-docs-ui-assets/#hospedagem-propria-de-javascript-e-css-para-a-documentacao","title":"Hospedagem Pr\u00f3pria de JavaScript e CSS para a documenta\u00e7\u00e3o","text":"<p>Hospedar o JavaScript e o CSS pode ser \u00fatil se, por exemplo, voc\u00ea precisa que seu aplicativo continue funcionando mesmo offline, sem acesso aberto \u00e0 Internet, ou em uma rede local.</p> <p>Aqui voc\u00ea ver\u00e1 como providenciar esses arquivos voc\u00ea mesmo, no mesmo aplicativo ReadyAPI, e configurar a documenta\u00e7\u00e3o para us\u00e1-los.</p>"},{"location":"how-to/custom-docs-ui-assets/#estrutura-de-arquivos-do-projeto","title":"Estrutura de Arquivos do Projeto","text":"<p>Vamos supor que a estrutura de arquivos do seu projeto se pare\u00e7a com isso:</p> <pre><code>.\n\u251c\u2500\u2500 app\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 main.py\n</code></pre> <p>Agora crie um diret\u00f3rio para armazenar esses arquivos est\u00e1ticos.</p> <p>Sua nova estrutura de arquivos poderia se parecer com isso:</p> <pre><code>.\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.py\n\u2514\u2500\u2500 static/\n</code></pre>"},{"location":"how-to/custom-docs-ui-assets/#baixe-os-arquivos","title":"Baixe os arquivos","text":"<p>Baixe os arquivos est\u00e1ticos necess\u00e1rios para a documenta\u00e7\u00e3o e coloque-os no diret\u00f3rio <code>static/</code>.</p> <p>Voc\u00ea provavelmente pode clicar com o bot\u00e3o direito em cada link e selecionar uma op\u00e7\u00e3o semelhante a <code>Salvar link como...</code>.</p> <p>Swagger UI usa os arquivos:</p> <ul> <li><code>swagger-ui-bundle.js</code></li> <li><code>swagger-ui.css</code></li> </ul> <p>E o ReDoc usa os arquivos:</p> <ul> <li><code>redoc.standalone.js</code></li> </ul> <p>Depois disso, sua estrutura de arquivos deve se parecer com:</p> <pre><code>.\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.py\n\u2514\u2500\u2500 static\n    \u251c\u2500\u2500 redoc.standalone.js\n    \u251c\u2500\u2500 swagger-ui-bundle.js\n    \u2514\u2500\u2500 swagger-ui.css\n</code></pre>"},{"location":"how-to/custom-docs-ui-assets/#prover-os-arquivos-estaticos","title":"Prover os arquivos est\u00e1ticos","text":"<ul> <li>Importe <code>StaticFiles</code>.</li> <li>\"Monte\" a inst\u00e2ncia <code>StaticFiles()</code> em um caminho espec\u00edfico.</li> </ul> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.docs import (\n    get_redoc_html,\n    get_swagger_ui_html,\n    get_swagger_ui_oauth2_redirect_html,\n)\nfrom readyapi.staticfiles import StaticFiles\n\napp = ReadyAPI(docs_url=None, redoc_url=None)\n\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n\n\n@app.get(\"/docs\", include_in_schema=False)\nasync def custom_swagger_ui_html():\n    return get_swagger_ui_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - Swagger UI\",\n        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,\n        swagger_js_url=\"/static/swagger-ui-bundle.js\",\n        swagger_css_url=\"/static/swagger-ui.css\",\n    )\n\n\n@app.get(app.swagger_ui_oauth2_redirect_url, include_in_schema=False)\nasync def swagger_ui_redirect():\n    return get_swagger_ui_oauth2_redirect_html()\n\n\n@app.get(\"/redoc\", include_in_schema=False)\nasync def redoc_html():\n    return get_redoc_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - ReDoc\",\n        redoc_js_url=\"/static/redoc.standalone.js\",\n    )\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre>"},{"location":"how-to/custom-docs-ui-assets/#teste-os-arquivos-estaticos","title":"Teste os arquivos est\u00e1ticos","text":"<p>Inicialize seu aplicativo e v\u00e1 para http://127.0.0.1:8000/static/redoc.standalone.js.</p> <p>Voc\u00ea dever\u00e1 ver um arquivo JavaScript muito longo para o ReDoc.</p> <p>Esse arquivo pode come\u00e7ar com algo como:</p> <pre><code>/*! For license information please see redoc.standalone.js.LICENSE.txt */\n!function(e,t){\"object\"==typeof exports&amp;&amp;\"object\"==typeof module?module.exports=t(require(\"null\")):\n...\n</code></pre> <p>Isso confirma que voc\u00ea est\u00e1 conseguindo fornecer arquivos est\u00e1ticos do seu aplicativo e que voc\u00ea colocou os arquivos est\u00e1ticos para a documenta\u00e7\u00e3o no local correto.</p> <p>Agora, podemos configurar o aplicativo para usar esses arquivos est\u00e1ticos para a documenta\u00e7\u00e3o.</p>"},{"location":"how-to/custom-docs-ui-assets/#desativar-a-documentacao-automatica-para-arquivos-estaticos","title":"Desativar a documenta\u00e7\u00e3o autom\u00e1tica para arquivos est\u00e1ticos","text":"<p>Da mesma forma que ao usar um CDN personalizado, o primeiro passo \u00e9 desativar a documenta\u00e7\u00e3o autom\u00e1tica, pois ela usa o CDN padr\u00e3o.</p> <p>Para desativ\u00e1-los, defina suas URLs como <code>None</code> ao criar seu aplicativo <code>ReadyAPI</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.docs import (\n    get_redoc_html,\n    get_swagger_ui_html,\n    get_swagger_ui_oauth2_redirect_html,\n)\nfrom readyapi.staticfiles import StaticFiles\n\napp = ReadyAPI(docs_url=None, redoc_url=None)\n\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n\n\n@app.get(\"/docs\", include_in_schema=False)\nasync def custom_swagger_ui_html():\n    return get_swagger_ui_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - Swagger UI\",\n        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,\n        swagger_js_url=\"/static/swagger-ui-bundle.js\",\n        swagger_css_url=\"/static/swagger-ui.css\",\n    )\n\n\n@app.get(app.swagger_ui_oauth2_redirect_url, include_in_schema=False)\nasync def swagger_ui_redirect():\n    return get_swagger_ui_oauth2_redirect_html()\n\n\n@app.get(\"/redoc\", include_in_schema=False)\nasync def redoc_html():\n    return get_redoc_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - ReDoc\",\n        redoc_js_url=\"/static/redoc.standalone.js\",\n    )\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre>"},{"location":"how-to/custom-docs-ui-assets/#incluir-a-documentacao-personalizada-para-arquivos-estaticos","title":"Incluir a documenta\u00e7\u00e3o personalizada para arquivos est\u00e1ticos","text":"<p>E da mesma forma que com um CDN personalizado, agora voc\u00ea pode criar as opera\u00e7\u00f5es de rota para a documenta\u00e7\u00e3o personalizada.</p> <p>Novamente, voc\u00ea pode reutilizar as fun\u00e7\u00f5es internas do ReadyAPI para criar as p\u00e1ginas HTML para a documenta\u00e7\u00e3o e passar os argumentos necess\u00e1rios:</p> <ul> <li><code>openapi_url</code>: a URL onde a p\u00e1gina HTML para a documenta\u00e7\u00e3o pode obter o esquema OpenAPI para a sua API. Voc\u00ea pode usar aqui o atributo <code>app.openapi_url</code>.</li> <li><code>title</code>: o t\u00edtulo da sua API.</li> <li><code>oauth2_redirect_url</code>: Voc\u00ea pode usar <code>app.swagger_ui_oauth2_redirect_url</code> aqui para usar o padr\u00e3o.</li> <li><code>swagger_js_url</code>: a URL onde a p\u00e1gina HTML para a sua documenta\u00e7\u00e3o do Swagger UI pode obter o arquivo JavaScript. Este \u00e9 o URL do CDN personalizado. Este \u00e9 o URL que seu aplicativo est\u00e1 fornecendo.</li> <li><code>swagger_css_url</code>: a URL onde a p\u00e1gina HTML para a sua documenta\u00e7\u00e3o do Swagger UI pode obter o arquivo CSS. Esse \u00e9 o que seu aplicativo est\u00e1 fornecendo.</li> </ul> <p>E de forma semelhante para o ReDoc...</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.docs import (\n    get_redoc_html,\n    get_swagger_ui_html,\n    get_swagger_ui_oauth2_redirect_html,\n)\nfrom readyapi.staticfiles import StaticFiles\n\napp = ReadyAPI(docs_url=None, redoc_url=None)\n\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n\n\n@app.get(\"/docs\", include_in_schema=False)\nasync def custom_swagger_ui_html():\n    return get_swagger_ui_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - Swagger UI\",\n        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,\n        swagger_js_url=\"/static/swagger-ui-bundle.js\",\n        swagger_css_url=\"/static/swagger-ui.css\",\n    )\n\n\n@app.get(app.swagger_ui_oauth2_redirect_url, include_in_schema=False)\nasync def swagger_ui_redirect():\n    return get_swagger_ui_oauth2_redirect_html()\n\n\n@app.get(\"/redoc\", include_in_schema=False)\nasync def redoc_html():\n    return get_redoc_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - ReDoc\",\n        redoc_js_url=\"/static/redoc.standalone.js\",\n    )\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre> <p>Dica</p> <p>A opera\u00e7\u00e3o de rota para <code>swagger_ui_redirect</code> \u00e9 um auxiliar para quando voc\u00ea usa OAuth2.</p> <p>Se voc\u00ea integrar sua API com um provedor OAuth2, voc\u00ea poder\u00e1 autenticar e voltar para a documenta\u00e7\u00e3o da API com as credenciais adquiridas. E, ent\u00e3o, interagir com ela usando a autentica\u00e7\u00e3o OAuth2 real.</p> <p>Swagger UI lidar\u00e1 com isso nos bastidores para voc\u00ea, mas ele precisa desse auxiliar de \"redirect\".</p>"},{"location":"how-to/custom-docs-ui-assets/#criar-uma-operacao-de-rota-para-testar-arquivos-estaticos","title":"Criar uma opera\u00e7\u00e3o de rota para testar arquivos est\u00e1ticos","text":"<p>Agora, para poder testar se tudo funciona, crie uma opera\u00e7\u00e3o de rota:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.docs import (\n    get_redoc_html,\n    get_swagger_ui_html,\n    get_swagger_ui_oauth2_redirect_html,\n)\nfrom readyapi.staticfiles import StaticFiles\n\napp = ReadyAPI(docs_url=None, redoc_url=None)\n\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n\n\n@app.get(\"/docs\", include_in_schema=False)\nasync def custom_swagger_ui_html():\n    return get_swagger_ui_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - Swagger UI\",\n        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,\n        swagger_js_url=\"/static/swagger-ui-bundle.js\",\n        swagger_css_url=\"/static/swagger-ui.css\",\n    )\n\n\n@app.get(app.swagger_ui_oauth2_redirect_url, include_in_schema=False)\nasync def swagger_ui_redirect():\n    return get_swagger_ui_oauth2_redirect_html()\n\n\n@app.get(\"/redoc\", include_in_schema=False)\nasync def redoc_html():\n    return get_redoc_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - ReDoc\",\n        redoc_js_url=\"/static/redoc.standalone.js\",\n    )\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre>"},{"location":"how-to/custom-docs-ui-assets/#teste-a-ui-de-arquivos-estaticos","title":"Teste a UI de Arquivos Est\u00e1ticos","text":"<p>Agora, voc\u00ea deve ser capaz de desconectar o WiFi, ir para a documenta\u00e7\u00e3o em http://127.0.0.1:8000/docs, e recarregar a p\u00e1gina.</p> <p>E mesmo sem Internet, voc\u00ea ser\u00e1 capaz de ver a documenta\u00e7\u00e3o da sua API e interagir com ela.</p>"},{"location":"how-to/custom-request-and-route/","title":"Requisi\u00e7\u00f5es Personalizadas e Classes da APIRoute","text":"<p>Em algum casos, voc\u00ea pode querer sobreescrever a l\u00f3gica usada pelas classes <code>Request</code>e <code>APIRoute</code>.</p> <p>Em particular, isso pode ser uma boa alternativa para uma l\u00f3gica em um middleware</p> <p>Por exemplo, se voc\u00ea quiser ler ou manipular o corpo da requisi\u00e7\u00e3o antes que ele seja processado pela sua aplica\u00e7\u00e3o.</p> <p>Perigo</p> <p>Isso \u00e9 um recurso \"avan\u00e7ado\".</p> <p>Se voc\u00ea for um iniciante em ReadyAPI voc\u00ea deve considerar pular essa se\u00e7\u00e3o.</p>"},{"location":"how-to/custom-request-and-route/#casos-de-uso","title":"Casos de Uso","text":"<p>Alguns casos de uso incluem:</p> <ul> <li>Converter requisi\u00e7\u00f5es n\u00e3o-JSON para JSON (por exemplo, <code>msgpack</code>).</li> <li>Descomprimir corpos de requisi\u00e7\u00e3o comprimidos com gzip.</li> <li>Registrar automaticamente todos os corpos de requisi\u00e7\u00e3o.</li> </ul>"},{"location":"how-to/custom-request-and-route/#manipulando-codificacoes-de-corpo-de-requisicao-personalizadas","title":"Manipulando codifica\u00e7\u00f5es de corpo de requisi\u00e7\u00e3o personalizadas","text":"<p>Vamos ver como usar uma subclasse personalizada de <code>Request</code> para descomprimir requisi\u00e7\u00f5es gzip.</p> <p>E uma subclasse de <code>APIRoute</code> para usar essa classe de requisi\u00e7\u00e3o personalizada.</p>"},{"location":"how-to/custom-request-and-route/#criar-uma-classe-gziprequest-personalizada","title":"Criar uma classe <code>GzipRequest</code> personalizada","text":"<p>Dica</p> <p>Isso \u00e9 um exemplo de brincadeira para demonstrar como funciona, se voc\u00ea precisar de suporte para Gzip, voc\u00ea pode usar o <code>GzipMiddleware</code> fornecido.</p> <p>Primeiro, criamos uma classe <code>GzipRequest</code>, que ir\u00e1 sobrescrever o m\u00e9todo <code>Request.body()</code> para descomprimir o corpo na presen\u00e7a de um cabe\u00e7alho apropriado.</p> <p>Se n\u00e3o houver <code>gzip</code> no cabe\u00e7alho, ele n\u00e3o tentar\u00e1 descomprimir o corpo.</p> <p>Dessa forma, a mesma classe de rota pode lidar com requisi\u00e7\u00f5es comprimidas ou n\u00e3o comprimidas.</p> Python 3.8+ <pre><code>import gzip\nfrom typing import Callable, List\n\nfrom readyapi import Body, ReadyAPI, Request, Response\nfrom readyapi.routing import APIRoute\n\n\nclass GzipRequest(Request):\n    async def body(self) -&gt; bytes:\n        if not hasattr(self, \"_body\"):\n            body = await super().body()\n            if \"gzip\" in self.headers.getlist(\"Content-Encoding\"):\n                body = gzip.decompress(body)\n            self._body = body\n        return self._body\n\n\nclass GzipRoute(APIRoute):\n    def get_route_handler(self) -&gt; Callable:\n        original_route_handler = super().get_route_handler()\n\n        async def custom_route_handler(request: Request) -&gt; Response:\n            request = GzipRequest(request.scope, request.receive)\n            return await original_route_handler(request)\n\n        return custom_route_handler\n\n\napp = ReadyAPI()\napp.router.route_class = GzipRoute\n\n\n@app.post(\"/sum\")\nasync def sum_numbers(numbers: List[int] = Body()):\n    return {\"sum\": sum(numbers)}\n</code></pre>"},{"location":"how-to/custom-request-and-route/#criar-uma-classe-gziproute-personalizada","title":"Criar uma classe <code>GzipRoute</code> personalizada","text":"<p>Em seguida, criamos uma subclasse personalizada de <code>readyapi.routing.APIRoute</code> que far\u00e1 uso do <code>GzipRequest</code>.</p> <p>Dessa vez, ele ir\u00e1 sobrescrever o m\u00e9todo <code>APIRoute.get_route_handler()</code>.</p> <p>Esse m\u00e9todo retorna uma fun\u00e7\u00e3o. E essa fun\u00e7\u00e3o \u00e9 o que ir\u00e1 receber uma requisi\u00e7\u00e3o e retornar uma resposta.</p> <p>Aqui n\u00f3s usamos para criar um <code>GzipRequest</code> a partir da requisi\u00e7\u00e3o original.</p> Python 3.8+ <pre><code>import gzip\nfrom typing import Callable, List\n\nfrom readyapi import Body, ReadyAPI, Request, Response\nfrom readyapi.routing import APIRoute\n\n\nclass GzipRequest(Request):\n    async def body(self) -&gt; bytes:\n        if not hasattr(self, \"_body\"):\n            body = await super().body()\n            if \"gzip\" in self.headers.getlist(\"Content-Encoding\"):\n                body = gzip.decompress(body)\n            self._body = body\n        return self._body\n\n\nclass GzipRoute(APIRoute):\n    def get_route_handler(self) -&gt; Callable:\n        original_route_handler = super().get_route_handler()\n\n        async def custom_route_handler(request: Request) -&gt; Response:\n            request = GzipRequest(request.scope, request.receive)\n            return await original_route_handler(request)\n\n        return custom_route_handler\n\n\napp = ReadyAPI()\napp.router.route_class = GzipRoute\n\n\n@app.post(\"/sum\")\nasync def sum_numbers(numbers: List[int] = Body()):\n    return {\"sum\": sum(numbers)}\n</code></pre> <p>Detalhes T\u00e9cnicos</p> <p>Um <code>Request</code> tamb\u00e9m tem um <code>request.receive</code>, que \u00e9 uma fun\u00e7\u00e3o para \"receber\" o corpo da requisi\u00e7\u00e3o.</p> <p>Um <code>Request</code> tamb\u00e9m tem um <code>request.receive</code>, que \u00e9 uma fun\u00e7\u00e3o para \"receber\" o corpo da requisi\u00e7\u00e3o.</p> <p>O dicion\u00e1rio <code>scope</code> e a fun\u00e7\u00e3o <code>receive</code> s\u00e3o ambos parte da especifica\u00e7\u00e3o ASGI.</p> <p>E essas duas coisas, <code>scope</code> e <code>receive</code>, s\u00e3o o que \u00e9 necess\u00e1rio para criar uma nova inst\u00e2ncia de <code>Request</code>.</p> <p>Para aprender mais sobre o <code>Request</code> confira a documenta\u00e7\u00e3o do Starlette sobre Requests.</p> <p>A \u00fanica coisa que a fun\u00e7\u00e3o retornada por <code>GzipRequest.get_route_handler</code> faz de diferente \u00e9 converter o <code>Request</code> para um <code>GzipRequest</code>.</p> <p>Fazendo isso, nosso <code>GzipRequest</code> ir\u00e1 cuidar de descomprimir os dados (se necess\u00e1rio) antes de pass\u00e1-los para nossas opera\u00e7\u00f5es de rota.</p> <p>Depois disso, toda a l\u00f3gica de processamento \u00e9 a mesma.</p> <p>Mas por causa das nossas mudan\u00e7as em <code>GzipRequest.body</code>, o corpo da requisi\u00e7\u00e3o ser\u00e1 automaticamente descomprimido quando for carregado pelo ReadyAPI quando necess\u00e1rio.</p>"},{"location":"how-to/custom-request-and-route/#acessando-o-corpo-da-requisicao-em-um-manipulador-de-excecao","title":"Acessando o corpo da requisi\u00e7\u00e3o em um manipulador de exce\u00e7\u00e3o","text":"<p>Dica</p> <p>Para resolver esse mesmo problema, \u00e9 provavelmente muito mais f\u00e1cil usar o <code>body</code> em um manipulador personalizado para <code>RequestValidationError</code> (Tratando Erros).</p> <p>Mas esse exemplo ainda \u00e9 valido e mostra como interagir com os componentes internos.</p> <p>Tamb\u00e9m podemos usar essa mesma abordagem para acessar o corpo da requisi\u00e7\u00e3o em um manipulador de exce\u00e7\u00e3o.</p> <p>Tudo que precisamos fazer \u00e9 manipular a requisi\u00e7\u00e3o dentro de um bloco <code>try</code>/<code>except</code>:</p> Python 3.8+ <pre><code>from typing import Callable, List\n\nfrom readyapi import Body, HTTPException, ReadyAPI, Request, Response\nfrom readyapi.exceptions import RequestValidationError\nfrom readyapi.routing import APIRoute\n\n\nclass ValidationErrorLoggingRoute(APIRoute):\n    def get_route_handler(self) -&gt; Callable:\n        original_route_handler = super().get_route_handler()\n\n        async def custom_route_handler(request: Request) -&gt; Response:\n            try:\n                return await original_route_handler(request)\n            except RequestValidationError as exc:\n                body = await request.body()\n                detail = {\"errors\": exc.errors(), \"body\": body.decode()}\n                raise HTTPException(status_code=422, detail=detail)\n\n        return custom_route_handler\n\n\napp = ReadyAPI()\napp.router.route_class = ValidationErrorLoggingRoute\n\n\n@app.post(\"/\")\nasync def sum_numbers(numbers: List[int] = Body()):\n    return sum(numbers)\n</code></pre> <p>Se uma exce\u00e7\u00e3o ocorrer, a inst\u00e2ncia <code>Request</code> ainda estar\u00e1 em escopo, ent\u00e3o podemos ler e fazer uso do corpo da requisi\u00e7\u00e3o ao lidar com o erro:</p> Python 3.8+ <pre><code>from typing import Callable, List\n\nfrom readyapi import Body, HTTPException, ReadyAPI, Request, Response\nfrom readyapi.exceptions import RequestValidationError\nfrom readyapi.routing import APIRoute\n\n\nclass ValidationErrorLoggingRoute(APIRoute):\n    def get_route_handler(self) -&gt; Callable:\n        original_route_handler = super().get_route_handler()\n\n        async def custom_route_handler(request: Request) -&gt; Response:\n            try:\n                return await original_route_handler(request)\n            except RequestValidationError as exc:\n                body = await request.body()\n                detail = {\"errors\": exc.errors(), \"body\": body.decode()}\n                raise HTTPException(status_code=422, detail=detail)\n\n        return custom_route_handler\n\n\napp = ReadyAPI()\napp.router.route_class = ValidationErrorLoggingRoute\n\n\n@app.post(\"/\")\nasync def sum_numbers(numbers: List[int] = Body()):\n    return sum(numbers)\n</code></pre>"},{"location":"how-to/custom-request-and-route/#classe-apiroute-personalizada-em-um-router","title":"Classe <code>APIRoute</code> personalizada em um router","text":"<p>voc\u00ea tamb\u00e9m pode definir o parametro <code>route_class</code> de uma <code>APIRouter</code>;</p> Python 3.8+ <pre><code>import time\nfrom typing import Callable\n\nfrom readyapi import APIRouter, ReadyAPI, Request, Response\nfrom readyapi.routing import APIRoute\n\n\nclass TimedRoute(APIRoute):\n    def get_route_handler(self) -&gt; Callable:\n        original_route_handler = super().get_route_handler()\n\n        async def custom_route_handler(request: Request) -&gt; Response:\n            before = time.time()\n            response: Response = await original_route_handler(request)\n            duration = time.time() - before\n            response.headers[\"X-Response-Time\"] = str(duration)\n            print(f\"route duration: {duration}\")\n            print(f\"route response: {response}\")\n            print(f\"route response headers: {response.headers}\")\n            return response\n\n        return custom_route_handler\n\n\napp = ReadyAPI()\nrouter = APIRouter(route_class=TimedRoute)\n\n\n@app.get(\"/\")\nasync def not_timed():\n    return {\"message\": \"Not timed\"}\n\n\n@router.get(\"/timed\")\nasync def timed():\n    return {\"message\": \"It's the time of my life\"}\n\n\napp.include_router(router)\n</code></pre> <p>Nesse exemplo, as opera\u00e7\u00f5es de rota sob o <code>router</code> ir\u00e3o usar a classe <code>TimedRoute</code> personalizada, e ter\u00e3o um cabe\u00e7alho extra <code>X-Response-Time</code> na resposta com o tempo que levou para gerar a resposta:</p> Python 3.8+ <pre><code>import time\nfrom typing import Callable\n\nfrom readyapi import APIRouter, ReadyAPI, Request, Response\nfrom readyapi.routing import APIRoute\n\n\nclass TimedRoute(APIRoute):\n    def get_route_handler(self) -&gt; Callable:\n        original_route_handler = super().get_route_handler()\n\n        async def custom_route_handler(request: Request) -&gt; Response:\n            before = time.time()\n            response: Response = await original_route_handler(request)\n            duration = time.time() - before\n            response.headers[\"X-Response-Time\"] = str(duration)\n            print(f\"route duration: {duration}\")\n            print(f\"route response: {response}\")\n            print(f\"route response headers: {response.headers}\")\n            return response\n\n        return custom_route_handler\n\n\napp = ReadyAPI()\nrouter = APIRouter(route_class=TimedRoute)\n\n\n@app.get(\"/\")\nasync def not_timed():\n    return {\"message\": \"Not timed\"}\n\n\n@router.get(\"/timed\")\nasync def timed():\n    return {\"message\": \"It's the time of my life\"}\n\n\napp.include_router(router)\n</code></pre>"},{"location":"how-to/extending-openapi/","title":"Extendendo o OpenAPI","text":"<p>Existem alguns casos em que pode ser necess\u00e1rio modificar o esquema OpenAPI gerado.</p> <p>Nesta se\u00e7\u00e3o, voc\u00ea ver\u00e1 como fazer isso.</p>"},{"location":"how-to/extending-openapi/#o-processo-normal","title":"O processo normal","text":"<p>O processo normal (padr\u00e3o) \u00e9 o seguinte:</p> <p>Uma aplica\u00e7\u00e3o (inst\u00e2ncia) do <code>ReadyAPI</code> possui um m\u00e9todo <code>.openapi()</code> que deve retornar o esquema OpenAPI.</p> <p>Como parte da cria\u00e7\u00e3o do objeto de aplica\u00e7\u00e3o, uma opera\u00e7\u00e3o de rota para <code>/openapi.json</code> (ou para o que voc\u00ea definir como <code>openapi_url</code>) \u00e9 registrada.</p> <p>Ela apenas retorna uma resposta JSON com o resultado do m\u00e9todo <code>.openapi()</code> da aplica\u00e7\u00e3o.</p> <p>Por padr\u00e3o, o que o m\u00e9todo <code>.openapi()</code> faz \u00e9 verificar se a propriedade <code>.openapi_schema</code> tem conte\u00fado e retorn\u00e1-lo.</p> <p>Se n\u00e3o tiver, ele gera o conte\u00fado usando a fun\u00e7\u00e3o utilit\u00e1ria em <code>readyapi.openapi.utils.get_openapi</code>.</p> <p>E essa fun\u00e7\u00e3o <code>get_openapi()</code> recebe como par\u00e2metros:</p> <ul> <li><code>title</code>: O t\u00edtulo do OpenAPI, exibido na documenta\u00e7\u00e3o.</li> <li><code>version</code>: A vers\u00e3o da sua API, por exemplo, <code>2.5.0</code>.</li> <li><code>openapi_version</code>: A vers\u00e3o da especifica\u00e7\u00e3o OpenAPI utilizada. Por padr\u00e3o, a mais recente: <code>3.1.0</code>.</li> <li><code>summary</code>: Um resumo curto da API.</li> <li><code>description</code>: A descri\u00e7\u00e3o da sua API, que pode incluir markdown e ser\u00e1 exibida na documenta\u00e7\u00e3o.</li> <li><code>routes</code>: Uma lista de rotas, que s\u00e3o cada uma das opera\u00e7\u00f5es de rota registradas. Elas s\u00e3o obtidas de <code>app.routes</code>.</li> </ul> <p>Informa\u00e7\u00e3o</p> <p>O par\u00e2metro <code>summary</code> est\u00e1 dispon\u00edvel no OpenAPI 3.1.0 e superior, suportado pelo ReadyAPI 0.99.0 e superior.</p>"},{"location":"how-to/extending-openapi/#sobrescrevendo-os-padroes","title":"Sobrescrevendo os padr\u00f5es","text":"<p>Com as informa\u00e7\u00f5es acima, voc\u00ea pode usar a mesma fun\u00e7\u00e3o utilit\u00e1ria para gerar o esquema OpenAPI e sobrescrever cada parte que precisar.</p> <p>Por exemplo, vamos adicionar Extens\u00e3o OpenAPI do ReDoc para incluir um logo personalizado.</p>"},{"location":"how-to/extending-openapi/#readyapi-normal","title":"ReadyAPI Normal","text":"<p>Primeiro, escreva toda a sua aplica\u00e7\u00e3o ReadyAPI normalmente:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.utils import get_openapi\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n\n\ndef custom_openapi():\n    if app.openapi_schema:\n        return app.openapi_schema\n    openapi_schema = get_openapi(\n        title=\"Custom title\",\n        version=\"2.5.0\",\n        summary=\"This is a very custom OpenAPI schema\",\n        description=\"Here's a longer description of the custom **OpenAPI** schema\",\n        routes=app.routes,\n    )\n    openapi_schema[\"info\"][\"x-logo\"] = {\n        \"url\": \"https://readyapi.github.io/img/logo-margin/logo-teal.png\"\n    }\n    app.openapi_schema = openapi_schema\n    return app.openapi_schema\n\n\napp.openapi = custom_openapi\n</code></pre>"},{"location":"how-to/extending-openapi/#gerar-o-esquema-openapi","title":"Gerar o esquema OpenAPI","text":"<p>Em seguida, use a mesma fun\u00e7\u00e3o utilit\u00e1ria para gerar o esquema OpenAPI, dentro de uma fun\u00e7\u00e3o <code>custom_openapi()</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.utils import get_openapi\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n\n\ndef custom_openapi():\n    if app.openapi_schema:\n        return app.openapi_schema\n    openapi_schema = get_openapi(\n        title=\"Custom title\",\n        version=\"2.5.0\",\n        summary=\"This is a very custom OpenAPI schema\",\n        description=\"Here's a longer description of the custom **OpenAPI** schema\",\n        routes=app.routes,\n    )\n    openapi_schema[\"info\"][\"x-logo\"] = {\n        \"url\": \"https://readyapi.github.io/img/logo-margin/logo-teal.png\"\n    }\n    app.openapi_schema = openapi_schema\n    return app.openapi_schema\n\n\napp.openapi = custom_openapi\n</code></pre>"},{"location":"how-to/extending-openapi/#modificar-o-esquema-openapi","title":"Modificar o esquema OpenAPI","text":"<p>Agora, voc\u00ea pode adicionar a extens\u00e3o do ReDoc, incluindo um <code>x-logo</code> personalizado ao \"objeto\" <code>info</code> no esquema OpenAPI:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.utils import get_openapi\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n\n\ndef custom_openapi():\n    if app.openapi_schema:\n        return app.openapi_schema\n    openapi_schema = get_openapi(\n        title=\"Custom title\",\n        version=\"2.5.0\",\n        summary=\"This is a very custom OpenAPI schema\",\n        description=\"Here's a longer description of the custom **OpenAPI** schema\",\n        routes=app.routes,\n    )\n    openapi_schema[\"info\"][\"x-logo\"] = {\n        \"url\": \"https://readyapi.github.io/img/logo-margin/logo-teal.png\"\n    }\n    app.openapi_schema = openapi_schema\n    return app.openapi_schema\n\n\napp.openapi = custom_openapi\n</code></pre>"},{"location":"how-to/extending-openapi/#armazenar-em-cache-o-esquema-openapi","title":"Armazenar em cache o esquema OpenAPI","text":"<p>Voc\u00ea pode usar a propriedade <code>.openapi_schema</code> como um \"cache\" para armazenar o esquema gerado.</p> <p>Dessa forma, sua aplica\u00e7\u00e3o n\u00e3o precisar\u00e1 gerar o esquema toda vez que um usu\u00e1rio abrir a documenta\u00e7\u00e3o da sua API.</p> <p>Ele ser\u00e1 gerado apenas uma vez, e o mesmo esquema armazenado em cache ser\u00e1 utilizado nas pr\u00f3ximas requisi\u00e7\u00f5es.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.utils import get_openapi\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n\n\ndef custom_openapi():\n    if app.openapi_schema:\n        return app.openapi_schema\n    openapi_schema = get_openapi(\n        title=\"Custom title\",\n        version=\"2.5.0\",\n        summary=\"This is a very custom OpenAPI schema\",\n        description=\"Here's a longer description of the custom **OpenAPI** schema\",\n        routes=app.routes,\n    )\n    openapi_schema[\"info\"][\"x-logo\"] = {\n        \"url\": \"https://readyapi.github.io/img/logo-margin/logo-teal.png\"\n    }\n    app.openapi_schema = openapi_schema\n    return app.openapi_schema\n\n\napp.openapi = custom_openapi\n</code></pre>"},{"location":"how-to/extending-openapi/#sobrescrever-o-metodo","title":"Sobrescrever o m\u00e9todo","text":"<p>Agora, voc\u00ea pode substituir o m\u00e9todo <code>.openapi()</code> pela sua nova fun\u00e7\u00e3o.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.utils import get_openapi\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n\n\ndef custom_openapi():\n    if app.openapi_schema:\n        return app.openapi_schema\n    openapi_schema = get_openapi(\n        title=\"Custom title\",\n        version=\"2.5.0\",\n        summary=\"This is a very custom OpenAPI schema\",\n        description=\"Here's a longer description of the custom **OpenAPI** schema\",\n        routes=app.routes,\n    )\n    openapi_schema[\"info\"][\"x-logo\"] = {\n        \"url\": \"https://readyapi.github.io/img/logo-margin/logo-teal.png\"\n    }\n    app.openapi_schema = openapi_schema\n    return app.openapi_schema\n\n\napp.openapi = custom_openapi\n</code></pre>"},{"location":"how-to/extending-openapi/#verificar","title":"Verificar","text":"<p>Uma vez que voc\u00ea acessar http://127.0.0.1:8000/redoc, ver\u00e1 que est\u00e1 usando seu logo personalizado (neste exemplo, o logo do ReadyAPI):</p> <p></p>"},{"location":"how-to/general/","title":"Geral - Como Fazer - Receitas","text":"<p>Aqui est\u00e3o v\u00e1rios links para outros locais na documenta\u00e7\u00e3o, para perguntas gerais ou frequentes</p>"},{"location":"how-to/general/#filtro-de-dados-seguranca","title":"Filtro de dados- Seguran\u00e7a","text":"<p>Para assegurar que voc\u00ea n\u00e3o vai retornar mais dados do que deveria, leia a se\u00e7\u00e3o Tutorial - Response Model - Return Type.</p>"},{"location":"how-to/general/#tags-de-documentacao-openapi","title":"Tags de Documenta\u00e7\u00e3o - OpenAPI","text":"<p>Para adicionar tags \u00e0s suas rotas e agrup\u00e1-las na UI da documenta\u00e7\u00e3o, leia a se\u00e7\u00e3o Tutorial - Path Operation Configurations - Tags.</p>"},{"location":"how-to/general/#resumo-e-descricao-da-documentacao-openapi","title":"Resumo e Descri\u00e7\u00e3o da documenta\u00e7\u00e3o - OpenAPI","text":"<p>Para adicionar um resumo e uma descri\u00e7\u00e3o \u00e0s suas rotas e exibi-los na UI da documenta\u00e7\u00e3o, leia a se\u00e7\u00e3o Tutorial - Path Operation Configurations - Summary and Description.</p>"},{"location":"how-to/general/#documentacao-das-descricoes-de-resposta-openapi","title":"Documenta\u00e7\u00e3o das Descri\u00e7\u00f5es de Resposta - OpenAPI","text":"<p>Para definir a descri\u00e7\u00e3o de uma resposta exibida na interface da documenta\u00e7\u00e3o, leia a se\u00e7\u00e3o Tutorial - Path Operation Configurations - Response description.</p>"},{"location":"how-to/general/#documentacao-para-depreciar-uma-operacao-de-rota-openapi","title":"Documenta\u00e7\u00e3o para Depreciar uma Opera\u00e7\u00e3o de Rota - OpenAPI","text":"<p>Para depreciar uma opera\u00e7\u00e3o de rota e exibi-la na interface da documenta\u00e7\u00e3o, leia a se\u00e7\u00e3o Tutorial - Path Operation Configurations - Deprecation.</p>"},{"location":"how-to/general/#converter-qualquer-dado-para-json","title":"Converter qualquer dado para JSON","text":"<p>Para converter qualquer dado para um formato compat\u00edvel com JSON, leia a se\u00e7\u00e3o Tutorial - JSON Compatible Encoder.</p>"},{"location":"how-to/general/#openapi-metadata-docs","title":"OpenAPI Metadata - Docs","text":"<p>Para adicionar metadados ao seu esquema OpenAPI, incluindo  licensa, vers\u00e3o, contato, etc, leia a se\u00e7\u00e3o Tutorial - Metadata and Docs URLs.</p>"},{"location":"how-to/general/#openapi-com-url-customizada","title":"OpenAPI com URL customizada","text":"<p>Para customizar a URL do OpenAPI (ou remov\u00ea-la), leia a se\u00e7\u00e3o Tutorial - Metadata and Docs URLs.</p>"},{"location":"how-to/general/#urls-de-documentacao-do-openapi","title":"URLs de documenta\u00e7\u00e3o do OpenAPI","text":"<p>Para alterar as URLs usadas \u200b\u200bpara as interfaces de usu\u00e1rio da documenta\u00e7\u00e3o gerada automaticamente, leia a se\u00e7\u00e3o Tutorial - Metadata and Docs URLs.</p>"},{"location":"how-to/graphql/","title":"GraphQL","text":"<p>Como o ReadyAPI \u00e9 baseado no padr\u00e3o ASGI, \u00e9 muito f\u00e1cil integrar qualquer biblioteca GraphQL tamb\u00e9m compat\u00edvel com ASGI.</p> <p>Voc\u00ea pode combinar opera\u00e7\u00f5es de rota normais do ReadyAPI com GraphQL na mesma aplica\u00e7\u00e3o.</p> <p>Dica</p> <p>GraphQL resolve alguns casos de uso muito espec\u00edficos.</p> <p>Ele tem vantagens e desvantagens quando comparado a web APIs comuns.</p> <p>Certifique-se de avaliar se os benef\u00edcios para o seu caso de uso compensam as desvantagens. \ud83e\udd13</p>"},{"location":"how-to/graphql/#bibliotecas-graphql","title":"Bibliotecas GraphQL","text":"<p>Aqui est\u00e3o algumas das bibliotecas GraphQL que t\u00eam suporte ASGI. Voc\u00ea pode us\u00e1-las com ReadyAPI:</p> <ul> <li>Strawberry \ud83c\udf53<ul> <li>Com docs para ReadyAPI</li> </ul> </li> <li>Ariadne<ul> <li>Com docs para ReadyAPI</li> </ul> </li> <li>Tartiflette<ul> <li>Com Tartiflette ASGI para fornecer integra\u00e7\u00e3o ASGI</li> </ul> </li> <li>Graphene<ul> <li>Com starlette-graphene3</li> </ul> </li> </ul>"},{"location":"how-to/graphql/#graphql-com-strawberry","title":"GraphQL com Strawberry","text":"<p>Se voc\u00ea precisar ou quiser trabalhar com GraphQL, Strawberry \u00e9 a biblioteca recomendada pois tem o design mais pr\u00f3ximo ao design do ReadyAPI, ela \u00e9 toda baseada em type annotations.</p> <p>Dependendo do seu caso de uso, voc\u00ea pode preferir usar uma biblioteca diferente, mas se voc\u00ea me perguntasse, eu provavelmente sugeriria que voc\u00ea experimentasse o Strawberry.</p> <p>Aqui est\u00e1 uma pequena pr\u00e9via de como voc\u00ea poderia integrar Strawberry com ReadyAPI:</p> Python 3.8+ <pre><code>import strawberry\nfrom readyapi import ReadyAPI\nfrom strawberry.readyapi import GraphQLRouter\n\n\n@strawberry.type\nclass User:\n    name: str\n    age: int\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def user(self) -&gt; User:\n        return User(name=\"Patrick\", age=100)\n\n\nschema = strawberry.Schema(query=Query)\n\n\ngraphql_app = GraphQLRouter(schema)\n\napp = ReadyAPI()\napp.include_router(graphql_app, prefix=\"/graphql\")\n</code></pre> <p>Voc\u00ea pode aprender mais sobre Strawberry na documenta\u00e7\u00e3o do Strawberry.</p> <p>E tamb\u00e9m na documenta\u00e7\u00e3o sobre Strawberry com ReadyAPI.</p>"},{"location":"how-to/graphql/#antigo-graphqlapp-do-starlette","title":"Antigo <code>GraphQLApp</code> do Starlette","text":"<p>Vers\u00f5es anteriores do Starlette incluiam uma classe <code>GraphQLApp</code> para integrar com Graphene.</p> <p>Ela foi descontinuada do Starlette, mas se voc\u00ea tem c\u00f3digo que a utilizava, voc\u00ea pode facilmente migrar para starlette-graphene3, que cobre o mesmo caso de uso e tem uma interface quase id\u00eantica.</p> <p>Dica</p> <p>Se voc\u00ea precisa de GraphQL, eu ainda recomendaria que voc\u00ea desse uma olhada no Strawberry, pois ele \u00e9 baseado em type annotations em vez de classes e tipos personalizados.</p>"},{"location":"how-to/graphql/#saiba-mais","title":"Saiba Mais","text":"<p>Voc\u00ea pode aprender mais sobre GraphQL na documenta\u00e7\u00e3o oficial do GraphQL.</p> <p>Voc\u00ea tamb\u00e9m pode ler mais sobre cada uma das bibliotecas descritas acima em seus links.</p>"},{"location":"how-to/separate-openapi-schemas/","title":"Esquemas OpenAPI Separados para Entrada e Sa\u00edda ou N\u00e3o","text":"<p>Ao usar Pydantic v2, o OpenAPI gerado \u00e9 um pouco mais exato e correto do que antes. \ud83d\ude0e</p> <p>Inclusive, em alguns casos, ele ter\u00e1 at\u00e9 dois JSON Schemas no OpenAPI para o mesmo modelo Pydantic, para entrada e sa\u00edda, dependendo se eles possuem valores padr\u00e3o.</p> <p>Vamos ver como isso funciona e como alterar se for necess\u00e1rio.</p>"},{"location":"how-to/separate-openapi-schemas/#modelos-pydantic-para-entrada-e-saida","title":"Modelos Pydantic para Entrada e Sa\u00edda","text":"<p>Digamos que voc\u00ea tenha um modelo Pydantic com valores padr\u00e3o, como este:</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Optional\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Optional[str] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; List[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre>"},{"location":"how-to/separate-openapi-schemas/#modelo-para-entrada","title":"Modelo para Entrada","text":"<p>Se voc\u00ea usar esse modelo como entrada, como aqui:</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Optional\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Optional[str] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; List[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> <p>... ent\u00e3o o campo <code>description</code> n\u00e3o ser\u00e1 obrigat\u00f3rio. Porque ele tem um valor padr\u00e3o de <code>None</code>.</p>"},{"location":"how-to/separate-openapi-schemas/#modelo-de-entrada-na-documentacao","title":"Modelo de Entrada na Documenta\u00e7\u00e3o","text":"<p>Voc\u00ea pode confirmar que na documenta\u00e7\u00e3o, o campo <code>description</code> n\u00e3o tem um asterisco vermelho, n\u00e3o \u00e9 marcado como obrigat\u00f3rio:</p>"},{"location":"how-to/separate-openapi-schemas/#modelo-para-saida","title":"Modelo para Sa\u00edda","text":"<p>Mas se voc\u00ea usar o mesmo modelo como sa\u00edda, como aqui:</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Optional\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Optional[str] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; List[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> <p>... ent\u00e3o, como <code>description</code> tem um valor padr\u00e3o, se voc\u00ea n\u00e3o retornar nada para esse campo, ele ainda ter\u00e1 o valor padr\u00e3o.</p>"},{"location":"how-to/separate-openapi-schemas/#modelo-para-dados-de-resposta-de-saida","title":"Modelo para Dados de Resposta de Sa\u00edda","text":"<p>Se voc\u00ea interagir com a documenta\u00e7\u00e3o e verificar a resposta, mesmo que o c\u00f3digo n\u00e3o tenha adicionado nada em um dos campos <code>description</code>, a resposta JSON cont\u00e9m o valor padr\u00e3o (<code>null</code>):</p> <p>Isso significa que ele sempre ter\u00e1 um valor, s\u00f3 que \u00e0s vezes o valor pode ser <code>None</code> (ou <code>null</code> em termos de JSON).</p> <p>Isso quer dizer que, os clientes que usam sua API n\u00e3o precisam verificar se o valor existe ou n\u00e3o, eles podem assumir que o campo sempre estar\u00e1 l\u00e1, mas que em alguns casos ter\u00e1 o valor padr\u00e3o de <code>None</code>.</p> <p>A maneira de descrever isso no OpenAPI \u00e9 marcar esse campo como obrigat\u00f3rio, porque ele sempre estar\u00e1 l\u00e1.</p> <p>Por causa disso, o JSON Schema para um modelo pode ser diferente dependendo se ele \u00e9 usado para entrada ou sa\u00edda:</p> <ul> <li>para entrada, o <code>description</code> n\u00e3o ser\u00e1 obrigat\u00f3rio</li> <li>para sa\u00edda, ele ser\u00e1 obrigat\u00f3rio (e possivelmente <code>None</code>, ou em termos de JSON, <code>null</code>)</li> </ul>"},{"location":"how-to/separate-openapi-schemas/#modelo-para-saida-na-documentacao","title":"Modelo para Sa\u00edda na Documenta\u00e7\u00e3o","text":"<p>Voc\u00ea pode verificar o modelo de sa\u00edda na documenta\u00e7\u00e3o tamb\u00e9m, ambos <code>name</code> e <code>description</code> s\u00e3o marcados como obrigat\u00f3rios com um asterisco vermelho:</p>"},{"location":"how-to/separate-openapi-schemas/#modelo-para-entrada-e-saida-na-documentacao","title":"Modelo para Entrada e Sa\u00edda na Documenta\u00e7\u00e3o","text":"<p>E se voc\u00ea verificar todos os Schemas dispon\u00edveis (JSON Schemas) no OpenAPI, ver\u00e1 que h\u00e1 dois, um <code>Item-Input</code> e um <code>Item-Output</code>.</p> <p>Para <code>Item-Input</code>, <code>description</code> n\u00e3o \u00e9 obrigat\u00f3rio, n\u00e3o tem um asterisco vermelho.</p> <p>Mas para <code>Item-Output</code>, <code>description</code> \u00e9 obrigat\u00f3rio, tem um asterisco vermelho.</p> <p>Com esse recurso do Pydantic v2, sua documenta\u00e7\u00e3o da API fica mais precisa, e se voc\u00ea tiver clientes e SDKs gerados automaticamente, eles ser\u00e3o mais precisos tamb\u00e9m, proporcionando uma melhor experi\u00eancia para desenvolvedores e consist\u00eancia. \ud83c\udf89</p>"},{"location":"how-to/separate-openapi-schemas/#nao-separe-schemas","title":"N\u00e3o Separe Schemas","text":"<p>Agora, h\u00e1 alguns casos em que voc\u00ea pode querer ter o mesmo esquema para entrada e sa\u00edda.</p> <p>Provavelmente, o principal caso de uso para isso \u00e9 se voc\u00ea j\u00e1 tem algum c\u00f3digo de cliente/SDK gerado automaticamente e n\u00e3o quer atualizar todo o c\u00f3digo de cliente/SDK gerado ainda, voc\u00ea provavelmente vai querer fazer isso em algum momento, mas talvez n\u00e3o agora.</p> <p>Nesse caso, voc\u00ea pode desativar esse recurso no ReadyAPI, com o par\u00e2metro <code>separate_input_output_schemas=False</code>.</p> <p>Informa\u00e7\u00e3o</p> <p>O suporte para <code>separate_input_output_schemas</code> foi adicionado no ReadyAPI <code>0.102.0</code>. \ud83e\udd13</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\n\napp = ReadyAPI(separate_input_output_schemas=False)\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Optional\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Optional[str] = None\n\n\napp = ReadyAPI(separate_input_output_schemas=False)\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n\n\napp = ReadyAPI(separate_input_output_schemas=False)\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; List[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre>"},{"location":"how-to/separate-openapi-schemas/#mesmo-esquema-para-modelos-de-entrada-e-saida-na-documentacao","title":"Mesmo Esquema para Modelos de Entrada e Sa\u00edda na Documenta\u00e7\u00e3o","text":"<p>E agora haver\u00e1 um \u00fanico esquema para entrada e sa\u00edda para o modelo, apenas <code>Item</code>, e <code>description</code> n\u00e3o ser\u00e1 obrigat\u00f3rio:</p> <p>Esse \u00e9 o mesmo comportamento do Pydantic v1. \ud83e\udd13</p>"},{"location":"how-to/testing-database/","title":"Testando a Base de Dados","text":"<p>Voc\u00ea pode estudar sobre bases de dados, SQL e SQLDev na documenta\u00e7\u00e3o de SQLDev. \ud83e\udd13</p> <p>Aqui tem um mini tutorial de como usar SQLDev com ReadyAPI. \u2728</p> <p>Esse tutorial inclui uma sess\u00e3o sobre testar bases de dados SQL. \ud83d\ude0e</p>"},{"location":"learn/","title":"Aprender","text":"<p>Nesta parte da documenta\u00e7\u00e3o encontramos as se\u00e7\u00f5es introdut\u00f3rias e os tutoriais para aprendermos como usar o ReadyAPI.</p> <p>N\u00f3s poder\u00edamos considerar isto um livro, curso, a maneira oficial e recomendada de aprender o ReadyAPI. \ud83d\ude0e</p>"},{"location":"resources/","title":"Recursos","text":"<p>Material complementar, links externos, artigos e muito mais. \u2708\ufe0f</p>"},{"location":"tutorial/","title":"Tutorial - Guia de Usu\u00e1rio","text":"<p>Esse tutorial mostra como usar o ReadyAPI com a maior parte de seus recursos, passo a passo.</p> <p>Cada se\u00e7\u00e3o constr\u00f3i, gradualmente, sobre as anteriores, mas sua estrutura s\u00e3o t\u00f3picos separados, para que voc\u00ea possa ir a qualquer um espec\u00edfico e resolver suas necessidades espec\u00edficas de API.</p> <p>Ele tamb\u00e9m foi constru\u00eddo para servir como uma refer\u00eancia futura, ent\u00e3o voc\u00ea pode voltar e ver exatamente o que voc\u00ea precisa.</p>"},{"location":"tutorial/#rode-o-codigo","title":"Rode o c\u00f3digo","text":"<p>Todos os blocos de c\u00f3digo podem ser copiados e utilizados diretamente (eles s\u00e3o, na verdade, arquivos Python testados).</p> <p>Para rodar qualquer um dos exemplos, copie o codigo para um arquivo <code>main.py</code>, e inicie o <code>uvivorn</code> com:</p> <pre><code>$ &lt;font color=\"#4E9A06\"&gt;readyapi&lt;/font&gt; dev &lt;u style=\"text-decoration-style:solid\"&gt;main.py&lt;/u&gt;\n\n  &lt;span style=\"background-color:#009485\"&gt;&lt;font color=\"#D3D7CF\"&gt; ReadyAPI &lt;/font&gt;&lt;/span&gt;  Starting development server \ud83d\ude80\n\n             Searching for package file structure from directories\n             with &lt;font color=\"#3465A4\"&gt;__init__.py&lt;/font&gt; files\n             Importing from &lt;font color=\"#75507B\"&gt;/home/user/code/&lt;/font&gt;&lt;font color=\"#AD7FA8\"&gt;awesomeapp&lt;/font&gt;\n\n   &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; module &lt;/font&gt;&lt;/span&gt;  \ud83d\udc0d main.py\n\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; code &lt;/font&gt;&lt;/span&gt;  Importing the ReadyAPI app object from the module with\n             the following code:\n\n             &lt;u style=\"text-decoration-style:solid\"&gt;from &lt;/u&gt;&lt;u style=\"text-decoration-style:solid\"&gt;&lt;b&gt;main&lt;/b&gt;&lt;/u&gt;&lt;u style=\"text-decoration-style:solid\"&gt; import &lt;/u&gt;&lt;u style=\"text-decoration-style:solid\"&gt;&lt;b&gt;app&lt;/b&gt;&lt;/u&gt;\n\n      &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; app &lt;/font&gt;&lt;/span&gt;  Using import string: &lt;font color=\"#3465A4\"&gt;main:app&lt;/font&gt;\n\n   &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; server &lt;/font&gt;&lt;/span&gt;  Server started at &lt;font color=\"#729FCF\"&gt;&lt;u style=\"text-decoration-style:solid\"&gt;http://127.0.0.1:8000&lt;/u&gt;&lt;/font&gt;\n   &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; server &lt;/font&gt;&lt;/span&gt;  Documentation at &lt;font color=\"#729FCF\"&gt;&lt;u style=\"text-decoration-style:solid\"&gt;http://127.0.0.1:8000/docs&lt;/u&gt;&lt;/font&gt;\n\n      &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; tip &lt;/font&gt;&lt;/span&gt;  Running in development mode, for production use:\n             &lt;b&gt;readyapi run&lt;/b&gt;\n\n             Logs:\n\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; INFO &lt;/font&gt;&lt;/span&gt;  Will watch for changes in these directories:\n             &lt;b&gt;[&lt;/b&gt;&lt;font color=\"#4E9A06\"&gt;&amp;apos;/home/user/code/awesomeapp&amp;apos;&lt;/font&gt;&lt;b&gt;]&lt;/b&gt;\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; INFO &lt;/font&gt;&lt;/span&gt;  Uvicorn running on &lt;font color=\"#729FCF\"&gt;&lt;u style=\"text-decoration-style:solid\"&gt;http://127.0.0.1:8000&lt;/u&gt;&lt;/font&gt; &lt;b&gt;(&lt;/b&gt;Press CTRL+C\n             to quit&lt;b&gt;)&lt;/b&gt;\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; INFO &lt;/font&gt;&lt;/span&gt;  Started reloader process &lt;b&gt;[&lt;/b&gt;&lt;font color=\"#34E2E2\"&gt;&lt;b&gt;383138&lt;/b&gt;&lt;/font&gt;&lt;b&gt;]&lt;/b&gt; using WatchFiles\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; INFO &lt;/font&gt;&lt;/span&gt;  Started server process &lt;b&gt;[&lt;/b&gt;&lt;font color=\"#34E2E2\"&gt;&lt;b&gt;383153&lt;/b&gt;&lt;/font&gt;&lt;b&gt;]&lt;/b&gt;\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; INFO &lt;/font&gt;&lt;/span&gt;  Waiting for application startup.\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; INFO &lt;/font&gt;&lt;/span&gt;  Application startup complete.\n</code></pre> <p>\u00c9 ALTAMENTE recomendado que voc\u00ea escreva ou copie o c\u00f3digo, edite-o e rode-o localmente.</p> <p>Us\u00e1-lo em seu editor \u00e9 o que realmente te mostra os benef\u00edcios do ReadyAPI, ver qu\u00e3o pouco c\u00f3digo voc\u00ea tem que escrever, todas as confer\u00eancias de tipo, auto completa\u00e7\u00f5es etc.</p>"},{"location":"tutorial/#instale-o-readyapi","title":"Instale o ReadyAPI","text":"<p>O primeiro passo \u00e9 instalar o ReadyAPI.</p> <p>Para o tutorial, voc\u00ea deve querer instal\u00e1-lo com todas as depend\u00eancias e recursos opicionais.</p> <pre><code>$ pip install \"readyapi[standard]\"\n\n---&gt; 100%\n</code></pre> <p>Nota</p> <p>Quando voc\u00ea instala com pip install \"readyapi[standard]\", ele vem com algumas depend\u00eancias opcionais padr\u00e3o.</p> <p>Se voc\u00ea n\u00e3o quiser ter essas depend\u00eancias opcionais, pode instalar pip install readyapi em vez disso.</p>"},{"location":"tutorial/#guia-avancado-de-usuario","title":"Guia Avan\u00e7ado de Usu\u00e1rio","text":"<p>H\u00e1 tamb\u00e9m um Guia Avan\u00e7ado de Usu\u00e1rio que voc\u00ea pode ler ap\u00f3s esse Tutorial - Guia de Usu\u00e1rio.</p> <p>O Guia Avan\u00e7ado de Usu\u00e1rio constr\u00f3i sobre esse, usa os mesmos conceitos e te ensina alguns recursos extras.</p> <p>Mas voc\u00ea deveria ler primeiro o Tutorial - Guia de Usu\u00e1rio (que voc\u00ea est\u00e1 lendo agora).</p> <p>Ele foi projetado para que voc\u00ea possa construir uma aplica\u00e7\u00e3o completa com apenas o Tutorial - Guia de Usu\u00e1rio, e ent\u00e3o estend\u00ea-la de diferentes formas, dependendo das suas necessidades, usando algumas ideias adicionais do Guia Avan\u00e7ado de Usu\u00e1rio.</p>"},{"location":"tutorial/background-tasks/","title":"Tarefas em segundo plano","text":"<p>Voc\u00ea pode definir tarefas em segundo plano a serem executadas _ ap\u00f3s _ retornar uma resposta.</p> <p>Isso \u00e9 \u00fatil para opera\u00e7\u00f5es que precisam acontecer ap\u00f3s uma solicita\u00e7\u00e3o, mas que o cliente realmente n\u00e3o precisa esperar a opera\u00e7\u00e3o ser conclu\u00edda para receber a resposta.</p> <p>Isso inclui, por exemplo:</p> <ul> <li>Envio de notifica\u00e7\u00f5es por email ap\u00f3s a realiza\u00e7\u00e3o de uma a\u00e7\u00e3o:</li> <li>Como conectar-se a um servidor de e-mail e enviar um e-mail tende a ser \"lento\" (v\u00e1rios segundos), voc\u00ea pode retornar a resposta imediatamente e enviar a notifica\u00e7\u00e3o por e-mail em segundo plano.</li> <li>Processando dados:</li> <li>Por exemplo, digamos que voc\u00ea receba um arquivo que deve passar por um processo lento, voc\u00ea pode retornar uma resposta de \"Aceito\" (HTTP 202) e process\u00e1-lo em segundo plano.</li> </ul>"},{"location":"tutorial/background-tasks/#usando-backgroundtasks","title":"Usando <code>BackgroundTasks</code>","text":"<p>Primeiro, importe <code>BackgroundTasks</code> e defina um par\u00e2metro em sua fun\u00e7\u00e3o de opera\u00e7\u00e3o de caminho com uma declara\u00e7\u00e3o de tipo de <code>BackgroundTasks</code>:</p> Python 3.8+ <pre><code>from readyapi import BackgroundTasks, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef write_notification(email: str, message=\"\"):\n    with open(\"log.txt\", mode=\"w\") as email_file:\n        content = f\"notification for {email}: {message}\"\n        email_file.write(content)\n\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(email: str, background_tasks: BackgroundTasks):\n    background_tasks.add_task(write_notification, email, message=\"some notification\")\n    return {\"message\": \"Notification sent in the background\"}\n</code></pre> <p>O ReadyAPI criar\u00e1 o objeto do tipo <code>BackgroundTasks</code> para voc\u00ea e o passar\u00e1 como esse par\u00e2metro.</p>"},{"location":"tutorial/background-tasks/#criar-uma-funcao-de-tarefa","title":"Criar uma fun\u00e7\u00e3o de tarefa","text":"<p>Crie uma fun\u00e7\u00e3o a ser executada como tarefa em segundo plano.</p> <p>\u00c9 apenas uma fun\u00e7\u00e3o padr\u00e3o que pode receber par\u00e2metros.</p> <p>Pode ser uma fun\u00e7\u00e3o <code>async def</code> ou <code>def</code> normal, o ReadyAPI saber\u00e1 como lidar com isso corretamente.</p> <p>Nesse caso, a fun\u00e7\u00e3o de tarefa gravar\u00e1 em um arquivo (simulando o envio de um e-mail).</p> <p>E como a opera\u00e7\u00e3o de grava\u00e7\u00e3o n\u00e3o usa <code>async</code> e <code>await</code>, definimos a fun\u00e7\u00e3o com <code>def</code> normal:</p> Python 3.8+ <pre><code>from readyapi import BackgroundTasks, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef write_notification(email: str, message=\"\"):\n    with open(\"log.txt\", mode=\"w\") as email_file:\n        content = f\"notification for {email}: {message}\"\n        email_file.write(content)\n\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(email: str, background_tasks: BackgroundTasks):\n    background_tasks.add_task(write_notification, email, message=\"some notification\")\n    return {\"message\": \"Notification sent in the background\"}\n</code></pre>"},{"location":"tutorial/background-tasks/#adicionar-a-tarefa-em-segundo-plano","title":"Adicionar a tarefa em segundo plano","text":"<p>Dentro de sua fun\u00e7\u00e3o de opera\u00e7\u00e3o de caminho, passe sua fun\u00e7\u00e3o de tarefa para o objeto tarefas em segundo plano com o m\u00e9todo <code>.add_task()</code>:</p> Python 3.8+ <pre><code>from readyapi import BackgroundTasks, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef write_notification(email: str, message=\"\"):\n    with open(\"log.txt\", mode=\"w\") as email_file:\n        content = f\"notification for {email}: {message}\"\n        email_file.write(content)\n\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(email: str, background_tasks: BackgroundTasks):\n    background_tasks.add_task(write_notification, email, message=\"some notification\")\n    return {\"message\": \"Notification sent in the background\"}\n</code></pre> <p><code>.add_task()</code> recebe como argumentos:</p> <ul> <li>Uma fun\u00e7\u00e3o de tarefa a ser executada em segundo plano (<code>write_notification</code>).</li> <li>Qualquer sequ\u00eancia de argumentos que deve ser passada para a fun\u00e7\u00e3o de tarefa na ordem (<code>email</code>).</li> <li>Quaisquer argumentos nomeados que devem ser passados \u200b\u200bpara a fun\u00e7\u00e3o de tarefa (<code>mensagem = \"alguma notifica\u00e7\u00e3o\"</code>).</li> </ul>"},{"location":"tutorial/background-tasks/#injecao-de-dependencia","title":"Inje\u00e7\u00e3o de depend\u00eancia","text":"<p>Usar <code>BackgroundTasks</code> tamb\u00e9m funciona com o sistema de inje\u00e7\u00e3o de depend\u00eancia, voc\u00ea pode declarar um par\u00e2metro do tipo <code>BackgroundTasks</code> em v\u00e1rios n\u00edveis: em uma fun\u00e7\u00e3o de opera\u00e7\u00e3o de caminho, em uma depend\u00eancia (confi\u00e1vel), em uma subdepend\u00eancia, etc.</p> <p>O ReadyAPI sabe o que fazer em cada caso e como reutilizar o mesmo objeto, de forma que todas as tarefas em segundo plano sejam mescladas e executadas em segundo plano posteriormente:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom readyapi import BackgroundTasks, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef write_log(message: str):\n    with open(\"log.txt\", mode=\"a\") as log:\n        log.write(message)\n\n\ndef get_query(background_tasks: BackgroundTasks, q: Union[str, None] = None):\n    if q:\n        message = f\"found query: {q}\\n\"\n        background_tasks.add_task(write_log, message)\n    return q\n\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(\n    email: str, background_tasks: BackgroundTasks, q: str = Depends(get_query)\n):\n    message = f\"message to {email}\\n\"\n    background_tasks.add_task(write_log, message)\n    return {\"message\": \"Message sent\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import BackgroundTasks, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef write_log(message: str):\n    with open(\"log.txt\", mode=\"a\") as log:\n        log.write(message)\n\n\ndef get_query(background_tasks: BackgroundTasks, q: str | None = None):\n    if q:\n        message = f\"found query: {q}\\n\"\n        background_tasks.add_task(write_log, message)\n    return q\n\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(\n    email: str, background_tasks: BackgroundTasks, q: Annotated[str, Depends(get_query)]\n):\n    message = f\"message to {email}\\n\"\n    background_tasks.add_task(write_log, message)\n    return {\"message\": \"Message sent\"}\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import BackgroundTasks, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef write_log(message: str):\n    with open(\"log.txt\", mode=\"a\") as log:\n        log.write(message)\n\n\ndef get_query(background_tasks: BackgroundTasks, q: Union[str, None] = None):\n    if q:\n        message = f\"found query: {q}\\n\"\n        background_tasks.add_task(write_log, message)\n    return q\n\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(\n    email: str, background_tasks: BackgroundTasks, q: Annotated[str, Depends(get_query)]\n):\n    message = f\"message to {email}\\n\"\n    background_tasks.add_task(write_log, message)\n    return {\"message\": \"Message sent\"}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import BackgroundTasks, Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\ndef write_log(message: str):\n    with open(\"log.txt\", mode=\"a\") as log:\n        log.write(message)\n\n\ndef get_query(background_tasks: BackgroundTasks, q: Union[str, None] = None):\n    if q:\n        message = f\"found query: {q}\\n\"\n        background_tasks.add_task(write_log, message)\n    return q\n\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(\n    email: str, background_tasks: BackgroundTasks, q: Annotated[str, Depends(get_query)]\n):\n    message = f\"message to {email}\\n\"\n    background_tasks.add_task(write_log, message)\n    return {\"message\": \"Message sent\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import BackgroundTasks, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef write_log(message: str):\n    with open(\"log.txt\", mode=\"a\") as log:\n        log.write(message)\n\n\ndef get_query(background_tasks: BackgroundTasks, q: str | None = None):\n    if q:\n        message = f\"found query: {q}\\n\"\n        background_tasks.add_task(write_log, message)\n    return q\n\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(\n    email: str, background_tasks: BackgroundTasks, q: str = Depends(get_query)\n):\n    message = f\"message to {email}\\n\"\n    background_tasks.add_task(write_log, message)\n    return {\"message\": \"Message sent\"}\n</code></pre> <p>Neste exemplo, as mensagens ser\u00e3o gravadas no arquivo <code>log.txt</code> ap\u00f3s o envio da resposta.</p> <p>Se houver uma consulta na solicita\u00e7\u00e3o, ela ser\u00e1 gravada no log em uma tarefa em segundo plano.</p> <p>E ent\u00e3o outra tarefa em segundo plano gerada na fun\u00e7\u00e3o de opera\u00e7\u00e3o de caminho escrever\u00e1 uma mensagem usando o par\u00e2metro de caminho <code>email</code>.</p>"},{"location":"tutorial/background-tasks/#detalhes-tecnicos","title":"Detalhes t\u00e9cnicos","text":"<p>A classe <code>BackgroundTasks</code> vem diretamente de <code>starlette.background</code>.</p> <p>Ela \u00e9 importada/inclu\u00edda diretamente no ReadyAPI para que voc\u00ea possa import\u00e1-la do <code>readyapi</code> e evitar a importa\u00e7\u00e3o acidental da alternativa <code>BackgroundTask</code> (sem o <code>s</code> no final) de <code>starlette.background</code>.</p> <p>Usando apenas <code>BackgroundTasks</code> (e n\u00e3o <code>BackgroundTask</code>), \u00e9 ent\u00e3o poss\u00edvel us\u00e1-la como um par\u00e2metro de fun\u00e7\u00e3o de opera\u00e7\u00e3o de caminho e deixar o ReadyAPI cuidar do resto para voc\u00ea, assim como ao usar o objeto <code>Request</code> diretamente.</p> <p>Ainda \u00e9 poss\u00edvel usar <code>BackgroundTask</code> sozinho no ReadyAPI, mas voc\u00ea deve criar o objeto em seu c\u00f3digo e retornar uma Starlette <code>Response</code> incluindo-o.</p> <p>Voc\u00ea pode ver mais detalhes na  documenta\u00e7\u00e3o oficiais da Starlette para tarefas em segundo plano .</p>"},{"location":"tutorial/background-tasks/#ressalva","title":"Ressalva","text":"<p>Se voc\u00ea precisa realizar c\u00e1lculos pesados \u200b\u200bem segundo plano e n\u00e3o necessariamente precisa que seja executado pelo mesmo processo (por exemplo, voc\u00ea n\u00e3o precisa compartilhar mem\u00f3ria, vari\u00e1veis, etc), voc\u00ea pode se beneficiar do uso de outras ferramentas maiores, como  Celery .</p> <p>Eles tendem a exigir configura\u00e7\u00f5es mais complexas, um gerenciador de fila de mensagens/tarefas, como RabbitMQ ou Redis, mas permitem que voc\u00ea execute tarefas em segundo plano em v\u00e1rios processos e, especialmente, em v\u00e1rios servidores.</p> <p>Mas se voc\u00ea precisa acessar vari\u00e1veis \u200b\u200be objetos do mesmo aplicativo ReadyAPI, ou precisa realizar pequenas tarefas em segundo plano (como enviar uma notifica\u00e7\u00e3o por e-mail), voc\u00ea pode simplesmente usar <code>BackgroundTasks</code>.</p>"},{"location":"tutorial/background-tasks/#recapitulando","title":"Recapitulando","text":"<p>Importe e use <code>BackgroundTasks</code> com par\u00e2metros em fun\u00e7\u00f5es de opera\u00e7\u00e3o de caminho e depend\u00eancias para adicionar tarefas em segundo plano.</p>"},{"location":"tutorial/bigger-applications/","title":"Aplica\u00e7\u00f5es Maiores - M\u00faltiplos Arquivos","text":"<p>Se voc\u00ea est\u00e1 construindo uma aplica\u00e7\u00e3o ou uma API web, \u00e9 raro que voc\u00ea possa colocar tudo em um \u00fanico arquivo.</p> <p>ReadyAPI oferece uma ferramenta conveniente para estruturar sua aplica\u00e7\u00e3o, mantendo toda a flexibilidade.</p> <p>Informa\u00e7\u00e3o</p> <p>Se voc\u00ea vem do Flask, isso seria o equivalente aos Blueprints do Flask.</p>"},{"location":"tutorial/bigger-applications/#um-exemplo-de-estrutura-de-arquivos","title":"Um exemplo de estrutura de arquivos","text":"<p>Digamos que voc\u00ea tenha uma estrutura de arquivos como esta:</p> <pre><code>.\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dependencies.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 routers\n\u2502\u00a0\u00a0 \u2502   \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2502   \u251c\u2500\u2500 items.py\n\u2502\u00a0\u00a0 \u2502   \u2514\u2500\u2500 users.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 internal\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 admin.py\n</code></pre> <p>Dica</p> <p>Existem v\u00e1rios arquivos <code>__init__.py</code> presentes em cada diret\u00f3rio ou subdiret\u00f3rio.</p> <p>Isso permite a importa\u00e7\u00e3o de c\u00f3digo de um arquivo para outro.</p> <p>Por exemplo, no arquivo <code>app/main.py</code>, voc\u00ea poderia ter uma linha como:</p> <pre><code>from app.routers import items\n</code></pre> <ul> <li>O diret\u00f3rio <code>app</code> cont\u00e9m todo o c\u00f3digo da aplica\u00e7\u00e3o. Ele possui um arquivo <code>app/__init__.py</code> vazio, o que o torna um \"pacote Python\" (uma cole\u00e7\u00e3o de \"m\u00f3dulos Python\"): <code>app</code>.</li> <li>Dentro dele, o arquivo <code>app/main.py</code> est\u00e1 localizado em um pacote Python (diret\u00f3rio com  <code>__init__.py</code>). Portanto, ele \u00e9 um \"m\u00f3dulo\" desse pacote: <code>app.main</code>.</li> <li>Existem tamb\u00e9m um arquivo <code>app/dependencies.py</code>, assim como o <code>app/main.py</code>, ele \u00e9 um \"m\u00f3dulo\": <code>app.dependencies</code>.</li> <li>H\u00e1 um subdiret\u00f3rio <code>app/routers/</code> com outro arquivo <code>__init__.py</code>, ent\u00e3o ele \u00e9 um \"subpacote Python\": <code>app.routers</code>.</li> <li>O arquivo <code>app/routers/items.py</code> est\u00e1 dentro de um pacote, <code>app/routers/</code>, portanto, \u00e9 um \"subm\u00f3dulo\": <code>app.routers.items</code>.</li> <li>O mesmo com <code>app/routers/users.py</code>,  ele \u00e9 outro subm\u00f3dulo: <code>app.routers.users</code>.</li> <li>H\u00e1 tamb\u00e9m um subdiret\u00f3rio <code>app/internal/</code> com outro arquivo <code>__init__.py</code>, ent\u00e3o ele \u00e9 outro \"subpacote Python\":<code>app.internal</code>.</li> <li>E o arquivo <code>app/internal/admin.py</code> \u00e9 outro subm\u00f3dulo: <code>app.internal.admin</code>.</li> </ul> <p></p> <p>A mesma estrutura de arquivos com coment\u00e1rios:</p> <pre><code>.\n\u251c\u2500\u2500 app                  # \"app\" \u00e9 um pacote Python\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py      # este arquivo torna \"app\" um \"pacote Python\"\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.py          # \"main\" m\u00f3dulo, e.g. import app.main\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dependencies.py  # \"dependencies\" m\u00f3dulo, e.g. import app.dependencies\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 routers          # \"routers\" \u00e9 um  \"subpacote Python\"\n\u2502\u00a0\u00a0 \u2502   \u251c\u2500\u2500 __init__.py  # torna \"routers\" um \"subpacote Python\"\n\u2502\u00a0\u00a0 \u2502   \u251c\u2500\u2500 items.py     # \"items\" subm\u00f3dulo, e.g. import app.routers.items\n\u2502\u00a0\u00a0 \u2502   \u2514\u2500\u2500 users.py     # \"users\" subm\u00f3dulo, e.g. import app.routers.users\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 internal         # \"internal\" \u00e9 um  \"subpacote Python\"\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 __init__.py  # torna \"internal\" um  \"subpacote Python\"\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 admin.py     # \"admin\" subm\u00f3dulo, e.g. import app.internal.admin\n</code></pre>"},{"location":"tutorial/bigger-applications/#apirouter","title":"<code>APIRouter</code>","text":"<p>Vamos supor que o arquivo dedicado a lidar apenas com usu\u00e1rios seja o subm\u00f3dulo em <code>/app/routers/users.py</code>.</p> <p>Voc\u00ea quer manter as opera\u00e7\u00f5es de rota relacionadas aos seus usu\u00e1rios separadas do restante do c\u00f3digo, para mant\u00ea-lo organizado.</p> <p>Mas ele ainda faz parte da mesma aplica\u00e7\u00e3o/web API ReadyAPI (faz parte do mesmo \"pacote Python\").</p> <p>Voc\u00ea pode criar as opera\u00e7\u00f5es de rotas para esse m\u00f3dulo usando o <code>APIRouter</code>.</p>"},{"location":"tutorial/bigger-applications/#importar-apirouter","title":"Importar <code>APIRouter</code>","text":"<p>voc\u00ea o importa e cria uma \"inst\u00e2ncia\" da mesma maneira que faria com a classe <code>ReadyAPI</code>:</p> app/routers/users.py<pre><code>from readyapi import APIRouter\n\nrouter = APIRouter()\n\n\n@router.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n\n\n@router.get(\"/users/me\", tags=[\"users\"])\nasync def read_user_me():\n    return {\"username\": \"fakecurrentuser\"}\n\n\n@router.get(\"/users/{username}\", tags=[\"users\"])\nasync def read_user(username: str):\n    return {\"username\": username}\n</code></pre>"},{"location":"tutorial/bigger-applications/#operacoes-de-rota-com-apirouter","title":"Opera\u00e7\u00f5es de Rota com <code>APIRouter</code>","text":"<p>E ent\u00e3o voc\u00ea o utiliza para declarar suas opera\u00e7\u00f5es de rota.</p> <p>Utilize-o da mesma maneira que utilizaria a classe  <code>ReadyAPI</code>:</p> app/routers/users.py<pre><code>from readyapi import APIRouter\n\nrouter = APIRouter()\n\n\n@router.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n\n\n@router.get(\"/users/me\", tags=[\"users\"])\nasync def read_user_me():\n    return {\"username\": \"fakecurrentuser\"}\n\n\n@router.get(\"/users/{username}\", tags=[\"users\"])\nasync def read_user(username: str):\n    return {\"username\": username}\n</code></pre> <p>Voc\u00ea pode pensar em <code>APIRouter</code> como uma classe \"mini <code>ReadyAPI</code>\".</p> <p>Todas as mesmas op\u00e7\u00f5es s\u00e3o suportadas.</p> <p>Todos os mesmos <code>parameters</code>, <code>responses</code>, <code>dependencies</code>, <code>tags</code>, etc.</p> <p>Dica</p> <p>Neste exemplo, a vari\u00e1vel \u00e9 chamada de <code>router</code>, mas voc\u00ea pode nome\u00e1-la como quiser.</p> <p>Vamos incluir este <code>APIRouter</code> na aplica\u00e7\u00e3o principal <code>ReadyAPI</code>, mas primeiro, vamos verificar as depend\u00eancias e outro <code>APIRouter</code>.</p>"},{"location":"tutorial/bigger-applications/#dependencias","title":"Depend\u00eancias","text":"<p>Vemos que precisaremos de algumas depend\u00eancias usadas em v\u00e1rios lugares da aplica\u00e7\u00e3o.</p> <p>Ent\u00e3o, as colocamos em seu pr\u00f3prio m\u00f3dulo de <code>dependencies</code> (<code>app/dependencies.py</code>).</p> <p>Agora usaremos uma depend\u00eancia simples para ler um cabe\u00e7alho <code>X-Token</code> personalizado:</p> Python 3.9+Python 3.8+Python 3.8+ non-Annotated app/dependencies.py<pre><code>from typing import Annotated\n\nfrom readyapi import Header, HTTPException\n\n\nasync def get_token_header(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def get_query_token(token: str):\n    if token != \"jessica\":\n        raise HTTPException(status_code=400, detail=\"No Jessica token provided\")\n</code></pre> app/dependencies.py<pre><code>from readyapi import Header, HTTPException\nfrom typing_extensions import Annotated\n\n\nasync def get_token_header(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def get_query_token(token: str):\n    if token != \"jessica\":\n        raise HTTPException(status_code=400, detail=\"No Jessica token provided\")\n</code></pre> <p>Dica</p> <p>Prefira usar a vers\u00e3o <code>Annotated</code> se poss\u00edvel.</p> app/dependencies.py<pre><code>from readyapi import Header, HTTPException\n\n\nasync def get_token_header(x_token: str = Header()):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def get_query_token(token: str):\n    if token != \"jessica\":\n        raise HTTPException(status_code=400, detail=\"No Jessica token provided\")\n</code></pre> <p>Dica</p> <p>Estamos usando um cabe\u00e7alho inventado para simplificar este exemplo.</p> <p>Mas em casos reais, voc\u00ea obter\u00e1 melhores resultados usando os Utilit\u00e1rios de Seguran\u00e7a integrados.</p>"},{"location":"tutorial/bigger-applications/#outro-modulo-com-apirouter","title":"Outro m\u00f3dulo com <code>APIRouter</code>","text":"<p>Digamos que voc\u00ea tamb\u00e9m tenha os endpoints dedicados a manipular \"itens\" do seu aplicativo no m\u00f3dulo em <code>app/routers/items.py</code>.</p> <p>Voc\u00ea tem opera\u00e7\u00f5es de rota para:</p> <ul> <li><code>/items/</code></li> <li><code>/items/{item_id}</code></li> </ul> <p>\u00c9 tudo a mesma estrutura de <code>app/routers/users.py</code>.</p> <p>Mas queremos ser mais inteligentes e simplificar um pouco o c\u00f3digo.</p> <p>Sabemos que todas as opera\u00e7\u00f5es de rota neste m\u00f3dulo t\u00eam o mesmo:</p> <ul> <li>Path <code>prefix</code>: <code>/items</code>.</li> <li><code>tags</code>: (apenas uma tag: <code>items</code>).</li> <li>Extra <code>responses</code>.</li> <li><code>depend\u00eancias</code>: todas elas precisam da depend\u00eancia <code>X-Token</code> que criamos.</li> </ul> <p>Ent\u00e3o, em vez de adicionar tudo isso a cada opera\u00e7\u00e3o de rota, podemos adicion\u00e1-lo ao <code>APIRouter</code>.</p> app/routers/items.py<pre><code>from readyapi import APIRouter, Depends, HTTPException\n\nfrom ..dependencies import get_token_header\n\nrouter = APIRouter(\n    prefix=\"/items\",\n    tags=[\"items\"],\n    dependencies=[Depends(get_token_header)],\n    responses={404: {\"description\": \"Not found\"}},\n)\n\n\nfake_items_db = {\"plumbus\": {\"name\": \"Plumbus\"}, \"gun\": {\"name\": \"Portal Gun\"}}\n\n\n@router.get(\"/\")\nasync def read_items():\n    return fake_items_db\n\n\n@router.get(\"/{item_id}\")\nasync def read_item(item_id: str):\n    if item_id not in fake_items_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"name\": fake_items_db[item_id][\"name\"], \"item_id\": item_id}\n\n\n@router.put(\n    \"/{item_id}\",\n    tags=[\"custom\"],\n    responses={403: {\"description\": \"Operation forbidden\"}},\n)\nasync def update_item(item_id: str):\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=403, detail=\"You can only update the item: plumbus\"\n        )\n    return {\"item_id\": item_id, \"name\": \"The great Plumbus\"}\n</code></pre> <p>Como o caminho de cada opera\u00e7\u00e3o de rota deve come\u00e7ar com <code>/</code>, como em:</p> <pre><code>@router.get(\"/{item_id}\")\nasync def read_item(item_id: str):\n    ...\n</code></pre> <p>...o prefixo n\u00e3o deve incluir um <code>/</code> final.</p> <p>Ent\u00e3o, o prefixo neste caso \u00e9 <code>/items</code>.</p> <p>Tamb\u00e9m podemos adicionar uma lista de <code>tags</code> e <code>responses</code> extras que ser\u00e3o aplicadas a todas as opera\u00e7\u00f5es de rota inclu\u00eddas neste roteador.</p> <p>E podemos adicionar uma lista de <code>dependencies</code> que ser\u00e3o adicionadas a todas as opera\u00e7\u00f5es de rota no roteador e ser\u00e3o executadas/resolvidas para cada solicita\u00e7\u00e3o feita a elas.</p> <p>Dica</p> <p>Observe que, assim como depend\u00eancias em decoradores de opera\u00e7\u00e3o de rota, nenhum valor ser\u00e1 passado para sua fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota.</p> <p>O resultado final \u00e9 que os caminhos dos itens agora s\u00e3o:</p> <ul> <li><code>/items/</code></li> <li><code>/items/{item_id}</code></li> </ul> <p>...como pretend\u00edamos.</p> <ul> <li>Elas ser\u00e3o marcadas com uma lista de tags que cont\u00eam uma \u00fanica string <code>\"items\"</code>.<ul> <li>Essas \"tags\" s\u00e3o especialmente \u00fateis para os sistemas de documenta\u00e7\u00e3o interativa autom\u00e1tica (usando OpenAPI).</li> </ul> </li> <li>Todas elas incluir\u00e3o as <code>responses</code> predefinidas.</li> <li>Todas essas opera\u00e7\u00f5es de rota ter\u00e3o a lista de <code>dependencies</code> avaliada/executada antes delas.<ul> <li>Se voc\u00ea tamb\u00e9m declarar depend\u00eancias em uma opera\u00e7\u00e3o de rota espec\u00edfica, elas tamb\u00e9m ser\u00e3o executadas.</li> <li>As depend\u00eancias do roteador s\u00e3o executadas primeiro, depois as <code>dependencies</code> no decorador e, em seguida, as depend\u00eancias de par\u00e2metros normais.</li> <li>Voc\u00ea tamb\u00e9m pode adicionar depend\u00eancias de <code>Seguran\u00e7a</code> com <code>scopes</code>.</li> </ul> </li> </ul> <p>Dica</p> <p>Ter <code>depend\u00eancias</code> no <code>APIRouter</code> pode ser usado, por exemplo, para exigir autentica\u00e7\u00e3o para um grupo inteiro de opera\u00e7\u00f5es de rota. Mesmo que as depend\u00eancias n\u00e3o sejam adicionadas individualmente a cada uma delas.</p> <p>Check</p> <p>Os par\u00e2metros <code>prefix</code>, <code>tags</code>, <code>responses</code> e <code>dependencies</code> s\u00e3o (como em muitos outros casos) apenas um recurso do ReadyAPI para ajudar a evitar duplica\u00e7\u00e3o de c\u00f3digo.</p>"},{"location":"tutorial/bigger-applications/#importar-as-dependencias","title":"Importar as depend\u00eancias","text":"<p>Este c\u00f3digo reside no m\u00f3dulo <code>app.routers.items</code>, o arquivo <code>app/routers/items.py</code>.</p> <p>E precisamos obter a fun\u00e7\u00e3o de depend\u00eancia do m\u00f3dulo <code>app.dependencies</code>, o arquivo <code>app/dependencies.py</code>.</p> <p>Ent\u00e3o usamos uma importa\u00e7\u00e3o relativa com <code>..</code> para as depend\u00eancias:</p> app/routers/items.py<pre><code>from readyapi import APIRouter, Depends, HTTPException\n\nfrom ..dependencies import get_token_header\n\nrouter = APIRouter(\n    prefix=\"/items\",\n    tags=[\"items\"],\n    dependencies=[Depends(get_token_header)],\n    responses={404: {\"description\": \"Not found\"}},\n)\n\n\nfake_items_db = {\"plumbus\": {\"name\": \"Plumbus\"}, \"gun\": {\"name\": \"Portal Gun\"}}\n\n\n@router.get(\"/\")\nasync def read_items():\n    return fake_items_db\n\n\n@router.get(\"/{item_id}\")\nasync def read_item(item_id: str):\n    if item_id not in fake_items_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"name\": fake_items_db[item_id][\"name\"], \"item_id\": item_id}\n\n\n@router.put(\n    \"/{item_id}\",\n    tags=[\"custom\"],\n    responses={403: {\"description\": \"Operation forbidden\"}},\n)\nasync def update_item(item_id: str):\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=403, detail=\"You can only update the item: plumbus\"\n        )\n    return {\"item_id\": item_id, \"name\": \"The great Plumbus\"}\n</code></pre>"},{"location":"tutorial/bigger-applications/#como-funcionam-as-importacoes-relativas","title":"Como funcionam as importa\u00e7\u00f5es relativas","text":"<p>Dica</p> <p>Se voc\u00ea sabe perfeitamente como funcionam as importa\u00e7\u00f5es, continue para a pr\u00f3xima se\u00e7\u00e3o abaixo.</p> <p>Um \u00fanico ponto <code>.</code>, como em:</p> <pre><code>from .dependencies import get_token_header\n</code></pre> <p>significaria:</p> <ul> <li>Come\u00e7ando no mesmo pacote em que este m\u00f3dulo (o arquivo <code>app/routers/items.py</code>) vive (o diret\u00f3rio <code>app/routers/</code>)...</li> <li>encontre o m\u00f3dulo <code>dependencies</code> (um arquivo imagin\u00e1rio em <code>app/routers/dependencies.py</code>)...</li> <li>e dele, importe a fun\u00e7\u00e3o <code>get_token_header</code>.</li> </ul> <p>Mas esse arquivo n\u00e3o existe, nossas depend\u00eancias est\u00e3o em um arquivo em <code>app/dependencies.py</code>.</p> <p>Lembre-se de como nossa estrutura app/file se parece:</p> <p></p> <p>Os dois pontos <code>..</code>, como em:</p> <pre><code>from ..dependencies import get_token_header\n</code></pre> <p>significa:</p> <ul> <li>Come\u00e7ando no mesmo pacote em que este m\u00f3dulo (o arquivo <code>app/routers/items.py</code>) reside (o diret\u00f3rio <code>app/routers/</code>)...</li> <li>v\u00e1 para o pacote pai (o diret\u00f3rio <code>app/</code>)...</li> <li>e l\u00e1, encontre o m\u00f3dulo <code>dependencies</code> (o arquivo em <code>app/dependencies.py</code>)...</li> <li>e dele, importe a fun\u00e7\u00e3o <code>get_token_header</code>.</li> </ul> <p>Isso funciona corretamente! \ud83c\udf89</p> <p>Da mesma forma, se tiv\u00e9ssemos usado tr\u00eas pontos <code>...</code>, como em:</p> <pre><code>from ...dependencies import get_token_header\n</code></pre> <p>isso significaria:</p> <ul> <li>Come\u00e7ando no mesmo pacote em que este m\u00f3dulo (o arquivo <code>app/routers/items.py</code>) vive (o diret\u00f3rio <code>app/routers/</code>)...</li> <li>v\u00e1 para o pacote pai (o diret\u00f3rio <code>app/</code>)...</li> <li>ent\u00e3o v\u00e1 para o pai daquele pacote (n\u00e3o h\u00e1 pacote pai, <code>app</code> \u00e9 o n\u00edvel superior \ud83d\ude31)...</li> <li>e l\u00e1, encontre o m\u00f3dulo <code>dependencies</code> (o arquivo em <code>app/dependencies.py</code>)...</li> <li>e dele, importe a fun\u00e7\u00e3o <code>get_token_header</code>.</li> </ul> <p>Isso se referiria a algum pacote acima de <code>app/</code>, com seu pr\u00f3prio arquivo <code>__init__.py</code>, etc. Mas n\u00e3o temos isso. Ent\u00e3o, isso geraria um erro em nosso exemplo. \ud83d\udea8</p> <p>Mas agora voc\u00ea sabe como funciona, ent\u00e3o voc\u00ea pode usar importa\u00e7\u00f5es relativas em seus pr\u00f3prios aplicativos, n\u00e3o importa o qu\u00e3o complexos eles sejam. \ud83e\udd13</p>"},{"location":"tutorial/bigger-applications/#adicione-algumas-tags-respostas-e-dependencias-personalizadas","title":"Adicione algumas <code>tags</code>, <code>respostas</code> e <code>depend\u00eancias</code> personalizadas","text":"<p>N\u00e3o estamos adicionando o prefixo <code>/items</code> nem <code>tags=[\"items\"]</code> a cada opera\u00e7\u00e3o de rota porque os adicionamos ao <code>APIRouter</code>.</p> <p>Mas ainda podemos adicionar mais <code>tags</code> que ser\u00e3o aplicadas a uma opera\u00e7\u00e3o de rota espec\u00edfica, e tamb\u00e9m algumas <code>respostas</code> extras espec\u00edficas para essa opera\u00e7\u00e3o de rota:</p> app/routers/items.py<pre><code>from readyapi import APIRouter, Depends, HTTPException\n\nfrom ..dependencies import get_token_header\n\nrouter = APIRouter(\n    prefix=\"/items\",\n    tags=[\"items\"],\n    dependencies=[Depends(get_token_header)],\n    responses={404: {\"description\": \"Not found\"}},\n)\n\n\nfake_items_db = {\"plumbus\": {\"name\": \"Plumbus\"}, \"gun\": {\"name\": \"Portal Gun\"}}\n\n\n@router.get(\"/\")\nasync def read_items():\n    return fake_items_db\n\n\n@router.get(\"/{item_id}\")\nasync def read_item(item_id: str):\n    if item_id not in fake_items_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"name\": fake_items_db[item_id][\"name\"], \"item_id\": item_id}\n\n\n@router.put(\n    \"/{item_id}\",\n    tags=[\"custom\"],\n    responses={403: {\"description\": \"Operation forbidden\"}},\n)\nasync def update_item(item_id: str):\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=403, detail=\"You can only update the item: plumbus\"\n        )\n    return {\"item_id\": item_id, \"name\": \"The great Plumbus\"}\n</code></pre> <p>Dica</p> <p>Esta \u00faltima opera\u00e7\u00e3o de caminho ter\u00e1 a combina\u00e7\u00e3o de tags: <code>[\"items\", \"custom\"]</code>.</p> <p>E tamb\u00e9m ter\u00e1 ambas as respostas na documenta\u00e7\u00e3o, uma para <code>404</code> e uma para <code>403</code>.</p>"},{"location":"tutorial/bigger-applications/#o-principal-readyapi","title":"O principal <code>ReadyAPI</code>","text":"<p>Agora, vamos ver o m\u00f3dulo em <code>app/main.py</code>.</p> <p>Aqui \u00e9 onde voc\u00ea importa e usa a classe <code>ReadyAPI</code>.</p> <p>Este ser\u00e1 o arquivo principal em seu aplicativo que une tudo.</p> <p>E como a maior parte de sua l\u00f3gica agora viver\u00e1 em seu pr\u00f3prio m\u00f3dulo espec\u00edfico, o arquivo principal ser\u00e1 bem simples.</p>"},{"location":"tutorial/bigger-applications/#importar-readyapi","title":"Importar <code>ReadyAPI</code>","text":"<p>Voc\u00ea importa e cria uma classe <code>ReadyAPI</code> normalmente.</p> <p>E podemos at\u00e9 declarar depend\u00eancias globais que ser\u00e3o combinadas com as depend\u00eancias para cada <code>APIRouter</code>:</p> app/main.py<pre><code>from readyapi import Depends, ReadyAPI\n\nfrom .dependencies import get_query_token, get_token_header\nfrom .internal import admin\nfrom .routers import items, users\n\napp = ReadyAPI(dependencies=[Depends(get_query_token)])\n\n\napp.include_router(users.router)\napp.include_router(items.router)\napp.include_router(\n    admin.router,\n    prefix=\"/admin\",\n    tags=[\"admin\"],\n    dependencies=[Depends(get_token_header)],\n    responses={418: {\"description\": \"I'm a teapot\"}},\n)\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello Bigger Applications!\"}\n</code></pre>"},{"location":"tutorial/bigger-applications/#importe-o-apirouter","title":"Importe o <code>APIRouter</code>","text":"<p>Agora importamos os outros subm\u00f3dulos que possuem <code>APIRouter</code>s:</p> app/main.py<pre><code>from readyapi import Depends, ReadyAPI\n\nfrom .dependencies import get_query_token, get_token_header\nfrom .internal import admin\nfrom .routers import items, users\n\napp = ReadyAPI(dependencies=[Depends(get_query_token)])\n\n\napp.include_router(users.router)\napp.include_router(items.router)\napp.include_router(\n    admin.router,\n    prefix=\"/admin\",\n    tags=[\"admin\"],\n    dependencies=[Depends(get_token_header)],\n    responses={418: {\"description\": \"I'm a teapot\"}},\n)\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello Bigger Applications!\"}\n</code></pre> <p>Como os arquivos <code>app/routers/users.py</code> e <code>app/routers/items.py</code> s\u00e3o subm\u00f3dulos que fazem parte do mesmo pacote Python <code>app</code>, podemos usar um \u00fanico ponto <code>.</code> para import\u00e1-los usando \"importa\u00e7\u00f5es relativas\".</p>"},{"location":"tutorial/bigger-applications/#como-funciona-a-importacao","title":"Como funciona a importa\u00e7\u00e3o","text":"<p>A se\u00e7\u00e3o:</p> <pre><code>from .routers import items, users\n</code></pre> <p>significa:</p> <ul> <li>Come\u00e7ando no mesmo pacote em que este m\u00f3dulo (o arquivo <code>app/main.py</code>) reside (o diret\u00f3rio <code>app/</code>)...</li> <li>procure o subpacote <code>routers</code> (o diret\u00f3rio em <code>app/routers/</code>)...</li> <li>e dele, importe o subm\u00f3dulo <code>items</code> (o arquivo em <code>app/routers/items.py</code>) e <code>users</code> (o arquivo em <code>app/routers/users.py</code>)...</li> </ul> <p>O m\u00f3dulo <code>items</code> ter\u00e1 uma vari\u00e1vel <code>router</code> (<code>items.router</code>). Esta \u00e9 a mesma que criamos no arquivo <code>app/routers/items.py</code>, \u00e9 um objeto <code>APIRouter</code>.</p> <p>E ent\u00e3o fazemos o mesmo para o m\u00f3dulo <code>users</code>.</p> <p>Tamb\u00e9m poder\u00edamos import\u00e1-los como:</p> <pre><code>from app.routers import items, users\n</code></pre> <p>Informa\u00e7\u00e3o</p> <p>A primeira vers\u00e3o \u00e9 uma \"importa\u00e7\u00e3o relativa\":</p> <pre><code>from .routers import items, users\n</code></pre> <p>A segunda vers\u00e3o \u00e9 uma \"importa\u00e7\u00e3o absoluta\":</p> <pre><code>from app.routers import items, users\n</code></pre> <p>Para saber mais sobre pacotes e m\u00f3dulos Python, leia a documenta\u00e7\u00e3o oficial do Python sobre m\u00f3dulos.</p>"},{"location":"tutorial/bigger-applications/#evite-colisoes-de-nomes","title":"Evite colis\u00f5es de nomes","text":"<p>Estamos importando o subm\u00f3dulo <code>items</code> diretamente, em vez de importar apenas sua vari\u00e1vel <code>router</code>.</p> <p>Isso ocorre porque tamb\u00e9m temos outra vari\u00e1vel chamada <code>router</code> no subm\u00f3dulo <code>users</code>.</p> <p>Se tiv\u00e9ssemos importado um ap\u00f3s o outro, como:</p> <pre><code>from .routers.items import router\nfrom .routers.users import router\n</code></pre> <p>o <code>router</code> de <code>users</code> sobrescreveria o de <code>items</code> e n\u00e3o poder\u00edamos us\u00e1-los ao mesmo tempo.</p> <p>Ent\u00e3o, para poder usar ambos no mesmo arquivo, importamos os subm\u00f3dulos diretamente:</p> app/main.py<pre><code>from readyapi import Depends, ReadyAPI\n\nfrom .dependencies import get_query_token, get_token_header\nfrom .internal import admin\nfrom .routers import items, users\n\napp = ReadyAPI(dependencies=[Depends(get_query_token)])\n\n\napp.include_router(users.router)\napp.include_router(items.router)\napp.include_router(\n    admin.router,\n    prefix=\"/admin\",\n    tags=[\"admin\"],\n    dependencies=[Depends(get_token_header)],\n    responses={418: {\"description\": \"I'm a teapot\"}},\n)\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello Bigger Applications!\"}\n</code></pre>"},{"location":"tutorial/bigger-applications/#incluir-o-apirouters-para-usuarios-e-itens","title":"Incluir o <code>APIRouter</code>s para <code>usu\u00e1rios</code> e <code>itens</code>","text":"<p>Agora, vamos incluir os <code>roteadores</code> dos subm\u00f3dulos <code>usu\u00e1rios</code> e <code>itens</code>:</p> app/main.py<pre><code>from readyapi import Depends, ReadyAPI\n\nfrom .dependencies import get_query_token, get_token_header\nfrom .internal import admin\nfrom .routers import items, users\n\napp = ReadyAPI(dependencies=[Depends(get_query_token)])\n\n\napp.include_router(users.router)\napp.include_router(items.router)\napp.include_router(\n    admin.router,\n    prefix=\"/admin\",\n    tags=[\"admin\"],\n    dependencies=[Depends(get_token_header)],\n    responses={418: {\"description\": \"I'm a teapot\"}},\n)\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello Bigger Applications!\"}\n</code></pre> <p>Informa\u00e7\u00e3o</p> <p><code>users.router</code> cont\u00e9m o <code>APIRouter</code> dentro do arquivo <code>app/routers/users.py</code>.</p> <p>E <code>items.router</code> cont\u00e9m o <code>APIRouter</code> dentro do arquivo <code>app/routers/items.py</code>.</p> <p>Com <code>app.include_router()</code> podemos adicionar cada <code>APIRouter</code> ao aplicativo principal <code>ReadyAPI</code>.</p> <p>Ele incluir\u00e1 todas as rotas daquele roteador como parte dele.</p> <p>Detalhe T\u00e9cnico</p> <p>Na verdade, ele criar\u00e1 internamente uma opera\u00e7\u00e3o de rota para cada opera\u00e7\u00e3o de rota que foi declarada no <code>APIRouter</code>.</p> <p>Ent\u00e3o, nos bastidores, ele realmente funcionar\u00e1 como se tudo fosse o mesmo aplicativo \u00fanico.</p> <p>Check</p> <p>Voc\u00ea n\u00e3o precisa se preocupar com desempenho ao incluir roteadores.</p> <p>Isso levar\u00e1 microssegundos e s\u00f3 acontecer\u00e1 na inicializa\u00e7\u00e3o.</p> <p>Ent\u00e3o n\u00e3o afetar\u00e1 o desempenho. \u26a1</p>"},{"location":"tutorial/bigger-applications/#incluir-um-apirouter-com-um-prefix-personalizado-tags-responses-e-dependencies","title":"Incluir um <code>APIRouter</code> com um <code>prefix</code> personalizado, <code>tags</code>, <code>responses</code> e <code>dependencies</code>","text":"<p>Agora, vamos imaginar que sua organiza\u00e7\u00e3o lhe deu o arquivo <code>app/internal/admin.py</code>.</p> <p>Ele cont\u00e9m um <code>APIRouter</code> com algumas opera\u00e7\u00f5es de rota de administra\u00e7\u00e3o que sua organiza\u00e7\u00e3o compartilha entre v\u00e1rios projetos.</p> <p>Para este exemplo, ser\u00e1 super simples. Mas digamos que, como ele \u00e9 compartilhado com outros projetos na organiza\u00e7\u00e3o, n\u00e3o podemos modific\u00e1-lo e adicionar um <code>prefix</code>, <code>dependencies</code>, <code>tags</code>, etc. diretamente ao <code>APIRouter</code>:</p> app/internal/admin.py<pre><code>from readyapi import APIRouter\n\nrouter = APIRouter()\n\n\n@router.post(\"/\")\nasync def update_admin():\n    return {\"message\": \"Admin getting schwifty\"}\n</code></pre> <p>Mas ainda queremos definir um <code>prefixo</code> personalizado ao incluir o <code>APIRouter</code> para que todas as suas opera\u00e7\u00f5es de rota comecem com <code>/admin</code>, queremos proteg\u00ea-lo com as <code>depend\u00eancias</code> que j\u00e1 temos para este projeto e queremos incluir <code>tags</code> e <code>responses</code>.</p> <p>Podemos declarar tudo isso sem precisar modificar o <code>APIRouter</code> original passando esses par\u00e2metros para <code>app.include_router()</code>:</p> app/main.py<pre><code>from readyapi import Depends, ReadyAPI\n\nfrom .dependencies import get_query_token, get_token_header\nfrom .internal import admin\nfrom .routers import items, users\n\napp = ReadyAPI(dependencies=[Depends(get_query_token)])\n\n\napp.include_router(users.router)\napp.include_router(items.router)\napp.include_router(\n    admin.router,\n    prefix=\"/admin\",\n    tags=[\"admin\"],\n    dependencies=[Depends(get_token_header)],\n    responses={418: {\"description\": \"I'm a teapot\"}},\n)\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello Bigger Applications!\"}\n</code></pre> <p>Dessa forma, o <code>APIRouter</code> original permanecer\u00e1 inalterado, para que possamos compartilhar o mesmo arquivo <code>app/internal/admin.py</code> com outros projetos na organiza\u00e7\u00e3o.</p> <p>O resultado \u00e9 que em nosso aplicativo, cada uma das opera\u00e7\u00f5es de rota do m\u00f3dulo <code>admin</code> ter\u00e1:</p> <ul> <li>O prefixo <code>/admin</code>.</li> <li>A tag <code>admin</code>.</li> <li>A depend\u00eancia <code>get_token_header</code>.</li> <li>A resposta <code>418</code>. \ud83c\udf75</li> </ul> <p>Mas isso afetar\u00e1 apenas o <code>APIRouter</code> em nosso aplicativo, e n\u00e3o em nenhum outro c\u00f3digo que o utilize.</p> <p>Assim, por exemplo, outros projetos poderiam usar o mesmo <code>APIRouter</code> com um m\u00e9todo de autentica\u00e7\u00e3o diferente.</p>"},{"location":"tutorial/bigger-applications/#incluir-uma-operacao-de-rota","title":"Incluir uma opera\u00e7\u00e3o de rota","text":"<p>Tamb\u00e9m podemos adicionar opera\u00e7\u00f5es de rota diretamente ao aplicativo <code>ReadyAPI</code>.</p> <p>Aqui fazemos isso... s\u00f3 para mostrar que podemos \ud83e\udd37:</p> app/main.py<pre><code>from readyapi import Depends, ReadyAPI\n\nfrom .dependencies import get_query_token, get_token_header\nfrom .internal import admin\nfrom .routers import items, users\n\napp = ReadyAPI(dependencies=[Depends(get_query_token)])\n\n\napp.include_router(users.router)\napp.include_router(items.router)\napp.include_router(\n    admin.router,\n    prefix=\"/admin\",\n    tags=[\"admin\"],\n    dependencies=[Depends(get_token_header)],\n    responses={418: {\"description\": \"I'm a teapot\"}},\n)\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello Bigger Applications!\"}\n</code></pre> <p>e funcionar\u00e1 corretamente, junto com todas as outras opera\u00e7\u00f5es de rota adicionadas com <code>app.include_router()</code>.</p> <p>Detalhes T\u00e9cnicos</p> <p>Observa\u00e7\u00e3o: este \u00e9 um detalhe muito t\u00e9cnico que voc\u00ea provavelmente pode simplesmente pular.</p> <p>Os <code>APIRouter</code>s n\u00e3o s\u00e3o \"montados\", eles n\u00e3o s\u00e3o isolados do resto do aplicativo.</p> <p>Isso ocorre porque queremos incluir suas opera\u00e7\u00f5es de rota no esquema OpenAPI e nas interfaces de usu\u00e1rio.</p> <p>Como n\u00e3o podemos simplesmente isol\u00e1-los e \"mont\u00e1-los\" independentemente do resto, as opera\u00e7\u00f5es de rota s\u00e3o \"clonadas\" (recriadas), n\u00e3o inclu\u00eddas diretamente.</p>"},{"location":"tutorial/bigger-applications/#verifique-a-documentacao-automatica-da-api","title":"Verifique a documenta\u00e7\u00e3o autom\u00e1tica da API","text":"<p>Agora, execute <code>uvicorn</code>, usando o m\u00f3dulo <code>app.main</code> e a vari\u00e1vel <code>app</code>:</p> <pre><code>$ uvicorn app.main:app --reload\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>E abra os documentos em http://127.0.0.1:8000/docs.</p> <p>Voc\u00ea ver\u00e1 a documenta\u00e7\u00e3o autom\u00e1tica da API, incluindo os caminhos de todos os subm\u00f3dulos, usando os caminhos (e prefixos) corretos e as tags corretas:</p> <p></p>"},{"location":"tutorial/bigger-applications/#incluir-o-mesmo-roteador-varias-vezes-com-prefixos-diferentes","title":"Incluir o mesmo roteador v\u00e1rias vezes com <code>prefixos</code> diferentes","text":"<p>Voc\u00ea tamb\u00e9m pode usar <code>.include_router()</code> v\u00e1rias vezes com o mesmo roteador usando prefixos diferentes.</p> <p>Isso pode ser \u00fatil, por exemplo, para expor a mesma API sob prefixos diferentes, por exemplo, <code>/api/v1</code> e <code>/api/latest</code>.</p> <p>Esse \u00e9 um uso avan\u00e7ado que voc\u00ea pode n\u00e3o precisar, mas est\u00e1 l\u00e1 caso precise.</p>"},{"location":"tutorial/bigger-applications/#incluir-um-apirouter-em-outro","title":"Incluir um <code>APIRouter</code> em outro","text":"<p>Da mesma forma que voc\u00ea pode incluir um <code>APIRouter</code> em um aplicativo <code>ReadyAPI</code>, voc\u00ea pode incluir um <code>APIRouter</code> em outro <code>APIRouter</code> usando:</p> <pre><code>router.include_router(other_router)\n</code></pre> <p>Certifique-se de fazer isso antes de incluir <code>router</code> no aplicativo <code>ReadyAPI</code>, para que as opera\u00e7\u00f5es de rota de <code>other_router</code> tamb\u00e9m sejam inclu\u00eddas.</p>"},{"location":"tutorial/body-fields/","title":"Corpo - Campos","text":"<p>Da mesma forma que voc\u00ea pode declarar valida\u00e7\u00f5es adicionais e metadados nos par\u00e2metros de fun\u00e7\u00f5es de opera\u00e7\u00f5es de rota com <code>Query</code>, <code>Path</code> e <code>Body</code>, voc\u00ea pode declarar valida\u00e7\u00f5es e metadados dentro de modelos do Pydantic usando <code>Field</code> do Pydantic.</p>"},{"location":"tutorial/body-fields/#importe-field","title":"Importe <code>Field</code>","text":"<p>Primeiro, voc\u00ea tem que import\u00e1-lo:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Body, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel, Field\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Aviso</p> <p>Note que <code>Field</code> \u00e9 importado diretamente do <code>pydantic</code>, n\u00e3o do <code>readyapi</code> como todo o resto (<code>Query</code>, <code>Path</code>, <code>Body</code>, etc).</p>"},{"location":"tutorial/body-fields/#declare-atributos-do-modelo","title":"Declare atributos do modelo","text":"<p>Voc\u00ea pode ent\u00e3o utilizar <code>Field</code> com atributos do modelo:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Body, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel, Field\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p><code>Field</code> funciona da mesma forma que <code>Query</code>, <code>Path</code> e <code>Body</code>, ele possui todos os mesmos par\u00e2metros, etc.</p> <p>Detalhes t\u00e9cnicos</p> <p>Na realidade, <code>Query</code>, <code>Path</code> e outros que voc\u00ea ver\u00e1 em seguida, criam objetos de subclasses de uma classe <code>Param</code> comum, que \u00e9 ela mesma uma subclasse da classe <code>FieldInfo</code> do Pydantic.</p> <p>E <code>Field</code> do Pydantic retorna uma inst\u00e2ncia de <code>FieldInfo</code> tamb\u00e9m.</p> <p><code>Body</code> tamb\u00e9m retorna objetos de uma subclasse de <code>FieldInfo</code> diretamente. E tem outras que voc\u00ea ver\u00e1 mais tarde que s\u00e3o subclasses da classe <code>Body</code>.</p> <p>Lembre-se que quando voc\u00ea importa <code>Query</code>, <code>Path</code>, e outros de <code>readyapi</code>, esse s\u00e3o na realidade fun\u00e7\u00f5es que retornam classes especiais.</p> <p>Dica</p> <p>Note como cada atributo do modelo com um tipo, valor padr\u00e3o e <code>Field</code> possuem a mesma estrutura que par\u00e2metros de fun\u00e7\u00f5es de opera\u00e7\u00f5es de rota, com <code>Field</code> ao inv\u00e9s de <code>Path</code>, <code>Query</code> e <code>Body</code>.</p>"},{"location":"tutorial/body-fields/#adicione-informacoes-extras","title":"Adicione informa\u00e7\u00f5es extras","text":"<p>Voc\u00ea pode declarar informa\u00e7\u00e3o extra em <code>Field</code>, <code>Query</code>, <code>Body</code>, etc. E isso ser\u00e1 inclu\u00eddo no JSON Schema gerado.</p> <p>Voc\u00ea ir\u00e1 aprender mais sobre adicionar informa\u00e7\u00f5es extras posteriormente nessa documenta\u00e7\u00e3o, quando estiver aprendendo a declarar exemplos.</p>"},{"location":"tutorial/body-fields/#recapitulando","title":"Recapitulando","text":"<p>Voc\u00ea pode usar <code>Field</code> do Pydantic para declarar valida\u00e7\u00f5es extras e metadados para atributos do modelo.</p> <p>Voc\u00ea tamb\u00e9m pode usar os argumentos de palavras-chave extras para passar metadados do JSON Schema adicionais.</p>"},{"location":"tutorial/body-multiple-params/","title":"Corpo - M\u00faltiplos par\u00e2metros","text":"<p>Agora que n\u00f3s vimos como usar <code>Path</code> e <code>Query</code>, veremos usos mais avan\u00e7ados de declara\u00e7\u00f5es no corpo da requisi\u00e7\u00e3o.</p>"},{"location":"tutorial/body-multiple-params/#misture-path-query-e-parametros-de-corpo","title":"Misture <code>Path</code>, <code>Query</code> e par\u00e2metros de corpo","text":"<p>Primeiro, \u00e9 claro, voc\u00ea pode misturar <code>Path</code>, <code>Query</code> e declara\u00e7\u00f5es de par\u00e2metro no corpo da requisi\u00e7\u00e3o livremente e o ReadyAPI saber\u00e1 o que fazer.</p> <p>E voc\u00ea tamb\u00e9m pode declarar par\u00e2metros de corpo como opcionais, definindo o valor padr\u00e3o com <code>None</code>:</p> Python 3.10+ - non-Annotated <pre><code>from pydantic import BaseModel\nfrom readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: str | None = None,\n    item: Item | None = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.8+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str | None = None,\n    item: Item | None = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Path, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results\n</code></pre> <p>Nota</p> <p>Repare que, neste caso, o <code>item</code> que seria capturado a partir do corpo \u00e9 opcional. Visto que ele possui <code>None</code> como valor padr\u00e3o.</p>"},{"location":"tutorial/body-multiple-params/#multiplos-parametros-de-corpo","title":"M\u00faltiplos par\u00e2metros de corpo","text":"<p>No exemplo anterior, as opera\u00e7\u00f5es de rota esperariam um JSON no corpo contendo os atributos de um <code>Item</code>, exemplo:</p> <pre><code>{\n    \"name\": \"Foo\",\n    \"description\": \"The pretender\",\n    \"price\": 42.0,\n    \"tax\": 3.2\n}\n</code></pre> <p>Mas voc\u00ea pode tamb\u00e9m declarar m\u00faltiplos par\u00e2metros de corpo, por exemplo, <code>item</code> e <code>user</code>:</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user}\n    return results\n</code></pre> <p>Neste caso, o ReadyAPI perceber\u00e1 que existe mais de um par\u00e2metro de corpo na fun\u00e7\u00e3o (dois par\u00e2metros que s\u00e3o modelos Pydantic).</p> <p>Ent\u00e3o, ele usar\u00e1 o nome dos par\u00e2metros como chaves (nome dos campos) no corpo, e espera um corpo como:</p> <pre><code>{\n    \"item\": {\n        \"name\": \"Foo\",\n        \"description\": \"The pretender\",\n        \"price\": 42.0,\n        \"tax\": 3.2\n    },\n    \"user\": {\n        \"username\": \"dave\",\n        \"full_name\": \"Dave Grohl\"\n    }\n}\n</code></pre> <p>Nota</p> <p>Repare que mesmo que o <code>item</code> esteja declarado da mesma maneira que antes, agora \u00e9 esperado que ele esteja dentro do corpo com uma chave <code>item</code>.</p> <p>O ReadyAPI far\u00e1 a convers\u00e3o autom\u00e1tica a partir da requisi\u00e7\u00e3o, assim esse par\u00e2metro <code>item</code> receber\u00e1 seu respectivo conte\u00fado e o mesmo ocorrer\u00e1 com <code>user</code>.</p> <p>Ele executar\u00e1 a valida\u00e7\u00e3o dos dados compostos e ir\u00e1 document\u00e1-los de maneira compat\u00edvel com o esquema OpenAPI e documenta\u00e7\u00e3o autom\u00e1tica.</p>"},{"location":"tutorial/body-multiple-params/#valores-singulares-no-corpo","title":"Valores singulares no corpo","text":"<p>Assim como existem uma <code>Query</code> e uma <code>Path</code> para definir dados adicionais para par\u00e2metros de consulta e de rota, o ReadyAPI prov\u00ea o equivalente para <code>Body</code>.</p> <p>Por exemplo, extendendo o modelo anterior, voc\u00ea poder decidir por ter uma outra chave <code>importance</code> no mesmo corpo, al\u00e9m de <code>item</code> e <code>user</code>.</p> <p>Se voc\u00ea declar\u00e1-lo como \u00e9, porque \u00e9 um valor singular, o ReadyAPI assumir\u00e1 que se trata de um par\u00e2metro de consulta.</p> <p>Mas voc\u00ea pode instruir o ReadyAPI para trat\u00e1-lo como outra chave do corpo usando <code>Body</code>:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User, importance: int = Body()):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int, item: Item, user: User, importance: Annotated[int, Body()]\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int, item: Item, user: User, importance: Annotated[int, Body()]\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int, item: Item, user: User, importance: Annotated[int, Body()]\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User, importance: int = Body()):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results\n</code></pre> <p>Neste caso, o ReadyAPI esperar\u00e1 um corpo como:</p> <pre><code>{\n    \"item\": {\n        \"name\": \"Foo\",\n        \"description\": \"The pretender\",\n        \"price\": 42.0,\n        \"tax\": 3.2\n    },\n    \"user\": {\n        \"username\": \"dave\",\n        \"full_name\": \"Dave Grohl\"\n    },\n    \"importance\": 5\n}\n</code></pre> <p>Mais uma vez, ele converter\u00e1 os tipos de dados, validar, documentar, etc.</p>"},{"location":"tutorial/body-multiple-params/#multiplos-parametros-de-corpo-e-consulta","title":"M\u00faltiplos par\u00e2metros de corpo e consulta","text":"<p>Obviamente, voc\u00ea tamb\u00e9m pode declarar par\u00e2metros de consulta assim que voc\u00ea precisar, de modo adicional a quaisquer par\u00e2metros de corpo.</p> <p>Dado que, por padr\u00e3o, valores singulares s\u00e3o interpretados como par\u00e2metros de consulta, voc\u00ea n\u00e3o precisa explicitamente adicionar uma <code>Query</code>, voc\u00ea pode somente:</p> <pre><code>q: Union[str, None] = None\n</code></pre> <p>Ou como em Python 3.10 e vers\u00f5es superiores:</p> <pre><code>q: str | None = None\n</code></pre> <p>Por exemplo:</p> Python 3.10+ - non-Annotated <pre><code>from pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: int = Body(gt=0),\n    q: str | None = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.8+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: Annotated[int, Body(gt=0)],\n    q: str | None = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: Annotated[int, Body(gt=0)],\n    q: Union[str, None] = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: Annotated[int, Body(gt=0)],\n    q: Union[str, None] = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: int = Body(gt=0),\n    q: Union[str, None] = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Informa\u00e7\u00e3o</p> <p><code>Body</code> tamb\u00e9m possui todas as valida\u00e7\u00f5es adicionais e metadados de par\u00e2metros como em <code>Query</code>,<code>Path</code> e outras que voc\u00ea ver\u00e1 depois.</p>"},{"location":"tutorial/body-multiple-params/#declare-um-unico-parametro-de-corpo-indicando-sua-chave","title":"Declare um \u00fanico par\u00e2metro de corpo indicando sua chave","text":"<p>Suponha que voc\u00ea tem um \u00fanico par\u00e2metro de corpo <code>item</code>, a partir de um modelo Pydantic <code>Item</code>.</p> <p>Por padr\u00e3o, o ReadyAPI esperar\u00e1 que seu conte\u00fado venha no corpo diretamente.</p> <p>Mas se voc\u00ea quiser que ele espere por um JSON com uma chave <code>item</code> e dentro dele os conte\u00fados do modelo, como ocorre ao declarar v\u00e1rios par\u00e2metros de corpo, voc\u00ea pode usar o par\u00e2metro especial de <code>Body</code> chamado <code>embed</code>:</p> <pre><code>item: Item = Body(embed=True)\n</code></pre> <p>como em:</p> Python 3.10+ - non-Annotated <pre><code>from pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.8+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Neste caso o ReadyAPI esperar\u00e1 um corpo como:</p> <pre><code>{\n    \"item\": {\n        \"name\": \"Foo\",\n        \"description\": \"The pretender\",\n        \"price\": 42.0,\n        \"tax\": 3.2\n    }\n}\n</code></pre> <p>ao inv\u00e9s de:</p> <pre><code>{\n    \"name\": \"Foo\",\n    \"description\": \"The pretender\",\n    \"price\": 42.0,\n    \"tax\": 3.2\n}\n</code></pre>"},{"location":"tutorial/body-multiple-params/#recapitulando","title":"Recapitulando","text":"<p>Voc\u00ea pode adicionar m\u00faltiplos par\u00e2metros de corpo para sua fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota, mesmo que a requisi\u00e7\u00e3o possa ter somente um \u00fanico corpo.</p> <p>E o ReadyAPI vai manipul\u00e1-los, mandar para voc\u00ea os dados corretos na sua fun\u00e7\u00e3o, e validar e documentar o schema correto na opera\u00e7\u00e3o de rota.</p> <p>Voc\u00ea tamb\u00e9m pode declarar valores singulares para serem recebidos como parte do corpo.</p> <p>E voc\u00ea pode instruir o ReadyAPI para requisitar no corpo a indica\u00e7\u00e3o de chave mesmo quando existe somente um \u00fanico par\u00e2metro declarado.</p>"},{"location":"tutorial/body-nested-models/","title":"Corpo - Modelos aninhados","text":"<p>Com o ReadyAPI, voc\u00ea pode definir, validar, documentar e usar modelos profundamente aninhados de forma arbitr\u00e1ria (gra\u00e7as ao Pydantic).</p>"},{"location":"tutorial/body-nested-models/#campos-do-tipo-lista","title":"Campos do tipo Lista","text":"<p>Voc\u00ea pode definir um atributo como um subtipo. Por exemplo, uma <code>list</code> do Python:</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list = []\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list = []\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Isso far\u00e1 com que tags seja uma lista de itens mesmo sem declarar o tipo dos elementos desta lista.</p>"},{"location":"tutorial/body-nested-models/#campos-do-tipo-lista-com-um-parametro-de-tipo","title":"Campos do tipo Lista com um par\u00e2metro de tipo","text":"<p>Mas o Python tem uma maneira espec\u00edfica de declarar listas com tipos internos ou \"par\u00e2metros de tipo\":</p>"},{"location":"tutorial/body-nested-models/#importe-list-do-typing","title":"Importe <code>List</code> do typing","text":"<p>Primeiramente, importe <code>List</code> do m\u00f3dulo <code>typing</code> que j\u00e1 vem por padr\u00e3o no Python:</p> Python 3.8+ <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre>"},{"location":"tutorial/body-nested-models/#declare-a-list-com-um-parametro-de-tipo","title":"Declare a <code>List</code> com um par\u00e2metro de tipo","text":"<p>Para declarar tipos que t\u00eam par\u00e2metros de tipo(tipos internos), como <code>list</code>, <code>dict</code>, <code>tuple</code>:</p> <ul> <li>Importe os do modulo <code>typing</code></li> <li>Passe o(s) tipo(s) interno(s) como \"par\u00e2metros de tipo\" usando colchetes: <code>[</code> e <code>]</code></li> </ul> <pre><code>from typing import List\n\nmy_list: List[str]\n</code></pre> <p>Essa \u00e9 a sintaxe padr\u00e3o do Python para declara\u00e7\u00f5es de tipo.</p> <p>Use a mesma sintaxe padr\u00e3o para atributos de modelo com tipos internos.</p> <p>Portanto, em nosso exemplo, podemos fazer com que <code>tags</code> sejam especificamente uma \"lista de strings\":</p> Python 3.8+ <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre>"},{"location":"tutorial/body-nested-models/#tipo-set","title":"Tipo \"set\"","text":"<p>Mas ent\u00e3o, quando n\u00f3s pensamos mais, percebemos que as tags n\u00e3o devem se repetir, elas provavelmente devem ser strings \u00fanicas.</p> <p>E que o Python tem um tipo de dados especial para conjuntos de itens \u00fanicos, o <code>set</code>.</p> <p>Ent\u00e3o podemos importar <code>Set</code> e declarar <code>tags</code> como um <code>set</code> de <code>str</code>s:</p> Python 3.8+ <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Com isso, mesmo que voc\u00ea receba uma requisi\u00e7\u00e3o contendo dados duplicados, ela ser\u00e1 convertida em um conjunto de itens exclusivos.</p> <p>E sempre que voc\u00ea enviar esses dados como resposta, mesmo se a fonte tiver duplicatas, eles ser\u00e3o gerados como um conjunto de itens exclusivos.</p> <p>E tamb\u00e9m teremos anota\u00e7\u00f5es/documenta\u00e7\u00e3o em conformidade.</p>"},{"location":"tutorial/body-nested-models/#modelos-aninhados","title":"Modelos aninhados","text":"<p>Cada atributo de um modelo Pydantic tem um tipo.</p> <p>Mas esse tipo pode ser outro modelo Pydantic.</p> <p>Portanto, voc\u00ea pode declarar \"objects\" JSON profundamente aninhados com nomes, tipos e valida\u00e7\u00f5es de atributos espec\u00edficos.</p> <p>Tudo isso, aninhado arbitrariamente.</p>"},{"location":"tutorial/body-nested-models/#defina-um-sub-modelo","title":"Defina um sub-modelo","text":"<p>Por exemplo, n\u00f3s podemos definir um modelo <code>Image</code>:</p> Python 3.8+ <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: str\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n    image: Union[Image, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: str\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n    image: Image | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: str\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n    image: Union[Image, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre>"},{"location":"tutorial/body-nested-models/#use-o-sub-modelo-como-um-tipo","title":"Use o sub-modelo como um tipo","text":"<p>E ent\u00e3o podemos usa-lo como o tipo de um atributo:</p> Python 3.8+ <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: str\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n    image: Union[Image, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: str\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n    image: Image | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: str\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n    image: Union[Image, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Isso significa que o ReadyAPI vai esperar um corpo similar \u00e0:</p> <pre><code>{\n    \"name\": \"Foo\",\n    \"description\": \"The pretender\",\n    \"price\": 42.0,\n    \"tax\": 3.2,\n    \"tags\": [\"rock\", \"metal\", \"bar\"],\n    \"image\": {\n        \"url\": \"http://example.com/baz.jpg\",\n        \"name\": \"The Foo live\"\n    }\n}\n</code></pre> <p>Novamente, apenas fazendo essa declara\u00e7\u00e3o, com o ReadyAPI, voc\u00ea ganha:</p> <ul> <li>Suporte do editor de texto (comple\u00e7\u00e3o, etc), inclusive para modelos aninhados</li> <li>Convers\u00e3o de dados</li> <li>Valida\u00e7\u00e3o de dados</li> <li>Documenta\u00e7\u00e3o automatica</li> </ul>"},{"location":"tutorial/body-nested-models/#tipos-especiais-e-validacao","title":"Tipos especiais e valida\u00e7\u00e3o","text":"<p>Al\u00e9m dos tipos singulares normais como <code>str</code>, <code>int</code>, <code>float</code>, etc. Voc\u00ea tamb\u00e9m pode usar tipos singulares mais complexos que herdam de <code>str</code>.</p> <p>Para ver todas as op\u00e7\u00f5es poss\u00edveis, cheque a documenta\u00e7\u00e3o para ostipos exoticos do Pydantic. Voc\u00ea ver\u00e1 alguns exemplos no pr\u00f3ximo capitulo.</p> <p>Por exemplo, no modelo <code>Image</code> n\u00f3s temos um campo <code>url</code>, n\u00f3s podemos declara-lo como um <code>HttpUrl</code> do Pydantic inv\u00e9s de como uma <code>str</code>:</p> Python 3.8+ <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n    image: Union[Image, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+ <pre><code>from pydantic import BaseModel, HttpUrl\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n    image: Image | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n    image: Union[Image, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>A string ser\u00e1 verificada para se tornar uma URL v\u00e1lida e documentada no esquema JSON/1OpenAPI como tal.</p>"},{"location":"tutorial/body-nested-models/#atributos-como-listas-de-submodelos","title":"Atributos como listas de submodelos","text":"<p>Voc\u00ea tamb\u00e9m pode usar modelos Pydantic como subtipos de <code>list</code>, <code>set</code>, etc:</p> Python 3.8+ <pre><code>from typing import List, Set, Union\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n    images: Union[List[Image], None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+ <pre><code>from pydantic import BaseModel, HttpUrl\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n    images: list[Image] | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n    images: Union[list[Image], None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Isso vai esperar(converter, validar, documentar, etc) um corpo JSON tal qual:</p> <pre><code>{\n    \"name\": \"Foo\",\n    \"description\": \"The pretender\",\n    \"price\": 42.0,\n    \"tax\": 3.2,\n    \"tags\": [\n        \"rock\",\n        \"metal\",\n        \"bar\"\n    ],\n    \"images\": [\n        {\n            \"url\": \"http://example.com/baz.jpg\",\n            \"name\": \"The Foo live\"\n        },\n        {\n            \"url\": \"http://example.com/dave.jpg\",\n            \"name\": \"The Baz\"\n        }\n    ]\n}\n</code></pre> <p>informa\u00e7\u00e3o</p> <p>Note como o campo <code>images</code> agora tem uma lista de objetos de image.</p>"},{"location":"tutorial/body-nested-models/#modelos-profundamente-aninhados","title":"Modelos profundamente aninhados","text":"<p>Voc\u00ea pode definir modelos profundamente aninhados de forma arbitr\u00e1ria:</p> Python 3.8+ <pre><code>from typing import List, Set, Union\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n    images: Union[List[Image], None] = None\n\n\nclass Offer(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    items: List[Item]\n\n\n@app.post(\"/offers/\")\nasync def create_offer(offer: Offer):\n    return offer\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+ <pre><code>from pydantic import BaseModel, HttpUrl\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n    images: list[Image] | None = None\n\n\nclass Offer(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    items: list[Item]\n\n\n@app.post(\"/offers/\")\nasync def create_offer(offer: Offer):\n    return offer\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n    images: Union[list[Image], None] = None\n\n\nclass Offer(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    items: list[Item]\n\n\n@app.post(\"/offers/\")\nasync def create_offer(offer: Offer):\n    return offer\n</code></pre> <p>informa\u00e7\u00e3o</p> <p>Note como <code>Offer</code> tem uma lista de <code>Item</code>s, que por sua vez possui opcionalmente uma lista <code>Image</code>s</p>"},{"location":"tutorial/body-nested-models/#corpos-de-listas-puras","title":"Corpos de listas puras","text":"<p>Se o valor de primeiro n\u00edvel do corpo JSON que voc\u00ea espera for um <code>array</code> do JSON (uma<code>lista</code> do Python), voc\u00ea pode declarar o tipo no par\u00e2metro da fun\u00e7\u00e3o, da mesma forma que nos modelos do Pydantic:</p> <pre><code>images: List[Image]\n</code></pre> <p>como em:</p> Python 3.8+ <pre><code>from typing import List\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\n@app.post(\"/images/multiple/\")\nasync def create_multiple_images(images: List[Image]):\n    return images\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+ <pre><code>from pydantic import BaseModel, HttpUrl\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\n@app.post(\"/images/multiple/\")\nasync def create_multiple_images(images: list[Image]):\n    return images\n</code></pre>"},{"location":"tutorial/body-nested-models/#suporte-de-editor-em-todo-canto","title":"Suporte de editor em todo canto","text":"<p>E voc\u00ea obt\u00e9m suporte do editor em todos os lugares.</p> <p>Mesmo para itens dentro de listas:</p> <p></p> <p>Voc\u00ea n\u00e3o conseguiria este tipo de suporte de editor se estivesse trabalhando diretamente com <code>dict</code> em vez de modelos Pydantic.</p> <p>Mas voc\u00ea tamb\u00e9m n\u00e3o precisa se preocupar com eles, os dicts de entrada s\u00e3o convertidos automaticamente e sua sa\u00edda \u00e9 convertida automaticamente para JSON tamb\u00e9m.</p>"},{"location":"tutorial/body-nested-models/#corpos-de-dicts-arbitrarios","title":"Corpos de <code>dict</code>s arbitr\u00e1rios","text":"<p>Voc\u00ea tamb\u00e9m pode declarar um corpo como um <code>dict</code> com chaves de algum tipo e valores de outro tipo.</p> <p>Sem ter que saber de antem\u00e3o quais s\u00e3o os nomes de campos/atributos v\u00e1lidos (como seria o caso dos modelos Pydantic).</p> <p>Isso seria \u00fatil se voc\u00ea deseja receber chaves que ainda n\u00e3o conhece.</p> <p>Outro caso \u00fatil \u00e9 quando voc\u00ea deseja ter chaves de outro tipo, por exemplo, <code>int</code>.</p> <p>\u00c9 isso que vamos ver aqui.</p> <p>Neste caso, voc\u00ea aceitaria qualquer <code>dict</code>, desde que tenha chaves<code>int</code> com valores <code>float</code>:</p> Python 3.8+ <pre><code>from typing import Dict\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.post(\"/index-weights/\")\nasync def create_index_weights(weights: Dict[int, float]):\n    return weights\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.post(\"/index-weights/\")\nasync def create_index_weights(weights: dict[int, float]):\n    return weights\n</code></pre> <p>Dica</p> <p>Leve em condidera\u00e7\u00e3o que o JSON s\u00f3 suporta <code>str</code> como chaves.</p> <p>Mas o Pydantic tem convers\u00e3o autom\u00e1tica de dados.</p> <p>Isso significa que, embora os clientes da API s\u00f3 possam enviar strings como chaves, desde que essas strings contenham inteiros puros, o Pydantic ir\u00e1 convert\u00ea-los e valid\u00e1-los.</p> <p>E o <code>dict</code> que voc\u00ea recebe como <code>weights</code> ter\u00e1, na verdade, chaves <code>int</code> e valores<code>float</code>.</p>"},{"location":"tutorial/body-nested-models/#recapitulacao","title":"Recapitula\u00e7\u00e3o","text":"<p>Com ReadyAPI voc\u00ea tem a flexibilidade m\u00e1xima fornecida pelos modelos Pydantic, enquanto seu c\u00f3digo \u00e9 mantido simples, curto e elegante.</p> <p>Mas com todos os benef\u00edcios:</p> <ul> <li>Suporte do editor (comple\u00e7\u00e3o em todo canto!)</li> <li>Convers\u00e3o de dados (leia-se parsing/serializa\u00e7\u00e3o)</li> <li>Valida\u00e7\u00e3o de dados</li> <li>Documenta\u00e7\u00e3o dos esquemas</li> <li>Documenta\u00e7\u00e3o autom\u00e1tica</li> </ul>"},{"location":"tutorial/body-updates/","title":"Corpo - Atualiza\u00e7\u00f5es","text":""},{"location":"tutorial/body-updates/#atualizacao-de-dados-existentes-com-put","title":"Atualiza\u00e7\u00e3o de dados existentes com <code>PUT</code>","text":"<p>Para atualizar um item, voc\u00ea pode usar a opera\u00e7\u00e3o HTTP <code>PUT</code>.</p> <p>Voc\u00ea pode usar <code>jsonable_encoder</code> para converter os dados de entrada em dados que podem ser armazenados como JSON (por exemplo, com um banco de dados NoSQL). Por exemplo, convertendo <code>datetime</code> em <code>str</code>.</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str | None = None\n    description: str | None = None\n    price: float | None = None\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.put(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    update_item_encoded = jsonable_encoder(item)\n    items[item_id] = update_item_encoded\n    return update_item_encoded\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.put(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    update_item_encoded = jsonable_encoder(item)\n    items[item_id] = update_item_encoded\n    return update_item_encoded\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.put(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    update_item_encoded = jsonable_encoder(item)\n    items[item_id] = update_item_encoded\n    return update_item_encoded\n</code></pre> <p><code>PUT</code> \u00e9 usado para receber dados que devem substituir os dados existentes.</p>"},{"location":"tutorial/body-updates/#aviso-sobre-a-substituicao","title":"Aviso sobre a substitui\u00e7\u00e3o","text":"<p>Isso significa que, se voc\u00ea quiser atualizar o item <code>bar</code> usando <code>PUT</code> com um corpo contendo:</p> <pre><code>{\n    \"name\": \"Barz\",\n    \"price\": 3,\n    \"description\": None,\n}\n</code></pre> <p>Como ele n\u00e3o inclui o atributo j\u00e1 armazenado <code>\"tax\": 20.2</code>, o modelo de entrada assumiria o valor padr\u00e3o de <code>\"tax\": 10.5</code>.</p> <p>E os dados seriam salvos com esse \"novo\" <code>tax</code> de <code>10.5</code>.</p>"},{"location":"tutorial/body-updates/#atualizacoes-parciais-com-patch","title":"Atualiza\u00e7\u00f5es parciais com <code>PATCH</code>","text":"<p>Voc\u00ea tamb\u00e9m pode usar a opera\u00e7\u00e3o HTTP <code>PATCH</code> para atualizar parcialmente os dados.</p> <p>Isso significa que voc\u00ea pode enviar apenas os dados que deseja atualizar, deixando o restante intacto.</p> <p>Nota</p> <p><code>PATCH</code> \u00e9 menos comumente usado e conhecido do que <code>PUT</code>.</p> <p>E muitas equipes usam apenas <code>PUT</code>, mesmo para atualiza\u00e7\u00f5es parciais.</p> <p>Voc\u00ea \u00e9 livre para us\u00e1-los como preferir, ReadyAPI n\u00e3o imp\u00f5e restri\u00e7\u00f5es.</p> <p>Mas este guia te d\u00e1 uma ideia de como eles s\u00e3o destinados a serem usados.</p>"},{"location":"tutorial/body-updates/#usando-o-parametro-exclude_unset-do-pydantic","title":"Usando o par\u00e2metro <code>exclude_unset</code> do Pydantic","text":"<p>Se voc\u00ea quiser receber atualiza\u00e7\u00f5es parciais, \u00e9 muito \u00fatil usar o par\u00e2metro <code>exclude_unset</code> no m\u00e9todo <code>.model_dump()</code> do modelo do Pydantic.</p> <p>Como <code>item.model_dump(exclude_unset=True)</code>.</p> <p>Informa\u00e7\u00e3o</p> <p>No Pydantic v1, o m\u00e9todo que era chamado <code>.dict()</code> e foi depreciado (mas ainda suportado) no Pydantic v2. Agora, deve-se usar o m\u00e9todo <code>.model_dump()</code>.</p> <p>Os exemplos aqui usam <code>.dict()</code> para compatibilidade com o Pydantic v1, mas voc\u00ea deve usar <code>.model_dump()</code> a partir do Pydantic v2.</p> <p>Isso gera um <code>dict</code> com apenas os dados definidos ao criar o modelo <code>item</code>, excluindo os valores padr\u00e3o.</p> <p>Ent\u00e3o, voc\u00ea pode usar isso para gerar um <code>dict</code> com apenas os dados definidos (enviados na solicita\u00e7\u00e3o), omitindo valores padr\u00e3o:</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str | None = None\n    description: str | None = None\n    price: float | None = None\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n</code></pre>"},{"location":"tutorial/body-updates/#usando-o-parametro-update-do-pydantic","title":"Usando o par\u00e2metro <code>update</code> do Pydantic","text":"<p>Agora, voc\u00ea pode criar uma c\u00f3pia do modelo existente usando <code>.model_copy()</code>, e passar o par\u00e2metro <code>update</code> com um <code>dict</code> contendo os dados para atualizar.</p> <p>Informa\u00e7\u00e3o</p> <p>No Pydantic v1, o m\u00e9todo era chamado <code>.copy()</code>, ele foi depreciado (mas ainda suportado) no Pydantic v2, e renomeado para <code>.model_copy()</code>.</p> <p>Os exemplos aqui usam <code>.copy()</code> para compatibilidade com o Pydantic v1, mas voc\u00ea deve usar <code>.model_copy()</code> com o Pydantic v2.</p> <p>Como <code>stored_item_model.model_copy(update=update_data)</code>:</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str | None = None\n    description: str | None = None\n    price: float | None = None\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n</code></pre>"},{"location":"tutorial/body-updates/#recapitulando-as-atualizacoes-parciais","title":"Recapitulando as atualiza\u00e7\u00f5es parciais","text":"<p>Resumindo, para aplicar atualiza\u00e7\u00f5es parciais voc\u00ea pode:</p> <ul> <li>(Opcionalmente) usar <code>PATCH</code> em vez de <code>PUT</code>.</li> <li>Recuperar os dados armazenados.</li> <li>Colocar esses dados em um modelo do Pydantic.</li> <li>Gerar um <code>dict</code> sem valores padr\u00e3o a partir do modelo de entrada (usando <code>exclude_unset</code>).<ul> <li>Dessa forma, voc\u00ea pode atualizar apenas os valores definidos pelo usu\u00e1rio, em vez de substituir os valores j\u00e1 armazenados com valores padr\u00e3o em seu modelo.</li> </ul> </li> <li>Criar uma c\u00f3pia do modelo armazenado, atualizando seus atributos com as atualiza\u00e7\u00f5es parciais recebidas (usando o par\u00e2metro <code>update</code>).</li> <li>Converter o modelo copiado em algo que possa ser armazenado no seu banco de dados (por exemplo, usando o <code>jsonable_encoder</code>).<ul> <li>Isso \u00e9 compar\u00e1vel ao uso do m\u00e9todo <code>.model_dump()</code>, mas garante (e converte) os valores para tipos de dados que possam ser convertidos em JSON, por exemplo, <code>datetime</code> para <code>str</code>.</li> </ul> </li> <li>Salvar os dados no seu banco de dados.</li> <li>Retornar o modelo atualizado.</li> </ul> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str | None = None\n    description: str | None = None\n    price: float | None = None\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n</code></pre> <p>Dica</p> <p>Voc\u00ea pode realmente usar essa mesma t\u00e9cnica com uma opera\u00e7\u00e3o HTTP <code>PUT</code>.</p> <p>Mas o exemplo aqui usa <code>PATCH</code> porque foi criado para esses casos de uso.</p> <p>Nota</p> <p>Observe que o modelo de entrada ainda \u00e9 validado.</p> <p>Portanto, se voc\u00ea quiser receber atualiza\u00e7\u00f5es parciais que possam omitir todos os atributos, precisar\u00e1 ter um modelo com todos os atributos marcados como opcionais (com valores padr\u00e3o ou <code>None</code>).</p> <p>Para distinguir os modelos com todos os valores opcionais para atualiza\u00e7\u00f5es e modelos com valores obrigat\u00f3rios para cria\u00e7\u00e3o, voc\u00ea pode usar as ideias descritas em Modelos Adicionais.</p>"},{"location":"tutorial/body/","title":"Corpo da Requisi\u00e7\u00e3o","text":"<p>Quando voc\u00ea precisa enviar dados de um cliente (como de um navegador web) para sua API, voc\u00ea o envia como um corpo da requisi\u00e7\u00e3o.</p> <p>O corpo da requisi\u00e7\u00e3o \u00e9 a informa\u00e7\u00e3o enviada pelo cliente para sua API. O corpo da resposta \u00e9 a informa\u00e7\u00e3o que sua API envia para o cliente.</p> <p>Sua API quase sempre ir\u00e1 enviar um corpo na resposta. Mas os clientes n\u00e3o necessariamente precisam enviar um corpo em toda requisi\u00e7\u00e3o.</p> <p>Para declarar um corpo da requisi\u00e7\u00e3o, voc\u00ea utiliza os modelos do Pydantic com todos os seus poderes e benef\u00edcios.</p> <p>Informa\u00e7\u00e3o</p> <p>Para enviar dados, voc\u00ea deve usar utilizar um dos m\u00e9todos: <code>POST</code> (Mais comum), <code>PUT</code>, <code>DELETE</code> ou <code>PATCH</code>.</p> <p>Enviar um corpo em uma requisi\u00e7\u00e3o <code>GET</code> n\u00e3o tem um comportamento definido nas especifica\u00e7\u00f5es, por\u00e9m \u00e9 suportado pelo ReadyAPI, apenas para casos de uso bem complexos/extremos.</p> <p>Como \u00e9 desencorajado, a documenta\u00e7\u00e3o interativa com Swagger UI n\u00e3o ir\u00e1 mostrar a documenta\u00e7\u00e3o para o corpo da requisi\u00e7\u00e3o para um <code>GET</code>, e proxies que intermediarem podem n\u00e3o suportar o corpo da requisi\u00e7\u00e3o.</p>"},{"location":"tutorial/body/#importe-o-basemodel-do-pydantic","title":"Importe o <code>BaseModel</code> do Pydantic","text":"<p>Primeiro, voc\u00ea precisa importar <code>BaseModel</code> do <code>pydantic</code>:</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n</code></pre>"},{"location":"tutorial/body/#crie-seu-modelo-de-dados","title":"Crie seu modelo de dados","text":"<p>Ent\u00e3o voc\u00ea declara seu modelo de dados como uma classe que herda <code>BaseModel</code>.</p> <p>Utilize os tipos Python padr\u00e3o para todos os atributos:</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n</code></pre> <p>Assim como quando declaramos par\u00e2metros de consulta, quando um atributo do modelo possui um valor padr\u00e3o, ele se torna opcional. Caso contr\u00e1rio, se torna obrigat\u00f3rio. Use <code>None</code> para torn\u00e1-lo opcional.</p> <p>Por exemplo, o modelo acima declara um JSON \"<code>object</code>\" (ou <code>dict</code> no Python) como esse:</p> <pre><code>{\n    \"name\": \"Foo\",\n    \"description\": \"Uma descri\u00e7\u00e3o opcional\",\n    \"price\": 45.2,\n    \"tax\": 3.5\n}\n</code></pre> <p>...como <code>description</code> e <code>tax</code> s\u00e3o opcionais (Com um valor padr\u00e3o de <code>None</code>), esse JSON \"<code>object</code>\" tamb\u00e9m \u00e9 v\u00e1lido:</p> <pre><code>{\n    \"name\": \"Foo\",\n    \"price\": 45.2\n}\n</code></pre>"},{"location":"tutorial/body/#declare-como-um-parametro","title":"Declare como um par\u00e2metro","text":"<p>Para adicionar o corpo na fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota, declare-o da mesma maneira que voc\u00ea declarou par\u00e2metros de rota e consulta:</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n</code></pre> <p>...E declare o tipo como o modelo que voc\u00ea criou, <code>Item</code>.</p>"},{"location":"tutorial/body/#resultados","title":"Resultados","text":"<p>Apenas com esse declara\u00e7\u00e3o de tipos do Python, o ReadyAPI ir\u00e1:</p> <ul> <li>Ler o corpo da requisi\u00e7\u00e3o como um JSON.</li> <li>Converter os tipos correspondentes (se necess\u00e1rio).</li> <li>Validar os dados.<ul> <li>Se algum dados for inv\u00e1lido, ir\u00e1 retornar um erro bem claro, indicando exatamente onde e o que est\u00e1 incorreto.</li> </ul> </li> <li>Entregar a voc\u00ea a informa\u00e7\u00e3o recebida no par\u00e2metro <code>item</code>.<ul> <li>Como voc\u00ea o declarou na fun\u00e7\u00e3o como do tipo <code>Item</code>, voc\u00ea tamb\u00e9m ter\u00e1 o suporte do editor (completa\u00e7\u00e3o, etc) para todos os atributos e seus tipos.</li> </ul> </li> <li>Gerar um Esquema JSON com as defini\u00e7\u00f5es do seu modelo, voc\u00ea tamb\u00e9m pode utiliz\u00e1-lo em qualquer lugar que quiser, se fizer sentido para seu projeto.</li> <li>Esses esquemas far\u00e3o parte do esquema OpenAPI, e utilizados nas UIs de documenta\u00e7\u00e3o autom\u00e1tica.</li> </ul>"},{"location":"tutorial/body/#documentacao-automatica","title":"Documenta\u00e7\u00e3o autom\u00e1tica","text":"<p>Os esquemas JSON dos seus modelos far\u00e3o parte do esquema OpenAPI gerado para sua aplica\u00e7\u00e3o, e aparecer\u00e3o na documenta\u00e7\u00e3o interativa da API:</p> <p></p> <p>E tamb\u00e9m ser\u00e3o utilizados em cada fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota que utiliz\u00e1-los:</p> <p></p>"},{"location":"tutorial/body/#suporte-do-editor-de-texto","title":"Suporte do editor de texto:","text":"<p>No seu editor de texto, dentro da fun\u00e7\u00e3o voc\u00ea receber\u00e1 dicas de tipos e completa\u00e7\u00e3o em todo lugar (isso n\u00e3o aconteceria se voc\u00ea recebesse um <code>dict</code> em vez de um modelo Pydantic):</p> <p></p> <p>Voc\u00ea tamb\u00e9m poder\u00e1 receber verifica\u00e7\u00f5es de erros para opera\u00e7\u00f5es de tipos incorretas:</p> <p></p> <p>Isso n\u00e3o \u00e9 por acaso, todo o framework foi constru\u00eddo em volta deste design.</p> <p>E foi imensamente testado na fase de design, antes de qualquer implementa\u00e7\u00e3o, para garantir que funcionaria para todos os editores de texto.</p> <p>Houveram mudan\u00e7as no pr\u00f3prio Pydantic para que isso fosse poss\u00edvel.</p> <p>As capturas de tela anteriores foram capturas no Visual Studio Code.</p> <p>Mas voc\u00ea ter\u00e1 o mesmo suporte do editor no PyCharm e na maioria dos editores Python:</p> <p></p> <p>Dica</p> <p>Se voc\u00ea utiliza o PyCharm como editor, voc\u00ea pode utilizar o Plugin do Pydantic para o PyCharm .</p> <p>Melhora o suporte do editor para seus modelos Pydantic com::</p> <ul> <li>completa\u00e7\u00e3o autom\u00e1tica</li> <li>verifica\u00e7\u00e3o de tipos</li> <li>refatora\u00e7\u00e3o</li> <li>buscas</li> <li>inspe\u00e7\u00f5es</li> </ul>"},{"location":"tutorial/body/#use-o-modelo","title":"Use o modelo","text":"<p>Dentro da fun\u00e7\u00e3o, voc\u00ea pode acessar todos os atributos do objeto do modelo diretamente:</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    item_dict = item.dict()\n    if item.tax is not None:\n        price_with_tax = item.price + item.tax\n        item_dict.update({\"price_with_tax\": price_with_tax})\n    return item_dict\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    item_dict = item.dict()\n    if item.tax is not None:\n        price_with_tax = item.price + item.tax\n        item_dict.update({\"price_with_tax\": price_with_tax})\n    return item_dict\n</code></pre>"},{"location":"tutorial/body/#corpo-da-requisicao-parametros-de-rota","title":"Corpo da requisi\u00e7\u00e3o + par\u00e2metros de rota","text":"<p>Voc\u00ea pode declarar par\u00e2metros de rota e corpo da requisi\u00e7\u00e3o ao mesmo tempo.</p> <p>O ReadyAPI ir\u00e1 reconhecer que os par\u00e2metros da fun\u00e7\u00e3o que combinam com par\u00e2metros de rota devem ser retirados da rota, e par\u00e2metros da fun\u00e7\u00e3o que s\u00e3o declarados como modelos Pydantic sejam retirados do corpo da requisi\u00e7\u00e3o.</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    return {\"item_id\": item_id, **item.dict()}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    return {\"item_id\": item_id, **item.dict()}\n</code></pre>"},{"location":"tutorial/body/#corpo-da-requisicao-parametros-de-rota-parametros-de-consulta","title":"Corpo da requisi\u00e7\u00e3o + par\u00e2metros de rota + par\u00e2metros de consulta","text":"<p>Voc\u00ea tamb\u00e9m pode declarar par\u00e2metros de corpo, rota e consulta, ao mesmo tempo.</p> <p>O ReadyAPI ir\u00e1 reconhecer cada um deles e retirar a informa\u00e7\u00e3o do local correto.</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item, q: Union[str, None] = None):\n    result = {\"item_id\": item_id, **item.dict()}\n    if q:\n        result.update({\"q\": q})\n    return result\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item, q: str | None = None):\n    result = {\"item_id\": item_id, **item.dict()}\n    if q:\n        result.update({\"q\": q})\n    return result\n</code></pre> <p>Os par\u00e2metros da fun\u00e7\u00e3o ser\u00e3o reconhecidos conforme abaixo:</p> <ul> <li>Se o par\u00e2metro tamb\u00e9m \u00e9 declarado na rota, ser\u00e1 utilizado como um par\u00e2metro de rota.</li> <li>Se o par\u00e2metro \u00e9 de um tipo \u00fanico (como <code>int</code>, <code>float</code>, <code>str</code>, <code>bool</code>, etc) ser\u00e1 interpretado como um par\u00e2metro de consulta.</li> <li>Se o par\u00e2metro \u00e9 declarado como um modelo Pydantic, ser\u00e1 interpretado como o corpo da requisi\u00e7\u00e3o.</li> </ul> <p>Observa\u00e7\u00e3o</p> <p>O ReadyAPI saber\u00e1 que o valor de <code>q</code> n\u00e3o \u00e9 obrigat\u00f3rio por causa do valor padr\u00e3o <code>= None</code>.</p> <p>O <code>Union</code> em <code>Union[str, None]</code> n\u00e3o \u00e9 utilizado pelo ReadyAPI, mas permite ao seu editor de texto lhe dar um suporte melhor e detectar erros.</p>"},{"location":"tutorial/body/#sem-o-pydantic","title":"Sem o Pydantic","text":"<p>Se voc\u00ea n\u00e3o quer utilizar os modelos Pydantic, voc\u00ea tamb\u00e9m pode utilizar o par\u00e2metro Body. Veja a documenta\u00e7\u00e3o para Body - Par\u00e2metros m\u00faltiplos: Valores singulares no body.</p>"},{"location":"tutorial/cookie-param-models/","title":"Modelos de Par\u00e2metros de Cookie","text":"<p>Se voc\u00ea possui um grupo de cookies que est\u00e3o relacionados, voc\u00ea pode criar um modelo Pydantic para declar\u00e1-los. \ud83c\udf6a</p> <p>Isso lhe permitiria reutilizar o modelo em diversos lugares e tamb\u00e9m declarar valida\u00e7\u00f5es e metadata para todos os par\u00e2metros de uma vez. \ud83d\ude0e</p> <p>Nota</p> <p>Isso \u00e9 suportado desde a vers\u00e3o <code>0.115.0</code> do ReadyAPI. \ud83e\udd13</p> <p>Dica</p> <p>Essa mesma t\u00e9cnica se aplica para <code>Query</code>, <code>Cookie</code>, e <code>Header</code>. \ud83d\ude0e</p>"},{"location":"tutorial/cookie-param-models/#cookies-com-modelos-pydantic","title":"Cookies com Modelos Pydantic","text":"<p>Declare o par\u00e2metro de cookie que voc\u00ea precisa em um modelo Pydantic, e depois declare o par\u00e2metro como um <code>Cookie</code>:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Cookies(BaseModel):\n    session_id: str\n    fatebook_tracker: str | None = None\n    googall_tracker: str | None = None\n\n\n@app.get(\"/items/\")\nasync def read_items(cookies: Annotated[Cookies, Cookie()]):\n    return cookies\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Cookies(BaseModel):\n    session_id: str\n    fatebook_tracker: Union[str, None] = None\n    googall_tracker: Union[str, None] = None\n\n\n@app.get(\"/items/\")\nasync def read_items(cookies: Annotated[Cookies, Cookie()]):\n    return cookies\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Cookie, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass Cookies(BaseModel):\n    session_id: str\n    fatebook_tracker: Union[str, None] = None\n    googall_tracker: Union[str, None] = None\n\n\n@app.get(\"/items/\")\nasync def read_items(cookies: Annotated[Cookies, Cookie()]):\n    return cookies\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Cookies(BaseModel):\n    session_id: str\n    fatebook_tracker: str | None = None\n    googall_tracker: str | None = None\n\n\n@app.get(\"/items/\")\nasync def read_items(cookies: Cookies = Cookie()):\n    return cookies\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Cookies(BaseModel):\n    session_id: str\n    fatebook_tracker: Union[str, None] = None\n    googall_tracker: Union[str, None] = None\n\n\n@app.get(\"/items/\")\nasync def read_items(cookies: Cookies = Cookie()):\n    return cookies\n</code></pre> <p>O ReadyAPI ir\u00e1 extrair os dados para cada campo dos cookies recebidos na requisi\u00e7\u00e3o e lhe fornecer o modelo Pydantic que voc\u00ea definiu.</p>"},{"location":"tutorial/cookie-param-models/#verifique-os-documentos","title":"Verifique os Documentos","text":"<p>Voc\u00ea pode ver os cookies definidos na IU dos documentos em <code>/docs</code>:</p> <p>Informa\u00e7\u00e3o</p> <p>Tenha em mente que, como os navegadores lidam com cookies de maneira especial e por baixo dos panos, eles n\u00e3o permitem facilmente que o JavaScript lidem com eles.</p> <p>Se voc\u00ea for na IU de documentos da API em <code>/docs</code> voc\u00ea poder\u00e1 ver a documenta\u00e7\u00e3o para cookies das suas opera\u00e7\u00f5es de rotas.</p> <p>Mas mesmo que voc\u00ea adicionar os dados e clicar em \"Executar\", pelo motivo da IU dos documentos trabalharem com JavaScript, os cookies n\u00e3o ser\u00e3o enviados, e voc\u00ea ver\u00e1 uma mensagem de erro como se voc\u00ea n\u00e3o tivesse escrito nenhum dado.</p>"},{"location":"tutorial/cookie-param-models/#proibir-cookies-adicionais","title":"Proibir Cookies Adicionais","text":"<p>Em alguns casos especiais (provavelmente n\u00e3o muito comuns), voc\u00ea pode querer restringir os cookies que voc\u00ea deseja receber.</p> <p>Agora a sua API possui o poder de contrar o seu pr\u00f3prio consentimento de cookie. \ud83e\udd2a\ud83c\udf6a</p> <p>Voc\u00ea pode utilizar a configura\u00e7\u00e3o do modelo Pydantic para <code>proibir</code> qualquer campo <code>extra</code>.</p> Python 3.9+ <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Cookies(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    session_id: str\n    fatebook_tracker: Union[str, None] = None\n    googall_tracker: Union[str, None] = None\n\n\n@app.get(\"/items/\")\nasync def read_items(cookies: Annotated[Cookies, Cookie()]):\n    return cookies\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Cookies(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    session_id: str\n    fatebook_tracker: str | None = None\n    googall_tracker: str | None = None\n\n\n@app.get(\"/items/\")\nasync def read_items(cookies: Annotated[Cookies, Cookie()]):\n    return cookies\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Cookie, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass Cookies(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    session_id: str\n    fatebook_tracker: Union[str, None] = None\n    googall_tracker: Union[str, None] = None\n\n\n@app.get(\"/items/\")\nasync def read_items(cookies: Annotated[Cookies, Cookie()]):\n    return cookies\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Cookies(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    session_id: str\n    fatebook_tracker: str | None = None\n    googall_tracker: str | None = None\n\n\n@app.get(\"/items/\")\nasync def read_items(cookies: Cookies = Cookie()):\n    return cookies\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Cookies(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    session_id: str\n    fatebook_tracker: Union[str, None] = None\n    googall_tracker: Union[str, None] = None\n\n\n@app.get(\"/items/\")\nasync def read_items(cookies: Cookies = Cookie()):\n    return cookies\n</code></pre> <p>Se o cliente tentar enviar alguns cookies extras, eles receber\u00e3o um retorno de erro.</p> <p>Coitados dos banners de cookies com todo o seu esfor\u00e7o para obter o seu consentimento para a API rejeit\u00e1-lo. \ud83c\udf6a</p> <p>Por exemplo, se o cliente tentar enviar um cookie <code>santa_tracker</code> com o valor de <code>good-list-please</code>, o cliente receber\u00e1 uma resposta de erro informando que o cookie <code>santa_tracker</code> is not allowed:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"type\": \"extra_forbidden\",\n            \"loc\": [\"cookie\", \"santa_tracker\"],\n            \"msg\": \"Extra inputs are not permitted\",\n            \"input\": \"good-list-please\",\n        }\n    ]\n}\n</code></pre>"},{"location":"tutorial/cookie-param-models/#resumo","title":"Resumo","text":"<p>Voc\u00ea consegue utilizar modelos Pydantic para declarar cookies no ReadyAPI. \ud83d\ude0e</p>"},{"location":"tutorial/cookie-params/","title":"Par\u00e2metros de Cookie","text":"<p>Voc\u00ea pode definir par\u00e2metros de Cookie da mesma maneira que define param\u00eatros com <code>Query</code> e <code>Path</code>.</p>"},{"location":"tutorial/cookie-params/#importe-cookie","title":"Importe <code>Cookie</code>","text":"<p>Primeiro importe <code>Cookie</code>:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(ads_id: Annotated[str | None, Cookie()] = None):\n    return {\"ads_id\": ads_id}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(ads_id: Annotated[Union[str, None], Cookie()] = None):\n    return {\"ads_id\": ads_id}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Cookie, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(ads_id: Annotated[Union[str, None], Cookie()] = None):\n    return {\"ads_id\": ads_id}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(ads_id: str | None = Cookie(default=None)):\n    return {\"ads_id\": ads_id}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(ads_id: Union[str, None] = Cookie(default=None)):\n    return {\"ads_id\": ads_id}\n</code></pre>"},{"location":"tutorial/cookie-params/#declare-parametros-de-cookie","title":"Declare par\u00e2metros de <code>Cookie</code>","text":"<p>Ent\u00e3o declare os param\u00eatros de cookie usando a mesma estrutura que em <code>Path</code> e <code>Query</code>.</p> <p>Voc\u00ea pode definir o valor padr\u00e3o, assim como todas as valida\u00e7\u00f5es extras ou par\u00e2metros de anota\u00e7\u00e3o:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(ads_id: Annotated[str | None, Cookie()] = None):\n    return {\"ads_id\": ads_id}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(ads_id: Annotated[Union[str, None], Cookie()] = None):\n    return {\"ads_id\": ads_id}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Cookie, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(ads_id: Annotated[Union[str, None], Cookie()] = None):\n    return {\"ads_id\": ads_id}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(ads_id: str | None = Cookie(default=None)):\n    return {\"ads_id\": ads_id}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(ads_id: Union[str, None] = Cookie(default=None)):\n    return {\"ads_id\": ads_id}\n</code></pre> <p>Detalhes T\u00e9cnicos</p> <p><code>Cookie</code> \u00e9 uma classe \"irm\u00e3\" de <code>Path</code> e <code>Query</code>. Ela tamb\u00e9m herda da mesma classe em comum <code>Param</code>.</p> <p>Mas lembre-se que quando voc\u00ea importa <code>Query</code>, <code>Path</code>, <code>Cookie</code> e outras de <code>readyapi</code>, elas s\u00e3o na verdade fun\u00e7\u00f5es que retornam classes especiais.</p> <p>Informa\u00e7\u00e3o</p> <p>Para declarar cookies, voc\u00ea precisa usar <code>Cookie</code>, pois caso contr\u00e1rio, os par\u00e2metros seriam interpretados como par\u00e2metros de consulta.</p>"},{"location":"tutorial/cookie-params/#recapitulando","title":"Recapitulando","text":"<p>Declare cookies com <code>Cookie</code>, usando o mesmo padr\u00e3o comum que utiliza-se em <code>Query</code> e <code>Path</code>.</p>"},{"location":"tutorial/cors/","title":"CORS (Cross-Origin Resource Sharing)","text":"<p>CORS ou \"Cross-Origin Resource Sharing\" refere-se \u00e0s situa\u00e7\u00f5es em que um frontend rodando em um navegador possui um c\u00f3digo JavaScript que se comunica com um backend, e o backend est\u00e1 em uma \"origem\" diferente do frontend.</p>"},{"location":"tutorial/cors/#origem","title":"Origem","text":"<p>Uma origem \u00e9 a combina\u00e7\u00e3o de protocolo (<code>http</code>, <code>https</code>), dom\u00ednio (<code>myapp.com</code>, <code>localhost</code>, <code>localhost.khulnasoft.com</code>), e porta (<code>80</code>, <code>443</code>, <code>8080</code>).</p> <p>Ent\u00e3o, todos estes s\u00e3o origens diferentes:</p> <ul> <li><code>http://localhost</code></li> <li><code>https://localhost</code></li> <li><code>http://localhost:8080</code></li> </ul> <p>Mesmo se todos estiverem em <code>localhost</code>, eles usam diferentes protocolos e portas, portanto, s\u00e3o \"origens\" diferentes.</p>"},{"location":"tutorial/cors/#passos","title":"Passos","text":"<p>Ent\u00e3o, digamos que voc\u00ea tenha um frontend rodando no seu navegador em <code>http://localhost:8080</code>, e seu JavaScript esteja tentando se comunicar com um backend rodando em http://localhost (como n\u00e3o especificamos uma porta, o navegador assumir\u00e1 a porta padr\u00e3o <code>80</code>).</p> <p>Portanto, o navegador ir\u00e1 enviar uma requisi\u00e7\u00e3o HTTP <code>OPTIONS</code> ao backend, e se o backend enviar os cabe\u00e7alhos apropriados autorizando a comunica\u00e7\u00e3o a partir de uma origem diferente (<code>http://localhost:8080</code>) ent\u00e3o o navegador deixar\u00e1 o JavaScript no frontend enviar sua requisi\u00e7\u00e3o para o backend.</p> <p>Para conseguir isso, o backend deve ter uma lista de \"origens permitidas\".</p> <p>Neste caso, ele ter\u00e1 que incluir <code>http://localhost:8080</code> para o frontend funcionar corretamente.</p>"},{"location":"tutorial/cors/#curingas","title":"Curingas","text":"<p>\u00c9 poss\u00edvel declarar uma lista com <code>\"*\"</code> (um \"curinga\") para dizer que tudo est\u00e1 permitido.</p> <p>Mas isso s\u00f3 permitir\u00e1 certos tipos de comunica\u00e7\u00e3o, excluindo tudo que envolva credenciais: cookies, cabe\u00e7alhos de autoriza\u00e7\u00e3o como aqueles usados \u200b\u200bcom Bearer Tokens, etc.</p> <p>Ent\u00e3o, para que tudo funcione corretamente, \u00e9 melhor especificar explicitamente as origens permitidas.</p>"},{"location":"tutorial/cors/#usar-corsmiddleware","title":"Usar <code>CORSMiddleware</code>","text":"<p>Voc\u00ea pode configur\u00e1-lo em sua aplica\u00e7\u00e3o ReadyAPI usando o <code>CORSMiddleware</code>.</p> <ul> <li>Importe <code>CORSMiddleware</code>.</li> <li>Crie uma lista de origens permitidas (como strings).</li> <li>Adicione-a como um \"middleware\" \u00e0 sua aplica\u00e7\u00e3o ReadyAPI.</li> </ul> <p>Voc\u00ea tamb\u00e9m pode especificar se o seu backend permite:</p> <ul> <li>Credenciais (Cabe\u00e7alhos de autoriza\u00e7\u00e3o, Cookies, etc).</li> <li>M\u00e9todos HTTP espec\u00edficos (<code>POST</code>, <code>PUT</code>) ou todos eles com o curinga <code>\"*\"</code>.</li> <li>Cabe\u00e7alhos HTTP espec\u00edficos ou todos eles com o curinga <code>\"*\"</code>.</li> </ul> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.middleware.cors import CORSMiddleware\n\napp = ReadyAPI()\n\norigins = [\n    \"http://localhost.khulnasoft.com\",\n    \"https://localhost.khulnasoft.com\",\n    \"http://localhost\",\n    \"http://localhost:8080\",\n]\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n\n@app.get(\"/\")\nasync def main():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>Os par\u00e2metros padr\u00e3o usados \u200b\u200bpela implementa\u00e7\u00e3o <code>CORSMiddleware</code> s\u00e3o restritivos por padr\u00e3o, ent\u00e3o voc\u00ea precisar\u00e1 habilitar explicitamente as origens, m\u00e9todos ou cabe\u00e7alhos espec\u00edficos para que os navegadores tenham permiss\u00e3o para us\u00e1-los em um contexto de dom\u00ednios diferentes.</p> <p>Os seguintes argumentos s\u00e3o suportados:</p> <ul> <li><code>allow_origins</code> - Uma lista de origens que devem ter permiss\u00e3o para fazer requisi\u00e7\u00f5es de origem cruzada. Por exemplo, <code>['https://example.org', 'https://www.example.org']</code>. Voc\u00ea pode usar <code>['*']</code> para permitir qualquer origem.</li> <li><code>allow_origin_regex</code> - Uma string regex para corresponder \u00e0s origens que devem ter permiss\u00e3o para fazer requisi\u00e7\u00f5es de origem cruzada. Por exemplo, <code>'https://.*\\.example\\.org'</code>.</li> <li><code>allow_methods</code> - Uma lista de m\u00e9todos HTTP que devem ser permitidos para requisi\u00e7\u00f5es de origem cruzada. O padr\u00e3o \u00e9 <code>['GET']</code>. Voc\u00ea pode usar <code>['*']</code> para permitir todos os m\u00e9todos padr\u00e3o.</li> <li><code>allow_headers</code> - Uma lista de cabe\u00e7alhos de solicita\u00e7\u00e3o HTTP que devem ter suporte para requisi\u00e7\u00f5es de origem cruzada. O padr\u00e3o \u00e9 <code>[]</code>. Voc\u00ea pode usar <code>['*']</code> para permitir todos os cabe\u00e7alhos. Os cabe\u00e7alhos <code>Accept</code>, <code>Accept-Language</code>, <code>Content-Language</code> e <code>Content-Type</code> s\u00e3o sempre permitidos para requisi\u00e7\u00f5es CORS simples.</li> <li><code>allow_credentials</code> - Indica que os cookies devem ser suportados para requisi\u00e7\u00f5es de origem cruzada. O padr\u00e3o \u00e9 <code>False</code>. Al\u00e9m disso, <code>allow_origins</code> n\u00e3o pode ser definido como <code>['*']</code> para que as credenciais sejam permitidas, as origens devem ser especificadas.</li> <li><code>expose_headers</code> - Indica quaisquer cabe\u00e7alhos de resposta que devem ser disponibilizados ao navegador. O padr\u00e3o \u00e9 <code>[]</code>.</li> <li><code>max_age</code> - Define um tempo m\u00e1ximo em segundos para os navegadores armazenarem em cache as respostas CORS. O padr\u00e3o \u00e9 <code>600</code>.</li> </ul> <p>O middleware responde a dois tipos espec\u00edficos de solicita\u00e7\u00e3o HTTP...</p>"},{"location":"tutorial/cors/#requisicoes-cors-pre-voo-preflight","title":"Requisi\u00e7\u00f5es CORS pr\u00e9-voo (preflight)","text":"<p>Estas s\u00e3o quaisquer solicita\u00e7\u00f5es <code>OPTIONS</code> com cabe\u00e7alhos <code>Origin</code> e <code>Access-Control-Request-Method</code>.</p> <p>Nesse caso, o middleware interceptar\u00e1 a solicita\u00e7\u00e3o recebida e responder\u00e1 com cabe\u00e7alhos CORS apropriados e uma resposta <code>200</code> ou <code>400</code> para fins informativos.</p>"},{"location":"tutorial/cors/#requisicoes-simples","title":"Requisi\u00e7\u00f5es Simples","text":"<p>Qualquer solicita\u00e7\u00e3o com um cabe\u00e7alho <code>Origin</code>. Neste caso, o middleware passar\u00e1 a solicita\u00e7\u00e3o normalmente, mas incluir\u00e1 cabe\u00e7alhos CORS apropriados na resposta.</p>"},{"location":"tutorial/cors/#mais-informacoes","title":"Mais informa\u00e7\u00f5es","text":"<p>Para mais informa\u00e7\u00f5es CORS, acesse Mozilla CORS documentation.</p> <p>Detalhes t\u00e9cnicos</p> <p>Voc\u00ea tamb\u00e9m pode usar <code>from starlette.middleware.cors import CORSMiddleware</code>.</p> <p>ReadyAPI fornece v\u00e1rios middlewares em <code>readyapi.middleware</code> apenas como uma conveni\u00eancia para voc\u00ea, o desenvolvedor. Mas a maioria dos middlewares dispon\u00edveis v\u00eam diretamente da Starlette.</p>"},{"location":"tutorial/debugging/","title":"Depura\u00e7\u00e3o","text":"<p>Voc\u00ea pode conectar o depurador no seu editor, por exemplo, com o Visual Studio Code ou PyCharm.</p>"},{"location":"tutorial/debugging/#chamar-uvicorn","title":"Chamar <code>uvicorn</code>","text":"<p>Em seu aplicativo ReadyAPI, importe e execute <code>uvicorn</code> diretamente:</p> Python 3.8+ <pre><code>import uvicorn\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\ndef root():\n    a = \"a\"\n    b = \"b\" + a\n    return {\"hello world\": b}\n\n\nif __name__ == \"__main__\":\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n</code></pre>"},{"location":"tutorial/debugging/#sobre-__name__-__main__","title":"Sobre <code>__name__ == \"__main__\"</code>","text":"<p>O objetivo principal de <code>__name__ == \"__main__\"</code> \u00e9 ter algum c\u00f3digo que seja executado quando seu arquivo for chamado com:</p> <pre><code>$ python myapp.py\n</code></pre> <p>mas n\u00e3o \u00e9 chamado quando outro arquivo o importa, como em:</p> <pre><code>from myapp import app\n</code></pre>"},{"location":"tutorial/debugging/#mais-detalhes","title":"Mais detalhes","text":"<p>Digamos que seu arquivo se chama <code>myapp.py</code>.</p> <p>Se voc\u00ea execut\u00e1-lo com:</p> <pre><code>$ python myapp.py\n</code></pre> <p>ent\u00e3o a vari\u00e1vel interna <code>__name__</code> no seu arquivo, criada automaticamente pelo Python, ter\u00e1 como valor a string <code>\"__main__\"</code>.</p> <p>Ent\u00e3o, a se\u00e7\u00e3o:</p> <pre><code>    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n</code></pre> <p>vai executar.</p> <p>Isso n\u00e3o acontecer\u00e1 se voc\u00ea importar esse m\u00f3dulo (arquivo).</p> <p>Ent\u00e3o, se voc\u00ea tiver outro arquivo <code>importer.py</code> com:</p> <pre><code>from myapp import app\n\n# Mais um pouco de c\u00f3digo\n</code></pre> <p>nesse caso, a vari\u00e1vel criada automaticamente dentro de <code>myapp.py</code> n\u00e3o ter\u00e1 a vari\u00e1vel <code>__name__</code> com o valor <code>\"__main__\"</code>.</p> <p>Ent\u00e3o, a linha:</p> <pre><code>    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n</code></pre> <p>n\u00e3o ser\u00e1 executada.</p> <p>Informa\u00e7\u00e3o</p> <p>Para mais informa\u00e7\u00f5es, consulte a documenta\u00e7\u00e3o oficial do Python.</p>"},{"location":"tutorial/debugging/#execute-seu-codigo-com-seu-depurador","title":"Execute seu c\u00f3digo com seu depurador","text":"<p>Como voc\u00ea est\u00e1 executando o servidor Uvicorn diretamente do seu c\u00f3digo, voc\u00ea pode chamar seu programa Python (seu aplicativo ReadyAPI) diretamente do depurador.</p> <p>Por exemplo, no Visual Studio Code, voc\u00ea pode:</p> <ul> <li>Ir para o painel \"Debug\".</li> <li>\"Add configuration...\".</li> <li>Selecionar \"Python\"</li> <li>Executar o depurador com a op\u00e7\u00e3o \"<code>Python: Current File (Integrated Terminal)</code>\".</li> </ul> <p>Em seguida, ele iniciar\u00e1 o servidor com seu c\u00f3digo ReadyAPI, parar\u00e1 em seus pontos de interrup\u00e7\u00e3o, etc.</p> <p>Veja como pode parecer:</p> <p></p> <p>Se voc\u00ea usar o Pycharm, voc\u00ea pode:</p> <ul> <li>Abrir o menu \"Executar\".</li> <li>Selecionar a op\u00e7\u00e3o \"Depurar...\".</li> <li>Ent\u00e3o um menu de contexto aparece.</li> <li>Selecionar o arquivo para depurar (neste caso, <code>main.py</code>).</li> </ul> <p>Em seguida, ele iniciar\u00e1 o servidor com seu c\u00f3digo ReadyAPI, parar\u00e1 em seus pontos de interrup\u00e7\u00e3o, etc.</p> <p>Veja como pode parecer:</p> <p></p>"},{"location":"tutorial/encoder/","title":"Codificador Compat\u00edvel com JSON","text":"<p>Existem alguns casos em que voc\u00ea pode precisar converter um tipo de dados (como um modelo Pydantic) para algo compat\u00edvel com JSON (como um <code>dict</code>, <code>list</code>, etc).</p> <p>Por exemplo, se voc\u00ea precisar armazen\u00e1-lo em um banco de dados.</p> <p>Para isso, ReadyAPI fornece uma fun\u00e7\u00e3o <code>jsonable_encoder()</code>.</p>"},{"location":"tutorial/encoder/#usando-a-funcao-jsonable_encoder","title":"Usando a fun\u00e7\u00e3o <code>jsonable_encoder</code>","text":"<p>Vamos imaginar que voc\u00ea tenha um banco de dados <code>fake_db</code> que recebe apenas dados compat\u00edveis com JSON.</p> <p>Por exemplo, ele n\u00e3o recebe objetos <code>datetime</code>, pois estes objetos n\u00e3o s\u00e3o compat\u00edveis com JSON.</p> <p>Ent\u00e3o, um objeto <code>datetime</code> teria que ser convertido em um <code>str</code> contendo os dados no formato  ISO.</p> <p>Da mesma forma, este banco de dados n\u00e3o receberia um modelo Pydantic (um objeto com atributos), apenas um <code>dict</code>.</p> <p>Voc\u00ea pode usar a fun\u00e7\u00e3o <code>jsonable_encoder</code> para resolver isso.</p> <p>A fun\u00e7\u00e3o recebe um objeto, como um modelo Pydantic e retorna uma vers\u00e3o compat\u00edvel com JSON:</p> Python 3.10+ <pre><code>from datetime import datetime\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\nfake_db = {}\n\n\nclass Item(BaseModel):\n    title: str\n    timestamp: datetime\n    description: str | None = None\n\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{id}\")\ndef update_item(id: str, item: Item):\n    json_compatible_item_data = jsonable_encoder(item)\n    fake_db[id] = json_compatible_item_data\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from datetime import datetime\nfrom typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\nfake_db = {}\n\n\nclass Item(BaseModel):\n    title: str\n    timestamp: datetime\n    description: Union[str, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{id}\")\ndef update_item(id: str, item: Item):\n    json_compatible_item_data = jsonable_encoder(item)\n    fake_db[id] = json_compatible_item_data\n</code></pre> <p>Neste exemplo, ele converteria o modelo Pydantic em um <code>dict</code>, e o <code>datetime</code> em um <code>str</code>.</p> <p>O resultado de chamar a fun\u00e7\u00e3o \u00e9 algo que pode ser codificado com o padr\u00e3o do Python <code>json.dumps()</code>.</p> <p>A fun\u00e7\u00e3o n\u00e3o retorna um grande <code>str</code> contendo os dados no formato JSON (como uma string). Mas sim, retorna uma estrutura de dados padr\u00e3o do Python (por exemplo, um <code>dict</code>) com valores e subvalores compat\u00edveis com JSON.</p> <p>Nota</p> <p><code>jsonable_encoder</code> \u00e9 realmente usado pelo ReadyAPI internamente para converter dados. Mas tamb\u00e9m \u00e9 \u00fatil em muitos outros cen\u00e1rios.</p>"},{"location":"tutorial/extra-data-types/","title":"Tipos de dados extras","text":"<p>At\u00e9 agora, voc\u00ea tem usado tipos de dados comuns, tais como:</p> <ul> <li><code>int</code></li> <li><code>float</code></li> <li><code>str</code></li> <li><code>bool</code></li> </ul> <p>Mas voc\u00ea tamb\u00e9m pode usar tipos de dados mais complexos.</p> <p>E voc\u00ea ainda ter\u00e1 os mesmos recursos que viu at\u00e9 agora:</p> <ul> <li>\u00d3timo suporte do editor.</li> <li>Convers\u00e3o de dados das requisi\u00e7\u00f5es recebidas.</li> <li>Convers\u00e3o de dados para os dados da resposta.</li> <li>Valida\u00e7\u00e3o de dados.</li> <li>Anota\u00e7\u00e3o e documenta\u00e7\u00e3o autom\u00e1ticas.</li> </ul>"},{"location":"tutorial/extra-data-types/#outros-tipos-de-dados","title":"Outros tipos de dados","text":"<p>Aqui est\u00e3o alguns dos tipos de dados adicionais que voc\u00ea pode usar:</p> <ul> <li><code>UUID</code>:<ul> <li>Um \"Identificador Universalmente \u00danico\" padr\u00e3o, comumente usado como ID em muitos bancos de dados e sistemas.</li> <li>Em requisi\u00e7\u00f5es e respostas ser\u00e1 representado como uma <code>str</code>.</li> </ul> </li> <li><code>datetime.datetime</code>:<ul> <li>O <code>datetime.datetime</code> do Python.</li> <li>Em requisi\u00e7\u00f5es e respostas ser\u00e1 representado como uma <code>str</code> no formato ISO 8601, exemplo: <code>2008-09-15T15:53:00+05:00</code>.</li> </ul> </li> <li><code>datetime.date</code>:<ul> <li>O <code>datetime.date</code> do Python.</li> <li>Em requisi\u00e7\u00f5es e respostas ser\u00e1 representado como uma <code>str</code> no formato ISO 8601, exemplo: <code>2008-09-15</code>.</li> </ul> </li> <li><code>datetime.time</code>:<ul> <li>O <code>datetime.time</code> do Python.</li> <li>Em requisi\u00e7\u00f5es e respostas ser\u00e1 representado como uma <code>str</code> no formato ISO 8601, exemplo: <code>14:23:55.003</code>.</li> </ul> </li> <li><code>datetime.timedelta</code>:<ul> <li>O <code>datetime.timedelta</code> do Python.</li> <li>Em requisi\u00e7\u00f5es e respostas ser\u00e1 representado como um <code>float</code> de segundos totais.</li> <li>O Pydantic tamb\u00e9m permite represent\u00e1-lo como uma \"codifica\u00e7\u00e3o ISO 8601 diferen\u00e7a de tempo\", cheque a documenta\u00e7\u00e3o para mais informa\u00e7\u00f5es.</li> </ul> </li> <li><code>frozenset</code>:<ul> <li>Em requisi\u00e7\u00f5es e respostas, ser\u00e1 tratado da mesma forma que um <code>set</code>:<ul> <li>Nas requisi\u00e7\u00f5es, uma lista ser\u00e1 lida, eliminando duplicadas e convertendo-a em um <code>set</code>.</li> <li>Nas respostas, o <code>set</code> ser\u00e1 convertido para uma <code>list</code>.</li> <li>O esquema gerado vai especificar que os valores do <code>set</code> s\u00e3o unicos (usando o <code>uniqueItems</code> do JSON Schema).</li> </ul> </li> </ul> </li> <li><code>bytes</code>:<ul> <li>O <code>bytes</code> padr\u00e3o do Python.</li> <li>Em requisi\u00e7\u00f5es e respostas ser\u00e1 representado como uma <code>str</code>.</li> <li>O esquema gerado vai especificar que \u00e9 uma <code>str</code> com o \"formato\" <code>binary</code>.</li> </ul> </li> <li><code>Decimal</code>:<ul> <li>O <code>Decimal</code> padr\u00e3o do Python.</li> <li>Em requisi\u00e7\u00f5es e respostas ser\u00e1 representado como um <code>float</code>.</li> </ul> </li> <li>Voc\u00ea pode checar todos os tipos de dados v\u00e1lidos do Pydantic aqui: Tipos de dados do Pydantic.</li> </ul>"},{"location":"tutorial/extra-data-types/#exemplo","title":"Exemplo","text":"<p>Aqui est\u00e1 um exemplo de opera\u00e7\u00e3o de rota com par\u00e2metros utilizando-se de alguns dos tipos acima.</p> Python 3.8+ - non-Annotated <pre><code>from datetime import datetime, time, timedelta\nfrom typing import Union\nfrom uuid import UUID\n\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: datetime = Body(),\n    end_datetime: datetime = Body(),\n    process_after: timedelta = Body(),\n    repeat_at: Union[time, None] = Body(default=None),\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from datetime import datetime, time, timedelta\nfrom typing import Annotated\nfrom uuid import UUID\n\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: Annotated[datetime, Body()],\n    end_datetime: Annotated[datetime, Body()],\n    process_after: Annotated[timedelta, Body()],\n    repeat_at: Annotated[time | None, Body()] = None,\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n</code></pre> <pre><code>from datetime import datetime, time, timedelta\nfrom typing import Annotated, Union\nfrom uuid import UUID\n\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: Annotated[datetime, Body()],\n    end_datetime: Annotated[datetime, Body()],\n    process_after: Annotated[timedelta, Body()],\n    repeat_at: Annotated[Union[time, None], Body()] = None,\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n</code></pre> <pre><code>from datetime import datetime, time, timedelta\nfrom typing import Union\nfrom uuid import UUID\n\nfrom readyapi import Body, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: Annotated[datetime, Body()],\n    end_datetime: Annotated[datetime, Body()],\n    process_after: Annotated[timedelta, Body()],\n    repeat_at: Annotated[Union[time, None], Body()] = None,\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, time, timedelta\nfrom uuid import UUID\n\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: datetime = Body(),\n    end_datetime: datetime = Body(),\n    process_after: timedelta = Body(),\n    repeat_at: time | None = Body(default=None),\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n</code></pre> <p>Note que os par\u00e2metros dentro da fun\u00e7\u00e3o tem seu tipo de dados natural, e voc\u00ea pode, por exemplo, realizar manipula\u00e7\u00f5es normais de data, como:</p> Python 3.8+ - non-Annotated <pre><code>from datetime import datetime, time, timedelta\nfrom typing import Union\nfrom uuid import UUID\n\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: datetime = Body(),\n    end_datetime: datetime = Body(),\n    process_after: timedelta = Body(),\n    repeat_at: Union[time, None] = Body(default=None),\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from datetime import datetime, time, timedelta\nfrom typing import Annotated\nfrom uuid import UUID\n\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: Annotated[datetime, Body()],\n    end_datetime: Annotated[datetime, Body()],\n    process_after: Annotated[timedelta, Body()],\n    repeat_at: Annotated[time | None, Body()] = None,\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n</code></pre> <pre><code>from datetime import datetime, time, timedelta\nfrom typing import Annotated, Union\nfrom uuid import UUID\n\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: Annotated[datetime, Body()],\n    end_datetime: Annotated[datetime, Body()],\n    process_after: Annotated[timedelta, Body()],\n    repeat_at: Annotated[Union[time, None], Body()] = None,\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n</code></pre> <pre><code>from datetime import datetime, time, timedelta\nfrom typing import Union\nfrom uuid import UUID\n\nfrom readyapi import Body, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: Annotated[datetime, Body()],\n    end_datetime: Annotated[datetime, Body()],\n    process_after: Annotated[timedelta, Body()],\n    repeat_at: Annotated[Union[time, None], Body()] = None,\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, time, timedelta\nfrom uuid import UUID\n\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: datetime = Body(),\n    end_datetime: datetime = Body(),\n    process_after: timedelta = Body(),\n    repeat_at: time | None = Body(default=None),\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n</code></pre>"},{"location":"tutorial/extra-models/","title":"Modelos Adicionais","text":"<p>Continuando com o exemplo anterior, ser\u00e1 comum ter mais de um modelo relacionado.</p> <p>Isso \u00e9 especialmente o caso para modelos de usu\u00e1rios, porque:</p> <ul> <li>O modelo de entrada precisa ser capaz de ter uma senha.</li> <li>O modelo de sa\u00edda n\u00e3o deve ter uma senha.</li> <li>O modelo de banco de dados provavelmente precisaria ter uma senha criptografada.</li> </ul> <p>Danger</p> <p>Nunca armazene senhas em texto simples dos usu\u00e1rios. Sempre armazene uma \"hash segura\" que voc\u00ea pode verificar depois.</p> <p>Se n\u00e3o souber, voc\u00ea aprender\u00e1 o que \u00e9 uma \"senha hash\" nos cap\u00edtulos de seguran\u00e7a.</p>"},{"location":"tutorial/extra-models/#multiplos-modelos","title":"M\u00faltiplos modelos","text":"<p>Aqui est\u00e1 uma ideia geral de como os modelos poderiam parecer com seus campos de senha e os lugares onde s\u00e3o usados:</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserInDB(BaseModel):\n    username: str\n    hashed_password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\ndef fake_password_hasher(raw_password: str):\n    return \"supersecret\" + raw_password\n\n\ndef fake_save_user(user_in: UserIn):\n    hashed_password = fake_password_hasher(user_in.password)\n    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)\n    print(\"User saved! ..not really\")\n    return user_in_db\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user_in: UserIn):\n    user_saved = fake_save_user(user_in)\n    return user_saved\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+ <pre><code>from pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserInDB(BaseModel):\n    username: str\n    hashed_password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\ndef fake_password_hasher(raw_password: str):\n    return \"supersecret\" + raw_password\n\n\ndef fake_save_user(user_in: UserIn):\n    hashed_password = fake_password_hasher(user_in.password)\n    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)\n    print(\"User saved! ..not really\")\n    return user_in_db\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user_in: UserIn):\n    user_saved = fake_save_user(user_in)\n    return user_saved\n</code></pre>"},{"location":"tutorial/extra-models/#sobre-user_indict","title":"Sobre <code>**user_in.dict()</code>","text":""},{"location":"tutorial/extra-models/#o-dict-do-pydantic","title":"O <code>.dict()</code> do Pydantic","text":"<p><code>user_in</code> \u00e9 um modelo Pydantic da classe <code>UserIn</code>.</p> <p>Os modelos Pydantic possuem um m\u00e9todo <code>.dict()</code> que retorna um <code>dict</code> com os dados do modelo.</p> <p>Ent\u00e3o, se criarmos um objeto Pydantic <code>user_in</code> como:</p> <pre><code>user_in = UserIn(username=\"john\", password=\"secret\", email=\"john.doe@example.com\")\n</code></pre> <p>e depois chamarmos:</p> <pre><code>user_dict = user_in.dict()\n</code></pre> <p>agora temos um <code>dict</code> com os dados na vari\u00e1vel <code>user_dict</code> (\u00e9 um <code>dict</code> em vez de um objeto de modelo Pydantic).</p> <p>E se chamarmos:</p> <pre><code>print(user_dict)\n</code></pre> <p>ter\u00edamos um <code>dict</code> Python com:</p> <pre><code>{\n    'username': 'john',\n    'password': 'secret',\n    'email': 'john.doe@example.com',\n    'full_name': None,\n}\n</code></pre>"},{"location":"tutorial/extra-models/#desembrulhando-um-dict","title":"Desembrulhando um <code>dict</code>","text":"<p>Se tomarmos um <code>dict</code> como <code>user_dict</code> e passarmos para uma fun\u00e7\u00e3o (ou classe) com <code>**user_dict</code>, o Python ir\u00e1 \"desembrulh\u00e1-lo\". Ele passar\u00e1 as chaves e valores do <code>user_dict</code> diretamente como argumentos chave-valor.</p> <p>Ent\u00e3o, continuando com o <code>user_dict</code> acima, escrevendo:</p> <pre><code>UserInDB(**user_dict)\n</code></pre> <p>Resultaria em algo equivalente a:</p> <pre><code>UserInDB(\n    username=\"john\",\n    password=\"secret\",\n    email=\"john.doe@example.com\",\n    full_name=None,\n)\n</code></pre> <p>Ou mais exatamente, usando <code>user_dict</code> diretamente, com qualquer conte\u00fado que ele possa ter no futuro:</p> <pre><code>UserInDB(\n    username = user_dict[\"username\"],\n    password = user_dict[\"password\"],\n    email = user_dict[\"email\"],\n    full_name = user_dict[\"full_name\"],\n)\n</code></pre>"},{"location":"tutorial/extra-models/#um-modelo-pydantic-a-partir-do-conteudo-de-outro","title":"Um modelo Pydantic a partir do conte\u00fado de outro","text":"<p>Como no exemplo acima, obtivemos o <code>user_dict</code> a partir do <code>user_in.dict()</code>, este c\u00f3digo:</p> <pre><code>user_dict = user_in.dict()\nUserInDB(**user_dict)\n</code></pre> <p>seria equivalente a:</p> <pre><code>UserInDB(**user_in.dict())\n</code></pre> <p>...porque <code>user_in.dict()</code> \u00e9 um <code>dict</code>, e depois fazemos o Python \"desembrulh\u00e1-lo\" passando-o para UserInDB precedido por <code>**</code>.</p> <p>Ent\u00e3o, obtemos um modelo Pydantic a partir dos dados em outro modelo Pydantic.</p>"},{"location":"tutorial/extra-models/#desembrulhando-um-dict-e-palavras-chave-extras","title":"Desembrulhando um <code>dict</code> e palavras-chave extras","text":"<p>E, ent\u00e3o, adicionando o argumento de palavra-chave extra <code>hashed_password=hashed_password</code>, como em:</p> <pre><code>UserInDB(**user_in.dict(), hashed_password=hashed_password)\n</code></pre> <p>...acaba sendo como:</p> <pre><code>UserInDB(\n    username = user_dict[\"username\"],\n    password = user_dict[\"password\"],\n    email = user_dict[\"email\"],\n    full_name = user_dict[\"full_name\"],\n    hashed_password = hashed_password,\n)\n</code></pre> <p>Warning</p> <p>As fun\u00e7\u00f5es adicionais de suporte s\u00e3o apenas para demonstra\u00e7\u00e3o de um fluxo poss\u00edvel dos dados, mas \u00e9 claro que elas n\u00e3o fornecem seguran\u00e7a real.</p>"},{"location":"tutorial/extra-models/#reduzir-duplicacao","title":"Reduzir duplica\u00e7\u00e3o","text":"<p>Reduzir a duplica\u00e7\u00e3o de c\u00f3digo \u00e9 uma das ideias principais no ReadyAPI.</p> <p>A duplica\u00e7\u00e3o de c\u00f3digo aumenta as chances de bugs, problemas de seguran\u00e7a, problemas de desincroniza\u00e7\u00e3o de c\u00f3digo (quando voc\u00ea atualiza em um lugar, mas n\u00e3o em outros), etc.</p> <p>E esses modelos est\u00e3o compartilhando muitos dos dados e duplicando nomes e tipos de atributos.</p> <p>N\u00f3s poder\u00edamos fazer melhor.</p> <p>Podemos declarar um modelo <code>UserBase</code> que serve como base para nossos outros modelos. E ent\u00e3o podemos fazer subclasses desse modelo que herdam seus atributos (declara\u00e7\u00f5es de tipo, valida\u00e7\u00e3o, etc.).</p> <p>Toda convers\u00e3o de dados, valida\u00e7\u00e3o, documenta\u00e7\u00e3o, etc. ainda funcionar\u00e1 normalmente.</p> <p>Dessa forma, podemos declarar apenas as diferen\u00e7as entre os modelos (com <code>password</code> em texto claro, com <code>hashed_password</code> e sem senha):</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserBase(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserIn(UserBase):\n    password: str\n\n\nclass UserOut(UserBase):\n    pass\n\n\nclass UserInDB(UserBase):\n    hashed_password: str\n\n\ndef fake_password_hasher(raw_password: str):\n    return \"supersecret\" + raw_password\n\n\ndef fake_save_user(user_in: UserIn):\n    hashed_password = fake_password_hasher(user_in.password)\n    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)\n    print(\"User saved! ..not really\")\n    return user_in_db\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user_in: UserIn):\n    user_saved = fake_save_user(user_in)\n    return user_saved\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+ <pre><code>from pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserBase(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserIn(UserBase):\n    password: str\n\n\nclass UserOut(UserBase):\n    pass\n\n\nclass UserInDB(UserBase):\n    hashed_password: str\n\n\ndef fake_password_hasher(raw_password: str):\n    return \"supersecret\" + raw_password\n\n\ndef fake_save_user(user_in: UserIn):\n    hashed_password = fake_password_hasher(user_in.password)\n    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)\n    print(\"User saved! ..not really\")\n    return user_in_db\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user_in: UserIn):\n    user_saved = fake_save_user(user_in)\n    return user_saved\n</code></pre>"},{"location":"tutorial/extra-models/#union-ou-anyof","title":"<code>Union</code> ou <code>anyOf</code>","text":"<p>Voc\u00ea pode declarar uma resposta como o <code>Union</code> de dois tipos, o que significa que a resposta seria qualquer um dos dois.</p> <p>Isso ser\u00e1 definido no OpenAPI com <code>anyOf</code>.</p> <p>Para fazer isso, use a dica de tipo padr\u00e3o do Python <code>typing.Union</code>:</p> <p>Note</p> <p>Ao definir um <code>Union</code>, inclua o tipo mais espec\u00edfico primeiro, seguido pelo tipo menos espec\u00edfico. No exemplo abaixo, o tipo mais espec\u00edfico <code>PlaneItem</code> vem antes de <code>CarItem</code> em <code>Union[PlaneItem, CarItem]</code>.</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass BaseItem(BaseModel):\n    description: str\n    type: str\n\n\nclass CarItem(BaseItem):\n    type: str = \"car\"\n\n\nclass PlaneItem(BaseItem):\n    type: str = \"plane\"\n    size: int\n\n\nitems = {\n    \"item1\": {\"description\": \"All my friends drive a low rider\", \"type\": \"car\"},\n    \"item2\": {\n        \"description\": \"Music is my aeroplane, it's my aeroplane\",\n        \"type\": \"plane\",\n        \"size\": 5,\n    },\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Union[PlaneItem, CarItem])\nasync def read_item(item_id: str):\n    return items[item_id]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass BaseItem(BaseModel):\n    description: str\n    type: str\n\n\nclass CarItem(BaseItem):\n    type: str = \"car\"\n\n\nclass PlaneItem(BaseItem):\n    type: str = \"plane\"\n    size: int\n\n\nitems = {\n    \"item1\": {\"description\": \"All my friends drive a low rider\", \"type\": \"car\"},\n    \"item2\": {\n        \"description\": \"Music is my aeroplane, it's my aeroplane\",\n        \"type\": \"plane\",\n        \"size\": 5,\n    },\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Union[PlaneItem, CarItem])\nasync def read_item(item_id: str):\n    return items[item_id]\n</code></pre>"},{"location":"tutorial/extra-models/#union-no-python-310","title":"<code>Union</code> no Python 3.10","text":"<p>Neste exemplo, passamos <code>Union[PlaneItem, CarItem]</code> como o valor do argumento <code>response_model</code>.</p> <p>Dado que estamos passando-o como um valor para um argumento em vez de coloc\u00e1-lo em uma anota\u00e7\u00e3o de tipo, precisamos usar <code>Union</code> mesmo no Python 3.10.</p> <p>Se estivesse em uma anota\u00e7\u00e3o de tipo, poder\u00edamos ter usado a barra vertical, como:</p> <pre><code>some_variable: PlaneItem | CarItem\n</code></pre> <p>Mas se colocarmos isso em <code>response_model=PlaneItem | CarItem</code> ter\u00edamos um erro, pois o Python tentaria executar uma opera\u00e7\u00e3o inv\u00e1lida entre <code>PlaneItem</code> e <code>CarItem</code> em vez de interpretar isso como uma anota\u00e7\u00e3o de tipo.</p>"},{"location":"tutorial/extra-models/#lista-de-modelos","title":"Lista de modelos","text":"<p>Da mesma forma, voc\u00ea pode declarar respostas de listas de objetos.</p> <p>Para isso, use o padr\u00e3o Python <code>typing.List</code> (ou simplesmente <code>list</code> no Python 3.9 e superior):</p> Python 3.8+ <pre><code>from typing import List\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str\n\n\nitems = [\n    {\"name\": \"Foo\", \"description\": \"There comes my hero\"},\n    {\"name\": \"Red\", \"description\": \"It's my aeroplane\"},\n]\n\n\n@app.get(\"/items/\", response_model=List[Item])\nasync def read_items():\n    return items\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str\n\n\nitems = [\n    {\"name\": \"Foo\", \"description\": \"There comes my hero\"},\n    {\"name\": \"Red\", \"description\": \"It's my aeroplane\"},\n]\n\n\n@app.get(\"/items/\", response_model=list[Item])\nasync def read_items():\n    return items\n</code></pre>"},{"location":"tutorial/extra-models/#resposta-com-dict-arbitrario","title":"Resposta com <code>dict</code> arbitr\u00e1rio","text":"<p>Voc\u00ea tamb\u00e9m pode declarar uma resposta usando um simples <code>dict</code> arbitr\u00e1rio, declarando apenas o tipo das chaves e valores, sem usar um modelo Pydantic.</p> <p>Isso \u00e9 \u00fatil se voc\u00ea n\u00e3o souber os nomes de campo / atributo v\u00e1lidos (que seriam necess\u00e1rios para um modelo Pydantic) antecipadamente.</p> <p>Neste caso, voc\u00ea pode usar <code>typing.Dict</code> (ou simplesmente dict no Python 3.9 e superior):</p> Python 3.8+ <pre><code>from typing import Dict\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/keyword-weights/\", response_model=Dict[str, float])\nasync def read_keyword_weights():\n    return {\"foo\": 2.3, \"bar\": 3.4}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/keyword-weights/\", response_model=dict[str, float])\nasync def read_keyword_weights():\n    return {\"foo\": 2.3, \"bar\": 3.4}\n</code></pre>"},{"location":"tutorial/extra-models/#em-resumo","title":"Em resumo","text":"<p>Use v\u00e1rios modelos Pydantic e herde livremente para cada caso.</p> <p>N\u00e3o \u00e9 necess\u00e1rio ter um \u00fanico modelo de dados por entidade se essa entidade precisar ter diferentes \"estados\". No caso da \"entidade\" de usu\u00e1rio com um estado que inclui <code>password</code>, <code>password_hash</code> e sem senha.</p>"},{"location":"tutorial/first-steps/","title":"Primeiros Passos","text":"<p>O arquivo ReadyAPI mais simples pode se parecer com:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>Copie o conte\u00fado para um arquivo <code>main.py</code>.</p> <p>Execute o servidor:</p> <pre><code>$ &lt;font color=\"#4E9A06\"&gt;readyapi&lt;/font&gt; dev &lt;u style=\"text-decoration-style:solid\"&gt;main.py&lt;/u&gt;\n\n  &lt;span style=\"background-color:#009485\"&gt;&lt;font color=\"#D3D7CF\"&gt; ReadyAPI &lt;/font&gt;&lt;/span&gt;  Starting development server \ud83d\ude80\n\n             Searching for package file structure from directories\n             with &lt;font color=\"#3465A4\"&gt;__init__.py&lt;/font&gt; files\n             Importing from &lt;font color=\"#75507B\"&gt;/home/user/code/&lt;/font&gt;&lt;font color=\"#AD7FA8\"&gt;awesomeapp&lt;/font&gt;\n\n   &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; module &lt;/font&gt;&lt;/span&gt;  \ud83d\udc0d main.py\n\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; code &lt;/font&gt;&lt;/span&gt;  Importing the ReadyAPI app object from the module with\n             the following code:\n\n             &lt;u style=\"text-decoration-style:solid\"&gt;from &lt;/u&gt;&lt;u style=\"text-decoration-style:solid\"&gt;&lt;b&gt;main&lt;/b&gt;&lt;/u&gt;&lt;u style=\"text-decoration-style:solid\"&gt; import &lt;/u&gt;&lt;u style=\"text-decoration-style:solid\"&gt;&lt;b&gt;app&lt;/b&gt;&lt;/u&gt;\n\n      &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; app &lt;/font&gt;&lt;/span&gt;  Using import string: &lt;font color=\"#3465A4\"&gt;main:app&lt;/font&gt;\n\n   &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; server &lt;/font&gt;&lt;/span&gt;  Server started at &lt;font color=\"#729FCF\"&gt;&lt;u style=\"text-decoration-style:solid\"&gt;http://127.0.0.1:8000&lt;/u&gt;&lt;/font&gt;\n   &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; server &lt;/font&gt;&lt;/span&gt;  Documentation at &lt;font color=\"#729FCF\"&gt;&lt;u style=\"text-decoration-style:solid\"&gt;http://127.0.0.1:8000/docs&lt;/u&gt;&lt;/font&gt;\n\n      &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; tip &lt;/font&gt;&lt;/span&gt;  Running in development mode, for production use:\n             &lt;b&gt;readyapi run&lt;/b&gt;\n\n             Logs:\n\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; INFO &lt;/font&gt;&lt;/span&gt;  Will watch for changes in these directories:\n             &lt;b&gt;[&lt;/b&gt;&lt;font color=\"#4E9A06\"&gt;&amp;apos;/home/user/code/awesomeapp&amp;apos;&lt;/font&gt;&lt;b&gt;]&lt;/b&gt;\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; INFO &lt;/font&gt;&lt;/span&gt;  Uvicorn running on &lt;font color=\"#729FCF\"&gt;&lt;u style=\"text-decoration-style:solid\"&gt;http://127.0.0.1:8000&lt;/u&gt;&lt;/font&gt; &lt;b&gt;(&lt;/b&gt;Press CTRL+C\n             to quit&lt;b&gt;)&lt;/b&gt;\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; INFO &lt;/font&gt;&lt;/span&gt;  Started reloader process &lt;b&gt;[&lt;/b&gt;&lt;font color=\"#34E2E2\"&gt;&lt;b&gt;383138&lt;/b&gt;&lt;/font&gt;&lt;b&gt;]&lt;/b&gt; using WatchFiles\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; INFO &lt;/font&gt;&lt;/span&gt;  Started server process &lt;b&gt;[&lt;/b&gt;&lt;font color=\"#34E2E2\"&gt;&lt;b&gt;383153&lt;/b&gt;&lt;/font&gt;&lt;b&gt;]&lt;/b&gt;\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; INFO &lt;/font&gt;&lt;/span&gt;  Waiting for application startup.\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; INFO &lt;/font&gt;&lt;/span&gt;  Application startup complete.\n</code></pre> <p>Na sa\u00edda, temos:</p> <pre><code>INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>Essa linha mostra a URL onde a sua aplica\u00e7\u00e3o est\u00e1 sendo servida, que nesse caso \u00e9 a sua m\u00e1quina local.</p>"},{"location":"tutorial/first-steps/#confira","title":"Confira","text":"<p>Abra o seu navegador em http://127.0.0.1:8000.</p> <p>Voc\u00ea ver\u00e1 essa resposta em JSON:</p> <pre><code>{\"message\": \"Hello World\"}\n</code></pre>"},{"location":"tutorial/first-steps/#documentacao-interativa-de-apis","title":"Documenta\u00e7\u00e3o Interativa de APIs","text":"<p>Agora v\u00e1 para http://127.0.0.1:8000/docs.</p> <p>Voc\u00ea ver\u00e1 a documenta\u00e7\u00e3o interativa autom\u00e1tica da API (fornecida por Swagger UI):</p> <p></p>"},{"location":"tutorial/first-steps/#documentacao-alternativa-de-apis","title":"Documenta\u00e7\u00e3o Alternativa de APIs","text":"<p>E agora, v\u00e1 para http://127.0.0.1:8000/redoc.</p> <p>Voc\u00ea ver\u00e1 a documenta\u00e7\u00e3o alternativa autom\u00e1tica (fornecida por ReDoc):</p> <p></p>"},{"location":"tutorial/first-steps/#openapi","title":"OpenAPI","text":"<p>O ReadyAPI gera um \"schema\" com toda a sua API usando o padr\u00e3o OpenAPI para definir APIs.</p>"},{"location":"tutorial/first-steps/#schema","title":"\"Schema\"","text":"<p>Um \"schema\" \u00e9 uma defini\u00e7\u00e3o ou descri\u00e7\u00e3o de algo. N\u00e3o o c\u00f3digo que o implementa, mas apenas uma descri\u00e7\u00e3o abstrata.</p>"},{"location":"tutorial/first-steps/#api-schema","title":"API \"schema\"","text":"<p>Nesse caso, OpenAPI \u00e9 uma especifica\u00e7\u00e3o que determina como definir um schema da sua API.</p> <p>Esta defini\u00e7\u00e3o de schema inclui as rotas da sua API, os par\u00e2metros poss\u00edveis que elas usam, etc.</p>"},{"location":"tutorial/first-steps/#schema-de-dados","title":"\"Schema\" de dados","text":"<p>O termo \"schema\" tamb\u00e9m pode se referir \u00e0 forma de alguns dados, como um conte\u00fado JSON.</p> <p>Nesse caso, significaria os atributos JSON e os tipos de dados que eles possuem, etc.</p>"},{"location":"tutorial/first-steps/#openapi-e-json-schema","title":"OpenAPI e JSON Schema","text":"<p>OpenAPI define um schema de API para sua API. E esse schema inclui defini\u00e7\u00f5es (ou \"schemas\") dos dados enviados e recebidos por sua API usando JSON Schema, o padr\u00e3o para schemas de dados JSON.</p>"},{"location":"tutorial/first-steps/#verifique-o-openapijson","title":"Verifique o <code>openapi.json</code>","text":"<p>Se voc\u00ea est\u00e1 curioso(a) sobre a apar\u00eancia do schema bruto OpenAPI, o ReadyAPI gera automaticamente um JSON (schema) com as descri\u00e7\u00f5es de toda a sua API.</p> <p>Voc\u00ea pode ver isso diretamente em: http://127.0.0.1:8000/openapi.json.</p> <p>Ele mostrar\u00e1 um JSON come\u00e7ando com algo como:</p> <pre><code>{\n    \"openapi\": \"3.0.2\",\n    \"info\": {\n        \"title\": \"ReadyAPI\",\n        \"version\": \"0.1.0\"\n    },\n    \"paths\": {\n        \"/items/\": {\n            \"get\": {\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Successful Response\",\n                        \"content\": {\n                            \"application/json\": {\n\n\n\n...\n</code></pre>"},{"location":"tutorial/first-steps/#para-que-serve-o-openapi","title":"Para que serve o OpenAPI","text":"<p>O schema OpenAPI \u00e9 o que possibilita os dois sistemas de documenta\u00e7\u00e3o interativos mostrados.</p> <p>E existem dezenas de alternativas, todas baseadas em OpenAPI. Voc\u00ea pode facilmente adicionar qualquer uma dessas alternativas \u00e0 sua aplica\u00e7\u00e3o criada com ReadyAPI.</p> <p>Voc\u00ea tamb\u00e9m pode us\u00e1-lo para gerar c\u00f3digo automaticamente para clientes que se comunicam com sua API. Por exemplo, aplicativos front-end, m\u00f3veis ou IoT.</p>"},{"location":"tutorial/first-steps/#recapitulando-passo-a-passo","title":"Recapitulando, passo a passo","text":""},{"location":"tutorial/first-steps/#passo-1-importe-readyapi","title":"Passo 1: importe <code>ReadyAPI</code>","text":"Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p><code>ReadyAPI</code> \u00e9 uma classe Python que fornece todas as funcionalidades para sua API.</p> <p>Detalhes t\u00e9cnicos</p> <p><code>ReadyAPI</code> \u00e9 uma classe que herda diretamente de <code>Starlette</code>.</p> <p>Voc\u00ea pode usar todas as funcionalidades do Starlette com <code>ReadyAPI</code> tamb\u00e9m.</p>"},{"location":"tutorial/first-steps/#passo-2-crie-uma-instancia-de-readyapi","title":"Passo 2: crie uma \"inst\u00e2ncia\" de <code>ReadyAPI</code>","text":"Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>Aqui, a vari\u00e1vel <code>app</code> ser\u00e1 uma \"inst\u00e2ncia\" da classe <code>ReadyAPI</code>.</p> <p>Este ser\u00e1 o principal ponto de intera\u00e7\u00e3o para criar toda a sua API.</p>"},{"location":"tutorial/first-steps/#passo-3-crie-uma-rota","title":"Passo 3: crie uma rota","text":""},{"location":"tutorial/first-steps/#rota","title":"Rota","text":"<p>\"Rota\" aqui se refere \u00e0 \u00faltima parte da URL, come\u00e7ando do primeiro <code>/</code>.</p> <p>Ent\u00e3o, em uma URL como:</p> <pre><code>https://example.com/items/foo\n</code></pre> <p>...a rota seria:</p> <pre><code>/items/foo\n</code></pre> <p>Informa\u00e7\u00e3o</p> <p>Uma \"rota\" tamb\u00e9m \u00e9 comumente chamada de \"endpoint\".</p> <p>Ao construir uma API, a \"rota\" \u00e9 a principal forma de separar \"preocupa\u00e7\u00f5es\" e \"recursos\".</p>"},{"location":"tutorial/first-steps/#operacao","title":"Opera\u00e7\u00e3o","text":"<p>\"Opera\u00e7\u00e3o\" aqui se refere a um dos \"m\u00e9todos\" HTTP.</p> <p>Um dos:</p> <ul> <li><code>POST</code></li> <li><code>GET</code></li> <li><code>PUT</code></li> <li><code>DELETE</code></li> </ul> <p>...e os mais ex\u00f3ticos:</p> <ul> <li><code>OPTIONS</code></li> <li><code>HEAD</code></li> <li><code>PATCH</code></li> <li><code>TRACE</code></li> </ul> <p>No protocolo HTTP, voc\u00ea pode se comunicar com cada rota usando um (ou mais) desses \"m\u00e9todos\".</p> <p>Ao construir APIs, voc\u00ea normalmente usa esses m\u00e9todos HTTP para executar uma a\u00e7\u00e3o espec\u00edfica.</p> <p>Normalmente voc\u00ea usa:</p> <ul> <li><code>POST</code>: para criar dados.</li> <li><code>GET</code>: para ler dados.</li> <li><code>PUT</code>: para atualizar dados.</li> <li><code>DELETE</code>: para deletar dados.</li> </ul> <p>Portanto, no OpenAPI, cada um dos m\u00e9todos HTTP \u00e9 chamado de \"opera\u00e7\u00e3o\".</p> <p>Vamos cham\u00e1-los de \"opera\u00e7\u00f5es\" tamb\u00e9m.</p>"},{"location":"tutorial/first-steps/#defina-um-decorador-de-rota","title":"Defina um decorador de rota","text":"Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>O <code>@app.get(\"/\")</code> diz ao ReadyAPI que a fun\u00e7\u00e3o logo abaixo \u00e9 respons\u00e1vel por tratar as requisi\u00e7\u00f5es que v\u00e3o para:</p> <ul> <li>a rota <code>/</code></li> <li>usando o  operador <code>get</code></li> </ul> <p><code>@decorador</code></p> <p>Essa sintaxe <code>@alguma_coisa</code> em Python \u00e9 chamada de \"decorador\".</p> <p>Voc\u00ea o coloca em cima de uma fun\u00e7\u00e3o. Como um chap\u00e9u decorativo (acho que \u00e9 da\u00ed que vem o termo).</p> <p>Um \"decorador\" pega a fun\u00e7\u00e3o abaixo e faz algo com ela.</p> <p>Em nosso caso, este decorador informa ao ReadyAPI que a fun\u00e7\u00e3o abaixo corresponde a rota <code>/</code> com uma opera\u00e7\u00e3o <code>get</code>.</p> <p>\u00c9 o \"decorador de rota\".</p> <p>Voc\u00ea tamb\u00e9m pode usar as outras opera\u00e7\u00f5es:</p> <ul> <li><code>@app.post()</code></li> <li><code>@app.put()</code></li> <li><code>@app.delete()</code></li> </ul> <p>E os mais ex\u00f3ticos:</p> <ul> <li><code>@app.options()</code></li> <li><code>@app.head()</code></li> <li><code>@app.patch()</code></li> <li><code>@app.trace()</code></li> </ul> <p>Dica</p> <p>Voc\u00ea est\u00e1 livre para usar cada opera\u00e7\u00e3o (m\u00e9todo HTTP) como desejar.</p> <p>O ReadyAPI n\u00e3o imp\u00f5e nenhum significado espec\u00edfico.</p> <p>As informa\u00e7\u00f5es aqui s\u00e3o apresentadas como uma orienta\u00e7\u00e3o, n\u00e3o uma exig\u00eancia.</p> <p>Por exemplo, ao usar GraphQL, voc\u00ea normalmente executa todas as a\u00e7\u00f5es usando apenas opera\u00e7\u00f5es <code>POST</code>.</p>"},{"location":"tutorial/first-steps/#passo-4-defina-uma-funcao-de-rota","title":"Passo 4: defina uma fun\u00e7\u00e3o de rota","text":"<p>Esta \u00e9 a nossa \"fun\u00e7\u00e3o de rota\":</p> <ul> <li>rota: \u00e9 <code>/</code>.</li> <li>opera\u00e7\u00e3o: \u00e9 <code>get</code>.</li> <li>fun\u00e7\u00e3o: \u00e9 a fun\u00e7\u00e3o abaixo do \"decorador\" (abaixo do <code>@app.get(\"/\")</code>).</li> </ul> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>Esta \u00e9 uma fun\u00e7\u00e3o Python.</p> <p>Ela ser\u00e1 chamada pelo ReadyAPI sempre que receber uma requisi\u00e7\u00e3o para a URL \"<code>/</code>\" usando uma opera\u00e7\u00e3o <code>GET</code>.</p> <p>Neste caso, \u00e9 uma fun\u00e7\u00e3o <code>ass\u00edncrona</code>.</p> <p>Voc\u00ea tamb\u00e9m pode defini-la como uma fun\u00e7\u00e3o normal em vez de <code>async def</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\ndef root():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>Nota</p> <p>Se voc\u00ea n\u00e3o sabe a diferen\u00e7a, verifique o Async: \"Com pressa?\".</p>"},{"location":"tutorial/first-steps/#passo-5-retorne-o-conteudo","title":"Passo 5: retorne o conte\u00fado","text":"Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>Voc\u00ea pode retornar um <code>dict</code>, <code>list</code> e valores singulares como <code>str</code>, <code>int</code>, etc.</p> <p>Voc\u00ea tamb\u00e9m pode devolver modelos Pydantic (voc\u00ea ver\u00e1 mais sobre isso mais tarde).</p> <p>Existem muitos outros objetos e modelos que ser\u00e3o convertidos automaticamente para JSON (incluindo ORMs, etc). Tente usar seus favoritos, \u00e9 altamente prov\u00e1vel que j\u00e1 sejam compat\u00edveis.</p>"},{"location":"tutorial/first-steps/#recapitulando","title":"Recapitulando","text":"<ul> <li>Importe <code>ReadyAPI</code>.</li> <li>Crie uma inst\u00e2ncia do <code>app</code>.</li> <li>Coloque o decorador que define a opera\u00e7\u00e3o (como <code>@app.get(\"/\")</code>).</li> <li>Escreva uma fun\u00e7\u00e3o para a opera\u00e7\u00e3o da rota (como <code>def root(): ...</code>) abaixo.</li> <li>Execute o servidor de desenvolvimento (como <code>uvicorn main:app --reload</code>).</li> </ul>"},{"location":"tutorial/handling-errors/","title":"Manipula\u00e7\u00e3o de erros","text":"<p>H\u00e1 diversas situa\u00e7\u00f5es em que voc\u00ea precisa notificar um erro a um cliente que est\u00e1 utilizando a sua API.</p> <p>Esse cliente pode ser um browser com um frontend, o c\u00f3digo de outra pessoa, um dispositivo IoT, etc.</p> <p>Pode ser que voc\u00ea precise comunicar ao cliente que:</p> <ul> <li>O cliente n\u00e3o tem direitos para realizar aquela opera\u00e7\u00e3o.</li> <li>O cliente n\u00e3o tem acesso aquele recurso.</li> <li>O item que o cliente est\u00e1 tentando acessar n\u00e3o existe.</li> <li>etc.</li> </ul> <p>Nesses casos, voc\u00ea normalmente retornaria um HTTP status code pr\u00f3ximo ao status code na faixa do status code 400 (do 400 ao 499).</p> <p>Isso \u00e9 bastante similar ao caso do HTTP status code 200 (do 200 ao 299). Esses \"200\" status codes significam que, de algum modo, houve sucesso na requisi\u00e7\u00e3o.</p> <p>Os status codes na faixa dos 400 significam que houve um erro por parte do cliente.</p> <p>Voc\u00ea se lembra de todos aqueles erros (e piadas) a respeito do \"404 Not Found\"?</p>"},{"location":"tutorial/handling-errors/#use-o-httpexception","title":"Use o <code>HTTPException</code>","text":"<p>Para retornar ao cliente responses HTTP com erros, use o <code>HTTPException</code>.</p>"},{"location":"tutorial/handling-errors/#import-httpexception","title":"Import <code>HTTPException</code>","text":"Python 3.8+ <pre><code>from readyapi import HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\nitems = {\"foo\": \"The Foo Wrestlers\"}\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str):\n    if item_id not in items:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"item\": items[item_id]}\n</code></pre>"},{"location":"tutorial/handling-errors/#lance-o-httpexception-no-seu-codigo","title":"Lance o <code>HTTPException</code> no seu c\u00f3digo.","text":"<p><code>HTTPException</code>, ao fundo, nada mais \u00e9 do que a conjun\u00e7\u00e3o entre uma exce\u00e7\u00e3o comum do Python e informa\u00e7\u00f5es adicionais relevantes para APIs.</p> <p>E porque \u00e9 uma exce\u00e7\u00e3o do Python, voc\u00ea n\u00e3o retorna (return) o <code>HTTPException</code>, voc\u00ea lan\u00e7a o (raise) no seu c\u00f3digo.</p> <p>Isso tamb\u00e9m significa que, se voc\u00ea est\u00e1 escrevendo uma fun\u00e7\u00e3o de utilidade, a qual voc\u00ea est\u00e1 chamando dentro da sua fun\u00e7\u00e3o de opera\u00e7\u00f5es de caminhos, e voc\u00ea lan\u00e7a o <code>HTTPException</code> dentro da fun\u00e7\u00e3o de utilidade, o resto do seu c\u00f3digo n\u00e3o ser\u00e1 executado dentro da fun\u00e7\u00e3o de opera\u00e7\u00f5es de caminhos. Ao contr\u00e1rio, o <code>HTTPException</code> ir\u00e1 finalizar a requisi\u00e7\u00e3o no mesmo instante e enviar\u00e1 o erro HTTP oriundo do <code>HTTPException</code> para o cliente.</p> <p>O benef\u00edcio de lan\u00e7ar uma exce\u00e7\u00e3o em vez de retornar um valor ficar\u00e1 mais evidente na se\u00e7\u00e3o sobre Depend\u00eancias e Seguran\u00e7a.</p> <p>Neste exemplo, quando o cliente pede, na requisi\u00e7\u00e3o, por um item cujo ID n\u00e3o existe, a exce\u00e7\u00e3o com o status code <code>404</code> \u00e9 lan\u00e7ada:</p> Python 3.8+ <pre><code>from readyapi import HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\nitems = {\"foo\": \"The Foo Wrestlers\"}\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str):\n    if item_id not in items:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"item\": items[item_id]}\n</code></pre>"},{"location":"tutorial/handling-errors/#a-response-resultante","title":"A response resultante","text":"<p>Se o cliente faz uma requisi\u00e7\u00e3o para <code>http://example.com/items/foo</code> (um <code>item_id</code> <code>\"foo\"</code>), esse cliente receber\u00e1 um HTTP status code 200, e uma resposta JSON:</p> <pre><code>{\n  \"item\": \"The Foo Wrestlers\"\n}\n</code></pre> <p>Mas se o cliente faz uma requisi\u00e7\u00e3o para <code>http://example.com/items/bar</code> (ou seja, um n\u00e3o existente <code>item_id \"bar\"</code>), esse cliente receber\u00e1 um HTTP status code 404 (o erro \"n\u00e3o encontrado\" \u2014 not found error), e uma resposta JSON:</p> <pre><code>{\n  \"detail\": \"Item not found\"\n}\n</code></pre> <p>Dica</p> <p>Quando voc\u00ea lan\u00e7ar um <code>HTTPException</code>, voc\u00ea pode passar qualquer valor convert\u00edvel em JSON como par\u00e2metro de <code>detail</code>, e n\u00e3o apenas <code>str</code>.</p> <p>Voc\u00ea pode passar um <code>dict</code> ou um <code>list</code>, etc. Esses tipos de dados s\u00e3o manipulados automaticamente pelo ReadyAPI e convertidos em JSON.</p>"},{"location":"tutorial/handling-errors/#adicione-headers-customizados","title":"Adicione headers customizados","text":"<p>H\u00e1 certas situa\u00e7\u00f5es em que \u00e9 bastante \u00fatil poder adicionar headers customizados no HTTP error. Exemplo disso seria adicionar headers customizados para tipos de seguran\u00e7a.</p> <p>Voc\u00ea provavelmente n\u00e3o precisar\u00e1 utilizar esses headers diretamente no seu c\u00f3digo.</p> <p>Mas caso voc\u00ea precise, para um cen\u00e1rio mais complexo, voc\u00ea pode adicionar headers customizados:</p> Python 3.8+ <pre><code>from readyapi import HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\nitems = {\"foo\": \"The Foo Wrestlers\"}\n\n\n@app.get(\"/items-header/{item_id}\")\nasync def read_item_header(item_id: str):\n    if item_id not in items:\n        raise HTTPException(\n            status_code=404,\n            detail=\"Item not found\",\n            headers={\"X-Error\": \"There goes my error\"},\n        )\n    return {\"item\": items[item_id]}\n</code></pre>"},{"location":"tutorial/handling-errors/#instalando-manipuladores-de-excecoes-customizados","title":"Instalando manipuladores de exce\u00e7\u00f5es customizados","text":"<p>Voc\u00ea pode adicionar manipuladores de exce\u00e7\u00e3o customizados com a mesma se\u00e7\u00e3o de utilidade de exce\u00e7\u00f5es presentes no Starlette</p> <p>Digamos que voc\u00ea tenha uma exce\u00e7\u00e3o customizada <code>UnicornException</code> que voc\u00ea (ou uma biblioteca que voc\u00ea use) precise lan\u00e7ar (<code>raise</code>).</p> <p>Nesse cen\u00e1rio, se voc\u00ea precisa manipular essa exce\u00e7\u00e3o de modo global com o ReadyAPI, voc\u00ea pode adicionar um manipulador de exce\u00e7\u00e3o customizada com <code>@app.exception_handler()</code>.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Request\nfrom readyapi.responses import JSONResponse\n\n\nclass UnicornException(Exception):\n    def __init__(self, name: str):\n        self.name = name\n\n\napp = ReadyAPI()\n\n\n@app.exception_handler(UnicornException)\nasync def unicorn_exception_handler(request: Request, exc: UnicornException):\n    return JSONResponse(\n        status_code=418,\n        content={\"message\": f\"Oops! {exc.name} did something. There goes a rainbow...\"},\n    )\n\n\n@app.get(\"/unicorns/{name}\")\nasync def read_unicorn(name: str):\n    if name == \"yolo\":\n        raise UnicornException(name=name)\n    return {\"unicorn_name\": name}\n</code></pre> <p>Nesse cen\u00e1rio, se voc\u00ea fizer uma requisi\u00e7\u00e3o para <code>/unicorns/yolo</code>, a opera\u00e7\u00e3o de caminho vai lan\u00e7ar (<code>raise</code>) o <code>UnicornException</code>.</p> <p>Essa exce\u00e7\u00e3o ser\u00e1 manipulada, contudo, pelo <code>unicorn_exception_handler</code>.</p> <p>Dessa forma voc\u00ea receber\u00e1 um erro \"limpo\", com o HTTP status code <code>418</code> e um JSON com o conte\u00fado:</p> <pre><code>{\"message\": \"Oops! yolo did something. There goes a rainbow...\"}\n</code></pre> <p>Detalhes T\u00e9cnicos</p> <p>Voc\u00ea tamb\u00e9m pode usar <code>from starlette.requests import Request</code> and <code>from starlette.responses import JSONResponse</code>.</p> <p>ReadyAPI disponibiliza o mesmo <code>starlette.responses</code> atrav\u00e9s do <code>readyapi.responses</code> por conveni\u00eancia ao desenvolvedor. Contudo, a maior parte das respostas dispon\u00edveis vem diretamente do Starlette. O mesmo acontece com o <code>Request</code>.</p>"},{"location":"tutorial/handling-errors/#sobrescreva-o-manipulador-padrao-de-excecoes","title":"Sobrescreva o manipulador padr\u00e3o de exce\u00e7\u00f5es","text":"<p>ReadyAPI tem alguns manipuladores padr\u00e3o de exce\u00e7\u00f5es.</p> <p>Esses manipuladores s\u00e3o os respons\u00e1veis por retornar o JSON padr\u00e3o de respostas quando voc\u00ea lan\u00e7a (<code>raise</code>) o <code>HTTPException</code> e quando a requisi\u00e7\u00e3o tem dados invalidos.</p> <p>Voc\u00ea pode sobrescrever esses manipuladores de exce\u00e7\u00e3o com os seus pr\u00f3prios manipuladores.</p>"},{"location":"tutorial/handling-errors/#sobrescreva-excecoes-de-validacao-da-requisicao","title":"Sobrescreva exce\u00e7\u00f5es de valida\u00e7\u00e3o da requisi\u00e7\u00e3o","text":"<p>Quando a requisi\u00e7\u00e3o cont\u00e9m dados inv\u00e1lidos, ReadyAPI internamente lan\u00e7a para o <code>RequestValidationError</code>.</p> <p>Para sobrescrev\u00ea-lo, importe o <code>RequestValidationError</code> e use-o com o <code>@app.exception_handler(RequestValidationError)</code> para decorar o manipulador de exce\u00e7\u00f5es.</p> Python 3.8+ <pre><code>from readyapi import HTTPException, ReadyAPI\nfrom readyapi.exceptions import RequestValidationError\nfrom readyapi.responses import PlainTextResponse\nfrom starlette.exceptions import HTTPException as StarletteHTTPException\n\napp = ReadyAPI()\n\n\n@app.exception_handler(StarletteHTTPException)\nasync def http_exception_handler(request, exc):\n    return PlainTextResponse(str(exc.detail), status_code=exc.status_code)\n\n\n@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(request, exc):\n    return PlainTextResponse(str(exc), status_code=400)\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int):\n    if item_id == 3:\n        raise HTTPException(status_code=418, detail=\"Nope! I don't like 3.\")\n    return {\"item_id\": item_id}\n</code></pre> <p>Se voc\u00ea for ao <code>/items/foo</code>, em vez de receber o JSON padr\u00e3o com o erro:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"path\",\n                \"item_id\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}\n</code></pre> <p>voc\u00ea receber\u00e1 a vers\u00e3o em texto:</p> <pre><code>1 validation error\npath -&gt; item_id\n  value is not a valid integer (type=type_error.integer)\n</code></pre>"},{"location":"tutorial/handling-errors/#requestvalidationerror-vs-validationerror","title":"<code>RequestValidationError</code> vs <code>ValidationError</code>","text":"<p>Aviso</p> <p>Voc\u00ea pode pular estes detalhes t\u00e9cnicos caso eles n\u00e3o sejam importantes para voc\u00ea neste momento.</p> <p><code>RequestValidationError</code> \u00e9 uma subclasse do <code>ValidationError</code> existente no Pydantic.</p> <p>ReadyAPI faz uso dele para que voc\u00ea veja o erro no seu log, caso voc\u00ea utilize um modelo de Pydantic em <code>response_model</code>, e seus dados tenham erro.</p> <p>Contudo, o cliente ou usu\u00e1rio n\u00e3o ter\u00e3o acesso a ele. Ao contr\u00e1rio, o cliente receber\u00e1 um \"Internal Server Error\" com o HTTP status code <code>500</code>.</p> <p>E assim deve ser porque seria um bug no seu c\u00f3digo ter o <code>ValidationError</code> do Pydantic na sua response, ou em qualquer outro lugar do seu c\u00f3digo (que n\u00e3o na requisi\u00e7\u00e3o do cliente).</p> <p>E enquanto voc\u00ea conserta o bug, os clientes / usu\u00e1rios n\u00e3o deveriam ter acesso \u00e0s informa\u00e7\u00f5es internas do erro, porque, desse modo, haveria exposi\u00e7\u00e3o de uma vulnerabilidade de seguran\u00e7a.</p> <p>Do mesmo modo, voc\u00ea pode sobreescrever o <code>HTTPException</code>.</p> <p>Por exemplo, voc\u00ea pode querer retornar uma response em plain text ao inv\u00e9s de um JSON para os seguintes erros:</p> Python 3.8+ <pre><code>from readyapi import HTTPException, ReadyAPI\nfrom readyapi.exceptions import RequestValidationError\nfrom readyapi.responses import PlainTextResponse\nfrom starlette.exceptions import HTTPException as StarletteHTTPException\n\napp = ReadyAPI()\n\n\n@app.exception_handler(StarletteHTTPException)\nasync def http_exception_handler(request, exc):\n    return PlainTextResponse(str(exc.detail), status_code=exc.status_code)\n\n\n@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(request, exc):\n    return PlainTextResponse(str(exc), status_code=400)\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int):\n    if item_id == 3:\n        raise HTTPException(status_code=418, detail=\"Nope! I don't like 3.\")\n    return {\"item_id\": item_id}\n</code></pre> <p>Detalhes T\u00e9cnicos</p> <p>Voc\u00ea pode usar <code>from starlette.responses import PlainTextResponse</code>.</p> <p>ReadyAPI disponibiliza o mesmo <code>starlette.responses</code> como <code>readyapi.responses</code>, como conveni\u00eancia a voc\u00ea, desenvolvedor. Contudo, a maior parte das respostas dispon\u00edveis vem diretamente do Starlette.</p>"},{"location":"tutorial/handling-errors/#use-o-body-do-requestvalidationerror","title":"Use o body do <code>RequestValidationError</code>.","text":"<p>O <code>RequestValidationError</code> cont\u00e9m o <code>body</code> que ele recebeu de dados inv\u00e1lidos.</p> <p>Voc\u00ea pode utiliz\u00e1-lo enquanto desenvolve seu app para conectar o body e debug\u00e1-lo, e assim retorn\u00e1-lo ao usu\u00e1rio, etc.</p> <p>Tente enviar um item inv\u00e1lido como este:</p> <pre><code>{\n  \"title\": \"towel\",\n  \"size\": \"XL\"\n}\n</code></pre> <p>Voc\u00ea receber\u00e1 uma response informando-o de que a data \u00e9 inv\u00e1lida, e contendo o body recebido:</p> <pre><code>{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"body\",\n        \"size\"\n      ],\n      \"msg\": \"value is not a valid integer\",\n      \"type\": \"type_error.integer\"\n    }\n  ],\n  \"body\": {\n    \"title\": \"towel\",\n    \"size\": \"XL\"\n  }\n}\n</code></pre>"},{"location":"tutorial/handling-errors/#o-httpexception-do-readyapi-vs-o-httpexception-do-starlette","title":"O <code>HTTPException</code> do ReadyAPI vs o <code>HTTPException</code> do Starlette.","text":"<p>O ReadyAPI tem o seu pr\u00f3prio <code>HTTPException</code>.</p> <p>E a classe de erro <code>HTTPException</code> do ReadyAPI herda da classe de erro do <code>HTTPException</code> do Starlette.</p> <p>A diferen\u00e7a entre os dois \u00e9 a de que o <code>HTTPException</code> do ReadyAPI permite que voc\u00ea adicione headers que ser\u00e3o inclu\u00eddos nas responses.</p> <p>Esses headers s\u00e3o necess\u00e1rios/utilizados internamente pelo OAuth 2.0 e tamb\u00e9m por outras utilidades de seguran\u00e7a.</p> <p>Portanto, voc\u00ea pode continuar lan\u00e7ando o <code>HTTPException</code> do ReadyAPI normalmente no seu c\u00f3digo.</p> <p>Por\u00e9m, quando voc\u00ea registrar um manipulador de exce\u00e7\u00e3o, voc\u00ea deve registr\u00e1-lo atrav\u00e9s do <code>HTTPException</code> do Starlette.</p> <p>Dessa forma, se qualquer parte do c\u00f3digo interno, extens\u00e3o ou plug-in do Starlette lan\u00e7ar o <code>HTTPException</code>, o seu manipulador de exce\u00e7\u00e3o poder\u00e1 capturar esse lan\u00e7amento e trat\u00e1-lo.</p> <pre><code>from starlette.exceptions import HTTPException as StarletteHTTPException\n</code></pre>"},{"location":"tutorial/handling-errors/#re-use-os-manipulares-de-excecao-do-readyapi","title":"Re-use os manipulares de exce\u00e7\u00e3o do ReadyAPI","text":"<p>Se voc\u00ea quer usar a exce\u00e7\u00e3o em conjunto com o mesmo manipulador de exce\u00e7\u00e3o default do ReadyAPI, voc\u00ea pode importar e re-usar esses manipuladores de exce\u00e7\u00e3o do <code>readyapi.exception_handlers</code>:</p> Python 3.8+ <pre><code>from readyapi import HTTPException, ReadyAPI\nfrom readyapi.exception_handlers import (\n    http_exception_handler,\n    request_validation_exception_handler,\n)\nfrom readyapi.exceptions import RequestValidationError\nfrom starlette.exceptions import HTTPException as StarletteHTTPException\n\napp = ReadyAPI()\n\n\n@app.exception_handler(StarletteHTTPException)\nasync def custom_http_exception_handler(request, exc):\n    print(f\"OMG! An HTTP error!: {repr(exc)}\")\n    return await http_exception_handler(request, exc)\n\n\n@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(request, exc):\n    print(f\"OMG! The client sent invalid data!: {exc}\")\n    return await request_validation_exception_handler(request, exc)\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int):\n    if item_id == 3:\n        raise HTTPException(status_code=418, detail=\"Nope! I don't like 3.\")\n    return {\"item_id\": item_id}\n</code></pre> <p>Nesse exemplo voc\u00ea apenas imprime (<code>print</code>) o erro com uma mensagem expressiva. Mesmo assim, d\u00e1 para pegar a ideia. Voc\u00ea pode usar a exce\u00e7\u00e3o e ent\u00e3o apenas re-usar o manipulador de exce\u00e7\u00e3o default.</p>"},{"location":"tutorial/header-param-models/","title":"Modelos de Par\u00e2metros do Cabe\u00e7alho","text":"<p>Se voc\u00ea possui um grupo de par\u00e2metros de cabe\u00e7alho relacionados, voc\u00ea pode criar um modelo do Pydantic para declar\u00e1-los.</p> <p>Isso vai lhe permitir reusar o modelo em m\u00faltiplos lugares e tamb\u00e9m declarar valida\u00e7\u00f5es e metadadados para todos os par\u00e2metros de uma vez. \ud83d\ude0e</p> <p>Nota</p> <p>Isso \u00e9 poss\u00edvel desde a vers\u00e3o <code>0.115.0</code> do ReadyAPI. \ud83e\udd13</p>"},{"location":"tutorial/header-param-models/#parametros-do-cabecalho-com-um-modelo-pydantic","title":"Par\u00e2metros do Cabe\u00e7alho com um Modelo Pydantic","text":"<p>Declare os par\u00e2metros de cabe\u00e7alho que voc\u00ea precisa em um modelo do Pydantic, e ent\u00e3o declare o par\u00e2metro como <code>Header</code>:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    host: str\n    save_data: bool\n    if_modified_since: str | None = None\n    traceparent: str | None = None\n    x_tag: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: Annotated[CommonHeaders, Header()]):\n    return headers\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: Annotated[CommonHeaders, Header()]):\n    return headers\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: List[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: Annotated[CommonHeaders, Header()]):\n    return headers\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    host: str\n    save_data: bool\n    if_modified_since: str | None = None\n    traceparent: str | None = None\n    x_tag: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: CommonHeaders = Header()):\n    return headers\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: CommonHeaders = Header()):\n    return headers\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: List[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: CommonHeaders = Header()):\n    return headers\n</code></pre> <p>O ReadyAPI ir\u00e1 extrair os dados de cada campo a partir dos cabe\u00e7alhos da requisi\u00e7\u00e3o e te retornar\u00e1 o modelo do Pydantic que voc\u00ea definiu.</p>"},{"location":"tutorial/header-param-models/#checando-a-documentacao","title":"Checando a documenta\u00e7\u00e3o","text":"<p>Voc\u00ea pode ver os headers necess\u00e1rios na interface gr\u00e1fica da documenta\u00e7\u00e3o em <code>/docs</code>:</p>"},{"location":"tutorial/header-param-models/#proibindo-cabecalhos-adicionais","title":"Proibindo Cabe\u00e7alhos adicionais","text":"<p>Em alguns casos de uso especiais (provavelmente n\u00e3o muito comuns), voc\u00ea pode querer restringir os cabe\u00e7alhos que voc\u00ea quer receber.</p> <p>Voc\u00ea pode usar a configura\u00e7\u00e3o dos modelos do Pydantic para proibir (<code>forbid</code>) quaisquer campos <code>extra</code>:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    host: str\n    save_data: bool\n    if_modified_since: str | None = None\n    traceparent: str | None = None\n    x_tag: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: Annotated[CommonHeaders, Header()]):\n    return headers\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: Annotated[CommonHeaders, Header()]):\n    return headers\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: List[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: Annotated[CommonHeaders, Header()]):\n    return headers\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    host: str\n    save_data: bool\n    if_modified_since: str | None = None\n    traceparent: str | None = None\n    x_tag: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: CommonHeaders = Header()):\n    return headers\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: CommonHeaders = Header()):\n    return headers\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: List[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: CommonHeaders = Header()):\n    return headers\n</code></pre> <p>Se um cliente tentar enviar alguns cabe\u00e7alhos extra, eles ir\u00e3o receber uma resposta de erro.</p> <p>Por exemplo, se o cliente tentar enviar um cabe\u00e7alho <code>tool</code> com o valor <code>plumbus</code>, ele ir\u00e1 receber uma resposta de erro informando que o par\u00e2metro do cabe\u00e7alho <code>tool</code> n\u00e3o \u00e9 permitido:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"type\": \"extra_forbidden\",\n            \"loc\": [\"header\", \"tool\"],\n            \"msg\": \"Extra inputs are not permitted\",\n            \"input\": \"plumbus\",\n        }\n    ]\n}\n</code></pre>"},{"location":"tutorial/header-param-models/#resumo","title":"Resumo","text":"<p>Voc\u00ea pode utilizar modelos do Pydantic para declarar cabe\u00e7alhos no ReadyAPI. \ud83d\ude0e</p>"},{"location":"tutorial/header-params/","title":"Par\u00e2metros de Cabe\u00e7alho","text":"<p>Voc\u00ea pode definir par\u00e2metros de Cabe\u00e7alho da mesma maneira que define param\u00eatros com <code>Query</code>, <code>Path</code> e <code>Cookie</code>.</p>"},{"location":"tutorial/header-params/#importe-header","title":"importe <code>Header</code>","text":"<p>Primeiro importe <code>Header</code>:</p> Python 3.10+ - non-Annotated <pre><code>from readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: str | None = Header(default=None)):\n    return {\"User-Agent\": user_agent}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.8+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: Annotated[str | None, Header()] = None):\n    return {\"User-Agent\": user_agent}\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: Annotated[Union[str, None], Header()] = None):\n    return {\"User-Agent\": user_agent}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Header, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: Annotated[Union[str, None], Header()] = None):\n    return {\"User-Agent\": user_agent}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: Union[str, None] = Header(default=None)):\n    return {\"User-Agent\": user_agent}\n</code></pre>"},{"location":"tutorial/header-params/#declare-parametros-de-header","title":"Declare par\u00e2metros de <code>Header</code>","text":"<p>Ent\u00e3o declare os param\u00eatros de cabe\u00e7alho usando a mesma estrutura que em <code>Path</code>, <code>Query</code> e <code>Cookie</code>.</p> <p>O primeiro valor \u00e9 o valor padr\u00e3o, voc\u00ea pode passar todas as valida\u00e7\u00f5es adicionais ou par\u00e2metros de anota\u00e7\u00e3o:</p> Python 3.10+ - non-Annotated <pre><code>from readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: str | None = Header(default=None)):\n    return {\"User-Agent\": user_agent}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.8+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: Annotated[str | None, Header()] = None):\n    return {\"User-Agent\": user_agent}\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: Annotated[Union[str, None], Header()] = None):\n    return {\"User-Agent\": user_agent}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Header, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: Annotated[Union[str, None], Header()] = None):\n    return {\"User-Agent\": user_agent}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: Union[str, None] = Header(default=None)):\n    return {\"User-Agent\": user_agent}\n</code></pre> <p>Detalhes T\u00e9cnicos</p> <p><code>Header</code> \u00e9 uma classe \"irm\u00e3\" de <code>Path</code>, <code>Query</code> e <code>Cookie</code>. Ela tamb\u00e9m herda da mesma classe em comum <code>Param</code>.</p> <p>Mas lembre-se que quando voc\u00ea importa <code>Query</code>, <code>Path</code>, <code>Header</code>, e outras de <code>readyapi</code>, elas s\u00e3o na verdade fun\u00e7\u00f5es que retornam classes especiais.</p> <p>Info</p> <p>Para declarar headers, voc\u00ea precisa usar <code>Header</code>, caso contr\u00e1rio, os par\u00e2metros seriam interpretados como par\u00e2metros de consulta.</p>"},{"location":"tutorial/header-params/#conversao-automatica","title":"Convers\u00e3o autom\u00e1tica","text":"<p><code>Header</code> tem algumas funcionalidades a mais em rela\u00e7\u00e3o a <code>Path</code>, <code>Query</code> e <code>Cookie</code>.</p> <p>A maioria dos cabe\u00e7alhos padr\u00e3o s\u00e3o separados pelo caractere \"h\u00edfen\", tamb\u00e9m conhecido como \"sinal de menos\" (<code>-</code>).</p> <p>Mas uma vari\u00e1vel como <code>user-agent</code> \u00e9 inv\u00e1lida em Python.</p> <p>Portanto, por padr\u00e3o, <code>Header</code> converter\u00e1 os caracteres de nomes de par\u00e2metros de sublinhado (<code>_</code>) para h\u00edfen (<code>-</code>) para extrair e documentar os cabe\u00e7alhos.</p> <p>Al\u00e9m disso, os cabe\u00e7alhos HTTP n\u00e3o diferenciam mai\u00fasculas de min\u00fasculas, portanto, voc\u00ea pode declar\u00e1-los com o estilo padr\u00e3o do Python (tamb\u00e9m conhecido como \"snake_case\").</p> <p>Portanto, voc\u00ea pode usar <code>user_agent</code> como faria normalmente no c\u00f3digo Python, em vez de precisar colocar as primeiras letras em mai\u00fasculas como <code>User_Agent</code> ou algo semelhante.</p> <p>Se por algum motivo voc\u00ea precisar desabilitar a convers\u00e3o autom\u00e1tica de sublinhados para h\u00edfens, defina o par\u00e2metro <code>convert_underscores</code> de <code>Header</code> para <code>False</code>:</p> Python 3.10+ - non-Annotated <pre><code>from readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    strange_header: str | None = Header(default=None, convert_underscores=False),\n):\n    return {\"strange_header\": strange_header}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.8+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    strange_header: Annotated[str | None, Header(convert_underscores=False)] = None,\n):\n    return {\"strange_header\": strange_header}\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    strange_header: Annotated[\n        Union[str, None], Header(convert_underscores=False)\n    ] = None,\n):\n    return {\"strange_header\": strange_header}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Header, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    strange_header: Annotated[\n        Union[str, None], Header(convert_underscores=False)\n    ] = None,\n):\n    return {\"strange_header\": strange_header}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    strange_header: Union[str, None] = Header(default=None, convert_underscores=False),\n):\n    return {\"strange_header\": strange_header}\n</code></pre> <p>Aviso</p> <p>Antes de definir <code>convert_underscores</code> como <code>False</code>, lembre-se de que alguns proxies e servidores HTTP n\u00e3o permitem o uso de cabe\u00e7alhos com sublinhados.</p>"},{"location":"tutorial/header-params/#cabecalhos-duplicados","title":"Cabe\u00e7alhos duplicados","text":"<p>\u00c9 poss\u00edvel receber cabe\u00e7alhos duplicados. Isso significa, o mesmo cabe\u00e7alho com v\u00e1rios valores.</p> <p>Voc\u00ea pode definir esses casos usando uma lista na declara\u00e7\u00e3o de tipo.</p> <p>Voc\u00ea receber\u00e1 todos os valores do cabe\u00e7alho duplicado como uma <code>list</code> Python.</p> <p>Por exemplo, para declarar um cabe\u00e7alho de <code>X-Token</code> que pode aparecer mais de uma vez, voc\u00ea pode escrever:</p> Python 3.10+ - non-Annotated <pre><code>from readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(x_token: list[str] | None = Header(default=None)):\n    return {\"X-Token values\": x_token}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(x_token: Annotated[list[str] | None, Header()] = None):\n    return {\"X-Token values\": x_token}\n</code></pre> <pre><code>from typing import Annotated, List, Union\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(x_token: Annotated[Union[List[str], None], Header()] = None):\n    return {\"X-Token values\": x_token}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Header, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(x_token: Annotated[Union[List[str], None], Header()] = None):\n    return {\"X-Token values\": x_token}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(x_token: Union[list[str], None] = Header(default=None)):\n    return {\"X-Token values\": x_token}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(x_token: Union[List[str], None] = Header(default=None)):\n    return {\"X-Token values\": x_token}\n</code></pre> <p>Se voc\u00ea se comunicar com essa opera\u00e7\u00e3o de caminho enviando dois cabe\u00e7alhos HTTP como:</p> <pre><code>X-Token: foo\nX-Token: bar\n</code></pre> <p>A resposta seria como:</p> <pre><code>{\n    \"X-Token values\": [\n        \"bar\",\n        \"foo\"\n    ]\n}\n</code></pre>"},{"location":"tutorial/header-params/#recapitulando","title":"Recapitulando","text":"<p>Declare cabe\u00e7alhos com <code>Header</code>, usando o mesmo padr\u00e3o comum que utiliza-se em <code>Query</code>, <code>Path</code> e <code>Cookie</code>.</p> <p>E n\u00e3o se preocupe com sublinhados em suas vari\u00e1veis, ReadyAPI cuidar\u00e1 da convers\u00e3o deles.</p>"},{"location":"tutorial/metadata/","title":"Metadados e Urls de Documentos","text":"<p>Voc\u00ea pode personalizar v\u00e1rias configura\u00e7\u00f5es de metadados na sua aplica\u00e7\u00e3o ReadyAPI.</p>"},{"location":"tutorial/metadata/#metadados-para-api","title":"Metadados para API","text":"<p>Voc\u00ea pode definir os seguintes campos que s\u00e3o usados na especifica\u00e7\u00e3o OpenAPI e nas interfaces autom\u00e1ticas de documenta\u00e7\u00e3o da API:</p> Par\u00e2metro Tipo Descri\u00e7\u00e3o <code>title</code> <code>str</code> O t\u00edtulo da API. <code>summary</code> <code>str</code> Um breve resumo da API. Dispon\u00edvel desde OpenAPI 3.1.0, ReadyAPI 0.99.0. <code>description</code> <code>str</code> Uma breve descri\u00e7\u00e3o da API. Pode usar Markdown. <code>version</code> <code>string</code> A vers\u00e3o da API. Esta \u00e9 a vers\u00e3o da sua aplica\u00e7\u00e3o, n\u00e3o do OpenAPI. Por exemplo, <code>2.5.0</code>. <code>terms_of_service</code> <code>str</code> Uma URL para os Termos de Servi\u00e7o da API. Se fornecido, deve ser uma URL. <code>contact</code> <code>dict</code> As informa\u00e7\u00f5es de contato da API exposta. Pode conter v\u00e1rios campos. Campos de <code>contact</code>Par\u00e2metroTipoDescri\u00e7\u00e3o<code>name</code><code>str</code>O nome identificador da pessoa/organiza\u00e7\u00e3o de contato.<code>url</code><code>str</code>A URL que aponta para as informa\u00e7\u00f5es de contato. DEVE estar no formato de uma URL.<code>email</code><code>str</code>O endere\u00e7o de e-mail da pessoa/organiza\u00e7\u00e3o de contato. DEVE estar no formato de um endere\u00e7o de e-mail. <code>license_info</code> <code>dict</code> As informa\u00e7\u00f5es de licen\u00e7a para a API exposta. Ela pode conter v\u00e1rios campos. Campos de <code>license_info</code>Par\u00e2metroTipoDescri\u00e7\u00e3o<code>name</code><code>str</code>OBRIGAT\u00d3RIO (se um <code>license_info</code> for definido). O nome da licen\u00e7a usada para a API.<code>identifier</code><code>str</code>Uma express\u00e3o de licen\u00e7a SPDX para a API. O campo <code>identifier</code> \u00e9 mutuamente exclusivo do campo <code>url</code>. Dispon\u00edvel desde OpenAPI 3.1.0, ReadyAPI 0.99.0.<code>url</code><code>str</code>Uma URL para a licen\u00e7a usada para a API. DEVE estar no formato de uma URL. <p>Voc\u00ea pode defini-los da seguinte maneira:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\ndescription = \"\"\"\nChimichangApp API helps you do awesome stuff. \ud83d\ude80\n\n## Items\n\nYou can **read items**.\n\n## Users\n\nYou will be able to:\n\n* **Create users** (_not implemented_).\n* **Read users** (_not implemented_).\n\"\"\"\n\napp = ReadyAPI(\n    title=\"ChimichangApp\",\n    description=description,\n    summary=\"Deadpool's favorite app. Nuff said.\",\n    version=\"0.0.1\",\n    terms_of_service=\"http://example.com/terms/\",\n    contact={\n        \"name\": \"Deadpoolio the Amazing\",\n        \"url\": \"http://x-force.example.com/contact/\",\n        \"email\": \"dp@x-force.example.com\",\n    },\n    license_info={\n        \"name\": \"Apache 2.0\",\n        \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\",\n    },\n)\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Katana\"}]\n</code></pre> <p>Dica</p> <p>Voc\u00ea pode escrever Markdown no campo <code>description</code> e ele ser\u00e1 renderizado na sa\u00edda.</p> <p>Com essa configura\u00e7\u00e3o, a documenta\u00e7\u00e3o autom\u00e1tica da API se pareceria com:</p> <p></p>"},{"location":"tutorial/metadata/#identificador-de-licenca","title":"Identificador de Licen\u00e7a","text":"<p>Desde o OpenAPI 3.1.0 e ReadyAPI 0.99.0, voc\u00ea tamb\u00e9m pode definir o license_info com um identifier em vez de uma url.</p> <p>Por exemplo:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\ndescription = \"\"\"\nChimichangApp API helps you do awesome stuff. \ud83d\ude80\n\n## Items\n\nYou can **read items**.\n\n## Users\n\nYou will be able to:\n\n* **Create users** (_not implemented_).\n* **Read users** (_not implemented_).\n\"\"\"\n\napp = ReadyAPI(\n    title=\"ChimichangApp\",\n    description=description,\n    summary=\"Deadpool's favorite app. Nuff said.\",\n    version=\"0.0.1\",\n    terms_of_service=\"http://example.com/terms/\",\n    contact={\n        \"name\": \"Deadpoolio the Amazing\",\n        \"url\": \"http://x-force.example.com/contact/\",\n        \"email\": \"dp@x-force.example.com\",\n    },\n    license_info={\n        \"name\": \"Apache 2.0\",\n        \"identifier\": \"MIT\",\n    },\n)\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Katana\"}]\n</code></pre>"},{"location":"tutorial/metadata/#metadados-para-tags","title":"Metadados para tags","text":"<p>Voc\u00ea tamb\u00e9m pode adicionar metadados adicionais para as diferentes tags usadas para agrupar suas opera\u00e7\u00f5es de rota com o par\u00e2metro <code>openapi_tags</code>.</p> <p>Ele recebe uma lista contendo um dicion\u00e1rio para cada tag.</p> <p>Cada dicion\u00e1rio pode conter:</p> <ul> <li><code>name</code> (obrigat\u00f3rio): uma <code>str</code> com o mesmo nome da tag que voc\u00ea usa no par\u00e2metro <code>tags</code> nas suas opera\u00e7\u00f5es de rota e <code>APIRouter</code>s.</li> <li><code>description</code>: uma <code>str</code> com uma breve descri\u00e7\u00e3o da tag. Pode conter Markdown e ser\u00e1 exibido na interface de documenta\u00e7\u00e3o.</li> <li><code>externalDocs</code>: um <code>dict</code> descrevendo a documenta\u00e7\u00e3o externa com:<ul> <li><code>description</code>: uma <code>str</code> com uma breve descri\u00e7\u00e3o da documenta\u00e7\u00e3o externa.</li> <li><code>url</code> (obrigat\u00f3rio): uma <code>str</code> com a URL da documenta\u00e7\u00e3o externa.</li> </ul> </li> </ul>"},{"location":"tutorial/metadata/#criar-metadados-para-tags","title":"Criar Metadados para tags","text":"<p>Vamos tentar isso em um exemplo com tags para <code>users</code> e <code>items</code>.</p> <p>Crie metadados para suas tags e passe-os para o par\u00e2metro <code>openapi_tags</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\ntags_metadata = [\n    {\n        \"name\": \"users\",\n        \"description\": \"Operations with users. The **login** logic is also here.\",\n    },\n    {\n        \"name\": \"items\",\n        \"description\": \"Manage items. So _fancy_ they have their own docs.\",\n        \"externalDocs\": {\n            \"description\": \"Items external docs\",\n            \"url\": \"https://readyapi.github.io/\",\n        },\n    },\n]\n\napp = ReadyAPI(openapi_tags=tags_metadata)\n\n\n@app.get(\"/users/\", tags=[\"users\"])\nasync def get_users():\n    return [{\"name\": \"Harry\"}, {\"name\": \"Ron\"}]\n\n\n@app.get(\"/items/\", tags=[\"items\"])\nasync def get_items():\n    return [{\"name\": \"wand\"}, {\"name\": \"flying broom\"}]\n</code></pre> <p>Observe que voc\u00ea pode usar Markdown dentro das descri\u00e7\u00f5es. Por exemplo, \"login\" ser\u00e1 exibido em negrito (login) e \"fancy\" ser\u00e1 exibido em it\u00e1lico (fancy).</p> <p>Dica</p> <p>Voc\u00ea n\u00e3o precisa adicionar metadados para todas as tags que voc\u00ea usa.</p>"},{"location":"tutorial/metadata/#use-suas-tags","title":"Use suas tags","text":"<p>Use o par\u00e2metro <code>tags</code> com suas opera\u00e7\u00f5es de rota (e <code>APIRouter</code>s) para atribu\u00ed-los a diferentes tags:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\ntags_metadata = [\n    {\n        \"name\": \"users\",\n        \"description\": \"Operations with users. The **login** logic is also here.\",\n    },\n    {\n        \"name\": \"items\",\n        \"description\": \"Manage items. So _fancy_ they have their own docs.\",\n        \"externalDocs\": {\n            \"description\": \"Items external docs\",\n            \"url\": \"https://readyapi.github.io/\",\n        },\n    },\n]\n\napp = ReadyAPI(openapi_tags=tags_metadata)\n\n\n@app.get(\"/users/\", tags=[\"users\"])\nasync def get_users():\n    return [{\"name\": \"Harry\"}, {\"name\": \"Ron\"}]\n\n\n@app.get(\"/items/\", tags=[\"items\"])\nasync def get_items():\n    return [{\"name\": \"wand\"}, {\"name\": \"flying broom\"}]\n</code></pre> <p>Informa\u00e7\u00e3o</p> <p>Leia mais sobre tags em Configura\u00e7\u00e3o de Opera\u00e7\u00e3o de Caminho.</p>"},{"location":"tutorial/metadata/#cheque-os-documentos","title":"Cheque os documentos","text":"<p>Agora, se voc\u00ea verificar a documenta\u00e7\u00e3o, ela exibir\u00e1 todos os metadados adicionais:</p> <p></p>"},{"location":"tutorial/metadata/#ordem-das-tags","title":"Ordem das tags","text":"<p>A ordem de cada dicion\u00e1rio de metadados de tag tamb\u00e9m define a ordem exibida na interface de documenta\u00e7\u00e3o.</p> <p>Por exemplo, embora <code>users</code> apare\u00e7a ap\u00f3s <code>items</code> em ordem alfab\u00e9tica, ele \u00e9 exibido antes deles, porque adicionamos seus metadados como o primeiro dicion\u00e1rio na lista.</p>"},{"location":"tutorial/metadata/#url-da-openapi","title":"URL da OpenAPI","text":"<p>Por padr\u00e3o, o esquema OpenAPI \u00e9 servido em <code>/openapi.json</code>.</p> <p>Mas voc\u00ea pode configur\u00e1-lo com o par\u00e2metro <code>openapi_url</code>.</p> <p>Por exemplo, para defini-lo para ser servido em <code>/api/v1/openapi.json</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(openapi_url=\"/api/v1/openapi.json\")\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n</code></pre> <p>Se voc\u00ea quiser desativar completamente o esquema OpenAPI, pode definir <code>openapi_url=None</code>, o que tamb\u00e9m desativar\u00e1 as interfaces de documenta\u00e7\u00e3o que o utilizam.</p>"},{"location":"tutorial/metadata/#urls-da-documentacao","title":"URLs da Documenta\u00e7\u00e3o","text":"<p>Voc\u00ea pode configurar as duas interfaces de documenta\u00e7\u00e3o inclu\u00eddas:</p> <ul> <li>Swagger UI: acess\u00edvel em <code>/docs</code>.<ul> <li>Voc\u00ea pode definir sua URL com o par\u00e2metro <code>docs_url</code>.</li> <li>Voc\u00ea pode desativ\u00e1-la definindo <code>docs_url=None</code>.</li> </ul> </li> <li>ReDoc: acess\u00edvel em <code>/redoc</code>.<ul> <li>Voc\u00ea pode definir sua URL com o par\u00e2metro <code>redoc_url</code>.</li> <li>Voc\u00ea pode desativ\u00e1-la definindo <code>redoc_url=None</code>.</li> </ul> </li> </ul> <p>Por exemplo, para definir o Swagger UI para ser servido em <code>/documentation</code> e desativar o ReDoc:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(docs_url=\"/documentation\", redoc_url=None)\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n</code></pre>"},{"location":"tutorial/middleware/","title":"Middleware","text":"<p>Voc\u00ea pode adicionar middleware \u00e0 suas aplica\u00e7\u00f5es ReadyAPI.</p> <p>Um \"middleware\" \u00e9 uma fun\u00e7\u00e3o que manipula cada requisi\u00e7\u00e3o antes de ser processada por qualquer opera\u00e7\u00e3o de rota espec\u00edfica. E tamb\u00e9m cada resposta antes de retorn\u00e1-la.</p> <ul> <li>Ele pega cada requisi\u00e7\u00e3o que chega ao seu aplicativo.</li> <li>Ele pode ent\u00e3o fazer algo com essa requisi\u00e7\u00e3o ou executar qualquer c\u00f3digo necess\u00e1rio.</li> <li>Ent\u00e3o ele passa a requisi\u00e7\u00e3o para ser processada pelo resto do aplicativo (por alguma opera\u00e7\u00e3o de rota).</li> <li>Ele ent\u00e3o pega a resposta gerada pelo aplicativo (por alguma opera\u00e7\u00e3o de rota).</li> <li>Ele pode fazer algo com essa resposta ou executar qualquer c\u00f3digo necess\u00e1rio.</li> <li>Ent\u00e3o ele retorna a resposta.</li> </ul> <p>Detalhes t\u00e9cnicos</p> <p>Se voc\u00ea tiver depend\u00eancias com <code>yield</code>, o c\u00f3digo de sa\u00edda ser\u00e1 executado depois do middleware.</p> <p>Se houver alguma tarefa em segundo plano (documentada posteriormente), ela ser\u00e1 executada depois de todo o middleware.</p>"},{"location":"tutorial/middleware/#criar-um-middleware","title":"Criar um middleware","text":"<p>Para criar um middleware, use o decorador <code>@app.middleware(\"http\")</code> logo acima de uma fun\u00e7\u00e3o.</p> <p>A fun\u00e7\u00e3o middleware recebe:</p> <ul> <li>A <code>request</code>.</li> <li>Uma fun\u00e7\u00e3o <code>call_next</code> que receber\u00e1 o <code>request</code> como um par\u00e2metro.<ul> <li>Esta fun\u00e7\u00e3o passar\u00e1 a <code>request</code> para a opera\u00e7\u00e3o de rota correspondente.</li> <li>Ent\u00e3o ela retorna a <code>response</code> gerada pela opera\u00e7\u00e3o de rota correspondente.</li> </ul> </li> <li>Voc\u00ea pode ent\u00e3o modificar ainda mais o <code>response</code> antes de retorn\u00e1-lo.</li> </ul> Python 3.8+ <pre><code>import time\n\nfrom readyapi import ReadyAPI, Request\n\napp = ReadyAPI()\n\n\n@app.middleware(\"http\")\nasync def add_process_time_header(request: Request, call_next):\n    start_time = time.perf_counter()\n    response = await call_next(request)\n    process_time = time.perf_counter() - start_time\n    response.headers[\"X-Process-Time\"] = str(process_time)\n    return response\n</code></pre> <p>Dica</p> <p>Tenha em mente que cabe\u00e7alhos propriet\u00e1rios personalizados podem ser adicionados usando o prefixo 'X-'.</p> <p>Mas se voc\u00ea tiver cabe\u00e7alhos personalizados desejando que um cliente em um navegador esteja apto a ver, voc\u00ea precisa adicion\u00e1-los \u00e0s suas configura\u00e7\u00f5es CORS (CORS (Cross-Origin Resource Sharing)) usando o par\u00e2metro <code>expose_headers</code> documentado em Documentos CORS da Starlette.</p> <p>Detalhes t\u00e9cnicos</p> <p>Voc\u00ea tamb\u00e9m pode usar <code>from starlette.requests import Request</code>.</p> <p>ReadyAPI fornece isso como uma conveni\u00eancia para voc\u00ea, o desenvolvedor. Mas vem diretamente da Starlette.</p>"},{"location":"tutorial/middleware/#antes-e-depois-da-response","title":"Antes e depois da <code>response</code>","text":"<p>Voc\u00ea pode adicionar c\u00f3digo para ser executado com a <code>request</code>, antes que qualquer opera\u00e7\u00e3o de rota o receba.</p> <p>E tamb\u00e9m depois que a <code>response</code> \u00e9 gerada, antes de retorn\u00e1-la.</p> <p>Por exemplo, voc\u00ea pode adicionar um cabe\u00e7alho personalizado <code>X-Process-Time</code> contendo o tempo em segundos que levou para processar a solicita\u00e7\u00e3o e gerar uma resposta:</p> Python 3.8+ <pre><code>import time\n\nfrom readyapi import ReadyAPI, Request\n\napp = ReadyAPI()\n\n\n@app.middleware(\"http\")\nasync def add_process_time_header(request: Request, call_next):\n    start_time = time.perf_counter()\n    response = await call_next(request)\n    process_time = time.perf_counter() - start_time\n    response.headers[\"X-Process-Time\"] = str(process_time)\n    return response\n</code></pre>"},{"location":"tutorial/middleware/#outros-middlewares","title":"Outros middlewares","text":"<p>Mais tarde, voc\u00ea pode ler mais sobre outros middlewares no Guia do usu\u00e1rio avan\u00e7ado: Middleware avan\u00e7ado.</p> <p>Voc\u00ea ler\u00e1 sobre como manipular CORS com um middleware na pr\u00f3xima se\u00e7\u00e3o.</p>"},{"location":"tutorial/path-operation-configuration/","title":"Configura\u00e7\u00e3o da Opera\u00e7\u00e3o de Rota","text":"<p>Existem v\u00e1rios par\u00e2metros que voc\u00ea pode passar para o seu decorador de opera\u00e7\u00e3o de rota para configur\u00e1-lo.</p> <p>Aviso</p> <p>Observe que esses par\u00e2metros s\u00e3o passados diretamente para o decorador de opera\u00e7\u00e3o de rota, n\u00e3o para a sua fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota.</p>"},{"location":"tutorial/path-operation-configuration/#codigo-de-status-da-resposta","title":"C\u00f3digo de Status da Resposta","text":"<p>Voc\u00ea pode definir o <code>status_code</code> (HTTP) para ser usado na resposta da sua opera\u00e7\u00e3o de rota.</p> <p>Voc\u00ea pode passar diretamente o c\u00f3digo <code>int</code>, como <code>404</code>.</p> <p>Mas se voc\u00ea n\u00e3o se lembrar o que cada c\u00f3digo num\u00e9rico significa, pode usar as constantes de atalho em <code>status</code>:</p> Python 3.8+ <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI, status\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, status_code=status.HTTP_201_CREATED)\nasync def create_item(item: Item):\n    return item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI, status\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, status_code=status.HTTP_201_CREATED)\nasync def create_item(item: Item):\n    return item\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI, status\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, status_code=status.HTTP_201_CREATED)\nasync def create_item(item: Item):\n    return item\n</code></pre> <p>Esse c\u00f3digo de status ser\u00e1 usado na resposta e ser\u00e1 adicionado ao esquema OpenAPI.</p> <p>Detalhes T\u00e9cnicos</p> <p>Voc\u00ea tamb\u00e9m poderia usar <code>from starlette import status</code>.</p> <p>ReadyAPI fornece o mesmo <code>starlette.status</code> como <code>readyapi.status</code> apenas como uma conveni\u00eancia para voc\u00ea, o desenvolvedor. Mas vem diretamente do Starlette.</p>"},{"location":"tutorial/path-operation-configuration/#tags","title":"Tags","text":"<p>Voc\u00ea pode adicionar tags para sua opera\u00e7\u00e3o de rota, passe o par\u00e2metro <code>tags</code> com uma <code>list</code> de <code>str</code> (comumente apenas um <code>str</code>):</p> Python 3.8+ <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, tags=[\"items\"])\nasync def create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\", tags=[\"items\"])\nasync def read_items():\n    return [{\"name\": \"Foo\", \"price\": 42}]\n\n\n@app.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"johndoe\"}]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, tags=[\"items\"])\nasync def create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\", tags=[\"items\"])\nasync def read_items():\n    return [{\"name\": \"Foo\", \"price\": 42}]\n\n\n@app.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"johndoe\"}]\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, tags=[\"items\"])\nasync def create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\", tags=[\"items\"])\nasync def read_items():\n    return [{\"name\": \"Foo\", \"price\": 42}]\n\n\n@app.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"johndoe\"}]\n</code></pre> <p>Eles ser\u00e3o adicionados ao esquema OpenAPI e usados pelas interfaces de documenta\u00e7\u00e3o autom\u00e1tica:</p> <p></p>"},{"location":"tutorial/path-operation-configuration/#tags-com-enums","title":"Tags com Enums","text":"<p>Se voc\u00ea tem uma grande aplica\u00e7\u00e3o, voc\u00ea pode acabar acumulando v\u00e1rias tags, e voc\u00ea gostaria de ter certeza de que voc\u00ea sempre usa a mesma tag para opera\u00e7\u00f5es de rota relacionadas.</p> <p>Nestes casos, pode fazer sentido armazenar as tags em um <code>Enum</code>.</p> <p>ReadyAPI suporta isso da mesma maneira que com strings simples:</p> Python 3.8+ <pre><code>from enum import Enum\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Tags(Enum):\n    items = \"items\"\n    users = \"users\"\n\n\n@app.get(\"/items/\", tags=[Tags.items])\nasync def get_items():\n    return [\"Portal gun\", \"Plumbus\"]\n\n\n@app.get(\"/users/\", tags=[Tags.users])\nasync def read_users():\n    return [\"Rick\", \"Morty\"]\n</code></pre>"},{"location":"tutorial/path-operation-configuration/#resumo-e-descricao","title":"Resumo e descri\u00e7\u00e3o","text":"<p>Voc\u00ea pode adicionar um <code>summary</code> e uma <code>description</code>:</p> Python 3.8+ <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n\n\n@app.post(\n    \"/items/\",\n    response_model=Item,\n    summary=\"Create an item\",\n    description=\"Create an item with all the information, name, description, price, tax and a set of unique tags\",\n)\nasync def create_item(item: Item):\n    return item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n\n\n@app.post(\n    \"/items/\",\n    response_model=Item,\n    summary=\"Create an item\",\n    description=\"Create an item with all the information, name, description, price, tax and a set of unique tags\",\n)\nasync def create_item(item: Item):\n    return item\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n\n\n@app.post(\n    \"/items/\",\n    response_model=Item,\n    summary=\"Create an item\",\n    description=\"Create an item with all the information, name, description, price, tax and a set of unique tags\",\n)\nasync def create_item(item: Item):\n    return item\n</code></pre>"},{"location":"tutorial/path-operation-configuration/#descricao-do-docstring","title":"Descri\u00e7\u00e3o do docstring","text":"<p>Como as descri\u00e7\u00f5es tendem a ser longas e cobrir v\u00e1rias linhas, voc\u00ea pode declarar a descri\u00e7\u00e3o da opera\u00e7\u00e3o de rota na docstring da fun\u00e7\u00e3o e o ReadyAPI ir\u00e1 l\u00ea-la de l\u00e1.</p> <p>Voc\u00ea pode escrever Markdown na docstring, ele ser\u00e1 interpretado e exibido corretamente (levando em conta a indenta\u00e7\u00e3o da docstring).</p> Python 3.8+ <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, summary=\"Create an item\")\nasync def create_item(item: Item):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \"\"\"\n    return item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, summary=\"Create an item\")\nasync def create_item(item: Item):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \"\"\"\n    return item\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, summary=\"Create an item\")\nasync def create_item(item: Item):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \"\"\"\n    return item\n</code></pre> <p>Ela ser\u00e1 usada nas documenta\u00e7\u00f5es interativas:</p> <p></p>"},{"location":"tutorial/path-operation-configuration/#descricao-da-resposta","title":"Descri\u00e7\u00e3o da resposta","text":"<p>Voc\u00ea pode especificar a descri\u00e7\u00e3o da resposta com o par\u00e2metro <code>response_description</code>:</p> Python 3.8+ <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n\n\n@app.post(\n    \"/items/\",\n    response_model=Item,\n    summary=\"Create an item\",\n    response_description=\"The created item\",\n)\nasync def create_item(item: Item):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \"\"\"\n    return item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n\n\n@app.post(\n    \"/items/\",\n    response_model=Item,\n    summary=\"Create an item\",\n    response_description=\"The created item\",\n)\nasync def create_item(item: Item):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \"\"\"\n    return item\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n\n\n@app.post(\n    \"/items/\",\n    response_model=Item,\n    summary=\"Create an item\",\n    response_description=\"The created item\",\n)\nasync def create_item(item: Item):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \"\"\"\n    return item\n</code></pre> <p>Informa\u00e7\u00e3o</p> <p>Note que <code>response_description</code> se refere especificamente \u00e0 resposta, a <code>description</code> se refere \u00e0 opera\u00e7\u00e3o de rota em geral.</p> <p>Check</p> <p>OpenAPI especifica que cada opera\u00e7\u00e3o de rota requer uma descri\u00e7\u00e3o de resposta.</p> <p>Ent\u00e3o, se voc\u00ea n\u00e3o fornecer uma, o ReadyAPI ir\u00e1 gerar automaticamente uma de \"Resposta bem-sucedida\".</p> <p></p>"},{"location":"tutorial/path-operation-configuration/#depreciar-uma-operacao-de-rota","title":"Depreciar uma opera\u00e7\u00e3o de rota","text":"<p>Se voc\u00ea precisar marcar uma opera\u00e7\u00e3o de rota como descontinuada, mas sem remov\u00ea-la, passe o par\u00e2metro <code>deprecated</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\", tags=[\"items\"])\nasync def read_items():\n    return [{\"name\": \"Foo\", \"price\": 42}]\n\n\n@app.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"johndoe\"}]\n\n\n@app.get(\"/elements/\", tags=[\"items\"], deprecated=True)\nasync def read_elements():\n    return [{\"item_id\": \"Foo\"}]\n</code></pre> <p>Ela ser\u00e1 claramente marcada como descontinuada nas documenta\u00e7\u00f5es interativas:</p> <p></p> <p>Verifique como opera\u00e7\u00f5es de rota descontinuadas e n\u00e3o descontinuadas se parecem:</p> <p></p>"},{"location":"tutorial/path-operation-configuration/#resumindo","title":"Resumindo","text":"<p>Voc\u00ea pode configurar e adicionar metadados para suas opera\u00e7\u00f5es de rota facilmente passando par\u00e2metros para os decoradores de opera\u00e7\u00e3o de rota.</p>"},{"location":"tutorial/path-params-numeric-validations/","title":"Par\u00e2metros da Rota e Valida\u00e7\u00f5es Num\u00e9ricas","text":"<p>Do mesmo modo que voc\u00ea pode declarar mais valida\u00e7\u00f5es e metadados para par\u00e2metros de consulta com <code>Query</code>, voc\u00ea pode declarar os mesmos tipos de valida\u00e7\u00f5es e metadados para par\u00e2metros de rota com <code>Path</code>.</p>"},{"location":"tutorial/path-params-numeric-validations/#importe-path","title":"Importe <code>Path</code>","text":"<p>Primeiro, importe <code>Path</code> de <code>readyapi</code>:</p> Python 3.10+ - non-Annotated <pre><code>from readyapi import Path, Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: str | None = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.8+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Path, Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[str | None, Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Path, Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Path, Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Path, Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: Union[str, None] = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre>"},{"location":"tutorial/path-params-numeric-validations/#declare-metadados","title":"Declare metadados","text":"<p>Voc\u00ea pode declarar todos os par\u00e2metros da mesma maneira que na <code>Query</code>.</p> <p>Por exemplo para declarar um valor de metadado <code>title</code> para o par\u00e2metro de rota <code>item_id</code> voc\u00ea pode digitar:</p> Python 3.10+ - non-Annotated <pre><code>from readyapi import Path, Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: str | None = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.8+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Path, Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[str | None, Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Path, Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Path, Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Path, Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: Union[str, None] = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Nota</p> <p>Um par\u00e2metro de rota \u00e9 sempre obrigat\u00f3rio, como se fizesse parte da rota.</p> <p>Ent\u00e3o, voc\u00ea deve declar\u00e1-lo com <code>...</code> para marc\u00e1-lo como obrigat\u00f3rio.</p> <p>Mesmo que voc\u00ea declare-o como <code>None</code> ou defina um valor padr\u00e3o, isso n\u00e3o teria efeito algum, o par\u00e2metro ainda seria obrigat\u00f3rio.</p>"},{"location":"tutorial/path-params-numeric-validations/#ordene-os-parametros-de-acordo-com-sua-necessidade","title":"Ordene os par\u00e2metros de acordo com sua necessidade","text":"<p>Suponha que voc\u00ea queira declarar o par\u00e2metro de consulta <code>q</code> como uma <code>str</code> obrigat\u00f3ria.</p> <p>E voc\u00ea n\u00e3o precisa declarar mais nada em rela\u00e7\u00e3o a este par\u00e2metro, ent\u00e3o voc\u00ea n\u00e3o precisa necessariamente usar <code>Query</code>.</p> <p>Mas voc\u00ea ainda precisa usar <code>Path</code> para o par\u00e2metro de rota <code>item_id</code>.</p> <p>O Python ir\u00e1 acusar se voc\u00ea colocar um elemento com um valor padr\u00e3o definido antes de outro que n\u00e3o tenha um valor padr\u00e3o.</p> <p>Mas voc\u00ea pode reorden\u00e1-los, colocando primeiro o elemento sem o valor padr\u00e3o (o par\u00e2metro de consulta <code>q</code>).</p> <p>Isso n\u00e3o faz diferen\u00e7a para o ReadyAPI. Ele vai detectar os par\u00e2metros pelos seus nomes, tipos e defini\u00e7\u00f5es padr\u00e3o (<code>Query</code>, <code>Path</code>, etc), sem se importar com a ordem.</p> <p>Ent\u00e3o, voc\u00ea pode declarar sua fun\u00e7\u00e3o assim:</p> Python 3.8+ - non-Annotated <pre><code>from readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(q: str, item_id: int = Path(title=\"The ID of the item to get\")):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from readyapi import Path, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre>"},{"location":"tutorial/path-params-numeric-validations/#ordene-os-parametros-de-a-acordo-com-sua-necessidade-truques","title":"Ordene os par\u00e2metros de a acordo com sua necessidade, truques","text":"<p>Se voc\u00ea quiser declarar o par\u00e2metro de consulta <code>q</code> sem um <code>Query</code> nem um valor padr\u00e3o, e o par\u00e2metro de rota <code>item_id</code> usando <code>Path</code>, e defin\u00ed-los em uma ordem diferente, Python tem um pequeno truque na sintaxe para isso.</p> <p>Passe <code>*</code>, como o primeiro par\u00e2metro da fun\u00e7\u00e3o.</p> <p>O Python n\u00e3o vai fazer nada com esse <code>*</code>, mas ele vai saber que a partir dali os par\u00e2metros seguintes dever\u00e3o ser chamados argumentos nomeados (pares chave-valor), tamb\u00e9m conhecidos como <code>kwargs</code>. Mesmo que eles n\u00e3o possuam um valor padr\u00e3o.</p> Python 3.8+ - non-Annotated <pre><code>from readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(*, item_id: int = Path(title=\"The ID of the item to get\"), q: str):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from readyapi import Path, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre>"},{"location":"tutorial/path-params-numeric-validations/#validacoes-numericas-maior-que-ou-igual","title":"Valida\u00e7\u00f5es num\u00e9ricas: maior que ou igual","text":"<p>Com <code>Query</code> e <code>Path</code> (e outras que voc\u00ea ver\u00e1 mais tarde) voc\u00ea pode declarar restri\u00e7\u00f5es num\u00e9ricas.</p> <p>Aqui, com <code>ge=1</code>, <code>item_id</code> precisar\u00e1 ser um n\u00famero inteiro maior que (\"<code>g</code>reater than\") ou igual (\"<code>e</code>qual\") a 1.</p> Python 3.8+ - non-Annotated <pre><code>from readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    *, item_id: int = Path(title=\"The ID of the item to get\", ge=1), q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=1)], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from readyapi import Path, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=1)], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre>"},{"location":"tutorial/path-params-numeric-validations/#validacoes-numericas-maior-que-e-menor-que-ou-igual","title":"Valida\u00e7\u00f5es num\u00e9ricas: maior que e menor que ou igual","text":"<p>O mesmo se aplica para:</p> <ul> <li><code>gt</code>: maior que (<code>g</code>reater <code>t</code>han)</li> <li><code>le</code>: menor que ou igual (<code>l</code>ess than or <code>e</code>qual)</li> </ul> Python 3.8+ - non-Annotated <pre><code>from readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", gt=0, le=1000),\n    q: str,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", gt=0, le=1000)],\n    q: str,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from readyapi import Path, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", gt=0, le=1000)],\n    q: str,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre>"},{"location":"tutorial/path-params-numeric-validations/#validacoes-numericas-valores-do-tipo-float-maior-que-e-menor-que","title":"Valida\u00e7\u00f5es num\u00e9ricas: valores do tipo float, maior que e menor que","text":"<p>Valida\u00e7\u00f5es num\u00e9ricas tamb\u00e9m funcionam para valores do tipo <code>float</code>.</p> <p>Aqui \u00e9 onde se torna importante a possibilidade de declarar <code>gt</code> e n\u00e3o apenas <code>ge</code>. Com isso voc\u00ea pode especificar, por exemplo, que um valor deve ser maior que <code>0</code>, ainda que seja menor que <code>1</code>.</p> <p>Assim, <code>0.5</code> seria um valor v\u00e1lido. Mas <code>0.0</code> ou <code>0</code> n\u00e3o seria.</p> <p>E o mesmo para <code>lt</code>.</p> Python 3.8+ - non-Annotated <pre><code>from readyapi import Path, Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: str,\n    size: float = Query(gt=0, lt=10.5),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if size:\n        results.update({\"size\": size})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import Path, Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    *,\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str,\n    size: Annotated[float, Query(gt=0, lt=10.5)],\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if size:\n        results.update({\"size\": size})\n    return results\n</code></pre> <pre><code>from readyapi import Path, Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    *,\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str,\n    size: Annotated[float, Query(gt=0, lt=10.5)],\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if size:\n        results.update({\"size\": size})\n    return results\n</code></pre>"},{"location":"tutorial/path-params-numeric-validations/#recapitulando","title":"Recapitulando","text":"<p>Com <code>Query</code>, <code>Path</code> (e outras que voc\u00ea ainda n\u00e3o viu) voc\u00ea pode declarar metadados e valida\u00e7\u00f5es de texto do mesmo modo que com Par\u00e2metros de consulta e valida\u00e7\u00f5es de texto.</p> <p>E voc\u00ea tamb\u00e9m pode declarar valida\u00e7\u00f5es num\u00e9ricas:</p> <ul> <li><code>gt</code>: maior que (<code>g</code>reater <code>t</code>han)</li> <li><code>ge</code>: maior que ou igual (<code>g</code>reater than or <code>e</code>qual)</li> <li><code>lt</code>: menor que (<code>l</code>ess <code>t</code>han)</li> <li><code>le</code>: menor que ou igual (<code>l</code>ess than or <code>e</code>qual)</li> </ul> <p>Informa\u00e7\u00e3o</p> <p><code>Query</code>, <code>Path</code> e outras classes que voc\u00ea ver\u00e1 a frente s\u00e3o subclasses de uma classe comum <code>Param</code>.</p> <p>Todas elas compartilham os mesmos par\u00e2metros para valida\u00e7\u00e3o adicional e metadados que voc\u00ea viu.</p> <p>Detalhes T\u00e9cnicos</p> <p>Quando voc\u00ea importa <code>Query</code>, <code>Path</code> e outras de <code>readyapi</code>, elas s\u00e3o na verdade fun\u00e7\u00f5es.</p> <p>Que quando chamadas, retornam inst\u00e2ncias de classes de mesmo nome.</p> <p>Ent\u00e3o, voc\u00ea importa <code>Query</code>, que \u00e9 uma fun\u00e7\u00e3o. E quando voc\u00ea a chama, ela retorna uma inst\u00e2ncia de uma classe tamb\u00e9m chamada <code>Query</code>.</p> <p>Estas fun\u00e7\u00f5es s\u00e3o assim (ao inv\u00e9s de apenas usar as classes diretamente) para que seu editor n\u00e3o acuse erros sobre seus tipos.</p> <p>Dessa maneira voc\u00ea pode user seu editor e ferramentas de desenvolvimento sem precisar adicionar configura\u00e7\u00f5es customizadas para ignorar estes erros.</p>"},{"location":"tutorial/path-params/","title":"Par\u00e2metros da rota da URL","text":"<p>Voc\u00ea pode declarar os \"par\u00e2metros\" ou \"vari\u00e1veis\" com a mesma sintaxe utilizada pelo formato de strings do Python:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id):\n    return {\"item_id\": item_id}\n</code></pre> <p>O valor do par\u00e2metro que foi passado \u00e0 <code>item_id</code> ser\u00e1 passado para a sua fun\u00e7\u00e3o como o argumento <code>item_id</code>.</p> <p>Ent\u00e3o, se voc\u00ea rodar este exemplo e for at\u00e9 http://127.0.0.1:8000/items/foo, voc\u00ea ver\u00e1 a seguinte resposta:</p> <pre><code>{\"item_id\":\"foo\"}\n</code></pre>"},{"location":"tutorial/path-params/#parametros-da-rota-com-tipos","title":"Par\u00e2metros da rota com tipos","text":"<p>Voc\u00ea pode declarar o tipo de um par\u00e2metro na fun\u00e7\u00e3o usando as anota\u00e7\u00f5es padr\u00f5es do Python:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int):\n    return {\"item_id\": item_id}\n</code></pre> <p>Nesse caso, <code>item_id</code> est\u00e1 sendo declarado como um <code>int</code>.</p> <p>Verifique</p> <pre><code>Isso vai dar \u00e0 voc\u00ea suporte do seu editor dentro das fun\u00e7\u00f5es, com verifica\u00e7\u00f5es de erros, autocompletar, etc.\n</code></pre>"},{"location":"tutorial/path-params/#conversao-de-dados","title":"Convers\u00e3o de dados","text":"<p>Se voc\u00ea rodar esse exemplo e abrir o seu navegador em http://127.0.0.1:8000/items/3, voc\u00ea ver\u00e1 a seguinte resposta:</p> <pre><code>{\"item_id\":3}\n</code></pre> <p>Verifique</p> <pre><code>Observe que o valor recebido pela fun\u00e7\u00e3o (e tamb\u00e9m retornado por ela) \u00e9 `3`, como um Python `int`, n\u00e3o como uma string `\"3\"`.\n\nEnt\u00e3o, com essa declara\u00e7\u00e3o de tipo, o **ReadyAPI** d\u00e1 pra voc\u00ea um &lt;abbr title=\"convertendo a string que veio do request HTTP em um dado Python\"&gt;\"parsing\"&lt;/abbr&gt; autom\u00e1tico no request .\n</code></pre>"},{"location":"tutorial/path-params/#validacao-de-dados","title":"Valida\u00e7\u00e3o de dados","text":"<p>Mas se voc\u00ea abrir o seu navegador em http://127.0.0.1:8000/items/foo, voc\u00ea ver\u00e1 um belo erro HTTP:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"path\",\n                \"item_id\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}\n</code></pre> <p>devido ao par\u00e2metro da rota <code>item_id</code> ter um valor <code>\"foo\"</code>, que n\u00e3o \u00e9 um <code>int</code>.</p> <p>O mesmo erro apareceria se voc\u00ea tivesse fornecido um <code>float</code> ao inv\u00e9s de um <code>int</code>, como em: http://127.0.0.1:8000/items/4.2</p> <p>Verifique</p> <pre><code>Ent\u00e3o, com a mesma declara\u00e7\u00e3o de tipo do Python, o **ReadyAPI** d\u00e1 pra voc\u00ea valida\u00e7\u00e3o de dados.\n\nObserve que o erro tamb\u00e9m mostra claramente o ponto exato onde a valida\u00e7\u00e3o n\u00e3o passou.\n\nIsso \u00e9 incrivelmente \u00fatil enquanto se desenvolve e debuga o c\u00f3digo que interage com a sua API.\n</code></pre>"},{"location":"tutorial/path-params/#documentacao","title":"Documenta\u00e7\u00e3o","text":"<p>Quando voc\u00ea abrir o seu navegador em http://127.0.0.1:8000/docs, voc\u00ea ver\u00e1 de forma autom\u00e1tica e interativa a documenta\u00e7\u00e3o da API como:</p> <p></p> <p>Verifique</p> <pre><code>Novamente, apenas com a mesma declara\u00e7\u00e3o de tipo do Python, o **ReadyAPI** te d\u00e1 de forma autom\u00e1tica e interativa a documenta\u00e7\u00e3o (integrada com o Swagger UI).\n\nVeja que o par\u00e2metro de rota est\u00e1 declarado como sendo um inteiro (int).\n</code></pre>"},{"location":"tutorial/path-params/#beneficios-baseados-em-padroes-documentacao-alternativa","title":"Beneficios baseados em padr\u00f5es, documenta\u00e7\u00e3o alternativa","text":"<p>Devido ao schema gerado ser o padr\u00e3o do OpenAPI, existem muitas ferramentas compat\u00edveis.</p> <p>Por esse motivo, o pr\u00f3prio ReadyAPI fornece uma API alternativa para documenta\u00e7\u00e3o (utilizando ReDoc), que voc\u00ea pode acessar em http://127.0.0.1:8000/redoc:</p> <p></p> <p>Da mesma forma, existem muitas ferramentas compat\u00edveis. Incluindo ferramentas de gera\u00e7\u00e3o de c\u00f3digo para muitas linguagens.</p>"},{"location":"tutorial/path-params/#pydantic","title":"Pydantic","text":"<p>Toda a valida\u00e7\u00e3o de dados \u00e9 feita por baixo dos panos pelo Pydantic, ent\u00e3o voc\u00ea tem todos os benef\u00edcios disso. E assim voc\u00ea sabe que est\u00e1 em boas m\u00e3os.</p> <p>Voc\u00ea pode usar as mesmas declara\u00e7\u00f5es de tipo com <code>str</code>, <code>float</code>, <code>bool</code> e muitos outros tipos complexos de dados.</p> <p>Vamos explorar muitos destes tipos nos pr\u00f3ximos cap\u00edtulos do tutorial.</p>"},{"location":"tutorial/path-params/#a-ordem-importa","title":"A ordem importa","text":"<p>Quando voc\u00ea cria opera\u00e7\u00f5es de rota, voc\u00ea pode se deparar com situa\u00e7\u00f5es onde voc\u00ea pode ter uma rota fixa.</p> <p>Algo como <code>/users/me</code> por exemplo, digamos que essa rota seja utilizada para pegar dados sobre o usu\u00e1rio atual.</p> <p>E ent\u00e3o voc\u00ea pode ter tamb\u00e9m uma rota <code>/users/{user_id}</code> para pegar dados sobre um usu\u00e1rio espec\u00edfico associado a um ID de usu\u00e1rio.</p> <p>Porque as opera\u00e7\u00f5es de rota s\u00e3o avaliadas em ordem, voc\u00ea precisa ter certeza que a rota para <code>/users/me</code> est\u00e1 sendo declarado antes da rota <code>/users/{user_id}</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/users/me\")\nasync def read_user_me():\n    return {\"user_id\": \"the current user\"}\n\n\n@app.get(\"/users/{user_id}\")\nasync def read_user(user_id: str):\n    return {\"user_id\": user_id}\n</code></pre> <p>Caso contr\u00e1rio, a rota para <code>/users/{user_id}</code> coincidiria tamb\u00e9m para <code>/users/me</code>, \"pensando\" que estaria recebendo o par\u00e2metro <code>user_id</code> com o valor de <code>\"me\"</code>.</p>"},{"location":"tutorial/path-params/#valores-predefinidos","title":"Valores predefinidos","text":"<p>Se voc\u00ea tem uma opera\u00e7\u00e3o de rota que recebe um par\u00e2metro da rota, mas que voc\u00ea queira que esses valores poss\u00edveis do par\u00e2metro da rota sejam predefinidos, voc\u00ea pode usar <code>Enum</code> padr\u00e3o do Python.</p>"},{"location":"tutorial/path-params/#criando-uma-classe-enum","title":"Criando uma classe <code>Enum</code>","text":"<p>Importe <code>Enum</code> e crie uma sub-classe que herde de <code>str</code> e de <code>Enum</code>.</p> <p>Por herdar de <code>str</code> a documenta\u00e7\u00e3o da API vai ser capaz de saber que os valores devem ser do tipo <code>string</code> e assim ser capaz de mostrar eles corretamente.</p> <p>Assim, crie atributos de classe com valores fixos, que ser\u00e3o os valores v\u00e1lidos dispon\u00edveis.</p> Python 3.8+ <pre><code>from enum import Enum\n\nfrom readyapi import ReadyAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = ReadyAPI()\n\n\n@app.get(\"/models/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}\n</code></pre> <p>informa\u00e7\u00e3o</p> <p>Enumerations (ou enums) est\u00e3o dispon\u00edveis no Python desde a vers\u00e3o 3.4.</p> <p>Dica</p> <pre><code>Se voc\u00ea est\u00e1 se perguntando, \"AlexNet\", \"ResNet\", e \"LeNet\" s\u00e3o apenas nomes de &lt;abbr title=\"t\u00e9cnicamente, modelos de arquitetura de Deep Learning\"&gt;modelos&lt;/abbr&gt; de Machine Learning (aprendizado de m\u00e1quina).\n</code></pre>"},{"location":"tutorial/path-params/#declare-um-parametro-de-rota","title":"Declare um par\u00e2metro de rota","text":"<p>Logo, crie um par\u00e2metro de rota com anota\u00e7\u00f5es de tipo usando a classe enum que voc\u00ea criou (<code>ModelName</code>):</p> Python 3.8+ <pre><code>from enum import Enum\n\nfrom readyapi import ReadyAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = ReadyAPI()\n\n\n@app.get(\"/models/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}\n</code></pre>"},{"location":"tutorial/path-params/#revise-a-documentacao","title":"Revise a documenta\u00e7\u00e3o","text":"<p>Visto que os valores dispon\u00edveis para o par\u00e2metro da rota est\u00e3o predefinidos, a documenta\u00e7\u00e3o interativa pode mostrar esses valores de uma forma bem legal:</p> <p></p>"},{"location":"tutorial/path-params/#trabalhando-com-os-enumeration-do-python","title":"Trabalhando com os enumeration do Python","text":"<p>O valor do par\u00e2metro da rota ser\u00e1 um membro de enumeration.</p>"},{"location":"tutorial/path-params/#compare-membros-de-enumeration","title":"Compare membros de enumeration","text":"<p>Voc\u00ea pode comparar eles com o membro de enumeration no enum <code>ModelName</code> que voc\u00ea criou:</p> Python 3.8+ <pre><code>from enum import Enum\n\nfrom readyapi import ReadyAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = ReadyAPI()\n\n\n@app.get(\"/models/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}\n</code></pre>"},{"location":"tutorial/path-params/#obtenha-o-valor-de-enumerate","title":"Obtenha o valor de enumerate","text":"<p>Voc\u00ea pode ter o valor exato de enumerate (um <code>str</code> nesse caso) usando <code>model_name.value</code>, ou em geral, <code>your_enum_member.value</code>:</p> Python 3.8+ <pre><code>from enum import Enum\n\nfrom readyapi import ReadyAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = ReadyAPI()\n\n\n@app.get(\"/models/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}\n</code></pre> <p>Dica</p> <pre><code>Voc\u00ea tamb\u00e9m poderia acessar o valor `\"lenet\"` com `ModelName.lenet.value`\n</code></pre>"},{"location":"tutorial/path-params/#retorne-membros-de-enumeration","title":"Retorne membros de enumeration","text":"<p>Voc\u00ea pode retornar membros de enum da sua rota de opera\u00e7\u00e3o, em um corpo JSON aninhado (por exemplo um <code>dict</code>).</p> <p>Eles ser\u00e3o convertidos para o seus valores correspondentes (strings nesse caso) antes de serem retornados ao cliente:</p> Python 3.8+ <pre><code>from enum import Enum\n\nfrom readyapi import ReadyAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = ReadyAPI()\n\n\n@app.get(\"/models/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}\n</code></pre> <p>No seu cliente voc\u00ea vai obter uma resposta JSON como:</p> <pre><code>{\n  \"model_name\": \"alexnet\",\n  \"message\": \"Deep Learning FTW!\"\n}\n</code></pre>"},{"location":"tutorial/path-params/#parametros-de-rota-que-contem-caminhos","title":"Par\u00e2metros de rota que cont\u00e9m caminhos","text":"<p>Digamos que voc\u00ea tenha uma opera\u00e7\u00e3o de rota com uma rota <code>/files/{file_path}</code>.</p> <p>Mas voc\u00ea precisa que o pr\u00f3prio <code>file_path</code> contenha uma rota, como <code>home/johndoe/myfile.txt</code>.</p> <p>Ent\u00e3o, a URL para este arquivo deveria ser algo como: <code>/files/home/johndoe/myfile.txt</code>.</p>"},{"location":"tutorial/path-params/#suporte-do-openapi","title":"Suporte do OpenAPI","text":"<p>O OpenAPI n\u00e3o suporta uma maneira de declarar um par\u00e2metro de rota que contenha uma rota dentro, dado que isso poderia levar a cen\u00e1rios que s\u00e3o dif\u00edceis de testar e definir.</p> <p>No entanto, voc\u00ea pode fazer isso no ReadyAPI, usando uma das ferramentas internas do Starlette.</p> <p>A documenta\u00e7\u00e3o continuaria funcionando, ainda que n\u00e3o adicionaria nenhuma informa\u00e7\u00e3o dizendo que o par\u00e2metro deveria conter uma rota.</p>"},{"location":"tutorial/path-params/#conversor-de-rota","title":"Conversor de rota","text":"<p>Usando uma op\u00e7\u00e3o direta do Starlette voc\u00ea pode declarar um par\u00e2metro de rota contendo uma rota usando uma URL como:</p> <pre><code>/files/{file_path:path}\n</code></pre> <p>Nesse caso, o nome do par\u00e2metro \u00e9 <code>file_path</code>, e a \u00faltima parte, <code>:path</code>, diz que o par\u00e2metro deveria coincidir com qualquer rota.</p> <p>Ent\u00e3o, voc\u00ea poderia usar ele com:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/files/{file_path:path}\")\nasync def read_file(file_path: str):\n    return {\"file_path\": file_path}\n</code></pre> <p>Dica</p> <pre><code>Voc\u00ea poderia precisar que o par\u00e2metro contivesse `/home/johndoe/myfile.txt`, com uma barra no inicio (`/`).\n\nNeste caso, a URL deveria ser: `/files//home/johndoe/myfile.txt`, com barra dupla (`//`) entre `files` e `home`.\n</code></pre>"},{"location":"tutorial/path-params/#recapitulando","title":"Recapitulando","text":"<p>Com o ReadyAPI, usando as declara\u00e7\u00f5es de tipo do Python, voc\u00ea obt\u00e9m:</p> <ul> <li>Suporte no editor: verifica\u00e7\u00e3o de erros, e op\u00e7\u00e3o de autocompletar, etc.</li> <li>\"Parsing\" de dados</li> <li>Valida\u00e7\u00e3o de dados</li> <li>Anota\u00e7\u00e3o da API e documenta\u00e7\u00e3o autom\u00e1tica</li> </ul> <p>Voc\u00ea apenas tem que declar\u00e1-los uma vez.</p> <p>Essa \u00e9 provavelmente a vantagem mais vis\u00edvel do ReadyAPI se comparado com frameworks alternativos (al\u00e9m do desempenho puro).</p>"},{"location":"tutorial/query-param-models/","title":"Modelos de Par\u00e2metros de Consulta","text":"<p>Se voc\u00ea possui um grupo de par\u00e2metros de consultas que s\u00e3o relacionados, voc\u00ea pode criar um modelo Pydantic para declar\u00e1-los.</p> <p>Isso permitiria que voc\u00ea reutilizasse o modelo em diversos lugares, e tamb\u00e9m declarasse valida\u00e7\u00f5es e metadados de todos os par\u00e2metros de uma \u00fanica vez. \ud83d\ude0e</p> <p>Nota</p> <p>Isso \u00e9 suportado desde o ReadyAPI vers\u00e3o <code>0.115.0</code>. \ud83e\udd13</p>"},{"location":"tutorial/query-param-models/#parametros-de-consulta-com-um-modelo-pydantic","title":"Par\u00e2metros de Consulta com um Modelo Pydantic","text":"<p>Declare os par\u00e2metros de consulta que voc\u00ea precisa em um modelo Pydantic, e ent\u00e3o declare o par\u00e2metro como <code>Query</code>:</p> Python 3.10+ <pre><code>from typing import Annotated, Literal\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: Annotated[FilterParams, Query()]):\n    return filter_query\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from pydantic import BaseModel, Field\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated, Literal\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: Annotated[FilterParams, Query()]):\n    return filter_query\n</code></pre> <pre><code>from typing import List\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated, Literal\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: List[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: Annotated[FilterParams, Query()]):\n    return filter_query\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Literal\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: FilterParams = Query()):\n    return filter_query\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel, Field\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Literal\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: FilterParams = Query()):\n    return filter_query\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Literal\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: List[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: FilterParams = Query()):\n    return filter_query\n</code></pre> <p>O ReadyAPI extrair\u00e1 os dados para cada campo dos par\u00e2metros de consulta presentes na requisi\u00e7\u00e3o, e fornecer\u00e1 o modelo Pydantic que voc\u00ea definiu.</p>"},{"location":"tutorial/query-param-models/#verifique-os-documentos","title":"Verifique os Documentos","text":"<p>Voc\u00ea pode ver os par\u00e2metros de consulta nos documentos de IU em <code>/docs</code>:</p>"},{"location":"tutorial/query-param-models/#restrinja-parametros-de-consulta-extras","title":"Restrinja Par\u00e2metros de Consulta Extras","text":"<p>Em alguns casos especiais (provavelmente n\u00e3o muito comuns), voc\u00ea queira restrinjir os par\u00e2metros de consulta que deseja receber.</p> <p>Voc\u00ea pode usar a configura\u00e7\u00e3o do modelo Pydantic para <code>forbid</code> (proibir) qualquer campo <code>extra</code>:</p> Python 3.10+ <pre><code>from typing import Annotated, Literal\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: Annotated[FilterParams, Query()]):\n    return filter_query\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from pydantic import BaseModel, Field\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated, Literal\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: Annotated[FilterParams, Query()]):\n    return filter_query\n</code></pre> <pre><code>from typing import List\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated, Literal\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: List[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: Annotated[FilterParams, Query()]):\n    return filter_query\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Literal\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: FilterParams = Query()):\n    return filter_query\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel, Field\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Literal\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: FilterParams = Query()):\n    return filter_query\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Literal\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: List[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: FilterParams = Query()):\n    return filter_query\n</code></pre> <p>Caso um cliente tente enviar alguns dados extras nos par\u00e2metros de consulta, eles receber\u00e3o um retorno de erro.</p> <p>Por exemplo, se o cliente tentar enviar um par\u00e2metro de consulta <code>tool</code> com o valor <code>plumbus</code>, como:</p> <pre><code>https://example.com/items/?limit=10&amp;tool=plumbus\n</code></pre> <p>Eles receber\u00e3o um retorno de erro informando-os que o par\u00e2mentro de consulta <code>tool</code> n\u00e3o \u00e9 permitido:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"type\": \"extra_forbidden\",\n            \"loc\": [\"query\", \"tool\"],\n            \"msg\": \"Extra inputs are not permitted\",\n            \"input\": \"plumbus\"\n        }\n    ]\n}\n</code></pre>"},{"location":"tutorial/query-param-models/#resumo","title":"Resumo","text":"<p>Voc\u00ea pode utilizar modelos Pydantic para declarar par\u00e2metros de consulta no ReadyAPI. \ud83d\ude0e</p> <p>Dica</p> <p>Alerta de spoiler: voc\u00ea tamb\u00e9m pode utilizar modelos Pydantic para declarar cookies e cabe\u00e7alhos, mas voc\u00ea ir\u00e1 ler sobre isso mais a frente no tutorial. \ud83e\udd2b</p>"},{"location":"tutorial/query-params-str-validations/","title":"Par\u00e2metros de consulta e valida\u00e7\u00f5es de texto","text":"<p>O ReadyAPI permite que voc\u00ea declare informa\u00e7\u00f5es adicionais e valida\u00e7\u00f5es aos seus par\u00e2metros.</p> <p>Vamos utilizar essa aplica\u00e7\u00e3o como exemplo:</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Union[str, None] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: str | None = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>O par\u00e2metro de consulta <code>q</code> \u00e9 do tipo <code>Union[str, None]</code>, o que significa que \u00e9 do tipo <code>str</code> mas que tamb\u00e9m pode ser <code>None</code>, e de fato, o valor padr\u00e3o \u00e9 <code>None</code>, ent\u00e3o o ReadyAPI saber\u00e1 que n\u00e3o \u00e9 obrigat\u00f3rio.</p> <p>Observa\u00e7\u00e3o</p> <p>O ReadyAPI saber\u00e1 que o valor de <code>q</code> n\u00e3o \u00e9 obrigat\u00f3rio por causa do valor padr\u00e3o <code>= None</code>.</p> <p>O <code>Union</code> em <code>Union[str, None]</code> n\u00e3o \u00e9 usado pelo ReadyAPI, mas permitir\u00e1 que seu editor lhe d\u00ea um melhor suporte e detecte erros.</p>"},{"location":"tutorial/query-params-str-validations/#validacao-adicional","title":"Valida\u00e7\u00e3o adicional","text":"<p>N\u00f3s iremos for\u00e7ar que mesmo o par\u00e2metro <code>q</code> seja opcional, sempre que informado, seu tamanho n\u00e3o exceda 50 caracteres.</p>"},{"location":"tutorial/query-params-str-validations/#importe-query","title":"Importe <code>Query</code>","text":"<p>Para isso, primeiro importe <code>Query</code> de <code>readyapi</code>:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Union[str, None] = Query(default=None, max_length=50)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str | None, Query(max_length=50)] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[Union[str, None], Query(max_length=50)] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: str | None = Query(default=None, max_length=50)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre>"},{"location":"tutorial/query-params-str-validations/#use-query-como-o-valor-padrao","title":"Use <code>Query</code> como o valor padr\u00e3o","text":"<p>Agora utilize-o como valor padr\u00e3o do seu par\u00e2metro, definindo o par\u00e2metro <code>max_length</code> para 50:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Union[str, None] = Query(default=None, max_length=50)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str | None, Query(max_length=50)] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[Union[str, None], Query(max_length=50)] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: str | None = Query(default=None, max_length=50)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Note que substitu\u00edmos o valor padr\u00e3o de <code>None</code> para <code>Query(default=None)</code>, o primeiro par\u00e2metro de <code>Query</code> serve para o mesmo prop\u00f3sito: definir o valor padr\u00e3o do par\u00e2metro.</p> <p>Ent\u00e3o:</p> <pre><code>q: Union[str, None] = Query(default=None)\n</code></pre> <p>...Torna o par\u00e2metro opcional, da mesma maneira que:</p> <pre><code>q: Union[str, None] = None\n</code></pre> <p>Mas o declara explicitamente como um par\u00e2metro de consulta.</p> <p>Informa\u00e7\u00e3o</p> <p>Tenha em mente que o ReadyAPI se preocupa com a parte:</p> <pre><code>= None\n</code></pre> <p>Ou com:</p> <pre><code>= Query(default=None)\n</code></pre> <p>E ir\u00e1 utilizar o <code>None</code> para detectar que o par\u00e2metro de consulta n\u00e3o \u00e9 obrigat\u00f3rio.</p> <p>O <code>Union</code> \u00e9 apenas para permitir que seu editor de texto lhe d\u00ea um melhor suporte.</p> <p>Ent\u00e3o, podemos passar mais par\u00e2metros para <code>Query</code>. Neste caso, o par\u00e2metro <code>max_length</code> que se aplica a textos:</p> <pre><code>q: str = Query(default=None, max_length=50)\n</code></pre> <p>Isso ir\u00e1 validar os dados, mostrar um erro claro quando os dados forem inv\u00e1lidos, e documentar o par\u00e2metro na opera\u00e7\u00e3o de rota do esquema OpenAPI..</p>"},{"location":"tutorial/query-params-str-validations/#adicionando-mais-validacoes","title":"Adicionando mais valida\u00e7\u00f5es","text":"<p>Voc\u00ea tamb\u00e9m pode incluir um par\u00e2metro <code>min_length</code>:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Union[str, None] = Query(default=None, min_length=3, max_length=50),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[str | None, Query(min_length=3, max_length=50)] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[Union[str, None], Query(min_length=3, max_length=50)] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[Union[str, None], Query(min_length=3, max_length=50)] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: str | None = Query(default=None, min_length=3, max_length=50)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre>"},{"location":"tutorial/query-params-str-validations/#adicionando-expressoes-regulares","title":"Adicionando express\u00f5es regulares","text":"<p>Voc\u00ea pode definir uma express\u00e3o regular que combine com um padr\u00e3o esperado pelo par\u00e2metro:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Union[str, None] = Query(\n        default=None, min_length=3, max_length=50, pattern=\"^fixedquery$\"\n    ),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        str | None, Query(min_length=3, max_length=50, pattern=\"^fixedquery$\")\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        Union[str, None], Query(min_length=3, max_length=50, pattern=\"^fixedquery$\")\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        Union[str, None], Query(min_length=3, max_length=50, pattern=\"^fixedquery$\")\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: str | None = Query(\n        default=None, min_length=3, max_length=50, pattern=\"^fixedquery$\"\n    ),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Essa express\u00e3o regular espec\u00edfica verifica se o valor recebido no par\u00e2metro:</p> <ul> <li><code>^</code>: Inicia com os seguintes caracteres, ou seja, n\u00e3o cont\u00e9m caracteres anteriores.</li> <li><code>fixedquery</code>: cont\u00e9m o valor exato <code>fixedquery</code>.</li> <li><code>$</code>: termina aqui, n\u00e3o cont\u00e9m nenhum caractere ap\u00f3s <code>fixedquery</code>.</li> </ul> <p>Se voc\u00ea se sente perdido com todo esse assunto de \"express\u00e3o regular\", n\u00e3o se preocupe. Esse \u00e9 um assunto complicado para a maioria das pessoas. Voc\u00ea ainda pode fazer muitas coisas sem utilizar express\u00f5es regulares.</p> <p>Mas assim que voc\u00ea precisar e j\u00e1 tiver aprendido sobre, saiba que voc\u00ea poder\u00e1 us\u00e1-las diretamente no ReadyAPI.</p>"},{"location":"tutorial/query-params-str-validations/#valores-padrao","title":"Valores padr\u00e3o","text":"<p>Da mesma maneira que voc\u00ea utiliza <code>None</code> como o primeiro argumento para ser utilizado como um valor padr\u00e3o, voc\u00ea pode usar outros valores.</p> <p>Vamos dizer que voc\u00ea queira que o par\u00e2metro de consulta <code>q</code> tenha um <code>min_length</code> de <code>3</code>, e um valor padr\u00e3o de <code>\"fixedquery\"</code>, ent\u00e3o declarar\u00edamos assim:</p> Python 3.8+ - non-Annotated <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: str = Query(default=\"fixedquery\", min_length=3)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str, Query(min_length=3)] = \"fixedquery\"):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str, Query(min_length=3)] = \"fixedquery\"):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Observa\u00e7\u00e3o</p> <p>O par\u00e2metro torna-se opcional quando possui um valor padr\u00e3o.</p>"},{"location":"tutorial/query-params-str-validations/#torne-o-obrigatorio","title":"Torne-o obrigat\u00f3rio","text":"<p>Quando voc\u00ea n\u00e3o necessita de valida\u00e7\u00f5es ou de metadados adicionais, podemos fazer com que o par\u00e2metro de consulta <code>q</code> seja obrigat\u00f3rio por n\u00e3o declarar um valor padr\u00e3o, dessa forma:</p> <pre><code>q: str\n</code></pre> <p>em vez desta:</p> <pre><code>q: Union[str, None] = None\n</code></pre> <p>Mas agora n\u00f3s o estamos declarando como <code>Query</code>, conforme abaixo:</p> <pre><code>q: Union[str, None] = Query(default=None, min_length=3)\n</code></pre> <p>Ent\u00e3o, quando voc\u00ea precisa declarar um par\u00e2metro obrigat\u00f3rio utilizando o <code>Query</code>, voc\u00ea pode utilizar <code>...</code> como o primeiro argumento:</p> Python 3.8+ - non-Annotated <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: str = Query(min_length=3)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str, Query(min_length=3)]):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str, Query(min_length=3)]):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Informa\u00e7\u00e3o</p> <p>Se voc\u00ea nunca viu os <code>...</code> antes: \u00e9 um valor \u00fanico especial, faz parte do Python e \u00e9 chamado \"Ellipsis\".</p> <p>Dessa forma o ReadyAPI saber\u00e1 que o par\u00e2metro \u00e9 obrigat\u00f3rio.</p>"},{"location":"tutorial/query-params-str-validations/#lista-de-parametros-de-consulta-multiplos-valores","title":"Lista de par\u00e2metros de consulta / m\u00faltiplos valores","text":"<p>Quando voc\u00ea declara explicitamente um par\u00e2metro com <code>Query</code> voc\u00ea pode declar\u00e1-lo para receber uma lista de valores, ou podemos dizer, que ir\u00e1 receber mais de um valor.</p> <p>Por exemplo, para declarar que o par\u00e2metro <code>q</code> pode aparecer diversas vezes na URL, voc\u00ea escreveria:</p> Python 3.8+ - non-Annotated <pre><code>from typing import List, Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Union[List[str], None] = Query(default=None)):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[list[str] | None, Query()] = None):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[Union[list[str], None], Query()] = None):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[Union[List[str], None], Query()] = None):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: list[str] | None = Query(default=None)):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Union[list[str], None] = Query(default=None)):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> <p>Ent\u00e3o, com uma URL assim:</p> <pre><code>http://localhost:8000/items/?q=foo&amp;q=bar\n</code></pre> <p>voc\u00ea receber\u00e1 os m\u00faltiplos par\u00e2metros de consulta <code>q</code> com os valores (<code>foo</code> e <code>bar</code>) em uma lista (<code>list</code>) Python dentro da fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota, no par\u00e2metro da fun\u00e7\u00e3o <code>q</code>.</p> <p>Assim, a resposta para essa URL seria:</p> <pre><code>{\n  \"q\": [\n    \"foo\",\n    \"bar\"\n  ]\n}\n</code></pre> <p>Dica</p> <p>Para declarar um par\u00e2metro de consulta com o tipo <code>list</code>, como no exemplo acima, voc\u00ea precisa usar explicitamente o <code>Query</code>, caso contr\u00e1rio ser\u00e1 interpretado como um corpo da requisi\u00e7\u00e3o.</p> <p>A documenta\u00e7\u00e3o interativa da API ir\u00e1 atualizar de acordo, permitindo m\u00faltiplos valores:</p> <p></p>"},{"location":"tutorial/query-params-str-validations/#lista-de-parametros-de-consulta-multiplos-valores-por-padrao","title":"Lista de par\u00e2metros de consulta / m\u00faltiplos valores por padr\u00e3o","text":"<p>E voc\u00ea tamb\u00e9m pode definir uma lista (<code>list</code>) de valores padr\u00e3o caso nenhum seja informado:</p> Python 3.8+ - non-Annotated <pre><code>from typing import List\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: List[str] = Query(default=[\"foo\", \"bar\"])):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.9+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[list[str], Query()] = [\"foo\", \"bar\"]):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> <pre><code>from typing import List\n\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[List[str], Query()] = [\"foo\", \"bar\"]):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: list[str] = Query(default=[\"foo\", \"bar\"])):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> <p>Se voc\u00ea for at\u00e9:</p> <pre><code>http://localhost:8000/items/\n</code></pre> <p>O valor padr\u00e3o de <code>q</code> ser\u00e1: <code>[\"foo\", \"bar\"]</code> e sua resposta ser\u00e1:</p> <pre><code>{\n  \"q\": [\n    \"foo\",\n    \"bar\"\n  ]\n}\n</code></pre>"},{"location":"tutorial/query-params-str-validations/#usando-list","title":"Usando <code>list</code>","text":"<p>Voc\u00ea tamb\u00e9m pode utilizar o tipo <code>list</code> diretamente em vez de <code>List[str]</code>:</p> Python 3.8+ - non-Annotated <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: list = Query(default=[])):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[list, Query()] = []):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> <pre><code>from readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[list, Query()] = []):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> <p>Observa\u00e7\u00e3o</p> <p>Tenha em mente que neste caso, o ReadyAPI n\u00e3o ir\u00e1 validar os conte\u00fados da lista.</p> <p>Por exemplo, um <code>List[int]</code> iria validar (e documentar) que os cont\u00e9udos da lista s\u00e3o n\u00fameros inteiros. Mas apenas <code>list</code> n\u00e3o.</p>"},{"location":"tutorial/query-params-str-validations/#declarando-mais-metadados","title":"Declarando mais metadados","text":"<p>Voc\u00ea pode adicionar mais informa\u00e7\u00f5es sobre o par\u00e2metro.</p> <p>Essa informa\u00e7\u00f5es ser\u00e3o inclusas no esquema do OpenAPI e utilizado pela documenta\u00e7\u00e3o interativa e ferramentas externas.</p> <p>Observa\u00e7\u00e3o</p> <p>Tenha em mente que cada ferramenta oferece diferentes n\u00edveis de suporte ao OpenAPI.</p> <p>Algumas delas n\u00e3o exibem todas as informa\u00e7\u00f5es extras que declaramos, ainda que na maioria dos casos, esses recursos est\u00e3o planejados para desenvolvimento.</p> <p>Voc\u00ea pode adicionar um <code>title</code>:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Union[str, None] = Query(default=None, title=\"Query string\", min_length=3),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[str | None, Query(title=\"Query string\", min_length=3)] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[Union[str, None], Query(title=\"Query string\", min_length=3)] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[Union[str, None], Query(title=\"Query string\", min_length=3)] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: str | None = Query(default=None, title=\"Query string\", min_length=3),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>E uma <code>description</code>:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Union[str, None] = Query(\n        default=None,\n        title=\"Query string\",\n        description=\"Query string for the items to search in the database that have a good match\",\n        min_length=3,\n    ),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        str | None,\n        Query(\n            title=\"Query string\",\n            description=\"Query string for the items to search in the database that have a good match\",\n            min_length=3,\n        ),\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        Union[str, None],\n        Query(\n            title=\"Query string\",\n            description=\"Query string for the items to search in the database that have a good match\",\n            min_length=3,\n        ),\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        Union[str, None],\n        Query(\n            title=\"Query string\",\n            description=\"Query string for the items to search in the database that have a good match\",\n            min_length=3,\n        ),\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: str | None = Query(\n        default=None,\n        title=\"Query string\",\n        description=\"Query string for the items to search in the database that have a good match\",\n        min_length=3,\n    ),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre>"},{"location":"tutorial/query-params-str-validations/#apelidos-alias-de-parametros","title":"Apelidos (alias) de par\u00e2metros","text":"<p>Imagine que voc\u00ea queira que um par\u00e2metro tenha o nome <code>item-query</code>.</p> <p>Desta maneira:</p> <pre><code>http://127.0.0.1:8000/items/?item-query=foobaritems\n</code></pre> <p>Mas o nome <code>item-query</code> n\u00e3o \u00e9 um nome de v\u00e1riavel v\u00e1lido no Python.</p> <p>O que mais se aproxima \u00e9 <code>item_query</code>.</p> <p>Mas ainda voc\u00ea precisa que o nome seja exatamente <code>item-query</code>...</p> <p>Ent\u00e3o voc\u00ea pode declarar um <code>alias</code>, e esse apelido (alias) que ser\u00e1 utilizado para encontrar o valor do par\u00e2metro:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Union[str, None] = Query(default=None, alias=\"item-query\")):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str | None, Query(alias=\"item-query\")] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: str | None = Query(default=None, alias=\"item-query\")):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre>"},{"location":"tutorial/query-params-str-validations/#parametros-descontinuados","title":"Par\u00e2metros descontinuados","text":"<p>Agora vamos dizer que voc\u00ea n\u00e3o queria mais utilizar um par\u00e2metro.</p> <p>Voc\u00ea tem que deix\u00e1-lo ativo por um tempo, j\u00e1 que existem clientes o utilizando. Mas voc\u00ea quer que a documenta\u00e7\u00e3o deixe claro que este par\u00e2metro ser\u00e1 descontinuado.</p> <p>Ent\u00e3o voc\u00ea passa o par\u00e2metro <code>deprecated=True</code> para <code>Query</code>:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Union[str, None] = Query(\n        default=None,\n        alias=\"item-query\",\n        title=\"Query string\",\n        description=\"Query string for the items to search in the database that have a good match\",\n        min_length=3,\n        max_length=50,\n        pattern=\"^fixedquery$\",\n        deprecated=True,\n    ),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        str | None,\n        Query(\n            alias=\"item-query\",\n            title=\"Query string\",\n            description=\"Query string for the items to search in the database that have a good match\",\n            min_length=3,\n            max_length=50,\n            pattern=\"^fixedquery$\",\n            deprecated=True,\n        ),\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        Union[str, None],\n        Query(\n            alias=\"item-query\",\n            title=\"Query string\",\n            description=\"Query string for the items to search in the database that have a good match\",\n            min_length=3,\n            max_length=50,\n            pattern=\"^fixedquery$\",\n            deprecated=True,\n        ),\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        Union[str, None],\n        Query(\n            alias=\"item-query\",\n            title=\"Query string\",\n            description=\"Query string for the items to search in the database that have a good match\",\n            min_length=3,\n            max_length=50,\n            pattern=\"^fixedquery$\",\n            deprecated=True,\n        ),\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: str | None = Query(\n        default=None,\n        alias=\"item-query\",\n        title=\"Query string\",\n        description=\"Query string for the items to search in the database that have a good match\",\n        min_length=3,\n        max_length=50,\n        pattern=\"^fixedquery$\",\n        deprecated=True,\n    ),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Na documenta\u00e7\u00e3o aparecer\u00e1 assim:</p> <p></p>"},{"location":"tutorial/query-params-str-validations/#recapitulando","title":"Recapitulando","text":"<p>Voc\u00ea pode adicionar valida\u00e7\u00f5es e metadados adicionais aos seus par\u00e2metros.</p> <p>Valida\u00e7\u00f5es gen\u00e9ricas e metadados:</p> <ul> <li><code>alias</code></li> <li><code>title</code></li> <li><code>description</code></li> <li><code>deprecated</code></li> </ul> <p>Valida\u00e7\u00f5es espec\u00edficas para textos:</p> <ul> <li><code>min_length</code></li> <li><code>max_length</code></li> <li><code>regex</code></li> </ul> <p>Nesses exemplos voc\u00ea viu como declarar valida\u00e7\u00f5es em valores do tipo <code>str</code>.</p> <p>Leia os pr\u00f3ximos cap\u00edtulos para ver como declarar valida\u00e7\u00e3o de outros tipos, como n\u00fameros.</p>"},{"location":"tutorial/query-params/","title":"Par\u00e2metros de Consulta","text":"<p>Quando voc\u00ea declara outros par\u00e2metros na fun\u00e7\u00e3o que n\u00e3o fazem parte dos par\u00e2metros da rota, esses par\u00e2metros s\u00e3o automaticamente interpretados como par\u00e2metros de \"consulta\".</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\n@app.get(\"/items/\")\nasync def read_item(skip: int = 0, limit: int = 10):\n    return fake_items_db[skip : skip + limit]\n</code></pre> <p>A consulta \u00e9 o conjunto de pares chave-valor que vai depois de <code>?</code> na URL, separado pelo caractere <code>&amp;</code>.</p> <p>Por exemplo, na URL:</p> <pre><code>http://127.0.0.1:8000/items/?skip=0&amp;limit=10\n</code></pre> <p>...os par\u00e2metros da consulta s\u00e3o:</p> <ul> <li><code>skip</code>: com o valor <code>0</code></li> <li><code>limit</code>: com o valor <code>10</code></li> </ul> <p>Como eles s\u00e3o parte da URL, eles s\u00e3o \"naturalmente\" strings.</p> <p>Mas quando voc\u00ea declara eles com os tipos do Python (no exemplo acima, como <code>int</code>), eles s\u00e3o convertidos para aquele tipo e validados em rela\u00e7\u00e3o a ele.</p> <p>Todo o processo que era aplicado para par\u00e2metros de rota tamb\u00e9m \u00e9 aplicado para par\u00e2metros de consulta:</p> <ul> <li>Suporte do editor (obviamente)</li> <li>\"Parsing\" de dados</li> <li>Valida\u00e7\u00e3o de dados</li> <li>Documenta\u00e7\u00e3o autom\u00e1tica</li> </ul>"},{"location":"tutorial/query-params/#valores-padrao","title":"Valores padr\u00e3o","text":"<p>Como os par\u00e2metros de consulta n\u00e3o s\u00e3o uma parte fixa da rota, eles podem ser opcionais e podem ter valores padr\u00e3o.</p> <p>No exemplo acima eles tem valores padr\u00e3o de <code>skip=0</code> e <code>limit=10</code>.</p> <p>Ent\u00e3o, se voc\u00ea for at\u00e9 a URL:</p> <pre><code>http://127.0.0.1:8000/items/\n</code></pre> <p>Seria o mesmo que ir para:</p> <pre><code>http://127.0.0.1:8000/items/?skip=0&amp;limit=10\n</code></pre> <p>Mas, se por exemplo voc\u00ea for para:</p> <pre><code>http://127.0.0.1:8000/items/?skip=20\n</code></pre> <p>Os valores dos par\u00e2metros na sua fun\u00e7\u00e3o ser\u00e3o:</p> <ul> <li><code>skip=20</code>: Por que voc\u00ea definiu isso na URL</li> <li><code>limit=10</code>: Por que esse era o valor padr\u00e3o</li> </ul>"},{"location":"tutorial/query-params/#parametros-opcionais","title":"Par\u00e2metros opcionais","text":"<p>Da mesma forma, voc\u00ea pode declarar par\u00e2metros de consulta opcionais, definindo o valor padr\u00e3o para <code>None</code>:</p> Python 3.10+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str, q: str | None = None):\n    if q:\n        return {\"item_id\": item_id, \"q\": q}\n    return {\"item_id\": item_id}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str, q: Union[str, None] = None):\n    if q:\n        return {\"item_id\": item_id, \"q\": q}\n    return {\"item_id\": item_id}\n</code></pre> <p>Nesse caso, o par\u00e2metro da fun\u00e7\u00e3o <code>q</code> ser\u00e1 opcional, e <code>None</code> ser\u00e1 o padr\u00e3o.</p> <p>Verificar</p> <p>Voc\u00ea tamb\u00e9m pode notar que o ReadyAPI \u00e9 esperto o suficiente para perceber que o par\u00e2metro da rota <code>item_id</code> \u00e9 um par\u00e2metro da rota, e <code>q</code> n\u00e3o \u00e9, portanto, <code>q</code> \u00e9 o par\u00e2metro de consulta.</p>"},{"location":"tutorial/query-params/#conversao-dos-tipos-de-parametros-de-consulta","title":"Convers\u00e3o dos tipos de par\u00e2metros de consulta","text":"<p>Voc\u00ea tamb\u00e9m pode declarar tipos <code>bool</code>, e eles ser\u00e3o convertidos:</p> Python 3.10+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str, q: str | None = None, short: bool = False):\n    item = {\"item_id\": item_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str, q: Union[str, None] = None, short: bool = False):\n    item = {\"item_id\": item_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item\n</code></pre> <p>Nesse caso, se voc\u00ea for para:</p> <pre><code>http://127.0.0.1:8000/items/foo?short=1\n</code></pre> <p>ou</p> <pre><code>http://127.0.0.1:8000/items/foo?short=True\n</code></pre> <p>ou</p> <pre><code>http://127.0.0.1:8000/items/foo?short=true\n</code></pre> <p>ou</p> <pre><code>http://127.0.0.1:8000/items/foo?short=on\n</code></pre> <p>ou</p> <pre><code>http://127.0.0.1:8000/items/foo?short=yes\n</code></pre> <p>ou qualquer outra varia\u00e7\u00e3o (tudo em mai\u00fascula, primeira letra em mai\u00fascula, etc), a sua fun\u00e7\u00e3o vai ver o par\u00e2metro <code>short</code> com um valor <code>bool</code> de <code>True</code>. Caso contr\u00e1rio <code>False</code>.</p>"},{"location":"tutorial/query-params/#multiplos-parametros-de-rota-e-consulta","title":"M\u00faltiplos par\u00e2metros de rota e consulta","text":"<p>Voc\u00ea pode declarar m\u00faltiplos par\u00e2metros de rota e par\u00e2metros de consulta ao mesmo tempo, o ReadyAPI vai saber o qu\u00ea \u00e9 o qu\u00ea.</p> <p>E voc\u00ea n\u00e3o precisa declarar eles em nenhuma ordem espec\u00edfica.</p> <p>Eles ser\u00e3o detectados pelo nome:</p> Python 3.10+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/users/{user_id}/items/{item_id}\")\nasync def read_user_item(\n    user_id: int, item_id: str, q: str | None = None, short: bool = False\n):\n    item = {\"item_id\": item_id, \"owner_id\": user_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/users/{user_id}/items/{item_id}\")\nasync def read_user_item(\n    user_id: int, item_id: str, q: Union[str, None] = None, short: bool = False\n):\n    item = {\"item_id\": item_id, \"owner_id\": user_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item\n</code></pre>"},{"location":"tutorial/query-params/#parametros-de-consulta-obrigatorios","title":"Par\u00e2metros de consulta obrigat\u00f3rios","text":"<p>Quando voc\u00ea declara um valor padr\u00e3o para par\u00e2metros que n\u00e3o s\u00e3o de rota (at\u00e9 agora, n\u00f3s vimos apenas par\u00e2metros de consulta), ent\u00e3o eles n\u00e3o s\u00e3o obrigat\u00f3rios.</p> <p>Caso voc\u00ea n\u00e3o queira adicionar um valor espec\u00edfico mas queira apenas torn\u00e1-lo opcional, defina o valor padr\u00e3o como <code>None</code>.</p> <p>Por\u00e9m, quando voc\u00ea quiser fazer com que o par\u00e2metro de consulta seja obrigat\u00f3rio, voc\u00ea pode simplesmente n\u00e3o declarar nenhum valor como padr\u00e3o.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_user_item(item_id: str, needy: str):\n    item = {\"item_id\": item_id, \"needy\": needy}\n    return item\n</code></pre> <p>Aqui o par\u00e2metro de consulta <code>needy</code> \u00e9 um valor obrigat\u00f3rio, do tipo <code>str</code>.</p> <p>Se voc\u00ea abrir no seu navegador a URL:</p> <pre><code>http://127.0.0.1:8000/items/foo-item\n</code></pre> <p>... sem adicionar o par\u00e2metro obrigat\u00f3rio <code>needy</code>, voc\u00ea ver\u00e1 um erro como:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"query\",\n                \"needy\"\n            ],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\"\n        }\n    ]\n}\n</code></pre> <p>Como <code>needy</code> \u00e9 um par\u00e2metro obrigat\u00f3rio, voc\u00ea precisaria defini-lo na URL:</p> <pre><code>http://127.0.0.1:8000/items/foo-item?needy=sooooneedy\n</code></pre> <p>...isso deve funcionar:</p> <pre><code>{\n    \"item_id\": \"foo-item\",\n    \"needy\": \"sooooneedy\"\n}\n</code></pre> <p>E claro, voc\u00ea pode definir alguns par\u00e2metros como obrigat\u00f3rios, alguns possuindo um valor padr\u00e3o, e outros sendo totalmente opcionais:</p> Python 3.10+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_user_item(\n    item_id: str, needy: str, skip: int = 0, limit: int | None = None\n):\n    item = {\"item_id\": item_id, \"needy\": needy, \"skip\": skip, \"limit\": limit}\n    return item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_user_item(\n    item_id: str, needy: str, skip: int = 0, limit: Union[int, None] = None\n):\n    item = {\"item_id\": item_id, \"needy\": needy, \"skip\": skip, \"limit\": limit}\n    return item\n</code></pre> <p>Nesse caso, existem 3 par\u00e2metros de consulta:</p> <ul> <li><code>needy</code>, um <code>str</code> obrigat\u00f3rio.</li> <li><code>skip</code>, um <code>int</code> com o valor padr\u00e3o <code>0</code>.</li> <li><code>limit</code>, um <code>int</code> opcional.</li> </ul> <p>Dica</p> <p>Voc\u00ea tamb\u00e9m poderia usar <code>Enum</code> da mesma forma que com Path Parameters.</p>"},{"location":"tutorial/request-files/","title":"Arquivos de Requisi\u00e7\u00e3o","text":"<p>Voc\u00ea pode definir arquivos para serem enviados pelo cliente usando <code>File</code>.</p> <p>Informa\u00e7\u00e3o</p> <p>Para receber arquivos enviados, primeiro instale o <code>python-multipart</code>.</p> <p>Garanta que voc\u00ea criou um ambiente virtual, o ativou e ent\u00e3o o instalou, por exemplo:</p> <pre><code>$ pip install python-multipart\n</code></pre> <p>Isso \u00e9 necess\u00e1rio, visto que os arquivos enviados s\u00e3o enviados como \"dados de formul\u00e1rio\".</p>"},{"location":"tutorial/request-files/#importe-file","title":"Importe <code>File</code>","text":"<p>Importe <code>File</code> e <code>UploadFile</code> de <code>readyapi</code>:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File()]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import File, ReadyAPI, UploadFile\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File()]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: bytes = File()):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre>"},{"location":"tutorial/request-files/#definir-parametros-file","title":"Definir Par\u00e2metros <code>File</code>","text":"<p>Crie par\u00e2metros de arquivo da mesma forma que voc\u00ea faria para <code>Body</code> ou <code>Form</code>:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File()]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import File, ReadyAPI, UploadFile\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File()]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: bytes = File()):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> <p>Informa\u00e7\u00e3o</p> <p><code>File</code> \u00e9 uma classe que herda diretamente de <code>Form</code>.</p> <p>Mas lembre-se que quando voc\u00ea importa <code>Query</code>, <code>Path</code>, <code>File</code> e outros de <code>readyapi</code>, eles s\u00e3o, na verdade, fun\u00e7\u00f5es que retornam classes especiais.</p> <p>Dica</p> <p>Para declarar corpos de arquivos, voc\u00ea precisa usar <code>File</code>, caso contr\u00e1rio, os par\u00e2metros seriam interpretados como par\u00e2metros de consulta ou par\u00e2metros de corpo (JSON).</p> <p>Os arquivos ser\u00e3o enviados como \"dados de formul\u00e1rio\".</p> <p>Se voc\u00ea declarar o tipo do par\u00e2metro da fun\u00e7\u00e3o da sua opera\u00e7\u00e3o de rota como <code>bytes</code>, o ReadyAPI ler\u00e1 o arquivo para voc\u00ea e voc\u00ea receber\u00e1 o conte\u00fado como <code>bytes</code>.</p> <p>Mantenha em mente que isso significa que todo o conte\u00fado ser\u00e1 armazenado na mem\u00f3ria. Isso funcionar\u00e1 bem para arquivos pequenos.</p> <p>Mas h\u00e1 muitos casos em que voc\u00ea pode se beneficiar do uso de <code>UploadFile</code>.</p>"},{"location":"tutorial/request-files/#parametros-de-arquivo-com-uploadfile","title":"Par\u00e2metros de Arquivo com <code>UploadFile</code>","text":"<p>Defina um par\u00e2metro de arquivo com um tipo de <code>UploadFile</code>:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File()]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import File, ReadyAPI, UploadFile\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File()]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: bytes = File()):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> <p>Utilizar <code>UploadFile</code> tem v\u00e1rias vantagens sobre <code>bytes</code>:</p> <ul> <li>Voc\u00ea n\u00e3o precisa utilizar o <code>File()</code> no valor padr\u00e3o do par\u00e2metro.</li> <li>Ele utiliza um arquivo \"spooled\":<ul> <li>Um arquivo armazenado na mem\u00f3ria at\u00e9 um limite m\u00e1ximo de tamanho, e ap\u00f3s passar esse limite, ele ser\u00e1 armazenado no disco.</li> </ul> </li> <li>Isso significa que funcionar\u00e1 bem para arquivos grandes como imagens, v\u00eddeos, bin\u00e1rios grandes, etc., sem consumir toda a mem\u00f3ria.</li> <li>Voc\u00ea pode receber metadados do arquivo enviado.</li> <li>Ele tem uma file-like interface <code>ass\u00edncrona</code>.</li> <li>Ele exp\u00f5e um objeto python <code>SpooledTemporaryFile</code> que voc\u00ea pode passar diretamente para outras bibliotecas que esperam um objeto semelhante a um arquivo(\"file-like\").</li> </ul>"},{"location":"tutorial/request-files/#uploadfile","title":"<code>UploadFile</code>","text":"<p><code>UploadFile</code> tem os seguintes atributos:</p> <ul> <li><code>filename</code>: Uma <code>str</code> com o nome do arquivo original que foi enviado (por exemplo, <code>myimage.jpg</code>).</li> <li><code>content_type</code>: Uma <code>str</code> com o tipo de conte\u00fado (tipo MIME / tipo de m\u00eddia) (por exemplo, <code>image/jpeg</code>).</li> <li><code>file</code>: Um <code>SpooledTemporaryFile</code> (um file-like objeto). Este \u00e9 o objeto de arquivo Python que voc\u00ea pode passar diretamente para outras fun\u00e7\u00f5es ou bibliotecas que esperam um objeto semelhante a um arquivo(\"file-like\").</li> </ul> <p><code>UploadFile</code> tem os seguintes m\u00e9todos <code>ass\u00edncronos</code>. Todos eles chamam os m\u00e9todos de arquivo correspondentes por baixo dos panos (usando o <code>SpooledTemporaryFile</code> interno).</p> <ul> <li><code>write(data)</code>: Escreve <code>data</code> (<code>str</code> ou <code>bytes</code>) no arquivo.</li> <li><code>read(size)</code>: L\u00ea <code>size</code> (<code>int</code>) bytes/caracteres do arquivo.</li> <li><code>seek(offset)</code>: Vai para o byte na posi\u00e7\u00e3o <code>offset</code> (<code>int</code>) no arquivo.<ul> <li>Por exemplo, <code>await myfile.seek(0)</code> ir\u00e1 para o in\u00edcio do arquivo.</li> <li>Isso \u00e9 especialmente \u00fatil se voc\u00ea executar <code>await myfile.read()</code> uma vez e precisar ler o conte\u00fado novamente.</li> </ul> </li> <li><code>close()</code>: Fecha o arquivo.</li> </ul> <p>Como todos esses m\u00e9todos s\u00e3o m\u00e9todos <code>ass\u00edncronos</code>, voc\u00ea precisa \"aguardar\" por eles.</p> <p>Por exemplo, dentro de uma fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota <code>ass\u00edncrona</code>, voc\u00ea pode obter o conte\u00fado com:</p> <pre><code>contents = await myfile.read()\n</code></pre> <p>Se voc\u00ea estiver dentro de uma fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota normal <code>def</code>, voc\u00ea pode acessar o <code>UploadFile.file</code> diretamente, por exemplo:</p> <pre><code>contents = myfile.file.read()\n</code></pre> <p>Detalhes T\u00e9cnicos do <code>async</code></p> <p>Quando voc\u00ea usa os m\u00e9todos <code>async</code>, o ReadyAPI executa os m\u00e9todos de arquivo em um threadpool e aguarda por eles.</p> <p>Detalhes T\u00e9cnicos do Starlette</p> <p>O <code>UploadFile</code> do ReadyAPI herda diretamente do <code>UploadFile</code> do *Starlette** , mas adiciona algumas partes necess\u00e1rias para torn\u00e1-lo compat\u00edvel com o Pydantic e as outras partes do ReadyAPI.</p>"},{"location":"tutorial/request-files/#o-que-e-form-data","title":"O que \u00e9 \"Form Data\"","text":"<p>O jeito que os formul\u00e1rios HTML (<code>&lt;form&gt;&lt;/form&gt;</code>) enviam os dados para o servidor normalmente usa uma codifica\u00e7\u00e3o \"especial\" para esses dados, a qual \u00e9 diferente do JSON.</p> <p>ReadyAPI se certificar\u00e1 de ler esses dados do lugar certo, ao inv\u00e9s de JSON.</p> <p>Detalhes T\u00e9cnicos</p> <p>Dados de formul\u00e1rios normalmente s\u00e3o codificados usando o \"media type\" (tipo de m\u00eddia) <code>application/x-www-form-urlencoded</code> quando n\u00e3o incluem arquivos.</p> <p>Mas quando o formul\u00e1rio inclui arquivos, ele \u00e9 codificado como <code>multipart/form-data</code>. Se voc\u00ea usar <code>File</code>, o ReadyAPI saber\u00e1 que tem que pegar os arquivos da parte correta do corpo da requisi\u00e7\u00e3o.</p> <p>Se voc\u00ea quiser ler mais sobre essas codifica\u00e7\u00f5es e campos de formul\u00e1rio, v\u00e1 para a MDN web docs para <code>POST</code>.</p> <p>Aviso</p> <p>Voc\u00ea pode declarar m\u00faltiplos par\u00e2metros <code>File</code> e <code>Form</code> em uma opera\u00e7\u00e3o de rota, mas voc\u00ea n\u00e3o pode declarar campos <code>Body</code> que voc\u00ea espera receber como JSON, pois a requisi\u00e7\u00e3o ter\u00e1 o corpo codificado usando <code>multipart/form-data</code> ao inv\u00e9s de <code>application/json</code>.</p> <p>Isso n\u00e3o \u00e9 uma limita\u00e7\u00e3o do ReadyAPI, \u00e9 parte do protocolo HTTP.</p>"},{"location":"tutorial/request-files/#upload-de-arquivo-opcional","title":"Upload de Arquivo Opcional","text":"<p>Voc\u00ea pode tornar um arquivo opcional usando anota\u00e7\u00f5es de tipo padr\u00e3o e definindo um valor padr\u00e3o de <code>None</code>:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes | None, File()] = None):\n    if not file:\n        return {\"message\": \"No file sent\"}\n    else:\n        return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile | None = None):\n    if not file:\n        return {\"message\": \"No upload file sent\"}\n    else:\n        return {\"filename\": file.filename}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[Union[bytes, None], File()] = None):\n    if not file:\n        return {\"message\": \"No file sent\"}\n    else:\n        return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: Union[UploadFile, None] = None):\n    if not file:\n        return {\"message\": \"No upload file sent\"}\n    else:\n        return {\"filename\": file.filename}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import File, ReadyAPI, UploadFile\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[Union[bytes, None], File()] = None):\n    if not file:\n        return {\"message\": \"No file sent\"}\n    else:\n        return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: Union[UploadFile, None] = None):\n    if not file:\n        return {\"message\": \"No upload file sent\"}\n    else:\n        return {\"filename\": file.filename}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: bytes | None = File(default=None)):\n    if not file:\n        return {\"message\": \"No file sent\"}\n    else:\n        return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile | None = None):\n    if not file:\n        return {\"message\": \"No upload file sent\"}\n    else:\n        return {\"filename\": file.filename}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Union[bytes, None] = File(default=None)):\n    if not file:\n        return {\"message\": \"No file sent\"}\n    else:\n        return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: Union[UploadFile, None] = None):\n    if not file:\n        return {\"message\": \"No upload file sent\"}\n    else:\n        return {\"filename\": file.filename}\n</code></pre>"},{"location":"tutorial/request-files/#uploadfile-com-metadados-adicionais","title":"<code>UploadFile</code> com Metadados Adicionais","text":"<p>Voc\u00ea tamb\u00e9m pode usar <code>File()</code> com <code>UploadFile</code>, por exemplo, para definir metadados adicionais:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File(description=\"A file read as bytes\")]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(\n    file: Annotated[UploadFile, File(description=\"A file read as UploadFile\")],\n):\n    return {\"filename\": file.filename}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import File, ReadyAPI, UploadFile\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File(description=\"A file read as bytes\")]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(\n    file: Annotated[UploadFile, File(description=\"A file read as UploadFile\")],\n):\n    return {\"filename\": file.filename}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: bytes = File(description=\"A file read as bytes\")):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(\n    file: UploadFile = File(description=\"A file read as UploadFile\"),\n):\n    return {\"filename\": file.filename}\n</code></pre>"},{"location":"tutorial/request-files/#uploads-de-multiplos-arquivos","title":"Uploads de M\u00faltiplos Arquivos","text":"<p>\u00c9 poss\u00edvel realizar o upload de v\u00e1rios arquivos ao mesmo tempo.</p> <p>Eles ser\u00e3o associados ao mesmo \"campo de formul\u00e1rio\" enviado usando \"dados de formul\u00e1rio\".</p> <p>Para usar isso, declare uma lista de <code>bytes</code> ou <code>UploadFile</code>:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import File, ReadyAPI, UploadFile\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(files: Annotated[list[bytes], File()]):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(files: list[UploadFile]):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n&lt;body&gt;\n&lt;form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n    \"\"\"\n    return HTMLResponse(content=content)\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import List\n\nfrom readyapi import File, ReadyAPI, UploadFile\nfrom readyapi.responses import HTMLResponse\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(files: Annotated[List[bytes], File()]):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(files: List[UploadFile]):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n&lt;body&gt;\n&lt;form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n    \"\"\"\n    return HTMLResponse(content=content)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import File, ReadyAPI, UploadFile\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(files: list[bytes] = File()):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(files: list[UploadFile]):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n&lt;body&gt;\n&lt;form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n    \"\"\"\n    return HTMLResponse(content=content)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List\n\nfrom readyapi import File, ReadyAPI, UploadFile\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(files: List[bytes] = File()):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(files: List[UploadFile]):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n&lt;body&gt;\n&lt;form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n    \"\"\"\n    return HTMLResponse(content=content)\n</code></pre> <p>Voc\u00ea receber\u00e1, tal como declarado, uma <code>list</code> de <code>bytes</code> ou <code>UploadFile</code>.</p> <p>Detalhes T\u00e9cnicos</p> <p>Voc\u00ea pode tamb\u00e9m pode usar <code>from starlette.responses import HTMLResponse</code>.</p> <p>ReadyAPI providencia o mesmo <code>starlette.responses</code> que <code>readyapi.responses</code> apenas como uma conveni\u00eancia para voc\u00ea, o desenvolvedor. Mas a maioria das respostas dispon\u00edveis vem diretamente do Starlette.</p>"},{"location":"tutorial/request-files/#uploads-de-multiplos-arquivos-com-metadados-adicionais","title":"Uploads de M\u00faltiplos Arquivos com Metadados Adicionais","text":"<p>Da mesma forma de antes, voc\u00ea pode usar <code>File()</code> para definir par\u00e2metros adicionais, mesmo para <code>UploadFile</code>:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import File, ReadyAPI, UploadFile\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(\n    files: Annotated[list[bytes], File(description=\"Multiple files as bytes\")],\n):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(\n    files: Annotated[\n        list[UploadFile], File(description=\"Multiple files as UploadFile\")\n    ],\n):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n&lt;body&gt;\n&lt;form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n    \"\"\"\n    return HTMLResponse(content=content)\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import List\n\nfrom readyapi import File, ReadyAPI, UploadFile\nfrom readyapi.responses import HTMLResponse\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(\n    files: Annotated[List[bytes], File(description=\"Multiple files as bytes\")],\n):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(\n    files: Annotated[\n        List[UploadFile], File(description=\"Multiple files as UploadFile\")\n    ],\n):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n&lt;body&gt;\n&lt;form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n    \"\"\"\n    return HTMLResponse(content=content)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import File, ReadyAPI, UploadFile\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(\n    files: list[bytes] = File(description=\"Multiple files as bytes\"),\n):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(\n    files: list[UploadFile] = File(description=\"Multiple files as UploadFile\"),\n):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n&lt;body&gt;\n&lt;form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n    \"\"\"\n    return HTMLResponse(content=content)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List\n\nfrom readyapi import File, ReadyAPI, UploadFile\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(\n    files: List[bytes] = File(description=\"Multiple files as bytes\"),\n):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(\n    files: List[UploadFile] = File(description=\"Multiple files as UploadFile\"),\n):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n&lt;body&gt;\n&lt;form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n    \"\"\"\n    return HTMLResponse(content=content)\n</code></pre>"},{"location":"tutorial/request-files/#recapitulando","title":"Recapitulando","text":"<p>Utilize <code>File</code>, <code>bytes</code> e <code>UploadFile</code> para declarar arquivos a serem enviados na requisi\u00e7\u00e3o, enviados como dados de formul\u00e1rio.</p>"},{"location":"tutorial/request-form-models/","title":"Modelos de Formul\u00e1rios","text":"<p>Voc\u00ea pode utilizar Modelos Pydantic para declarar campos de formul\u00e1rios no ReadyAPI.</p> <p>Informa\u00e7\u00e3o</p> <p>Para utilizar formul\u00e1rios, instale primeiramente o <code>python-multipart</code>.</p> <p>Certifique-se de criar um ambiente virtual, ativ\u00e1-lo, e ent\u00e3o instalar. Por exemplo:</p> <pre><code>$ pip install python-multipart\n</code></pre> <p>Nota</p> <p>Isto \u00e9 suportado desde a vers\u00e3o <code>0.113.0</code> do ReadyAPI. \ud83e\udd13</p>"},{"location":"tutorial/request-form-models/#modelos-pydantic-para-formularios","title":"Modelos Pydantic para Formul\u00e1rios","text":"<p>Voc\u00ea precisa apenas declarar um modelo Pydantic com os campos que deseja receber como campos de formul\u00e1rios, e ent\u00e3o declarar o par\u00e2metro como um <code>Form</code>:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Form, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FormData(BaseModel):\n    username: str\n    password: str\n\n\n@app.post(\"/login/\")\nasync def login(data: Annotated[FormData, Form()]):\n    return data\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from pydantic import BaseModel\nfrom readyapi import Form, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass FormData(BaseModel):\n    username: str\n    password: str\n\n\n@app.post(\"/login/\")\nasync def login(data: Annotated[FormData, Form()]):\n    return data\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Form, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FormData(BaseModel):\n    username: str\n    password: str\n\n\n@app.post(\"/login/\")\nasync def login(data: FormData = Form()):\n    return data\n</code></pre> <p>O ReadyAPI ir\u00e1 extrair as informa\u00e7\u00f5es para cada campo dos dados do formul\u00e1rio na requisi\u00e7\u00e3o e dar para voc\u00ea o modelo Pydantic que voc\u00ea definiu.</p>"},{"location":"tutorial/request-form-models/#confira-os-documentos","title":"Confira os Documentos","text":"<p>Voc\u00ea pode verificar na UI de documenta\u00e7\u00e3o em <code>/docs</code>:</p>"},{"location":"tutorial/request-form-models/#proibir-campos-extras-de-formularios","title":"Proibir Campos Extras de Formul\u00e1rios","text":"<p>Em alguns casos de uso especiais (provavelmente n\u00e3o muito comum), voc\u00ea pode desejar restringir os campos do formul\u00e1rio para aceitar apenas os declarados no modelo Pydantic. E proibir qualquer campo extra.</p> <p>Nota</p> <p>Isso \u00e9 suportado deste a vers\u00e3o <code>0.114.0</code> do ReadyAPI. \ud83e\udd13</p> <p>Voc\u00ea pode utilizar a configura\u00e7\u00e3o de modelo do Pydantic para <code>proibir</code> qualquer campo <code>extra</code>:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Form, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FormData(BaseModel):\n    username: str\n    password: str\n    model_config = {\"extra\": \"forbid\"}\n\n\n@app.post(\"/login/\")\nasync def login(data: Annotated[FormData, Form()]):\n    return data\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from pydantic import BaseModel\nfrom readyapi import Form, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass FormData(BaseModel):\n    username: str\n    password: str\n    model_config = {\"extra\": \"forbid\"}\n\n\n@app.post(\"/login/\")\nasync def login(data: Annotated[FormData, Form()]):\n    return data\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Form, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FormData(BaseModel):\n    username: str\n    password: str\n    model_config = {\"extra\": \"forbid\"}\n\n\n@app.post(\"/login/\")\nasync def login(data: FormData = Form()):\n    return data\n</code></pre> <p>Caso um cliente tente enviar informa\u00e7\u00f5es adicionais, ele receber\u00e1 um retorno de erro.</p> <p>Por exemplo, se o cliente tentar enviar os campos de formul\u00e1rio:</p> <ul> <li><code>username</code>: <code>Rick</code></li> <li><code>password</code>: <code>Portal Gun</code></li> <li><code>extra</code>: <code>Mr. Poopybutthole</code></li> </ul> <p>Ele receber\u00e1 um retorno de erro informando-o que o campo <code>extra</code> n\u00e3o \u00e9 permitido:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"type\": \"extra_forbidden\",\n            \"loc\": [\"body\", \"extra\"],\n            \"msg\": \"Extra inputs are not permitted\",\n            \"input\": \"Mr. Poopybutthole\"\n        }\n    ]\n}\n</code></pre>"},{"location":"tutorial/request-form-models/#resumo","title":"Resumo","text":"<p>Voc\u00ea pode utilizar modelos Pydantic para declarar campos de formul\u00e1rios no ReadyAPI. \ud83d\ude0e</p>"},{"location":"tutorial/request-forms-and-files/","title":"Formul\u00e1rios e Arquivos da Requisi\u00e7\u00e3o","text":"<p>Voc\u00ea pode definir arquivos e campos de formul\u00e1rio ao mesmo tempo usando <code>File</code> e <code>Form</code>.</p> <p>Informa\u00e7\u00e3o</p> <p>Para receber arquivos carregados e/ou dados de formul\u00e1rio, primeiro instale <code>python-multipart</code>.</p> <p>Por exemplo: <code>pip install python-multipart</code>.</p>"},{"location":"tutorial/request-forms-and-files/#importe-file-e-form","title":"Importe <code>File</code> e <code>Form</code>","text":"Python 3.8+ - non-Annotated <pre><code>from readyapi import File, Form, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(\n    file: bytes = File(), fileb: UploadFile = File(), token: str = Form()\n):\n    return {\n        \"file_size\": len(file),\n        \"token\": token,\n        \"fileb_content_type\": fileb.content_type,\n    }\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import File, Form, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(\n    file: Annotated[bytes, File()],\n    fileb: Annotated[UploadFile, File()],\n    token: Annotated[str, Form()],\n):\n    return {\n        \"file_size\": len(file),\n        \"token\": token,\n        \"fileb_content_type\": fileb.content_type,\n    }\n</code></pre> <pre><code>from readyapi import File, Form, ReadyAPI, UploadFile\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(\n    file: Annotated[bytes, File()],\n    fileb: Annotated[UploadFile, File()],\n    token: Annotated[str, Form()],\n):\n    return {\n        \"file_size\": len(file),\n        \"token\": token,\n        \"fileb_content_type\": fileb.content_type,\n    }\n</code></pre>"},{"location":"tutorial/request-forms-and-files/#defina-parametros-de-file-e-form","title":"Defina par\u00e2metros de <code>File</code> e <code>Form</code>","text":"<p>Crie par\u00e2metros de arquivo e formul\u00e1rio da mesma forma que voc\u00ea faria para <code>Body</code> ou <code>Query</code>:</p> Python 3.8+ - non-Annotated <pre><code>from readyapi import File, Form, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(\n    file: bytes = File(), fileb: UploadFile = File(), token: str = Form()\n):\n    return {\n        \"file_size\": len(file),\n        \"token\": token,\n        \"fileb_content_type\": fileb.content_type,\n    }\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import File, Form, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(\n    file: Annotated[bytes, File()],\n    fileb: Annotated[UploadFile, File()],\n    token: Annotated[str, Form()],\n):\n    return {\n        \"file_size\": len(file),\n        \"token\": token,\n        \"fileb_content_type\": fileb.content_type,\n    }\n</code></pre> <pre><code>from readyapi import File, Form, ReadyAPI, UploadFile\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(\n    file: Annotated[bytes, File()],\n    fileb: Annotated[UploadFile, File()],\n    token: Annotated[str, Form()],\n):\n    return {\n        \"file_size\": len(file),\n        \"token\": token,\n        \"fileb_content_type\": fileb.content_type,\n    }\n</code></pre> <p>Os arquivos e campos de formul\u00e1rio ser\u00e3o carregados como dados de formul\u00e1rio e voc\u00ea receber\u00e1 os arquivos e campos de formul\u00e1rio.</p> <p>E voc\u00ea pode declarar alguns dos arquivos como <code>bytes</code> e alguns como <code>UploadFile</code>.</p> <p>Aviso</p> <p>Voc\u00ea pode declarar v\u00e1rios par\u00e2metros <code>File</code> e <code>Form</code> em uma opera\u00e7\u00e3o de caminho, mas n\u00e3o \u00e9 poss\u00edvel declarar campos <code>Body</code> para receber como JSON, pois a requisi\u00e7\u00e3o ter\u00e1 o corpo codificado usando <code>multipart/form-data</code> ao inv\u00e9s de <code>application/json</code>.</p> <p>Isso n\u00e3o \u00e9 uma limita\u00e7\u00e3o do ReadyAPI , \u00e9 parte do protocolo HTTP.</p>"},{"location":"tutorial/request-forms-and-files/#recapitulando","title":"Recapitulando","text":"<p>Usar <code>File</code> e <code>Form</code> juntos quando precisar receber dados e arquivos na mesma requisi\u00e7\u00e3o.</p>"},{"location":"tutorial/request-forms/","title":"Dados do formul\u00e1rio","text":"<p>Quando voc\u00ea precisar receber campos de formul\u00e1rio ao inv\u00e9s de JSON, voc\u00ea pode usar <code>Form</code>.</p> <p>Informa\u00e7\u00e3o</p> <p>Para usar formul\u00e1rios, primeiro instale <code>python-multipart</code>.</p> <p>Lembre-se de criar um ambiente virtual, ativ\u00e1-lo e ent\u00e3o instalar a depend\u00eancia, por exemplo:</p> <pre><code>$ pip install python-multipart\n</code></pre>"},{"location":"tutorial/request-forms/#importe-form","title":"Importe <code>Form</code>","text":"<p>Importe <code>Form</code> de <code>readyapi</code>:</p> Python 3.8+ - non-Annotated <pre><code>from readyapi import Form, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.post(\"/login/\")\nasync def login(username: str = Form(), password: str = Form()):\n    return {\"username\": username}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import Form, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.post(\"/login/\")\nasync def login(username: Annotated[str, Form()], password: Annotated[str, Form()]):\n    return {\"username\": username}\n</code></pre> <pre><code>from readyapi import Form, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/login/\")\nasync def login(username: Annotated[str, Form()], password: Annotated[str, Form()]):\n    return {\"username\": username}\n</code></pre>"},{"location":"tutorial/request-forms/#declare-parametros-de-form","title":"Declare par\u00e2metros de <code>Form</code>","text":"<p>Crie par\u00e2metros de formul\u00e1rio da mesma forma que voc\u00ea faria para <code>Body</code> ou <code>Query</code>:</p> Python 3.8+ - non-Annotated <pre><code>from readyapi import Form, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.post(\"/login/\")\nasync def login(username: str = Form(), password: str = Form()):\n    return {\"username\": username}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import Form, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.post(\"/login/\")\nasync def login(username: Annotated[str, Form()], password: Annotated[str, Form()]):\n    return {\"username\": username}\n</code></pre> <pre><code>from readyapi import Form, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/login/\")\nasync def login(username: Annotated[str, Form()], password: Annotated[str, Form()]):\n    return {\"username\": username}\n</code></pre> <p>Por exemplo, em uma das maneiras que a especifica\u00e7\u00e3o OAuth2 pode ser usada (chamada \"fluxo de senha\"), \u00e9 necess\u00e1rio enviar um <code>username</code> e uma <code>password</code> como campos do formul\u00e1rio.</p> <p>A spec exige que os campos sejam exatamente nomeados como <code>username</code> e <code>password</code> e sejam enviados como campos de formul\u00e1rio, n\u00e3o JSON.</p> <p>Com <code>Form</code> voc\u00ea pode declarar os mesmos metadados e valida\u00e7\u00e3o que com <code>Body</code> (e <code>Query</code>, <code>Path</code>, <code>Cookie</code>).</p> <p>Informa\u00e7\u00e3o</p> <p><code>Form</code> \u00e9 uma classe que herda diretamente de <code>Body</code>.</p> <p>Dica</p> <p>Para declarar corpos de formul\u00e1rio, voc\u00ea precisa usar <code>Form</code> explicitamente, porque sem ele os par\u00e2metros seriam interpretados como par\u00e2metros de consulta ou par\u00e2metros de corpo (JSON).</p>"},{"location":"tutorial/request-forms/#sobre-campos-de-formulario","title":"Sobre \"Campos de formul\u00e1rio\"","text":"<p>A forma como os formul\u00e1rios HTML (<code>&lt;form&gt;&lt;/form&gt;</code>) enviam os dados para o servidor normalmente usa uma codifica\u00e7\u00e3o \"especial\" para esses dados, \u00e9 diferente do JSON.</p> <p>O ReadyAPI far\u00e1 a leitura desses dados no lugar certo em vez de JSON.</p> <p>Detalhes t\u00e9cnicos</p> <p>Os dados dos formul\u00e1rios s\u00e3o normalmente codificados usando o \"tipo de m\u00eddia\" <code>application/x-www-form-urlencoded</code>.</p> <p>Mas quando o formul\u00e1rio inclui arquivos, ele \u00e9 codificado como <code>multipart/form-data</code>. Voc\u00ea ler\u00e1 sobre como lidar com arquivos no pr\u00f3ximo cap\u00edtulo.</p> <p>Se voc\u00ea quiser ler mais sobre essas codifica\u00e7\u00f5es e campos de formul\u00e1rio, v\u00e1 para o MDN web docs para <code>POST</code>.</p> <p>Aviso</p> <p>Voc\u00ea pode declarar v\u00e1rios par\u00e2metros <code>Form</code> em uma opera\u00e7\u00e3o de caminho, mas n\u00e3o pode declarar campos <code>Body</code> que espera receber como JSON, pois a solicita\u00e7\u00e3o ter\u00e1 o corpo codificado usando <code>application/x-www- form-urlencoded</code> em vez de <code>application/json</code>.</p> <p>Esta n\u00e3o \u00e9 uma limita\u00e7\u00e3o do ReadyAPI, \u00e9 parte do protocolo HTTP.</p>"},{"location":"tutorial/request-forms/#recapitulando","title":"Recapitulando","text":"<p>Use <code>Form</code> para declarar os par\u00e2metros de entrada de dados de formul\u00e1rio.</p>"},{"location":"tutorial/request_files/","title":"Arquivos de Requisi\u00e7\u00e3o","text":"<p>Voc\u00ea pode definir arquivos para serem enviados para o cliente utilizando <code>File</code>.</p> <p>Info</p> <p>Para receber arquivos compartilhados, primeiro  instale <code>python-multipart</code>.</p> <p>E.g. <code>pip install python-multipart</code>.</p> <p>Isso se deve por que arquivos enviados s\u00e3o enviados como \"dados de formul\u00e1rio\".</p>"},{"location":"tutorial/request_files/#importe-file","title":"Importe <code>File</code>","text":"<p>Importe <code>File</code> e <code>UploadFile</code> do <code>readyapi</code>:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File()]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import File, ReadyAPI, UploadFile\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File()]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: bytes = File()):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre>"},{"location":"tutorial/request_files/#defina-os-parametros-de-file","title":"Defina os par\u00e2metros de <code>File</code>","text":"<p>Cria os par\u00e2metros do arquivo da mesma forma que voc\u00ea faria para <code>Body</code> ou <code>Form</code>:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File()]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import File, ReadyAPI, UploadFile\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File()]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: bytes = File()):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> <p>Informa\u00e7\u00e3o</p> <p><code>File</code> \u00e9 uma classe que herda diretamente de <code>Form</code>.</p> <p>Mas lembre-se que quando voc\u00ea importa <code>Query</code>,<code>Path</code>, <code>File</code>, entre outros, do <code>readyapi</code>, essas s\u00e3o na verdade fun\u00e7\u00f5es que retornam classes especiais.</p> <p>Dica</p> <p>Para declarar o corpo de arquivos, voc\u00ea precisa utilizar <code>File</code>, do contr\u00e1rio os par\u00e2metros seriam interpretados como par\u00e2metros de consulta ou corpo (JSON) da requisi\u00e7\u00e3o.</p> <p>Os arquivos ser\u00e3o enviados como \"form data\".</p> <p>Se voc\u00ea declarar o tipo do seu par\u00e2metro na sua fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota como <code>bytes</code>, o ReadyAPI ir\u00e1 ler o arquivo para voc\u00ea e voc\u00ea receber\u00e1 o conte\u00fado como <code>bytes</code>.</p> <p>Lembre-se que isso significa que o conte\u00fado inteiro ser\u00e1 armazenado em mem\u00f3ria. Isso funciona bem para arquivos pequenos.</p> <p>Mas existem v\u00e1rios casos em que voc\u00ea pode se beneficiar ao usar <code>UploadFile</code>.</p>"},{"location":"tutorial/request_files/#parametros-de-arquivo-com-uploadfile","title":"Par\u00e2metros de arquivo com <code>UploadFile</code>","text":"<p>Defina um par\u00e2metro de arquivo com o tipo <code>UploadFile</code></p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File()]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import File, ReadyAPI, UploadFile\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File()]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: bytes = File()):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> <p>Utilizando <code>UploadFile</code> tem v\u00e1rias vantagens sobre <code>bytes</code>:</p> <ul> <li>Voc\u00ea n\u00e3o precisa utilizar <code>File()</code> como o valor padr\u00e3o do par\u00e2metro.</li> <li>A classe utiliza um arquivo em \"spool\":<ul> <li>Um arquivo guardado em mem\u00f3ria at\u00e9 um tamanho m\u00e1ximo, depois desse limite ele \u00e9 guardado em disco.</li> </ul> </li> <li>Isso significa que a classe funciona bem com arquivos grandes como imagens, v\u00eddeos, bin\u00e1rios extensos, etc. Sem consumir toda a mem\u00f3ria.</li> <li>Voc\u00ea pode obter metadados do arquivo enviado.</li> <li>Ela possui uma interface semelhante a arquivos <code>async</code>.</li> <li>Ela exp\u00f5e um objeto python <code>SpooledTemporaryFile</code> que voc\u00ea pode repassar para bibliotecas que esperam um objeto com comportamento de arquivo.</li> </ul>"},{"location":"tutorial/request_files/#uploadfile","title":"<code>UploadFile</code>","text":"<p><code>UploadFile</code> tem os seguintes atributos:</p> <ul> <li><code>filename</code>: Uma string (<code>str</code>) com o nome original do arquivo enviado (e.g. <code>myimage.jpg</code>).</li> <li><code>content-type</code>: Uma <code>str</code> com o tipo do conte\u00fado (tipo MIME / media) (e.g. <code>image/jpeg</code>).</li> <li><code>file</code>: Um objeto do tipo <code>SpooledTemporaryFile</code> (um objeto file-like). O arquivo propriamente dito que voc\u00ea pode passar diretamente para outras fun\u00e7\u00f5es ou bibliotecas que esperam um objeto \"file-like\".</li> </ul> <p><code>UploadFile</code> tem os seguintes m\u00e9todos <code>async</code>. Todos eles chamam os m\u00e9todos de arquivos por baixo dos panos (usando o objeto <code>SpooledTemporaryFile</code> interno).</p> <ul> <li><code>write(data)</code>: escreve dados (<code>data</code>) em <code>str</code> ou <code>bytes</code> no arquivo.</li> <li><code>read(size)</code>: L\u00ea um n\u00famero de bytes/caracteres de acordo com a quantidade <code>size</code> (<code>int</code>).</li> <li><code>seek(offset)</code>: Navega para o byte na posi\u00e7\u00e3o <code>offset</code> (<code>int</code>) do arquivo.<ul> <li>E.g., <code>await myfile.seek(0)</code> navegaria para o \u00ednicio do arquivo.</li> <li>Isso \u00e9 especialmente \u00fatil se voc\u00ea executar <code>await myfile.read()</code> uma vez e depois precisar ler os conte\u00fados do arquivo de novo.</li> </ul> </li> <li><code>close()</code>: Fecha o arquivo.</li> </ul> <p>Como todos esses m\u00e9todos s\u00e3o ass\u00edncronos (<code>async</code>) voc\u00ea precisa esperar (\"await\") por eles.</p> <p>Por exemplo, dentro de uma fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota ass\u00edncrona voc\u00ea pode obter os conte\u00fados com:</p> <pre><code>contents = await myfile.read()\n</code></pre> <p>Se voc\u00ea estiver dentro de uma fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota definida normalmente com <code>def</code>, voc\u00ea pode acessar <code>UploadFile.file</code> diretamente, por exemplo:</p> <pre><code>contents = myfile.file.read()\n</code></pre> <p>Detalhes t\u00e9cnicos do <code>async</code></p> <p>Quando voc\u00ea utiliza m\u00e9todos ass\u00edncronos, o ReadyAPI executa os m\u00e9todos do arquivo em uma threadpool e espera por eles.</p> <p>Detalhes t\u00e9cnicos do Starlette</p> <p>O <code>UploadFile</code> do ReadyAPI herda diretamente do <code>UploadFile</code> do Starlette, mas adiciona algumas funcionalidades necess\u00e1rias para ser compat\u00edvel com o Pydantic</p>"},{"location":"tutorial/request_files/#o-que-e-form-data","title":"O que \u00e9 \"Form Data\"","text":"<p>A forma como formul\u00e1rios HTML(<code>&lt;form&gt;&lt;/form&gt;</code>) enviam dados para o servidor normalmente utilizam uma codifica\u00e7\u00e3o \"especial\" para esses dados, que \u00e9 diferente do JSON.</p> <p>O ReadyAPI garante que os dados ser\u00e3o lidos da forma correta, em vez do JSON.</p> <p>Detalhes T\u00e9cnicos</p> <p>Dados vindos de formul\u00e1rios geralmente tem a codifica\u00e7\u00e3o com o \"media type\" <code>application/x-www-form-urlencoded</code> quando estes n\u00e3o incluem arquivos.</p> <p>Mas quando os dados incluem arquivos, eles s\u00e3o codificados como <code>multipart/form-data</code>. Se voc\u00ea utilizar <code>File</code>, ReadyAPI saber\u00e1 que deve receber os arquivos da parte correta do corpo da requisi\u00e7\u00e3o.</p> <p>Se voc\u00ea quer ler mais sobre essas codifica\u00e7\u00f5es e campos de formul\u00e1rio, veja a documenta\u00e7\u00e3o online da MDN sobre <code> POST</code> .</p> <p>Aviso</p> <p>Voc\u00ea pode declarar m\u00faltiplos par\u00e2metros <code>File</code> e <code>Form</code> em uma opera\u00e7\u00e3o de rota, mas voc\u00ea n\u00e3o pode declarar campos <code>Body</code>que seriam recebidos como JSON junto desses par\u00e2metros, por que a codifica\u00e7\u00e3o do corpo da requisi\u00e7\u00e3o ser\u00e1 <code>multipart/form-data</code> em vez de <code>application/json</code>.</p> <p>Isso n\u00e3o \u00e9 uma limita\u00e7\u00e3o do ReadyAPI, \u00e9 uma parte do protocolo HTTP.</p>"},{"location":"tutorial/request_files/#arquivo-de-upload-opcional","title":"Arquivo de upload opcional","text":"<p>Voc\u00ea pode definir um arquivo como opcional utilizando as anota\u00e7\u00f5es de tipo padr\u00e3o e definindo o valor padr\u00e3o como <code>None</code>:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes | None, File()] = None):\n    if not file:\n        return {\"message\": \"No file sent\"}\n    else:\n        return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile | None = None):\n    if not file:\n        return {\"message\": \"No upload file sent\"}\n    else:\n        return {\"filename\": file.filename}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[Union[bytes, None], File()] = None):\n    if not file:\n        return {\"message\": \"No file sent\"}\n    else:\n        return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: Union[UploadFile, None] = None):\n    if not file:\n        return {\"message\": \"No upload file sent\"}\n    else:\n        return {\"filename\": file.filename}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import File, ReadyAPI, UploadFile\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[Union[bytes, None], File()] = None):\n    if not file:\n        return {\"message\": \"No file sent\"}\n    else:\n        return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: Union[UploadFile, None] = None):\n    if not file:\n        return {\"message\": \"No upload file sent\"}\n    else:\n        return {\"filename\": file.filename}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: bytes | None = File(default=None)):\n    if not file:\n        return {\"message\": \"No file sent\"}\n    else:\n        return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile | None = None):\n    if not file:\n        return {\"message\": \"No upload file sent\"}\n    else:\n        return {\"filename\": file.filename}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Union[bytes, None] = File(default=None)):\n    if not file:\n        return {\"message\": \"No file sent\"}\n    else:\n        return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: Union[UploadFile, None] = None):\n    if not file:\n        return {\"message\": \"No upload file sent\"}\n    else:\n        return {\"filename\": file.filename}\n</code></pre>"},{"location":"tutorial/request_files/#uploadfile-com-metadados-adicionais","title":"<code>UploadFile</code> com Metadados Adicionais","text":"<p>Voc\u00ea tamb\u00e9m pode utilizar <code>File()</code> com <code>UploadFile</code>, por exemplo, para definir metadados adicionais:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File(description=\"A file read as bytes\")]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(\n    file: Annotated[UploadFile, File(description=\"A file read as UploadFile\")],\n):\n    return {\"filename\": file.filename}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import File, ReadyAPI, UploadFile\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File(description=\"A file read as bytes\")]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(\n    file: Annotated[UploadFile, File(description=\"A file read as UploadFile\")],\n):\n    return {\"filename\": file.filename}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: bytes = File(description=\"A file read as bytes\")):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(\n    file: UploadFile = File(description=\"A file read as UploadFile\"),\n):\n    return {\"filename\": file.filename}\n</code></pre>"},{"location":"tutorial/request_files/#envio-de-multiplos-arquivos","title":"Envio de M\u00faltiplos Arquivos","text":"<p>\u00c9 poss\u00edvel enviar m\u00faltiplos arquivos ao mesmo tmepo.</p> <p>Ele ficam associados ao mesmo \"campo do formul\u00e1rio\" enviado com \"form data\".</p> <p>Para usar isso, declare uma lista de <code>bytes</code> ou <code>UploadFile</code>:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import File, ReadyAPI, UploadFile\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(files: Annotated[list[bytes], File()]):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(files: list[UploadFile]):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n&lt;body&gt;\n&lt;form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n    \"\"\"\n    return HTMLResponse(content=content)\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import List\n\nfrom readyapi import File, ReadyAPI, UploadFile\nfrom readyapi.responses import HTMLResponse\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(files: Annotated[List[bytes], File()]):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(files: List[UploadFile]):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n&lt;body&gt;\n&lt;form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n    \"\"\"\n    return HTMLResponse(content=content)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import File, ReadyAPI, UploadFile\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(files: list[bytes] = File()):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(files: list[UploadFile]):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n&lt;body&gt;\n&lt;form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n    \"\"\"\n    return HTMLResponse(content=content)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List\n\nfrom readyapi import File, ReadyAPI, UploadFile\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(files: List[bytes] = File()):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(files: List[UploadFile]):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n&lt;body&gt;\n&lt;form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n    \"\"\"\n    return HTMLResponse(content=content)\n</code></pre> <p>Voc\u00ea ir\u00e1 receber, como delcarado uma lista (<code>list</code>) de <code>bytes</code> ou <code>UploadFile</code>s,</p> <p>Detalhes T\u00e9cnicos</p> <p>Voc\u00ea tamb\u00e9m poderia utilizar <code>from starlette.responses import HTMLResponse</code>.</p> <p>O ReadyAPI fornece as mesmas <code>starlette.responses</code> como <code>readyapi.responses</code> apenas como um facilitador para voc\u00ea, desenvolvedor. Mas a maior parte das respostas vem diretamente do Starlette.</p>"},{"location":"tutorial/request_files/#enviando-multiplos-arquivos-com-metadados-adicionais","title":"Enviando M\u00faltiplos Arquivos com Metadados Adicionais","text":"<p>E da mesma forma que antes, voc\u00ea pode utilizar <code>File()</code> para definir par\u00e2metros adicionais, at\u00e9 mesmo para <code>UploadFile</code>:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import File, ReadyAPI, UploadFile\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(\n    files: Annotated[list[bytes], File(description=\"Multiple files as bytes\")],\n):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(\n    files: Annotated[\n        list[UploadFile], File(description=\"Multiple files as UploadFile\")\n    ],\n):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n&lt;body&gt;\n&lt;form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n    \"\"\"\n    return HTMLResponse(content=content)\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import List\n\nfrom readyapi import File, ReadyAPI, UploadFile\nfrom readyapi.responses import HTMLResponse\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(\n    files: Annotated[List[bytes], File(description=\"Multiple files as bytes\")],\n):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(\n    files: Annotated[\n        List[UploadFile], File(description=\"Multiple files as UploadFile\")\n    ],\n):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n&lt;body&gt;\n&lt;form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n    \"\"\"\n    return HTMLResponse(content=content)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import File, ReadyAPI, UploadFile\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(\n    files: list[bytes] = File(description=\"Multiple files as bytes\"),\n):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(\n    files: list[UploadFile] = File(description=\"Multiple files as UploadFile\"),\n):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n&lt;body&gt;\n&lt;form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n    \"\"\"\n    return HTMLResponse(content=content)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List\n\nfrom readyapi import File, ReadyAPI, UploadFile\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(\n    files: List[bytes] = File(description=\"Multiple files as bytes\"),\n):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(\n    files: List[UploadFile] = File(description=\"Multiple files as UploadFile\"),\n):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n&lt;body&gt;\n&lt;form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n    \"\"\"\n    return HTMLResponse(content=content)\n</code></pre>"},{"location":"tutorial/request_files/#recapitulando","title":"Recapitulando","text":"<p>Use <code>File</code>, <code>bytes</code> e <code>UploadFile</code> para declarar arquivos que ser\u00e3o enviados na requisi\u00e7\u00e3o, enviados como dados do formul\u00e1rio.</p>"},{"location":"tutorial/response-model/","title":"Modelo de resposta - Tipo de retorno","text":"<p>Voc\u00ea pode declarar o tipo usado para a resposta anotando o tipo de retorno da fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota.</p> <p>Voc\u00ea pode usar anota\u00e7\u00f5es de tipo da mesma forma que usaria para dados de entrada em par\u00e2metros de fun\u00e7\u00e3o, voc\u00ea pode usar modelos Pydantic, listas, dicion\u00e1rios, valores escalares como inteiros, booleanos, etc.</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item) -&gt; Item:\n    return item\n\n\n@app.get(\"/items/\")\nasync def read_items() -&gt; list[Item]:\n    return [\n        Item(name=\"Portal Gun\", price=42.0),\n        Item(name=\"Plumbus\", price=32.0),\n    ]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item) -&gt; Item:\n    return item\n\n\n@app.get(\"/items/\")\nasync def read_items() -&gt; list[Item]:\n    return [\n        Item(name=\"Portal Gun\", price=42.0),\n        Item(name=\"Plumbus\", price=32.0),\n    ]\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item) -&gt; Item:\n    return item\n\n\n@app.get(\"/items/\")\nasync def read_items() -&gt; List[Item]:\n    return [\n        Item(name=\"Portal Gun\", price=42.0),\n        Item(name=\"Plumbus\", price=32.0),\n    ]\n</code></pre> <p>O ReadyAPI usar\u00e1 este tipo de retorno para:</p> <ul> <li>Validar os dados retornados.<ul> <li>Se os dados forem inv\u00e1lidos (por exemplo, se estiver faltando um campo), significa que o c\u00f3digo do seu aplicativo est\u00e1 quebrado, n\u00e3o retornando o que deveria, e retornar\u00e1 um erro de servidor em vez de retornar dados incorretos. Dessa forma, voc\u00ea e seus clientes podem ter certeza de que receber\u00e3o os dados e o formato de dados esperados.</li> </ul> </li> <li>Adicionar um Esquema JSON para a resposta, na opera\u00e7\u00e3o de rota do OpenAPI.<ul> <li>Isso ser\u00e1 usado pela documenta\u00e7\u00e3o autom\u00e1tica.</li> <li>Tamb\u00e9m ser\u00e1 usado por ferramentas de gera\u00e7\u00e3o autom\u00e1tica de c\u00f3digo do cliente.</li> </ul> </li> </ul> <p>Mas o mais importante:</p> <ul> <li>Ele limitar\u00e1 e filtrar\u00e1 os dados de sa\u00edda para o que est\u00e1 definido no tipo de retorno.<ul> <li>Isso \u00e9 particularmente importante para a seguran\u00e7a, veremos mais sobre isso abaixo.</li> </ul> </li> </ul>"},{"location":"tutorial/response-model/#parametro-response_model","title":"Par\u00e2metro <code>response_model</code>","text":"<p>Existem alguns casos em que voc\u00ea precisa ou deseja retornar alguns dados que n\u00e3o s\u00e3o exatamente o que o tipo declara.</p> <p>Por exemplo, voc\u00ea pode querer retornar um dicion\u00e1rio ou um objeto de banco de dados, mas declar\u00e1-lo como um modelo Pydantic. Dessa forma, o modelo Pydantic faria toda a documenta\u00e7\u00e3o de dados, valida\u00e7\u00e3o, etc. para o objeto que voc\u00ea retornou (por exemplo, um dicion\u00e1rio ou objeto de banco de dados).</p> <p>Se voc\u00ea adicionasse a anota\u00e7\u00e3o do tipo de retorno, ferramentas e editores reclamariam com um erro (correto) informando que sua fun\u00e7\u00e3o est\u00e1 retornando um tipo (por exemplo, um dict) diferente do que voc\u00ea declarou (por exemplo, um modelo Pydantic).</p> <p>Nesses casos, voc\u00ea pode usar o par\u00e2metro <code>response_model</code> do decorador de opera\u00e7\u00e3o de rota  em vez do tipo de retorno.</p> <p>Voc\u00ea pode usar o par\u00e2metro <code>response_model</code> em qualquer uma das opera\u00e7\u00f5es de rota:</p> <ul> <li><code>@app.get()</code></li> <li><code>@app.post()</code></li> <li><code>@app.put()</code></li> <li><code>@app.delete()</code></li> <li>etc.</li> </ul> Python 3.10+ <pre><code>from typing import Any\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []\n\n\n@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item) -&gt; Any:\n    return item\n\n\n@app.get(\"/items/\", response_model=list[Item])\nasync def read_items() -&gt; Any:\n    return [\n        {\"name\": \"Portal Gun\", \"price\": 42.0},\n        {\"name\": \"Plumbus\", \"price\": 32.0},\n    ]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Any, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []\n\n\n@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item) -&gt; Any:\n    return item\n\n\n@app.get(\"/items/\", response_model=list[Item])\nasync def read_items() -&gt; Any:\n    return [\n        {\"name\": \"Portal Gun\", \"price\": 42.0},\n        {\"name\": \"Plumbus\", \"price\": 32.0},\n    ]\n</code></pre> <pre><code>from typing import Any, List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []\n\n\n@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item) -&gt; Any:\n    return item\n\n\n@app.get(\"/items/\", response_model=List[Item])\nasync def read_items() -&gt; Any:\n    return [\n        {\"name\": \"Portal Gun\", \"price\": 42.0},\n        {\"name\": \"Plumbus\", \"price\": 32.0},\n    ]\n</code></pre> <p>Nota</p> <p>Observe que <code>response_model</code> \u00e9 um par\u00e2metro do m\u00e9todo \"decorator\" (<code>get</code>, <code>post</code>, etc). N\u00e3o da sua fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota, como todos os par\u00e2metros e corpo.</p> <p><code>response_model</code> recebe o mesmo tipo que voc\u00ea declararia para um campo de modelo Pydantic, ent\u00e3o, pode ser um modelo Pydantic, mas tamb\u00e9m pode ser, por exemplo, uma <code>lista</code> de modelos Pydantic, como <code>List[Item]</code>.</p> <p>O ReadyAPI usar\u00e1 este <code>response_model</code> para fazer toda a documenta\u00e7\u00e3o de dados, valida\u00e7\u00e3o, etc. e tamb\u00e9m para converter e filtrar os dados de sa\u00edda para sua declara\u00e7\u00e3o de tipo.</p> <p>Dica</p> <p>Se voc\u00ea tiver verifica\u00e7\u00f5es de tipo rigorosas em seu editor, mypy, etc, voc\u00ea pode declarar o tipo de retorno da fun\u00e7\u00e3o como <code>Any</code>.</p> <p>Dessa forma, voc\u00ea diz ao editor que est\u00e1 retornando qualquer coisa intencionalmente. Mas o ReadyAPI ainda far\u00e1 a documenta\u00e7\u00e3o de dados, valida\u00e7\u00e3o, filtragem, etc. com o <code>response_model</code>.</p>"},{"location":"tutorial/response-model/#prioridade-response_model","title":"Prioridade <code>response_model</code>","text":"<p>Se voc\u00ea declarar tanto um tipo de retorno quanto um <code>response_model</code>, o <code>response_model</code> ter\u00e1 prioridade e ser\u00e1 usado pelo ReadyAPI.</p> <p>Dessa forma, voc\u00ea pode adicionar anota\u00e7\u00f5es de tipo corretas \u00e0s suas fun\u00e7\u00f5es, mesmo quando estiver retornando um tipo diferente do modelo de resposta, para ser usado pelo editor e ferramentas como mypy. E ainda assim voc\u00ea pode fazer com que o ReadyAPI fa\u00e7a a valida\u00e7\u00e3o de dados, documenta\u00e7\u00e3o, etc. usando o <code>response_model</code>.</p> <p>Voc\u00ea tamb\u00e9m pode usar <code>response_model=None</code> para desabilitar a cria\u00e7\u00e3o de um modelo de resposta para essa opera\u00e7\u00e3o de rota, voc\u00ea pode precisar fazer isso se estiver adicionando anota\u00e7\u00f5es de tipo para coisas que n\u00e3o s\u00e3o campos Pydantic v\u00e1lidos, voc\u00ea ver\u00e1 um exemplo disso em uma das se\u00e7\u00f5es abaixo.</p>"},{"location":"tutorial/response-model/#retorna-os-mesmos-dados-de-entrada","title":"Retorna os mesmos dados de entrada","text":"<p>Aqui estamos declarando um modelo <code>UserIn</code>, ele conter\u00e1 uma senha em texto simples:</p> Python 3.10+ <pre><code>from pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n# Don't do this in production!\n@app.post(\"/user/\")\nasync def create_user(user: UserIn) -&gt; UserIn:\n    return user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n# Don't do this in production!\n@app.post(\"/user/\")\nasync def create_user(user: UserIn) -&gt; UserIn:\n    return user\n</code></pre> <p>Informa\u00e7\u00e3o</p> <p>Para usar <code>EmailStr</code>, primeiro instale <code>email-validator</code>.</p> <p>Certifique-se de criar um ambiente virtual, ative-o e instale-o, por exemplo:</p> <pre><code>$ pip install email-validator\n</code></pre> <p>ou com:</p> <pre><code>$ pip install \"pydantic[email]\"\n</code></pre> <p>E estamos usando este modelo para declarar nossa entrada e o mesmo modelo para declarar nossa sa\u00edda:</p> Python 3.10+ <pre><code>from pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n# Don't do this in production!\n@app.post(\"/user/\")\nasync def create_user(user: UserIn) -&gt; UserIn:\n    return user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n# Don't do this in production!\n@app.post(\"/user/\")\nasync def create_user(user: UserIn) -&gt; UserIn:\n    return user\n</code></pre> <p>Agora, sempre que um navegador estiver criando um usu\u00e1rio com uma senha, a API retornar\u00e1 a mesma senha na resposta.</p> <p>Neste caso, pode n\u00e3o ser um problema, porque \u00e9 o mesmo usu\u00e1rio enviando a senha.</p> <p>Mas se usarmos o mesmo modelo para outra opera\u00e7\u00e3o de rota, poder\u00edamos estar enviando as senhas dos nossos usu\u00e1rios para todos os clientes.</p> <p>Perigo</p> <p>Nunca armazene a senha simples de um usu\u00e1rio ou envie-a em uma resposta como esta, a menos que voc\u00ea saiba todas as ressalvas e saiba o que est\u00e1 fazendo.</p>"},{"location":"tutorial/response-model/#adicionar-um-modelo-de-saida","title":"Adicionar um modelo de sa\u00edda","text":"<p>Podemos, em vez disso, criar um modelo de entrada com a senha em texto simples e um modelo de sa\u00edda sem ela:</p> Python 3.10+ <pre><code>from typing import Any\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user: UserIn) -&gt; Any:\n    return user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Any, Union\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user: UserIn) -&gt; Any:\n    return user\n</code></pre> <p>Aqui, embora nossa fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota esteja retornando o mesmo usu\u00e1rio de entrada que cont\u00e9m a senha:</p> Python 3.10+ <pre><code>from typing import Any\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user: UserIn) -&gt; Any:\n    return user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Any, Union\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user: UserIn) -&gt; Any:\n    return user\n</code></pre> <p>...declaramos o <code>response_model</code> como nosso modelo <code>UserOut</code>, que n\u00e3o inclui a senha:</p> Python 3.10+ <pre><code>from typing import Any\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user: UserIn) -&gt; Any:\n    return user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Any, Union\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user: UserIn) -&gt; Any:\n    return user\n</code></pre> <p>Ent\u00e3o, ReadyAPI cuidar\u00e1 de filtrar todos os dados que n\u00e3o s\u00e3o declarados no modelo de sa\u00edda (usando Pydantic).</p>"},{"location":"tutorial/response-model/#response_model-ou-tipo-de-retorno","title":"<code>response_model</code> ou Tipo de Retorno","text":"<p>Neste caso, como os dois modelos s\u00e3o diferentes, se anot\u00e1ssemos o tipo de retorno da fun\u00e7\u00e3o como <code>UserOut</code>, o editor e as ferramentas reclamariam que estamos retornando um tipo inv\u00e1lido, pois s\u00e3o classes diferentes.</p> <p>\u00c9 por isso que neste exemplo temos que declar\u00e1-lo no par\u00e2metro <code>response_model</code>.</p> <p>...mas continue lendo abaixo para ver como superar isso.</p>"},{"location":"tutorial/response-model/#tipo-de-retorno-e-filtragem-de-dados","title":"Tipo de Retorno e Filtragem de Dados","text":"<p>Vamos continuar do exemplo anterior. Quer\u00edamos anotar a fun\u00e7\u00e3o com um tipo, mas quer\u00edamos poder retornar da fun\u00e7\u00e3o algo que realmente inclu\u00edsse mais dados.</p> <p>Queremos que o ReadyAPI continue filtrando os dados usando o modelo de resposta. Para que, embora a fun\u00e7\u00e3o retorne mais dados, a resposta inclua apenas os campos declarados no modelo de resposta.</p> <p>No exemplo anterior, como as classes eram diferentes, tivemos que usar o par\u00e2metro <code>response_model</code>. Mas isso tamb\u00e9m significa que n\u00e3o temos suporte do editor e das ferramentas verificando o tipo de retorno da fun\u00e7\u00e3o.</p> <p>Mas na maioria dos casos em que precisamos fazer algo assim, queremos que o modelo apenas filtre/remova alguns dados como neste exemplo.</p> <p>E nesses casos, podemos usar classes e heran\u00e7a para aproveitar as anota\u00e7\u00f5es de tipo de fun\u00e7\u00e3o para obter melhor suporte no editor e nas ferramentas, e ainda obter a filtragem de dados ReadyAPI.</p> Python 3.10+ <pre><code>from pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass BaseUser(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserIn(BaseUser):\n    password: str\n\n\n@app.post(\"/user/\")\nasync def create_user(user: UserIn) -&gt; BaseUser:\n    return user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass BaseUser(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserIn(BaseUser):\n    password: str\n\n\n@app.post(\"/user/\")\nasync def create_user(user: UserIn) -&gt; BaseUser:\n    return user\n</code></pre> <p>Com isso, temos suporte de ferramentas, de editores e mypy, pois este c\u00f3digo est\u00e1 correto em termos de tipos, mas tamb\u00e9m obtemos a filtragem de dados do ReadyAPI.</p> <p>Como isso funciona? Vamos verificar. \ud83e\udd13</p>"},{"location":"tutorial/response-model/#anotacoes-de-tipo-e-ferramentas","title":"Anota\u00e7\u00f5es de tipo e ferramentas","text":"<p>Primeiro, vamos ver como editores, mypy e outras ferramentas veriam isso.</p> <p><code>BaseUser</code> tem os campos base. Ent\u00e3o <code>UserIn</code> herda de <code>BaseUser</code> e adiciona o campo <code>password</code>, ent\u00e3o, ele incluir\u00e1 todos os campos de ambos os modelos.</p> <p>Anotamos o tipo de retorno da fun\u00e7\u00e3o como <code>BaseUser</code>, mas na verdade estamos retornando uma inst\u00e2ncia <code>UserIn</code>.</p> <p>O editor, mypy e outras ferramentas n\u00e3o reclamar\u00e3o disso porque, em termos de digita\u00e7\u00e3o, <code>UserIn</code> \u00e9 uma subclasse de <code>BaseUser</code>, o que significa que \u00e9 um tipo v\u00e1lido quando o que \u00e9 esperado \u00e9 qualquer coisa que seja um <code>BaseUser</code>.</p>"},{"location":"tutorial/response-model/#filtragem-de-dados-readyapi","title":"Filtragem de dados ReadyAPI","text":"<p>Agora, para ReadyAPI, ele ver\u00e1 o tipo de retorno e garantir\u00e1 que o que voc\u00ea retornar inclua apenas os campos que s\u00e3o declarados no tipo.</p> <p>O ReadyAPI faz v\u00e1rias coisas internamente com o Pydantic para garantir que essas mesmas regras de heran\u00e7a de classe n\u00e3o sejam usadas para a filtragem de dados retornados, caso contr\u00e1rio, voc\u00ea pode acabar retornando muito mais dados do que o esperado.</p> <p>Dessa forma, voc\u00ea pode obter o melhor dos dois mundos: anota\u00e7\u00f5es de tipo com suporte a ferramentas e filtragem de dados.</p>"},{"location":"tutorial/response-model/#veja-na-documentacao","title":"Veja na documenta\u00e7\u00e3o","text":"<p>Quando voc\u00ea v\u00ea a documenta\u00e7\u00e3o autom\u00e1tica, pode verificar se o modelo de entrada e o modelo de sa\u00edda ter\u00e3o seus pr\u00f3prios esquemas JSON:</p> <p></p> <p>E ambos os modelos ser\u00e3o usados \u200b\u200bpara a documenta\u00e7\u00e3o interativa da API:</p> <p></p>"},{"location":"tutorial/response-model/#outras-anotacoes-de-tipo-de-retorno","title":"Outras anota\u00e7\u00f5es de tipo de retorno","text":"<p>Pode haver casos em que voc\u00ea retorna algo que n\u00e3o \u00e9 um campo Pydantic v\u00e1lido e anota na fun\u00e7\u00e3o, apenas para obter o suporte fornecido pelas ferramentas (o editor, mypy, etc).</p>"},{"location":"tutorial/response-model/#retornar-uma-resposta-diretamente","title":"Retornar uma resposta diretamente","text":"<p>O caso mais comum seria retornar uma resposta diretamente, conforme explicado posteriormente na documenta\u00e7\u00e3o avan\u00e7ada.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Response\nfrom readyapi.responses import JSONResponse, RedirectResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/portal\")\nasync def get_portal(teleport: bool = False) -&gt; Response:\n    if teleport:\n        return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n    return JSONResponse(content={\"message\": \"Here's your interdimensional portal.\"})\n</code></pre> <p>Este caso simples \u00e9 tratado automaticamente pelo ReadyAPI porque a anota\u00e7\u00e3o do tipo de retorno \u00e9 a classe (ou uma subclasse de) <code>Response</code>.</p> <p>E as ferramentas tamb\u00e9m ficar\u00e3o felizes porque <code>RedirectResponse</code> e \u200b\u200b<code>JSONResponse</code> s\u00e3o subclasses de <code>Response</code>, ent\u00e3o a anota\u00e7\u00e3o de tipo est\u00e1 correta.</p>"},{"location":"tutorial/response-model/#anotar-uma-subclasse-de-resposta","title":"Anotar uma subclasse de resposta","text":"<p>Voc\u00ea tamb\u00e9m pode usar uma subclasse de <code>Response</code> na anota\u00e7\u00e3o de tipo:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import RedirectResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/teleport\")\nasync def get_teleport() -&gt; RedirectResponse:\n    return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n</code></pre> <p>Isso tamb\u00e9m funcionar\u00e1 porque <code>RedirectResponse</code> \u00e9 uma subclasse de <code>Response</code>, e o ReadyAPI tratar\u00e1 automaticamente este caso simples.</p>"},{"location":"tutorial/response-model/#anotacoes-de-tipo-de-retorno-invalido","title":"Anota\u00e7\u00f5es de Tipo de Retorno Inv\u00e1lido","text":"<p>Mas quando voc\u00ea retorna algum outro objeto arbitr\u00e1rio que n\u00e3o \u00e9 um tipo Pydantic v\u00e1lido (por exemplo, um objeto de banco de dados) e voc\u00ea o anota dessa forma na fun\u00e7\u00e3o, o ReadyAPI tentar\u00e1 criar um modelo de resposta Pydantic a partir dessa anota\u00e7\u00e3o de tipo e falhar\u00e1.</p> <p>O mesmo aconteceria se voc\u00ea tivesse algo como uma uni\u00e3o entre tipos diferentes onde um ou mais deles n\u00e3o s\u00e3o tipos Pydantic v\u00e1lidos, por exemplo, isso falharia \ud83d\udca5:</p> Python 3.10+ <pre><code>from readyapi import ReadyAPI, Response\nfrom readyapi.responses import RedirectResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/portal\")\nasync def get_portal(teleport: bool = False) -&gt; Response | dict:\n    if teleport:\n        return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI, Response\nfrom readyapi.responses import RedirectResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/portal\")\nasync def get_portal(teleport: bool = False) -&gt; Union[Response, dict]:\n    if teleport:\n        return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}\n</code></pre> <p>... isso falha porque a anota\u00e7\u00e3o de tipo n\u00e3o \u00e9 um tipo Pydantic e n\u00e3o \u00e9 apenas uma \u00fanica classe ou subclasse <code>Response</code>, \u00e9 uma uni\u00e3o (qualquer uma das duas) entre um <code>Response</code> e \u200b\u200bum <code>dict</code>.</p>"},{"location":"tutorial/response-model/#desabilitar-modelo-de-resposta","title":"Desabilitar modelo de resposta","text":"<p>Continuando com o exemplo acima, voc\u00ea pode n\u00e3o querer ter a valida\u00e7\u00e3o de dados padr\u00e3o, documenta\u00e7\u00e3o, filtragem, etc. que \u00e9 realizada pelo ReadyAPI.</p> <p>Mas voc\u00ea pode querer manter a anota\u00e7\u00e3o do tipo de retorno na fun\u00e7\u00e3o para obter o suporte de ferramentas como editores e verificadores de tipo (por exemplo, mypy).</p> <p>Neste caso, voc\u00ea pode desabilitar a gera\u00e7\u00e3o do modelo de resposta definindo <code>response_model=None</code>:</p> Python 3.10+ <pre><code>from readyapi import ReadyAPI, Response\nfrom readyapi.responses import RedirectResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/portal\", response_model=None)\nasync def get_portal(teleport: bool = False) -&gt; Response | dict:\n    if teleport:\n        return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI, Response\nfrom readyapi.responses import RedirectResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/portal\", response_model=None)\nasync def get_portal(teleport: bool = False) -&gt; Union[Response, dict]:\n    if teleport:\n        return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}\n</code></pre> <p>Isso far\u00e1 com que o ReadyAPI pule a gera\u00e7\u00e3o do modelo de resposta e, dessa forma, voc\u00ea pode ter quaisquer anota\u00e7\u00f5es de tipo de retorno que precisar sem afetar seu aplicativo ReadyAPI. \ud83e\udd13</p>"},{"location":"tutorial/response-model/#parametros-de-codificacao-do-modelo-de-resposta","title":"Par\u00e2metros de codifica\u00e7\u00e3o do modelo de resposta","text":"<p>Seu modelo de resposta pode ter valores padr\u00e3o, como:</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]\n</code></pre> <ul> <li><code>description: Union[str, None] = None</code> (ou <code>str | None = None</code> no Python 3.10) tem um padr\u00e3o de <code>None</code>.</li> <li><code>tax: float = 10.5</code> tem um padr\u00e3o de <code>10.5</code>.</li> <li><code>tags: List[str] = []</code> tem um padr\u00e3o de uma lista vazia: <code>[]</code>.</li> </ul> <p>mas voc\u00ea pode querer omiti-los do resultado se eles n\u00e3o foram realmente armazenados.</p> <p>Por exemplo, se voc\u00ea tem modelos com muitos atributos opcionais em um banco de dados NoSQL, mas n\u00e3o quer enviar respostas JSON muito longas cheias de valores padr\u00e3o.</p>"},{"location":"tutorial/response-model/#usar-o-parametro-response_model_exclude_unset","title":"Usar o par\u00e2metro <code>response_model_exclude_unset</code>","text":"<p>Voc\u00ea pode definir o par\u00e2metro <code>response_model_exclude_unset=True</code> do decorador de opera\u00e7\u00e3o de rota :</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]\n</code></pre> <p>e esses valores padr\u00e3o n\u00e3o ser\u00e3o inclu\u00eddos na resposta, apenas os valores realmente definidos.</p> <p>Ent\u00e3o, se voc\u00ea enviar uma solicita\u00e7\u00e3o para essa opera\u00e7\u00e3o de rota para o item com ID <code>foo</code>, a resposta (sem incluir valores padr\u00e3o) ser\u00e1:</p> <pre><code>{\n\"name\": \"Foo\",\n\"price\": 50.2\n}\n</code></pre> <p>Informa\u00e7\u00e3o</p> <p>No Pydantic v1, o m\u00e9todo era chamado <code>.dict()</code>, ele foi descontinuado (mas ainda suportado) no Pydantic v2 e renomeado para <code>.model_dump()</code>.</p> <p>Os exemplos aqui usam <code>.dict()</code> para compatibilidade com Pydantic v1, mas voc\u00ea deve usar <code>.model_dump()</code> em vez disso se puder usar Pydantic v2.</p> <p>Informa\u00e7\u00e3o</p> <p>O ReadyAPI usa <code>.dict()</code> do modelo Pydantic com seu par\u00e2metro <code>exclude_unset</code> para chegar a isso.</p> <p>Informa\u00e7\u00e3o</p> <p>Voc\u00ea tamb\u00e9m pode usar:</p> <ul> <li><code>response_model_exclude_defaults=True</code></li> <li><code>response_model_exclude_none=True</code></li> </ul> <p>conforme descrito na documenta\u00e7\u00e3o do Pydantic para <code>exclude_defaults</code> e <code>exclude_none</code>.</p>"},{"location":"tutorial/response-model/#dados-com-valores-para-campos-com-padroes","title":"Dados com valores para campos com padr\u00f5es","text":"<p>Mas se seus dados tiverem valores para os campos do modelo com valores padr\u00f5es, como o item com ID <code>bar</code>:</p> <pre><code>{\n\"name\": \"Bar\",\n\"description\": \"The bartenders\",\n\"price\": 62,\n\"tax\": 20.2\n}\n</code></pre> <p>eles ser\u00e3o inclu\u00eddos na resposta.</p>"},{"location":"tutorial/response-model/#dados-com-os-mesmos-valores-que-os-padroes","title":"Dados com os mesmos valores que os padr\u00f5es","text":"<p>Se os dados tiverem os mesmos valores que os padr\u00f5es, como o item com ID <code>baz</code>:</p> <pre><code>{\n\"name\": \"Baz\",\n\"description\": None,\n\"price\": 50.2,\n\"tax\": 10.5,\n\"tags\": []\n}\n</code></pre> <p>O ReadyAPI \u00e9 inteligente o suficiente (na verdade, o Pydantic \u00e9 inteligente o suficiente) para perceber que, embora <code>description</code>, <code>tax</code> e <code>tags</code> tenham os mesmos valores que os padr\u00f5es, eles foram definidos explicitamente (em vez de retirados dos padr\u00f5es).</p> <p>Portanto, eles ser\u00e3o inclu\u00eddos na resposta JSON.</p> <p>Dica</p> <p>Observe que os valores padr\u00e3o podem ser qualquer coisa, n\u00e3o apenas <code>None</code>.</p> <p>Eles podem ser uma lista (<code>[]</code>), um <code>float</code> de <code>10.5</code>, etc.</p>"},{"location":"tutorial/response-model/#response_model_include-e-response_model_exclude","title":"<code>response_model_include</code> e <code>response_model_exclude</code>","text":"<p>Voc\u00ea tamb\u00e9m pode usar os par\u00e2metros <code>response_model_include</code> e <code>response_model_exclude</code> do decorador de opera\u00e7\u00e3o de rota.</p> <p>Eles pegam um <code>set</code> de <code>str</code> com o nome dos atributos para incluir (omitindo o resto) ou para excluir (incluindo o resto).</p> <p>Isso pode ser usado como um atalho r\u00e1pido se voc\u00ea tiver apenas um modelo Pydantic e quiser remover alguns dados da sa\u00edda.</p> <p>Dica</p> <p>Mas ainda \u00e9 recomendado usar as ideias acima, usando v\u00e1rias classes, em vez desses par\u00e2metros.</p> <p>Isso ocorre porque o Schema JSON gerado no OpenAPI do seu aplicativo (e a documenta\u00e7\u00e3o) ainda ser\u00e1 o \u00fanico para o modelo completo, mesmo que voc\u00ea use <code>response_model_include</code> ou <code>response_model_exclude</code> para omitir alguns atributos.</p> <p>Isso tamb\u00e9m se aplica ao <code>response_model_by_alias</code> que funciona de forma semelhante.</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"/items/{item_id}/name\",\n    response_model=Item,\n    response_model_include={\"name\", \"description\"},\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n\n@app.get(\"/items/{item_id}/public\", response_model=Item, response_model_exclude={\"tax\"})\nasync def read_item_public_data(item_id: str):\n    return items[item_id]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"/items/{item_id}/name\",\n    response_model=Item,\n    response_model_include={\"name\", \"description\"},\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n\n@app.get(\"/items/{item_id}/public\", response_model=Item, response_model_exclude={\"tax\"})\nasync def read_item_public_data(item_id: str):\n    return items[item_id]\n</code></pre> <p>Dica</p> <p>A sintaxe <code>{\"nome\", \"descri\u00e7\u00e3o\"}</code> cria um <code>conjunto</code> com esses dois valores.</p> <p>\u00c9 equivalente a <code>set([\"nome\", \"descri\u00e7\u00e3o\"])</code>.</p>"},{"location":"tutorial/response-model/#usando-lists-em-vez-de-sets","title":"Usando <code>list</code>s em vez de <code>set</code>s","text":"<p>Se voc\u00ea esquecer de usar um <code>set</code> e usar uma <code>lista</code> ou <code>tupla</code> em vez disso, o ReadyAPI ainda o converter\u00e1 em um <code>set</code> e funcionar\u00e1 corretamente:</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"/items/{item_id}/name\",\n    response_model=Item,\n    response_model_include=[\"name\", \"description\"],\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n\n@app.get(\"/items/{item_id}/public\", response_model=Item, response_model_exclude=[\"tax\"])\nasync def read_item_public_data(item_id: str):\n    return items[item_id]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"/items/{item_id}/name\",\n    response_model=Item,\n    response_model_include=[\"name\", \"description\"],\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n\n@app.get(\"/items/{item_id}/public\", response_model=Item, response_model_exclude=[\"tax\"])\nasync def read_item_public_data(item_id: str):\n    return items[item_id]\n</code></pre>"},{"location":"tutorial/response-model/#recapitulacao","title":"Recapitula\u00e7\u00e3o","text":"<p>Use o par\u00e2metro <code>response_model</code> do decorador de opera\u00e7\u00e3o de rota para definir modelos de resposta e, especialmente, para garantir que dados privados sejam filtrados.</p> <p>Use <code>response_model_exclude_unset</code> para retornar apenas os valores definidos explicitamente.</p>"},{"location":"tutorial/response-status-code/","title":"C\u00f3digo de status de resposta","text":"<p>Da mesma forma que voc\u00ea pode especificar um modelo de resposta, voc\u00ea tamb\u00e9m pode declarar o c\u00f3digo de status HTTP usado para a resposta com o par\u00e2metro <code>status_code</code> em qualquer uma das opera\u00e7\u00f5es de caminho:</p> <ul> <li><code>@app.get()</code></li> <li><code>@app.post()</code></li> <li><code>@app.put()</code></li> <li><code>@app.delete()</code></li> <li>etc.</li> </ul> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\", status_code=201)\nasync def create_item(name: str):\n    return {\"name\": name}\n</code></pre> <p>Nota</p> <p>Observe que <code>status_code</code> \u00e9 um par\u00e2metro do m\u00e9todo \"decorador\" (get, post, etc). N\u00e3o da sua fun\u00e7\u00e3o de opera\u00e7\u00e3o de caminho, como todos os par\u00e2metros e corpo.</p> <p>O par\u00e2metro <code>status_code</code> recebe um n\u00famero com o c\u00f3digo de status HTTP.</p> <p>Informa\u00e7\u00e3o</p> <p><code>status_code</code> tamb\u00e9m pode receber um <code>IntEnum</code>, como o do Python <code>http.HTTPStatus</code>.</p> <p>Dessa forma:</p> <ul> <li>Este c\u00f3digo de status ser\u00e1 retornado na resposta.</li> <li>Ser\u00e1 documentado como tal no esquema OpenAPI (e, portanto, nas interfaces do usu\u00e1rio):</li> </ul> <p></p> <p>Nota</p> <p>Alguns c\u00f3digos de resposta (consulte a pr\u00f3xima se\u00e7\u00e3o) indicam que a resposta n\u00e3o possui um corpo.</p> <p>O ReadyAPI sabe disso e produzir\u00e1 documentos OpenAPI informando que n\u00e3o h\u00e1 corpo de resposta.</p>"},{"location":"tutorial/response-status-code/#sobre-os-codigos-de-status-http","title":"Sobre os c\u00f3digos de status HTTP","text":"<p>Nota</p> <p>Se voc\u00ea j\u00e1 sabe o que s\u00e3o c\u00f3digos de status HTTP, pule para a pr\u00f3xima se\u00e7\u00e3o.</p> <p>Em HTTP, voc\u00ea envia um c\u00f3digo de status num\u00e9rico de 3 d\u00edgitos como parte da resposta.</p> <p>Esses c\u00f3digos de status t\u00eam um nome associado para reconhec\u00ea-los, mas o importante \u00e9 o n\u00famero.</p> <p>Resumidamente:</p> <ul> <li><code>100</code> e acima s\u00e3o para \"Informa\u00e7\u00f5es\". Voc\u00ea raramente os usa diretamente. As respostas com esses c\u00f3digos de status n\u00e3o podem ter um corpo.</li> <li><code>200</code> e acima s\u00e3o para respostas \"Bem-sucedidas\". Estes s\u00e3o os que voc\u00ea mais usaria.<ul> <li><code>200</code> \u00e9 o c\u00f3digo de status padr\u00e3o, o que significa que tudo estava \"OK\".</li> <li>Outro exemplo seria <code>201</code>, \"Criado\". \u00c9 comumente usado ap\u00f3s a cria\u00e7\u00e3o de um novo registro no banco de dados.</li> <li>Um caso especial \u00e9 <code>204</code>, \"Sem Conte\u00fado\". Essa resposta \u00e9 usada quando n\u00e3o h\u00e1 conte\u00fado para retornar ao cliente e, portanto, a resposta n\u00e3o deve ter um corpo.</li> </ul> </li> <li><code>300</code> e acima s\u00e3o para \"Redirecionamento\". As respostas com esses c\u00f3digos de status podem ou n\u00e3o ter um corpo, exceto <code>304</code>, \"N\u00e3o modificado\", que n\u00e3o deve ter um.</li> <li><code>400</code> e acima s\u00e3o para respostas de \"Erro do cliente\". Este \u00e9 o segundo tipo que voc\u00ea provavelmente mais usaria.<ul> <li>Um exemplo \u00e9 <code>404</code>, para uma resposta \"N\u00e3o encontrado\".</li> <li>Para erros gen\u00e9ricos do cliente, voc\u00ea pode usar apenas <code>400</code>.</li> </ul> </li> <li><code>500</code> e acima s\u00e3o para erros do servidor. Voc\u00ea quase nunca os usa diretamente. Quando algo der errado em alguma parte do c\u00f3digo do seu aplicativo ou servidor, ele retornar\u00e1 automaticamente um desses c\u00f3digos de status.</li> </ul> <p>Dica</p> <p>Para saber mais sobre cada c\u00f3digo de status e qual c\u00f3digo serve para qu\u00ea, verifique o MDN documenta\u00e7\u00e3o sobre c\u00f3digos de status HTTP.</p>"},{"location":"tutorial/response-status-code/#atalho-para-lembrar-os-nomes","title":"Atalho para lembrar os nomes","text":"<p>Vamos ver o exemplo anterior novamente:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\", status_code=201)\nasync def create_item(name: str):\n    return {\"name\": name}\n</code></pre> <p><code>201</code> \u00e9 o c\u00f3digo de status para \"Criado\".</p> <p>Mas voc\u00ea n\u00e3o precisa memorizar o que cada um desses c\u00f3digos significa.</p> <p>Voc\u00ea pode usar as vari\u00e1veis de conveni\u00eancia de <code>readyapi.status</code>.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, status\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\", status_code=status.HTTP_201_CREATED)\nasync def create_item(name: str):\n    return {\"name\": name}\n</code></pre> <p>Eles s\u00e3o apenas uma conveni\u00eancia, eles possuem o mesmo n\u00famero, mas dessa forma voc\u00ea pode usar o autocomplete do editor para encontr\u00e1-los:</p> <p></p> <p>Detalhes t\u00e9cnicos</p> <p>Voc\u00ea tamb\u00e9m pode usar <code>from starlette import status</code>.</p> <p>ReadyAPI fornece o mesmo <code>starlette.status</code> como <code>readyapi.status</code> apenas como uma conveni\u00eancia para voc\u00ea, o desenvolvedor. Mas vem diretamente da Starlette.</p>"},{"location":"tutorial/response-status-code/#alterando-o-padrao","title":"Alterando o padr\u00e3o","text":"<p>Mais tarde, no Guia do usu\u00e1rio avan\u00e7ado, voc\u00ea ver\u00e1 como retornar um c\u00f3digo de status diferente do padr\u00e3o que voc\u00ea est\u00e1 declarando aqui.</p>"},{"location":"tutorial/schema-extra-example/","title":"Declare um exemplo dos dados da requisi\u00e7\u00e3o","text":"<p>Voc\u00ea pode declarar exemplos dos dados que a sua aplica\u00e7\u00e3o pode receber.</p> <p>Aqui est\u00e3o v\u00e1rias formas de se fazer isso.</p>"},{"location":"tutorial/schema-extra-example/#schema_extra-do-pydantic","title":"<code>schema_extra</code> do Pydantic","text":"<p>Voc\u00ea pode declarar um <code>example</code> para um modelo Pydantic usando <code>Config</code> e <code>schema_extra</code>, conforme descrito em Documenta\u00e7\u00e3o do Pydantic: Schema customization:</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n    model_config = {\n        \"json_schema_extra\": {\n            \"examples\": [\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                }\n            ]\n        }\n    }\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n    model_config = {\n        \"json_schema_extra\": {\n            \"examples\": [\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                }\n            ]\n        }\n    }\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Essas informa\u00e7\u00f5es extras ser\u00e3o adicionadas como se encontram no JSON Schema de resposta desse modelo e ser\u00e3o usadas na documenta\u00e7\u00e3o da API.</p> <p>Dica</p> <p>Voc\u00ea pode usar a mesma t\u00e9cnica para estender o JSON Schema e adicionar suas pr\u00f3prias informa\u00e7\u00f5es extras de forma personalizada.</p> <p>Por exemplo, voc\u00ea pode usar isso para adicionar metadados para uma interface de usu\u00e1rio de front-end, etc.</p>"},{"location":"tutorial/schema-extra-example/#field-de-argumentos-adicionais","title":"<code>Field</code> de argumentos adicionais","text":"<p>Ao usar <code>Field ()</code> com modelos Pydantic, voc\u00ea tamb\u00e9m pode declarar informa\u00e7\u00f5es extras para o JSON Schema passando quaisquer outros argumentos arbitr\u00e1rios para a fun\u00e7\u00e3o.</p> <p>Voc\u00ea pode usar isso para adicionar um <code>example</code> para cada campo:</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str = Field(examples=[\"Foo\"])\n    description: Union[str, None] = Field(default=None, examples=[\"A very nice Item\"])\n    price: float = Field(examples=[35.4])\n    tax: Union[float, None] = Field(default=None, examples=[3.2])\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+ <pre><code>from pydantic import BaseModel, Field\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str = Field(examples=[\"Foo\"])\n    description: str | None = Field(default=None, examples=[\"A very nice Item\"])\n    price: float = Field(examples=[35.4])\n    tax: float | None = Field(default=None, examples=[3.2])\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Aten\u00e7\u00e3o</p> <p>Lembre-se de que esses argumentos extras passados \u200b\u200bn\u00e3o adicionar\u00e3o nenhuma valida\u00e7\u00e3o, apenas informa\u00e7\u00f5es extras, para fins de documenta\u00e7\u00e3o.</p>"},{"location":"tutorial/schema-extra-example/#example-e-examples-no-openapi","title":"<code>example</code> e <code>examples</code> no OpenAPI","text":"<p>Ao usar quaisquer dos:</p> <ul> <li><code>Path()</code></li> <li><code>Query()</code></li> <li><code>Header()</code></li> <li><code>Cookie()</code></li> <li><code>Body()</code></li> <li><code>Form()</code></li> <li><code>File()</code></li> </ul> <p>voc\u00ea tamb\u00e9m pode declarar um dado <code>example</code> ou um grupo de <code>examples</code> com informa\u00e7\u00f5es adicionais que ser\u00e3o adicionadas ao OpenAPI.</p>"},{"location":"tutorial/schema-extra-example/#body-com-example","title":"<code>Body</code> com <code>example</code>","text":"<p>Aqui n\u00f3s passamos um <code>example</code> dos dados esperados por <code>Body()</code>:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int,\n    item: Item = Body(\n        examples=[\n            {\n                \"name\": \"Foo\",\n                \"description\": \"A very nice Item\",\n                \"price\": 35.4,\n                \"tax\": 3.2,\n            }\n        ],\n    ),\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int,\n    item: Annotated[\n        Item,\n        Body(\n            examples=[\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                }\n            ],\n        ),\n    ],\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int,\n    item: Annotated[\n        Item,\n        Body(\n            examples=[\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                }\n            ],\n        ),\n    ],\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int,\n    item: Annotated[\n        Item,\n        Body(\n            examples=[\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                }\n            ],\n        ),\n    ],\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int,\n    item: Item = Body(\n        examples=[\n            {\n                \"name\": \"Foo\",\n                \"description\": \"A very nice Item\",\n                \"price\": 35.4,\n                \"tax\": 3.2,\n            }\n        ],\n    ),\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre>"},{"location":"tutorial/schema-extra-example/#exemplo-na-ui-da-documentacao","title":"Exemplo na UI da documenta\u00e7\u00e3o","text":"<p>Com qualquer um dos m\u00e9todos acima, os <code>/docs</code> v\u00e3o ficar assim:</p> <p></p>"},{"location":"tutorial/schema-extra-example/#body-com-varios-examples","title":"<code>Body</code> com v\u00e1rios <code>examples</code>","text":"<p>Alternativamente ao \u00fanico <code>example</code>, voc\u00ea pode passar <code>examples</code> usando um <code>dict</code> com v\u00e1rios examples, cada um com informa\u00e7\u00f5es extras que ser\u00e3o adicionadas no OpenAPI tamb\u00e9m.</p> <p>As chaves do <code>dict</code> identificam cada exemplo, e cada valor \u00e9 outro <code>dict</code>.</p> <p>Cada <code>dict</code> de exemplo espec\u00edfico em <code>examples</code> pode conter:</p> <ul> <li><code>summary</code>: Pequena descri\u00e7\u00e3o do exemplo.</li> <li><code>description</code>: Uma descri\u00e7\u00e3o longa que pode conter texto em Markdown.</li> <li><code>value</code>: O pr\u00f3prio exemplo mostrado, ex: um <code>dict</code>.</li> <li><code>externalValue</code>: alternativa ao <code>value</code>, uma URL apontando para o exemplo. Embora isso possa n\u00e3o ser suportado por tantas ferramentas quanto <code>value</code>.</li> </ul> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item = Body(\n        examples=[\n            {\n                \"name\": \"Foo\",\n                \"description\": \"A very nice Item\",\n                \"price\": 35.4,\n                \"tax\": 3.2,\n            },\n            {\n                \"name\": \"Bar\",\n                \"price\": \"35.4\",\n            },\n            {\n                \"name\": \"Baz\",\n                \"price\": \"thirty five point four\",\n            },\n        ],\n    ),\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Annotated[\n        Item,\n        Body(\n            examples=[\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                },\n                {\n                    \"name\": \"Bar\",\n                    \"price\": \"35.4\",\n                },\n                {\n                    \"name\": \"Baz\",\n                    \"price\": \"thirty five point four\",\n                },\n            ],\n        ),\n    ],\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Annotated[\n        Item,\n        Body(\n            examples=[\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                },\n                {\n                    \"name\": \"Bar\",\n                    \"price\": \"35.4\",\n                },\n                {\n                    \"name\": \"Baz\",\n                    \"price\": \"thirty five point four\",\n                },\n            ],\n        ),\n    ],\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Annotated[\n        Item,\n        Body(\n            examples=[\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                },\n                {\n                    \"name\": \"Bar\",\n                    \"price\": \"35.4\",\n                },\n                {\n                    \"name\": \"Baz\",\n                    \"price\": \"thirty five point four\",\n                },\n            ],\n        ),\n    ],\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item = Body(\n        examples=[\n            {\n                \"name\": \"Foo\",\n                \"description\": \"A very nice Item\",\n                \"price\": 35.4,\n                \"tax\": 3.2,\n            },\n            {\n                \"name\": \"Bar\",\n                \"price\": \"35.4\",\n            },\n            {\n                \"name\": \"Baz\",\n                \"price\": \"thirty five point four\",\n            },\n        ],\n    ),\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre>"},{"location":"tutorial/schema-extra-example/#exemplos-na-ui-da-documentacao","title":"Exemplos na UI da documenta\u00e7\u00e3o","text":"<p>Com <code>examples</code> adicionado a <code>Body()</code>, os <code>/docs</code> v\u00e3o ficar assim:</p> <p></p>"},{"location":"tutorial/schema-extra-example/#detalhes-tecnicos","title":"Detalhes t\u00e9cnicos","text":"<p>Aten\u00e7\u00e3o</p> <p>Esses s\u00e3o detalhes muito t\u00e9cnicos sobre os padr\u00f5es JSON Schema e OpenAPI.</p> <p>Se as ideias explicadas acima j\u00e1 funcionam para voc\u00ea, isso pode ser o suficiente, e voc\u00ea provavelmente n\u00e3o precisa desses detalhes, fique \u00e0 vontade para pular.</p> <p>Quando voc\u00ea adiciona um exemplo dentro de um modelo Pydantic, usando <code>schema_extra</code> ou<code>Field(example=\"something\")</code>esse exemplo \u00e9 adicionado ao JSON Schema para esse modelo Pydantic.</p> <p>E esse JSON Schema do modelo Pydantic est\u00e1 inclu\u00eddo no OpenAPI da sua API e, em seguida, \u00e9 usado na UI da documenta\u00e7\u00e3o.</p> <p>O JSON Schema na verdade n\u00e3o tem um campo <code>example</code> nos padr\u00f5es. Vers\u00f5es recentes do JSON Schema definem um campo <code>examples</code>, mas o OpenAPI 3.0.3 \u00e9 baseado numa vers\u00e3o mais antiga do JSON Schema que n\u00e3o tinha <code>examples</code>.</p> <p>Por isso, o OpenAPI 3.0.3 definiu o seu pr\u00f3prio <code>example</code> para a vers\u00e3o modificada do JSON Schema que \u00e9 usada, para o mesmo pr\u00f3posito (mas \u00e9 apenas <code>example</code> no singular, n\u00e3o <code>examples</code>), e \u00e9 isso que \u00e9 usado pela UI da documenta\u00e7\u00e3o da API(usando o Swagger UI).</p> <p>Portanto, embora <code>example</code> n\u00e3o seja parte do JSON Schema, \u00e9 parte da vers\u00e3o customizada do JSON Schema usada pelo OpenAPI, e \u00e9 isso que vai ser usado dentro da UI de documenta\u00e7\u00e3o.</p> <p>Mas quando voc\u00ea usa <code>example</code> ou <code>examples</code> com qualquer um dos outros utilit\u00e1rios (<code>Query()</code>, <code>Body()</code>, etc.) esses exemplos n\u00e3o s\u00e3o adicionados ao JSON Schema que descreve esses dados (nem mesmo para vers\u00e3o pr\u00f3pria do OpenAPI do JSON Schema), eles s\u00e3o adicionados diretamente \u00e0 declara\u00e7\u00e3o da opera\u00e7\u00e3o de rota no OpenAPI (fora das partes do OpenAPI que usam o JSON Schema).</p> <p>Para <code>Path()</code>, <code>Query()</code>, <code>Header()</code>, e <code>Cookie()</code>, o <code>example</code> e <code>examples</code> s\u00e3o adicionados a defini\u00e7\u00e3o do OpenAPI, dentro do <code>Parameter Object</code> (na especifica\u00e7\u00e3o).</p> <p>E para <code>Body()</code>, <code>File()</code>, e <code>Form()</code>, o <code>example</code> e <code>examples</code> s\u00e3o de maneira equivalente adicionados para a defini\u00e7\u00e3o do OpenAPI, dentro do <code>Request Body Object</code>, no campo <code>content</code>, no <code>Media Type Object</code> (na especifica\u00e7\u00e3o).</p> <p>Por outro lado, h\u00e1 uma vers\u00e3o mais recente do OpenAPI: 3.1.0, lan\u00e7ada recentemente. Baseado no JSON Schema mais recente e a maioria das modifica\u00e7\u00f5es da vers\u00e3o customizada do OpenAPI do JSON Schema s\u00e3o removidas, em troca dos recursos das vers\u00f5es recentes do JSON Schema, portanto, todas essas pequenas diferen\u00e7as s\u00e3o reduzidas. No entanto, a UI do Swagger atualmente n\u00e3o oferece suporte a OpenAPI 3.1.0, ent\u00e3o, por enquanto, \u00e9 melhor continuar usando as op\u00e7\u00f5es acima.</p>"},{"location":"tutorial/sql-databases/","title":"Bancos de Dados SQL (Relacionais)","text":"<p>ReadyAPI n\u00e3o exige que voc\u00ea use um banco de dados SQL (relacional). Mas voc\u00ea pode usar qualquer banco de dados que quiser.</p> <p>Aqui veremos um exemplo usando SQLDev.</p> <p>SQLDev \u00e9 constru\u00eddo sobre SQLAlchemy e Pydantic. Ele foi criado pelo mesmo autor do ReadyAPI para ser o par perfeito para aplica\u00e7\u00f5es ReadyAPI que precisam usar bancos de dados SQL.</p> <p>Dica</p> <p>Voc\u00ea pode usar qualquer outra biblioteca de banco de dados SQL ou NoSQL que quiser (em alguns casos chamadas de \"ORMs\"), o ReadyAPI n\u00e3o obriga voc\u00ea a usar nada. \ud83d\ude0e</p> <p>Como o SQLDev \u00e9 baseado no SQLAlchemy, voc\u00ea pode facilmente usar qualquer banco de dados suportado pelo SQLAlchemy (o que tamb\u00e9m os torna suportados pelo SQLDev), como:</p> <ul> <li>PostgreSQL</li> <li>MySQL</li> <li>SQLite</li> <li>Oracle</li> <li>Microsoft SQL Server, etc.</li> </ul> <p>Neste exemplo, usaremos SQLite, porque ele usa um \u00fanico arquivo e o Python tem suporte integrado. Assim, voc\u00ea pode copiar este exemplo e execut\u00e1-lo como est\u00e1.</p> <p>Mais tarde, para sua aplica\u00e7\u00e3o em produ\u00e7\u00e3o, voc\u00ea pode querer usar um servidor de banco de dados como o PostgreSQL.</p> <p>Dica</p> <p>Existe um gerador de projetos oficial com ReadyAPI e PostgreSQL incluindo um frontend e mais ferramentas: https://github.com/readyapi/full-stack-readyapi-template</p> <p>Este \u00e9 um tutorial muito simples e curto, se voc\u00ea quiser aprender sobre bancos de dados em geral, sobre SQL ou recursos mais avan\u00e7ados, acesse a documenta\u00e7\u00e3o do SQLDev.</p>"},{"location":"tutorial/sql-databases/#instalar-o-sqldev","title":"Instalar o <code>SQLDev</code>","text":"<p>Primeiro, certifique-se de criar seu ambiente virtual, ativ\u00e1-lo e, em seguida, instalar o <code>sqldev</code>:</p> <pre><code>$ pip install sqldev\n---&gt; 100%\n</code></pre>"},{"location":"tutorial/sql-databases/#criar-o-app-com-um-unico-modelo","title":"Criar o App com um \u00danico Modelo","text":"<p>Vamos criar a primeira vers\u00e3o mais simples do app com um \u00fanico modelo SQLDev.</p> <p>Depois, vamos melhor\u00e1-lo aumentando a seguran\u00e7a e versatilidade com m\u00faltiplos modelos abaixo. \ud83e\udd13</p>"},{"location":"tutorial/sql-databases/#criar-modelos","title":"Criar Modelos","text":"<p>Importe o <code>SQLDev</code> e crie um modelo de banco de dados:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>A classe <code>Hero</code> \u00e9 muito semelhante a um modelo Pydantic (na verdade, por baixo dos panos, ela \u00e9 um modelo Pydantic).</p> <p>Existem algumas diferen\u00e7as:</p> <ul> <li> <p><code>table=True</code> informa ao SQLDev que este \u00e9 um modelo de tabela, ele deve representar uma tabela no banco de dados SQL, n\u00e3o \u00e9 apenas um modelo de dados (como seria qualquer outra classe Pydantic comum).</p> </li> <li> <p><code>Field(primary_key=True)</code> informa ao SQLDev que o <code>id</code> \u00e9 a chave prim\u00e1ria no banco de dados SQL (voc\u00ea pode aprender mais sobre chaves prim\u00e1rias SQL na documenta\u00e7\u00e3o do SQLDev).</p> <p>Ao ter o tipo como <code>int | None</code>, o SQLDev saber\u00e1 que essa coluna deve ser um <code>INTEGER</code> no banco de dados SQL e que ela deve ser <code>NULLABLE</code>.</p> </li> <li> <p><code>Field(index=True)</code> informa ao SQLDev que ele deve criar um \u00edndice SQL para essa coluna, o que permitir\u00e1 buscas mais r\u00e1pidas no banco de dados ao ler dados filtrados por essa coluna.</p> <p>O SQLDev saber\u00e1 que algo declarado como <code>str</code> ser\u00e1 uma coluna SQL do tipo <code>TEXT</code> (ou <code>VARCHAR</code>, dependendo do banco de dados).</p> </li> </ul>"},{"location":"tutorial/sql-databases/#criar-um-engine","title":"Criar um Engine","text":"<p>Um <code>engine</code> SQLDev (por baixo dos panos, ele \u00e9 na verdade um <code>engine</code> do SQLAlchemy) \u00e9 o que mant\u00e9m as conex\u00f5es com o banco de dados.</p> <p>Voc\u00ea teria um \u00fanico objeto <code>engine</code> para todo o seu c\u00f3digo se conectar ao mesmo banco de dados.</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Usar <code>check_same_thread=False</code> permite que o ReadyAPI use o mesmo banco de dados SQLite em diferentes threads. Isso \u00e9 necess\u00e1rio, pois uma \u00fanica requisi\u00e7\u00e3o pode usar mais de uma thread (por exemplo, em depend\u00eancias).</p> <p>N\u00e3o se preocupe, com a forma como o c\u00f3digo est\u00e1 estruturado, garantiremos que usamos uma \u00fanica sess\u00e3o SQLDev por requisi\u00e7\u00e3o mais tarde, isso \u00e9 realmente o que o <code>check_same_thread</code> est\u00e1 tentando conseguir.</p>"},{"location":"tutorial/sql-databases/#criar-as-tabelas","title":"Criar as Tabelas","text":"<p>Em seguida, adicionamos uma fun\u00e7\u00e3o que usa <code>SQLDev.metadata.create_all(engine)</code> para criar as tabelas para todos os modelos de tabela.</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#criar-uma-dependencia-de-sessao","title":"Criar uma Depend\u00eancia de Sess\u00e3o","text":"<p>Uma <code>Session</code> \u00e9 o que armazena os objetos na mem\u00f3ria e acompanha as altera\u00e7\u00f5es necess\u00e1rias nos dados, para ent\u00e3o usar o <code>engine</code> para se comunicar com o banco de dados.</p> <p>Vamos criar uma depend\u00eancia do ReadyAPI com <code>yield</code> que fornecer\u00e1 uma nova <code>Session</code> para cada requisi\u00e7\u00e3o. Isso \u00e9 o que garante que usamos uma \u00fanica sess\u00e3o por requisi\u00e7\u00e3o. \ud83e\udd13</p> <p>Ent\u00e3o, criamos uma depend\u00eancia <code>Annotated</code> chamada <code>SessionDep</code> para simplificar o restante do c\u00f3digo que usar\u00e1 essa depend\u00eancia.</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#criar-tabelas-de-banco-de-dados-na-inicializacao","title":"Criar Tabelas de Banco de Dados na Inicializa\u00e7\u00e3o","text":"<p>Vamos criar as tabelas do banco de dados quando o aplicativo for iniciado.</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Aqui, criamos as tabelas em um evento de inicializa\u00e7\u00e3o do aplicativo.</p> <p>Para produ\u00e7\u00e3o, voc\u00ea provavelmente usaria um script de migra\u00e7\u00e3o que \u00e9 executado antes de iniciar seu app. \ud83e\udd13</p> <p>Dica</p> <p>O SQLDev ter\u00e1 utilit\u00e1rios de migra\u00e7\u00e3o envolvendo o Alembic, mas por enquanto, voc\u00ea pode usar o Alembic diretamente.</p>"},{"location":"tutorial/sql-databases/#criar-um-hero","title":"Criar um Hero","text":"<p>Como cada modelo SQLDev tamb\u00e9m \u00e9 um modelo Pydantic, voc\u00ea pode us\u00e1-lo nas mesmas anota\u00e7\u00f5es de tipo que usaria para modelos Pydantic.</p> <p>Por exemplo, se voc\u00ea declarar um par\u00e2metro do tipo <code>Hero</code>, ele ser\u00e1 lido do corpo JSON.</p> <p>Da mesma forma, voc\u00ea pode declar\u00e1-lo como o tipo de retorno da fun\u00e7\u00e3o, e ent\u00e3o o formato dos dados aparecer\u00e1 na interface de documenta\u00e7\u00e3o autom\u00e1tica da API.</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Aqui, usamos a depend\u00eancia <code>SessionDep</code> (uma <code>Session</code>) para adicionar o novo <code>Hero</code> \u00e0 inst\u00e2ncia <code>Session</code>, fazer commit das altera\u00e7\u00f5es no banco de dados, atualizar os dados no <code>hero</code> e ent\u00e3o retorn\u00e1-lo.</p>"},{"location":"tutorial/sql-databases/#ler-heroes","title":"Ler Heroes","text":"<p>Podemos ler <code>Hero</code>s do banco de dados usando um <code>select()</code>. Podemos incluir um <code>limit</code> e <code>offset</code> para paginar os resultados.</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#ler-um-unico-hero","title":"Ler um \u00danico Hero","text":"<p>Podemos ler um \u00fanico <code>Hero</code>.</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#deletar-um-hero","title":"Deletar um Hero","text":"<p>Tamb\u00e9m podemos deletar um <code>Hero</code>.</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#executar-o-app","title":"Executar o App","text":"<p>Voc\u00ea pode executar o app:</p> <pre><code>$ readyapi dev main.py\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>Ent\u00e3o, v\u00e1 para a interface <code>/docs</code>, voc\u00ea ver\u00e1 que o ReadyAPI est\u00e1 usando esses modelos para documentar a API, e ele tamb\u00e9m os usar\u00e1 para serializar e validar os dados.</p>"},{"location":"tutorial/sql-databases/#atualizar-o-app-com-multiplos-modelos","title":"Atualizar o App com M\u00faltiplos Modelos","text":"<p>Agora vamos refatorar este app um pouco para aumentar a seguran\u00e7a e versatilidade.</p> <p>Se voc\u00ea verificar o app anterior, na interface voc\u00ea pode ver que, at\u00e9 agora, ele permite que o cliente decida o <code>id</code> do <code>Hero</code> a ser criado. \ud83d\ude31</p> <p>N\u00e3o dever\u00edamos deixar isso acontecer, eles poderiam sobrescrever um <code>id</code> que j\u00e1 atribuimos na base de dados. Decidir o <code>id</code> deve ser feito pelo backend ou pelo banco de dados, n\u00e3o pelo cliente.</p> <p>Al\u00e9m disso, criamos um <code>secret_name</code> para o hero, mas at\u00e9 agora estamos retornando ele em todos os lugares, isso n\u00e3o \u00e9 muito secreto... \ud83d\ude05</p> <p>Vamos corrigir essas coisas adicionando alguns modelos extras. Aqui \u00e9 onde o SQLDev vai brilhar. \u2728</p>"},{"location":"tutorial/sql-databases/#criar-multiplos-modelos","title":"Criar M\u00faltiplos Modelos","text":"<p>No SQLDev, qualquer classe de modelo que tenha <code>table=True</code> \u00e9 um modelo de tabela.</p> <p>E qualquer classe de modelo que n\u00e3o tenha <code>table=True</code> \u00e9 um modelo de dados, esses s\u00e3o na verdade apenas modelos Pydantic (com alguns recursos extras pequenos). \ud83e\udd13</p> <p>Com o SQLDev, podemos usar a heran\u00e7a para evitar duplica\u00e7\u00e3o de todos os campos em todos os casos.</p>"},{"location":"tutorial/sql-databases/#herobase-a-classe-base","title":"<code>HeroBase</code> - a classe base","text":"<p>Vamos come\u00e7ar com um modelo <code>HeroBase</code> que tem todos os campos compartilhados por todos os modelos:</p> <ul> <li><code>name</code></li> <li><code>age</code></li> </ul> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#hero-o-modelo-de-tabela","title":"<code>Hero</code> - o modelo de tabela","text":"<p>Em seguida, vamos criar <code>Hero</code>, o verdadeiro modelo de tabela, com os campos extras que nem sempre est\u00e3o nos outros modelos:</p> <ul> <li><code>id</code></li> <li><code>secret_name</code></li> </ul> <p>Como <code>Hero</code> herda de <code>HeroBase</code>, ele tamb\u00e9m tem os campos declarados em <code>HeroBase</code>, ent\u00e3o todos os campos para <code>Hero</code> s\u00e3o:</p> <ul> <li><code>id</code></li> <li><code>name</code></li> <li><code>age</code></li> <li><code>secret_name</code></li> </ul> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#heropublic-o-modelo-de-dados-publico","title":"<code>HeroPublic</code> - o modelo de dados p\u00fablico","text":"<p>Em seguida, criamos um modelo <code>HeroPublic</code>, que ser\u00e1 retornado para os clientes da API.</p> <p>Ele tem os mesmos campos que <code>HeroBase</code>, ent\u00e3o n\u00e3o incluir\u00e1 <code>secret_name</code>.</p> <p>Finalmente, a identidade dos nossos her\u00f3is est\u00e1 protegida! \ud83e\udd77</p> <p>Ele tamb\u00e9m declara novamente <code>id: int</code>. Ao fazer isso, estamos fazendo um contrato com os clientes da API, para que eles possam sempre esperar que o <code>id</code> estar\u00e1 l\u00e1 e ser\u00e1 um <code>int</code> (nunca ser\u00e1 <code>None</code>).</p> <p>Dica</p> <p>Fazer com que o modelo de retorno garanta que um valor esteja sempre dispon\u00edvel e sempre seja um <code>int</code> (n\u00e3o <code>None</code>) \u00e9 muito \u00fatil para os clientes da API, eles podem escrever c\u00f3digo muito mais simples com essa certeza.</p> <p>Al\u00e9m disso, clientes gerados automaticamente ter\u00e3o interfaces mais simples, para que os desenvolvedores que se comunicam com sua API possam ter uma experi\u00eancia muito melhor trabalhando com sua API. \ud83d\ude0e</p> <p>Todos os campos em <code>HeroPublic</code> s\u00e3o os mesmos que em <code>HeroBase</code>, com <code>id</code> declarado como <code>int</code> (n\u00e3o <code>None</code>):</p> <ul> <li><code>id</code></li> <li><code>name</code></li> <li><code>age</code></li> <li><code>secret_name</code></li> </ul> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#herocreate-o-modelo-de-dados-para-criar-um-hero","title":"<code>HeroCreate</code> - o modelo de dados para criar um hero","text":"<p>Agora criamos um modelo <code>HeroCreate</code>, este \u00e9 o que validar\u00e1 os dados dos clientes.</p> <p>Ele tem os mesmos campos que <code>HeroBase</code>, e tamb\u00e9m tem <code>secret_name</code>.</p> <p>Agora, quando os clientes criarem um novo hero, eles enviar\u00e3o o <code>secret_name</code>, ele ser\u00e1 armazenado no banco de dados, mas esses nomes secretos n\u00e3o ser\u00e3o retornados na API para os clientes.</p> <p>Dica</p> <p>\u00c9 assim que voc\u00ea trataria senhas. Receba-as, mas n\u00e3o as retorne na API.</p> <p>Voc\u00ea tamb\u00e9m faria um hash com os valores das senhas antes de armazen\u00e1-los, nunca os armazene em texto simples.</p> <p>Os campos de <code>HeroCreate</code> s\u00e3o:</p> <ul> <li><code>name</code></li> <li><code>age</code></li> <li><code>secret_name</code></li> </ul> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#heroupdate-o-modelo-de-dados-para-atualizar-um-hero","title":"<code>HeroUpdate</code> - o modelo de dados para atualizar um hero","text":"<p>N\u00e3o t\u00ednhamos uma maneira de atualizar um hero na vers\u00e3o anterior do app, mas agora com m\u00faltiplos modelos, podemos fazer isso. \ud83c\udf89</p> <p>O modelo de dados <code>HeroUpdate</code> \u00e9 um pouco especial, ele tem todos os mesmos campos que seriam necess\u00e1rios para criar um novo hero, mas todos os campos s\u00e3o opcionais (todos t\u00eam um valor padr\u00e3o). Dessa forma, quando voc\u00ea atualizar um hero, poder\u00e1 enviar apenas os campos que deseja atualizar.</p> <p>Como todos os campos realmente mudam (o tipo agora inclui <code>None</code> e eles agora t\u00eam um valor padr\u00e3o de <code>None</code>), precisamos declarar novamente todos eles.</p> <p>N\u00e3o precisamos herdar de <code>HeroBase</code>, pois estamos redeclarando todos os campos. Vou deix\u00e1-lo herdando apenas por consist\u00eancia, mas isso n\u00e3o \u00e9 necess\u00e1rio. \u00c9 mais uma quest\u00e3o de gosto pessoal. \ud83e\udd37</p> <p>Os campos de <code>HeroUpdate</code> s\u00e3o:</p> <ul> <li><code>name</code></li> <li><code>age</code></li> <li><code>secret_name</code></li> </ul> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#criar-com-herocreate-e-retornar-um-heropublic","title":"Criar com <code>HeroCreate</code> e retornar um <code>HeroPublic</code>","text":"<p>Agora que temos m\u00faltiplos modelos, podemos atualizar as partes do app que os utilizam.</p> <p>Recebemos na requisi\u00e7\u00e3o um modelo de dados <code>HeroCreate</code>, e a partir dele, criamos um modelo de tabela <code>Hero</code>.</p> <p>Esse novo modelo de tabela <code>Hero</code> ter\u00e1 os campos enviados pelo cliente, e tamb\u00e9m ter\u00e1 um <code>id</code> gerado pelo banco de dados.</p> <p>Em seguida, retornamos o mesmo modelo de tabela <code>Hero</code> como est\u00e1 na fun\u00e7\u00e3o. Mas como declaramos o <code>response_model</code> com o modelo de dados <code>HeroPublic</code>, o ReadyAPI usar\u00e1 <code>HeroPublic</code> para validar e serializar os dados.</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Dica</p> <p>Agora usamos <code>response_model=HeroPublic</code> em vez da anota\u00e7\u00e3o de tipo de retorno <code>-&gt; HeroPublic</code> porque o valor que estamos retornando na verdade n\u00e3o \u00e9 um <code>HeroPublic</code>.</p> <p>Se tiv\u00e9ssemos declarado <code>-&gt; HeroPublic</code>, seu editor e o linter reclamariam (com raz\u00e3o) que voc\u00ea est\u00e1 retornando um <code>Hero</code> em vez de um <code>HeroPublic</code>.</p> <p>Ao declar\u00e1-lo no <code>response_model</code>, estamos dizendo ao ReadyAPI para fazer o seu trabalho, sem interferir nas anota\u00e7\u00f5es de tipo e na ajuda do seu editor e de outras ferramentas.</p>"},{"location":"tutorial/sql-databases/#ler-heroes-com-heropublic","title":"Ler Heroes com <code>HeroPublic</code>","text":"<p>Podemos fazer o mesmo que antes para ler <code>Hero</code>s, novamente, usamos <code>response_model=list[HeroPublic]</code> para garantir que os dados sejam validados e serializados corretamente.</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#ler-um-hero-com-heropublic","title":"Ler Um Hero com <code>HeroPublic</code>","text":"<p>Podemos ler um \u00fanico her\u00f3i:</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#atualizar-um-hero-com-heroupdate","title":"Atualizar um Hero com <code>HeroUpdate</code>","text":"<p>Podemos atualizar um hero. Para isso, usamos uma opera\u00e7\u00e3o HTTP <code>PATCH</code>.</p> <p>E no c\u00f3digo, obtemos um <code>dict</code> com todos os dados enviados pelo cliente, apenas os dados enviados pelo cliente, excluindo quaisquer valores que estariam l\u00e1 apenas por serem os valores padr\u00e3o. Para fazer isso, usamos <code>exclude_unset=True</code>. Este \u00e9 o truque principal. \ud83e\ude84</p> <p>Em seguida, usamos <code>hero_db.sqldev_update(hero_data)</code> para atualizar o <code>hero_db</code> com os dados de <code>hero_data</code>.</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#deletar-um-hero-novamente","title":"Deletar um Hero Novamente","text":"<p>Deletar um hero permanece praticamente o mesmo.</p> <p>N\u00e3o vamos satisfazer o desejo de refatorar tudo neste aqui. \ud83d\ude05</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#executar-o-app-novamente","title":"Executar o App Novamente","text":"<p>Voc\u00ea pode executar o app novamente:</p> <pre><code>$ readyapi dev main.py\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>If you go to the <code>/docs</code> API UI, you will see that it is now updated, and it won't expect to receive the <code>id</code> from the client when creating a hero, etc.</p>"},{"location":"tutorial/sql-databases/#recapitulando","title":"Recapitulando","text":"<p>Voc\u00ea pode usar SQLDev para interagir com um banco de dados SQL e simplificar o c\u00f3digo com modelos de dados e modelos de tabela.</p> <p>Voc\u00ea pode aprender muito mais na documenta\u00e7\u00e3o do SQLDev, h\u00e1 um mini tutorial sobre como usar SQLDev com ReadyAPI mais longo. \ud83d\ude80</p>"},{"location":"tutorial/static-files/","title":"Arquivos Est\u00e1ticos","text":"<p>Voc\u00ea pode servir arquivos est\u00e1ticos automaticamente de um diret\u00f3rio usando <code>StaticFiles</code>.</p>"},{"location":"tutorial/static-files/#use-staticfiles","title":"Use <code>StaticFiles</code>","text":"<ul> <li>Importe <code>StaticFiles</code>.</li> <li>\"Monte\" uma inst\u00e2ncia de <code>StaticFiles()</code> em um caminho espec\u00edfico.</li> </ul> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.staticfiles import StaticFiles\n\napp = ReadyAPI()\n\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n</code></pre> <p>Detalhes t\u00e9cnicos</p> <p>Voc\u00ea tamb\u00e9m pode usar <code>from starlette.staticfiles import StaticFiles</code>.</p> <p>O ReadyAPI fornece o mesmo que <code>starlette.staticfiles</code> como <code>readyapi.staticfiles</code> apenas como uma conveni\u00eancia para voc\u00ea, o desenvolvedor. Mas na verdade vem diretamente da Starlette.</p>"},{"location":"tutorial/static-files/#o-que-e-montagem","title":"O que \u00e9 \"Montagem\"","text":"<p>\"Montagem\" significa adicionar um aplicativo completamente \"independente\" em uma rota espec\u00edfica, que ent\u00e3o cuida de todas as subrotas.</p> <p>Isso \u00e9 diferente de usar um <code>APIRouter</code>, pois um aplicativo montado \u00e9 completamente independente. A OpenAPI e a documenta\u00e7\u00e3o do seu aplicativo principal n\u00e3o incluir\u00e3o nada do aplicativo montado, etc.</p> <p>Voc\u00ea pode ler mais sobre isso no Guia Avan\u00e7ado do Usu\u00e1rio.</p>"},{"location":"tutorial/static-files/#detalhes","title":"Detalhes","text":"<p>O primeiro <code>\"/static\"</code> refere-se \u00e0 subrota em que este \"subaplicativo\" ser\u00e1 \"montado\". Portanto, qualquer caminho que comece com <code>\"/static\"</code> ser\u00e1 tratado por ele.</p> <p>O <code>directory=\"static\"</code> refere-se ao nome do diret\u00f3rio que cont\u00e9m seus arquivos est\u00e1ticos.</p> <p>O <code>name=\"static\"</code> d\u00e1 a ela um nome que pode ser usado internamente pelo ReadyAPI.</p> <p>Todos esses par\u00e2metros podem ser diferentes de \"<code>static</code>\", ajuste-os de acordo com as necessidades e detalhes espec\u00edficos de sua pr\u00f3pria aplica\u00e7\u00e3o.</p>"},{"location":"tutorial/static-files/#mais-informacoes","title":"Mais informa\u00e7\u00f5es","text":"<p>Para mais detalhes e op\u00e7\u00f5es, verifique Starlette's docs about Static Files.</p>"},{"location":"tutorial/testing/","title":"Testando","text":"<p>Gra\u00e7as ao Starlette, testar aplicativos ReadyAPI \u00e9 f\u00e1cil e agrad\u00e1vel.</p> <p>Ele \u00e9 baseado no HTTPX, que por sua vez \u00e9 projetado com base em Requests, por isso \u00e9 muito familiar e intuitivo.</p> <p>Com ele, voc\u00ea pode usar o pytest diretamente com ReadyAPI.</p>"},{"location":"tutorial/testing/#usando-testclient","title":"Usando <code>TestClient</code>","text":"<p>Informa\u00e7\u00e3o</p> <p>Para usar o <code>TestClient</code>, primeiro instale o <code>httpx</code>.</p> <p>Certifique-se de criar um ambiente virtual, ativ\u00e1-lo e instal\u00e1-lo, por exemplo:</p> <pre><code>$ pip install httpx\n</code></pre> <p>Importe <code>TestClient</code>.</p> <p>Crie um <code>TestClient</code> passando seu aplicativo ReadyAPI para ele.</p> <p>Crie fun\u00e7\u00f5es com um nome que comece com <code>test_</code> (essa \u00e9 a conven\u00e7\u00e3o padr\u00e3o do <code>pytest</code>).</p> <p>Use o objeto <code>TestClient</code> da mesma forma que voc\u00ea faz com <code>httpx</code>.</p> <p>Escreva instru\u00e7\u00f5es <code>assert</code> simples com as express\u00f5es Python padr\u00e3o que voc\u00ea precisa verificar (novamente, <code>pytest</code> padr\u00e3o).</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.testclient import TestClient\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def read_main():\n    return {\"msg\": \"Hello World\"}\n\n\nclient = TestClient(app)\n\n\ndef test_read_main():\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"msg\": \"Hello World\"}\n</code></pre> <p>Dica</p> <p>Observe que as fun\u00e7\u00f5es de teste s\u00e3o <code>def</code> normais, n\u00e3o <code>async def</code>.</p> <p>E as chamadas para o cliente tamb\u00e9m s\u00e3o chamadas normais, n\u00e3o usando <code>await</code>.</p> <p>Isso permite que voc\u00ea use <code>pytest</code> diretamente sem complica\u00e7\u00f5es.</p> <p>Detalhes t\u00e9cnicos</p> <p>Voc\u00ea tamb\u00e9m pode usar <code>from starlette.testclient import TestClient</code>.</p> <p>ReadyAPI fornece o mesmo <code>starlette.testclient</code> que <code>readyapi.testclient</code> apenas como uma conveni\u00eancia para voc\u00ea, o desenvolvedor. Mas ele vem diretamente da Starlette.</p> <p>Dica</p> <p>Se voc\u00ea quiser chamar fun\u00e7\u00f5es <code>async</code> em seus testes al\u00e9m de enviar solicita\u00e7\u00f5es ao seu aplicativo ReadyAPI (por exemplo, fun\u00e7\u00f5es de banco de dados ass\u00edncronas), d\u00ea uma olhada em Testes ass\u00edncronos no tutorial avan\u00e7ado.</p>"},{"location":"tutorial/testing/#separando-testes","title":"Separando testes","text":"<p>Em uma aplica\u00e7\u00e3o real, voc\u00ea provavelmente teria seus testes em um arquivo diferente.</p> <p>E seu aplicativo ReadyAPI tamb\u00e9m pode ser composto de v\u00e1rios arquivos/m\u00f3dulos, etc.</p>"},{"location":"tutorial/testing/#arquivo-do-aplicativo-readyapi","title":"Arquivo do aplicativo ReadyAPI","text":"<p>Digamos que voc\u00ea tenha uma estrutura de arquivo conforme descrito em Aplicativos maiores:</p> <pre><code>.\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 main.py\n</code></pre> <p>No arquivo <code>main.py</code> voc\u00ea tem seu aplicativo ReadyAPI:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def read_main():\n    return {\"msg\": \"Hello World\"}\n</code></pre>"},{"location":"tutorial/testing/#arquivo-de-teste","title":"Arquivo de teste","text":"<p>Ent\u00e3o voc\u00ea poderia ter um arquivo <code>test_main.py</code> com seus testes. Ele poderia estar no mesmo pacote Python (o mesmo diret\u00f3rio com um arquivo <code>__init__.py</code>):</p> <pre><code>.\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 test_main.py\n</code></pre> <p>Como esse arquivo est\u00e1 no mesmo pacote, voc\u00ea pode usar importa\u00e7\u00f5es relativas para importar o objeto <code>app</code> do m\u00f3dulo <code>main</code> (<code>main.py</code>):</p> Python 3.8+ <pre><code>from readyapi.testclient import TestClient\n\nfrom .main import app\n\nclient = TestClient(app)\n\n\ndef test_read_main():\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"msg\": \"Hello World\"}\n</code></pre> <p>...e ter o c\u00f3digo para os testes como antes.</p>"},{"location":"tutorial/testing/#testando-exemplo-estendido","title":"Testando: exemplo estendido","text":"<p>Agora vamos estender este exemplo e adicionar mais detalhes para ver como testar diferentes partes.</p>"},{"location":"tutorial/testing/#arquivo-de-aplicativo-readyapi-estendido","title":"Arquivo de aplicativo ReadyAPI estendido","text":"<p>Vamos continuar com a mesma estrutura de arquivo de antes:</p> <pre><code>.\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 test_main.py\n</code></pre> <p>Digamos que agora o arquivo <code>main.py</code> com seu aplicativo ReadyAPI tenha algumas outras opera\u00e7\u00f5es de rotas.</p> <p>Ele tem uma opera\u00e7\u00e3o <code>GET</code> que pode retornar um erro.</p> <p>Ele tem uma opera\u00e7\u00e3o <code>POST</code> que pode retornar v\u00e1rios erros.</p> <p>Ambas as opera\u00e7\u00f5es de rotas requerem um cabe\u00e7alho <code>X-Token</code>.</p> Python 3.10+Python 3.9+Python 3.8+Python 3.10+ non-AnnotatedPython 3.8+ non-Annotated <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, HTTPException, ReadyAPI\n\nfake_secret_token = \"coneofsilence\"\n\nfake_db = {\n    \"foo\": {\"id\": \"foo\", \"title\": \"Foo\", \"description\": \"There goes my hero\"},\n    \"bar\": {\"id\": \"bar\", \"title\": \"Bar\", \"description\": \"The bartenders\"},\n}\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    id: str\n    title: str\n    description: str | None = None\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_main(item_id: str, x_token: Annotated[str, Header()]):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item_id not in fake_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return fake_db[item_id]\n\n\n@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item, x_token: Annotated[str, Header()]):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item.id in fake_db:\n        raise HTTPException(status_code=409, detail=\"Item already exists\")\n    fake_db[item.id] = item\n    return item\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, HTTPException, ReadyAPI\n\nfake_secret_token = \"coneofsilence\"\n\nfake_db = {\n    \"foo\": {\"id\": \"foo\", \"title\": \"Foo\", \"description\": \"There goes my hero\"},\n    \"bar\": {\"id\": \"bar\", \"title\": \"Bar\", \"description\": \"The bartenders\"},\n}\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    id: str\n    title: str\n    description: Union[str, None] = None\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_main(item_id: str, x_token: Annotated[str, Header()]):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item_id not in fake_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return fake_db[item_id]\n\n\n@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item, x_token: Annotated[str, Header()]):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item.id in fake_db:\n        raise HTTPException(status_code=409, detail=\"Item already exists\")\n    fake_db[item.id] = item\n    return item\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, HTTPException, ReadyAPI\nfrom typing_extensions import Annotated\n\nfake_secret_token = \"coneofsilence\"\n\nfake_db = {\n    \"foo\": {\"id\": \"foo\", \"title\": \"Foo\", \"description\": \"There goes my hero\"},\n    \"bar\": {\"id\": \"bar\", \"title\": \"Bar\", \"description\": \"The bartenders\"},\n}\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    id: str\n    title: str\n    description: Union[str, None] = None\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_main(item_id: str, x_token: Annotated[str, Header()]):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item_id not in fake_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return fake_db[item_id]\n\n\n@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item, x_token: Annotated[str, Header()]):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item.id in fake_db:\n        raise HTTPException(status_code=409, detail=\"Item already exists\")\n    fake_db[item.id] = item\n    return item\n</code></pre> <p>Dica</p> <p>Prefira usar a vers\u00e3o <code>Annotated</code> se poss\u00edvel.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Header, HTTPException, ReadyAPI\n\nfake_secret_token = \"coneofsilence\"\n\nfake_db = {\n    \"foo\": {\"id\": \"foo\", \"title\": \"Foo\", \"description\": \"There goes my hero\"},\n    \"bar\": {\"id\": \"bar\", \"title\": \"Bar\", \"description\": \"The bartenders\"},\n}\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    id: str\n    title: str\n    description: str | None = None\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_main(item_id: str, x_token: str = Header()):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item_id not in fake_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return fake_db[item_id]\n\n\n@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item, x_token: str = Header()):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item.id in fake_db:\n        raise HTTPException(status_code=409, detail=\"Item already exists\")\n    fake_db[item.id] = item\n    return item\n</code></pre> <p>Dica</p> <p>Prefira usar a vers\u00e3o <code>Annotated</code> se poss\u00edvel.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, HTTPException, ReadyAPI\n\nfake_secret_token = \"coneofsilence\"\n\nfake_db = {\n    \"foo\": {\"id\": \"foo\", \"title\": \"Foo\", \"description\": \"There goes my hero\"},\n    \"bar\": {\"id\": \"bar\", \"title\": \"Bar\", \"description\": \"The bartenders\"},\n}\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    id: str\n    title: str\n    description: Union[str, None] = None\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_main(item_id: str, x_token: str = Header()):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item_id not in fake_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return fake_db[item_id]\n\n\n@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item, x_token: str = Header()):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item.id in fake_db:\n        raise HTTPException(status_code=409, detail=\"Item already exists\")\n    fake_db[item.id] = item\n    return item\n</code></pre>"},{"location":"tutorial/testing/#arquivo-de-teste-estendido","title":"Arquivo de teste estendido","text":"<p>Voc\u00ea pode ent\u00e3o atualizar <code>test_main.py</code> com os testes estendidos:</p> Python 3.8+ <pre><code>from readyapi.testclient import TestClient\n\nfrom .main import app\n\nclient = TestClient(app)\n\n\ndef test_read_item():\n    response = client.get(\"/items/foo\", headers={\"X-Token\": \"coneofsilence\"})\n    assert response.status_code == 200\n    assert response.json() == {\n        \"id\": \"foo\",\n        \"title\": \"Foo\",\n        \"description\": \"There goes my hero\",\n    }\n\n\ndef test_read_item_bad_token():\n    response = client.get(\"/items/foo\", headers={\"X-Token\": \"hailhydra\"})\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid X-Token header\"}\n\n\ndef test_read_nonexistent_item():\n    response = client.get(\"/items/baz\", headers={\"X-Token\": \"coneofsilence\"})\n    assert response.status_code == 404\n    assert response.json() == {\"detail\": \"Item not found\"}\n\n\ndef test_create_item():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"coneofsilence\"},\n        json={\"id\": \"foobar\", \"title\": \"Foo Bar\", \"description\": \"The Foo Barters\"},\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"id\": \"foobar\",\n        \"title\": \"Foo Bar\",\n        \"description\": \"The Foo Barters\",\n    }\n\n\ndef test_create_item_bad_token():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"hailhydra\"},\n        json={\"id\": \"bazz\", \"title\": \"Bazz\", \"description\": \"Drop the bazz\"},\n    )\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid X-Token header\"}\n\n\ndef test_create_existing_item():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"coneofsilence\"},\n        json={\n            \"id\": \"foo\",\n            \"title\": \"The Foo ID Stealers\",\n            \"description\": \"There goes my stealer\",\n        },\n    )\n    assert response.status_code == 409\n    assert response.json() == {\"detail\": \"Item already exists\"}\n</code></pre> <p>Sempre que voc\u00ea precisar que o cliente passe informa\u00e7\u00f5es na requisi\u00e7\u00e3o e n\u00e3o souber como, voc\u00ea pode pesquisar (no Google) como fazer isso no <code>httpx</code>, ou at\u00e9 mesmo como fazer isso com <code>requests</code>, j\u00e1 que o design do HTTPX \u00e9 baseado no design do Requests.</p> <p>Depois \u00e9 s\u00f3 fazer o mesmo nos seus testes.</p> <p>Por exemplo:</p> <ul> <li>Para passar um par\u00e2metro path ou query, adicione-o \u00e0 pr\u00f3pria URL.</li> <li>Para passar um corpo JSON, passe um objeto Python (por exemplo, um <code>dict</code>) para o par\u00e2metro <code>json</code>.</li> <li>Se voc\u00ea precisar enviar Dados de Formul\u00e1rio em vez de JSON, use o par\u00e2metro <code>data</code>.</li> <li>Para passar headers, use um <code>dict</code> no par\u00e2metro <code>headers</code>.</li> <li>Para cookies, um <code>dict</code> no par\u00e2metro <code>cookies</code>.</li> </ul> <p>Para mais informa\u00e7\u00f5es sobre como passar dados para o backend (usando <code>httpx</code> ou <code>TestClient</code>), consulte a documenta\u00e7\u00e3o do HTTPX.</p> <p>Informa\u00e7\u00e3o</p> <p>Observe que o <code>TestClient</code> recebe dados que podem ser convertidos para JSON, n\u00e3o para modelos Pydantic.</p> <p>Se voc\u00ea tiver um modelo Pydantic em seu teste e quiser enviar seus dados para o aplicativo durante o teste, poder\u00e1 usar o <code>jsonable_encoder</code> descrito em Codificador compat\u00edvel com JSON.</p>"},{"location":"tutorial/testing/#execute-o","title":"Execute-o","text":"<p>Depois disso, voc\u00ea s\u00f3 precisa instalar o <code>pytest</code>.</p> <p>Certifique-se de criar um ambiente virtual, ativ\u00e1-lo e instal\u00e1-lo, por exemplo:</p> <pre><code>$ pip install pytest\n\n---&gt; 100%\n</code></pre> <p>Ele detectar\u00e1 os arquivos e os testes automaticamente, os executar\u00e1 e informar\u00e1 os resultados para voc\u00ea.</p> <p>Execute os testes com:</p> <pre><code>$ pytest\n\n================ test session starts ================\nplatform linux -- Python 3.6.9, pytest-5.3.5, py-1.8.1, pluggy-0.13.1\nrootdir: /home/user/code/superawesome-cli/app\nplugins: forked-1.1.3, xdist-1.31.0, cov-2.8.1\ncollected 6 items\n\n---&gt; 100%\n\ntest_main.py &lt;span style=\"color: green; white-space: pre;\"&gt;......                            [100%]&lt;/span&gt;\n\n&lt;span style=\"color: green;\"&gt;================= 1 passed in 0.03s =================&lt;/span&gt;\n</code></pre>"},{"location":"tutorial/dependencies/","title":"Depend\u00eancias","text":"<p>O ReadyAPI possui um poderoso, mas intuitivo sistema de Inje\u00e7\u00e3o de Depend\u00eancia.</p> <p>Esse sistema foi pensado para ser f\u00e1cil de usar, e permitir que qualquer desenvolvedor possa integrar facilmente outros componentes ao ReadyAPI.</p>"},{"location":"tutorial/dependencies/#o-que-e-injecao-de-dependencia","title":"O que \u00e9 \"Inje\u00e7\u00e3o de Depend\u00eancia\"","text":"<p>\"Inje\u00e7\u00e3o de Depend\u00eancia\" no mundo da programa\u00e7\u00e3o significa, que existe uma maneira de declarar no seu c\u00f3digo (nesse caso, suas fun\u00e7\u00f5es de opera\u00e7\u00e3o de rota) para declarar as coisas que ele precisa para funcionar e que ser\u00e3o utilizadas: \"depend\u00eancias\".</p> <p>Ent\u00e3o, esse sistema (nesse caso o ReadyAPI) se encarrega de fazer o que for preciso para fornecer essas depend\u00eancias para o c\u00f3digo (\"injetando\" as depend\u00eancias).</p> <p>Isso \u00e9 bastante \u00fatil quando voc\u00ea precisa:</p> <ul> <li>Definir uma l\u00f3gica compartilhada (mesmo formato de c\u00f3digo repetidamente).</li> <li>Compartilhar conex\u00f5es com banco de dados.</li> <li>Aplicar regras de seguran\u00e7a, autentica\u00e7\u00e3o, pap\u00e9is de usu\u00e1rios, etc.</li> <li>E muitas outras coisas...</li> </ul> <p>Tudo isso, enquanto minimizamos a repeti\u00e7\u00e3o de c\u00f3digo.</p>"},{"location":"tutorial/dependencies/#primeiros-passos","title":"Primeiros passos","text":"<p>Vamos ver um exemplo simples. T\u00e3o simples que n\u00e3o ser\u00e1 muito \u00fatil, por enquanto.</p> <p>Mas dessa forma podemos focar em como o sistema de Inje\u00e7\u00e3o de Depend\u00eancia funciona.</p>"},{"location":"tutorial/dependencies/#criando-uma-dependencia-ou-injetavel","title":"Criando uma depend\u00eancia, ou \"injet\u00e1vel\"","text":"<p>Primeiro vamos focar na depend\u00eancia.</p> <p>Ela \u00e9 apenas uma fun\u00e7\u00e3o que pode receber os mesmos par\u00e2metros de uma fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre> <p>E pronto.</p> <p>2 linhas.</p> <p>E com a mesma forma e estrutura de todas as suas fun\u00e7\u00f5es de opera\u00e7\u00e3o de rota.</p> <p>Voc\u00ea pode pensar nela como uma fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota sem o \"decorador\" (sem a linha <code>@app.get(\"/some-path\")</code>).</p> <p>E com qualquer retorno que voc\u00ea desejar.</p> <p>Neste caso, a depend\u00eancia espera por:</p> <ul> <li>Um par\u00e2metro de consulta opcional <code>q</code> do tipo <code>str</code>.</li> <li>Um par\u00e2metro de consulta opcional <code>skip</code> do tipo <code>int</code>, e igual a <code>0</code> por padr\u00e3o.</li> <li>Um par\u00e2metro de consulta opcional <code>limit</code> do tipo <code>int</code>, e igual a <code>100</code> por padr\u00e3o.</li> </ul> <p>E ent\u00e3o retorna um <code>dict</code> contendo esses valores.</p> <p>Informa\u00e7\u00e3o</p> <p>ReadyAPI passou a suportar a nota\u00e7\u00e3o <code>Annotated</code> (e come\u00e7ou a recomend\u00e1-la) na vers\u00e3o 0.95.0.</p> <p>Se voc\u00ea utiliza uma vers\u00e3o anterior, ocorrer\u00e3o erros ao tentar utilizar <code>Annotated</code>.</p> <p>Certifique-se de Atualizar a vers\u00e3o do ReadyAPI para pelo menos 0.95.1 antes de usar <code>Annotated</code>.</p>"},{"location":"tutorial/dependencies/#importando-depends","title":"Importando <code>Depends</code>","text":"Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre>"},{"location":"tutorial/dependencies/#declarando-a-dependencia-no-dependente","title":"Declarando a depend\u00eancia, no \"dependente\"","text":"<p>Da mesma forma que voc\u00ea utiliza <code>Body</code>, <code>Query</code>, etc. Como par\u00e2metros de sua fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota, utilize <code>Depends</code> com um novo par\u00e2metro:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre> <p>Ainda que <code>Depends</code> seja utilizado nos par\u00e2metros da fun\u00e7\u00e3o da mesma forma que <code>Body</code>, <code>Query</code>, etc, <code>Depends</code> funciona de uma forma um pouco diferente.</p> <p>Voc\u00ea fornece um \u00fanico par\u00e2metro para <code>Depends</code>.</p> <p>Esse par\u00e2metro deve ser algo como uma fun\u00e7\u00e3o.</p> <p>Voc\u00ea n\u00e3o chama a fun\u00e7\u00e3o diretamente (n\u00e3o adicione os par\u00eanteses no final), apenas a passe como par\u00e2metro de <code>Depends()</code>.</p> <p>E essa fun\u00e7\u00e3o vai receber os par\u00e2metros da mesma forma que uma fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota.</p> <p>Dica</p> <p>Voc\u00ea ver\u00e1 quais outras \"coisas\", al\u00e9m de fun\u00e7\u00f5es, podem ser usadas como depend\u00eancias no pr\u00f3ximo cap\u00edtulo.</p> <p>Sempre que uma nova requisi\u00e7\u00e3o for realizada, o ReadyAPI se encarrega de:</p> <ul> <li>Chamar sua depend\u00eancia (\"injet\u00e1vel\") com os par\u00e2metros corretos.</li> <li>Obter o resultado da fun\u00e7\u00e3o.</li> <li>Atribuir esse resultado para o par\u00e2metro em sua fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota.</li> </ul> <pre><code>graph TB\n\ncommon_parameters([\"common_parameters\"])\nread_items[\"/items/\"]\nread_users[\"/users/\"]\n\ncommon_parameters --&gt; read_items\ncommon_parameters --&gt; read_users</code></pre> <p>Assim, voc\u00ea escreve um c\u00f3digo compartilhado apenas uma vez e o ReadyAPI se encarrega de cham\u00e1-lo em suas opera\u00e7\u00f5es de rota.</p> <p>Checando</p> <p>Perceba que voc\u00ea n\u00e3o precisa criar uma classe especial e enviar a depend\u00eancia para algum outro lugar em que o ReadyAPI a \"registre\" ou realize qualquer opera\u00e7\u00e3o similar.</p> <p>Voc\u00ea apenas envia para <code>Depends</code> e o ReadyAPI sabe como fazer o resto.</p>"},{"location":"tutorial/dependencies/#compartilhando-dependencias-annotated","title":"Compartilhando depend\u00eancias <code>Annotated</code>","text":"<p>Nos exemplos acima, voc\u00ea pode ver que existe uma pequena duplica\u00e7\u00e3o de c\u00f3digo.</p> <p>Quando voc\u00ea precisa utilizar a depend\u00eancia <code>common_parameters()</code>, voc\u00ea precisa escrever o par\u00e2metro inteiro com uma anota\u00e7\u00e3o de tipo e <code>Depends()</code>:</p> <pre><code>commons: Annotated[dict, Depends(common_parameters)]\n</code></pre> <p>Mas como estamos utilizando <code>Annotated</code>, podemos guardar esse valor <code>Annotated</code> em uma vari\u00e1vel e utiliz\u00e1-la em m\u00faltiplos locais:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\nCommonsDep = Annotated[dict, Depends(common_parameters)]\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonsDep):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: CommonsDep):\n    return commons\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\nCommonsDep = Annotated[dict, Depends(common_parameters)]\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonsDep):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: CommonsDep):\n    return commons\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\nCommonsDep = Annotated[dict, Depends(common_parameters)]\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonsDep):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: CommonsDep):\n    return commons\n</code></pre> <p>Dica</p> <p>Isso \u00e9 apenas Python padr\u00e3o, essa funcionalidade \u00e9 chamada de \"type alias\", e na verdade n\u00e3o \u00e9 espec\u00edfica ao ReadyAPI.</p> <p>Mas como o ReadyAPI se baseia em conven\u00e7\u00f5es do Python, incluindo <code>Annotated</code>, voc\u00ea pode incluir esse truque no seu c\u00f3digo. \ud83d\ude0e</p> <p>As depend\u00eancias continuar\u00e3o funcionando como esperado, e a melhor parte \u00e9 que a informa\u00e7\u00e3o sobre o tipo \u00e9 preservada, o que signfica que seu editor de texto ainda ir\u00e1 incluir preenchimento autom\u00e1tico, visualiza\u00e7\u00e3o de erros, etc. O mesmo vale para ferramentas como <code>mypy</code>.</p> <p>Isso \u00e9 especialmente \u00fatil para uma base de c\u00f3digo grande onde as mesmas depend\u00eancias s\u00e3o utilizadas repetidamente em muitas opera\u00e7\u00f5es de rota.</p>"},{"location":"tutorial/dependencies/#async-ou-nao-eis-a-questao","title":"<code>Async</code> ou n\u00e3o, eis a quest\u00e3o","text":"<p>Como as depend\u00eancias tamb\u00e9m ser\u00e3o chamadas pelo ReadyAPI (da mesma forma que fun\u00e7\u00f5es de opera\u00e7\u00e3o de rota), as mesmas regras se aplicam ao definir suas fun\u00e7\u00f5es.</p> <p>Voc\u00ea pode utilizar <code>async def</code> ou apenas <code>def</code>.</p> <p>E voc\u00ea pode declarar depend\u00eancias utilizando <code>async def</code> dentro de fun\u00e7\u00f5es de opera\u00e7\u00e3o de rota definidas com <code>def</code>, ou declarar depend\u00eancias com <code>def</code> e utilizar dentro de fun\u00e7\u00f5es de opera\u00e7\u00e3o de rota definidas com <code>async def</code>, etc.</p> <p>N\u00e3o faz diferen\u00e7a. O ReadyAPI sabe o que fazer.</p> <p>Nota</p> <p>Caso voc\u00ea n\u00e3o conhe\u00e7a, veja em Async: \"Com Pressa?\" a sess\u00e3o acerca de <code>async</code> e <code>await</code> na documenta\u00e7\u00e3o.</p>"},{"location":"tutorial/dependencies/#integrando-com-openapi","title":"Integrando com OpenAPI","text":"<p>Todas as declara\u00e7\u00f5es de requisi\u00e7\u00f5es, valida\u00e7\u00f5es e requisitos para suas depend\u00eancias (e sub-depend\u00eancias) ser\u00e3o integradas em um mesmo esquema OpenAPI.</p> <p>Ent\u00e3o, a documenta\u00e7\u00e3o interativa tamb\u00e9m ter\u00e1 toda a informa\u00e7\u00e3o sobre essas depend\u00eancias:</p> <p></p>"},{"location":"tutorial/dependencies/#caso-de-uso-simples","title":"Caso de Uso Simples","text":"<p>Se voc\u00ea parar para ver, fun\u00e7\u00f5es de opera\u00e7\u00e3o de rota s\u00e3o declaradas para serem usadas sempre que uma rota e uma opera\u00e7\u00e3o se encaixam, e ent\u00e3o o ReadyAPI se encarrega de chamar a fun\u00e7\u00e3o correspondente com os argumentos corretos, extraindo os dados da requisi\u00e7\u00e3o.</p> <p>Na verdade, todos (ou a maioria) dos frameworks web funcionam da mesma forma.</p> <p>Voc\u00ea nunca chama essas fun\u00e7\u00f5es diretamente. Elas s\u00e3o chamadas pelo framework utilizado (nesse caso, ReadyAPI).</p> <p>Com o Sistema de Inje\u00e7\u00e3o de Depend\u00eancia, voc\u00ea tamb\u00e9m pode informar ao ReadyAPI que sua fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota tamb\u00e9m \"depende\" em algo a mais que deve ser executado antes de sua fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota, e o ReadyAPI se encarrega de executar e \"injetar\" os resultados.</p> <p>Outros termos comuns para essa mesma ideia de \"inje\u00e7\u00e3o de depend\u00eancia\" s\u00e3o:</p> <ul> <li>recursos</li> <li>provedores</li> <li>servi\u00e7os</li> <li>injet\u00e1veis</li> <li>componentes</li> </ul>"},{"location":"tutorial/dependencies/#plug-ins-em-readyapi","title":"Plug-ins em ReadyAPI","text":"<p>Integra\u00e7\u00f5es e \"plug-ins\" podem ser constru\u00eddos com o sistema de Inje\u00e7\u00e3o de Depend\u00eancia. Mas na verdade, n\u00e3o h\u00e1 necessidade de criar \"plug-ins\", j\u00e1 que utilizando depend\u00eancias \u00e9 poss\u00edvel declarar um n\u00famero infinito de integra\u00e7\u00f5es e intera\u00e7\u00f5es que se tornam dispon\u00edveis para as suas fun\u00e7\u00f5es de opera\u00e7\u00e3o de rota.</p> <p>E as depend\u00eancias pode ser criadas de uma forma bastante simples e intuitiva que permite que voc\u00ea importe apenas os pacotes Python que forem necess\u00e1rios, e integr\u00e1-los com as fun\u00e7\u00f5es de sua API em algumas linhas de c\u00f3digo, literalmente.</p> <p>Voc\u00ea ver\u00e1 exemplos disso nos pr\u00f3ximos cap\u00edtulos, acerca de bancos de dados relacionais e NoSQL, seguran\u00e7a, etc.</p>"},{"location":"tutorial/dependencies/#compatibilidade-do-readyapi","title":"Compatibilidade do ReadyAPI","text":"<p>A simplicidade do sistema de inje\u00e7\u00e3o de depend\u00eancia do ReadyAPI faz ele compat\u00edvel com:</p> <ul> <li>todos os bancos de dados relacionais</li> <li>bancos de dados NoSQL</li> <li>pacotes externos</li> <li>APIs externas</li> <li>sistemas de autentica\u00e7\u00e3o e autoriza\u00e7\u00e3o</li> <li>istemas de monitoramento de uso para APIs</li> <li>sistemas de inje\u00e7\u00e3o de dados de resposta</li> <li>etc.</li> </ul>"},{"location":"tutorial/dependencies/#simples-e-poderoso","title":"Simples e Poderoso","text":"<p>Mesmo que o sistema hier\u00e1rquico de inje\u00e7\u00e3o de depend\u00eancia seja simples de definir e utilizar, ele ainda \u00e9 bastante poderoso.</p> <p>Voc\u00ea pode definir depend\u00eancias que por sua vez definem suas pr\u00f3prias depend\u00eancias.</p> <p>No fim, uma \u00e1rvore hier\u00e1rquica de depend\u00eancias \u00e9 criadas, e o sistema de Inje\u00e7\u00e3o de Depend\u00eancia toma conta de resolver todas essas depend\u00eancias (e as sub-depend\u00eancias delas) para voc\u00ea, e prov\u00ea (injeta) os resultados em cada passo.</p> <p>Por exemplo, vamos supor que voc\u00ea possua 4 endpoints na sua API (opera\u00e7\u00f5es de rota):</p> <ul> <li><code>/items/public/</code></li> <li><code>/items/private/</code></li> <li><code>/users/{user_id}/activate</code></li> <li><code>/items/pro/</code></li> </ul> <p>Voc\u00ea poderia adicionar diferentes requisitos de permiss\u00e3o para cada um deles utilizando apenas depend\u00eancias e sub-depend\u00eancias:</p> <pre><code>graph TB\n\ncurrent_user([\"current_user\"])\nactive_user([\"active_user\"])\nadmin_user([\"admin_user\"])\npaying_user([\"paying_user\"])\n\npublic[\"/items/public/\"]\nprivate[\"/items/private/\"]\nactivate_user[\"/users/{user_id}/activate\"]\npro_items[\"/items/pro/\"]\n\ncurrent_user --&gt; active_user\nactive_user --&gt; admin_user\nactive_user --&gt; paying_user\n\ncurrent_user --&gt; public\nactive_user --&gt; private\nadmin_user --&gt; activate_user\npaying_user --&gt; pro_items</code></pre>"},{"location":"tutorial/dependencies/#integracao-com-openapi","title":"Integra\u00e7\u00e3o com OpenAPI","text":"<p>Todas essas depend\u00eancias, ao declarar os requisitos para suas opera\u00e7\u00f5es de rota, tamb\u00e9m adicionam par\u00e2metros, valida\u00e7\u00f5es, etc.</p> <p>O ReadyAPI se encarrega de adicionar tudo isso ao esquema OpenAPI, para que seja mostrado nos sistemas de documenta\u00e7\u00e3o interativa.</p>"},{"location":"tutorial/dependencies/classes-as-dependencies/","title":"Classes como Depend\u00eancias","text":"<p>Antes de nos aprofundarmos no sistema de Inje\u00e7\u00e3o de Depend\u00eancia, vamos melhorar o exemplo anterior.</p>"},{"location":"tutorial/dependencies/classes-as-dependencies/#dict-do-exemplo-anterior","title":"<code>dict</code> do exemplo anterior","text":"<p>No exemplo anterior, n\u00f3s retorn\u00e1vamos um <code>dict</code> da nossa depend\u00eancia (\"injet\u00e1vel\"):</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre> <p>Mas assim obtemos um <code>dict</code> como valor do par\u00e2metro <code>commons</code> na fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota.</p> <p>E sabemos que editores de texto n\u00e3o t\u00eam como oferecer muitas funcionalidades (como sugest\u00f5es autom\u00e1ticas) para objetos do tipo <code>dict</code>, por que n\u00e3o h\u00e1 como eles saberem o tipo das chaves e dos valores.</p> <p>Podemos fazer melhor...</p>"},{"location":"tutorial/dependencies/classes-as-dependencies/#o-que-caracteriza-uma-dependencia","title":"O que caracteriza uma depend\u00eancia","text":"<p>At\u00e9 agora voc\u00ea apenas viu depend\u00eancias declaradas como fun\u00e7\u00f5es.</p> <p>Mas essa n\u00e3o \u00e9 a \u00fanica forma de declarar depend\u00eancias (mesmo que provavelmente seja a mais comum).</p> <p>O fator principal para uma depend\u00eancia \u00e9 que ela deve ser \"cham\u00e1vel\"</p> <p>Um objeto \"cham\u00e1vel\" em Python \u00e9 qualquer coisa que o Python possa \"chamar\" como uma fun\u00e7\u00e3o</p> <p>Ent\u00e3o se voc\u00ea tiver um objeto <code>alguma_coisa</code> (que pode n\u00e3o ser uma fun\u00e7\u00e3o) que voc\u00ea possa \"chamar\" (execut\u00e1-lo) dessa maneira:</p> <pre><code>something()\n</code></pre> <p>ou</p> <pre><code>something(some_argument, some_keyword_argument=\"foo\")\n</code></pre> <p>Ent\u00e3o esse objeto \u00e9 um \"cham\u00e1vel\".</p>"},{"location":"tutorial/dependencies/classes-as-dependencies/#classes-como-dependencias_1","title":"Classes como depend\u00eancias","text":"<p>Voc\u00ea deve ter percebido que para criar um inst\u00e2ncia de uma classe em Python, a mesma sintaxe \u00e9 utilizada.</p> <p>Por exemplo:</p> <pre><code>class Cat:\n    def __init__(self, name: str):\n        self.name = name\n\n\nfluffy = Cat(name=\"Mr Fluffy\")\n</code></pre> <p>Nesse caso,  <code>fluffy</code> \u00e9 uma inst\u00e2ncia da classe <code>Cat</code>.</p> <p>E para criar <code>fluffy</code>, voc\u00ea est\u00e1 \"chamando\" <code>Cat</code>.</p> <p>Ent\u00e3o, uma classe Python tamb\u00e9m \u00e9 \"cham\u00e1vel\".</p> <p>Ent\u00e3o, no ReadyAPI, voc\u00ea pode utilizar uma classe Python como uma depend\u00eancia.</p> <p>O que o ReadyAPI realmente verifica, \u00e9 se a depend\u00eancia \u00e9 algo cham\u00e1vel (fun\u00e7\u00e3o, classe, ou outra coisa) e os par\u00e2metros que foram definidos.</p> <p>Se voc\u00ea passar algo \"cham\u00e1vel\" como uma depend\u00eancia do ReadyAPI, o framework ir\u00e1 analisar os par\u00e2metros desse \"cham\u00e1vel\" e process\u00e1-los da mesma forma que os par\u00e2metros de uma fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota. Incluindo as sub-depend\u00eancias.</p> <p>Isso tamb\u00e9m se aplica a objetos cham\u00e1veis que n\u00e3o recebem nenhum par\u00e2metro. Da mesma forma que uma fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota sem par\u00e2metros.</p> <p>Ent\u00e3o, podemos mudar o \"injet\u00e1vel\" na depend\u00eancia <code>common_parameters</code> acima para a classe <code>CommonQueryParams</code>:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends(CommonQueryParams)):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends(CommonQueryParams)):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Observe o m\u00e9todo <code>__init__</code> usado para criar uma inst\u00e2ncia da classe:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends(CommonQueryParams)):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends(CommonQueryParams)):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>...ele possui os mesmos par\u00e2metros que nosso <code>common_parameters</code> anterior:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre> <p>Esses par\u00e2metros s\u00e3o utilizados pelo ReadyAPI para \"definir\" a depend\u00eancia.</p> <p>Em ambos os casos teremos:</p> <ul> <li>Um par\u00e2metro de consulta <code>q</code> opcional do tipo <code>str</code>.</li> <li>Um par\u00e2metro de consulta <code>skip</code> do tipo <code>int</code>, com valor padr\u00e3o <code>0</code>.</li> <li>Um par\u00e2metro de consulta <code>limit</code> do tipo <code>int</code>, com valor padr\u00e3o <code>100</code>.</li> </ul> <p>Os dados ser\u00e3o convertidos, validados, documentados no esquema da OpenAPI e etc nos dois casos.</p>"},{"location":"tutorial/dependencies/classes-as-dependencies/#utilizando","title":"Utilizando","text":"<p>Agora voc\u00ea pode declarar sua depend\u00eancia utilizando essa classe.</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends(CommonQueryParams)):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends(CommonQueryParams)):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>O ReadyAPI chama a classe <code>CommonQueryParams</code>. Isso cria uma \"inst\u00e2ncia\" dessa classe e \u00e9 a inst\u00e2ncia que ser\u00e1 passada para o par\u00e2metro <code>commons</code> na sua fun\u00e7\u00e3o.</p>"},{"location":"tutorial/dependencies/classes-as-dependencies/#anotacoes-de-tipo-vs-depends","title":"Anota\u00e7\u00f5es de Tipo vs <code>Depends</code>","text":"<p>Perceba como escrevemos <code>CommonQueryParams</code> duas vezes no c\u00f3digo abaixo:</p> Python 3.8+Python 3.8+ non-Annotated <pre><code>commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]\n</code></pre> <p>Dica</p> <p>Utilize a vers\u00e3o com <code>Annotated</code> se poss\u00edvel.</p> <pre><code>commons: CommonQueryParams = Depends(CommonQueryParams)\n</code></pre> <p>O \u00faltimo <code>CommonQueryParams</code>, em:</p> <pre><code>... Depends(CommonQueryParams)\n</code></pre> <p>...\u00e9 o que o ReadyAPI ir\u00e1 realmente usar para saber qual \u00e9 a depend\u00eancia.</p> <p>\u00c9 a partir dele que o ReadyAPI ir\u00e1 extrair os par\u00e2metros passados e ser\u00e1 o que o ReadyAPI ir\u00e1 realmente chamar.</p> <p>Nesse caso, o primeiro <code>CommonQueryParams</code>, em:</p> Python 3.8+Python 3.8+ non-Annotated <pre><code>commons: Annotated[CommonQueryParams, ...\n</code></pre> <p>Dica</p> <p>Utilize a vers\u00e3o com <code>Annotated</code> se poss\u00edvel.</p> <pre><code>commons: CommonQueryParams ...\n</code></pre> <p>...n\u00e3o tem nenhum signficado especial para o ReadyAPI. O ReadyAPI n\u00e3o ir\u00e1 utiliz\u00e1-lo para convers\u00e3o dos dados, valida\u00e7\u00e3o, etc (j\u00e1 que ele utiliza <code>Depends(CommonQueryParams)</code> para isso).</p> <p>Na verdade voc\u00ea poderia escrever apenas:</p> Python 3.8+Python 3.8+ non-Annotated <pre><code>commons: Annotated[Any, Depends(CommonQueryParams)]\n</code></pre> <p>Dica</p> <p>Utilize a vers\u00e3o com <code>Annotated</code> se poss\u00edvel.</p> <pre><code>commons = Depends(CommonQueryParams)\n</code></pre> <p>...como em:</p> Python 3.10+ <pre><code>from typing import Annotated, Any\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[Any, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Any, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[Any, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <pre><code>from typing import Any, Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[Any, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons=Depends(CommonQueryParams)):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons=Depends(CommonQueryParams)):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Mas declarar o tipo \u00e9 encorajado por que \u00e9 a forma que o seu editor de texto sabe o que ser\u00e1 passado como valor do par\u00e2metro <code>commons</code>.</p> <p></p>"},{"location":"tutorial/dependencies/classes-as-dependencies/#pegando-um-atalho","title":"Pegando um Atalho","text":"<p>Mas voc\u00ea pode ver que temos uma repeti\u00e7\u00e3o do c\u00f3digo neste exemplo, escrevendo <code>CommonQueryParams</code> duas vezes:</p> Python 3.8+Python 3.8+ non-Annotated <pre><code>commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]\n</code></pre> <p>Dica</p> <p>Utilize a vers\u00e3o com <code>Annotated</code> se poss\u00edvel.</p> <pre><code>commons: CommonQueryParams = Depends(CommonQueryParams)\n</code></pre> <p>O ReadyAPI nos fornece um atalho para esses casos, onde a depend\u00eancia \u00e9 especificamente uma classe que o ReadyAPI ir\u00e1 \"chamar\" para criar uma inst\u00e2ncia da pr\u00f3pria classe.</p> <p>Para esses casos espec\u00edficos, voc\u00ea pode fazer o seguinte:</p> <p>Em vez de escrever:</p> Python 3.8+Python 3.8+ non-Annotated <pre><code>commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]\n</code></pre> <p>Dica</p> <p>Utilize a vers\u00e3o com <code>Annotated</code> se poss\u00edvel.</p> <pre><code>commons: CommonQueryParams = Depends(CommonQueryParams)\n</code></pre> <p>...escreva:</p> Python 3.8+Python 3.8 non-Annotated <pre><code>commons: Annotated[CommonQueryParams, Depends()]\n</code></pre> <p>Dica</p> <p>Utilize a vers\u00e3o com <code>Annotated</code> se poss\u00edvel.</p> <pre><code>commons: CommonQueryParams = Depends()\n</code></pre> <p>Voc\u00ea declara a depend\u00eancia como o tipo do par\u00e2metro, e utiliza <code>Depends()</code> sem nenhum par\u00e2metro, em vez de ter que escrever a classe novamente dentro de <code>Depends(CommonQueryParams)</code>.</p> <p>O mesmo exemplo ficaria ent\u00e3o dessa forma:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends()]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends()]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends()]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends()):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends()):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>...e o ReadyAPI saber\u00e1 o que fazer.</p> <p>Dica</p> <p>Se isso parece mais confuso do que \u00fatil, n\u00e3o utilize, voc\u00ea n\u00e3o precisa disso.</p> <p>\u00c9 apenas um atalho. Por que o ReadyAPI se preocupa em ajudar a minimizar a repeti\u00e7\u00e3o de c\u00f3digo.</p>"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/","title":"Depend\u00eancias em decoradores de opera\u00e7\u00f5es de rota","text":"<p>Em alguns casos voc\u00ea n\u00e3o precisa necessariamente retornar o valor de uma depend\u00eancia dentro de uma fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota.</p> <p>Ou a depend\u00eancia n\u00e3o retorna nenhum valor.</p> <p>Mas voc\u00ea ainda precisa que ela seja executada/resolvida.</p> <p>Para esses casos, em vez de declarar um par\u00e2metro em uma fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota com <code>Depends</code>, voc\u00ea pode adicionar um argumento <code>dependencies</code> do tipo <code>list</code> ao decorador da opera\u00e7\u00e3o de rota.</p>"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#adicionando-dependencies-ao-decorador-da-operacao-de-rota","title":"Adicionando <code>dependencies</code> ao decorador da opera\u00e7\u00e3o de rota","text":"<p>O decorador da opera\u00e7\u00e3o de rota recebe um argumento opcional <code>dependencies</code>.</p> <p>Ele deve ser uma lista de <code>Depends()</code>:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, Header, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: str = Header()):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: str = Header()):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre> <p>Essas depend\u00eancias ser\u00e3o executadas/resolvidas da mesma forma que depend\u00eancias comuns. Mas o valor delas (se existir algum) n\u00e3o ser\u00e1 passado para a sua fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota.</p> <p>Dica</p> <p>Alguns editores de texto checam par\u00e2metros de fun\u00e7\u00f5es n\u00e3o utilizados, e os mostram como erros.</p> <p>Utilizando <code>dependencies</code> no decorador da opera\u00e7\u00e3o de rota voc\u00ea pode garantir que elas ser\u00e3o executadas enquanto evita errors de editores/ferramentas.</p> <p>Isso tamb\u00e9m pode ser \u00fatil para evitar confundir novos desenvolvedores que ao ver um par\u00e2metro n\u00e3o usado no seu c\u00f3digo podem pensar que ele \u00e9 desnecess\u00e1rio.</p> <p>Informa\u00e7\u00e3o</p> <p>Neste exemplo utilizamos cabe\u00e7alhos personalizados inventados <code>X-Keys</code> e <code>X-Token</code>.</p> <p>Mas em situa\u00e7\u00f5es reais, como implementa\u00e7\u00f5es de seguran\u00e7a, voc\u00ea pode obter mais vantagens em usar as Ferramentas de seguran\u00e7a integradas (o pr\u00f3ximo cap\u00edtulo).</p>"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#erros-das-dependencias-e-valores-de-retorno","title":"Erros das depend\u00eancias e valores de retorno","text":"<p>Voc\u00ea pode utilizar as mesmas fun\u00e7\u00f5es de depend\u00eancias que voc\u00ea usaria normalmente.</p>"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#requisitos-de-dependencias","title":"Requisitos de Depend\u00eancias","text":"<p>Depend\u00eancias podem declarar requisitos de requisi\u00e7\u00f5es (como cabe\u00e7alhos) ou outras subdepend\u00eancias:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, Header, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: str = Header()):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: str = Header()):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre>"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#levantando-excecoes","title":"Levantando exce\u00e7\u00f5es","text":"<p>Essas depend\u00eancias podem levantar exce\u00e7\u00f5es, da mesma forma que depend\u00eancias comuns:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, Header, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: str = Header()):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: str = Header()):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre>"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#valores-de-retorno","title":"Valores de retorno","text":"<p>E elas tamb\u00e9m podem ou n\u00e3o retornar valores, eles n\u00e3o ser\u00e3o utilizados.</p> <p>Ent\u00e3o, voc\u00ea pode reutilizar uma depend\u00eancia comum (que retorna um valor) que j\u00e1 seja utilizada em outro lugar, e mesmo que o valor n\u00e3o seja utilizado, a depend\u00eancia ser\u00e1 executada:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, Header, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: str = Header()):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: str = Header()):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre>"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#dependencias-para-um-grupo-de-operacoes-de-rota","title":"Depend\u00eancias para um grupo de opera\u00e7\u00f5es de rota","text":"<p>Mais a frente, quando voc\u00ea ler sobre como estruturar aplica\u00e7\u00f5es maiores (Bigger Applications - Multiple Files), possivelmente com m\u00faltiplos arquivos, voc\u00ea aprender\u00e1 a declarar um \u00fanico par\u00e2metro <code>dependencies</code> para um grupo de opera\u00e7\u00f5es de rota.</p>"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#dependencias-globais","title":"Depend\u00eancias globais","text":"<p>No pr\u00f3ximo passo veremos como adicionar depend\u00eancias para uma aplica\u00e7\u00e3o <code>ReadyAPI</code> inteira, para que ela seja aplicada em toda opera\u00e7\u00e3o de rota.</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/","title":"Depend\u00eancias com yield","text":"<p>O ReadyAPI possui suporte para depend\u00eancias que realizam alguns passos extras ao finalizar.</p> <p>Para fazer isso, utilize <code>yield</code> em vez de <code>return</code>, e escreva os passos extras (c\u00f3digo) depois.</p> <p>Dica</p> <p>Garanta que <code>yield</code> \u00e9 utilizado apenas uma vez.</p> <p>Detalhes T\u00e9cnicos</p> <p>Qualquer fun\u00e7\u00e3o que possa ser utilizada com:</p> <ul> <li><code>@contextlib.contextmanager</code> ou</li> <li><code>@contextlib.asynccontextmanager</code></li> </ul> <p>pode ser utilizada como uma depend\u00eancia do ReadyAPI.</p> <p>Na realidade, o ReadyAPI utiliza esses dois decoradores internamente.</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/#uma-dependencia-de-banco-de-dados-com-yield","title":"Uma depend\u00eancia de banco de dados com <code>yield</code>","text":"<p>Por exemplo, voc\u00ea poderia utilizar isso para criar uma sess\u00e3o do banco de dados, e fech\u00e1-la ap\u00f3s terminar sua opera\u00e7\u00e3o.</p> <p>Apenas o c\u00f3digo anterior a declara\u00e7\u00e3o com <code>yield</code> e o c\u00f3digo contendo essa declara\u00e7\u00e3o s\u00e3o executados antes de criar uma resposta.</p> Python 3.8+ <pre><code>async def get_db():\n    db = DBSession()\n    try:\n        yield db\n    finally:\n        db.close()\n</code></pre> <p>O valor gerado (yielded) \u00e9 o que \u00e9 injetado nas opera\u00e7\u00f5es de rota e outras depend\u00eancias.</p> Python 3.8+ <pre><code>async def get_db():\n    db = DBSession()\n    try:\n        yield db\n    finally:\n        db.close()\n</code></pre> <p>O c\u00f3digo ap\u00f3s o <code>yield</code> \u00e9 executado ap\u00f3s a resposta ser entregue:</p> Python 3.8+ <pre><code>async def get_db():\n    db = DBSession()\n    try:\n        yield db\n    finally:\n        db.close()\n</code></pre> <p>Dica</p> <p>Voc\u00ea pode usar fun\u00e7\u00f5es ass\u00edncronas (<code>async</code>) ou fun\u00e7\u00f5es comuns.</p> <p>O ReadyAPI saber\u00e1 o que fazer com cada uma, da mesma forma que as depend\u00eancias comuns.</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/#uma-dependencia-com-yield-e-try","title":"Uma depend\u00eancia com <code>yield</code> e <code>try</code>","text":"<p>Se voc\u00ea utilizar um bloco <code>try</code> em uma depend\u00eancia com <code>yield</code>, voc\u00ea ir\u00e1 capturar qualquer exce\u00e7\u00e3o que for lan\u00e7ada enquanto a depend\u00eancia \u00e9 utilizada.</p> <p>Por exemplo, se algum c\u00f3digo em um certo momento no meio da opera\u00e7\u00e3o, em outra depend\u00eancia ou em uma opera\u00e7\u00e3o de rota, fizer um \"rollback\" de uma transa\u00e7\u00e3o de banco de dados ou causar qualquer outro erro, voc\u00ea ir\u00e1 capturar a exce\u00e7\u00e3o em sua depend\u00eancia.</p> <p>Ent\u00e3o, voc\u00ea pode procurar por essa exce\u00e7\u00e3o espec\u00edfica dentro da depend\u00eancia com <code>except AlgumaExcecao</code>.</p> <p>Da mesma forma, voc\u00ea pode utilizar <code>finally</code> para garantir que os passos de sa\u00edda s\u00e3o executados, com ou sem exce\u00e7\u00f5es.</p> <pre><code>async def get_db():\n    db = DBSession()\n    try:\n        yield db\n    finally:\n        db.close()\n</code></pre>"},{"location":"tutorial/dependencies/dependencies-with-yield/#subdependencias-com-yield","title":"Subdepend\u00eancias com <code>yield</code>","text":"<p>Voc\u00ea pode ter subdepend\u00eancias e \"\u00e1rvores\" de subdepend\u00eancias de qualquer tamanho e forma, e qualquer uma ou todas elas podem utilizar <code>yield</code>.</p> <p>O ReadyAPI garantir\u00e1 que o \"c\u00f3digo de sa\u00edda\" em cada depend\u00eancia com <code>yield</code> \u00e9 executado na ordem correta.</p> <p>Por exemplo, <code>dependency_c</code> pode depender de <code>dependency_b</code>, e <code>dependency_b</code> depender de <code>dependency_a</code>:</p> python 3.9+python 3.8+python 3.8+ non-annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Depends\n\n\nasync def dependency_a():\n    dep_a = generate_dep_a()\n    try:\n        yield dep_a\n    finally:\n        dep_a.close()\n\n\nasync def dependency_b(dep_a: Annotated[DepA, Depends(dependency_a)]):\n    dep_b = generate_dep_b()\n    try:\n        yield dep_b\n    finally:\n        dep_b.close(dep_a)\n\n\nasync def dependency_c(dep_b: Annotated[DepB, Depends(dependency_b)]):\n    dep_c = generate_dep_c()\n    try:\n        yield dep_c\n    finally:\n        dep_c.close(dep_b)\n</code></pre> <pre><code>from readyapi import Depends\nfrom typing_extensions import Annotated\n\n\nasync def dependency_a():\n    dep_a = generate_dep_a()\n    try:\n        yield dep_a\n    finally:\n        dep_a.close()\n\n\nasync def dependency_b(dep_a: Annotated[DepA, Depends(dependency_a)]):\n    dep_b = generate_dep_b()\n    try:\n        yield dep_b\n    finally:\n        dep_b.close(dep_a)\n\n\nasync def dependency_c(dep_b: Annotated[DepB, Depends(dependency_b)]):\n    dep_c = generate_dep_c()\n    try:\n        yield dep_c\n    finally:\n        dep_c.close(dep_b)\n</code></pre> <p>Dica</p> <p>Utilize a vers\u00e3o com <code>Annotated</code> se poss\u00edvel.</p> <pre><code>from readyapi import Depends\n\n\nasync def dependency_a():\n    dep_a = generate_dep_a()\n    try:\n        yield dep_a\n    finally:\n        dep_a.close()\n\n\nasync def dependency_b(dep_a=Depends(dependency_a)):\n    dep_b = generate_dep_b()\n    try:\n        yield dep_b\n    finally:\n        dep_b.close(dep_a)\n\n\nasync def dependency_c(dep_b=Depends(dependency_b)):\n    dep_c = generate_dep_c()\n    try:\n        yield dep_c\n    finally:\n        dep_c.close(dep_b)\n</code></pre> <p>E todas elas podem utilizar <code>yield</code>.</p> <p>Neste caso, <code>dependency_c</code> precisa que o valor de <code>dependency_b</code> (nomeada de <code>dep_b</code> aqui) continue dispon\u00edvel para executar seu c\u00f3digo de sa\u00edda.</p> <p>E, por outro lado, <code>dependency_b</code> precisa que o valor de <code>dependency_a</code> (nomeada de <code>dep_a</code>) continue dispon\u00edvel para executar seu c\u00f3digo de sa\u00edda.</p> python 3.9+python 3.8+python 3.8+ non-annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Depends\n\n\nasync def dependency_a():\n    dep_a = generate_dep_a()\n    try:\n        yield dep_a\n    finally:\n        dep_a.close()\n\n\nasync def dependency_b(dep_a: Annotated[DepA, Depends(dependency_a)]):\n    dep_b = generate_dep_b()\n    try:\n        yield dep_b\n    finally:\n        dep_b.close(dep_a)\n\n\nasync def dependency_c(dep_b: Annotated[DepB, Depends(dependency_b)]):\n    dep_c = generate_dep_c()\n    try:\n        yield dep_c\n    finally:\n        dep_c.close(dep_b)\n</code></pre> <pre><code>from readyapi import Depends\nfrom typing_extensions import Annotated\n\n\nasync def dependency_a():\n    dep_a = generate_dep_a()\n    try:\n        yield dep_a\n    finally:\n        dep_a.close()\n\n\nasync def dependency_b(dep_a: Annotated[DepA, Depends(dependency_a)]):\n    dep_b = generate_dep_b()\n    try:\n        yield dep_b\n    finally:\n        dep_b.close(dep_a)\n\n\nasync def dependency_c(dep_b: Annotated[DepB, Depends(dependency_b)]):\n    dep_c = generate_dep_c()\n    try:\n        yield dep_c\n    finally:\n        dep_c.close(dep_b)\n</code></pre> <p>Dica</p> <p>Utilize a vers\u00e3o com <code>Annotated</code> se poss\u00edvel.</p> <pre><code>from readyapi import Depends\n\n\nasync def dependency_a():\n    dep_a = generate_dep_a()\n    try:\n        yield dep_a\n    finally:\n        dep_a.close()\n\n\nasync def dependency_b(dep_a=Depends(dependency_a)):\n    dep_b = generate_dep_b()\n    try:\n        yield dep_b\n    finally:\n        dep_b.close(dep_a)\n\n\nasync def dependency_c(dep_b=Depends(dependency_b)):\n    dep_c = generate_dep_c()\n    try:\n        yield dep_c\n    finally:\n        dep_c.close(dep_b)\n</code></pre> <p>Da mesma forma, voc\u00ea pode ter algumas depend\u00eancias com <code>yield</code> e outras com <code>return</code> e ter uma rela\u00e7\u00e3o de depend\u00eancia entre algumas dos dois tipos.</p> <p>E voc\u00ea poderia ter uma \u00fanica depend\u00eancia que precisa de diversas outras depend\u00eancias com <code>yield</code>, etc.</p> <p>Voc\u00ea pode ter qualquer combina\u00e7\u00e3o de depend\u00eancias que voc\u00ea quiser.</p> <p>O ReadyAPI se encarrega de execut\u00e1-las na ordem certa.</p> <p>Detalhes T\u00e9cnicos</p> <p>Tudo isso funciona gra\u00e7as aos gerenciadores de contexto do Python.</p> <p>O ReadyAPI utiliza eles internamente para alcan\u00e7ar isso.</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/#dependencias-com-yield-e-httpexception","title":"Depend\u00eancias com <code>yield</code> e <code>httpexception</code>","text":"<p>Voc\u00ea viu que depend\u00eancias podem ser utilizadas com <code>yield</code> e podem incluir blocos <code>try</code> para capturar exce\u00e7\u00f5es.</p> <p>Da mesma forma, voc\u00ea pode lan\u00e7ar uma <code>httpexception</code> ou algo parecido no c\u00f3digo de sa\u00edda, ap\u00f3s o <code>yield</code></p> <p>Dica</p> <p>Essa \u00e9 uma t\u00e9cnica relativamente avan\u00e7ada, e na maioria dos casos voc\u00ea n\u00e3o precisa dela totalmente, j\u00e1 que voc\u00ea pode lan\u00e7ar exce\u00e7\u00f5es (incluindo <code>httpexception</code>) dentro do resto do c\u00f3digo da sua aplica\u00e7\u00e3o, por exemplo, em uma fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota.</p> <p>Mas ela existe para ser utilizada caso voc\u00ea precise. \ud83e\udd13</p> python 3.9+python 3.8+python 3.8+ non-annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\ndata = {\n    \"plumbus\": {\"description\": \"Freshly pickled plumbus\", \"owner\": \"Morty\"},\n    \"portal-gun\": {\"description\": \"Gun to create portals\", \"owner\": \"Rick\"},\n}\n\n\nclass OwnerError(Exception):\n    pass\n\n\ndef get_username():\n    try:\n        yield \"Rick\"\n    except OwnerError as e:\n        raise HTTPException(status_code=400, detail=f\"Owner error: {e}\")\n\n\n@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: Annotated[str, Depends(get_username)]):\n    if item_id not in data:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    item = data[item_id]\n    if item[\"owner\"] != username:\n        raise OwnerError(username)\n    return item\n</code></pre> <pre><code>from readyapi import Depends, HTTPException, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\ndata = {\n    \"plumbus\": {\"description\": \"Freshly pickled plumbus\", \"owner\": \"Morty\"},\n    \"portal-gun\": {\"description\": \"Gun to create portals\", \"owner\": \"Rick\"},\n}\n\n\nclass OwnerError(Exception):\n    pass\n\n\ndef get_username():\n    try:\n        yield \"Rick\"\n    except OwnerError as e:\n        raise HTTPException(status_code=400, detail=f\"Owner error: {e}\")\n\n\n@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: Annotated[str, Depends(get_username)]):\n    if item_id not in data:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    item = data[item_id]\n    if item[\"owner\"] != username:\n        raise OwnerError(username)\n    return item\n</code></pre> <p>Dica</p> <p>Utilize a vers\u00e3o com <code>Annotated</code> se poss\u00edvel.</p> <pre><code>from readyapi import Depends, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\ndata = {\n    \"plumbus\": {\"description\": \"Freshly pickled plumbus\", \"owner\": \"Morty\"},\n    \"portal-gun\": {\"description\": \"Gun to create portals\", \"owner\": \"Rick\"},\n}\n\n\nclass OwnerError(Exception):\n    pass\n\n\ndef get_username():\n    try:\n        yield \"Rick\"\n    except OwnerError as e:\n        raise HTTPException(status_code=400, detail=f\"Owner error: {e}\")\n\n\n@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: str = Depends(get_username)):\n    if item_id not in data:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    item = data[item_id]\n    if item[\"owner\"] != username:\n        raise OwnerError(username)\n    return item\n</code></pre> <p>Uma alternativa que voc\u00ea pode utilizar para capturar exce\u00e7\u00f5es (e possivelmente lan\u00e7ar outra HTTPException) \u00e9 criar um Manipulador de Exce\u00e7\u00f5es Customizado.</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/#dependencias-com-yield-e-except","title":"Depend\u00eancias com <code>yield</code> e <code>except</code>","text":"<p>Se voc\u00ea capturar uma exce\u00e7\u00e3o com <code>except</code> em uma depend\u00eancia que utilize <code>yield</code> e ela n\u00e3o for levantada novamente (ou uma nova exce\u00e7\u00e3o for levantada), o ReadyAPI n\u00e3o ser\u00e1 capaz de identifcar que houve uma exce\u00e7\u00e3o, da mesma forma que aconteceria com Python puro:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass InternalError(Exception):\n    pass\n\n\ndef get_username():\n    try:\n        yield \"Rick\"\n    except InternalError:\n        print(\"Oops, we didn't raise again, Britney \ud83d\ude31\")\n\n\n@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: Annotated[str, Depends(get_username)]):\n    if item_id == \"portal-gun\":\n        raise InternalError(\n            f\"The portal gun is too dangerous to be owned by {username}\"\n        )\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=404, detail=\"Item not found, there's only a plumbus here\"\n        )\n    return item_id\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, HTTPException, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass InternalError(Exception):\n    pass\n\n\ndef get_username():\n    try:\n        yield \"Rick\"\n    except InternalError:\n        print(\"Oops, we didn't raise again, Britney \ud83d\ude31\")\n\n\n@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: Annotated[str, Depends(get_username)]):\n    if item_id == \"portal-gun\":\n        raise InternalError(\n            f\"The portal gun is too dangerous to be owned by {username}\"\n        )\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=404, detail=\"Item not found, there's only a plumbus here\"\n        )\n    return item_id\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass InternalError(Exception):\n    pass\n\n\ndef get_username():\n    try:\n        yield \"Rick\"\n    except InternalError:\n        print(\"Oops, we didn't raise again, Britney \ud83d\ude31\")\n\n\n@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: str = Depends(get_username)):\n    if item_id == \"portal-gun\":\n        raise InternalError(\n            f\"The portal gun is too dangerous to be owned by {username}\"\n        )\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=404, detail=\"Item not found, there's only a plumbus here\"\n        )\n    return item_id\n</code></pre> <p>Neste caso, o cliente ir\u00e1 ver uma resposta HTTP 500 Internal Server Error como deveria acontecer, j\u00e1 que n\u00e3o estamos levantando nenhuma <code>HTTPException</code> ou coisa parecida, mas o servidor n\u00e3o ter\u00e1 nenhum log ou qualquer outra indica\u00e7\u00e3o de qual foi o erro. \ud83d\ude31</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/#sempre-levante-raise-excecoes-em-dependencias-com-yield-e-except","title":"Sempre levante (<code>raise</code>) exce\u00e7\u00f5es em Depend\u00eancias com <code>yield</code> e <code>except</code>","text":"<p>Se voc\u00ea capturar uma exce\u00e7\u00e3o em uma depend\u00eancia com <code>yield</code>, a menos que voc\u00ea esteja levantando outra <code>HTTPException</code> ou coisa parecida, voc\u00ea deveria relan\u00e7ar a exce\u00e7\u00e3o original.</p> <p>Voc\u00ea pode relan\u00e7ar a mesma exce\u00e7\u00e3o utilizando <code>raise</code>:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass InternalError(Exception):\n    pass\n\n\ndef get_username():\n    try:\n        yield \"Rick\"\n    except InternalError:\n        print(\"We don't swallow the internal error here, we raise again \ud83d\ude0e\")\n        raise\n\n\n@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: Annotated[str, Depends(get_username)]):\n    if item_id == \"portal-gun\":\n        raise InternalError(\n            f\"The portal gun is too dangerous to be owned by {username}\"\n        )\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=404, detail=\"Item not found, there's only a plumbus here\"\n        )\n    return item_id\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, HTTPException, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass InternalError(Exception):\n    pass\n\n\ndef get_username():\n    try:\n        yield \"Rick\"\n    except InternalError:\n        print(\"We don't swallow the internal error here, we raise again \ud83d\ude0e\")\n        raise\n\n\n@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: Annotated[str, Depends(get_username)]):\n    if item_id == \"portal-gun\":\n        raise InternalError(\n            f\"The portal gun is too dangerous to be owned by {username}\"\n        )\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=404, detail=\"Item not found, there's only a plumbus here\"\n        )\n    return item_id\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass InternalError(Exception):\n    pass\n\n\ndef get_username():\n    try:\n        yield \"Rick\"\n    except InternalError:\n        print(\"We don't swallow the internal error here, we raise again \ud83d\ude0e\")\n        raise\n\n\n@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: str = Depends(get_username)):\n    if item_id == \"portal-gun\":\n        raise InternalError(\n            f\"The portal gun is too dangerous to be owned by {username}\"\n        )\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=404, detail=\"Item not found, there's only a plumbus here\"\n        )\n    return item_id\n</code></pre> python 3.8+ non-annotated <p>Dica</p> <p>Utilize a vers\u00e3o com <code>Annotated</code> se poss\u00edvel.</p> Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass InternalError(Exception):\n    pass\n\n\ndef get_username():\n    try:\n        yield \"Rick\"\n    except InternalError:\n        print(\"We don't swallow the internal error here, we raise again \ud83d\ude0e\")\n        raise\n\n\n@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: str = Depends(get_username)):\n    if item_id == \"portal-gun\":\n        raise InternalError(\n            f\"The portal gun is too dangerous to be owned by {username}\"\n        )\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=404, detail=\"Item not found, there's only a plumbus here\"\n        )\n    return item_id\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass InternalError(Exception):\n    pass\n\n\ndef get_username():\n    try:\n        yield \"Rick\"\n    except InternalError:\n        print(\"We don't swallow the internal error here, we raise again \ud83d\ude0e\")\n        raise\n\n\n@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: Annotated[str, Depends(get_username)]):\n    if item_id == \"portal-gun\":\n        raise InternalError(\n            f\"The portal gun is too dangerous to be owned by {username}\"\n        )\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=404, detail=\"Item not found, there's only a plumbus here\"\n        )\n    return item_id\n</code></pre> <pre><code>from readyapi import Depends, HTTPException, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass InternalError(Exception):\n    pass\n\n\ndef get_username():\n    try:\n        yield \"Rick\"\n    except InternalError:\n        print(\"We don't swallow the internal error here, we raise again \ud83d\ude0e\")\n        raise\n\n\n@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: Annotated[str, Depends(get_username)]):\n    if item_id == \"portal-gun\":\n        raise InternalError(\n            f\"The portal gun is too dangerous to be owned by {username}\"\n        )\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=404, detail=\"Item not found, there's only a plumbus here\"\n        )\n    return item_id\n</code></pre> <p>Agora o cliente ir\u00e1 receber a mesma resposta HTTP 500 Internal Server Error, mas o servidor ter\u00e1 nosso <code>InternalError</code> personalizado nos logs. \ud83d\ude0e</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/#execucao-de-dependencias-com-yield","title":"Execu\u00e7\u00e3o de depend\u00eancias com <code>yield</code>","text":"<p>A sequ\u00eancia de execu\u00e7\u00e3o \u00e9 mais ou menos como esse diagrama. O tempo passa do topo para baixo. E cada coluna \u00e9 uma das partes interagindo ou executando c\u00f3digo.</p> <pre><code>sequenceDiagram\n\nparticipant client as Cliente\nparticipant handler as Manipulador de exce\u00e7\u00f5es\nparticipant dep as Dep com yield\nparticipant operation as Opera\u00e7\u00e3o de Rota\nparticipant tasks as Tarefas de Background\n\n    Note over client,operation: pode lan\u00e7ar exce\u00e7\u00f5es, incluindo HTTPException\n    client -&gt;&gt; dep: Iniciar requisi\u00e7\u00e3o\n    Note over dep: Executar c\u00f3digo at\u00e9 o yield\n    opt lan\u00e7ar Exce\u00e7\u00e3o\n        dep --&gt;&gt; handler: lan\u00e7ar Exce\u00e7\u00e3o\n        handler --&gt;&gt; client: resposta de erro HTTP\n    end\n    dep -&gt;&gt; operation: Executar depend\u00eancia, e.g. sess\u00e3o de BD\n    opt raise\n        operation --&gt;&gt; dep: Lan\u00e7ar exce\u00e7\u00e3o (e.g. HTTPException)\n        opt handle\n            dep --&gt;&gt; dep: Pode capturar exce\u00e7\u00f5es, lan\u00e7ar uma nova HTTPException, lan\u00e7ar outras exce\u00e7\u00f5es\n        end\n        handler --&gt;&gt; client: resposta de erro HTTP\n    end\n\n    operation -&gt;&gt; client: Retornar resposta ao cliente\n    Note over client,operation: Resposta j\u00e1 foi enviada, e n\u00e3o pode ser modificada\n    opt Tarefas\n        operation --&gt;&gt; tasks: Enviar tarefas de background\n    end\n    opt Lan\u00e7ar outra exce\u00e7\u00e3o\n        tasks --&gt;&gt; tasks: Manipula exce\u00e7\u00f5es no c\u00f3digo da tarefa de background\n    end</code></pre> <p>Informa\u00e7\u00e3o</p> <p>Apenas uma resposta ser\u00e1 enviada para o cliente. Ela pode ser uma das respostas de erro, ou ent\u00e3o a resposta da opera\u00e7\u00e3o de rota.</p> <p>Ap\u00f3s uma dessas respostas ser enviada, nenhuma outra resposta pode ser enviada</p> <p>Dica</p> <p>Esse diagrama mostra <code>HttpException</code>, mas voc\u00ea pode levantar qualquer outra exce\u00e7\u00e3o que voc\u00ea capture em uma depend\u00eancia com <code>yield</code> ou um Manipulador de exce\u00e7\u00f5es personalizado.</p> <p>Se voc\u00ea lan\u00e7ar qualquer exce\u00e7\u00e3o, ela ser\u00e1 passada para as depend\u00eancias com yield, inlcuindo a <code>HTTPException</code>. Na maioria dos casos voc\u00ea vai querer relan\u00e7ar essa mesma exce\u00e7\u00e3o ou uma nova a partir da depend\u00eancia com <code>yield</code> para garantir que ela seja tratada adequadamente.</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/#dependencias-com-yield-httpexception-except-e-tarefas-de-background","title":"Depend\u00eancias com <code>yield</code>, <code>HTTPException</code>, <code>except</code> e Tarefas de Background","text":"<p>Aviso</p> <p>Voc\u00ea provavelmente n\u00e3o precisa desses detalhes t\u00e9cnicos, voc\u00ea pode pular essa se\u00e7\u00e3o e continuar na pr\u00f3xima se\u00e7\u00e3o abaixo.</p> <p>Esses detalhes s\u00e3o \u00fateis principalmente se voc\u00ea estiver usando uma vers\u00e3o do ReadyAPI anterior \u00e0 0.106.0 e utilizando recursos de depend\u00eancias com <code>yield</code> em tarefas de background.</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/#dependencias-com-yield-e-except-detalhes-tecnicos","title":"Depend\u00eancias com <code>yield</code> e <code>except</code>, Detalhes T\u00e9cnicos","text":"<p>Antes do ReadyAPI 0.110.0, se voc\u00ea utilizasse uma depend\u00eancia com <code>yield</code>, e ent\u00e3o capturasse uma depend\u00eancia com <code>except</code> nessa depend\u00eancia, caso a exce\u00e7\u00e3o n\u00e3o fosse relan\u00e7ada, ela era automaticamente lan\u00e7ada para qualquer manipulador de exce\u00e7\u00f5es ou o manipulador de erros interno do servidor.</p> <p>Isso foi modificado na vers\u00e3o 0.110.0 para consertar o consumo de mem\u00f3ria n\u00e3o controlado das exce\u00e7\u00f5es relan\u00e7adas automaticamente sem um manipulador (erros internos do servidor), e para manter o comportamento consistente com o c\u00f3digo Python tradicional.</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/#tarefas-de-background-e-dependencias-com-yield-detalhes-tecnicos","title":"Tarefas de Background e Depend\u00eancias com <code>yield</code>, Detalhes T\u00e9cnicos","text":"<p>Antes do ReadyAPI 0.106.0, levantar exce\u00e7\u00f5es ap\u00f3s um <code>yield</code> n\u00e3o era poss\u00edvel, o c\u00f3digo de sa\u00edda nas depend\u00eancias com <code>yield</code> era executado ap\u00f3s a resposta ser enviada, ent\u00e3o os Manipuladores de Exce\u00e7\u00f5es j\u00e1 teriam executado.</p> <p>Isso foi implementado dessa forma principalmente para permitir que os mesmos objetos fornecidos (\"yielded\") pelas depend\u00eancias dentro de tarefas de background fossem reutilizados, por que o c\u00f3digo de sa\u00edda era executado antes das tarefas de background serem finalizadas.</p> <p>Ainda assim, como isso exigiria esperar que a resposta navegasse pela rede enquanto mantia ativo um recurso desnecess\u00e1rio na depend\u00eancia com yield (por exemplo, uma conex\u00e3o com banco de dados), isso mudou na vers\u00e3o 0.106.0 do ReadyAPI.</p> <p>Dica</p> <p>Adicionalmente, uma tarefa de background \u00e9, normalmente, um conjunto de l\u00f3gicas independentes que devem ser manipuladas separadamente, com seus pr\u00f3prios recursos (e.g. sua pr\u00f3pria conex\u00e3o com banco de dados).</p> <p>Ent\u00e3o, dessa forma voc\u00ea provavelmente ter\u00e1 um c\u00f3digo mais limpo.</p> <p>Se voc\u00ea costumava depender desse comportamento, agora voc\u00ea precisa criar os recursos para uma tarefa de background dentro dela mesma, e usar internamente apenas dados que n\u00e3o dependam de recursos de depend\u00eancias com <code>yield</code>.</p> <p>Por exemplo, em vez de utilizar a mesma sess\u00e3o do banco de dados, voc\u00ea criaria uma nova sess\u00e3o dentro da tarefa de background, e voc\u00ea obteria os objetos do banco de dados utilizando essa nova sess\u00e3o. E ent\u00e3o, em vez de passar o objeto obtido do banco de dados como um par\u00e2metro para a fun\u00e7\u00e3o da tarefa de background, voc\u00ea passaria o ID desse objeto e buscaria ele novamente dentro da fun\u00e7\u00e3o da tarefa de background.</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/#gerenciadores-de-contexto","title":"Gerenciadores de contexto","text":""},{"location":"tutorial/dependencies/dependencies-with-yield/#o-que-sao-gerenciadores-de-contexto","title":"O que s\u00e3o gerenciadores de contexto","text":"<p>\"Gerenciadores de Contexto\" s\u00e3o qualquer um dos objetos Python que podem ser utilizados com a declara\u00e7\u00e3o <code>with</code>.</p> <p>Por exemplo, voc\u00ea pode utilizar <code>with</code> para ler um arquivo:</p> <pre><code>with open(\"./somefile.txt\") as f:\n    contents = f.read()\n    print(contents)\n</code></pre> <p>Por baixo dos panos, o c\u00f3digo <code>open(\"./somefile.txt\")</code> cria um objeto que \u00e9 chamado de \"Gerenciador de Contexto\".</p> <p>Quando o bloco <code>with</code> finaliza, ele se certifica de fechar o arquivo, mesmo que tenha ocorrido alguma exce\u00e7\u00e3o.</p> <p>Quando voc\u00ea cria uma depend\u00eancia com <code>yield</code>, o ReadyAPI ir\u00e1 criar um gerenciador de contexto internamente para ela, e combin\u00e1-lo com algumas outras ferramentas relacionadas.</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/#utilizando-gerenciadores-de-contexto-em-dependencias-com-yield","title":"Utilizando gerenciadores de contexto em depend\u00eancias com <code>yield</code>","text":"<p>Aviso</p> <p>Isso \u00e9 uma ideia mais ou menos \"avan\u00e7ada\".</p> <p>Se voc\u00ea est\u00e1 apenas iniciando com o ReadyAPI voc\u00ea pode querer pular isso por enquanto.</p> <p>Em python, voc\u00ea pode criar Gerenciadores de Contexto ao  criar uma classe com dois m\u00e9todos: <code>__enter__()</code> e <code>__exit__()</code>.</p> <p>Voc\u00ea tamb\u00e9m pode us\u00e1-los dentro de depend\u00eancias com <code>yield</code> do ReadyAPI ao utilizar <code>with</code> ou <code>async with</code> dentro da fun\u00e7\u00e3o da depend\u00eancia:</p> Python 3.8+ <pre><code>class MySuperContextManager:\n    def __init__(self):\n        self.db = DBSession()\n\n    def __enter__(self):\n        return self.db\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        self.db.close()\n\n\nasync def get_db():\n    with MySuperContextManager() as db:\n        yield db\n</code></pre> <p>Dica</p> <p>Outra forma de criar um gerenciador de contexto \u00e9 utilizando:</p> <ul> <li> <p><code>@contextlib.contextmanager</code> ou</p> </li> <li> <p><code>@contextlib.asynccontextmanager</code></p> </li> </ul> <p>Para decorar uma fun\u00e7\u00e3o com um \u00fanico <code>yield</code>.</p> <p>Isso \u00e9 o que o ReadyAPI usa internamente para depend\u00eancias com <code>yield</code>.</p> <p>Mas voc\u00ea n\u00e3o precisa usar esses decoradores para as depend\u00eancias do ReadyAPI (e voc\u00ea n\u00e3o deveria).</p> <p>O ReadyAPI ir\u00e1 fazer isso para voc\u00ea internamente.</p>"},{"location":"tutorial/dependencies/global-dependencies/","title":"Depend\u00eancias Globais","text":"<p>Para alguns tipos de aplica\u00e7\u00e3o espec\u00edficos voc\u00ea pode querer adicionar depend\u00eancias para toda a aplica\u00e7\u00e3o.</p> <p>De forma semelhante a adicionar depend\u00eancias (<code>dependencies</code>) em decoradores de opera\u00e7\u00e3o de rota, voc\u00ea pode adicion\u00e1-las \u00e0 aplica\u00e7\u00e3o <code>ReadyAPI</code>.</p> <p>Nesse caso, elas ser\u00e3o aplicadas a todas as opera\u00e7\u00f5es de rota da aplica\u00e7\u00e3o:</p> Python 3.9+ <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\nfrom typing_extensions import Annotated\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\napp = ReadyAPI(dependencies=[Depends(verify_token), Depends(verify_key)])\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"item\": \"Portal Gun\"}, {\"item\": \"Plumbus\"}]\n\n\n@app.get(\"/users/\")\nasync def read_users():\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\nfrom typing_extensions import Annotated\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\napp = ReadyAPI(dependencies=[Depends(verify_token), Depends(verify_key)])\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"item\": \"Portal Gun\"}, {\"item\": \"Plumbus\"}]\n\n\n@app.get(\"/users/\")\nasync def read_users():\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\n\n\nasync def verify_token(x_token: str = Header()):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: str = Header()):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\napp = ReadyAPI(dependencies=[Depends(verify_token), Depends(verify_key)])\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"item\": \"Portal Gun\"}, {\"item\": \"Plumbus\"}]\n\n\n@app.get(\"/users/\")\nasync def read_users():\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n</code></pre> <p>E todos os conceitos apresentados na sess\u00e3o sobre adicionar depend\u00eancias em decoradores de opera\u00e7\u00e3o de rota ainda se aplicam, mas nesse caso, para todas as opera\u00e7\u00f5es de rota da aplica\u00e7\u00e3o.</p>"},{"location":"tutorial/dependencies/global-dependencies/#dependencias-para-conjuntos-de-operacoes-de-rota","title":"Depend\u00eancias para conjuntos de opera\u00e7\u00f5es de rota","text":"<p>Mais para a frente, quando voc\u00ea ler sobre como estruturar aplica\u00e7\u00f5es maiores (Bigger Applications - Multiple Files), possivelmente com m\u00faltiplos arquivos, voc\u00ea ir\u00e1 aprender a declarar um \u00fanico par\u00e2metro <code>dependencies</code> para um conjunto de opera\u00e7\u00f5es de rota.</p>"},{"location":"tutorial/dependencies/sub-dependencies/","title":"Subdepend\u00eancias","text":"<p>Voc\u00ea pode criar depend\u00eancias que possuem subdepend\u00eancias.</p> <p>Elas podem ter o n\u00edvel de profundidade que voc\u00ea achar necess\u00e1rio.</p> <p>O ReadyAPI se encarrega de resolver essas depend\u00eancias.</p>"},{"location":"tutorial/dependencies/sub-dependencies/#primeira-dependencia-injetavel","title":"Primeira depend\u00eancia \"injet\u00e1vel\"","text":"<p>Voc\u00ea pode criar uma primeira depend\u00eancia (injet\u00e1vel) dessa forma:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: str | None = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[str | None, Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: Union[str, None] = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[Union[str, None], Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Cookie, Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: Union[str, None] = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[Union[str, None], Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: str | None = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: str = Depends(query_extractor), last_query: str | None = Cookie(default=None)\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(query_or_default: str = Depends(query_or_cookie_extractor)):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: Union[str, None] = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: str = Depends(query_extractor),\n    last_query: Union[str, None] = Cookie(default=None),\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(query_or_default: str = Depends(query_or_cookie_extractor)):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <p>Esse c\u00f3digo declara um par\u00e2metro de consulta opcional, <code>q</code>, com o tipo <code>str</code>, e ent\u00e3o retorna esse par\u00e2metro.</p> <p>Isso \u00e9 bastante simples (e n\u00e3o muito \u00fatil), mas ir\u00e1 nos ajudar a focar em como as subdepend\u00eancias funcionam.</p>"},{"location":"tutorial/dependencies/sub-dependencies/#segunda-dependencia-injetavel-e-dependente","title":"Segunda depend\u00eancia, \"injet\u00e1vel\" e \"dependente\"","text":"<p>Ent\u00e3o, voc\u00ea pode criar uma outra fun\u00e7\u00e3o para uma depend\u00eancia (um \"injet\u00e1vel\") que ao mesmo tempo declara sua pr\u00f3pria depend\u00eancia (o que faz dela um \"dependente\" tamb\u00e9m):</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: str | None = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[str | None, Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: Union[str, None] = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[Union[str, None], Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Cookie, Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: Union[str, None] = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[Union[str, None], Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: str | None = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: str = Depends(query_extractor), last_query: str | None = Cookie(default=None)\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(query_or_default: str = Depends(query_or_cookie_extractor)):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: Union[str, None] = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: str = Depends(query_extractor),\n    last_query: Union[str, None] = Cookie(default=None),\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(query_or_default: str = Depends(query_or_cookie_extractor)):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <p>Vamos focar nos par\u00e2metros declarados:</p> <ul> <li>Mesmo que essa fun\u00e7\u00e3o seja uma depend\u00eancia (\"injet\u00e1vel\") por si mesma, ela tamb\u00e9m declara uma outra depend\u00eancia (ela \"depende\" de outra coisa).<ul> <li>Ela depende do <code>query_extractor</code>, e atribui o valor retornado pela fun\u00e7\u00e3o ao par\u00e2metro <code>q</code>.</li> </ul> </li> <li>Ela tamb\u00e9m declara um cookie opcional <code>last_query</code>, do tipo <code>str</code>.<ul> <li>Se o usu\u00e1rio n\u00e3o passou nenhuma consulta <code>q</code>, a \u00faltima consulta \u00e9 utilizada, que foi salva em um cookie anteriormente.</li> </ul> </li> </ul>"},{"location":"tutorial/dependencies/sub-dependencies/#utilizando-a-dependencia","title":"Utilizando a depend\u00eancia","text":"<p>Ent\u00e3o podemos utilizar a depend\u00eancia com:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: str | None = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[str | None, Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: Union[str, None] = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[Union[str, None], Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Cookie, Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: Union[str, None] = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[Union[str, None], Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: str | None = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: str = Depends(query_extractor), last_query: str | None = Cookie(default=None)\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(query_or_default: str = Depends(query_or_cookie_extractor)):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: Union[str, None] = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: str = Depends(query_extractor),\n    last_query: Union[str, None] = Cookie(default=None),\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(query_or_default: str = Depends(query_or_cookie_extractor)):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <p>Informa\u00e7\u00e3o</p> <p>Perceba que n\u00f3s estamos declarando apenas uma depend\u00eancia na fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota, em <code>query_or_cookie_extractor</code>.</p> <p>Mas o ReadyAPI saber\u00e1 que precisa solucionar <code>query_extractor</code> primeiro, para passar o resultado para <code>query_or_cookie_extractor</code> enquanto chama a fun\u00e7\u00e3o.</p> <pre><code>graph TB\n\nquery_extractor([\"query_extractor\"])\nquery_or_cookie_extractor([\"query_or_cookie_extractor\"])\n\nread_query[\"/items/\"]\n\nquery_extractor --&gt; query_or_cookie_extractor --&gt; read_query</code></pre>"},{"location":"tutorial/dependencies/sub-dependencies/#utilizando-a-mesma-dependencia-multiplas-vezes","title":"Utilizando a mesma depend\u00eancia m\u00faltiplas vezes","text":"<p>Se uma de suas depend\u00eancias \u00e9 declarada v\u00e1rias vezes para a mesma opera\u00e7\u00e3o de rota, por exemplo, m\u00faltiplas depend\u00eancias com uma mesma subdepend\u00eancia, o ReadyAPI ir\u00e1 chamar essa subdepend\u00eancia uma \u00fanica vez para cada requisi\u00e7\u00e3o.</p> <p>E o valor retornado \u00e9 salvo em um \"cache\" e repassado para todos os \"dependentes\" que precisam dele em uma requisi\u00e7\u00e3o espec\u00edfica, em vez de chamar a depend\u00eancia m\u00faltiplas vezes para uma mesma requisi\u00e7\u00e3o.</p> <p>Em um cen\u00e1rio avan\u00e7ado onde voc\u00ea precise que a depend\u00eancia seja calculada em cada passo (possivelmente v\u00e1rias vezes) de uma requisi\u00e7\u00e3o em vez de utilizar o valor em \"cache\", voc\u00ea pode definir o par\u00e2metro <code>use_cache=False</code> em <code>Depends</code>:</p> Python 3.8+Python 3.8+ non-Annotated <pre><code>async def needy_dependency(fresh_value: Annotated[str, Depends(get_value, use_cache=False)]):\n    return {\"fresh_value\": fresh_value}\n</code></pre> <p>Dica</p> <p>Utilize a vers\u00e3o com <code>Annotated</code> se poss\u00edvel.</p> <pre><code>async def needy_dependency(fresh_value: str = Depends(get_value, use_cache=False)):\n    return {\"fresh_value\": fresh_value}\n</code></pre>"},{"location":"tutorial/dependencies/sub-dependencies/#recapitulando","title":"Recapitulando","text":"<p>Com exce\u00e7\u00e3o de todas as palavras complicadas usadas aqui, o sistema de Inje\u00e7\u00e3o de Depend\u00eancia \u00e9 bastante simples.</p> <p>Consiste apenas de fun\u00e7\u00f5es que parecem id\u00eanticas a fun\u00e7\u00f5es de opera\u00e7\u00e3o de rota.</p> <p>Mas ainda assim, \u00e9 bastante poderoso, e permite que voc\u00ea declare grafos (\u00e1rvores) de depend\u00eancias com uma profundidade arbitr\u00e1ria.</p> <p>Dica</p> <p>Tudo isso pode n\u00e3o parecer muito \u00fatil com esses exemplos.</p> <p>Mas voc\u00ea ver\u00e1 o qu\u00e3o \u00fatil isso \u00e9 nos cap\u00edtulos sobre seguran\u00e7a.</p> <p>E voc\u00ea tamb\u00e9m ver\u00e1 a quantidade de c\u00f3digo que voc\u00ea n\u00e3o precisara escrever.</p>"},{"location":"tutorial/security/","title":"Seguran\u00e7a","text":"<p>H\u00e1 v\u00e1rias formas de lidar seguran\u00e7a, autentica\u00e7\u00e3o e autoriza\u00e7\u00e3o.</p> <p>E isso normalmente \u00e9 um t\u00f3pico \u201cdif\u00edcil\u201d e complexo.</p> <p>Em muitos frameworks e sistemas, apenas lidar com seguran\u00e7a e autentica\u00e7\u00e3o exige muito esfor\u00e7o e c\u00f3digo (em muitos casos isso pode ser 50% ou mais de todo o c\u00f3digo escrito).</p> <p>ReadyAPI tem muitas ferramentas para ajudar voc\u00ea com a parte de Seguran\u00e7a facilmente, rapidamente, de uma forma padr\u00e3o, sem ter que estudar e aprender tudo sobre especifica\u00e7\u00f5es de seguran\u00e7a.</p> <p>Mas primeiro, vamos verificar alguns pequenos conceitos.</p>"},{"location":"tutorial/security/#esta-com-pressa","title":"Est\u00e1 com pressa?","text":"<p>Se voc\u00ea n\u00e3o se importa com qualquer um desses termos e s\u00f3 precisa adicionar seguran\u00e7a com autentica\u00e7\u00e3o baseada em usu\u00e1rio e senha agora, pule para os pr\u00f3ximos cap\u00edtulos.</p>"},{"location":"tutorial/security/#oauth2","title":"OAuth2","text":"<p>OAuth2 \u00e9 uma especifica\u00e7\u00e3o que define v\u00e1rias formas para lidar com autentica\u00e7\u00e3o e autoriza\u00e7\u00e3o.</p> <p>Ela \u00e9 bastante extensiva na especifica\u00e7\u00e3o e cobre casos de uso muito complexos.</p> <p>Ela inclui uma forma para autentica\u00e7\u00e3o usando \u201cthird party\u201d/aplica\u00e7\u00f5es de terceiros.</p> <p>Isso \u00e9 o que todos os sistemas com \u201cLogin with Facebook, Google, Twitter, GitHub\u201d usam por baixo.</p>"},{"location":"tutorial/security/#oauth-1","title":"OAuth 1","text":"<p>Havia um OAuth 1, que \u00e9 bem diferente do OAuth2, e mais complexo, isso inclu\u00eda diretamente as especifica\u00e7\u00f5es de como criptografar a comunica\u00e7\u00e3o.</p> <p>N\u00e3o \u00e9 muito popular ou usado nos dias atuais.</p> <p>OAuth2 n\u00e3o especifica como criptografar a comunica\u00e7\u00e3o, ele espera que voc\u00ea tenha sua aplica\u00e7\u00e3o em um servidor HTTPS.</p> <p>Dica</p> <p>Na se\u00e7\u00e3o sobre deployment voc\u00ea ir\u00e1 ver como configurar HTTPS de modo gratuito, usando Traefik e Let\u2019s Encrypt.</p>"},{"location":"tutorial/security/#openid-connect","title":"OpenID Connect","text":"<p>OpenID Connect \u00e9 outra especifica\u00e7\u00e3o, baseada em OAuth2.</p> <p>Ela \u00e9 apenas uma extens\u00e3o do OAuth2 especificando algumas coisas que s\u00e3o relativamente amb\u00edguas no OAuth2, para tentar torn\u00e1-lo mais interoper\u00e1vel.</p> <p>Por exemplo, o login do Google usa OpenID Connect (que por baixo dos panos usa OAuth2).</p> <p>Mas o login do Facebook n\u00e3o tem suporte para OpenID Connect. Ele tem a pr\u00f3pria implementa\u00e7\u00e3o do OAuth2.</p>"},{"location":"tutorial/security/#openid-nao-openid-connect","title":"OpenID (n\u00e3o \"OpenID Connect\")","text":"<p>Houve tamb\u00e9m uma especifica\u00e7\u00e3o \u201cOpenID\u201d. Ela tentou resolver a mesma coisa que a OpenID Connect, mas n\u00e3o baseada em OAuth2.</p> <p>Ent\u00e3o, ela foi um sistema adicional completo.</p> <p>Ela n\u00e3o \u00e9 muito popular ou usada nos dias de hoje.</p>"},{"location":"tutorial/security/#openapi","title":"OpenAPI","text":"<p>OpenAPI (anteriormente conhecido como Swagger) \u00e9 a especifica\u00e7\u00e3o aberta para a cria\u00e7\u00e3o de APIs (agora parte da Linux Foundation).</p> <p>ReadyAPI \u00e9 baseado no OpenAPI.</p> <p>Isso \u00e9 o que torna poss\u00edvel ter m\u00faltiplas automa\u00e7\u00f5es interativas de interfaces de documenta\u00e7\u00e3o, gera\u00e7\u00e3o de c\u00f3digo, etc.</p> <p>OpenAPI tem uma forma para definir m\u00faltiplos \u201cesquemas\u201d de seguran\u00e7a.</p> <p>Por us\u00e1-los, voc\u00ea pode ter vantagens de todas essas ferramentas baseadas nos padr\u00f5es, incluindo os sistemas de documenta\u00e7\u00e3o interativa.</p> <p>OpenAPI define os seguintes esquemas de seguran\u00e7a:</p> <ul> <li><code>apiKey</code>: uma chave espec\u00edfica de aplica\u00e7\u00e3o que pode vir de:<ul> <li>Um par\u00e2metro query.</li> <li>Um header.</li> <li>Um cookie.</li> </ul> </li> <li><code>http</code>: padr\u00e3o HTTP de sistemas autentica\u00e7\u00e3o, incluindo:<ul> <li><code>bearer</code>: um header de <code>Authorization</code> com valor de <code>Bearer</code> adicionado de um token. Isso \u00e9 heran\u00e7a do OAuth2.</li> <li>HTTP Basic authentication.</li> <li>HTTP Digest, etc.</li> </ul> </li> <li><code>oauth2</code>: todas as formas do OAuth2 para lidar com seguran\u00e7a (chamados \"fluxos\").<ul> <li>V\u00e1rios desses fluxos s\u00e3o apropriados para construir um provedor de autentica\u00e7\u00e3o OAuth2 (como Google, Facebook, Twitter, GitHub, etc):<ul> <li><code>implicit</code></li> <li><code>clientCredentials</code></li> <li><code>authorizationCode</code></li> </ul> </li> <li>Mas existe um \u201cfluxo\u201d espec\u00edfico que pode ser perfeitamente usado para resolver autentica\u00e7\u00e3o diretamente na mesma aplica\u00e7\u00e3o:<ul> <li><code>password</code>: alguns dos pr\u00f3ximos cap\u00edtulos tratar\u00e3o disso.</li> </ul> </li> </ul> </li> <li><code>openIdConnect</code>: tem uma forma para definir como descobrir automaticamente o dado da autentica\u00e7\u00e3o OAuth2.<ul> <li>Essa descoberta autom\u00e1tica \u00e9 o que \u00e9 definido na especifica\u00e7\u00e3o OpenID Connect.</li> </ul> </li> </ul> <p>Dica</p> <p>Integra\u00e7\u00e3o com outros provedores de autentica\u00e7\u00e3o/autoriza\u00e7\u00e3o como Google, Facebook, Twitter, GitHub, etc. \u00e9 bem poss\u00edvel e relativamente f\u00e1cil.</p> <p>O problema mais complexo \u00e9 criar um provedor de autentica\u00e7\u00e3o/autoriza\u00e7\u00e3o como eles, mas o ReadyAPI d\u00e1 a voc\u00ea ferramentas para fazer isso facilmente, enquanto faz o trabalho pesado para voc\u00ea.</p>"},{"location":"tutorial/security/#readyapi-utilitarios","title":"ReadyAPI utilit\u00e1rios","text":"<p>ReadyAPI fornece v\u00e1rias ferramentas para cada um desses esquemas de seguran\u00e7a no m\u00f3dulo <code>readyapi.security</code> que simplesmente usa esses mecanismos de seguran\u00e7a.</p> <p>Nos pr\u00f3ximos cap\u00edtulos voc\u00ea ir\u00e1 ver como adicionar seguran\u00e7a \u00e0 sua API usando essas ferramentas disponibilizadas pelo ReadyAPI.</p> <p>E voc\u00ea ir\u00e1 ver tamb\u00e9m como isso \u00e9 automaticamente integrado dentro do sistema de documenta\u00e7\u00e3o interativo.</p>"},{"location":"tutorial/security/first-steps/","title":"Seguran\u00e7a - Primeiros Passos","text":"<p>Vamos imaginar que voc\u00ea tem a sua API backend em algum dom\u00ednio.</p> <p>E voc\u00ea tem um frontend em outro dom\u00ednio ou em um path diferente no mesmo dom\u00ednio (ou em uma aplica\u00e7\u00e3o mobile).</p> <p>E voc\u00ea quer uma maneira de o frontend autenticar o backend, usando um username e senha.</p> <p>N\u00f3s podemos usar o OAuth2 junto com o ReadyAPI.</p> <p>Mas, vamos poupar-lhe o tempo de ler toda a especifica\u00e7\u00e3o apenas para achar as pequenas informa\u00e7\u00f5es que voc\u00ea precisa.</p> <p>Vamos usar as ferramentas fornecidas pela ReadyAPI para lidar com seguran\u00e7a.</p>"},{"location":"tutorial/security/first-steps/#como-parece","title":"Como Parece","text":"<p>Vamos primeiro usar o c\u00f3digo e ver como funciona, e depois voltaremos para entender o que est\u00e1 acontecendo.</p>"},{"location":"tutorial/security/first-steps/#crie-um-mainpy","title":"Crie um <code>main.py</code>","text":"<p>Copie o exemplo em um arquivo <code>main.py</code>:</p> Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: str = Depends(oauth2_scheme)):\n    return {\"token\": token}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: Annotated[str, Depends(oauth2_scheme)]):\n    return {\"token\": token}\n</code></pre> <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: Annotated[str, Depends(oauth2_scheme)]):\n    return {\"token\": token}\n</code></pre>"},{"location":"tutorial/security/first-steps/#execute-o","title":"Execute-o","text":"<p>informa\u00e7\u00e3o</p> <pre><code>Primeiro, instale &lt;a href=\"https://github.com/Kludex/python-multipart\" class=\"external-link\" target=\"_blank\"&gt;`python-multipart`&lt;/a&gt;.\n\nEx: `pip install python-multipart`.\n\nIsso ocorre porque o **OAuth2** usa \"dados de um formul\u00e1rio\" para mandar o **username** e **senha**.\n</code></pre> <p>Execute esse exemplo com:</p> <pre><code>$ uvicorn main:app --reload\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre>"},{"location":"tutorial/security/first-steps/#verifique-o","title":"Verifique-o","text":"<p>V\u00e1 at\u00e9 a documenta\u00e7\u00e3o interativa em: http://127.0.0.1:8000/docs.</p> <p>Voc\u00ea ver\u00e1 algo deste tipo:</p> <p></p> <p>Bot\u00e3o de Autorizar!</p> <pre><code>Voc\u00ea j\u00e1 tem um novo \"bot\u00e3o de autorizar!\".\n\nE seu *path operation* tem um pequeno cadeado no canto superior direito que voc\u00ea pode clicar.\n</code></pre> <p>E se voc\u00ea clicar, voc\u00ea ter\u00e1 um pequeno formul\u00e1rio de autoriza\u00e7\u00e3o para digitar o <code>username</code> e <code>senha</code> (e outros campos opcionais):</p> <p></p> <p>Nota</p> <pre><code>N\u00e3o importa o que voc\u00ea digita no formul\u00e1rio, n\u00e3o vai funcionar ainda. Mas n\u00f3s vamos chegar l\u00e1.\n</code></pre> <p>Claro que este n\u00e3o \u00e9 o frontend para os usu\u00e1rios finais, mas \u00e9 uma \u00f3tima ferramenta autom\u00e1tica para documentar interativamente toda sua API.</p> <p>Pode ser usado pelo time de frontend (que pode ser voc\u00ea no caso).</p> <p>Pode ser usado por aplica\u00e7\u00f5es e sistemas third party (de terceiros).</p> <p>E tamb\u00e9m pode ser usada por voc\u00ea mesmo, para debugar, checar e testar a mesma aplica\u00e7\u00e3o.</p>"},{"location":"tutorial/security/first-steps/#o-fluxo-da-senha","title":"O Fluxo da <code>senha</code>","text":"<p>Agora vamos voltar um pouco e entender o que \u00e9 isso tudo.</p> <p>O \"fluxo\" da <code>senha</code> \u00e9 um dos caminhos (\"fluxos\") definidos no OAuth2, para lidar com a seguran\u00e7a e autentica\u00e7\u00e3o.</p> <p>OAuth2 foi projetado para que o backend ou a API pudesse ser independente do servidor que autentica o usu\u00e1rio.</p> <p>Mas nesse caso, a mesma aplica\u00e7\u00e3o ReadyAPI ir\u00e1 lidar com a API e a autentica\u00e7\u00e3o.</p> <p>Ent\u00e3o, vamos rever de um ponto de vista simplificado:</p> <ul> <li>O usu\u00e1rio digita o <code>username</code> e a <code>senha</code> no frontend e aperta <code>Enter</code>.</li> <li>O frontend (rodando no browser do usu\u00e1rio) manda o <code>username</code> e a <code>senha</code> para uma URL espec\u00edfica na sua API (declarada com <code>tokenUrl=\"token\"</code>).</li> <li>A API checa aquele <code>username</code> e <code>senha</code>, e responde com um \"token\" (n\u00f3s n\u00e3o implementamos nada disso ainda).<ul> <li>Um \"token\" \u00e9 apenas uma string com algum conte\u00fado que n\u00f3s podemos utilizar mais tarde para verificar o usu\u00e1rio.</li> <li>Normalmente, um token \u00e9 definido para expirar depois de um tempo.<ul> <li>Ent\u00e3o, o usu\u00e1rio ter\u00e1 que se logar de novo depois de um tempo.</li> <li>E se o token for roubado, o risco \u00e9 menor. N\u00e3o \u00e9 como se fosse uma chave permanente que vai funcionar para sempre (na maioria dos casos).</li> </ul> </li> <li>O frontend armazena aquele token temporariamente em algum lugar.</li> <li>O usu\u00e1rio clica no frontend para ir \u00e0 outra se\u00e7\u00e3o daquele frontend do aplicativo web.</li> <li>O frontend precisa buscar mais dados daquela API.<ul> <li>Mas precisa de autentica\u00e7\u00e3o para aquele endpoint em espec\u00edfico.</li> <li>Ent\u00e3o, para autenticar com nossa API, ele manda um header de <code>Autoriza\u00e7\u00e3o</code> com o valor <code>Bearer</code> mais o token.</li> <li>Se o token cont\u00e9m <code>foobar</code>, o conte\u00fado do header de <code>Autoriza\u00e7\u00e3o</code> ser\u00e1: <code>Bearer foobar</code>.</li> </ul> </li> </ul> </li> </ul>"},{"location":"tutorial/security/first-steps/#readyapis-oauth2passwordbearer","title":"ReadyAPI's <code>OAuth2PasswordBearer</code>","text":"<p>ReadyAPI fornece v\u00e1rias ferramentas, em diferentes n\u00edveis de abstra\u00e7\u00e3o, para implementar esses recursos de seguran\u00e7a.</p> <p>Neste exemplo, n\u00f3s vamos usar o OAuth2 com o fluxo de Senha, usando um token Bearer. Fazemos isso usando a classe <code>OAuth2PasswordBearer</code>.</p> <p>informa\u00e7\u00e3o</p> <pre><code>Um token \"bearer\" n\u00e3o \u00e9 a \u00fanica op\u00e7\u00e3o.\n\nMas \u00e9 a melhor no nosso caso.\n\nE talvez seja a melhor para a maioria dos casos, a n\u00e3o ser que voc\u00ea seja um especialista em OAuth2 e saiba exatamente o porqu\u00ea de existir outras op\u00e7\u00f5es que se adequam melhor \u00e0s suas necessidades.\n\nNesse caso, **ReadyAPI** tamb\u00e9m fornece as ferramentas para construir.\n</code></pre> <p>Quando n\u00f3s criamos uma inst\u00e2ncia da classe <code>OAuth2PasswordBearer</code>, n\u00f3s passamos pelo par\u00e2metro <code>tokenUrl</code> Esse par\u00e2metro cont\u00e9m a URL que o client (o frontend rodando no browser do usu\u00e1rio) vai usar para mandar o <code>username</code> e <code>senha</code> para obter um token.</p> Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: str = Depends(oauth2_scheme)):\n    return {\"token\": token}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: Annotated[str, Depends(oauth2_scheme)]):\n    return {\"token\": token}\n</code></pre> <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: Annotated[str, Depends(oauth2_scheme)]):\n    return {\"token\": token}\n</code></pre> <p>Dica</p> <pre><code>Esse `tokenUrl=\"token\"` se refere a uma URL relativa que n\u00f3s n\u00e3o criamos ainda. Como \u00e9 uma URL relativa, \u00e9 equivalente a `./token`.\n\nPorque estamos usando uma URL relativa, se sua API estava localizada em `https://example.com/`, ent\u00e3o ir\u00e1 referir-se \u00e0 `https://example.com/token`. Mas se sua API estava localizada em `https://example.com/api/v1/`, ent\u00e3o ir\u00e1 referir-se \u00e0 `https://example.com/api/v1/token`.\n\nUsar uma URL relativa \u00e9 importante para garantir que sua aplica\u00e7\u00e3o continue funcionando, mesmo em um uso avan\u00e7ado tipo [Atr\u00e1s de um Proxy](../../advanced/behind-a-proxy.md){.internal-link target=_blank}.\n</code></pre> <p>Esse par\u00e2metro n\u00e3o cria um endpoint / path operation, mas declara que a URL <code>/token</code> vai ser aquela que o client deve usar para obter o token. Essa informa\u00e7\u00e3o \u00e9 usada no OpenAPI, e depois na API Interativa de documenta\u00e7\u00e3o de sistemas.</p> <p>Em breve tamb\u00e9m criaremos o atual path operation.</p> <p>informa\u00e7\u00e3o</p> <pre><code>Se voc\u00ea \u00e9 um \"Pythonista\" muito rigoroso, voc\u00ea pode n\u00e3o gostar do estilo do nome do par\u00e2metro `tokenUrl` em vez de `token_url`.\n\nIsso ocorre porque est\u00e1 utilizando o mesmo nome que est\u00e1 nas especifica\u00e7\u00f5es do OpenAPI. Ent\u00e3o, se voc\u00ea precisa investigar mais sobre qualquer um desses esquemas de seguran\u00e7a, voc\u00ea pode simplesmente copiar e colar para encontrar mais informa\u00e7\u00f5es sobre isso.\n</code></pre> <p>A vari\u00e1vel <code>oauth2_scheme</code> \u00e9 um inst\u00e2ncia de <code>OAuth2PasswordBearer</code>, mas tamb\u00e9m \u00e9 um \"callable\".</p> <p>Pode ser chamada de:</p> <pre><code>oauth2_scheme(some, parameters)\n</code></pre> <p>Ent\u00e3o, pode ser usado com <code>Depends</code>.</p>"},{"location":"tutorial/security/first-steps/#use-o","title":"Use-o","text":"<p>Agora voc\u00ea pode passar aquele <code>oauth2_scheme</code> em uma depend\u00eancia com <code>Depends</code>.</p> Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: str = Depends(oauth2_scheme)):\n    return {\"token\": token}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: Annotated[str, Depends(oauth2_scheme)]):\n    return {\"token\": token}\n</code></pre> <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: Annotated[str, Depends(oauth2_scheme)]):\n    return {\"token\": token}\n</code></pre> <p>Esse depend\u00eancia vai fornecer uma <code>str</code> que \u00e9 atribu\u00eddo ao par\u00e2metro `token da fun\u00e7\u00e3o do path operation</p> <p>A ReadyAPI saber\u00e1 que pode usar essa depend\u00eancia para definir um \"esquema de seguran\u00e7a\" no esquema da OpenAPI (e na documenta\u00e7\u00e3o da API autom\u00e1tica).</p> <p>Detalhes t\u00e9cnicos</p> <pre><code>**ReadyAPI** saber\u00e1 que pode usar a classe `OAuth2PasswordBearer` (declarada na depend\u00eancia) para definir o esquema de seguran\u00e7a na OpenAPI porque herda de `readyapi.security.oauth2.OAuth2`, que por sua vez herda de `readyapi.security.base.Securitybase`.\n\n Todos os utilit\u00e1rios de seguran\u00e7a que se integram com OpenAPI (e na documenta\u00e7\u00e3o da API autom\u00e1tica) herdam de `SecurityBase`, \u00e9 assim que **ReadyAPI** pode saber como integr\u00e1-los no OpenAPI.\n</code></pre>"},{"location":"tutorial/security/first-steps/#o-que-ele-faz","title":"O que ele faz","text":"<p>Ele ir\u00e1 e olhar\u00e1 na requisi\u00e7\u00e3o para aquele header de <code>Autoriza\u00e7\u00e3o</code>, verificar\u00e1 se o valor \u00e9 <code>Bearer</code> mais algum token, e vai retornar o token como uma <code>str</code></p> <p>Se ele n\u00e3o ver o header de <code>Autoriza\u00e7\u00e3o</code> ou o valor n\u00e3o tem um token <code>Bearer</code>, vai responder com um c\u00f3digo de erro  401 (<code>UNAUTHORIZED</code>) diretamente.</p> <p>Voc\u00ea nem precisa verificar se o token existe para retornar um erro. Voc\u00ea pode ter certeza de que se a sua fun\u00e7\u00e3o for executada, ela ter\u00e1 um <code>str</code> nesse token.</p> <p>Voc\u00ea j\u00e1 pode experimentar na documenta\u00e7\u00e3o interativa:</p> <p></p> <p>N\u00e3o estamos verificando a validade do token ainda, mas isso j\u00e1 \u00e9 um come\u00e7o</p>"},{"location":"tutorial/security/first-steps/#recapitulando","title":"Recapitulando","text":"<p>Ent\u00e3o, em apenas 3 ou 4 linhas extras, voc\u00ea j\u00e1 tem alguma forma primitiva de seguran\u00e7a.</p>"},{"location":"tutorial/security/get-current-user/","title":"Obter Usu\u00e1rio Atual","text":"<p>No cap\u00edtulo anterior, o sistema de seguran\u00e7a (que \u00e9 baseado no sistema de inje\u00e7\u00e3o de depend\u00eancias) estava fornecendo \u00e0 fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota um <code>token</code> como uma <code>str</code>:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: Annotated[str, Depends(oauth2_scheme)]):\n    return {\"token\": token}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: Annotated[str, Depends(oauth2_scheme)]):\n    return {\"token\": token}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: str = Depends(oauth2_scheme)):\n    return {\"token\": token}\n</code></pre> <p>Mas isso ainda n\u00e3o \u00e9 t\u00e3o \u00fatil.</p> <p>Vamos fazer com que ele nos forne\u00e7a o usu\u00e1rio atual.</p>"},{"location":"tutorial/security/get-current-user/#criar-um-modelo-de-usuario","title":"Criar um modelo de usu\u00e1rio","text":"<p>Primeiro, vamos criar um modelo de usu\u00e1rio com Pydantic.</p> <p>Da mesma forma que usamos o Pydantic para declarar corpos, podemos us\u00e1-lo em qualquer outro lugar:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre>"},{"location":"tutorial/security/get-current-user/#criar-uma-dependencia-get_current_user","title":"Criar uma depend\u00eancia <code>get_current_user</code>","text":"<p>Vamos criar uma depend\u00eancia chamada <code>get_current_user</code>.</p> <p>Lembra que as depend\u00eancias podem ter subdepend\u00eancias?</p> <p><code>get_current_user</code> ter\u00e1 uma depend\u00eancia com o mesmo <code>oauth2_scheme</code> que criamos antes.</p> <p>Da mesma forma que est\u00e1vamos fazendo antes diretamente na opera\u00e7\u00e3o de rota, a nossa nova depend\u00eancia <code>get_current_user</code> receber\u00e1 um <code>token</code> como uma <code>str</code> da subdepend\u00eancia <code>oauth2_scheme</code>:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre>"},{"location":"tutorial/security/get-current-user/#obter-o-usuario","title":"Obter o usu\u00e1rio","text":"<p><code>get_current_user</code> usar\u00e1 uma fun\u00e7\u00e3o utilit\u00e1ria (falsa) que criamos, que recebe um token como uma <code>str</code> e retorna nosso modelo Pydantic <code>User</code>:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre>"},{"location":"tutorial/security/get-current-user/#injetar-o-usuario-atual","title":"Injetar o usu\u00e1rio atual","text":"<p>Ent\u00e3o agora n\u00f3s podemos usar o mesmo <code>Depends</code> com nosso <code>get_current_user</code> na opera\u00e7\u00e3o de rota:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre> <p>Observe que n\u00f3s declaramos o tipo de <code>current_user</code> como o modelo Pydantic <code>User</code>.</p> <p>Isso nos ajudar\u00e1 dentro da fun\u00e7\u00e3o com todo o preenchimento autom\u00e1tico e verifica\u00e7\u00f5es de tipo.</p> <p>Dica</p> <p>Voc\u00ea pode se lembrar que corpos de requisi\u00e7\u00e3o tamb\u00e9m s\u00e3o declarados com modelos Pydantic.</p> <p>Aqui, o ReadyAPI n\u00e3o ficar\u00e1 confuso porque voc\u00ea est\u00e1 usando <code>Depends</code>.</p> <p>Verifique</p> <p>A forma como esse sistema de depend\u00eancias foi projetado nos permite ter diferentes depend\u00eancias (diferentes \"dependables\") que retornam um modelo <code>User</code>.</p> <p>N\u00e3o estamos restritos a ter apenas uma depend\u00eancia que possa retornar esse tipo de dado.</p>"},{"location":"tutorial/security/get-current-user/#outros-modelos","title":"Outros modelos","text":"<p>Agora voc\u00ea pode obter o usu\u00e1rio atual diretamente nas fun\u00e7\u00f5es de opera\u00e7\u00e3o de rota e lidar com os mecanismos de seguran\u00e7a no n\u00edvel da Inje\u00e7\u00e3o de Depend\u00eancias, usando <code>Depends</code>.</p> <p>E voc\u00ea pode usar qualquer modelo ou dado para os requisitos de seguran\u00e7a (neste caso, um modelo Pydantic <code>User</code>).</p> <p>Mas voc\u00ea n\u00e3o est\u00e1 restrito a usar um modelo de dados, classe ou tipo espec\u00edfico.</p> <p>Voc\u00ea quer ter apenas um <code>id</code> e <code>email</code>, sem incluir nenhum <code>username</code> no modelo? Claro. Voc\u00ea pode usar essas mesmas ferramentas.</p> <p>Voc\u00ea quer ter apenas uma <code>str</code>? Ou apenas um <code>dict</code>? Ou uma inst\u00e2ncia de modelo de classe de banco de dados diretamente? Tudo funciona da mesma forma.</p> <p>Na verdade, voc\u00ea n\u00e3o tem usu\u00e1rios que fazem login no seu aplicativo, mas sim rob\u00f4s, bots ou outros sistemas, que possuem apenas um token de acesso? Novamente, tudo funciona da mesma forma.</p> <p>Apenas use qualquer tipo de modelo, qualquer tipo de classe, qualquer tipo de banco de dados que voc\u00ea precise para a sua aplica\u00e7\u00e3o. O ReadyAPI cobre tudo com o sistema de inje\u00e7\u00e3o de depend\u00eancias.</p>"},{"location":"tutorial/security/get-current-user/#tamanho-do-codigo","title":"Tamanho do c\u00f3digo","text":"<p>Este exemplo pode parecer verboso. Lembre-se de que estamos misturando seguran\u00e7a, modelos de dados, fun\u00e7\u00f5es utilit\u00e1rias e opera\u00e7\u00f5es de rota no mesmo arquivo.</p> <p>Mas aqui est\u00e1 o ponto principal.</p> <p>O c\u00f3digo relacionado \u00e0 seguran\u00e7a e \u00e0 inje\u00e7\u00e3o de depend\u00eancias \u00e9 escrito apenas uma vez.</p> <p>E voc\u00ea pode torn\u00e1-lo t\u00e3o complexo quanto quiser. E ainda assim, t\u00ea-lo escrito apenas uma vez, em um \u00fanico lugar. Com toda a flexibilidade.</p> <p>Mas voc\u00ea pode ter milhares de endpoints (opera\u00e7\u00f5es de rota) usando o mesmo sistema de seguran\u00e7a.</p> <p>E todos eles (ou qualquer parte deles que voc\u00ea desejar) podem aproveitar o reuso dessas depend\u00eancias ou de quaisquer outras depend\u00eancias que voc\u00ea criar.</p> <p>E todos esses milhares de opera\u00e7\u00f5es de rota podem ter apenas 3 linhas:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre>"},{"location":"tutorial/security/get-current-user/#recapitulacao","title":"Recapitula\u00e7\u00e3o","text":"<p>Agora voc\u00ea pode obter o usu\u00e1rio atual diretamente na sua fun\u00e7\u00e3o de opera\u00e7\u00e3o de rota.</p> <p>J\u00e1 estamos na metade do caminho.</p> <p>S\u00f3 precisamos adicionar uma opera\u00e7\u00e3o de rota para que o usu\u00e1rio/cliente realmente envie o <code>username</code> e <code>password</code>.</p> <p>Isso vem a seguir.</p>"},{"location":"tutorial/security/oauth2-jwt/","title":"OAuth2 com Senha (e hashing), Bearer com tokens JWT","text":"<p>Agora que temos todo o fluxo de seguran\u00e7a, vamos tornar a aplica\u00e7\u00e3o realmente segura, usando tokens JWT e hashing de senhas seguras.</p> <p>Este c\u00f3digo \u00e9 algo que voc\u00ea pode realmente usar na sua aplica\u00e7\u00e3o, salvar os hashes das senhas no seu banco de dados, etc.</p> <p>Vamos come\u00e7ar de onde paramos no cap\u00edtulo anterior e increment\u00e1-lo.</p>"},{"location":"tutorial/security/oauth2-jwt/#sobre-o-jwt","title":"Sobre o JWT","text":"<p>JWT significa \"JSON Web Tokens\".</p> <p>\u00c9 um padr\u00e3o para codificar um objeto JSON em uma string longa e densa sem espa\u00e7os. Ele se parece com isso:</p> <pre><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\n</code></pre> <p>Ele n\u00e3o \u00e9 criptografado, ent\u00e3o qualquer pessoa pode recuperar as informa\u00e7\u00f5es do seu conte\u00fado.</p> <p>Mas ele \u00e9 assinado. Assim, quando voc\u00ea recebe um token que voc\u00ea emitiu, voc\u00ea pode verificar que foi realmente voc\u00ea quem o emitiu.</p> <p>Dessa forma, voc\u00ea pode criar um token com um prazo de expira\u00e7\u00e3o, digamos, de 1 semana. E ent\u00e3o, quando o usu\u00e1rio voltar no dia seguinte com o token, voc\u00ea sabe que ele ainda est\u00e1 logado no seu sistema.</p> <p>Depois de uma semana, o token expirar\u00e1 e o usu\u00e1rio n\u00e3o estar\u00e1 autorizado, precisando fazer login novamente para obter um novo token. E se o usu\u00e1rio (ou uma terceira parte) tentar modificar o token para alterar a expira\u00e7\u00e3o, voc\u00ea seria capaz de descobrir isso, pois as assinaturas n\u00e3o iriam corresponder.</p> <p>Se voc\u00ea quiser brincar com tokens JWT e ver como eles funcionam, visite https://jwt.io.</p>"},{"location":"tutorial/security/oauth2-jwt/#instalar-pyjwt","title":"Instalar <code>PyJWT</code>","text":"<p>N\u00f3s precisamos instalar o <code>PyJWT</code> para criar e verificar os tokens JWT em Python.</p> <p>Certifique-se de criar um ambiente virtual, ativ\u00e1-lo e ent\u00e3o instalar o <code>pyjwt</code>:</p> <pre><code>$ pip install pyjwt\n\n---&gt; 100%\n</code></pre> <p>Informa\u00e7\u00e3o</p> <p>Se voc\u00ea pretente utilizar algoritmos de assinatura digital como o RSA ou o ECDSA, voc\u00ea deve instalar a depend\u00eancia da biblioteca de criptografia <code>pyjwt[crypto]</code>.</p> <p>Voc\u00ea pode ler mais sobre isso na documenta\u00e7\u00e3o de instala\u00e7\u00e3o do PyJWT.</p>"},{"location":"tutorial/security/oauth2-jwt/#hashing-de-senhas","title":"Hashing de senhas","text":"<p>\"Hashing\" significa converter algum conte\u00fado (uma senha neste caso) em uma sequ\u00eancia de bytes (apenas uma string) que parece um monte de caracteres sem sentido.</p> <p>Sempre que voc\u00ea passar exatamente o mesmo conte\u00fado (exatamente a mesma senha), voc\u00ea obter\u00e1 exatamente o mesmo resultado.</p> <p>Mas n\u00e3o \u00e9 poss\u00edvel converter os caracteres sem sentido de volta para a senha original.</p>"},{"location":"tutorial/security/oauth2-jwt/#por-que-usar-hashing-de-senhas","title":"Por que usar hashing de senhas","text":"<p>Se o seu banco de dados for roubado, o invasor n\u00e3o ter\u00e1 as senhas em texto puro dos seus usu\u00e1rios, apenas os hashes.</p> <p>Ent\u00e3o, o invasor n\u00e3o poder\u00e1 tentar usar essas senhas em outro sistema (como muitos usu\u00e1rios utilizam a mesma senha em v\u00e1rios lugares, isso seria perigoso).</p>"},{"location":"tutorial/security/oauth2-jwt/#instalar-o-passlib","title":"Instalar o <code>passlib</code>","text":"<p>O PassLib \u00e9 uma excelente biblioteca Python para lidar com hashes de senhas.</p> <p>Ele suporta muitos algoritmos de hashing seguros e utilit\u00e1rios para trabalhar com eles.</p> <p>O algoritmo recomendado \u00e9 o \"Bcrypt\".</p> <p>Certifique-se de criar um ambiente virtual, ativ\u00e1-lo e ent\u00e3o instalar o PassLib com Bcrypt:</p> <pre><code>$ pip install \"passlib[bcrypt]\"\n\n---&gt; 100%\n</code></pre> <p>Dica</p> <p>Com o <code>passlib</code>, voc\u00ea poderia at\u00e9 configur\u00e1-lo para ser capaz de ler senhas criadas pelo Django, um plug-in de seguran\u00e7a do Flask ou muitos outros.</p> <p>Assim, voc\u00ea poderia, por exemplo, compartilhar os mesmos dados de um aplicativo Django em um banco de dados com um aplicativo ReadyAPI. Ou migrar gradualmente uma aplica\u00e7\u00e3o Django usando o mesmo banco de dados.</p> <p>E seus usu\u00e1rios poderiam fazer login tanto pela sua aplica\u00e7\u00e3o Django quanto pela sua aplica\u00e7\u00e3o ReadyAPI, ao mesmo tempo.</p>"},{"location":"tutorial/security/oauth2-jwt/#criar-o-hash-e-verificar-as-senhas","title":"Criar o hash e verificar as senhas","text":"<p>Importe as ferramentas que n\u00f3s precisamos de <code>passlib</code>.</p> <p>Crie um \"contexto\" do PassLib. Este ser\u00e1 usado para criar o hash e verificar as senhas.</p> <p>Dica</p> <p>O contexto do PassLib tamb\u00e9m possui funcionalidades para usar diferentes algoritmos de hashing, incluindo algoritmos antigos que est\u00e3o obsoletos, apenas para permitir verific\u00e1-los, etc.</p> <p>Por exemplo, voc\u00ea poderia us\u00e1-lo para ler e verificar senhas geradas por outro sistema (como Django), mas criar o hash de novas senhas com um algoritmo diferente, como o Bcrypt.</p> <p>E ser compat\u00edvel com todos eles ao mesmo tempo.</p> <p>Crie uma fun\u00e7\u00e3o utilit\u00e1ria para criar o hash de uma senha fornecida pelo usu\u00e1rio.</p> <p>E outra fun\u00e7\u00e3o utilit\u00e1ria para verificar se uma senha recebida corresponde ao hash armazenado.</p> <p>E outra para autenticar e retornar um usu\u00e1rio.</p> Python 3.10+ <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(current_user: User = Depends(get_current_active_user)):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(current_user: User = Depends(get_current_active_user)):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <p>Nota</p> <p>Se voc\u00ea verificar o novo banco de dados (falso) <code>fake_users_db</code>, voc\u00ea ver\u00e1 como o hash da senha se parece agora: <code>\"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\"</code>.</p>"},{"location":"tutorial/security/oauth2-jwt/#manipular-tokens-jwt","title":"Manipular tokens JWT","text":"<p>Importe os m\u00f3dulos instalados.</p> <p>Crie uma chave secreta aleat\u00f3ria que ser\u00e1 usada para assinar os tokens JWT.</p> <p>Para gerar uma chave secreta aleat\u00f3ria e segura, use o comando:</p> <pre><code>$ openssl rand -hex 32\n\n09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\n</code></pre> <p>E copie a sa\u00edda para a vari\u00e1vel <code>SECRET_KEY</code> (n\u00e3o use a do exemplo).</p> <p>Crie uma vari\u00e1vel <code>ALGORITHM</code> com o algoritmo usado para assinar o token JWT e defina como <code>\"HS256\"</code>.</p> <p>Crie uma vari\u00e1vel para a expira\u00e7\u00e3o do token.</p> <p>Defina um modelo Pydantic que ser\u00e1 usado no endpoint de token para a resposta.</p> <p>Crie uma fun\u00e7\u00e3o utilit\u00e1ria para gerar um novo token de acesso.</p> Python 3.10+ <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(current_user: User = Depends(get_current_active_user)):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(current_user: User = Depends(get_current_active_user)):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre>"},{"location":"tutorial/security/oauth2-jwt/#atualize-as-dependencias","title":"Atualize as depend\u00eancias","text":"<p>Atualize <code>get_current_user</code> para receber o mesmo token de antes, mas desta vez, usando tokens JWT.</p> <p>Decodifique o token recebido, verifique-o e retorne o usu\u00e1rio atual.</p> <p>Se o token for inv\u00e1lido, retorne um erro HTTP imediatamente.</p> Python 3.10+ <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(current_user: User = Depends(get_current_active_user)):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(current_user: User = Depends(get_current_active_user)):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre>"},{"location":"tutorial/security/oauth2-jwt/#atualize-a-operacao-de-rota-token","title":"Atualize a opera\u00e7\u00e3o de rota <code>/token</code>","text":"<p>Crie um <code>timedelta</code> com o tempo de expira\u00e7\u00e3o do token.</p> <p>Crie um token de acesso JWT real e o retorne.</p> Python 3.10+ <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(current_user: User = Depends(get_current_active_user)):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(current_user: User = Depends(get_current_active_user)):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre>"},{"location":"tutorial/security/oauth2-jwt/#detalhes-tecnicos-sobre-o-sujeito-sub-do-jwt","title":"Detalhes t\u00e9cnicos sobre o \"sujeito\" <code>sub</code> do JWT","text":"<p>A especifica\u00e7\u00e3o JWT diz que existe uma chave <code>sub</code>, com o sujeito do token.</p> <p>\u00c9 opcional us\u00e1-la, mas \u00e9 onde voc\u00ea colocaria a identifica\u00e7\u00e3o do usu\u00e1rio, ent\u00e3o n\u00f3s estamos usando aqui.</p> <p>O JWT pode ser usado para outras coisas al\u00e9m de identificar um usu\u00e1rio e permitir que ele execute opera\u00e7\u00f5es diretamente na sua API.</p> <p>Por exemplo, voc\u00ea poderia identificar um \"carro\" ou uma \"postagem de blog\".</p> <p>Depois, voc\u00ea poderia adicionar permiss\u00f5es sobre essa entidade, como \"dirigir\" (para o carro) ou \"editar\" (para o blog).</p> <p>E ent\u00e3o, poderia dar esse token JWT para um usu\u00e1rio (ou bot), e ele poderia us\u00e1-lo para realizar essas a\u00e7\u00f5es (dirigir o carro ou editar o blog) sem sequer precisar ter uma conta, apenas com o token JWT que sua API gerou para isso.</p> <p>Usando essas ideias, o JWT pode ser usado para cen\u00e1rios muito mais sofisticados.</p> <p>Nesses casos, v\u00e1rias dessas entidades poderiam ter o mesmo ID, digamos <code>foo</code> (um usu\u00e1rio <code>foo</code>, um carro <code>foo</code> e uma postagem de blog <code>foo</code>).</p> <p>Ent\u00e3o, para evitar colis\u00f5es de ID, ao criar o token JWT para o usu\u00e1rio, voc\u00ea poderia prefixar o valor da chave <code>sub</code>, por exemplo, com <code>username:</code>. Assim, neste exemplo, o valor de <code>sub</code> poderia ser: <code>username:johndoe</code>.</p> <p>O importante a se lembrar \u00e9 que a chave <code>sub</code> deve ter um identificador \u00fanico em toda a aplica\u00e7\u00e3o e deve ser uma string.</p>"},{"location":"tutorial/security/oauth2-jwt/#testando","title":"Testando","text":"<p>Execute o servidor e v\u00e1 para a documenta\u00e7\u00e3o: http://127.0.0.1:8000/docs.</p> <p>Voc\u00ea ver\u00e1 a interface de usu\u00e1rio assim:</p> <p></p> <p>Autorize a aplica\u00e7\u00e3o da mesma maneira que antes.</p> <p>Usando as credenciais:</p> <p>Username: <code>johndoe</code> Password: <code>secret</code></p> <p>Verifique</p> <p>Observe que em nenhuma parte do c\u00f3digo est\u00e1 a senha em texto puro \"<code>secret</code>\", n\u00f3s temos apenas o hash.</p> <p></p> <p>Chame o endpoint <code>/users/me/</code>, voc\u00ea receber\u00e1 o retorno como:</p> <pre><code>{\n  \"username\": \"johndoe\",\n  \"email\": \"johndoe@example.com\",\n  \"full_name\": \"John Doe\",\n  \"disabled\": false\n}\n</code></pre> <p></p> <p>Se voc\u00ea abrir as ferramentas de desenvolvedor, poder\u00e1 ver que os dados enviados incluem apenas o token. A senha \u00e9 enviada apenas na primeira requisi\u00e7\u00e3o para autenticar o usu\u00e1rio e obter o token de acesso, mas n\u00e3o \u00e9 enviada nas pr\u00f3ximas requisi\u00e7\u00f5es:</p> <p></p> <p>Nota</p> <p>Perceba que o cabe\u00e7alho <code>Authorization</code>, com o valor que come\u00e7a com <code>Bearer</code>.</p>"},{"location":"tutorial/security/oauth2-jwt/#uso-avancado-com-scopes","title":"Uso avan\u00e7ado com <code>scopes</code>","text":"<p>O OAuth2 tem a no\u00e7\u00e3o de \"scopes\" (escopos).</p> <p>Voc\u00ea pode us\u00e1-los para adicionar um conjunto espec\u00edfico de permiss\u00f5es a um token JWT.</p> <p>Ent\u00e3o, voc\u00ea pode dar este token diretamente a um usu\u00e1rio ou a uma terceira parte para interagir com sua API com um conjunto de restri\u00e7\u00f5es.</p> <p>Voc\u00ea pode aprender como us\u00e1-los e como eles s\u00e3o integrados ao ReadyAPI mais adiante no Guia Avan\u00e7ado do Usu\u00e1rio.</p>"},{"location":"tutorial/security/oauth2-jwt/#recapitulacao","title":"Recapitula\u00e7\u00e3o","text":"<p>Com o que voc\u00ea viu at\u00e9 agora, voc\u00ea pode configurar uma aplica\u00e7\u00e3o ReadyAPI segura usando padr\u00f5es como OAuth2 e JWT.</p> <p>Em quase qualquer framework, lidar com a seguran\u00e7a se torna rapidamente um assunto bastante complexo.</p> <p>Muitos pacotes que simplificam bastante isso precisam fazer muitas concess\u00f5es com o modelo de dados, o banco de dados e os recursos dispon\u00edveis. E alguns desses pacotes que simplificam demais na verdade t\u00eam falhas de seguran\u00e7a subjacentes.</p> <p>O ReadyAPI n\u00e3o faz nenhuma concess\u00e3o com nenhum banco de dados, modelo de dados ou ferramenta.</p> <p>Ele oferece toda a flexibilidade para voc\u00ea escolher as op\u00e7\u00f5es que melhor se ajustam ao seu projeto.</p> <p>E voc\u00ea pode usar diretamente muitos pacotes bem mantidos e amplamente utilizados, como <code>passlib</code> e <code>PyJWT</code>, porque o ReadyAPI n\u00e3o exige mecanismos complexos para integrar pacotes externos.</p> <p>Mas ele fornece as ferramentas para simplificar o processo o m\u00e1ximo poss\u00edvel, sem comprometer a flexibilidade, robustez ou seguran\u00e7a.</p> <p>E voc\u00ea pode usar e implementar protocolos padr\u00e3o seguros, como o OAuth2, de uma maneira relativamente simples.</p> <p>Voc\u00ea pode aprender mais no Guia Avan\u00e7ado do Usu\u00e1rio sobre como usar os \"scopes\" do OAuth2 para um sistema de permiss\u00f5es mais refinado, seguindo esses mesmos padr\u00f5es. O OAuth2 com scopes \u00e9 o mecanismo usado por muitos provedores grandes de autentica\u00e7\u00e3o, como o Facebook, Google, GitHub, Microsoft, Twitter, etc. para autorizar aplicativos de terceiros a interagir com suas APIs em nome de seus usu\u00e1rios.</p>"},{"location":"tutorial/security/simple-oauth2/","title":"Simples OAuth2 com senha e Bearer","text":"<p>Agora vamos construir a partir do cap\u00edtulo anterior e adicionar as partes que faltam para ter um fluxo de seguran\u00e7a completo.</p>"},{"location":"tutorial/security/simple-oauth2/#pegue-o-username-nome-de-usuario-e-password-senha","title":"Pegue o <code>username</code> (nome de usu\u00e1rio) e <code>password</code> (senha)","text":"<p>\u00c9 utilizado o utils de seguran\u00e7a da ReadyAPI para obter o <code>username</code> e a <code>password</code>.</p> <p>OAuth2 especifica que ao usar o \"password flow\" (fluxo de senha), que estamos usando, o cliente/usu\u00e1rio deve enviar os campos <code>username</code> e <code>password</code> como dados do formul\u00e1rio.</p> <p>E a especifica\u00e7\u00e3o diz que os campos devem ser nomeados assim. Portanto, <code>user-name</code> ou <code>email</code> n\u00e3o funcionariam.</p> <p>Mas n\u00e3o se preocupe, voc\u00ea pode mostr\u00e1-lo como quiser aos usu\u00e1rios finais no frontend.</p> <p>E seus modelos de banco de dados podem usar qualquer outro nome que voc\u00ea desejar.</p> <p>Mas para a opera\u00e7\u00e3o de rota de login, precisamos usar esses nomes para serem compat\u00edveis com a especifica\u00e7\u00e3o (e poder, por exemplo, usar o sistema integrado de documenta\u00e7\u00e3o da API).</p> <p>A especifica\u00e7\u00e3o tamb\u00e9m afirma que o <code>username</code> e a <code>password</code> devem ser enviados como dados de formul\u00e1rio (portanto, n\u00e3o h\u00e1 JSON aqui).</p>"},{"location":"tutorial/security/simple-oauth2/#scope","title":"<code>scope</code>","text":"<p>A especifica\u00e7\u00e3o tamb\u00e9m diz que o cliente pode enviar outro campo de formul\u00e1rio \"<code>scope</code>\" (Escopo).</p> <p>O nome do campo do formul\u00e1rio \u00e9 <code>scope</code> (no singular), mas na verdade \u00e9 uma longa string com \"escopos\" separados por espa\u00e7os.</p> <p>Cada \u201cscope\u201d \u00e9 apenas uma string (sem espa\u00e7os).</p> <p>Normalmente s\u00e3o usados para declarar permiss\u00f5es de seguran\u00e7a espec\u00edficas, por exemplo:</p> <ul> <li><code>users:read</code> ou <code>users:write</code> s\u00e3o exemplos comuns.</li> <li><code>instagram_basic</code> \u00e9 usado pelo Facebook e Instagram.</li> <li><code>https://www.googleapis.com/auth/drive</code> \u00e9 usado pelo Google.</li> </ul> <p>Informa\u00e7\u00e3o</p> <p>No OAuth2, um \"scope\" \u00e9 apenas uma string que declara uma permiss\u00e3o espec\u00edfica necess\u00e1ria.</p> <p>N\u00e3o importa se tem outros caracteres como <code>:</code> ou se \u00e9 uma URL.</p> <p>Esses detalhes s\u00e3o espec\u00edficos da implementa\u00e7\u00e3o.</p> <p>Para OAuth2 s\u00e3o apenas strings.</p>"},{"location":"tutorial/security/simple-oauth2/#codigo-para-conseguir-o-username-e-a-password","title":"C\u00f3digo para conseguir o <code>username</code> e a <code>password</code>","text":"<p>Agora vamos usar os utilit\u00e1rios fornecidos pelo ReadyAPI para lidar com isso.</p>"},{"location":"tutorial/security/simple-oauth2/#oauth2passwordrequestform","title":"<code>OAuth2PasswordRequestForm</code>","text":"<p>Primeiro, importe <code>OAuth2PasswordRequestForm</code> e use-o como uma depend\u00eancia com <code>Depends</code> na opera\u00e7\u00e3o de rota para <code>/token</code>:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom typing_extensions import Annotated\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre> <p><code>OAuth2PasswordRequestForm</code> \u00e9 uma depend\u00eancia de classe que declara um corpo de formul\u00e1rio com:</p> <ul> <li>O <code>username</code>.</li> <li>A <code>password</code>.</li> <li>Um campo <code>scope</code> opcional como uma string grande, composta de strings separadas por espa\u00e7os.</li> <li>Um <code>grant_type</code> (tipo de concess\u00e3o) opcional.</li> </ul> <p>Dica</p> <p>A especifica\u00e7\u00e3o OAuth2 na verdade requer um campo <code>grant_type</code> com um valor fixo de <code>password</code>, mas <code>OAuth2PasswordRequestForm</code> n\u00e3o o imp\u00f5e.</p> <p>Se voc\u00ea precisar aplic\u00e1-lo, use <code>OAuth2PasswordRequestFormStrict</code> em vez de <code>OAuth2PasswordRequestForm</code>.</p> <ul> <li>Um <code>client_id</code> opcional (n\u00e3o precisamos dele em nosso exemplo).</li> <li>Um <code>client_secret</code> opcional (n\u00e3o precisamos dele em nosso exemplo).</li> </ul> <p>Informa\u00e7\u00e3o</p> <p>O <code>OAuth2PasswordRequestForm</code> n\u00e3o \u00e9 uma classe especial para ReadyAPI como \u00e9 <code>OAuth2PasswordBearer</code>.</p> <p><code>OAuth2PasswordBearer</code> faz com que ReadyAPI saiba que \u00e9 um esquema de seguran\u00e7a. Portanto, \u00e9 adicionado dessa forma ao OpenAPI.</p> <p>Mas <code>OAuth2PasswordRequestForm</code> \u00e9 apenas uma depend\u00eancia de classe que voc\u00ea mesmo poderia ter escrito ou poderia ter declarado os par\u00e2metros do <code>Form</code> (formul\u00e1rio) diretamente.</p> <p>Mas como \u00e9 um caso de uso comum, ele \u00e9 fornecido diretamente pelo ReadyAPI, apenas para facilitar.</p>"},{"location":"tutorial/security/simple-oauth2/#use-os-dados-do-formulario","title":"Use os dados do formul\u00e1rio","text":"<p>Dica</p> <p>A inst\u00e2ncia da classe de depend\u00eancia <code>OAuth2PasswordRequestForm</code> n\u00e3o ter\u00e1 um atributo <code>scope</code> com a string longa separada por espa\u00e7os, em vez disso, ter\u00e1 um atributo <code>scopes</code> com a lista real de strings para cada escopo enviado.</p> <p>N\u00e3o estamos usando <code>scopes</code> neste exemplo, mas a funcionalidade est\u00e1 dispon\u00edvel se voc\u00ea precisar.</p> <p>Agora, obtenha os dados do usu\u00e1rio do banco de dados (falso), usando o <code>username</code> do campo do formul\u00e1rio.</p> <p>Se n\u00e3o existir tal usu\u00e1rio, retornaremos um erro dizendo \"Incorrect username or password\" (Nome de usu\u00e1rio ou senha incorretos).</p> <p>Para o erro, usamos a exce\u00e7\u00e3o <code>HTTPException</code>:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom typing_extensions import Annotated\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre>"},{"location":"tutorial/security/simple-oauth2/#confira-a-password-senha","title":"Confira a password (senha)","text":"<p>Neste ponto temos os dados do usu\u00e1rio do nosso banco de dados, mas n\u00e3o verificamos a senha.</p> <p>Vamos colocar esses dados primeiro no modelo <code>UserInDB</code> do Pydantic.</p> <p>Voc\u00ea nunca deve salvar senhas em texto simples, portanto, usaremos o sistema de hashing de senhas (falsas).</p> <p>Se as senhas n\u00e3o corresponderem, retornaremos o mesmo erro.</p>"},{"location":"tutorial/security/simple-oauth2/#hashing-de-senha","title":"Hashing de senha","text":"<p>\"Hashing\" significa: converter algum conte\u00fado (uma senha neste caso) em uma sequ\u00eancia de bytes (apenas uma string) que parece algo sem sentido.</p> <p>Sempre que voc\u00ea passa exatamente o mesmo conte\u00fado (exatamente a mesma senha), voc\u00ea obt\u00e9m exatamente a mesma sequ\u00eancia aleat\u00f3ria de caracteres.</p> <p>Mas voc\u00ea n\u00e3o pode converter a sequ\u00eancia aleat\u00f3ria de caracteres de volta para a senha.</p>"},{"location":"tutorial/security/simple-oauth2/#porque-usar-hashing-de-senha","title":"Porque usar hashing de senha","text":"<p>Se o seu banco de dados for roubado, o ladr\u00e3o n\u00e3o ter\u00e1 as senhas em texto simples dos seus usu\u00e1rios, apenas os hashes.</p> <p>Assim, o ladr\u00e3o n\u00e3o poder\u00e1 tentar usar essas mesmas senhas em outro sistema (como muitos usu\u00e1rios usam a mesma senha em todos os lugares, isso seria perigoso).</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom typing_extensions import Annotated\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre>"},{"location":"tutorial/security/simple-oauth2/#sobre-user_dict","title":"Sobre <code>**user_dict</code>","text":"<p><code>UserInDB(**user_dict)</code> significa:</p> <p>Passe as keys (chaves) e values (valores) de <code>user_dict</code> diretamente como argumentos de valor-chave, equivalente a:</p> <pre><code>UserInDB(\n    username = user_dict[\"username\"],\n    email = user_dict[\"email\"],\n    full_name = user_dict[\"full_name\"],\n    disabled = user_dict[\"disabled\"],\n    hashed_password = user_dict[\"hashed_password\"],\n)\n</code></pre> <p>Informa\u00e7\u00e3o</p> <p>Para uma explica\u00e7\u00e3o mais completa de <code>**user_dict</code>, verifique a documenta\u00e7\u00e3o para Extra Models.</p>"},{"location":"tutorial/security/simple-oauth2/#retorne-o-token","title":"Retorne o token","text":"<p>A resposta do endpoint <code>token</code> deve ser um objeto JSON.</p> <p>Deve ter um <code>token_type</code>. No nosso caso, como estamos usando tokens \"Bearer\", o tipo de token deve ser \"<code>bearer</code>\".</p> <p>E deve ter um <code>access_token</code>, com uma string contendo nosso token de acesso.</p> <p>Para este exemplo simples, seremos completamente inseguros e retornaremos o mesmo <code>username</code> do token.</p> <p>Dica</p> <p>No pr\u00f3ximo cap\u00edtulo, voc\u00ea ver\u00e1 uma implementa\u00e7\u00e3o realmente segura, com hash de senha e tokens JWT.</p> <p>Mas, por enquanto, vamos nos concentrar nos detalhes espec\u00edficos de que precisamos.</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom typing_extensions import Annotated\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre> <p>Dica</p> <p>Pela especifica\u00e7\u00e3o, voc\u00ea deve retornar um JSON com um <code>access_token</code> e um <code>token_type</code>, o mesmo que neste exemplo.</p> <p>Isso \u00e9 algo que voc\u00ea mesmo deve fazer em seu c\u00f3digo e certifique-se de usar essas chaves JSON.</p> <p>\u00c9 quase a \u00fanica coisa que voc\u00ea deve se lembrar de fazer corretamente, para estar em conformidade com as especifica\u00e7\u00f5es.</p> <p>De resto, ReadyAPI cuida disso para voc\u00ea.</p>"},{"location":"tutorial/security/simple-oauth2/#atualize-as-dependencias","title":"Atualize as depend\u00eancias","text":"<p>Agora vamos atualizar nossas depend\u00eancias.</p> <p>Queremos obter o <code>user_user</code> somente se este usu\u00e1rio estiver ativo.</p> <p>Portanto, criamos uma depend\u00eancia adicional <code>get_current_active_user</code> que por sua vez usa <code>get_current_user</code> como depend\u00eancia.</p> <p>Ambas as depend\u00eancias retornar\u00e3o apenas um erro HTTP se o usu\u00e1rio n\u00e3o existir ou se estiver inativo.</p> <p>Portanto, em nosso endpoint, s\u00f3 obteremos um usu\u00e1rio se o usu\u00e1rio existir, tiver sido autenticado corretamente e estiver ativo:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom typing_extensions import Annotated\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre> <p>Informa\u00e7\u00e3o</p> <p>O cabe\u00e7alho adicional <code>WWW-Authenticate</code> com valor <code>Bearer</code> que estamos retornando aqui tamb\u00e9m faz parte da especifica\u00e7\u00e3o.</p> <p>Qualquer c\u00f3digo de status HTTP (erro) 401 \"UNAUTHORIZED\" tamb\u00e9m deve retornar um cabe\u00e7alho <code>WWW-Authenticate</code>.</p> <p>No caso de tokens ao portador (nosso caso), o valor desse cabe\u00e7alho deve ser <code>Bearer</code>.</p> <p>Na verdade, voc\u00ea pode pular esse cabe\u00e7alho extra e ainda funcionaria.</p> <p>Mas \u00e9 fornecido aqui para estar em conformidade com as especifica\u00e7\u00f5es.</p> <p>Al\u00e9m disso, pode haver ferramentas que esperam e usam isso (agora ou no futuro) e que podem ser \u00fateis para voc\u00ea ou seus usu\u00e1rios, agora ou no futuro.</p> <p>Esse \u00e9 o benef\u00edcio dos padr\u00f5es...</p>"},{"location":"tutorial/security/simple-oauth2/#veja-em-acao","title":"Veja em a\u00e7\u00e3o","text":"<p>Abra o docs interativo: http://127.0.0.1:8000/docs.</p>"},{"location":"tutorial/security/simple-oauth2/#autenticacao","title":"Autentica\u00e7\u00e3o","text":"<p>Clique no bot\u00e3o \"Authorize\".</p> <p>Use as credenciais:</p> <p>User: <code>johndoe</code></p> <p>Password: <code>secret</code></p> <p></p> <p>Ap\u00f3s autenticar no sistema, voc\u00ea ver\u00e1 assim:</p> <p></p>"},{"location":"tutorial/security/simple-oauth2/#obtenha-seus-proprios-dados-de-usuario","title":"Obtenha seus pr\u00f3prios dados de usu\u00e1rio","text":"<p>Agora use a opera\u00e7\u00e3o <code>GET</code> com o caminho <code>/users/me</code>.</p> <p>Voc\u00ea obter\u00e1 os dados do seu usu\u00e1rio, como:</p> <pre><code>{\n  \"username\": \"johndoe\",\n  \"email\": \"johndoe@example.com\",\n  \"full_name\": \"John Doe\",\n  \"disabled\": false,\n  \"hashed_password\": \"fakehashedsecret\"\n}\n</code></pre> <p></p> <p>Se voc\u00ea clicar no \u00edcone de cadeado, sair e tentar a mesma opera\u00e7\u00e3o novamente, receber\u00e1 um erro HTTP 401 de:</p> <pre><code>{\n  \"detail\": \"Not authenticated\"\n}\n</code></pre>"},{"location":"tutorial/security/simple-oauth2/#usuario-inativo","title":"Usu\u00e1rio inativo","text":"<p>Agora tente com um usu\u00e1rio inativo, autentique-se com:</p> <p>User: <code>alice</code></p> <p>Password: <code>secret2</code></p> <p>E tente usar a opera\u00e7\u00e3o <code>GET</code> com o caminho <code>/users/me</code>.</p> <p>Voc\u00ea receber\u00e1 um erro \"Usu\u00e1rio inativo\", como:</p> <pre><code>{\n  \"detail\": \"Inactive user\"\n}\n</code></pre>"},{"location":"tutorial/security/simple-oauth2/#recaptulando","title":"Recaptulando","text":"<p>Agora voc\u00ea tem as ferramentas para implementar um sistema de seguran\u00e7a completo baseado em <code>username</code> e <code>password</code> para sua API.</p> <p>Usando essas ferramentas, voc\u00ea pode tornar o sistema de seguran\u00e7a compat\u00edvel com qualquer banco de dados e com qualquer usu\u00e1rio ou modelo de dados.</p> <p>O \u00fanico detalhe que falta \u00e9 que ainda n\u00e3o \u00e9 realmente \"seguro\".</p> <p>No pr\u00f3ximo cap\u00edtulo voc\u00ea ver\u00e1 como usar uma biblioteca de hashing de senha segura e tokens JWT.</p>"},{"location":"reference/","title":"Reference","text":"<p>Here's the reference or code API, the classes, functions, parameters, attributes, and all the ReadyAPI parts you can use in your applications.</p> <p>If you want to learn ReadyAPI you are much better off reading the ReadyAPI Tutorial.</p>"},{"location":"reference/readyapi/","title":"<code>ReadyAPI</code> class","text":"<p>Here's the reference information for the <code>ReadyAPI</code> class, with all its parameters, attributes and methods.</p> <p>You can import the <code>ReadyAPI</code> class directly from <code>readyapi</code>:</p> <pre><code>from readyapi import ReadyAPI\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI","title":"readyapi.ReadyAPI","text":"<pre><code>ReadyAPI(\n    *,\n    debug=False,\n    routes=None,\n    title=\"ReadyAPI\",\n    summary=None,\n    description=\"\",\n    version=\"0.1.0\",\n    openapi_url=\"/openapi.json\",\n    openapi_tags=None,\n    servers=None,\n    dependencies=None,\n    default_response_class=Default(JSONResponse),\n    redirect_slashes=True,\n    docs_url=\"/docs\",\n    redoc_url=\"/redoc\",\n    swagger_ui_oauth2_redirect_url=\"/docs/oauth2-redirect\",\n    swagger_ui_init_oauth=None,\n    middleware=None,\n    exception_handlers=None,\n    on_startup=None,\n    on_shutdown=None,\n    lifespan=None,\n    terms_of_service=None,\n    contact=None,\n    license_info=None,\n    openapi_prefix=\"\",\n    root_path=\"\",\n    root_path_in_servers=True,\n    responses=None,\n    callbacks=None,\n    webhooks=None,\n    deprecated=None,\n    include_in_schema=True,\n    swagger_ui_parameters=None,\n    generate_unique_id_function=Default(generate_unique_id),\n    separate_input_output_schemas=True,\n    **extra\n)\n</code></pre> <p>               Bases: <code>Starlette</code></p> <p><code>ReadyAPI</code> app class, the main entrypoint to use ReadyAPI.</p> <p>Read more in the ReadyAPI docs for First Steps.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n</code></pre> PARAMETER DESCRIPTION <code>debug</code> <p>Boolean indicating if debug tracebacks should be returned on server errors.</p> <p>Read more in the Starlette docs for Applications.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>routes</code> <p>Note: you probably shouldn't use this parameter, it is inherited from Starlette and supported for compatibility.</p> <p>A list of routes to serve incoming HTTP and WebSocket requests.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>title</code> <p>The title of the API.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more in the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(title=\"ChimichangApp\")\n</code></pre> <p> TYPE: <code>str</code> DEFAULT: <code>'ReadyAPI'</code> </p> <code>summary</code> <p>A short summary of the API.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more in the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(summary=\"Deadpond's favorite app. Nuff said.\")\n</code></pre> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description of the API. Supports Markdown (using CommonMark syntax).</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more in the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(\n    description=\"\"\"\n                ChimichangApp API helps you do awesome stuff. \ud83d\ude80\n\n                ## Items\n\n                You can **read items**.\n\n                ## Users\n\n                You will be able to:\n\n                * **Create users** (_not implemented_).\n                * **Read users** (_not implemented_).\n\n                \"\"\"\n)\n</code></pre> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>version</code> <p>The version of the API.</p> <p>Note This is the version of your application, not the version of the OpenAPI specification nor the version of ReadyAPI being used.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more in the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(version=\"0.0.1\")\n</code></pre> <p> TYPE: <code>str</code> DEFAULT: <code>'0.1.0'</code> </p> <code>openapi_url</code> <p>The URL where the OpenAPI schema will be served from.</p> <p>If you set it to <code>None</code>, no OpenAPI schema will be served publicly, and the default automatic endpoints <code>/docs</code> and <code>/redoc</code> will also be disabled.</p> <p>Read more in the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(openapi_url=\"/api/v1/openapi.json\")\n</code></pre> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>'/openapi.json'</code> </p> <code>openapi_tags</code> <p>A list of tags used by OpenAPI, these are the same <code>tags</code> you can set in the path operations, like:</p> <ul> <li><code>@app.get(\"/users/\", tags=[\"users\"])</code></li> <li><code>@app.get(\"/items/\", tags=[\"items\"])</code></li> </ul> <p>The order of the tags can be used to specify the order shown in tools like Swagger UI, used in the automatic path <code>/docs</code>.</p> <p>It's not required to specify all the tags used.</p> <p>The tags that are not declared MAY be organized randomly or based on the tools' logic. Each tag name in the list MUST be unique.</p> <p>The value of each item is a <code>dict</code> containing:</p> <ul> <li><code>name</code>: The name of the tag.</li> <li><code>description</code>: A short description of the tag.     CommonMark syntax MAY be used for rich     text representation.</li> <li><code>externalDocs</code>: Additional external documentation for this tag. If     provided, it would contain a <code>dict</code> with:<ul> <li><code>description</code>: A short description of the target documentation.     CommonMark syntax MAY be used for     rich text representation.</li> <li><code>url</code>: The URL for the target documentation. Value MUST be in     the form of a URL.</li> </ul> </li> </ul> <p>Read more in the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\ntags_metadata = [\n    {\n        \"name\": \"users\",\n        \"description\": \"Operations with users. The **login** logic is also here.\",\n    },\n    {\n        \"name\": \"items\",\n        \"description\": \"Manage items. So _fancy_ they have their own docs.\",\n        \"externalDocs\": {\n            \"description\": \"Items external docs\",\n            \"url\": \"https://readyapi.github.io/\",\n        },\n    },\n]\n\napp = ReadyAPI(openapi_tags=tags_metadata)\n</code></pre> <p> TYPE: <code>Optional[List[Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>servers</code> <p>A <code>list</code> of <code>dict</code>s with connectivity information to a target server.</p> <p>You would use it, for example, if your application is served from different domains and you want to use the same Swagger UI in the browser to interact with each of them (instead of having multiple browser tabs open). Or if you want to leave fixed the possible URLs.</p> <p>If the servers <code>list</code> is not provided, or is an empty <code>list</code>, the default value would be a <code>dict</code> with a <code>url</code> value of <code>/</code>.</p> <p>Each item in the <code>list</code> is a <code>dict</code> containing:</p> <ul> <li><code>url</code>: A URL to the target host. This URL supports Server Variables and MAY be relative, to indicate that the host location is relative to the location where the OpenAPI document is being served. Variable substitutions will be made when a variable is named in <code>{</code>brackets<code>}</code>.</li> <li><code>description</code>: An optional string describing the host designated by the URL. CommonMark syntax MAY be used for rich text representation.</li> <li><code>variables</code>: A <code>dict</code> between a variable name and its value. The value     is used for substitution in the server's URL template.</li> </ul> <p>Read more in the ReadyAPI docs for Behind a Proxy.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(\n    servers=[\n        {\"url\": \"https://stag.example.com\", \"description\": \"Staging environment\"},\n        {\"url\": \"https://prod.example.com\", \"description\": \"Production environment\"},\n    ]\n)\n</code></pre> <p> TYPE: <code>Optional[List[Dict[str, Union[str, Any]]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of global dependencies, they will be applied to each path operation, including in sub-routers.</p> <p>Read more about it in the ReadyAPI docs for Global Dependencies.</p> <p>Example</p> <pre><code>from readyapi import Depends, ReadyAPI\n\nfrom .dependencies import func_dep_1, func_dep_2\n\napp = ReadyAPI(dependencies=[Depends(func_dep_1), Depends(func_dep_2)])\n</code></pre> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>default_response_class</code> <p>The default response class to be used.</p> <p>Read more in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import ORJSONResponse\n\napp = ReadyAPI(default_response_class=ORJSONResponse)\n</code></pre> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>redirect_slashes</code> <p>Whether to detect and redirect slashes in URLs when the client doesn't use the same format.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(redirect_slashes=True)  # the default\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"item_id\": \"Foo\"}]\n</code></pre> <p>With this app, if a client goes to <code>/items</code> (without a trailing slash), they will be automatically redirected with an HTTP status code of 307 to <code>/items/</code>.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>docs_url</code> <p>The path to the automatic interactive API documentation. It is handled in the browser by Swagger UI.</p> <p>The default URL is <code>/docs</code>. You can disable it by setting it to <code>None</code>.</p> <p>If <code>openapi_url</code> is set to <code>None</code>, this will be automatically disabled.</p> <p>Read more in the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(docs_url=\"/documentation\", redoc_url=None)\n</code></pre> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>'/docs'</code> </p> <code>redoc_url</code> <p>The path to the alternative automatic interactive API documentation provided by ReDoc.</p> <p>The default URL is <code>/redoc</code>. You can disable it by setting it to <code>None</code>.</p> <p>If <code>openapi_url</code> is set to <code>None</code>, this will be automatically disabled.</p> <p>Read more in the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(docs_url=\"/documentation\", redoc_url=\"redocumentation\")\n</code></pre> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>'/redoc'</code> </p> <code>swagger_ui_oauth2_redirect_url</code> <p>The OAuth2 redirect endpoint for the Swagger UI.</p> <p>By default it is <code>/docs/oauth2-redirect</code>.</p> <p>This is only used if you use OAuth2 (with the \"Authorize\" button) with Swagger UI.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>'/docs/oauth2-redirect'</code> </p> <code>swagger_ui_init_oauth</code> <p>OAuth2 configuration for the Swagger UI, by default shown at <code>/docs</code>.</p> <p>Read more about the available configuration options in the Swagger UI docs.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>middleware</code> <p>List of middleware to be added when creating the application.</p> <p>In ReadyAPI you would normally do this with <code>app.add_middleware()</code> instead.</p> <p>Read more in the ReadyAPI docs for Middleware.</p> <p> TYPE: <code>Optional[Sequence[Middleware]]</code> DEFAULT: <code>None</code> </p> <code>exception_handlers</code> <p>A dictionary with handlers for exceptions.</p> <p>In ReadyAPI, you would normally use the decorator <code>@app.exception_handler()</code>.</p> <p>Read more in the ReadyAPI docs for Handling Errors.</p> <p> TYPE: <code>Optional[Dict[Union[int, Type[Exception]], Callable[[Request, Any], Coroutine[Any, Any, Response]]]]</code> DEFAULT: <code>None</code> </p> <code>on_startup</code> <p>A list of startup event handler functions.</p> <p>You should instead use the <code>lifespan</code> handlers.</p> <p>Read more in the ReadyAPI docs for <code>lifespan</code>.</p> <p> TYPE: <code>Optional[Sequence[Callable[[], Any]]]</code> DEFAULT: <code>None</code> </p> <code>on_shutdown</code> <p>A list of shutdown event handler functions.</p> <p>You should instead use the <code>lifespan</code> handlers.</p> <p>Read more in the ReadyAPI docs for <code>lifespan</code>.</p> <p> TYPE: <code>Optional[Sequence[Callable[[], Any]]]</code> DEFAULT: <code>None</code> </p> <code>lifespan</code> <p>A <code>Lifespan</code> context manager handler. This replaces <code>startup</code> and <code>shutdown</code> functions with a single context manager.</p> <p>Read more in the ReadyAPI docs for <code>lifespan</code>.</p> <p> TYPE: <code>Optional[Lifespan[AppType]]</code> DEFAULT: <code>None</code> </p> <code>terms_of_service</code> <p>A URL to the Terms of Service for your API.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more at the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>app = ReadyAPI(terms_of_service=\"http://example.com/terms/\")\n</code></pre> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>contact</code> <p>A dictionary with the contact information for the exposed API.</p> <p>It can contain several fields.</p> <ul> <li><code>name</code>: (<code>str</code>) The name of the contact person/organization.</li> <li><code>url</code>: (<code>str</code>) A URL pointing to the contact information. MUST be in     the format of a URL.</li> <li><code>email</code>: (<code>str</code>) The email address of the contact person/organization.     MUST be in the format of an email address.</li> </ul> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more at the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>app = ReadyAPI(\n    contact={\n        \"name\": \"Deadpoolio the Amazing\",\n        \"url\": \"http://x-force.example.com/contact/\",\n        \"email\": \"dp@x-force.example.com\",\n    }\n)\n</code></pre> <p> TYPE: <code>Optional[Dict[str, Union[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>license_info</code> <p>A dictionary with the license information for the exposed API.</p> <p>It can contain several fields.</p> <ul> <li><code>name</code>: (<code>str</code>) REQUIRED (if a <code>license_info</code> is set). The     license name used for the API.</li> <li><code>identifier</code>: (<code>str</code>) An SPDX license expression     for the API. The <code>identifier</code> field is mutually exclusive of the <code>url</code>     field. Available since OpenAPI 3.1.0, ReadyAPI 0.99.0.</li> <li><code>url</code>: (<code>str</code>) A URL to the license used for the API. This MUST be     the format of a URL.</li> </ul> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more at the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>app = ReadyAPI(\n    license_info={\n        \"name\": \"Apache 2.0\",\n        \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\",\n    }\n)\n</code></pre> <p> TYPE: <code>Optional[Dict[str, Union[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>openapi_prefix</code> <p>A URL prefix for the OpenAPI URL.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>root_path</code> <p>A path prefix handled by a proxy that is not seen by the application but is seen by external clients, which affects things like Swagger UI.</p> <p>Read more about it at the ReadyAPI docs for Behind a Proxy.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(root_path=\"/api/v1\")\n</code></pre> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>root_path_in_servers</code> <p>To disable automatically generating the URLs in the <code>servers</code> field in the autogenerated OpenAPI using the <code>root_path</code>.</p> <p>Read more about it in the ReadyAPI docs for Behind a Proxy.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(root_path_in_servers=False)\n</code></pre> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>responses</code> <p>Additional responses to be shown in OpenAPI.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Additional Responses in OpenAPI.</p> <p>And in the ReadyAPI docs for Bigger Applications.</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>OpenAPI callbacks that should apply to all path operations.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>webhooks</code> <p>Add OpenAPI webhooks. This is similar to <code>callbacks</code> but it doesn't depend on specific path operations.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Note: This is available since OpenAPI 3.1.0, ReadyAPI 0.99.0.</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Webhooks.</p> <p> TYPE: <code>Optional[APIRouter]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark all path operations as deprecated. You probably don't need it, but it's available.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>To include (or not) all the path operations in the generated OpenAPI. You probably don't need it, but it's available.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>swagger_ui_parameters</code> <p>Parameters to configure Swagger UI, the autogenerated interactive API documentation (by default at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs about how to Configure Swagger UI.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> <code>separate_input_output_schemas</code> <p>Whether to generate separate OpenAPI schemas for request body and response body when the results would be more precise.</p> <p>This is particularly useful when automatically generating clients.</p> <p>For example, if you have a model like:</p> <pre><code>from pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    tags: list[str] = []\n</code></pre> <p>When <code>Item</code> is used for input, a request body, <code>tags</code> is not required, the client doesn't have to provide it.</p> <p>But when using <code>Item</code> for output, for a response body, <code>tags</code> is always available because it has a default value, even if it's just an empty list. So, the client should be able to always expect it.</p> <p>In this case, there would be two different schemas, one for input and another one for output.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>**extra</code> <p>Extra keyword arguments to be stored in the app, not used by ReadyAPI anywhere.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def __init__(\n    self: AppType,\n    *,\n    debug: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Boolean indicating if debug tracebacks should be returned on server\n            errors.\n\n            Read more in the\n            [Starlette docs for Applications](https://www.starlette.io/applications/#instantiating-the-application).\n            \"\"\"\n        ),\n    ] = False,\n    routes: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            **Note**: you probably shouldn't use this parameter, it is inherited\n            from Starlette and supported for compatibility.\n\n            ---\n\n            A list of routes to serve incoming HTTP and WebSocket requests.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            You normally wouldn't use this parameter with ReadyAPI, it is inherited\n            from Starlette and supported for compatibility.\n\n            In ReadyAPI, you normally would use the *path operation methods*,\n            like `app.get()`, `app.post()`, etc.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The title of the API.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more in the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.github.io/tutorial/metadata/#metadata-for-api).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(title=\"ChimichangApp\")\n            ```\n            \"\"\"\n        ),\n    ] = \"ReadyAPI\",\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A short summary of the API.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more in the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.github.io/tutorial/metadata/#metadata-for-api).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(summary=\"Deadpond's favorite app. Nuff said.\")\n            ```\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        str,\n        Doc(\n            '''\n            A description of the API. Supports Markdown (using\n            [CommonMark syntax](https://commonmark.org/)).\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more in the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.github.io/tutorial/metadata/#metadata-for-api).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(\n                description=\"\"\"\n                            ChimichangApp API helps you do awesome stuff. \ud83d\ude80\n\n                            ## Items\n\n                            You can **read items**.\n\n                            ## Users\n\n                            You will be able to:\n\n                            * **Create users** (_not implemented_).\n                            * **Read users** (_not implemented_).\n\n                            \"\"\"\n            )\n            ```\n            '''\n        ),\n    ] = \"\",\n    version: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The version of the API.\n\n            **Note** This is the version of your application, not the version of\n            the OpenAPI specification nor the version of ReadyAPI being used.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more in the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.github.io/tutorial/metadata/#metadata-for-api).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(version=\"0.0.1\")\n            ```\n            \"\"\"\n        ),\n    ] = \"0.1.0\",\n    openapi_url: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            The URL where the OpenAPI schema will be served from.\n\n            If you set it to `None`, no OpenAPI schema will be served publicly, and\n            the default automatic endpoints `/docs` and `/redoc` will also be\n            disabled.\n\n            Read more in the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.github.io/tutorial/metadata/#openapi-url).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(openapi_url=\"/api/v1/openapi.json\")\n            ```\n            \"\"\"\n        ),\n    ] = \"/openapi.json\",\n    openapi_tags: Annotated[\n        Optional[List[Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            A list of tags used by OpenAPI, these are the same `tags` you can set\n            in the *path operations*, like:\n\n            * `@app.get(\"/users/\", tags=[\"users\"])`\n            * `@app.get(\"/items/\", tags=[\"items\"])`\n\n            The order of the tags can be used to specify the order shown in\n            tools like Swagger UI, used in the automatic path `/docs`.\n\n            It's not required to specify all the tags used.\n\n            The tags that are not declared MAY be organized randomly or based\n            on the tools' logic. Each tag name in the list MUST be unique.\n\n            The value of each item is a `dict` containing:\n\n            * `name`: The name of the tag.\n            * `description`: A short description of the tag.\n                [CommonMark syntax](https://commonmark.org/) MAY be used for rich\n                text representation.\n            * `externalDocs`: Additional external documentation for this tag. If\n                provided, it would contain a `dict` with:\n                * `description`: A short description of the target documentation.\n                    [CommonMark syntax](https://commonmark.org/) MAY be used for\n                    rich text representation.\n                * `url`: The URL for the target documentation. Value MUST be in\n                    the form of a URL.\n\n            Read more in the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.github.io/tutorial/metadata/#metadata-for-tags).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            tags_metadata = [\n                {\n                    \"name\": \"users\",\n                    \"description\": \"Operations with users. The **login** logic is also here.\",\n                },\n                {\n                    \"name\": \"items\",\n                    \"description\": \"Manage items. So _fancy_ they have their own docs.\",\n                    \"externalDocs\": {\n                        \"description\": \"Items external docs\",\n                        \"url\": \"https://readyapi.github.io/\",\n                    },\n                },\n            ]\n\n            app = ReadyAPI(openapi_tags=tags_metadata)\n            ```\n            \"\"\"\n        ),\n    ] = None,\n    servers: Annotated[\n        Optional[List[Dict[str, Union[str, Any]]]],\n        Doc(\n            \"\"\"\n            A `list` of `dict`s with connectivity information to a target server.\n\n            You would use it, for example, if your application is served from\n            different domains and you want to use the same Swagger UI in the\n            browser to interact with each of them (instead of having multiple\n            browser tabs open). Or if you want to leave fixed the possible URLs.\n\n            If the servers `list` is not provided, or is an empty `list`, the\n            default value would be a `dict` with a `url` value of `/`.\n\n            Each item in the `list` is a `dict` containing:\n\n            * `url`: A URL to the target host. This URL supports Server Variables\n            and MAY be relative, to indicate that the host location is relative\n            to the location where the OpenAPI document is being served. Variable\n            substitutions will be made when a variable is named in `{`brackets`}`.\n            * `description`: An optional string describing the host designated by\n            the URL. [CommonMark syntax](https://commonmark.org/) MAY be used for\n            rich text representation.\n            * `variables`: A `dict` between a variable name and its value. The value\n                is used for substitution in the server's URL template.\n\n            Read more in the\n            [ReadyAPI docs for Behind a Proxy](https://readyapi.github.io/advanced/behind-a-proxy/#additional-servers).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(\n                servers=[\n                    {\"url\": \"https://stag.example.com\", \"description\": \"Staging environment\"},\n                    {\"url\": \"https://prod.example.com\", \"description\": \"Production environment\"},\n                ]\n            )\n            ```\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of global dependencies, they will be applied to each\n            *path operation*, including in sub-routers.\n\n            Read more about it in the\n            [ReadyAPI docs for Global Dependencies](https://readyapi.github.io/tutorial/dependencies/global-dependencies/).\n\n            **Example**\n\n            ```python\n            from readyapi import Depends, ReadyAPI\n\n            from .dependencies import func_dep_1, func_dep_2\n\n            app = ReadyAPI(dependencies=[Depends(func_dep_1), Depends(func_dep_2)])\n            ```\n            \"\"\"\n        ),\n    ] = None,\n    default_response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            The default response class to be used.\n\n            Read more in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#default-response-class).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n            from readyapi.responses import ORJSONResponse\n\n            app = ReadyAPI(default_response_class=ORJSONResponse)\n            ```\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    redirect_slashes: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Whether to detect and redirect slashes in URLs when the client doesn't\n            use the same format.\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(redirect_slashes=True)  # the default\n\n            @app.get(\"/items/\")\n            async def read_items():\n                return [{\"item_id\": \"Foo\"}]\n            ```\n\n            With this app, if a client goes to `/items` (without a trailing slash),\n            they will be automatically redirected with an HTTP status code of 307\n            to `/items/`.\n            \"\"\"\n        ),\n    ] = True,\n    docs_url: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            The path to the automatic interactive API documentation.\n            It is handled in the browser by Swagger UI.\n\n            The default URL is `/docs`. You can disable it by setting it to `None`.\n\n            If `openapi_url` is set to `None`, this will be automatically disabled.\n\n            Read more in the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.github.io/tutorial/metadata/#docs-urls).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(docs_url=\"/documentation\", redoc_url=None)\n            ```\n            \"\"\"\n        ),\n    ] = \"/docs\",\n    redoc_url: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            The path to the alternative automatic interactive API documentation\n            provided by ReDoc.\n\n            The default URL is `/redoc`. You can disable it by setting it to `None`.\n\n            If `openapi_url` is set to `None`, this will be automatically disabled.\n\n            Read more in the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.github.io/tutorial/metadata/#docs-urls).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(docs_url=\"/documentation\", redoc_url=\"redocumentation\")\n            ```\n            \"\"\"\n        ),\n    ] = \"/redoc\",\n    swagger_ui_oauth2_redirect_url: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            The OAuth2 redirect endpoint for the Swagger UI.\n\n            By default it is `/docs/oauth2-redirect`.\n\n            This is only used if you use OAuth2 (with the \"Authorize\" button)\n            with Swagger UI.\n            \"\"\"\n        ),\n    ] = \"/docs/oauth2-redirect\",\n    swagger_ui_init_oauth: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            OAuth2 configuration for the Swagger UI, by default shown at `/docs`.\n\n            Read more about the available configuration options in the\n            [Swagger UI docs](https://swagger.io/docs/open-source-tools/swagger-ui/usage/oauth2/).\n            \"\"\"\n        ),\n    ] = None,\n    middleware: Annotated[\n        Optional[Sequence[Middleware]],\n        Doc(\n            \"\"\"\n            List of middleware to be added when creating the application.\n\n            In ReadyAPI you would normally do this with `app.add_middleware()`\n            instead.\n\n            Read more in the\n            [ReadyAPI docs for Middleware](https://readyapi.github.io/tutorial/middleware/).\n            \"\"\"\n        ),\n    ] = None,\n    exception_handlers: Annotated[\n        Optional[\n            Dict[\n                Union[int, Type[Exception]],\n                Callable[[Request, Any], Coroutine[Any, Any, Response]],\n            ]\n        ],\n        Doc(\n            \"\"\"\n            A dictionary with handlers for exceptions.\n\n            In ReadyAPI, you would normally use the decorator\n            `@app.exception_handler()`.\n\n            Read more in the\n            [ReadyAPI docs for Handling Errors](https://readyapi.github.io/tutorial/handling-errors/).\n            \"\"\"\n        ),\n    ] = None,\n    on_startup: Annotated[\n        Optional[Sequence[Callable[[], Any]]],\n        Doc(\n            \"\"\"\n            A list of startup event handler functions.\n\n            You should instead use the `lifespan` handlers.\n\n            Read more in the [ReadyAPI docs for `lifespan`](https://readyapi.github.io/advanced/events/).\n            \"\"\"\n        ),\n    ] = None,\n    on_shutdown: Annotated[\n        Optional[Sequence[Callable[[], Any]]],\n        Doc(\n            \"\"\"\n            A list of shutdown event handler functions.\n\n            You should instead use the `lifespan` handlers.\n\n            Read more in the\n            [ReadyAPI docs for `lifespan`](https://readyapi.github.io/advanced/events/).\n            \"\"\"\n        ),\n    ] = None,\n    lifespan: Annotated[\n        Optional[Lifespan[AppType]],\n        Doc(\n            \"\"\"\n            A `Lifespan` context manager handler. This replaces `startup` and\n            `shutdown` functions with a single context manager.\n\n            Read more in the\n            [ReadyAPI docs for `lifespan`](https://readyapi.github.io/advanced/events/).\n            \"\"\"\n        ),\n    ] = None,\n    terms_of_service: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A URL to the Terms of Service for your API.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more at the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.github.io/tutorial/metadata/#metadata-for-api).\n\n            **Example**\n\n            ```python\n            app = ReadyAPI(terms_of_service=\"http://example.com/terms/\")\n            ```\n            \"\"\"\n        ),\n    ] = None,\n    contact: Annotated[\n        Optional[Dict[str, Union[str, Any]]],\n        Doc(\n            \"\"\"\n            A dictionary with the contact information for the exposed API.\n\n            It can contain several fields.\n\n            * `name`: (`str`) The name of the contact person/organization.\n            * `url`: (`str`) A URL pointing to the contact information. MUST be in\n                the format of a URL.\n            * `email`: (`str`) The email address of the contact person/organization.\n                MUST be in the format of an email address.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more at the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.github.io/tutorial/metadata/#metadata-for-api).\n\n            **Example**\n\n            ```python\n            app = ReadyAPI(\n                contact={\n                    \"name\": \"Deadpoolio the Amazing\",\n                    \"url\": \"http://x-force.example.com/contact/\",\n                    \"email\": \"dp@x-force.example.com\",\n                }\n            )\n            ```\n            \"\"\"\n        ),\n    ] = None,\n    license_info: Annotated[\n        Optional[Dict[str, Union[str, Any]]],\n        Doc(\n            \"\"\"\n            A dictionary with the license information for the exposed API.\n\n            It can contain several fields.\n\n            * `name`: (`str`) **REQUIRED** (if a `license_info` is set). The\n                license name used for the API.\n            * `identifier`: (`str`) An [SPDX](https://spdx.dev/) license expression\n                for the API. The `identifier` field is mutually exclusive of the `url`\n                field. Available since OpenAPI 3.1.0, ReadyAPI 0.99.0.\n            * `url`: (`str`) A URL to the license used for the API. This MUST be\n                the format of a URL.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more at the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.github.io/tutorial/metadata/#metadata-for-api).\n\n            **Example**\n\n            ```python\n            app = ReadyAPI(\n                license_info={\n                    \"name\": \"Apache 2.0\",\n                    \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\",\n                }\n            )\n            ```\n            \"\"\"\n        ),\n    ] = None,\n    openapi_prefix: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            A URL prefix for the OpenAPI URL.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            \"openapi_prefix\" has been deprecated in favor of \"root_path\", which\n            follows more closely the ASGI standard, is simpler, and more\n            automatic.\n            \"\"\"\n        ),\n    ] = \"\",\n    root_path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            A path prefix handled by a proxy that is not seen by the application\n            but is seen by external clients, which affects things like Swagger UI.\n\n            Read more about it at the\n            [ReadyAPI docs for Behind a Proxy](https://readyapi.github.io/advanced/behind-a-proxy/).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(root_path=\"/api/v1\")\n            ```\n            \"\"\"\n        ),\n    ] = \"\",\n    root_path_in_servers: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To disable automatically generating the URLs in the `servers` field\n            in the autogenerated OpenAPI using the `root_path`.\n\n            Read more about it in the\n            [ReadyAPI docs for Behind a Proxy](https://readyapi.github.io/advanced/behind-a-proxy/#disable-automatic-server-from-root_path).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(root_path_in_servers=False)\n            ```\n            \"\"\"\n        ),\n    ] = True,\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses to be shown in OpenAPI.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Additional Responses in OpenAPI](https://readyapi.github.io/advanced/additional-responses/).\n\n            And in the\n            [ReadyAPI docs for Bigger Applications](https://readyapi.github.io/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            OpenAPI callbacks that should apply to all *path operations*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    webhooks: Annotated[\n        Optional[routing.APIRouter],\n        Doc(\n            \"\"\"\n            Add OpenAPI webhooks. This is similar to `callbacks` but it doesn't\n            depend on specific *path operations*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            **Note**: This is available since OpenAPI 3.1.0, ReadyAPI 0.99.0.\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Webhooks](https://readyapi.github.io/advanced/openapi-webhooks/).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark all *path operations* as deprecated. You probably don't need it,\n            but it's available.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) all the *path operations* in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    swagger_ui_parameters: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Parameters to configure Swagger UI, the autogenerated interactive API\n            documentation (by default at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs about how to Configure Swagger UI](https://readyapi.github.io/how-to/configure-swagger-ui/).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n    separate_input_output_schemas: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Whether to generate separate OpenAPI schemas for request body and\n            response body when the results would be more precise.\n\n            This is particularly useful when automatically generating clients.\n\n            For example, if you have a model like:\n\n            ```python\n            from pydantic import BaseModel\n\n            class Item(BaseModel):\n                name: str\n                tags: list[str] = []\n            ```\n\n            When `Item` is used for input, a request body, `tags` is not required,\n            the client doesn't have to provide it.\n\n            But when using `Item` for output, for a response body, `tags` is always\n            available because it has a default value, even if it's just an empty\n            list. So, the client should be able to always expect it.\n\n            In this case, there would be two different schemas, one for input and\n            another one for output.\n            \"\"\"\n        ),\n    ] = True,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Extra keyword arguments to be stored in the app, not used by ReadyAPI\n            anywhere.\n            \"\"\"\n        ),\n    ],\n) -&gt; None:\n    self.debug = debug\n    self.title = title\n    self.summary = summary\n    self.description = description\n    self.version = version\n    self.terms_of_service = terms_of_service\n    self.contact = contact\n    self.license_info = license_info\n    self.openapi_url = openapi_url\n    self.openapi_tags = openapi_tags\n    self.root_path_in_servers = root_path_in_servers\n    self.docs_url = docs_url\n    self.redoc_url = redoc_url\n    self.swagger_ui_oauth2_redirect_url = swagger_ui_oauth2_redirect_url\n    self.swagger_ui_init_oauth = swagger_ui_init_oauth\n    self.swagger_ui_parameters = swagger_ui_parameters\n    self.servers = servers or []\n    self.separate_input_output_schemas = separate_input_output_schemas\n    self.extra = extra\n    self.openapi_version: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The version string of OpenAPI.\n\n            ReadyAPI will generate OpenAPI version 3.1.0, and will output that as\n            the OpenAPI version. But some tools, even though they might be\n            compatible with OpenAPI 3.1.0, might not recognize it as a valid.\n\n            So you could override this value to trick those tools into using\n            the generated OpenAPI. Have in mind that this is a hack. But if you\n            avoid using features added in OpenAPI 3.1.0, it might work for your\n            use case.\n\n            This is not passed as a parameter to the `ReadyAPI` class to avoid\n            giving the false idea that ReadyAPI would generate a different OpenAPI\n            schema. It is only available as an attribute.\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI()\n\n            app.openapi_version = \"3.0.2\"\n            ```\n            \"\"\"\n        ),\n    ] = \"3.1.0\"\n    self.openapi_schema: Optional[Dict[str, Any]] = None\n    if self.openapi_url:\n        assert self.title, \"A title must be provided for OpenAPI, e.g.: 'My API'\"\n        assert self.version, \"A version must be provided for OpenAPI, e.g.: '2.1.0'\"\n    # TODO: remove when discarding the openapi_prefix parameter\n    if openapi_prefix:\n        logger.warning(\n            '\"openapi_prefix\" has been deprecated in favor of \"root_path\", which '\n            \"follows more closely the ASGI standard, is simpler, and more \"\n            \"automatic. Check the docs at \"\n            \"https://readyapi.github.io/advanced/sub-applications/\"\n        )\n    self.webhooks: Annotated[\n        routing.APIRouter,\n        Doc(\n            \"\"\"\n            The `app.webhooks` attribute is an `APIRouter` with the *path\n            operations* that will be used just for documentation of webhooks.\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Webhooks](https://readyapi.github.io/advanced/openapi-webhooks/).\n            \"\"\"\n        ),\n    ] = webhooks or routing.APIRouter()\n    self.root_path = root_path or openapi_prefix\n    self.state: Annotated[\n        State,\n        Doc(\n            \"\"\"\n            A state object for the application. This is the same object for the\n            entire application, it doesn't change from request to request.\n\n            You normally wouldn't use this in ReadyAPI, for most of the cases you\n            would instead use ReadyAPI dependencies.\n\n            This is simply inherited from Starlette.\n\n            Read more about it in the\n            [Starlette docs for Applications](https://www.starlette.io/applications/#storing-state-on-the-app-instance).\n            \"\"\"\n        ),\n    ] = State()\n    self.dependency_overrides: Annotated[\n        Dict[Callable[..., Any], Callable[..., Any]],\n        Doc(\n            \"\"\"\n            A dictionary with overrides for the dependencies.\n\n            Each key is the original dependency callable, and the value is the\n            actual dependency that should be called.\n\n            This is for testing, to replace expensive dependencies with testing\n            versions.\n\n            Read more about it in the\n            [ReadyAPI docs for Testing Dependencies with Overrides](https://readyapi.github.io/advanced/testing-dependencies/).\n            \"\"\"\n        ),\n    ] = {}\n    self.router: routing.APIRouter = routing.APIRouter(\n        routes=routes,\n        redirect_slashes=redirect_slashes,\n        dependency_overrides_provider=self,\n        on_startup=on_startup,\n        on_shutdown=on_shutdown,\n        lifespan=lifespan,\n        default_response_class=default_response_class,\n        dependencies=dependencies,\n        callbacks=callbacks,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        responses=responses,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n    self.exception_handlers: Dict[\n        Any, Callable[[Request, Any], Union[Response, Awaitable[Response]]]\n    ] = {} if exception_handlers is None else dict(exception_handlers)\n    self.exception_handlers.setdefault(HTTPException, http_exception_handler)\n    self.exception_handlers.setdefault(\n        RequestValidationError, request_validation_exception_handler\n    )\n    self.exception_handlers.setdefault(\n        WebSocketRequestValidationError,\n        # Starlette still has incorrect type specification for the handlers\n        websocket_request_validation_exception_handler,  # type: ignore\n    )\n\n    self.user_middleware: List[Middleware] = (\n        [] if middleware is None else list(middleware)\n    )\n    self.middleware_stack: Union[ASGIApp, None] = None\n    self.setup()\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.openapi_version","title":"openapi_version  <code>instance-attribute</code>","text":"<pre><code>openapi_version = '3.1.0'\n</code></pre> <p>The version string of OpenAPI.</p> <p>ReadyAPI will generate OpenAPI version 3.1.0, and will output that as the OpenAPI version. But some tools, even though they might be compatible with OpenAPI 3.1.0, might not recognize it as a valid.</p> <p>So you could override this value to trick those tools into using the generated OpenAPI. Have in mind that this is a hack. But if you avoid using features added in OpenAPI 3.1.0, it might work for your use case.</p> <p>This is not passed as a parameter to the <code>ReadyAPI</code> class to avoid giving the false idea that ReadyAPI would generate a different OpenAPI schema. It is only available as an attribute.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\napp.openapi_version = \"3.0.2\"\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.webhooks","title":"webhooks  <code>instance-attribute</code>","text":"<pre><code>webhooks = webhooks or APIRouter()\n</code></pre> <p>The <code>app.webhooks</code> attribute is an <code>APIRouter</code> with the path operations that will be used just for documentation of webhooks.</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Webhooks.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.state","title":"state  <code>instance-attribute</code>","text":"<pre><code>state = State()\n</code></pre> <p>A state object for the application. This is the same object for the entire application, it doesn't change from request to request.</p> <p>You normally wouldn't use this in ReadyAPI, for most of the cases you would instead use ReadyAPI dependencies.</p> <p>This is simply inherited from Starlette.</p> <p>Read more about it in the Starlette docs for Applications.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.dependency_overrides","title":"dependency_overrides  <code>instance-attribute</code>","text":"<pre><code>dependency_overrides = {}\n</code></pre> <p>A dictionary with overrides for the dependencies.</p> <p>Each key is the original dependency callable, and the value is the actual dependency that should be called.</p> <p>This is for testing, to replace expensive dependencies with testing versions.</p> <p>Read more about it in the ReadyAPI docs for Testing Dependencies with Overrides.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.openapi","title":"openapi","text":"<pre><code>openapi()\n</code></pre> <p>Generate the OpenAPI schema of the application. This is called by ReadyAPI internally.</p> <p>The first time it is called it stores the result in the attribute <code>app.openapi_schema</code>, and next times it is called, it just returns that same result. To avoid the cost of generating the schema every time.</p> <p>If you need to modify the generated OpenAPI schema, you could modify it.</p> <p>Read more in the ReadyAPI docs for OpenAPI.</p> Source code in <code>readyapi/applications.py</code> <pre><code>def openapi(self) -&gt; Dict[str, Any]:\n    \"\"\"\n    Generate the OpenAPI schema of the application. This is called by ReadyAPI\n    internally.\n\n    The first time it is called it stores the result in the attribute\n    `app.openapi_schema`, and next times it is called, it just returns that same\n    result. To avoid the cost of generating the schema every time.\n\n    If you need to modify the generated OpenAPI schema, you could modify it.\n\n    Read more in the\n    [ReadyAPI docs for OpenAPI](https://readyapi.github.io/how-to/extending-openapi/).\n    \"\"\"\n    if not self.openapi_schema:\n        self.openapi_schema = get_openapi(\n            title=self.title,\n            version=self.version,\n            openapi_version=self.openapi_version,\n            summary=self.summary,\n            description=self.description,\n            terms_of_service=self.terms_of_service,\n            contact=self.contact,\n            license_info=self.license_info,\n            routes=self.routes,\n            webhooks=self.webhooks.routes,\n            tags=self.openapi_tags,\n            servers=self.servers,\n            separate_input_output_schemas=self.separate_input_output_schemas,\n        )\n    return self.openapi_schema\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.websocket","title":"websocket","text":"<pre><code>websocket(path, name=None, *, dependencies=None)\n</code></pre> <p>Decorate a WebSocket function.</p> <p>Read more about it in the ReadyAPI docs for WebSockets.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI, WebSocket\n\napp = ReadyAPI()\n\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(f\"Message text was: {data}\")\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>WebSocket path.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>A name for the WebSocket. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be used for this WebSocket.</p> <p>Read more about it in the ReadyAPI docs for WebSockets.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def websocket(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            WebSocket path.\n            \"\"\"\n        ),\n    ],\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A name for the WebSocket. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    *,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be used for this\n            WebSocket.\n\n            Read more about it in the\n            [ReadyAPI docs for WebSockets](https://readyapi.github.io/advanced/websockets/).\n            \"\"\"\n        ),\n    ] = None,\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Decorate a WebSocket function.\n\n    Read more about it in the\n    [ReadyAPI docs for WebSockets](https://readyapi.github.io/advanced/websockets/).\n\n    **Example**\n\n    ```python\n    from readyapi import ReadyAPI, WebSocket\n\n    app = ReadyAPI()\n\n    @app.websocket(\"/ws\")\n    async def websocket_endpoint(websocket: WebSocket):\n        await websocket.accept()\n        while True:\n            data = await websocket.receive_text()\n            await websocket.send_text(f\"Message text was: {data}\")\n    ```\n    \"\"\"\n\n    def decorator(func: DecoratedCallable) -&gt; DecoratedCallable:\n        self.add_api_websocket_route(\n            path,\n            func,\n            name=name,\n            dependencies=dependencies,\n        )\n        return func\n\n    return decorator\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.include_router","title":"include_router","text":"<pre><code>include_router(\n    router,\n    *,\n    prefix=\"\",\n    tags=None,\n    dependencies=None,\n    responses=None,\n    deprecated=None,\n    include_in_schema=True,\n    default_response_class=Default(JSONResponse),\n    callbacks=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Include an <code>APIRouter</code> in the same app.</p> <p>Read more about it in the ReadyAPI docs for Bigger Applications.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.include_router--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI\n\nfrom .users import users_router\n\napp = ReadyAPI()\n\napp.include_router(users_router)\n</code></pre> PARAMETER DESCRIPTION <code>router</code> <p>The <code>APIRouter</code> to include.</p> <p> TYPE: <code>APIRouter</code> </p> <code>prefix</code> <p>An optional path prefix for the router.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>tags</code> <p>A list of tags to be applied to all the path operations in this router.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to all the path operations in this router.</p> <p>Read more about it in the ReadyAPI docs for Bigger Applications - Multiple Files.</p> <p>Example</p> <pre><code>from readyapi import Depends, ReadyAPI\n\nfrom .dependencies import get_token_header\nfrom .internal import admin\n\napp = ReadyAPI()\n\napp.include_router(\n    admin.router,\n    dependencies=[Depends(get_token_header)],\n)\n</code></pre> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>responses</code> <p>Additional responses to be shown in OpenAPI.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Additional Responses in OpenAPI.</p> <p>And in the ReadyAPI docs for Bigger Applications.</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark all the path operations in this router as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\nfrom .internal import old_api\n\napp = ReadyAPI()\n\napp.include_router(\n    old_api.router,\n    deprecated=True,\n)\n</code></pre> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>Include (or not) all the path operations in this router in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\nfrom .internal import old_api\n\napp = ReadyAPI()\n\napp.include_router(\n    old_api.router,\n    include_in_schema=False,\n)\n</code></pre> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>default_response_class</code> <p>Default response class to be used for the path operations in this router.</p> <p>Read more in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import ORJSONResponse\n\nfrom .internal import old_api\n\napp = ReadyAPI()\n\napp.include_router(\n    old_api.router,\n    default_response_class=ORJSONResponse,\n)\n</code></pre> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def include_router(\n    self,\n    router: Annotated[routing.APIRouter, Doc(\"The `APIRouter` to include.\")],\n    *,\n    prefix: Annotated[str, Doc(\"An optional path prefix for the router.\")] = \"\",\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to all the *path operations* in this\n            router.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to all the\n            *path operations* in this router.\n\n            Read more about it in the\n            [ReadyAPI docs for Bigger Applications - Multiple Files](https://readyapi.github.io/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n\n            **Example**\n\n            ```python\n            from readyapi import Depends, ReadyAPI\n\n            from .dependencies import get_token_header\n            from .internal import admin\n\n            app = ReadyAPI()\n\n            app.include_router(\n                admin.router,\n                dependencies=[Depends(get_token_header)],\n            )\n            ```\n            \"\"\"\n        ),\n    ] = None,\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses to be shown in OpenAPI.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Additional Responses in OpenAPI](https://readyapi.github.io/advanced/additional-responses/).\n\n            And in the\n            [ReadyAPI docs for Bigger Applications](https://readyapi.github.io/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark all the *path operations* in this router as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            from .internal import old_api\n\n            app = ReadyAPI()\n\n            app.include_router(\n                old_api.router,\n                deprecated=True,\n            )\n            ```\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include (or not) all the *path operations* in this router in the\n            generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            from .internal import old_api\n\n            app = ReadyAPI()\n\n            app.include_router(\n                old_api.router,\n                include_in_schema=False,\n            )\n            ```\n            \"\"\"\n        ),\n    ] = True,\n    default_response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Default response class to be used for the *path operations* in this\n            router.\n\n            Read more in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#default-response-class).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n            from readyapi.responses import ORJSONResponse\n\n            from .internal import old_api\n\n            app = ReadyAPI()\n\n            app.include_router(\n                old_api.router,\n                default_response_class=ORJSONResponse,\n            )\n            ```\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; None:\n    \"\"\"\n    Include an `APIRouter` in the same app.\n\n    Read more about it in the\n    [ReadyAPI docs for Bigger Applications](https://readyapi.github.io/tutorial/bigger-applications/).\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI\n\n    from .users import users_router\n\n    app = ReadyAPI()\n\n    app.include_router(users_router)\n    ```\n    \"\"\"\n    self.router.include_router(\n        router,\n        prefix=prefix,\n        tags=tags,\n        dependencies=dependencies,\n        responses=responses,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        default_response_class=default_response_class,\n        callbacks=callbacks,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.get","title":"get","text":"<pre><code>get(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP GET operation.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.get--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n@app.get(\"/items/\")\ndef read_items():\n    return [{\"name\": \"Empanada\"}, {\"name\": \"Arepa\"}]\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def get(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.github.io/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.github.io/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.github.io/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.github.io/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP GET operation.\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI\n\n    app = ReadyAPI()\n\n    @app.get(\"/items/\")\n    def read_items():\n        return [{\"name\": \"Empanada\"}, {\"name\": \"Arepa\"}]\n    ```\n    \"\"\"\n    return self.router.get(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.put","title":"put","text":"<pre><code>put(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP PUT operation.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.put--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\napp = ReadyAPI()\n\n@app.put(\"/items/{item_id}\")\ndef replace_item(item_id: str, item: Item):\n    return {\"message\": \"Item replaced\", \"id\": item_id}\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def put(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.github.io/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.github.io/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.github.io/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.github.io/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP PUT operation.\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI\n    from pydantic import BaseModel\n\n    class Item(BaseModel):\n        name: str\n        description: str | None = None\n\n    app = ReadyAPI()\n\n    @app.put(\"/items/{item_id}\")\n    def replace_item(item_id: str, item: Item):\n        return {\"message\": \"Item replaced\", \"id\": item_id}\n    ```\n    \"\"\"\n    return self.router.put(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.post","title":"post","text":"<pre><code>post(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP POST operation.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.post--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\napp = ReadyAPI()\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return {\"message\": \"Item created\"}\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def post(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.github.io/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.github.io/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.github.io/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.github.io/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP POST operation.\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI\n    from pydantic import BaseModel\n\n    class Item(BaseModel):\n        name: str\n        description: str | None = None\n\n    app = ReadyAPI()\n\n    @app.post(\"/items/\")\n    def create_item(item: Item):\n        return {\"message\": \"Item created\"}\n    ```\n    \"\"\"\n    return self.router.post(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.delete","title":"delete","text":"<pre><code>delete(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP DELETE operation.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.delete--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n@app.delete(\"/items/{item_id}\")\ndef delete_item(item_id: str):\n    return {\"message\": \"Item deleted\"}\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def delete(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.github.io/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.github.io/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.github.io/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.github.io/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP DELETE operation.\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI\n\n    app = ReadyAPI()\n\n    @app.delete(\"/items/{item_id}\")\n    def delete_item(item_id: str):\n        return {\"message\": \"Item deleted\"}\n    ```\n    \"\"\"\n    return self.router.delete(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.options","title":"options","text":"<pre><code>options(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP OPTIONS operation.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.options--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n@app.options(\"/items/\")\ndef get_item_options():\n    return {\"additions\": [\"Aji\", \"Guacamole\"]}\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def options(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.github.io/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.github.io/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.github.io/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.github.io/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP OPTIONS operation.\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI\n\n    app = ReadyAPI()\n\n    @app.options(\"/items/\")\n    def get_item_options():\n        return {\"additions\": [\"Aji\", \"Guacamole\"]}\n    ```\n    \"\"\"\n    return self.router.options(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.head","title":"head","text":"<pre><code>head(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP HEAD operation.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.head--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI, Response\n\napp = ReadyAPI()\n\n@app.head(\"/items/\", status_code=204)\ndef get_items_headers(response: Response):\n    response.headers[\"X-Cat-Dog\"] = \"Alone in the world\"\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def head(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.github.io/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.github.io/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.github.io/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.github.io/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP HEAD operation.\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI, Response\n\n    app = ReadyAPI()\n\n    @app.head(\"/items/\", status_code=204)\n    def get_items_headers(response: Response):\n        response.headers[\"X-Cat-Dog\"] = \"Alone in the world\"\n    ```\n    \"\"\"\n    return self.router.head(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.patch","title":"patch","text":"<pre><code>patch(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP PATCH operation.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.patch--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\napp = ReadyAPI()\n\n@app.patch(\"/items/\")\ndef update_item(item: Item):\n    return {\"message\": \"Item updated in place\"}\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def patch(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.github.io/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.github.io/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.github.io/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.github.io/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP PATCH operation.\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI\n    from pydantic import BaseModel\n\n    class Item(BaseModel):\n        name: str\n        description: str | None = None\n\n    app = ReadyAPI()\n\n    @app.patch(\"/items/\")\n    def update_item(item: Item):\n        return {\"message\": \"Item updated in place\"}\n    ```\n    \"\"\"\n    return self.router.patch(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.trace","title":"trace","text":"<pre><code>trace(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP TRACE operation.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.trace--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n@app.put(\"/items/{item_id}\")\ndef trace_item(item_id: str):\n    return None\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def trace(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.github.io/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.github.io/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.github.io/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.github.io/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP TRACE operation.\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI\n\n    app = ReadyAPI()\n\n    @app.put(\"/items/{item_id}\")\n    def trace_item(item_id: str):\n        return None\n    ```\n    \"\"\"\n    return self.router.trace(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.on_event","title":"on_event","text":"<pre><code>on_event(event_type)\n</code></pre> <p>Add an event handler for the application.</p> <p><code>on_event</code> is deprecated, use <code>lifespan</code> event handlers instead.</p> <p>Read more about it in the ReadyAPI docs for Lifespan Events.</p> PARAMETER DESCRIPTION <code>event_type</code> <p>The type of event. <code>startup</code> or <code>shutdown</code>.</p> <p> TYPE: <code>str</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>@deprecated(\n    \"\"\"\n    on_event is deprecated, use lifespan event handlers instead.\n\n    Read more about it in the\n    [ReadyAPI docs for Lifespan Events](https://readyapi.github.io/advanced/events/).\n    \"\"\"\n)\ndef on_event(\n    self,\n    event_type: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The type of event. `startup` or `shutdown`.\n            \"\"\"\n        ),\n    ],\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add an event handler for the application.\n\n    `on_event` is deprecated, use `lifespan` event handlers instead.\n\n    Read more about it in the\n    [ReadyAPI docs for Lifespan Events](https://readyapi.github.io/advanced/events/#alternative-events-deprecated).\n    \"\"\"\n    return self.router.on_event(event_type)\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.middleware","title":"middleware","text":"<pre><code>middleware(middleware_type)\n</code></pre> <p>Add a middleware to the application.</p> <p>Read more about it in the ReadyAPI docs for Middleware.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.middleware--example","title":"Example","text":"<pre><code>import time\n\nfrom readyapi import ReadyAPI, Request\n\napp = ReadyAPI()\n\n\n@app.middleware(\"http\")\nasync def add_process_time_header(request: Request, call_next):\n    start_time = time.time()\n    response = await call_next(request)\n    process_time = time.time() - start_time\n    response.headers[\"X-Process-Time\"] = str(process_time)\n    return response\n</code></pre> PARAMETER DESCRIPTION <code>middleware_type</code> <p>The type of middleware. Currently only supports <code>http</code>.</p> <p> TYPE: <code>str</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def middleware(\n    self,\n    middleware_type: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The type of middleware. Currently only supports `http`.\n            \"\"\"\n        ),\n    ],\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a middleware to the application.\n\n    Read more about it in the\n    [ReadyAPI docs for Middleware](https://readyapi.github.io/tutorial/middleware/).\n\n    ## Example\n\n    ```python\n    import time\n\n    from readyapi import ReadyAPI, Request\n\n    app = ReadyAPI()\n\n\n    @app.middleware(\"http\")\n    async def add_process_time_header(request: Request, call_next):\n        start_time = time.time()\n        response = await call_next(request)\n        process_time = time.time() - start_time\n        response.headers[\"X-Process-Time\"] = str(process_time)\n        return response\n    ```\n    \"\"\"\n\n    def decorator(func: DecoratedCallable) -&gt; DecoratedCallable:\n        self.add_middleware(BaseHTTPMiddleware, dispatch=func)\n        return func\n\n    return decorator\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.exception_handler","title":"exception_handler","text":"<pre><code>exception_handler(exc_class_or_status_code)\n</code></pre> <p>Add an exception handler to the app.</p> <p>Read more about it in the ReadyAPI docs for Handling Errors.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.exception_handler--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI, Request\nfrom readyapi.responses import JSONResponse\n\n\nclass UnicornException(Exception):\n    def __init__(self, name: str):\n        self.name = name\n\n\napp = ReadyAPI()\n\n\n@app.exception_handler(UnicornException)\nasync def unicorn_exception_handler(request: Request, exc: UnicornException):\n    return JSONResponse(\n        status_code=418,\n        content={\"message\": f\"Oops! {exc.name} did something. There goes a rainbow...\"},\n    )\n</code></pre> PARAMETER DESCRIPTION <code>exc_class_or_status_code</code> <p>The Exception class this would handle, or a status code.</p> <p> TYPE: <code>Union[int, Type[Exception]]</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def exception_handler(\n    self,\n    exc_class_or_status_code: Annotated[\n        Union[int, Type[Exception]],\n        Doc(\n            \"\"\"\n            The Exception class this would handle, or a status code.\n            \"\"\"\n        ),\n    ],\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add an exception handler to the app.\n\n    Read more about it in the\n    [ReadyAPI docs for Handling Errors](https://readyapi.github.io/tutorial/handling-errors/).\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI, Request\n    from readyapi.responses import JSONResponse\n\n\n    class UnicornException(Exception):\n        def __init__(self, name: str):\n            self.name = name\n\n\n    app = ReadyAPI()\n\n\n    @app.exception_handler(UnicornException)\n    async def unicorn_exception_handler(request: Request, exc: UnicornException):\n        return JSONResponse(\n            status_code=418,\n            content={\"message\": f\"Oops! {exc.name} did something. There goes a rainbow...\"},\n        )\n    ```\n    \"\"\"\n\n    def decorator(func: DecoratedCallable) -&gt; DecoratedCallable:\n        self.add_exception_handler(exc_class_or_status_code, func)\n        return func\n\n    return decorator\n</code></pre>"},{"location":"reference/parameters/","title":"Request Parameters","text":"<p>Here's the reference information for the request parameters.</p> <p>These are the special functions that you can put in path operation function parameters or dependency functions with <code>Annotated</code> to get data from the request.</p> <p>It includes:</p> <ul> <li><code>Query()</code></li> <li><code>Path()</code></li> <li><code>Body()</code></li> <li><code>Cookie()</code></li> <li><code>Header()</code></li> <li><code>Form()</code></li> <li><code>File()</code></li> </ul> <p>You can import them all directly from <code>readyapi</code>:</p> <pre><code>from readyapi import Body, Cookie, File, Form, Header, Path, Query\n</code></pre>"},{"location":"reference/parameters/#readyapi.Query","title":"readyapi.Query","text":"<pre><code>Query(\n    default=Undefined,\n    *,\n    default_factory=_Unset,\n    alias=None,\n    alias_priority=_Unset,\n    validation_alias=None,\n    serialization_alias=None,\n    title=None,\n    description=None,\n    gt=None,\n    ge=None,\n    lt=None,\n    le=None,\n    min_length=None,\n    max_length=None,\n    pattern=None,\n    regex=None,\n    discriminator=None,\n    strict=_Unset,\n    multiple_of=_Unset,\n    allow_inf_nan=_Unset,\n    max_digits=_Unset,\n    decimal_places=_Unset,\n    examples=None,\n    example=_Unset,\n    openapi_examples=None,\n    deprecated=None,\n    include_in_schema=True,\n    json_schema_extra=None,\n    **extra\n)\n</code></pre> PARAMETER DESCRIPTION <code>default</code> <p>Default value if the parameter field is not set.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Undefined</code> </p> <code>default_factory</code> <p>A callable to generate the default value.</p> <p>This doesn't affect <code>Path</code> parameters as the value is always required. The parameter is available only for compatibility.</p> <p> TYPE: <code>Union[Callable[[], Any], None]</code> DEFAULT: <code>_Unset</code> </p> <code>alias</code> <p>An alternative name for the parameter field.</p> <p>This will be used to extract the data and for the generated OpenAPI. It is particularly useful when you can't use the name you want because it is a Python reserved keyword or similar.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>alias_priority</code> <p>Priority of the alias. This affects whether an alias generator is used.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>validation_alias</code> <p>'Whitelist' validation step. The parameter field will be the single one allowed by the alias or set of aliases defined.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>serialization_alias</code> <p>'Blacklist' validation step. The vanilla parameter field will be the single one of the alias' or set of aliases' fields and all the other fields will be ignored at serialization time.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>title</code> <p>Human-readable title.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Human-readable description.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>gt</code> <p>Greater than. If set, value must be greater than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>ge</code> <p>Greater than or equal. If set, value must be greater than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>lt</code> <p>Less than. If set, value must be less than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>le</code> <p>Less than or equal. If set, value must be less than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>min_length</code> <p>Minimum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>max_length</code> <p>Maximum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>pattern</code> <p>RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>regex</code> <p>Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use <code>pattern</code> instead. RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>discriminator</code> <p>Parameter field name for discriminating the type in a tagged union.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>strict</code> <p>If <code>True</code>, strict validation is applied to the field.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>multiple_of</code> <p>Value must be a multiple of this. Only applicable to numbers.</p> <p> TYPE: <code>Union[float, None]</code> DEFAULT: <code>_Unset</code> </p> <code>allow_inf_nan</code> <p>Allow <code>inf</code>, <code>-inf</code>, <code>nan</code>. Only applicable to numbers.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>max_digits</code> <p>Maximum number of allow digits for strings.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>decimal_places</code> <p>Maximum number of decimal places allowed for numbers.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>examples</code> <p>Example values for this field.</p> <p> TYPE: <code>Optional[List[Any]]</code> DEFAULT: <code>None</code> </p> <code>example</code> <p>Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, although still supported. Use examples instead. </p> <p> TYPE: <code>Optional[Any]</code> DEFAULT: <code>_Unset</code> </p> <code>openapi_examples</code> <p>OpenAPI-specific examples.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Swagger UI (that provides the <code>/docs</code> interface) has better support for the OpenAPI-specific examples than the JSON Schema <code>examples</code>, that's the main use case for this.</p> <p>Read more about it in the ReadyAPI docs for Declare Request Example Data.</p> <p> TYPE: <code>Optional[Dict[str, Example]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this parameter field as deprecated.</p> <p>It will affect the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Union[deprecated, str, bool, None]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>To include (or not) this parameter field in the generated OpenAPI. You probably don't need it, but it's available.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>json_schema_extra</code> <p>Any additional JSON schema data.</p> <p> TYPE: <code>Union[Dict[str, Any], None]</code> DEFAULT: <code>None</code> </p> <code>**extra</code> <p>The <code>extra</code> kwargs is deprecated. Use <code>json_schema_extra</code> instead. Include extra fields used by the JSON Schema.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>readyapi/param_functions.py</code> <pre><code>def Query(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n            \"\"\"\n        ),\n    ] = Undefined,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    # TODO: update when deprecating Pydantic v1, import these types\n    # validation_alias: str | AliasPath | AliasChoices | None\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [ReadyAPI docs for Declare Request Example Data](https://readyapi.github.io/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -&gt; Any:\n    return params.Query(\n        default=default,\n        default_factory=default_factory,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )\n</code></pre>"},{"location":"reference/parameters/#readyapi.Path","title":"readyapi.Path","text":"<pre><code>Path(\n    default=...,\n    *,\n    default_factory=_Unset,\n    alias=None,\n    alias_priority=_Unset,\n    validation_alias=None,\n    serialization_alias=None,\n    title=None,\n    description=None,\n    gt=None,\n    ge=None,\n    lt=None,\n    le=None,\n    min_length=None,\n    max_length=None,\n    pattern=None,\n    regex=None,\n    discriminator=None,\n    strict=_Unset,\n    multiple_of=_Unset,\n    allow_inf_nan=_Unset,\n    max_digits=_Unset,\n    decimal_places=_Unset,\n    examples=None,\n    example=_Unset,\n    openapi_examples=None,\n    deprecated=None,\n    include_in_schema=True,\n    json_schema_extra=None,\n    **extra\n)\n</code></pre> <p>Declare a path parameter for a path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Parameters and Numeric Validations.</p> <pre><code>from typing import Annotated\n\nfrom readyapi import ReadyAPI, Path\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n):\n    return {\"item_id\": item_id}\n</code></pre> PARAMETER DESCRIPTION <code>default</code> <p>Default value if the parameter field is not set.</p> <p>This doesn't affect <code>Path</code> parameters as the value is always required. The parameter is available only for compatibility.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>...</code> </p> <code>default_factory</code> <p>A callable to generate the default value.</p> <p>This doesn't affect <code>Path</code> parameters as the value is always required. The parameter is available only for compatibility.</p> <p> TYPE: <code>Union[Callable[[], Any], None]</code> DEFAULT: <code>_Unset</code> </p> <code>alias</code> <p>An alternative name for the parameter field.</p> <p>This will be used to extract the data and for the generated OpenAPI. It is particularly useful when you can't use the name you want because it is a Python reserved keyword or similar.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>alias_priority</code> <p>Priority of the alias. This affects whether an alias generator is used.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>validation_alias</code> <p>'Whitelist' validation step. The parameter field will be the single one allowed by the alias or set of aliases defined.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>serialization_alias</code> <p>'Blacklist' validation step. The vanilla parameter field will be the single one of the alias' or set of aliases' fields and all the other fields will be ignored at serialization time.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>title</code> <p>Human-readable title.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Human-readable description.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>gt</code> <p>Greater than. If set, value must be greater than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>ge</code> <p>Greater than or equal. If set, value must be greater than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>lt</code> <p>Less than. If set, value must be less than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>le</code> <p>Less than or equal. If set, value must be less than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>min_length</code> <p>Minimum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>max_length</code> <p>Maximum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>pattern</code> <p>RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>regex</code> <p>Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use <code>pattern</code> instead. RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>discriminator</code> <p>Parameter field name for discriminating the type in a tagged union.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>strict</code> <p>If <code>True</code>, strict validation is applied to the field.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>multiple_of</code> <p>Value must be a multiple of this. Only applicable to numbers.</p> <p> TYPE: <code>Union[float, None]</code> DEFAULT: <code>_Unset</code> </p> <code>allow_inf_nan</code> <p>Allow <code>inf</code>, <code>-inf</code>, <code>nan</code>. Only applicable to numbers.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>max_digits</code> <p>Maximum number of allow digits for strings.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>decimal_places</code> <p>Maximum number of decimal places allowed for numbers.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>examples</code> <p>Example values for this field.</p> <p> TYPE: <code>Optional[List[Any]]</code> DEFAULT: <code>None</code> </p> <code>example</code> <p>Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, although still supported. Use examples instead. </p> <p> TYPE: <code>Optional[Any]</code> DEFAULT: <code>_Unset</code> </p> <code>openapi_examples</code> <p>OpenAPI-specific examples.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Swagger UI (that provides the <code>/docs</code> interface) has better support for the OpenAPI-specific examples than the JSON Schema <code>examples</code>, that's the main use case for this.</p> <p>Read more about it in the ReadyAPI docs for Declare Request Example Data.</p> <p> TYPE: <code>Optional[Dict[str, Example]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this parameter field as deprecated.</p> <p>It will affect the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Union[deprecated, str, bool, None]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>To include (or not) this parameter field in the generated OpenAPI. You probably don't need it, but it's available.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>json_schema_extra</code> <p>Any additional JSON schema data.</p> <p> TYPE: <code>Union[Dict[str, Any], None]</code> DEFAULT: <code>None</code> </p> <code>**extra</code> <p>The <code>extra</code> kwargs is deprecated. Use <code>json_schema_extra</code> instead. Include extra fields used by the JSON Schema.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>readyapi/param_functions.py</code> <pre><code>def Path(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = ...,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    # TODO: update when deprecating Pydantic v1, import these types\n    # validation_alias: str | AliasPath | AliasChoices | None\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [ReadyAPI docs for Declare Request Example Data](https://readyapi.github.io/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -&gt; Any:\n    \"\"\"\n    Declare a path parameter for a *path operation*.\n\n    Read more about it in the\n    [ReadyAPI docs for Path Parameters and Numeric Validations](https://readyapi.github.io/tutorial/path-params-numeric-validations/).\n\n    ```python\n    from typing import Annotated\n\n    from readyapi import ReadyAPI, Path\n\n    app = ReadyAPI()\n\n\n    @app.get(\"/items/{item_id}\")\n    async def read_items(\n        item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    ):\n        return {\"item_id\": item_id}\n    ```\n    \"\"\"\n    return params.Path(\n        default=default,\n        default_factory=default_factory,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )\n</code></pre>"},{"location":"reference/parameters/#readyapi.Body","title":"readyapi.Body","text":"<pre><code>Body(\n    default=Undefined,\n    *,\n    default_factory=_Unset,\n    embed=None,\n    media_type=\"application/json\",\n    alias=None,\n    alias_priority=_Unset,\n    validation_alias=None,\n    serialization_alias=None,\n    title=None,\n    description=None,\n    gt=None,\n    ge=None,\n    lt=None,\n    le=None,\n    min_length=None,\n    max_length=None,\n    pattern=None,\n    regex=None,\n    discriminator=None,\n    strict=_Unset,\n    multiple_of=_Unset,\n    allow_inf_nan=_Unset,\n    max_digits=_Unset,\n    decimal_places=_Unset,\n    examples=None,\n    example=_Unset,\n    openapi_examples=None,\n    deprecated=None,\n    include_in_schema=True,\n    json_schema_extra=None,\n    **extra\n)\n</code></pre> PARAMETER DESCRIPTION <code>default</code> <p>Default value if the parameter field is not set.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Undefined</code> </p> <code>default_factory</code> <p>A callable to generate the default value.</p> <p>This doesn't affect <code>Path</code> parameters as the value is always required. The parameter is available only for compatibility.</p> <p> TYPE: <code>Union[Callable[[], Any], None]</code> DEFAULT: <code>_Unset</code> </p> <code>embed</code> <p>When <code>embed</code> is <code>True</code>, the parameter will be expected in a JSON body as a key instead of being the JSON body itself.</p> <p>This happens automatically when more than one <code>Body</code> parameter is declared.</p> <p>Read more about it in the ReadyAPI docs for Body - Multiple Parameters.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p>The media type of this parameter field. Changing it would affect the generated OpenAPI, but currently it doesn't affect the parsing of the data.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'application/json'</code> </p> <code>alias</code> <p>An alternative name for the parameter field.</p> <p>This will be used to extract the data and for the generated OpenAPI. It is particularly useful when you can't use the name you want because it is a Python reserved keyword or similar.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>alias_priority</code> <p>Priority of the alias. This affects whether an alias generator is used.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>validation_alias</code> <p>'Whitelist' validation step. The parameter field will be the single one allowed by the alias or set of aliases defined.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>serialization_alias</code> <p>'Blacklist' validation step. The vanilla parameter field will be the single one of the alias' or set of aliases' fields and all the other fields will be ignored at serialization time.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>title</code> <p>Human-readable title.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Human-readable description.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>gt</code> <p>Greater than. If set, value must be greater than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>ge</code> <p>Greater than or equal. If set, value must be greater than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>lt</code> <p>Less than. If set, value must be less than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>le</code> <p>Less than or equal. If set, value must be less than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>min_length</code> <p>Minimum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>max_length</code> <p>Maximum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>pattern</code> <p>RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>regex</code> <p>Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use <code>pattern</code> instead. RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>discriminator</code> <p>Parameter field name for discriminating the type in a tagged union.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>strict</code> <p>If <code>True</code>, strict validation is applied to the field.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>multiple_of</code> <p>Value must be a multiple of this. Only applicable to numbers.</p> <p> TYPE: <code>Union[float, None]</code> DEFAULT: <code>_Unset</code> </p> <code>allow_inf_nan</code> <p>Allow <code>inf</code>, <code>-inf</code>, <code>nan</code>. Only applicable to numbers.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>max_digits</code> <p>Maximum number of allow digits for strings.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>decimal_places</code> <p>Maximum number of decimal places allowed for numbers.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>examples</code> <p>Example values for this field.</p> <p> TYPE: <code>Optional[List[Any]]</code> DEFAULT: <code>None</code> </p> <code>example</code> <p>Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, although still supported. Use examples instead. </p> <p> TYPE: <code>Optional[Any]</code> DEFAULT: <code>_Unset</code> </p> <code>openapi_examples</code> <p>OpenAPI-specific examples.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Swagger UI (that provides the <code>/docs</code> interface) has better support for the OpenAPI-specific examples than the JSON Schema <code>examples</code>, that's the main use case for this.</p> <p>Read more about it in the ReadyAPI docs for Declare Request Example Data.</p> <p> TYPE: <code>Optional[Dict[str, Example]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this parameter field as deprecated.</p> <p>It will affect the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Union[deprecated, str, bool, None]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>To include (or not) this parameter field in the generated OpenAPI. You probably don't need it, but it's available.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>json_schema_extra</code> <p>Any additional JSON schema data.</p> <p> TYPE: <code>Union[Dict[str, Any], None]</code> DEFAULT: <code>None</code> </p> <code>**extra</code> <p>The <code>extra</code> kwargs is deprecated. Use <code>json_schema_extra</code> instead. Include extra fields used by the JSON Schema.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>readyapi/param_functions.py</code> <pre><code>def Body(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n            \"\"\"\n        ),\n    ] = Undefined,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    embed: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            When `embed` is `True`, the parameter will be expected in a JSON body as a\n            key instead of being the JSON body itself.\n\n            This happens automatically when more than one `Body` parameter is declared.\n\n            Read more about it in the\n            [ReadyAPI docs for Body - Multiple Parameters](https://readyapi.github.io/tutorial/body-multiple-params/#embed-a-single-body-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    media_type: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The media type of this parameter field. Changing it would affect the\n            generated OpenAPI, but currently it doesn't affect the parsing of the data.\n            \"\"\"\n        ),\n    ] = \"application/json\",\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    # TODO: update when deprecating Pydantic v1, import these types\n    # validation_alias: str | AliasPath | AliasChoices | None\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [ReadyAPI docs for Declare Request Example Data](https://readyapi.github.io/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -&gt; Any:\n    return params.Body(\n        default=default,\n        default_factory=default_factory,\n        embed=embed,\n        media_type=media_type,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )\n</code></pre>"},{"location":"reference/parameters/#readyapi.Cookie","title":"readyapi.Cookie","text":"<pre><code>Cookie(\n    default=Undefined,\n    *,\n    default_factory=_Unset,\n    alias=None,\n    alias_priority=_Unset,\n    validation_alias=None,\n    serialization_alias=None,\n    title=None,\n    description=None,\n    gt=None,\n    ge=None,\n    lt=None,\n    le=None,\n    min_length=None,\n    max_length=None,\n    pattern=None,\n    regex=None,\n    discriminator=None,\n    strict=_Unset,\n    multiple_of=_Unset,\n    allow_inf_nan=_Unset,\n    max_digits=_Unset,\n    decimal_places=_Unset,\n    examples=None,\n    example=_Unset,\n    openapi_examples=None,\n    deprecated=None,\n    include_in_schema=True,\n    json_schema_extra=None,\n    **extra\n)\n</code></pre> PARAMETER DESCRIPTION <code>default</code> <p>Default value if the parameter field is not set.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Undefined</code> </p> <code>default_factory</code> <p>A callable to generate the default value.</p> <p>This doesn't affect <code>Path</code> parameters as the value is always required. The parameter is available only for compatibility.</p> <p> TYPE: <code>Union[Callable[[], Any], None]</code> DEFAULT: <code>_Unset</code> </p> <code>alias</code> <p>An alternative name for the parameter field.</p> <p>This will be used to extract the data and for the generated OpenAPI. It is particularly useful when you can't use the name you want because it is a Python reserved keyword or similar.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>alias_priority</code> <p>Priority of the alias. This affects whether an alias generator is used.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>validation_alias</code> <p>'Whitelist' validation step. The parameter field will be the single one allowed by the alias or set of aliases defined.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>serialization_alias</code> <p>'Blacklist' validation step. The vanilla parameter field will be the single one of the alias' or set of aliases' fields and all the other fields will be ignored at serialization time.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>title</code> <p>Human-readable title.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Human-readable description.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>gt</code> <p>Greater than. If set, value must be greater than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>ge</code> <p>Greater than or equal. If set, value must be greater than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>lt</code> <p>Less than. If set, value must be less than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>le</code> <p>Less than or equal. If set, value must be less than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>min_length</code> <p>Minimum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>max_length</code> <p>Maximum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>pattern</code> <p>RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>regex</code> <p>Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use <code>pattern</code> instead. RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>discriminator</code> <p>Parameter field name for discriminating the type in a tagged union.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>strict</code> <p>If <code>True</code>, strict validation is applied to the field.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>multiple_of</code> <p>Value must be a multiple of this. Only applicable to numbers.</p> <p> TYPE: <code>Union[float, None]</code> DEFAULT: <code>_Unset</code> </p> <code>allow_inf_nan</code> <p>Allow <code>inf</code>, <code>-inf</code>, <code>nan</code>. Only applicable to numbers.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>max_digits</code> <p>Maximum number of allow digits for strings.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>decimal_places</code> <p>Maximum number of decimal places allowed for numbers.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>examples</code> <p>Example values for this field.</p> <p> TYPE: <code>Optional[List[Any]]</code> DEFAULT: <code>None</code> </p> <code>example</code> <p>Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, although still supported. Use examples instead. </p> <p> TYPE: <code>Optional[Any]</code> DEFAULT: <code>_Unset</code> </p> <code>openapi_examples</code> <p>OpenAPI-specific examples.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Swagger UI (that provides the <code>/docs</code> interface) has better support for the OpenAPI-specific examples than the JSON Schema <code>examples</code>, that's the main use case for this.</p> <p>Read more about it in the ReadyAPI docs for Declare Request Example Data.</p> <p> TYPE: <code>Optional[Dict[str, Example]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this parameter field as deprecated.</p> <p>It will affect the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Union[deprecated, str, bool, None]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>To include (or not) this parameter field in the generated OpenAPI. You probably don't need it, but it's available.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>json_schema_extra</code> <p>Any additional JSON schema data.</p> <p> TYPE: <code>Union[Dict[str, Any], None]</code> DEFAULT: <code>None</code> </p> <code>**extra</code> <p>The <code>extra</code> kwargs is deprecated. Use <code>json_schema_extra</code> instead. Include extra fields used by the JSON Schema.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>readyapi/param_functions.py</code> <pre><code>def Cookie(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n            \"\"\"\n        ),\n    ] = Undefined,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    # TODO: update when deprecating Pydantic v1, import these types\n    # validation_alias: str | AliasPath | AliasChoices | None\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [ReadyAPI docs for Declare Request Example Data](https://readyapi.github.io/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -&gt; Any:\n    return params.Cookie(\n        default=default,\n        default_factory=default_factory,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )\n</code></pre>"},{"location":"reference/parameters/#readyapi.Header","title":"readyapi.Header","text":"<pre><code>Header(\n    default=Undefined,\n    *,\n    default_factory=_Unset,\n    alias=None,\n    alias_priority=_Unset,\n    validation_alias=None,\n    serialization_alias=None,\n    convert_underscores=True,\n    title=None,\n    description=None,\n    gt=None,\n    ge=None,\n    lt=None,\n    le=None,\n    min_length=None,\n    max_length=None,\n    pattern=None,\n    regex=None,\n    discriminator=None,\n    strict=_Unset,\n    multiple_of=_Unset,\n    allow_inf_nan=_Unset,\n    max_digits=_Unset,\n    decimal_places=_Unset,\n    examples=None,\n    example=_Unset,\n    openapi_examples=None,\n    deprecated=None,\n    include_in_schema=True,\n    json_schema_extra=None,\n    **extra\n)\n</code></pre> PARAMETER DESCRIPTION <code>default</code> <p>Default value if the parameter field is not set.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Undefined</code> </p> <code>default_factory</code> <p>A callable to generate the default value.</p> <p>This doesn't affect <code>Path</code> parameters as the value is always required. The parameter is available only for compatibility.</p> <p> TYPE: <code>Union[Callable[[], Any], None]</code> DEFAULT: <code>_Unset</code> </p> <code>alias</code> <p>An alternative name for the parameter field.</p> <p>This will be used to extract the data and for the generated OpenAPI. It is particularly useful when you can't use the name you want because it is a Python reserved keyword or similar.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>alias_priority</code> <p>Priority of the alias. This affects whether an alias generator is used.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>validation_alias</code> <p>'Whitelist' validation step. The parameter field will be the single one allowed by the alias or set of aliases defined.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>serialization_alias</code> <p>'Blacklist' validation step. The vanilla parameter field will be the single one of the alias' or set of aliases' fields and all the other fields will be ignored at serialization time.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>convert_underscores</code> <p>Automatically convert underscores to hyphens in the parameter field name.</p> <p>Read more about it in the ReadyAPI docs for Header Parameters</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>title</code> <p>Human-readable title.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Human-readable description.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>gt</code> <p>Greater than. If set, value must be greater than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>ge</code> <p>Greater than or equal. If set, value must be greater than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>lt</code> <p>Less than. If set, value must be less than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>le</code> <p>Less than or equal. If set, value must be less than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>min_length</code> <p>Minimum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>max_length</code> <p>Maximum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>pattern</code> <p>RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>regex</code> <p>Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use <code>pattern</code> instead. RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>discriminator</code> <p>Parameter field name for discriminating the type in a tagged union.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>strict</code> <p>If <code>True</code>, strict validation is applied to the field.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>multiple_of</code> <p>Value must be a multiple of this. Only applicable to numbers.</p> <p> TYPE: <code>Union[float, None]</code> DEFAULT: <code>_Unset</code> </p> <code>allow_inf_nan</code> <p>Allow <code>inf</code>, <code>-inf</code>, <code>nan</code>. Only applicable to numbers.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>max_digits</code> <p>Maximum number of allow digits for strings.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>decimal_places</code> <p>Maximum number of decimal places allowed for numbers.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>examples</code> <p>Example values for this field.</p> <p> TYPE: <code>Optional[List[Any]]</code> DEFAULT: <code>None</code> </p> <code>example</code> <p>Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, although still supported. Use examples instead. </p> <p> TYPE: <code>Optional[Any]</code> DEFAULT: <code>_Unset</code> </p> <code>openapi_examples</code> <p>OpenAPI-specific examples.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Swagger UI (that provides the <code>/docs</code> interface) has better support for the OpenAPI-specific examples than the JSON Schema <code>examples</code>, that's the main use case for this.</p> <p>Read more about it in the ReadyAPI docs for Declare Request Example Data.</p> <p> TYPE: <code>Optional[Dict[str, Example]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this parameter field as deprecated.</p> <p>It will affect the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Union[deprecated, str, bool, None]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>To include (or not) this parameter field in the generated OpenAPI. You probably don't need it, but it's available.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>json_schema_extra</code> <p>Any additional JSON schema data.</p> <p> TYPE: <code>Union[Dict[str, Any], None]</code> DEFAULT: <code>None</code> </p> <code>**extra</code> <p>The <code>extra</code> kwargs is deprecated. Use <code>json_schema_extra</code> instead. Include extra fields used by the JSON Schema.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>readyapi/param_functions.py</code> <pre><code>def Header(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n            \"\"\"\n        ),\n    ] = Undefined,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    # TODO: update when deprecating Pydantic v1, import these types\n    # validation_alias: str | AliasPath | AliasChoices | None\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    convert_underscores: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Automatically convert underscores to hyphens in the parameter field name.\n\n            Read more about it in the\n            [ReadyAPI docs for Header Parameters](https://readyapi.github.io/tutorial/header-params/#automatic-conversion)\n            \"\"\"\n        ),\n    ] = True,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [ReadyAPI docs for Declare Request Example Data](https://readyapi.github.io/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -&gt; Any:\n    return params.Header(\n        default=default,\n        default_factory=default_factory,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        convert_underscores=convert_underscores,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )\n</code></pre>"},{"location":"reference/parameters/#readyapi.Form","title":"readyapi.Form","text":"<pre><code>Form(\n    default=Undefined,\n    *,\n    default_factory=_Unset,\n    media_type=\"application/x-www-form-urlencoded\",\n    alias=None,\n    alias_priority=_Unset,\n    validation_alias=None,\n    serialization_alias=None,\n    title=None,\n    description=None,\n    gt=None,\n    ge=None,\n    lt=None,\n    le=None,\n    min_length=None,\n    max_length=None,\n    pattern=None,\n    regex=None,\n    discriminator=None,\n    strict=_Unset,\n    multiple_of=_Unset,\n    allow_inf_nan=_Unset,\n    max_digits=_Unset,\n    decimal_places=_Unset,\n    examples=None,\n    example=_Unset,\n    openapi_examples=None,\n    deprecated=None,\n    include_in_schema=True,\n    json_schema_extra=None,\n    **extra\n)\n</code></pre> PARAMETER DESCRIPTION <code>default</code> <p>Default value if the parameter field is not set.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Undefined</code> </p> <code>default_factory</code> <p>A callable to generate the default value.</p> <p>This doesn't affect <code>Path</code> parameters as the value is always required. The parameter is available only for compatibility.</p> <p> TYPE: <code>Union[Callable[[], Any], None]</code> DEFAULT: <code>_Unset</code> </p> <code>media_type</code> <p>The media type of this parameter field. Changing it would affect the generated OpenAPI, but currently it doesn't affect the parsing of the data.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'application/x-www-form-urlencoded'</code> </p> <code>alias</code> <p>An alternative name for the parameter field.</p> <p>This will be used to extract the data and for the generated OpenAPI. It is particularly useful when you can't use the name you want because it is a Python reserved keyword or similar.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>alias_priority</code> <p>Priority of the alias. This affects whether an alias generator is used.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>validation_alias</code> <p>'Whitelist' validation step. The parameter field will be the single one allowed by the alias or set of aliases defined.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>serialization_alias</code> <p>'Blacklist' validation step. The vanilla parameter field will be the single one of the alias' or set of aliases' fields and all the other fields will be ignored at serialization time.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>title</code> <p>Human-readable title.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Human-readable description.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>gt</code> <p>Greater than. If set, value must be greater than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>ge</code> <p>Greater than or equal. If set, value must be greater than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>lt</code> <p>Less than. If set, value must be less than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>le</code> <p>Less than or equal. If set, value must be less than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>min_length</code> <p>Minimum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>max_length</code> <p>Maximum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>pattern</code> <p>RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>regex</code> <p>Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use <code>pattern</code> instead. RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>discriminator</code> <p>Parameter field name for discriminating the type in a tagged union.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>strict</code> <p>If <code>True</code>, strict validation is applied to the field.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>multiple_of</code> <p>Value must be a multiple of this. Only applicable to numbers.</p> <p> TYPE: <code>Union[float, None]</code> DEFAULT: <code>_Unset</code> </p> <code>allow_inf_nan</code> <p>Allow <code>inf</code>, <code>-inf</code>, <code>nan</code>. Only applicable to numbers.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>max_digits</code> <p>Maximum number of allow digits for strings.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>decimal_places</code> <p>Maximum number of decimal places allowed for numbers.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>examples</code> <p>Example values for this field.</p> <p> TYPE: <code>Optional[List[Any]]</code> DEFAULT: <code>None</code> </p> <code>example</code> <p>Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, although still supported. Use examples instead. </p> <p> TYPE: <code>Optional[Any]</code> DEFAULT: <code>_Unset</code> </p> <code>openapi_examples</code> <p>OpenAPI-specific examples.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Swagger UI (that provides the <code>/docs</code> interface) has better support for the OpenAPI-specific examples than the JSON Schema <code>examples</code>, that's the main use case for this.</p> <p>Read more about it in the ReadyAPI docs for Declare Request Example Data.</p> <p> TYPE: <code>Optional[Dict[str, Example]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this parameter field as deprecated.</p> <p>It will affect the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Union[deprecated, str, bool, None]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>To include (or not) this parameter field in the generated OpenAPI. You probably don't need it, but it's available.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>json_schema_extra</code> <p>Any additional JSON schema data.</p> <p> TYPE: <code>Union[Dict[str, Any], None]</code> DEFAULT: <code>None</code> </p> <code>**extra</code> <p>The <code>extra</code> kwargs is deprecated. Use <code>json_schema_extra</code> instead. Include extra fields used by the JSON Schema.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>readyapi/param_functions.py</code> <pre><code>def Form(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n            \"\"\"\n        ),\n    ] = Undefined,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    media_type: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The media type of this parameter field. Changing it would affect the\n            generated OpenAPI, but currently it doesn't affect the parsing of the data.\n            \"\"\"\n        ),\n    ] = \"application/x-www-form-urlencoded\",\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    # TODO: update when deprecating Pydantic v1, import these types\n    # validation_alias: str | AliasPath | AliasChoices | None\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [ReadyAPI docs for Declare Request Example Data](https://readyapi.github.io/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -&gt; Any:\n    return params.Form(\n        default=default,\n        default_factory=default_factory,\n        media_type=media_type,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )\n</code></pre>"},{"location":"reference/parameters/#readyapi.File","title":"readyapi.File","text":"<pre><code>File(\n    default=Undefined,\n    *,\n    default_factory=_Unset,\n    media_type=\"multipart/form-data\",\n    alias=None,\n    alias_priority=_Unset,\n    validation_alias=None,\n    serialization_alias=None,\n    title=None,\n    description=None,\n    gt=None,\n    ge=None,\n    lt=None,\n    le=None,\n    min_length=None,\n    max_length=None,\n    pattern=None,\n    regex=None,\n    discriminator=None,\n    strict=_Unset,\n    multiple_of=_Unset,\n    allow_inf_nan=_Unset,\n    max_digits=_Unset,\n    decimal_places=_Unset,\n    examples=None,\n    example=_Unset,\n    openapi_examples=None,\n    deprecated=None,\n    include_in_schema=True,\n    json_schema_extra=None,\n    **extra\n)\n</code></pre> PARAMETER DESCRIPTION <code>default</code> <p>Default value if the parameter field is not set.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Undefined</code> </p> <code>default_factory</code> <p>A callable to generate the default value.</p> <p>This doesn't affect <code>Path</code> parameters as the value is always required. The parameter is available only for compatibility.</p> <p> TYPE: <code>Union[Callable[[], Any], None]</code> DEFAULT: <code>_Unset</code> </p> <code>media_type</code> <p>The media type of this parameter field. Changing it would affect the generated OpenAPI, but currently it doesn't affect the parsing of the data.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'multipart/form-data'</code> </p> <code>alias</code> <p>An alternative name for the parameter field.</p> <p>This will be used to extract the data and for the generated OpenAPI. It is particularly useful when you can't use the name you want because it is a Python reserved keyword or similar.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>alias_priority</code> <p>Priority of the alias. This affects whether an alias generator is used.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>validation_alias</code> <p>'Whitelist' validation step. The parameter field will be the single one allowed by the alias or set of aliases defined.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>serialization_alias</code> <p>'Blacklist' validation step. The vanilla parameter field will be the single one of the alias' or set of aliases' fields and all the other fields will be ignored at serialization time.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>title</code> <p>Human-readable title.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Human-readable description.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>gt</code> <p>Greater than. If set, value must be greater than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>ge</code> <p>Greater than or equal. If set, value must be greater than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>lt</code> <p>Less than. If set, value must be less than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>le</code> <p>Less than or equal. If set, value must be less than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>min_length</code> <p>Minimum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>max_length</code> <p>Maximum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>pattern</code> <p>RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>regex</code> <p>Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use <code>pattern</code> instead. RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>discriminator</code> <p>Parameter field name for discriminating the type in a tagged union.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>strict</code> <p>If <code>True</code>, strict validation is applied to the field.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>multiple_of</code> <p>Value must be a multiple of this. Only applicable to numbers.</p> <p> TYPE: <code>Union[float, None]</code> DEFAULT: <code>_Unset</code> </p> <code>allow_inf_nan</code> <p>Allow <code>inf</code>, <code>-inf</code>, <code>nan</code>. Only applicable to numbers.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>max_digits</code> <p>Maximum number of allow digits for strings.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>decimal_places</code> <p>Maximum number of decimal places allowed for numbers.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>examples</code> <p>Example values for this field.</p> <p> TYPE: <code>Optional[List[Any]]</code> DEFAULT: <code>None</code> </p> <code>example</code> <p>Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, although still supported. Use examples instead. </p> <p> TYPE: <code>Optional[Any]</code> DEFAULT: <code>_Unset</code> </p> <code>openapi_examples</code> <p>OpenAPI-specific examples.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Swagger UI (that provides the <code>/docs</code> interface) has better support for the OpenAPI-specific examples than the JSON Schema <code>examples</code>, that's the main use case for this.</p> <p>Read more about it in the ReadyAPI docs for Declare Request Example Data.</p> <p> TYPE: <code>Optional[Dict[str, Example]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this parameter field as deprecated.</p> <p>It will affect the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Union[deprecated, str, bool, None]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>To include (or not) this parameter field in the generated OpenAPI. You probably don't need it, but it's available.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>json_schema_extra</code> <p>Any additional JSON schema data.</p> <p> TYPE: <code>Union[Dict[str, Any], None]</code> DEFAULT: <code>None</code> </p> <code>**extra</code> <p>The <code>extra</code> kwargs is deprecated. Use <code>json_schema_extra</code> instead. Include extra fields used by the JSON Schema.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>readyapi/param_functions.py</code> <pre><code>def File(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n            \"\"\"\n        ),\n    ] = Undefined,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    media_type: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The media type of this parameter field. Changing it would affect the\n            generated OpenAPI, but currently it doesn't affect the parsing of the data.\n            \"\"\"\n        ),\n    ] = \"multipart/form-data\",\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    # TODO: update when deprecating Pydantic v1, import these types\n    # validation_alias: str | AliasPath | AliasChoices | None\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [ReadyAPI docs for Declare Request Example Data](https://readyapi.github.io/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -&gt; Any:\n    return params.File(\n        default=default,\n        default_factory=default_factory,\n        media_type=media_type,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )\n</code></pre>"},{"location":"reference/status/","title":"Status Codes","text":"<p>You can import the <code>status</code> module from <code>readyapi</code>:</p> <pre><code>from readyapi import status\n</code></pre> <p><code>status</code> is provided directly by Starlette.</p> <p>It contains a group of named constants (variables) with integer status codes.</p> <p>For example:</p> <ul> <li>200: <code>status.HTTP_200_OK</code></li> <li>403: <code>status.HTTP_403_FORBIDDEN</code></li> <li>etc.</li> </ul> <p>It can be convenient to quickly access HTTP (and WebSocket) status codes in your app, using autocompletion for the name without having to remember the integer status codes by memory.</p> <p>Read more about it in the ReadyAPI docs about Response Status Code.</p>"},{"location":"reference/status/#example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI, status\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\", status_code=status.HTTP_418_IM_A_TEAPOT)\ndef read_items():\n    return [{\"name\": \"Plumbus\"}, {\"name\": \"Portal Gun\"}]\n</code></pre>"},{"location":"reference/status/#readyapi.status","title":"readyapi.status","text":"<p>HTTP codes See HTTP Status Code Registry: https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml</p> <p>And RFC 2324 - https://tools.ietf.org/html/rfc2324</p>"},{"location":"reference/status/#readyapi.status.HTTP_100_CONTINUE","title":"HTTP_100_CONTINUE  <code>module-attribute</code>","text":"<pre><code>HTTP_100_CONTINUE = 100\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_101_SWITCHING_PROTOCOLS","title":"HTTP_101_SWITCHING_PROTOCOLS  <code>module-attribute</code>","text":"<pre><code>HTTP_101_SWITCHING_PROTOCOLS = 101\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_102_PROCESSING","title":"HTTP_102_PROCESSING  <code>module-attribute</code>","text":"<pre><code>HTTP_102_PROCESSING = 102\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_103_EARLY_HINTS","title":"HTTP_103_EARLY_HINTS  <code>module-attribute</code>","text":"<pre><code>HTTP_103_EARLY_HINTS = 103\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_200_OK","title":"HTTP_200_OK  <code>module-attribute</code>","text":"<pre><code>HTTP_200_OK = 200\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_201_CREATED","title":"HTTP_201_CREATED  <code>module-attribute</code>","text":"<pre><code>HTTP_201_CREATED = 201\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_202_ACCEPTED","title":"HTTP_202_ACCEPTED  <code>module-attribute</code>","text":"<pre><code>HTTP_202_ACCEPTED = 202\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_203_NON_AUTHORITATIVE_INFORMATION","title":"HTTP_203_NON_AUTHORITATIVE_INFORMATION  <code>module-attribute</code>","text":"<pre><code>HTTP_203_NON_AUTHORITATIVE_INFORMATION = 203\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_204_NO_CONTENT","title":"HTTP_204_NO_CONTENT  <code>module-attribute</code>","text":"<pre><code>HTTP_204_NO_CONTENT = 204\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_205_RESET_CONTENT","title":"HTTP_205_RESET_CONTENT  <code>module-attribute</code>","text":"<pre><code>HTTP_205_RESET_CONTENT = 205\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_206_PARTIAL_CONTENT","title":"HTTP_206_PARTIAL_CONTENT  <code>module-attribute</code>","text":"<pre><code>HTTP_206_PARTIAL_CONTENT = 206\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_207_MULTI_STATUS","title":"HTTP_207_MULTI_STATUS  <code>module-attribute</code>","text":"<pre><code>HTTP_207_MULTI_STATUS = 207\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_208_ALREADY_REPORTED","title":"HTTP_208_ALREADY_REPORTED  <code>module-attribute</code>","text":"<pre><code>HTTP_208_ALREADY_REPORTED = 208\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_226_IM_USED","title":"HTTP_226_IM_USED  <code>module-attribute</code>","text":"<pre><code>HTTP_226_IM_USED = 226\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_300_MULTIPLE_CHOICES","title":"HTTP_300_MULTIPLE_CHOICES  <code>module-attribute</code>","text":"<pre><code>HTTP_300_MULTIPLE_CHOICES = 300\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_301_MOVED_PERMANENTLY","title":"HTTP_301_MOVED_PERMANENTLY  <code>module-attribute</code>","text":"<pre><code>HTTP_301_MOVED_PERMANENTLY = 301\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_302_FOUND","title":"HTTP_302_FOUND  <code>module-attribute</code>","text":"<pre><code>HTTP_302_FOUND = 302\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_303_SEE_OTHER","title":"HTTP_303_SEE_OTHER  <code>module-attribute</code>","text":"<pre><code>HTTP_303_SEE_OTHER = 303\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_304_NOT_MODIFIED","title":"HTTP_304_NOT_MODIFIED  <code>module-attribute</code>","text":"<pre><code>HTTP_304_NOT_MODIFIED = 304\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_305_USE_PROXY","title":"HTTP_305_USE_PROXY  <code>module-attribute</code>","text":"<pre><code>HTTP_305_USE_PROXY = 305\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_306_RESERVED","title":"HTTP_306_RESERVED  <code>module-attribute</code>","text":"<pre><code>HTTP_306_RESERVED = 306\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_307_TEMPORARY_REDIRECT","title":"HTTP_307_TEMPORARY_REDIRECT  <code>module-attribute</code>","text":"<pre><code>HTTP_307_TEMPORARY_REDIRECT = 307\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_308_PERMANENT_REDIRECT","title":"HTTP_308_PERMANENT_REDIRECT  <code>module-attribute</code>","text":"<pre><code>HTTP_308_PERMANENT_REDIRECT = 308\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_400_BAD_REQUEST","title":"HTTP_400_BAD_REQUEST  <code>module-attribute</code>","text":"<pre><code>HTTP_400_BAD_REQUEST = 400\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_401_UNAUTHORIZED","title":"HTTP_401_UNAUTHORIZED  <code>module-attribute</code>","text":"<pre><code>HTTP_401_UNAUTHORIZED = 401\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_402_PAYMENT_REQUIRED","title":"HTTP_402_PAYMENT_REQUIRED  <code>module-attribute</code>","text":"<pre><code>HTTP_402_PAYMENT_REQUIRED = 402\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_403_FORBIDDEN","title":"HTTP_403_FORBIDDEN  <code>module-attribute</code>","text":"<pre><code>HTTP_403_FORBIDDEN = 403\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_404_NOT_FOUND","title":"HTTP_404_NOT_FOUND  <code>module-attribute</code>","text":"<pre><code>HTTP_404_NOT_FOUND = 404\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_405_METHOD_NOT_ALLOWED","title":"HTTP_405_METHOD_NOT_ALLOWED  <code>module-attribute</code>","text":"<pre><code>HTTP_405_METHOD_NOT_ALLOWED = 405\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_406_NOT_ACCEPTABLE","title":"HTTP_406_NOT_ACCEPTABLE  <code>module-attribute</code>","text":"<pre><code>HTTP_406_NOT_ACCEPTABLE = 406\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_407_PROXY_AUTHENTICATION_REQUIRED","title":"HTTP_407_PROXY_AUTHENTICATION_REQUIRED  <code>module-attribute</code>","text":"<pre><code>HTTP_407_PROXY_AUTHENTICATION_REQUIRED = 407\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_408_REQUEST_TIMEOUT","title":"HTTP_408_REQUEST_TIMEOUT  <code>module-attribute</code>","text":"<pre><code>HTTP_408_REQUEST_TIMEOUT = 408\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_409_CONFLICT","title":"HTTP_409_CONFLICT  <code>module-attribute</code>","text":"<pre><code>HTTP_409_CONFLICT = 409\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_410_GONE","title":"HTTP_410_GONE  <code>module-attribute</code>","text":"<pre><code>HTTP_410_GONE = 410\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_411_LENGTH_REQUIRED","title":"HTTP_411_LENGTH_REQUIRED  <code>module-attribute</code>","text":"<pre><code>HTTP_411_LENGTH_REQUIRED = 411\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_412_PRECONDITION_FAILED","title":"HTTP_412_PRECONDITION_FAILED  <code>module-attribute</code>","text":"<pre><code>HTTP_412_PRECONDITION_FAILED = 412\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_413_REQUEST_ENTITY_TOO_LARGE","title":"HTTP_413_REQUEST_ENTITY_TOO_LARGE  <code>module-attribute</code>","text":"<pre><code>HTTP_413_REQUEST_ENTITY_TOO_LARGE = 413\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_414_REQUEST_URI_TOO_LONG","title":"HTTP_414_REQUEST_URI_TOO_LONG  <code>module-attribute</code>","text":"<pre><code>HTTP_414_REQUEST_URI_TOO_LONG = 414\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_415_UNSUPPORTED_MEDIA_TYPE","title":"HTTP_415_UNSUPPORTED_MEDIA_TYPE  <code>module-attribute</code>","text":"<pre><code>HTTP_415_UNSUPPORTED_MEDIA_TYPE = 415\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_416_REQUESTED_RANGE_NOT_SATISFIABLE","title":"HTTP_416_REQUESTED_RANGE_NOT_SATISFIABLE  <code>module-attribute</code>","text":"<pre><code>HTTP_416_REQUESTED_RANGE_NOT_SATISFIABLE = 416\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_417_EXPECTATION_FAILED","title":"HTTP_417_EXPECTATION_FAILED  <code>module-attribute</code>","text":"<pre><code>HTTP_417_EXPECTATION_FAILED = 417\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_418_IM_A_TEAPOT","title":"HTTP_418_IM_A_TEAPOT  <code>module-attribute</code>","text":"<pre><code>HTTP_418_IM_A_TEAPOT = 418\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_421_MISDIRECTED_REQUEST","title":"HTTP_421_MISDIRECTED_REQUEST  <code>module-attribute</code>","text":"<pre><code>HTTP_421_MISDIRECTED_REQUEST = 421\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_422_UNPROCESSABLE_ENTITY","title":"HTTP_422_UNPROCESSABLE_ENTITY  <code>module-attribute</code>","text":"<pre><code>HTTP_422_UNPROCESSABLE_ENTITY = 422\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_423_LOCKED","title":"HTTP_423_LOCKED  <code>module-attribute</code>","text":"<pre><code>HTTP_423_LOCKED = 423\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_424_FAILED_DEPENDENCY","title":"HTTP_424_FAILED_DEPENDENCY  <code>module-attribute</code>","text":"<pre><code>HTTP_424_FAILED_DEPENDENCY = 424\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_425_TOO_EARLY","title":"HTTP_425_TOO_EARLY  <code>module-attribute</code>","text":"<pre><code>HTTP_425_TOO_EARLY = 425\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_426_UPGRADE_REQUIRED","title":"HTTP_426_UPGRADE_REQUIRED  <code>module-attribute</code>","text":"<pre><code>HTTP_426_UPGRADE_REQUIRED = 426\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_428_PRECONDITION_REQUIRED","title":"HTTP_428_PRECONDITION_REQUIRED  <code>module-attribute</code>","text":"<pre><code>HTTP_428_PRECONDITION_REQUIRED = 428\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_429_TOO_MANY_REQUESTS","title":"HTTP_429_TOO_MANY_REQUESTS  <code>module-attribute</code>","text":"<pre><code>HTTP_429_TOO_MANY_REQUESTS = 429\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE","title":"HTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE  <code>module-attribute</code>","text":"<pre><code>HTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE = 431\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS","title":"HTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS  <code>module-attribute</code>","text":"<pre><code>HTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS = 451\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_500_INTERNAL_SERVER_ERROR","title":"HTTP_500_INTERNAL_SERVER_ERROR  <code>module-attribute</code>","text":"<pre><code>HTTP_500_INTERNAL_SERVER_ERROR = 500\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_501_NOT_IMPLEMENTED","title":"HTTP_501_NOT_IMPLEMENTED  <code>module-attribute</code>","text":"<pre><code>HTTP_501_NOT_IMPLEMENTED = 501\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_502_BAD_GATEWAY","title":"HTTP_502_BAD_GATEWAY  <code>module-attribute</code>","text":"<pre><code>HTTP_502_BAD_GATEWAY = 502\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_503_SERVICE_UNAVAILABLE","title":"HTTP_503_SERVICE_UNAVAILABLE  <code>module-attribute</code>","text":"<pre><code>HTTP_503_SERVICE_UNAVAILABLE = 503\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_504_GATEWAY_TIMEOUT","title":"HTTP_504_GATEWAY_TIMEOUT  <code>module-attribute</code>","text":"<pre><code>HTTP_504_GATEWAY_TIMEOUT = 504\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_505_HTTP_VERSION_NOT_SUPPORTED","title":"HTTP_505_HTTP_VERSION_NOT_SUPPORTED  <code>module-attribute</code>","text":"<pre><code>HTTP_505_HTTP_VERSION_NOT_SUPPORTED = 505\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_506_VARIANT_ALSO_NEGOTIATES","title":"HTTP_506_VARIANT_ALSO_NEGOTIATES  <code>module-attribute</code>","text":"<pre><code>HTTP_506_VARIANT_ALSO_NEGOTIATES = 506\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_507_INSUFFICIENT_STORAGE","title":"HTTP_507_INSUFFICIENT_STORAGE  <code>module-attribute</code>","text":"<pre><code>HTTP_507_INSUFFICIENT_STORAGE = 507\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_508_LOOP_DETECTED","title":"HTTP_508_LOOP_DETECTED  <code>module-attribute</code>","text":"<pre><code>HTTP_508_LOOP_DETECTED = 508\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_510_NOT_EXTENDED","title":"HTTP_510_NOT_EXTENDED  <code>module-attribute</code>","text":"<pre><code>HTTP_510_NOT_EXTENDED = 510\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_511_NETWORK_AUTHENTICATION_REQUIRED","title":"HTTP_511_NETWORK_AUTHENTICATION_REQUIRED  <code>module-attribute</code>","text":"<pre><code>HTTP_511_NETWORK_AUTHENTICATION_REQUIRED = 511\n</code></pre> <p>WebSocket codes https://www.iana.org/assignments/websocket/websocket.xml#close-code-number https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent</p>"},{"location":"reference/status/#readyapi.status.WS_1000_NORMAL_CLOSURE","title":"WS_1000_NORMAL_CLOSURE  <code>module-attribute</code>","text":"<pre><code>WS_1000_NORMAL_CLOSURE = 1000\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1001_GOING_AWAY","title":"WS_1001_GOING_AWAY  <code>module-attribute</code>","text":"<pre><code>WS_1001_GOING_AWAY = 1001\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1002_PROTOCOL_ERROR","title":"WS_1002_PROTOCOL_ERROR  <code>module-attribute</code>","text":"<pre><code>WS_1002_PROTOCOL_ERROR = 1002\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1003_UNSUPPORTED_DATA","title":"WS_1003_UNSUPPORTED_DATA  <code>module-attribute</code>","text":"<pre><code>WS_1003_UNSUPPORTED_DATA = 1003\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1005_NO_STATUS_RCVD","title":"WS_1005_NO_STATUS_RCVD  <code>module-attribute</code>","text":"<pre><code>WS_1005_NO_STATUS_RCVD = 1005\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1006_ABNORMAL_CLOSURE","title":"WS_1006_ABNORMAL_CLOSURE  <code>module-attribute</code>","text":"<pre><code>WS_1006_ABNORMAL_CLOSURE = 1006\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1007_INVALID_FRAME_PAYLOAD_DATA","title":"WS_1007_INVALID_FRAME_PAYLOAD_DATA  <code>module-attribute</code>","text":"<pre><code>WS_1007_INVALID_FRAME_PAYLOAD_DATA = 1007\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1008_POLICY_VIOLATION","title":"WS_1008_POLICY_VIOLATION  <code>module-attribute</code>","text":"<pre><code>WS_1008_POLICY_VIOLATION = 1008\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1009_MESSAGE_TOO_BIG","title":"WS_1009_MESSAGE_TOO_BIG  <code>module-attribute</code>","text":"<pre><code>WS_1009_MESSAGE_TOO_BIG = 1009\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1010_MANDATORY_EXT","title":"WS_1010_MANDATORY_EXT  <code>module-attribute</code>","text":"<pre><code>WS_1010_MANDATORY_EXT = 1010\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1011_INTERNAL_ERROR","title":"WS_1011_INTERNAL_ERROR  <code>module-attribute</code>","text":"<pre><code>WS_1011_INTERNAL_ERROR = 1011\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1012_SERVICE_RESTART","title":"WS_1012_SERVICE_RESTART  <code>module-attribute</code>","text":"<pre><code>WS_1012_SERVICE_RESTART = 1012\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1013_TRY_AGAIN_LATER","title":"WS_1013_TRY_AGAIN_LATER  <code>module-attribute</code>","text":"<pre><code>WS_1013_TRY_AGAIN_LATER = 1013\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1014_BAD_GATEWAY","title":"WS_1014_BAD_GATEWAY  <code>module-attribute</code>","text":"<pre><code>WS_1014_BAD_GATEWAY = 1014\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1015_TLS_HANDSHAKE","title":"WS_1015_TLS_HANDSHAKE  <code>module-attribute</code>","text":"<pre><code>WS_1015_TLS_HANDSHAKE = 1015\n</code></pre>"},{"location":"reference/uploadfile/","title":"<code>UploadFile</code> class","text":"<p>You can define path operation function parameters to be of the type <code>UploadFile</code> to receive files from the request.</p> <p>You can import it directly from <code>readyapi</code>:</p> <pre><code>from readyapi import UploadFile\n</code></pre>"},{"location":"reference/uploadfile/#readyapi.UploadFile","title":"readyapi.UploadFile","text":"<pre><code>UploadFile(file, *, size=None, filename=None, headers=None)\n</code></pre> <p>               Bases: <code>UploadFile</code></p> <p>A file uploaded in a request.</p> <p>Define it as a path operation function (or dependency) parameter.</p> <p>If you are using a regular <code>def</code> function, you can use the <code>upload_file.file</code> attribute to access the raw standard Python file (blocking, not async), useful and needed for non-async code.</p> <p>Read more about it in the ReadyAPI docs for Request Files.</p>"},{"location":"reference/uploadfile/#readyapi.UploadFile--example","title":"Example","text":"<pre><code>from typing import Annotated\n\nfrom readyapi import ReadyAPI, File, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File()]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> PARAMETER DESCRIPTION <code>file</code> <p> TYPE: <code>BinaryIO</code> </p> <code>size</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>filename</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>Headers | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/datastructures.py</code> <pre><code>def __init__(\n    self,\n    file: typing.BinaryIO,\n    *,\n    size: int | None = None,\n    filename: str | None = None,\n    headers: Headers | None = None,\n) -&gt; None:\n    self.filename = filename\n    self.file = file\n    self.size = size\n    self.headers = headers or Headers()\n</code></pre>"},{"location":"reference/uploadfile/#readyapi.UploadFile.file","title":"file  <code>instance-attribute</code>","text":"<pre><code>file\n</code></pre> <p>The standard Python file object (non-async).</p>"},{"location":"reference/uploadfile/#readyapi.UploadFile.filename","title":"filename  <code>instance-attribute</code>","text":"<pre><code>filename\n</code></pre> <p>The original file name.</p>"},{"location":"reference/uploadfile/#readyapi.UploadFile.size","title":"size  <code>instance-attribute</code>","text":"<pre><code>size\n</code></pre> <p>The size of the file in bytes.</p>"},{"location":"reference/uploadfile/#readyapi.UploadFile.headers","title":"headers  <code>instance-attribute</code>","text":"<pre><code>headers\n</code></pre> <p>The headers of the request.</p>"},{"location":"reference/uploadfile/#readyapi.UploadFile.content_type","title":"content_type  <code>instance-attribute</code>","text":"<pre><code>content_type\n</code></pre> <p>The content type of the request, from the headers.</p>"},{"location":"reference/uploadfile/#readyapi.UploadFile.read","title":"read  <code>async</code>","text":"<pre><code>read(size=-1)\n</code></pre> <p>Read some bytes from the file.</p> <p>To be awaitable, compatible with async, this is run in threadpool.</p> PARAMETER DESCRIPTION <code>size</code> <p>The number of bytes to read from the file.</p> <p> TYPE: <code>int</code> DEFAULT: <code>-1</code> </p> Source code in <code>readyapi/datastructures.py</code> <pre><code>async def read(\n    self,\n    size: Annotated[\n        int,\n        Doc(\n            \"\"\"\n            The number of bytes to read from the file.\n            \"\"\"\n        ),\n    ] = -1,\n) -&gt; bytes:\n    \"\"\"\n    Read some bytes from the file.\n\n    To be awaitable, compatible with async, this is run in threadpool.\n    \"\"\"\n    return await super().read(size)\n</code></pre>"},{"location":"reference/uploadfile/#readyapi.UploadFile.write","title":"write  <code>async</code>","text":"<pre><code>write(data)\n</code></pre> <p>Write some bytes to the file.</p> <p>You normally wouldn't use this from a file you read in a request.</p> <p>To be awaitable, compatible with async, this is run in threadpool.</p> PARAMETER DESCRIPTION <code>data</code> <p>The bytes to write to the file.</p> <p> TYPE: <code>bytes</code> </p> Source code in <code>readyapi/datastructures.py</code> <pre><code>async def write(\n    self,\n    data: Annotated[\n        bytes,\n        Doc(\n            \"\"\"\n            The bytes to write to the file.\n            \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\n    Write some bytes to the file.\n\n    You normally wouldn't use this from a file you read in a request.\n\n    To be awaitable, compatible with async, this is run in threadpool.\n    \"\"\"\n    return await super().write(data)\n</code></pre>"},{"location":"reference/uploadfile/#readyapi.UploadFile.seek","title":"seek  <code>async</code>","text":"<pre><code>seek(offset)\n</code></pre> <p>Move to a position in the file.</p> <p>Any next read or write will be done from that position.</p> <p>To be awaitable, compatible with async, this is run in threadpool.</p> PARAMETER DESCRIPTION <code>offset</code> <p>The position in bytes to seek to in the file.</p> <p> TYPE: <code>int</code> </p> Source code in <code>readyapi/datastructures.py</code> <pre><code>async def seek(\n    self,\n    offset: Annotated[\n        int,\n        Doc(\n            \"\"\"\n            The position in bytes to seek to in the file.\n            \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\n    Move to a position in the file.\n\n    Any next read or write will be done from that position.\n\n    To be awaitable, compatible with async, this is run in threadpool.\n    \"\"\"\n    return await super().seek(offset)\n</code></pre>"},{"location":"reference/uploadfile/#readyapi.UploadFile.close","title":"close  <code>async</code>","text":"<pre><code>close()\n</code></pre> <p>Close the file.</p> <p>To be awaitable, compatible with async, this is run in threadpool.</p> Source code in <code>readyapi/datastructures.py</code> <pre><code>async def close(self) -&gt; None:\n    \"\"\"\n    Close the file.\n\n    To be awaitable, compatible with async, this is run in threadpool.\n    \"\"\"\n    return await super().close()\n</code></pre>"},{"location":"reference/exceptions/","title":"Exceptions - <code>HTTPException</code> and <code>WebSocketException</code>","text":"<p>These are the exceptions that you can raise to show errors to the client.</p> <p>When you raise an exception, as would happen with normal Python, the rest of the execution is aborted. This way you can raise these exceptions from anywhere in the code to abort a request and show the error to the client.</p> <p>You can use:</p> <ul> <li><code>HTTPException</code></li> <li><code>WebSocketException</code></li> </ul> <p>These exceptions can be imported directly from <code>readyapi</code>:</p> <pre><code>from readyapi import HTTPException, WebSocketException\n</code></pre>"},{"location":"reference/exceptions/#readyapi.HTTPException","title":"readyapi.HTTPException","text":"<pre><code>HTTPException(status_code, detail=None, headers=None)\n</code></pre> <p>               Bases: <code>HTTPException</code></p> <p>An HTTP exception you can raise in your own code to show errors to the client.</p> <p>This is for client errors, invalid authentication, invalid data, etc. Not for server errors in your code.</p> <p>Read more about it in the ReadyAPI docs for Handling Errors.</p>"},{"location":"reference/exceptions/#readyapi.HTTPException--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI, HTTPException\n\napp = ReadyAPI()\n\nitems = {\"foo\": \"The Foo Wrestlers\"}\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str):\n    if item_id not in items:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"item\": items[item_id]}\n</code></pre> PARAMETER DESCRIPTION <code>status_code</code> <p>HTTP status code to send to the client.</p> <p> TYPE: <code>int</code> </p> <code>detail</code> <p>Any data to be sent to the client in the <code>detail</code> key of the JSON response.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p>Any headers to send to the client in the response.</p> <p> TYPE: <code>Optional[Dict[str, str]]</code> DEFAULT: <code>None</code> </p> Source code in <code>readyapi/exceptions.py</code> <pre><code>def __init__(\n    self,\n    status_code: Annotated[\n        int,\n        Doc(\n            \"\"\"\n            HTTP status code to send to the client.\n            \"\"\"\n        ),\n    ],\n    detail: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Any data to be sent to the client in the `detail` key of the JSON\n            response.\n            \"\"\"\n        ),\n    ] = None,\n    headers: Annotated[\n        Optional[Dict[str, str]],\n        Doc(\n            \"\"\"\n            Any headers to send to the client in the response.\n            \"\"\"\n        ),\n    ] = None,\n) -&gt; None:\n    super().__init__(status_code=status_code, detail=detail, headers=headers)\n</code></pre>"},{"location":"reference/exceptions/#readyapi.HTTPException.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/exceptions/#readyapi.HTTPException.detail","title":"detail  <code>instance-attribute</code>","text":"<pre><code>detail = detail\n</code></pre>"},{"location":"reference/exceptions/#readyapi.HTTPException.headers","title":"headers  <code>instance-attribute</code>","text":"<pre><code>headers = headers\n</code></pre>"},{"location":"reference/exceptions/#readyapi.WebSocketException","title":"readyapi.WebSocketException","text":"<pre><code>WebSocketException(code, reason=None)\n</code></pre> <p>               Bases: <code>WebSocketException</code></p> <p>A WebSocket exception you can raise in your own code to show errors to the client.</p> <p>This is for client errors, invalid authentication, invalid data, etc. Not for server errors in your code.</p> <p>Read more about it in the ReadyAPI docs for WebSockets.</p>"},{"location":"reference/exceptions/#readyapi.WebSocketException--example","title":"Example","text":"<pre><code>from typing import Annotated\n\nfrom readyapi import (\n    Cookie,\n    ReadyAPI,\n    WebSocket,\n    WebSocketException,\n    status,\n)\n\napp = ReadyAPI()\n\n@app.websocket(\"/items/{item_id}/ws\")\nasync def websocket_endpoint(\n    *,\n    websocket: WebSocket,\n    session: Annotated[str | None, Cookie()] = None,\n    item_id: str,\n):\n    if session is None:\n        raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION)\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(f\"Session cookie is: {session}\")\n        await websocket.send_text(f\"Message text was: {data}, for item ID: {item_id}\")\n</code></pre> PARAMETER DESCRIPTION <code>code</code> <p>A closing code from the valid codes defined in the specification.</p> <p> TYPE: <code>int</code> </p> <code>reason</code> <p>The reason to close the WebSocket connection.</p> <p>It is UTF-8-encoded data. The interpretation of the reason is up to the application, it is not specified by the WebSocket specification.</p> <p>It could contain text that could be human-readable or interpretable by the client code, etc.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> Source code in <code>readyapi/exceptions.py</code> <pre><code>def __init__(\n    self,\n    code: Annotated[\n        int,\n        Doc(\n            \"\"\"\n            A closing code from the\n            [valid codes defined in the specification](https://datatracker.ietf.org/doc/html/rfc6455#section-7.4.1).\n            \"\"\"\n        ),\n    ],\n    reason: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            The reason to close the WebSocket connection.\n\n            It is UTF-8-encoded data. The interpretation of the reason is up to the\n            application, it is not specified by the WebSocket specification.\n\n            It could contain text that could be human-readable or interpretable\n            by the client code, etc.\n            \"\"\"\n        ),\n    ] = None,\n) -&gt; None:\n    super().__init__(code=code, reason=reason)\n</code></pre>"},{"location":"reference/exceptions/#readyapi.WebSocketException.code","title":"code  <code>instance-attribute</code>","text":"<pre><code>code = code\n</code></pre>"},{"location":"reference/exceptions/#readyapi.WebSocketException.reason","title":"reason  <code>instance-attribute</code>","text":"<pre><code>reason = reason or ''\n</code></pre>"},{"location":"reference/dependencies/","title":"Dependencies - <code>Depends()</code> and <code>Security()</code>","text":""},{"location":"reference/dependencies/#depends","title":"<code>Depends()</code>","text":"<p>Dependencies are handled mainly with the special function <code>Depends()</code> that takes a callable.</p> <p>Here is the reference for it and its parameters.</p> <p>You can import it directly from <code>readyapi</code>:</p> <pre><code>from readyapi import Depends\n</code></pre>"},{"location":"reference/dependencies/#readyapi.Depends","title":"readyapi.Depends","text":"<pre><code>Depends(dependency=None, *, use_cache=True)\n</code></pre> <p>Declare a ReadyAPI dependency.</p> <p>It takes a single \"dependable\" callable (like a function).</p> <p>Don't call it directly, ReadyAPI will call it for you.</p> <p>Read more about it in the ReadyAPI docs for Dependencies.</p> <p>Example</p> <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> PARAMETER DESCRIPTION <code>dependency</code> <p>A \"dependable\" callable (like a function).</p> <p>Don't call it directly, ReadyAPI will call it for you, just pass the object directly.</p> <p> TYPE: <code>Optional[Callable[..., Any]]</code> DEFAULT: <code>None</code> </p> <code>use_cache</code> <p>By default, after a dependency is called the first time in a request, if the dependency is declared again for the rest of the request (for example if the dependency is needed by several dependencies), the value will be re-used for the rest of the request.</p> <p>Set <code>use_cache</code> to <code>False</code> to disable this behavior and ensure the dependency is called again (if declared more than once) in the same request.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/param_functions.py</code> <pre><code>def Depends(  # noqa: N802\n    dependency: Annotated[\n        Optional[Callable[..., Any]],\n        Doc(\n            \"\"\"\n            A \"dependable\" callable (like a function).\n\n            Don't call it directly, ReadyAPI will call it for you, just pass the object\n            directly.\n            \"\"\"\n        ),\n    ] = None,\n    *,\n    use_cache: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, after a dependency is called the first time in a request, if\n            the dependency is declared again for the rest of the request (for example\n            if the dependency is needed by several dependencies), the value will be\n            re-used for the rest of the request.\n\n            Set `use_cache` to `False` to disable this behavior and ensure the\n            dependency is called again (if declared more than once) in the same request.\n            \"\"\"\n        ),\n    ] = True,\n) -&gt; Any:\n    \"\"\"\n    Declare a ReadyAPI dependency.\n\n    It takes a single \"dependable\" callable (like a function).\n\n    Don't call it directly, ReadyAPI will call it for you.\n\n    Read more about it in the\n    [ReadyAPI docs for Dependencies](https://readyapi.github.io/tutorial/dependencies/).\n\n    **Example**\n\n    ```python\n    from typing import Annotated\n\n    from readyapi import Depends, ReadyAPI\n\n    app = ReadyAPI()\n\n\n    async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n        return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n    @app.get(\"/items/\")\n    async def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n        return commons\n    ```\n    \"\"\"\n    return params.Depends(dependency=dependency, use_cache=use_cache)\n</code></pre>"},{"location":"reference/dependencies/#security","title":"<code>Security()</code>","text":"<p>For many scenarios, you can handle security (authorization, authentication, etc.) with dependencies, using <code>Depends()</code>.</p> <p>But when you want to also declare OAuth2 scopes, you can use <code>Security()</code> instead of <code>Depends()</code>.</p> <p>You can import <code>Security()</code> directly from <code>readyapi</code>:</p> <pre><code>from readyapi import Security\n</code></pre>"},{"location":"reference/dependencies/#readyapi.Security","title":"readyapi.Security","text":"<pre><code>Security(dependency=None, *, scopes=None, use_cache=True)\n</code></pre> <p>Declare a ReadyAPI Security dependency.</p> <p>The only difference with a regular dependency is that it can declare OAuth2 scopes that will be integrated with OpenAPI and the automatic UI docs (by default at <code>/docs</code>).</p> <p>It takes a single \"dependable\" callable (like a function).</p> <p>Don't call it directly, ReadyAPI will call it for you.</p> <p>Read more about it in the ReadyAPI docs for Security and in the ReadyAPI docs for OAuth2 scopes.</p> <p>Example</p> <pre><code>from typing import Annotated\n\nfrom readyapi import Security, ReadyAPI\n\nfrom .db import User\nfrom .security import get_current_active_user\n\napp = ReadyAPI()\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])]\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> PARAMETER DESCRIPTION <code>dependency</code> <p>A \"dependable\" callable (like a function).</p> <p>Don't call it directly, ReadyAPI will call it for you, just pass the object directly.</p> <p> TYPE: <code>Optional[Callable[..., Any]]</code> DEFAULT: <code>None</code> </p> <code>scopes</code> <p>OAuth2 scopes required for the path operation that uses this Security dependency.</p> <p>The term \"scope\" comes from the OAuth2 specification, it seems to be intentionally vague and interpretable. It normally refers to permissions, in cases to roles.</p> <p>These scopes are integrated with OpenAPI (and the API docs at <code>/docs</code>). So they are visible in the OpenAPI specification. )</p> <p> TYPE: <code>Optional[Sequence[str]]</code> DEFAULT: <code>None</code> </p> <code>use_cache</code> <p>By default, after a dependency is called the first time in a request, if the dependency is declared again for the rest of the request (for example if the dependency is needed by several dependencies), the value will be re-used for the rest of the request.</p> <p>Set <code>use_cache</code> to <code>False</code> to disable this behavior and ensure the dependency is called again (if declared more than once) in the same request.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/param_functions.py</code> <pre><code>def Security(  # noqa: N802\n    dependency: Annotated[\n        Optional[Callable[..., Any]],\n        Doc(\n            \"\"\"\n            A \"dependable\" callable (like a function).\n\n            Don't call it directly, ReadyAPI will call it for you, just pass the object\n            directly.\n            \"\"\"\n        ),\n    ] = None,\n    *,\n    scopes: Annotated[\n        Optional[Sequence[str]],\n        Doc(\n            \"\"\"\n            OAuth2 scopes required for the *path operation* that uses this Security\n            dependency.\n\n            The term \"scope\" comes from the OAuth2 specification, it seems to be\n            intentionally vague and interpretable. It normally refers to permissions,\n            in cases to roles.\n\n            These scopes are integrated with OpenAPI (and the API docs at `/docs`).\n            So they are visible in the OpenAPI specification.\n            )\n            \"\"\"\n        ),\n    ] = None,\n    use_cache: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, after a dependency is called the first time in a request, if\n            the dependency is declared again for the rest of the request (for example\n            if the dependency is needed by several dependencies), the value will be\n            re-used for the rest of the request.\n\n            Set `use_cache` to `False` to disable this behavior and ensure the\n            dependency is called again (if declared more than once) in the same request.\n            \"\"\"\n        ),\n    ] = True,\n) -&gt; Any:\n    \"\"\"\n    Declare a ReadyAPI Security dependency.\n\n    The only difference with a regular dependency is that it can declare OAuth2\n    scopes that will be integrated with OpenAPI and the automatic UI docs (by default\n    at `/docs`).\n\n    It takes a single \"dependable\" callable (like a function).\n\n    Don't call it directly, ReadyAPI will call it for you.\n\n    Read more about it in the\n    [ReadyAPI docs for Security](https://readyapi.github.io/tutorial/security/) and\n    in the\n    [ReadyAPI docs for OAuth2 scopes](https://readyapi.github.io/advanced/security/oauth2-scopes/).\n\n    **Example**\n\n    ```python\n    from typing import Annotated\n\n    from readyapi import Security, ReadyAPI\n\n    from .db import User\n    from .security import get_current_active_user\n\n    app = ReadyAPI()\n\n    @app.get(\"/users/me/items/\")\n    async def read_own_items(\n        current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])]\n    ):\n        return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n    ```\n    \"\"\"\n    return params.Security(dependency=dependency, scopes=scopes, use_cache=use_cache)\n</code></pre>"},{"location":"reference/apirouter/","title":"<code>APIRouter</code> class","text":"<p>Here's the reference information for the <code>APIRouter</code> class, with all its parameters, attributes and methods.</p> <p>You can import the <code>APIRouter</code> class directly from <code>readyapi</code>:</p> <pre><code>from readyapi import APIRouter\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter","title":"readyapi.APIRouter","text":"<pre><code>APIRouter(\n    *,\n    prefix=\"\",\n    tags=None,\n    dependencies=None,\n    default_response_class=Default(JSONResponse),\n    responses=None,\n    callbacks=None,\n    routes=None,\n    redirect_slashes=True,\n    default=None,\n    dependency_overrides_provider=None,\n    route_class=APIRoute,\n    on_startup=None,\n    on_shutdown=None,\n    lifespan=None,\n    deprecated=None,\n    include_in_schema=True,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>               Bases: <code>Router</code></p> <p><code>APIRouter</code> class, used to group path operations, for example to structure an app in multiple files. It would then be included in the <code>ReadyAPI</code> app, or in another <code>APIRouter</code> (ultimately included in the app).</p> <p>Read more about it in the ReadyAPI docs for Bigger Applications - Multiple Files.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n\n@router.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n\n\napp.include_router(router)\n</code></pre> PARAMETER DESCRIPTION <code>prefix</code> <p>An optional path prefix for the router.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>tags</code> <p>A list of tags to be applied to all the path operations in this router.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to all the path operations in this router.</p> <p>Read more about it in the ReadyAPI docs for Bigger Applications - Multiple Files.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>default_response_class</code> <p>The default response class to be used.</p> <p>Read more in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>responses</code> <p>Additional responses to be shown in OpenAPI.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Additional Responses in OpenAPI.</p> <p>And in the ReadyAPI docs for Bigger Applications.</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>OpenAPI callbacks that should apply to all path operations in this router.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>routes</code> <p>Note: you probably shouldn't use this parameter, it is inherited from Starlette and supported for compatibility.</p> <p>A list of routes to serve incoming HTTP and WebSocket requests.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>redirect_slashes</code> <p>Whether to detect and redirect slashes in URLs when the client doesn't use the same format.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>default</code> <p>Default function handler for this router. Used to handle 404 Not Found errors.</p> <p> TYPE: <code>Optional[ASGIApp]</code> DEFAULT: <code>None</code> </p> <code>dependency_overrides_provider</code> <p>Only used internally by ReadyAPI to handle dependency overrides.</p> <p>You shouldn't need to use it. It normally points to the <code>ReadyAPI</code> app object.</p> <p> TYPE: <code>Optional[Any]</code> DEFAULT: <code>None</code> </p> <code>route_class</code> <p>Custom route (path operation) class to be used by this router.</p> <p>Read more about it in the ReadyAPI docs for Custom Request and APIRoute class.</p> <p> TYPE: <code>Type[APIRoute]</code> DEFAULT: <code>APIRoute</code> </p> <code>on_startup</code> <p>A list of startup event handler functions.</p> <p>You should instead use the <code>lifespan</code> handlers.</p> <p>Read more in the ReadyAPI docs for <code>lifespan</code>.</p> <p> TYPE: <code>Optional[Sequence[Callable[[], Any]]]</code> DEFAULT: <code>None</code> </p> <code>on_shutdown</code> <p>A list of shutdown event handler functions.</p> <p>You should instead use the <code>lifespan</code> handlers.</p> <p>Read more in the ReadyAPI docs for <code>lifespan</code>.</p> <p> TYPE: <code>Optional[Sequence[Callable[[], Any]]]</code> DEFAULT: <code>None</code> </p> <code>lifespan</code> <p>A <code>Lifespan</code> context manager handler. This replaces <code>startup</code> and <code>shutdown</code> functions with a single context manager.</p> <p>Read more in the ReadyAPI docs for <code>lifespan</code>.</p> <p> TYPE: <code>Optional[Lifespan[Any]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark all path operations in this router as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>To include (or not) all the path operations in this router in the generated OpenAPI.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def __init__(\n    self,\n    *,\n    prefix: Annotated[str, Doc(\"An optional path prefix for the router.\")] = \"\",\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to all the *path operations* in this\n            router.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to all the\n            *path operations* in this router.\n\n            Read more about it in the\n            [ReadyAPI docs for Bigger Applications - Multiple Files](https://readyapi.github.io/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n            \"\"\"\n        ),\n    ] = None,\n    default_response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            The default response class to be used.\n\n            Read more in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#default-response-class).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses to be shown in OpenAPI.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Additional Responses in OpenAPI](https://readyapi.github.io/advanced/additional-responses/).\n\n            And in the\n            [ReadyAPI docs for Bigger Applications](https://readyapi.github.io/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            OpenAPI callbacks that should apply to all *path operations* in this\n            router.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    routes: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            **Note**: you probably shouldn't use this parameter, it is inherited\n            from Starlette and supported for compatibility.\n\n            ---\n\n            A list of routes to serve incoming HTTP and WebSocket requests.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            You normally wouldn't use this parameter with ReadyAPI, it is inherited\n            from Starlette and supported for compatibility.\n\n            In ReadyAPI, you normally would use the *path operation methods*,\n            like `router.get()`, `router.post()`, etc.\n            \"\"\"\n        ),\n    ] = None,\n    redirect_slashes: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Whether to detect and redirect slashes in URLs when the client doesn't\n            use the same format.\n            \"\"\"\n        ),\n    ] = True,\n    default: Annotated[\n        Optional[ASGIApp],\n        Doc(\n            \"\"\"\n            Default function handler for this router. Used to handle\n            404 Not Found errors.\n            \"\"\"\n        ),\n    ] = None,\n    dependency_overrides_provider: Annotated[\n        Optional[Any],\n        Doc(\n            \"\"\"\n            Only used internally by ReadyAPI to handle dependency overrides.\n\n            You shouldn't need to use it. It normally points to the `ReadyAPI` app\n            object.\n            \"\"\"\n        ),\n    ] = None,\n    route_class: Annotated[\n        Type[APIRoute],\n        Doc(\n            \"\"\"\n            Custom route (*path operation*) class to be used by this router.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Request and APIRoute class](https://readyapi.github.io/how-to/custom-request-and-route/#custom-apiroute-class-in-a-router).\n            \"\"\"\n        ),\n    ] = APIRoute,\n    on_startup: Annotated[\n        Optional[Sequence[Callable[[], Any]]],\n        Doc(\n            \"\"\"\n            A list of startup event handler functions.\n\n            You should instead use the `lifespan` handlers.\n\n            Read more in the [ReadyAPI docs for `lifespan`](https://readyapi.github.io/advanced/events/).\n            \"\"\"\n        ),\n    ] = None,\n    on_shutdown: Annotated[\n        Optional[Sequence[Callable[[], Any]]],\n        Doc(\n            \"\"\"\n            A list of shutdown event handler functions.\n\n            You should instead use the `lifespan` handlers.\n\n            Read more in the\n            [ReadyAPI docs for `lifespan`](https://readyapi.github.io/advanced/events/).\n            \"\"\"\n        ),\n    ] = None,\n    # the generic to Lifespan[AppType] is the type of the top level application\n    # which the router cannot know statically, so we use typing.Any\n    lifespan: Annotated[\n        Optional[Lifespan[Any]],\n        Doc(\n            \"\"\"\n            A `Lifespan` context manager handler. This replaces `startup` and\n            `shutdown` functions with a single context manager.\n\n            Read more in the\n            [ReadyAPI docs for `lifespan`](https://readyapi.github.io/advanced/events/).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark all *path operations* in this router as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) all the *path operations* in this router in the\n            generated OpenAPI.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; None:\n    super().__init__(\n        routes=routes,\n        redirect_slashes=redirect_slashes,\n        default=default,\n        on_startup=on_startup,\n        on_shutdown=on_shutdown,\n        lifespan=lifespan,\n    )\n    if prefix:\n        assert prefix.startswith(\"/\"), \"A path prefix must start with '/'\"\n        assert not prefix.endswith(\"/\"), (\n            \"A path prefix must not end with '/', as the routes will start with '/'\"\n        )\n    self.prefix = prefix\n    self.tags: List[Union[str, Enum]] = tags or []\n    self.dependencies = list(dependencies or [])\n    self.deprecated = deprecated\n    self.include_in_schema = include_in_schema\n    self.responses = responses or {}\n    self.callbacks = callbacks or []\n    self.dependency_overrides_provider = dependency_overrides_provider\n    self.route_class = route_class\n    self.default_response_class = default_response_class\n    self.generate_unique_id_function = generate_unique_id_function\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.websocket","title":"websocket","text":"<pre><code>websocket(path, name=None, *, dependencies=None)\n</code></pre> <p>Decorate a WebSocket function.</p> <p>Read more about it in the ReadyAPI docs for WebSockets.</p> <p>Example</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.websocket--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI, WebSocket\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n@router.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(f\"Message text was: {data}\")\n\napp.include_router(router)\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>WebSocket path.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>A name for the WebSocket. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be used for this WebSocket.</p> <p>Read more about it in the ReadyAPI docs for WebSockets.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def websocket(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            WebSocket path.\n            \"\"\"\n        ),\n    ],\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A name for the WebSocket. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    *,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be used for this\n            WebSocket.\n\n            Read more about it in the\n            [ReadyAPI docs for WebSockets](https://readyapi.github.io/advanced/websockets/).\n            \"\"\"\n        ),\n    ] = None,\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Decorate a WebSocket function.\n\n    Read more about it in the\n    [ReadyAPI docs for WebSockets](https://readyapi.github.io/advanced/websockets/).\n\n    **Example**\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI, WebSocket\n\n    app = ReadyAPI()\n    router = APIRouter()\n\n    @router.websocket(\"/ws\")\n    async def websocket_endpoint(websocket: WebSocket):\n        await websocket.accept()\n        while True:\n            data = await websocket.receive_text()\n            await websocket.send_text(f\"Message text was: {data}\")\n\n    app.include_router(router)\n    ```\n    \"\"\"\n\n    def decorator(func: DecoratedCallable) -&gt; DecoratedCallable:\n        self.add_api_websocket_route(\n            path, func, name=name, dependencies=dependencies\n        )\n        return func\n\n    return decorator\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.include_router","title":"include_router","text":"<pre><code>include_router(\n    router,\n    *,\n    prefix=\"\",\n    tags=None,\n    dependencies=None,\n    default_response_class=Default(JSONResponse),\n    responses=None,\n    callbacks=None,\n    deprecated=None,\n    include_in_schema=True,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Include another <code>APIRouter</code> in the same current <code>APIRouter</code>.</p> <p>Read more about it in the ReadyAPI docs for Bigger Applications.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.include_router--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\n\napp = ReadyAPI()\ninternal_router = APIRouter()\nusers_router = APIRouter()\n\n@users_router.get(\"/users/\")\ndef read_users():\n    return [{\"name\": \"Rick\"}, {\"name\": \"Morty\"}]\n\ninternal_router.include_router(users_router)\napp.include_router(internal_router)\n</code></pre> PARAMETER DESCRIPTION <code>router</code> <p>The <code>APIRouter</code> to include.</p> <p> TYPE: <code>APIRouter</code> </p> <code>prefix</code> <p>An optional path prefix for the router.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>tags</code> <p>A list of tags to be applied to all the path operations in this router.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to all the path operations in this router.</p> <p>Read more about it in the ReadyAPI docs for Bigger Applications - Multiple Files.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>default_response_class</code> <p>The default response class to be used.</p> <p>Read more in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>responses</code> <p>Additional responses to be shown in OpenAPI.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Additional Responses in OpenAPI.</p> <p>And in the ReadyAPI docs for Bigger Applications.</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>OpenAPI callbacks that should apply to all path operations in this router.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark all path operations in this router as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>Include (or not) all the path operations in this router in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def include_router(\n    self,\n    router: Annotated[\"APIRouter\", Doc(\"The `APIRouter` to include.\")],\n    *,\n    prefix: Annotated[str, Doc(\"An optional path prefix for the router.\")] = \"\",\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to all the *path operations* in this\n            router.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to all the\n            *path operations* in this router.\n\n            Read more about it in the\n            [ReadyAPI docs for Bigger Applications - Multiple Files](https://readyapi.github.io/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n            \"\"\"\n        ),\n    ] = None,\n    default_response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            The default response class to be used.\n\n            Read more in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#default-response-class).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses to be shown in OpenAPI.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Additional Responses in OpenAPI](https://readyapi.github.io/advanced/additional-responses/).\n\n            And in the\n            [ReadyAPI docs for Bigger Applications](https://readyapi.github.io/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            OpenAPI callbacks that should apply to all *path operations* in this\n            router.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark all *path operations* in this router as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include (or not) all the *path operations* in this router in the\n            generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; None:\n    \"\"\"\n    Include another `APIRouter` in the same current `APIRouter`.\n\n    Read more about it in the\n    [ReadyAPI docs for Bigger Applications](https://readyapi.github.io/tutorial/bigger-applications/).\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI\n\n    app = ReadyAPI()\n    internal_router = APIRouter()\n    users_router = APIRouter()\n\n    @users_router.get(\"/users/\")\n    def read_users():\n        return [{\"name\": \"Rick\"}, {\"name\": \"Morty\"}]\n\n    internal_router.include_router(users_router)\n    app.include_router(internal_router)\n    ```\n    \"\"\"\n    if prefix:\n        assert prefix.startswith(\"/\"), \"A path prefix must start with '/'\"\n        assert not prefix.endswith(\"/\"), (\n            \"A path prefix must not end with '/', as the routes will start with '/'\"\n        )\n    else:\n        for r in router.routes:\n            path = getattr(r, \"path\")  # noqa: B009\n            name = getattr(r, \"name\", \"unknown\")\n            if path is not None and not path:\n                raise ReadyAPIError(\n                    f\"Prefix and path cannot be both empty (path operation: {name})\"\n                )\n    if responses is None:\n        responses = {}\n    for route in router.routes:\n        if isinstance(route, APIRoute):\n            combined_responses = {**responses, **route.responses}\n            use_response_class = get_value_or_default(\n                route.response_class,\n                router.default_response_class,\n                default_response_class,\n                self.default_response_class,\n            )\n            current_tags = []\n            if tags:\n                current_tags.extend(tags)\n            if route.tags:\n                current_tags.extend(route.tags)\n            current_dependencies: List[params.Depends] = []\n            if dependencies:\n                current_dependencies.extend(dependencies)\n            if route.dependencies:\n                current_dependencies.extend(route.dependencies)\n            current_callbacks = []\n            if callbacks:\n                current_callbacks.extend(callbacks)\n            if route.callbacks:\n                current_callbacks.extend(route.callbacks)\n            current_generate_unique_id = get_value_or_default(\n                route.generate_unique_id_function,\n                router.generate_unique_id_function,\n                generate_unique_id_function,\n                self.generate_unique_id_function,\n            )\n            self.add_api_route(\n                prefix + route.path,\n                route.endpoint,\n                response_model=route.response_model,\n                status_code=route.status_code,\n                tags=current_tags,\n                dependencies=current_dependencies,\n                summary=route.summary,\n                description=route.description,\n                response_description=route.response_description,\n                responses=combined_responses,\n                deprecated=route.deprecated or deprecated or self.deprecated,\n                methods=route.methods,\n                operation_id=route.operation_id,\n                response_model_include=route.response_model_include,\n                response_model_exclude=route.response_model_exclude,\n                response_model_by_alias=route.response_model_by_alias,\n                response_model_exclude_unset=route.response_model_exclude_unset,\n                response_model_exclude_defaults=route.response_model_exclude_defaults,\n                response_model_exclude_none=route.response_model_exclude_none,\n                include_in_schema=route.include_in_schema\n                and self.include_in_schema\n                and include_in_schema,\n                response_class=use_response_class,\n                name=route.name,\n                route_class_override=type(route),\n                callbacks=current_callbacks,\n                openapi_extra=route.openapi_extra,\n                generate_unique_id_function=current_generate_unique_id,\n            )\n        elif isinstance(route, routing.Route):\n            methods = list(route.methods or [])\n            self.add_route(\n                prefix + route.path,\n                route.endpoint,\n                methods=methods,\n                include_in_schema=route.include_in_schema,\n                name=route.name,\n            )\n        elif isinstance(route, APIWebSocketRoute):\n            current_dependencies = []\n            if dependencies:\n                current_dependencies.extend(dependencies)\n            if route.dependencies:\n                current_dependencies.extend(route.dependencies)\n            self.add_api_websocket_route(\n                prefix + route.path,\n                route.endpoint,\n                dependencies=current_dependencies,\n                name=route.name,\n            )\n        elif isinstance(route, routing.WebSocketRoute):\n            self.add_websocket_route(\n                prefix + route.path, route.endpoint, name=route.name\n            )\n    for handler in router.on_startup:\n        self.add_event_handler(\"startup\", handler)\n    for handler in router.on_shutdown:\n        self.add_event_handler(\"shutdown\", handler)\n    self.lifespan_context = _merge_lifespan_context(\n        self.lifespan_context,\n        router.lifespan_context,\n    )\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.get","title":"get","text":"<pre><code>get(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP GET operation.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.get--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n@router.get(\"/items/\")\ndef read_items():\n    return [{\"name\": \"Empanada\"}, {\"name\": \"Arepa\"}]\n\napp.include_router(router)\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def get(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.github.io/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.github.io/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.github.io/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.github.io/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP GET operation.\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI\n\n    app = ReadyAPI()\n    router = APIRouter()\n\n    @router.get(\"/items/\")\n    def read_items():\n        return [{\"name\": \"Empanada\"}, {\"name\": \"Arepa\"}]\n\n    app.include_router(router)\n    ```\n    \"\"\"\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        methods=[\"GET\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.put","title":"put","text":"<pre><code>put(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP PUT operation.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.put--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n@router.put(\"/items/{item_id}\")\ndef replace_item(item_id: str, item: Item):\n    return {\"message\": \"Item replaced\", \"id\": item_id}\n\napp.include_router(router)\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def put(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.github.io/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.github.io/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.github.io/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.github.io/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP PUT operation.\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI\n    from pydantic import BaseModel\n\n    class Item(BaseModel):\n        name: str\n        description: str | None = None\n\n    app = ReadyAPI()\n    router = APIRouter()\n\n    @router.put(\"/items/{item_id}\")\n    def replace_item(item_id: str, item: Item):\n        return {\"message\": \"Item replaced\", \"id\": item_id}\n\n    app.include_router(router)\n    ```\n    \"\"\"\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        methods=[\"PUT\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.post","title":"post","text":"<pre><code>post(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP POST operation.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.post--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n@router.post(\"/items/\")\ndef create_item(item: Item):\n    return {\"message\": \"Item created\"}\n\napp.include_router(router)\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def post(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.github.io/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.github.io/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.github.io/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.github.io/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP POST operation.\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI\n    from pydantic import BaseModel\n\n    class Item(BaseModel):\n        name: str\n        description: str | None = None\n\n    app = ReadyAPI()\n    router = APIRouter()\n\n    @router.post(\"/items/\")\n    def create_item(item: Item):\n        return {\"message\": \"Item created\"}\n\n    app.include_router(router)\n    ```\n    \"\"\"\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        methods=[\"POST\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.delete","title":"delete","text":"<pre><code>delete(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP DELETE operation.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.delete--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n@router.delete(\"/items/{item_id}\")\ndef delete_item(item_id: str):\n    return {\"message\": \"Item deleted\"}\n\napp.include_router(router)\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def delete(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.github.io/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.github.io/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.github.io/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.github.io/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP DELETE operation.\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI\n\n    app = ReadyAPI()\n    router = APIRouter()\n\n    @router.delete(\"/items/{item_id}\")\n    def delete_item(item_id: str):\n        return {\"message\": \"Item deleted\"}\n\n    app.include_router(router)\n    ```\n    \"\"\"\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        methods=[\"DELETE\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.options","title":"options","text":"<pre><code>options(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP OPTIONS operation.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.options--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n@router.options(\"/items/\")\ndef get_item_options():\n    return {\"additions\": [\"Aji\", \"Guacamole\"]}\n\napp.include_router(router)\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def options(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.github.io/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.github.io/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.github.io/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.github.io/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP OPTIONS operation.\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI\n\n    app = ReadyAPI()\n    router = APIRouter()\n\n    @router.options(\"/items/\")\n    def get_item_options():\n        return {\"additions\": [\"Aji\", \"Guacamole\"]}\n\n    app.include_router(router)\n    ```\n    \"\"\"\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        methods=[\"OPTIONS\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.head","title":"head","text":"<pre><code>head(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP HEAD operation.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.head--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n@router.head(\"/items/\", status_code=204)\ndef get_items_headers(response: Response):\n    response.headers[\"X-Cat-Dog\"] = \"Alone in the world\"\n\napp.include_router(router)\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def head(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.github.io/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.github.io/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.github.io/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.github.io/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP HEAD operation.\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI\n    from pydantic import BaseModel\n\n    class Item(BaseModel):\n        name: str\n        description: str | None = None\n\n    app = ReadyAPI()\n    router = APIRouter()\n\n    @router.head(\"/items/\", status_code=204)\n    def get_items_headers(response: Response):\n        response.headers[\"X-Cat-Dog\"] = \"Alone in the world\"\n\n    app.include_router(router)\n    ```\n    \"\"\"\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        methods=[\"HEAD\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.patch","title":"patch","text":"<pre><code>patch(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP PATCH operation.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.patch--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n@router.patch(\"/items/\")\ndef update_item(item: Item):\n    return {\"message\": \"Item updated in place\"}\n\napp.include_router(router)\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def patch(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.github.io/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.github.io/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.github.io/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.github.io/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP PATCH operation.\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI\n    from pydantic import BaseModel\n\n    class Item(BaseModel):\n        name: str\n        description: str | None = None\n\n    app = ReadyAPI()\n    router = APIRouter()\n\n    @router.patch(\"/items/\")\n    def update_item(item: Item):\n        return {\"message\": \"Item updated in place\"}\n\n    app.include_router(router)\n    ```\n    \"\"\"\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        methods=[\"PATCH\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.trace","title":"trace","text":"<pre><code>trace(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP TRACE operation.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.trace--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n@router.trace(\"/items/{item_id}\")\ndef trace_item(item_id: str):\n    return None\n\napp.include_router(router)\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def trace(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.github.io/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.github.io/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.github.io/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.github.io/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP TRACE operation.\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI\n    from pydantic import BaseModel\n\n    class Item(BaseModel):\n        name: str\n        description: str | None = None\n\n    app = ReadyAPI()\n    router = APIRouter()\n\n    @router.trace(\"/items/{item_id}\")\n    def trace_item(item_id: str):\n        return None\n\n    app.include_router(router)\n    ```\n    \"\"\"\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        methods=[\"TRACE\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.on_event","title":"on_event","text":"<pre><code>on_event(event_type)\n</code></pre> <p>Add an event handler for the router.</p> <p><code>on_event</code> is deprecated, use <code>lifespan</code> event handlers instead.</p> <p>Read more about it in the ReadyAPI docs for Lifespan Events.</p> PARAMETER DESCRIPTION <code>event_type</code> <p>The type of event. <code>startup</code> or <code>shutdown</code>.</p> <p> TYPE: <code>str</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>@deprecated(\n    \"\"\"\n    on_event is deprecated, use lifespan event handlers instead.\n\n    Read more about it in the\n    [ReadyAPI docs for Lifespan Events](https://readyapi.github.io/advanced/events/).\n    \"\"\"\n)\ndef on_event(\n    self,\n    event_type: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The type of event. `startup` or `shutdown`.\n            \"\"\"\n        ),\n    ],\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add an event handler for the router.\n\n    `on_event` is deprecated, use `lifespan` event handlers instead.\n\n    Read more about it in the\n    [ReadyAPI docs for Lifespan Events](https://readyapi.github.io/advanced/events/#alternative-events-deprecated).\n    \"\"\"\n\n    def decorator(func: DecoratedCallable) -&gt; DecoratedCallable:\n        self.add_event_handler(event_type, func)\n        return func\n\n    return decorator\n</code></pre>"},{"location":"reference/background/","title":"Background Tasks - <code>BackgroundTasks</code>","text":"<p>You can declare a parameter in a path operation function or dependency function with the type <code>BackgroundTasks</code>, and then you can use it to schedule the execution of background tasks after the response is sent.</p> <p>You can import it directly from <code>readyapi</code>:</p> <pre><code>from readyapi import BackgroundTasks\n</code></pre>"},{"location":"reference/background/#readyapi.BackgroundTasks","title":"readyapi.BackgroundTasks","text":"<pre><code>BackgroundTasks(tasks=None)\n</code></pre> <p>               Bases: <code>BackgroundTasks</code></p> <p>A collection of background tasks that will be called after a response has been sent to the client.</p> <p>Read more about it in the ReadyAPI docs for Background Tasks.</p>"},{"location":"reference/background/#readyapi.BackgroundTasks--example","title":"Example","text":"<pre><code>from readyapi import BackgroundTasks, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef write_notification(email: str, message=\"\"):\n    with open(\"log.txt\", mode=\"w\") as email_file:\n        content = f\"notification for {email}: {message}\"\n        email_file.write(content)\n\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(email: str, background_tasks: BackgroundTasks):\n    background_tasks.add_task(write_notification, email, message=\"some notification\")\n    return {\"message\": \"Notification sent in the background\"}\n</code></pre> PARAMETER DESCRIPTION <code>tasks</code> <p> TYPE: <code>Sequence[BackgroundTask] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/background.py</code> <pre><code>def __init__(self, tasks: typing.Sequence[BackgroundTask] | None = None):\n    self.tasks = list(tasks) if tasks else []\n</code></pre>"},{"location":"reference/background/#readyapi.BackgroundTasks.func","title":"func  <code>instance-attribute</code>","text":"<pre><code>func = func\n</code></pre>"},{"location":"reference/background/#readyapi.BackgroundTasks.args","title":"args  <code>instance-attribute</code>","text":"<pre><code>args = args\n</code></pre>"},{"location":"reference/background/#readyapi.BackgroundTasks.kwargs","title":"kwargs  <code>instance-attribute</code>","text":"<pre><code>kwargs = kwargs\n</code></pre>"},{"location":"reference/background/#readyapi.BackgroundTasks.is_async","title":"is_async  <code>instance-attribute</code>","text":"<pre><code>is_async = is_async_callable(func)\n</code></pre>"},{"location":"reference/background/#readyapi.BackgroundTasks.tasks","title":"tasks  <code>instance-attribute</code>","text":"<pre><code>tasks = list(tasks) if tasks else []\n</code></pre>"},{"location":"reference/background/#readyapi.BackgroundTasks.add_task","title":"add_task","text":"<pre><code>add_task(func, *args, **kwargs)\n</code></pre> <p>Add a function to be called in the background after the response is sent.</p> <p>Read more about it in the ReadyAPI docs for Background Tasks.</p> PARAMETER DESCRIPTION <code>func</code> <p>The function to call after the response is sent.</p> <p>It can be a regular <code>def</code> function or an <code>async def</code> function.</p> <p> TYPE: <code>Callable[P, Any]</code> </p> <code>*args</code> <p> TYPE: <code>args</code> DEFAULT: <code>()</code> </p> <code>**kwargs</code> <p> TYPE: <code>kwargs</code> DEFAULT: <code>{}</code> </p> Source code in <code>readyapi/background.py</code> <pre><code>def add_task(\n    self,\n    func: Annotated[\n        Callable[P, Any],\n        Doc(\n            \"\"\"\n            The function to call after the response is sent.\n\n            It can be a regular `def` function or an `async def` function.\n            \"\"\"\n        ),\n    ],\n    *args: P.args,\n    **kwargs: P.kwargs,\n) -&gt; None:\n    \"\"\"\n    Add a function to be called in the background after the response is sent.\n\n    Read more about it in the\n    [ReadyAPI docs for Background Tasks](https://readyapi.github.io/tutorial/background-tasks/).\n    \"\"\"\n    return super().add_task(func, *args, **kwargs)\n</code></pre>"},{"location":"reference/request/","title":"<code>Request</code> class","text":"<p>You can declare a parameter in a path operation function or dependency to be of type <code>Request</code> and then you can access the raw request object directly, without any validation, etc.</p> <p>You can import it directly from <code>readyapi</code>:</p> <pre><code>from readyapi import Request\n</code></pre> <p>Tip</p> <p>When you want to define dependencies that should be compatible with both HTTP and WebSockets, you can define a parameter that takes an <code>HTTPConnection</code> instead of a <code>Request</code> or a <code>WebSocket</code>.</p>"},{"location":"reference/request/#readyapi.Request","title":"readyapi.Request","text":"<pre><code>Request(scope, receive=empty_receive, send=empty_send)\n</code></pre> <p>               Bases: <code>HTTPConnection</code></p> PARAMETER DESCRIPTION <code>scope</code> <p> TYPE: <code>Scope</code> </p> <code>receive</code> <p> TYPE: <code>Receive</code> DEFAULT: <code>empty_receive</code> </p> <code>send</code> <p> TYPE: <code>Send</code> DEFAULT: <code>empty_send</code> </p> Source code in <code>starlette/requests.py</code> <pre><code>def __init__(self, scope: Scope, receive: Receive = empty_receive, send: Send = empty_send):\n    super().__init__(scope)\n    assert scope[\"type\"] == \"http\"\n    self._receive = receive\n    self._send = send\n    self._stream_consumed = False\n    self._is_disconnected = False\n    self._form = None\n</code></pre>"},{"location":"reference/request/#readyapi.Request.scope","title":"scope  <code>instance-attribute</code>","text":"<pre><code>scope = scope\n</code></pre>"},{"location":"reference/request/#readyapi.Request.app","title":"app  <code>property</code>","text":"<pre><code>app\n</code></pre>"},{"location":"reference/request/#readyapi.Request.url","title":"url  <code>property</code>","text":"<pre><code>url\n</code></pre>"},{"location":"reference/request/#readyapi.Request.base_url","title":"base_url  <code>property</code>","text":"<pre><code>base_url\n</code></pre>"},{"location":"reference/request/#readyapi.Request.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/request/#readyapi.Request.query_params","title":"query_params  <code>property</code>","text":"<pre><code>query_params\n</code></pre>"},{"location":"reference/request/#readyapi.Request.path_params","title":"path_params  <code>property</code>","text":"<pre><code>path_params\n</code></pre>"},{"location":"reference/request/#readyapi.Request.cookies","title":"cookies  <code>property</code>","text":"<pre><code>cookies\n</code></pre>"},{"location":"reference/request/#readyapi.Request.client","title":"client  <code>property</code>","text":"<pre><code>client\n</code></pre>"},{"location":"reference/request/#readyapi.Request.session","title":"session  <code>property</code>","text":"<pre><code>session\n</code></pre>"},{"location":"reference/request/#readyapi.Request.auth","title":"auth  <code>property</code>","text":"<pre><code>auth\n</code></pre>"},{"location":"reference/request/#readyapi.Request.user","title":"user  <code>property</code>","text":"<pre><code>user\n</code></pre>"},{"location":"reference/request/#readyapi.Request.state","title":"state  <code>property</code>","text":"<pre><code>state\n</code></pre>"},{"location":"reference/request/#readyapi.Request.method","title":"method  <code>property</code>","text":"<pre><code>method\n</code></pre>"},{"location":"reference/request/#readyapi.Request.receive","title":"receive  <code>property</code>","text":"<pre><code>receive\n</code></pre>"},{"location":"reference/request/#readyapi.Request.url_for","title":"url_for","text":"<pre><code>url_for(name, /, **path_params)\n</code></pre> PARAMETER DESCRIPTION <code>name</code> <p> TYPE: <code>str</code> </p> <code>**path_params</code> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>starlette/requests.py</code> <pre><code>def url_for(self, name: str, /, **path_params: typing.Any) -&gt; URL:\n    url_path_provider: Router | Starlette | None = self.scope.get(\"router\") or self.scope.get(\"app\")\n    if url_path_provider is None:\n        raise RuntimeError(\"The `url_for` method can only be used inside a Starlette application or with a router.\")\n    url_path = url_path_provider.url_path_for(name, **path_params)\n    return url_path.make_absolute_url(base_url=self.base_url)\n</code></pre>"},{"location":"reference/request/#readyapi.Request.stream","title":"stream  <code>async</code>","text":"<pre><code>stream()\n</code></pre> Source code in <code>starlette/requests.py</code> <pre><code>async def stream(self) -&gt; typing.AsyncGenerator[bytes, None]:\n    if hasattr(self, \"_body\"):\n        yield self._body\n        yield b\"\"\n        return\n    if self._stream_consumed:\n        raise RuntimeError(\"Stream consumed\")\n    while not self._stream_consumed:\n        message = await self._receive()\n        if message[\"type\"] == \"http.request\":\n            body = message.get(\"body\", b\"\")\n            if not message.get(\"more_body\", False):\n                self._stream_consumed = True\n            if body:\n                yield body\n        elif message[\"type\"] == \"http.disconnect\":  # pragma: no branch\n            self._is_disconnected = True\n            raise ClientDisconnect()\n    yield b\"\"\n</code></pre>"},{"location":"reference/request/#readyapi.Request.body","title":"body  <code>async</code>","text":"<pre><code>body()\n</code></pre> Source code in <code>starlette/requests.py</code> <pre><code>async def body(self) -&gt; bytes:\n    if not hasattr(self, \"_body\"):\n        chunks: list[bytes] = []\n        async for chunk in self.stream():\n            chunks.append(chunk)\n        self._body = b\"\".join(chunks)\n    return self._body\n</code></pre>"},{"location":"reference/request/#readyapi.Request.json","title":"json  <code>async</code>","text":"<pre><code>json()\n</code></pre> Source code in <code>starlette/requests.py</code> <pre><code>async def json(self) -&gt; typing.Any:\n    if not hasattr(self, \"_json\"):  # pragma: no branch\n        body = await self.body()\n        self._json = json.loads(body)\n    return self._json\n</code></pre>"},{"location":"reference/request/#readyapi.Request.form","title":"form","text":"<pre><code>form(\n    *,\n    max_files=1000,\n    max_fields=1000,\n    max_part_size=1024 * 1024\n)\n</code></pre> PARAMETER DESCRIPTION <code>max_files</code> <p> TYPE: <code>int | float</code> DEFAULT: <code>1000</code> </p> <code>max_fields</code> <p> TYPE: <code>int | float</code> DEFAULT: <code>1000</code> </p> <code>max_part_size</code> <p> TYPE: <code>int</code> DEFAULT: <code>1024 * 1024</code> </p> Source code in <code>starlette/requests.py</code> <pre><code>def form(\n    self,\n    *,\n    max_files: int | float = 1000,\n    max_fields: int | float = 1000,\n    max_part_size: int = 1024 * 1024,\n) -&gt; AwaitableOrContextManager[FormData]:\n    return AwaitableOrContextManagerWrapper(\n        self._get_form(max_files=max_files, max_fields=max_fields, max_part_size=max_part_size)\n    )\n</code></pre>"},{"location":"reference/request/#readyapi.Request.close","title":"close  <code>async</code>","text":"<pre><code>close()\n</code></pre> Source code in <code>starlette/requests.py</code> <pre><code>async def close(self) -&gt; None:\n    if self._form is not None:  # pragma: no branch\n        await self._form.close()\n</code></pre>"},{"location":"reference/request/#readyapi.Request.is_disconnected","title":"is_disconnected  <code>async</code>","text":"<pre><code>is_disconnected()\n</code></pre> Source code in <code>starlette/requests.py</code> <pre><code>async def is_disconnected(self) -&gt; bool:\n    if not self._is_disconnected:\n        message: Message = {}\n\n        # If message isn't immediately available, move on\n        with anyio.CancelScope() as cs:\n            cs.cancel()\n            message = await self._receive()\n\n        if message.get(\"type\") == \"http.disconnect\":\n            self._is_disconnected = True\n\n    return self._is_disconnected\n</code></pre>"},{"location":"reference/request/#readyapi.Request.send_push_promise","title":"send_push_promise  <code>async</code>","text":"<pre><code>send_push_promise(path)\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p> TYPE: <code>str</code> </p> Source code in <code>starlette/requests.py</code> <pre><code>async def send_push_promise(self, path: str) -&gt; None:\n    if \"http.response.push\" in self.scope.get(\"extensions\", {}):\n        raw_headers: list[tuple[bytes, bytes]] = []\n        for name in SERVER_PUSH_HEADERS_TO_COPY:\n            for value in self.headers.getlist(name):\n                raw_headers.append((name.encode(\"latin-1\"), value.encode(\"latin-1\")))\n        await self._send({\"type\": \"http.response.push\", \"path\": path, \"headers\": raw_headers})\n</code></pre>"},{"location":"reference/websockets/","title":"WebSockets","text":"<p>When defining WebSockets, you normally declare a parameter of type <code>WebSocket</code> and with it you can read data from the client and send data to it.</p> <p>It is provided directly by Starlette, but you can import it from <code>readyapi</code>:</p> <pre><code>from readyapi import WebSocket\n</code></pre> <p>Tip</p> <p>When you want to define dependencies that should be compatible with both HTTP and WebSockets, you can define a parameter that takes an <code>HTTPConnection</code> instead of a <code>Request</code> or a <code>WebSocket</code>.</p> <p>When a client disconnects, a <code>WebSocketDisconnect</code> exception is raised, you can catch it.</p> <p>You can import it directly form <code>readyapi</code>:</p> <pre><code>from readyapi import WebSocketDisconnect\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket","title":"readyapi.WebSocket","text":"<pre><code>WebSocket(scope, receive, send)\n</code></pre> <p>               Bases: <code>HTTPConnection</code></p> PARAMETER DESCRIPTION <code>scope</code> <p> TYPE: <code>Scope</code> </p> <code>receive</code> <p> TYPE: <code>Receive</code> </p> <code>send</code> <p> TYPE: <code>Send</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>def __init__(self, scope: Scope, receive: Receive, send: Send) -&gt; None:\n    super().__init__(scope)\n    assert scope[\"type\"] == \"websocket\"\n    self._receive = receive\n    self._send = send\n    self.client_state = WebSocketState.CONNECTING\n    self.application_state = WebSocketState.CONNECTING\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.scope","title":"scope  <code>instance-attribute</code>","text":"<pre><code>scope = scope\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.app","title":"app  <code>property</code>","text":"<pre><code>app\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.url","title":"url  <code>property</code>","text":"<pre><code>url\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.base_url","title":"base_url  <code>property</code>","text":"<pre><code>base_url\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.query_params","title":"query_params  <code>property</code>","text":"<pre><code>query_params\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.path_params","title":"path_params  <code>property</code>","text":"<pre><code>path_params\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.cookies","title":"cookies  <code>property</code>","text":"<pre><code>cookies\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.client","title":"client  <code>property</code>","text":"<pre><code>client\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.state","title":"state  <code>property</code>","text":"<pre><code>state\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.client_state","title":"client_state  <code>instance-attribute</code>","text":"<pre><code>client_state = CONNECTING\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.application_state","title":"application_state  <code>instance-attribute</code>","text":"<pre><code>application_state = CONNECTING\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.url_for","title":"url_for","text":"<pre><code>url_for(name, /, **path_params)\n</code></pre> PARAMETER DESCRIPTION <code>name</code> <p> TYPE: <code>str</code> </p> <code>**path_params</code> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>starlette/requests.py</code> <pre><code>def url_for(self, name: str, /, **path_params: typing.Any) -&gt; URL:\n    url_path_provider: Router | Starlette | None = self.scope.get(\"router\") or self.scope.get(\"app\")\n    if url_path_provider is None:\n        raise RuntimeError(\"The `url_for` method can only be used inside a Starlette application or with a router.\")\n    url_path = url_path_provider.url_path_for(name, **path_params)\n    return url_path.make_absolute_url(base_url=self.base_url)\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.receive","title":"receive  <code>async</code>","text":"<pre><code>receive()\n</code></pre> <p>Receive ASGI websocket messages, ensuring valid state transitions.</p> Source code in <code>starlette/websockets.py</code> <pre><code>async def receive(self) -&gt; Message:\n    \"\"\"\n    Receive ASGI websocket messages, ensuring valid state transitions.\n    \"\"\"\n    if self.client_state == WebSocketState.CONNECTING:\n        message = await self._receive()\n        message_type = message[\"type\"]\n        if message_type != \"websocket.connect\":\n            raise RuntimeError(f'Expected ASGI message \"websocket.connect\", but got {message_type!r}')\n        self.client_state = WebSocketState.CONNECTED\n        return message\n    elif self.client_state == WebSocketState.CONNECTED:\n        message = await self._receive()\n        message_type = message[\"type\"]\n        if message_type not in {\"websocket.receive\", \"websocket.disconnect\"}:\n            raise RuntimeError(\n                f'Expected ASGI message \"websocket.receive\" or \"websocket.disconnect\", but got {message_type!r}'\n            )\n        if message_type == \"websocket.disconnect\":\n            self.client_state = WebSocketState.DISCONNECTED\n        return message\n    else:\n        raise RuntimeError('Cannot call \"receive\" once a disconnect message has been received.')\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.send","title":"send  <code>async</code>","text":"<pre><code>send(message)\n</code></pre> <p>Send ASGI websocket messages, ensuring valid state transitions.</p> PARAMETER DESCRIPTION <code>message</code> <p> TYPE: <code>Message</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>async def send(self, message: Message) -&gt; None:\n    \"\"\"\n    Send ASGI websocket messages, ensuring valid state transitions.\n    \"\"\"\n    if self.application_state == WebSocketState.CONNECTING:\n        message_type = message[\"type\"]\n        if message_type not in {\"websocket.accept\", \"websocket.close\", \"websocket.http.response.start\"}:\n            raise RuntimeError(\n                'Expected ASGI message \"websocket.accept\", \"websocket.close\" or \"websocket.http.response.start\", '\n                f\"but got {message_type!r}\"\n            )\n        if message_type == \"websocket.close\":\n            self.application_state = WebSocketState.DISCONNECTED\n        elif message_type == \"websocket.http.response.start\":\n            self.application_state = WebSocketState.RESPONSE\n        else:\n            self.application_state = WebSocketState.CONNECTED\n        await self._send(message)\n    elif self.application_state == WebSocketState.CONNECTED:\n        message_type = message[\"type\"]\n        if message_type not in {\"websocket.send\", \"websocket.close\"}:\n            raise RuntimeError(\n                f'Expected ASGI message \"websocket.send\" or \"websocket.close\", but got {message_type!r}'\n            )\n        if message_type == \"websocket.close\":\n            self.application_state = WebSocketState.DISCONNECTED\n        try:\n            await self._send(message)\n        except OSError:\n            self.application_state = WebSocketState.DISCONNECTED\n            raise WebSocketDisconnect(code=1006)\n    elif self.application_state == WebSocketState.RESPONSE:\n        message_type = message[\"type\"]\n        if message_type != \"websocket.http.response.body\":\n            raise RuntimeError(f'Expected ASGI message \"websocket.http.response.body\", but got {message_type!r}')\n        if not message.get(\"more_body\", False):\n            self.application_state = WebSocketState.DISCONNECTED\n        await self._send(message)\n    else:\n        raise RuntimeError('Cannot call \"send\" once a close message has been sent.')\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.accept","title":"accept  <code>async</code>","text":"<pre><code>accept(subprotocol=None, headers=None)\n</code></pre> PARAMETER DESCRIPTION <code>subprotocol</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>Iterable[tuple[bytes, bytes]] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>async def accept(\n    self,\n    subprotocol: str | None = None,\n    headers: typing.Iterable[tuple[bytes, bytes]] | None = None,\n) -&gt; None:\n    headers = headers or []\n\n    if self.client_state == WebSocketState.CONNECTING:  # pragma: no branch\n        # If we haven't yet seen the 'connect' message, then wait for it first.\n        await self.receive()\n    await self.send({\"type\": \"websocket.accept\", \"subprotocol\": subprotocol, \"headers\": headers})\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.receive_text","title":"receive_text  <code>async</code>","text":"<pre><code>receive_text()\n</code></pre> Source code in <code>starlette/websockets.py</code> <pre><code>async def receive_text(self) -&gt; str:\n    if self.application_state != WebSocketState.CONNECTED:\n        raise RuntimeError('WebSocket is not connected. Need to call \"accept\" first.')\n    message = await self.receive()\n    self._raise_on_disconnect(message)\n    return typing.cast(str, message[\"text\"])\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.receive_bytes","title":"receive_bytes  <code>async</code>","text":"<pre><code>receive_bytes()\n</code></pre> Source code in <code>starlette/websockets.py</code> <pre><code>async def receive_bytes(self) -&gt; bytes:\n    if self.application_state != WebSocketState.CONNECTED:\n        raise RuntimeError('WebSocket is not connected. Need to call \"accept\" first.')\n    message = await self.receive()\n    self._raise_on_disconnect(message)\n    return typing.cast(bytes, message[\"bytes\"])\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.receive_json","title":"receive_json  <code>async</code>","text":"<pre><code>receive_json(mode='text')\n</code></pre> PARAMETER DESCRIPTION <code>mode</code> <p> TYPE: <code>str</code> DEFAULT: <code>'text'</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>async def receive_json(self, mode: str = \"text\") -&gt; typing.Any:\n    if mode not in {\"text\", \"binary\"}:\n        raise RuntimeError('The \"mode\" argument should be \"text\" or \"binary\".')\n    if self.application_state != WebSocketState.CONNECTED:\n        raise RuntimeError('WebSocket is not connected. Need to call \"accept\" first.')\n    message = await self.receive()\n    self._raise_on_disconnect(message)\n\n    if mode == \"text\":\n        text = message[\"text\"]\n    else:\n        text = message[\"bytes\"].decode(\"utf-8\")\n    return json.loads(text)\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.iter_text","title":"iter_text  <code>async</code>","text":"<pre><code>iter_text()\n</code></pre> Source code in <code>starlette/websockets.py</code> <pre><code>async def iter_text(self) -&gt; typing.AsyncIterator[str]:\n    try:\n        while True:\n            yield await self.receive_text()\n    except WebSocketDisconnect:\n        pass\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.iter_bytes","title":"iter_bytes  <code>async</code>","text":"<pre><code>iter_bytes()\n</code></pre> Source code in <code>starlette/websockets.py</code> <pre><code>async def iter_bytes(self) -&gt; typing.AsyncIterator[bytes]:\n    try:\n        while True:\n            yield await self.receive_bytes()\n    except WebSocketDisconnect:\n        pass\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.iter_json","title":"iter_json  <code>async</code>","text":"<pre><code>iter_json()\n</code></pre> Source code in <code>starlette/websockets.py</code> <pre><code>async def iter_json(self) -&gt; typing.AsyncIterator[typing.Any]:\n    try:\n        while True:\n            yield await self.receive_json()\n    except WebSocketDisconnect:\n        pass\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.send_text","title":"send_text  <code>async</code>","text":"<pre><code>send_text(data)\n</code></pre> PARAMETER DESCRIPTION <code>data</code> <p> TYPE: <code>str</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>async def send_text(self, data: str) -&gt; None:\n    await self.send({\"type\": \"websocket.send\", \"text\": data})\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.send_bytes","title":"send_bytes  <code>async</code>","text":"<pre><code>send_bytes(data)\n</code></pre> PARAMETER DESCRIPTION <code>data</code> <p> TYPE: <code>bytes</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>async def send_bytes(self, data: bytes) -&gt; None:\n    await self.send({\"type\": \"websocket.send\", \"bytes\": data})\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.send_json","title":"send_json  <code>async</code>","text":"<pre><code>send_json(data, mode='text')\n</code></pre> PARAMETER DESCRIPTION <code>data</code> <p> TYPE: <code>Any</code> </p> <code>mode</code> <p> TYPE: <code>str</code> DEFAULT: <code>'text'</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>async def send_json(self, data: typing.Any, mode: str = \"text\") -&gt; None:\n    if mode not in {\"text\", \"binary\"}:\n        raise RuntimeError('The \"mode\" argument should be \"text\" or \"binary\".')\n    text = json.dumps(data, separators=(\",\", \":\"), ensure_ascii=False)\n    if mode == \"text\":\n        await self.send({\"type\": \"websocket.send\", \"text\": text})\n    else:\n        await self.send({\"type\": \"websocket.send\", \"bytes\": text.encode(\"utf-8\")})\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.close","title":"close  <code>async</code>","text":"<pre><code>close(code=1000, reason=None)\n</code></pre> PARAMETER DESCRIPTION <code>code</code> <p> TYPE: <code>int</code> DEFAULT: <code>1000</code> </p> <code>reason</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>async def close(self, code: int = 1000, reason: str | None = None) -&gt; None:\n    await self.send({\"type\": \"websocket.close\", \"code\": code, \"reason\": reason or \"\"})\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocketDisconnect","title":"readyapi.WebSocketDisconnect","text":"<pre><code>WebSocketDisconnect(code=1000, reason=None)\n</code></pre> <p>               Bases: <code>Exception</code></p> PARAMETER DESCRIPTION <code>code</code> <p> TYPE: <code>int</code> DEFAULT: <code>1000</code> </p> <code>reason</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>def __init__(self, code: int = 1000, reason: str | None = None) -&gt; None:\n    self.code = code\n    self.reason = reason or \"\"\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocketDisconnect.code","title":"code  <code>instance-attribute</code>","text":"<pre><code>code = code\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocketDisconnect.reason","title":"reason  <code>instance-attribute</code>","text":"<pre><code>reason = reason or ''\n</code></pre>"},{"location":"reference/websockets/#websockets-additional-classes","title":"WebSockets - additional classes","text":"<p>Additional classes for handling WebSockets.</p> <p>Provided directly by Starlette, but you can import it from <code>readyapi</code>:</p> <pre><code>from readyapi.websockets import WebSocketDisconnect, WebSocketState\n</code></pre>"},{"location":"reference/websockets/#readyapi.websockets.WebSocketDisconnect","title":"readyapi.websockets.WebSocketDisconnect","text":"<pre><code>WebSocketDisconnect(code=1000, reason=None)\n</code></pre> <p>               Bases: <code>Exception</code></p> PARAMETER DESCRIPTION <code>code</code> <p> TYPE: <code>int</code> DEFAULT: <code>1000</code> </p> <code>reason</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>def __init__(self, code: int = 1000, reason: str | None = None) -&gt; None:\n    self.code = code\n    self.reason = reason or \"\"\n</code></pre>"},{"location":"reference/websockets/#readyapi.websockets.WebSocketDisconnect.code","title":"code  <code>instance-attribute</code>","text":"<pre><code>code = code\n</code></pre>"},{"location":"reference/websockets/#readyapi.websockets.WebSocketDisconnect.reason","title":"reason  <code>instance-attribute</code>","text":"<pre><code>reason = reason or ''\n</code></pre>"},{"location":"reference/websockets/#readyapi.websockets.WebSocketState","title":"readyapi.websockets.WebSocketState","text":"<p>               Bases: <code>Enum</code></p>"},{"location":"reference/websockets/#readyapi.websockets.WebSocketState.CONNECTING","title":"CONNECTING  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CONNECTING = 0\n</code></pre>"},{"location":"reference/websockets/#readyapi.websockets.WebSocketState.CONNECTED","title":"CONNECTED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CONNECTED = 1\n</code></pre>"},{"location":"reference/websockets/#readyapi.websockets.WebSocketState.DISCONNECTED","title":"DISCONNECTED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DISCONNECTED = 2\n</code></pre>"},{"location":"reference/websockets/#readyapi.websockets.WebSocketState.RESPONSE","title":"RESPONSE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>RESPONSE = 3\n</code></pre>"},{"location":"reference/httpconnection/","title":"<code>HTTPConnection</code> class","text":"<p>When you want to define dependencies that should be compatible with both HTTP and WebSockets, you can define a parameter that takes an <code>HTTPConnection</code> instead of a <code>Request</code> or a <code>WebSocket</code>.</p> <p>You can import it from <code>readyapi.requests</code>:</p> <pre><code>from readyapi.requests import HTTPConnection\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection","title":"readyapi.requests.HTTPConnection","text":"<pre><code>HTTPConnection(scope, receive=None)\n</code></pre> <p>               Bases: <code>Mapping[str, Any]</code></p> <p>A base class for incoming HTTP connections, that is used to provide any functionality that is common to both <code>Request</code> and <code>WebSocket</code>.</p> PARAMETER DESCRIPTION <code>scope</code> <p> TYPE: <code>Scope</code> </p> <code>receive</code> <p> TYPE: <code>Receive | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/requests.py</code> <pre><code>def __init__(self, scope: Scope, receive: Receive | None = None) -&gt; None:\n    assert scope[\"type\"] in (\"http\", \"websocket\")\n    self.scope = scope\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.scope","title":"scope  <code>instance-attribute</code>","text":"<pre><code>scope = scope\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.app","title":"app  <code>property</code>","text":"<pre><code>app\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.url","title":"url  <code>property</code>","text":"<pre><code>url\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.base_url","title":"base_url  <code>property</code>","text":"<pre><code>base_url\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.query_params","title":"query_params  <code>property</code>","text":"<pre><code>query_params\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.path_params","title":"path_params  <code>property</code>","text":"<pre><code>path_params\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.cookies","title":"cookies  <code>property</code>","text":"<pre><code>cookies\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.client","title":"client  <code>property</code>","text":"<pre><code>client\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.session","title":"session  <code>property</code>","text":"<pre><code>session\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.auth","title":"auth  <code>property</code>","text":"<pre><code>auth\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.user","title":"user  <code>property</code>","text":"<pre><code>user\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.state","title":"state  <code>property</code>","text":"<pre><code>state\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.url_for","title":"url_for","text":"<pre><code>url_for(name, /, **path_params)\n</code></pre> PARAMETER DESCRIPTION <code>name</code> <p> TYPE: <code>str</code> </p> <code>**path_params</code> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>starlette/requests.py</code> <pre><code>def url_for(self, name: str, /, **path_params: typing.Any) -&gt; URL:\n    url_path_provider: Router | Starlette | None = self.scope.get(\"router\") or self.scope.get(\"app\")\n    if url_path_provider is None:\n        raise RuntimeError(\"The `url_for` method can only be used inside a Starlette application or with a router.\")\n    url_path = url_path_provider.url_path_for(name, **path_params)\n    return url_path.make_absolute_url(base_url=self.base_url)\n</code></pre>"},{"location":"reference/response/","title":"<code>Response</code> class","text":"<p>You can declare a parameter in a path operation function or dependency to be of type <code>Response</code> and then you can set data for the response like headers or cookies.</p> <p>You can also use it directly to create an instance of it and return it from your path operations.</p> <p>You can import it directly from <code>readyapi</code>:</p> <pre><code>from readyapi import Response\n</code></pre>"},{"location":"reference/response/#readyapi.Response","title":"readyapi.Response","text":"<pre><code>Response(\n    content=None,\n    status_code=200,\n    headers=None,\n    media_type=None,\n    background=None,\n)\n</code></pre> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    content: typing.Any = None,\n    status_code: int = 200,\n    headers: typing.Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; None:\n    self.status_code = status_code\n    if media_type is not None:\n        self.media_type = media_type\n    self.background = background\n    self.body = self.render(content)\n    self.init_headers(headers)\n</code></pre>"},{"location":"reference/response/#readyapi.Response.media_type","title":"media_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>media_type = None\n</code></pre>"},{"location":"reference/response/#readyapi.Response.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/response/#readyapi.Response.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/response/#readyapi.Response.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/response/#readyapi.Response.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/response/#readyapi.Response.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/response/#readyapi.Response.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def render(self, content: typing.Any) -&gt; bytes | memoryview:\n    if content is None:\n        return b\"\"\n    if isinstance(content, (bytes, memoryview)):\n        return content\n    return content.encode(self.charset)  # type: ignore\n</code></pre>"},{"location":"reference/response/#readyapi.Response.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [(k.lower().encode(\"latin-1\"), v.encode(\"latin-1\")) for k, v in headers.items()]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if content_type.startswith(\"text/\") and \"charset=\" not in content_type.lower():\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/response/#readyapi.Response.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str | None = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/response/#readyapi.Response.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/responses/","title":"Custom Response Classes - File, HTML, Redirect, Streaming, etc.","text":"<p>There are several custom response classes you can use to create an instance and return them directly from your path operations.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p>You can import them directly from <code>readyapi.responses</code>:</p> <pre><code>from readyapi.responses import (\n    FileResponse,\n    HTMLResponse,\n    JSONResponse,\n    ORJSONResponse,\n    PlainTextResponse,\n    RedirectResponse,\n    Response,\n    StreamingResponse,\n    UJSONResponse,\n)\n</code></pre>"},{"location":"reference/responses/#readyapi-responses","title":"ReadyAPI Responses","text":"<p>There are a couple of custom ReadyAPI response classes, you can use them to optimize JSON performance.</p>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse","title":"readyapi.responses.UJSONResponse","text":"<pre><code>UJSONResponse(\n    content,\n    status_code=200,\n    headers=None,\n    media_type=None,\n    background=None,\n)\n</code></pre> <p>               Bases: <code>JSONResponse</code></p> <p>JSON response using the high-performance ujson library to serialize data to JSON.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    content: typing.Any,\n    status_code: int = 200,\n    headers: typing.Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; None:\n    super().__init__(content, status_code, headers, media_type, background)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.media_type","title":"media_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>media_type = 'application/json'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>readyapi/responses.py</code> <pre><code>def render(self, content: Any) -&gt; bytes:\n    assert ujson is not None, \"ujson must be installed to use UJSONResponse\"\n    return ujson.dumps(content, ensure_ascii=False).encode(\"utf-8\")\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [(k.lower().encode(\"latin-1\"), v.encode(\"latin-1\")) for k, v in headers.items()]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if content_type.startswith(\"text/\") and \"charset=\" not in content_type.lower():\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str | None = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse","title":"readyapi.responses.ORJSONResponse","text":"<pre><code>ORJSONResponse(\n    content,\n    status_code=200,\n    headers=None,\n    media_type=None,\n    background=None,\n)\n</code></pre> <p>               Bases: <code>JSONResponse</code></p> <p>JSON response using the high-performance orjson library to serialize data to JSON.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    content: typing.Any,\n    status_code: int = 200,\n    headers: typing.Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; None:\n    super().__init__(content, status_code, headers, media_type, background)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.media_type","title":"media_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>media_type = 'application/json'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>readyapi/responses.py</code> <pre><code>def render(self, content: Any) -&gt; bytes:\n    assert orjson is not None, \"orjson must be installed to use ORJSONResponse\"\n    return orjson.dumps(\n        content, option=orjson.OPT_NON_STR_KEYS | orjson.OPT_SERIALIZE_NUMPY\n    )\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [(k.lower().encode(\"latin-1\"), v.encode(\"latin-1\")) for k, v in headers.items()]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if content_type.startswith(\"text/\") and \"charset=\" not in content_type.lower():\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str | None = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/responses/#starlette-responses","title":"Starlette Responses","text":""},{"location":"reference/responses/#readyapi.responses.FileResponse","title":"readyapi.responses.FileResponse","text":"<pre><code>FileResponse(\n    path,\n    status_code=200,\n    headers=None,\n    media_type=None,\n    background=None,\n    filename=None,\n    stat_result=None,\n    method=None,\n    content_disposition_type=\"attachment\",\n)\n</code></pre> <p>               Bases: <code>Response</code></p> PARAMETER DESCRIPTION <code>path</code> <p> TYPE: <code>str | PathLike[str]</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> <code>filename</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>stat_result</code> <p> TYPE: <code>stat_result | None</code> DEFAULT: <code>None</code> </p> <code>method</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>content_disposition_type</code> <p> TYPE: <code>str</code> DEFAULT: <code>'attachment'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    path: str | os.PathLike[str],\n    status_code: int = 200,\n    headers: typing.Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n    filename: str | None = None,\n    stat_result: os.stat_result | None = None,\n    method: str | None = None,\n    content_disposition_type: str = \"attachment\",\n) -&gt; None:\n    self.path = path\n    self.status_code = status_code\n    self.filename = filename\n    if method is not None:\n        warnings.warn(\n            \"The 'method' parameter is not used, and it will be removed.\",\n            DeprecationWarning,\n        )\n    if media_type is None:\n        media_type = guess_type(filename or path)[0] or \"text/plain\"\n    self.media_type = media_type\n    self.background = background\n    self.init_headers(headers)\n    self.headers.setdefault(\"accept-ranges\", \"bytes\")\n    if self.filename is not None:\n        content_disposition_filename = quote(self.filename)\n        if content_disposition_filename != self.filename:\n            content_disposition = f\"{content_disposition_type}; filename*=utf-8''{content_disposition_filename}\"\n        else:\n            content_disposition = f'{content_disposition_type}; filename=\"{self.filename}\"'\n        self.headers.setdefault(\"content-disposition\", content_disposition)\n    self.stat_result = stat_result\n    if stat_result is not None:\n        self.set_stat_headers(stat_result)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.chunk_size","title":"chunk_size  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>chunk_size = 64 * 1024\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.media_type","title":"media_type  <code>instance-attribute</code>","text":"<pre><code>media_type = media_type\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def render(self, content: typing.Any) -&gt; bytes | memoryview:\n    if content is None:\n        return b\"\"\n    if isinstance(content, (bytes, memoryview)):\n        return content\n    return content.encode(self.charset)  # type: ignore\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [(k.lower().encode(\"latin-1\"), v.encode(\"latin-1\")) for k, v in headers.items()]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if content_type.startswith(\"text/\") and \"charset=\" not in content_type.lower():\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str | None = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse","title":"readyapi.responses.HTMLResponse","text":"<pre><code>HTMLResponse(\n    content=None,\n    status_code=200,\n    headers=None,\n    media_type=None,\n    background=None,\n)\n</code></pre> <p>               Bases: <code>Response</code></p> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    content: typing.Any = None,\n    status_code: int = 200,\n    headers: typing.Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; None:\n    self.status_code = status_code\n    if media_type is not None:\n        self.media_type = media_type\n    self.background = background\n    self.body = self.render(content)\n    self.init_headers(headers)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.media_type","title":"media_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>media_type = 'text/html'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def render(self, content: typing.Any) -&gt; bytes | memoryview:\n    if content is None:\n        return b\"\"\n    if isinstance(content, (bytes, memoryview)):\n        return content\n    return content.encode(self.charset)  # type: ignore\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [(k.lower().encode(\"latin-1\"), v.encode(\"latin-1\")) for k, v in headers.items()]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if content_type.startswith(\"text/\") and \"charset=\" not in content_type.lower():\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str | None = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse","title":"readyapi.responses.JSONResponse","text":"<pre><code>JSONResponse(\n    content,\n    status_code=200,\n    headers=None,\n    media_type=None,\n    background=None,\n)\n</code></pre> <p>               Bases: <code>Response</code></p> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    content: typing.Any,\n    status_code: int = 200,\n    headers: typing.Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; None:\n    super().__init__(content, status_code, headers, media_type, background)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.media_type","title":"media_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>media_type = 'application/json'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def render(self, content: typing.Any) -&gt; bytes:\n    return json.dumps(\n        content,\n        ensure_ascii=False,\n        allow_nan=False,\n        indent=None,\n        separators=(\",\", \":\"),\n    ).encode(\"utf-8\")\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [(k.lower().encode(\"latin-1\"), v.encode(\"latin-1\")) for k, v in headers.items()]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if content_type.startswith(\"text/\") and \"charset=\" not in content_type.lower():\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str | None = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse","title":"readyapi.responses.PlainTextResponse","text":"<pre><code>PlainTextResponse(\n    content=None,\n    status_code=200,\n    headers=None,\n    media_type=None,\n    background=None,\n)\n</code></pre> <p>               Bases: <code>Response</code></p> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    content: typing.Any = None,\n    status_code: int = 200,\n    headers: typing.Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; None:\n    self.status_code = status_code\n    if media_type is not None:\n        self.media_type = media_type\n    self.background = background\n    self.body = self.render(content)\n    self.init_headers(headers)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.media_type","title":"media_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>media_type = 'text/plain'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def render(self, content: typing.Any) -&gt; bytes | memoryview:\n    if content is None:\n        return b\"\"\n    if isinstance(content, (bytes, memoryview)):\n        return content\n    return content.encode(self.charset)  # type: ignore\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [(k.lower().encode(\"latin-1\"), v.encode(\"latin-1\")) for k, v in headers.items()]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if content_type.startswith(\"text/\") and \"charset=\" not in content_type.lower():\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str | None = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse","title":"readyapi.responses.RedirectResponse","text":"<pre><code>RedirectResponse(\n    url, status_code=307, headers=None, background=None\n)\n</code></pre> <p>               Bases: <code>Response</code></p> PARAMETER DESCRIPTION <code>url</code> <p> TYPE: <code>str | URL</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>307</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    url: str | URL,\n    status_code: int = 307,\n    headers: typing.Mapping[str, str] | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; None:\n    super().__init__(content=b\"\", status_code=status_code, headers=headers, background=background)\n    self.headers[\"location\"] = quote(str(url), safe=\":/%#?=@[]!$&amp;'()*+,;\")\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.media_type","title":"media_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>media_type = None\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def render(self, content: typing.Any) -&gt; bytes | memoryview:\n    if content is None:\n        return b\"\"\n    if isinstance(content, (bytes, memoryview)):\n        return content\n    return content.encode(self.charset)  # type: ignore\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [(k.lower().encode(\"latin-1\"), v.encode(\"latin-1\")) for k, v in headers.items()]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if content_type.startswith(\"text/\") and \"charset=\" not in content_type.lower():\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str | None = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response","title":"readyapi.responses.Response","text":"<pre><code>Response(\n    content=None,\n    status_code=200,\n    headers=None,\n    media_type=None,\n    background=None,\n)\n</code></pre> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    content: typing.Any = None,\n    status_code: int = 200,\n    headers: typing.Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; None:\n    self.status_code = status_code\n    if media_type is not None:\n        self.media_type = media_type\n    self.background = background\n    self.body = self.render(content)\n    self.init_headers(headers)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.media_type","title":"media_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>media_type = None\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def render(self, content: typing.Any) -&gt; bytes | memoryview:\n    if content is None:\n        return b\"\"\n    if isinstance(content, (bytes, memoryview)):\n        return content\n    return content.encode(self.charset)  # type: ignore\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [(k.lower().encode(\"latin-1\"), v.encode(\"latin-1\")) for k, v in headers.items()]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if content_type.startswith(\"text/\") and \"charset=\" not in content_type.lower():\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str | None = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse","title":"readyapi.responses.StreamingResponse","text":"<pre><code>StreamingResponse(\n    content,\n    status_code=200,\n    headers=None,\n    media_type=None,\n    background=None,\n)\n</code></pre> <p>               Bases: <code>Response</code></p> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>ContentStream</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    content: ContentStream,\n    status_code: int = 200,\n    headers: typing.Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; None:\n    if isinstance(content, typing.AsyncIterable):\n        self.body_iterator = content\n    else:\n        self.body_iterator = iterate_in_threadpool(content)\n    self.status_code = status_code\n    self.media_type = self.media_type if media_type is None else media_type\n    self.background = background\n    self.init_headers(headers)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.body_iterator","title":"body_iterator  <code>instance-attribute</code>","text":"<pre><code>body_iterator\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.media_type","title":"media_type  <code>instance-attribute</code>","text":"<pre><code>media_type = (\n    media_type if media_type is None else media_type\n)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def render(self, content: typing.Any) -&gt; bytes | memoryview:\n    if content is None:\n        return b\"\"\n    if isinstance(content, (bytes, memoryview)):\n        return content\n    return content.encode(self.charset)  # type: ignore\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [(k.lower().encode(\"latin-1\"), v.encode(\"latin-1\")) for k, v in headers.items()]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if content_type.startswith(\"text/\") and \"charset=\" not in content_type.lower():\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str | None = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/middleware/","title":"Middleware","text":"<p>There are several middlewares available provided by Starlette directly.</p> <p>Read more about them in the ReadyAPI docs for Middleware.</p> <p>It can be imported from <code>readyapi</code>:</p> <pre><code>from readyapi.middleware.cors import CORSMiddleware\n</code></pre> <p>It can be imported from <code>readyapi</code>:</p> <pre><code>from readyapi.middleware.gzip import GZipMiddleware\n</code></pre> <p>It can be imported from <code>readyapi</code>:</p> <pre><code>from readyapi.middleware.httpsredirect import HTTPSRedirectMiddleware\n</code></pre> <p>It can be imported from <code>readyapi</code>:</p> <pre><code>from readyapi.middleware.trustedhost import TrustedHostMiddleware\n</code></pre> <p>It can be imported from <code>readyapi</code>:</p> <pre><code>from readyapi.middleware.wsgi import WSGIMiddleware\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware","title":"readyapi.middleware.cors.CORSMiddleware","text":"<pre><code>CORSMiddleware(\n    app,\n    allow_origins=(),\n    allow_methods=(\"GET\",),\n    allow_headers=(),\n    allow_credentials=False,\n    allow_origin_regex=None,\n    expose_headers=(),\n    max_age=600,\n)\n</code></pre> PARAMETER DESCRIPTION <code>app</code> <p> TYPE: <code>ASGIApp</code> </p> <code>allow_origins</code> <p> TYPE: <code>Sequence[str]</code> DEFAULT: <code>()</code> </p> <code>allow_methods</code> <p> TYPE: <code>Sequence[str]</code> DEFAULT: <code>('GET',)</code> </p> <code>allow_headers</code> <p> TYPE: <code>Sequence[str]</code> DEFAULT: <code>()</code> </p> <code>allow_credentials</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>allow_origin_regex</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>expose_headers</code> <p> TYPE: <code>Sequence[str]</code> DEFAULT: <code>()</code> </p> <code>max_age</code> <p> TYPE: <code>int</code> DEFAULT: <code>600</code> </p> Source code in <code>starlette/middleware/cors.py</code> <pre><code>def __init__(\n    self,\n    app: ASGIApp,\n    allow_origins: typing.Sequence[str] = (),\n    allow_methods: typing.Sequence[str] = (\"GET\",),\n    allow_headers: typing.Sequence[str] = (),\n    allow_credentials: bool = False,\n    allow_origin_regex: str | None = None,\n    expose_headers: typing.Sequence[str] = (),\n    max_age: int = 600,\n) -&gt; None:\n    if \"*\" in allow_methods:\n        allow_methods = ALL_METHODS\n\n    compiled_allow_origin_regex = None\n    if allow_origin_regex is not None:\n        compiled_allow_origin_regex = re.compile(allow_origin_regex)\n\n    allow_all_origins = \"*\" in allow_origins\n    allow_all_headers = \"*\" in allow_headers\n    preflight_explicit_allow_origin = not allow_all_origins or allow_credentials\n\n    simple_headers = {}\n    if allow_all_origins:\n        simple_headers[\"Access-Control-Allow-Origin\"] = \"*\"\n    if allow_credentials:\n        simple_headers[\"Access-Control-Allow-Credentials\"] = \"true\"\n    if expose_headers:\n        simple_headers[\"Access-Control-Expose-Headers\"] = \", \".join(expose_headers)\n\n    preflight_headers = {}\n    if preflight_explicit_allow_origin:\n        # The origin value will be set in preflight_response() if it is allowed.\n        preflight_headers[\"Vary\"] = \"Origin\"\n    else:\n        preflight_headers[\"Access-Control-Allow-Origin\"] = \"*\"\n    preflight_headers.update(\n        {\n            \"Access-Control-Allow-Methods\": \", \".join(allow_methods),\n            \"Access-Control-Max-Age\": str(max_age),\n        }\n    )\n    allow_headers = sorted(SAFELISTED_HEADERS | set(allow_headers))\n    if allow_headers and not allow_all_headers:\n        preflight_headers[\"Access-Control-Allow-Headers\"] = \", \".join(allow_headers)\n    if allow_credentials:\n        preflight_headers[\"Access-Control-Allow-Credentials\"] = \"true\"\n\n    self.app = app\n    self.allow_origins = allow_origins\n    self.allow_methods = allow_methods\n    self.allow_headers = [h.lower() for h in allow_headers]\n    self.allow_all_origins = allow_all_origins\n    self.allow_all_headers = allow_all_headers\n    self.preflight_explicit_allow_origin = preflight_explicit_allow_origin\n    self.allow_origin_regex = compiled_allow_origin_regex\n    self.simple_headers = simple_headers\n    self.preflight_headers = preflight_headers\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.app","title":"app  <code>instance-attribute</code>","text":"<pre><code>app = app\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.allow_origins","title":"allow_origins  <code>instance-attribute</code>","text":"<pre><code>allow_origins = allow_origins\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.allow_methods","title":"allow_methods  <code>instance-attribute</code>","text":"<pre><code>allow_methods = allow_methods\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.allow_headers","title":"allow_headers  <code>instance-attribute</code>","text":"<pre><code>allow_headers = [(lower()) for h in allow_headers]\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.allow_all_origins","title":"allow_all_origins  <code>instance-attribute</code>","text":"<pre><code>allow_all_origins = allow_all_origins\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.allow_all_headers","title":"allow_all_headers  <code>instance-attribute</code>","text":"<pre><code>allow_all_headers = allow_all_headers\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.preflight_explicit_allow_origin","title":"preflight_explicit_allow_origin  <code>instance-attribute</code>","text":"<pre><code>preflight_explicit_allow_origin = (\n    preflight_explicit_allow_origin\n)\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.allow_origin_regex","title":"allow_origin_regex  <code>instance-attribute</code>","text":"<pre><code>allow_origin_regex = compiled_allow_origin_regex\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.simple_headers","title":"simple_headers  <code>instance-attribute</code>","text":"<pre><code>simple_headers = simple_headers\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.preflight_headers","title":"preflight_headers  <code>instance-attribute</code>","text":"<pre><code>preflight_headers = preflight_headers\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.is_allowed_origin","title":"is_allowed_origin","text":"<pre><code>is_allowed_origin(origin)\n</code></pre> PARAMETER DESCRIPTION <code>origin</code> <p> TYPE: <code>str</code> </p> Source code in <code>starlette/middleware/cors.py</code> <pre><code>def is_allowed_origin(self, origin: str) -&gt; bool:\n    if self.allow_all_origins:\n        return True\n\n    if self.allow_origin_regex is not None and self.allow_origin_regex.fullmatch(origin):\n        return True\n\n    return origin in self.allow_origins\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.preflight_response","title":"preflight_response","text":"<pre><code>preflight_response(request_headers)\n</code></pre> PARAMETER DESCRIPTION <code>request_headers</code> <p> TYPE: <code>Headers</code> </p> Source code in <code>starlette/middleware/cors.py</code> <pre><code>def preflight_response(self, request_headers: Headers) -&gt; Response:\n    requested_origin = request_headers[\"origin\"]\n    requested_method = request_headers[\"access-control-request-method\"]\n    requested_headers = request_headers.get(\"access-control-request-headers\")\n\n    headers = dict(self.preflight_headers)\n    failures = []\n\n    if self.is_allowed_origin(origin=requested_origin):\n        if self.preflight_explicit_allow_origin:\n            # The \"else\" case is already accounted for in self.preflight_headers\n            # and the value would be \"*\".\n            headers[\"Access-Control-Allow-Origin\"] = requested_origin\n    else:\n        failures.append(\"origin\")\n\n    if requested_method not in self.allow_methods:\n        failures.append(\"method\")\n\n    # If we allow all headers, then we have to mirror back any requested\n    # headers in the response.\n    if self.allow_all_headers and requested_headers is not None:\n        headers[\"Access-Control-Allow-Headers\"] = requested_headers\n    elif requested_headers is not None:\n        for header in [h.lower() for h in requested_headers.split(\",\")]:\n            if header.strip() not in self.allow_headers:\n                failures.append(\"headers\")\n                break\n\n    # We don't strictly need to use 400 responses here, since its up to\n    # the browser to enforce the CORS policy, but its more informative\n    # if we do.\n    if failures:\n        failure_text = \"Disallowed CORS \" + \", \".join(failures)\n        return PlainTextResponse(failure_text, status_code=400, headers=headers)\n\n    return PlainTextResponse(\"OK\", status_code=200, headers=headers)\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.simple_response","title":"simple_response  <code>async</code>","text":"<pre><code>simple_response(scope, receive, send, request_headers)\n</code></pre> PARAMETER DESCRIPTION <code>scope</code> <p> TYPE: <code>Scope</code> </p> <code>receive</code> <p> TYPE: <code>Receive</code> </p> <code>send</code> <p> TYPE: <code>Send</code> </p> <code>request_headers</code> <p> TYPE: <code>Headers</code> </p> Source code in <code>starlette/middleware/cors.py</code> <pre><code>async def simple_response(self, scope: Scope, receive: Receive, send: Send, request_headers: Headers) -&gt; None:\n    send = functools.partial(self.send, send=send, request_headers=request_headers)\n    await self.app(scope, receive, send)\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.send","title":"send  <code>async</code>","text":"<pre><code>send(message, send, request_headers)\n</code></pre> PARAMETER DESCRIPTION <code>message</code> <p> TYPE: <code>Message</code> </p> <code>send</code> <p> TYPE: <code>Send</code> </p> <code>request_headers</code> <p> TYPE: <code>Headers</code> </p> Source code in <code>starlette/middleware/cors.py</code> <pre><code>async def send(self, message: Message, send: Send, request_headers: Headers) -&gt; None:\n    if message[\"type\"] != \"http.response.start\":\n        await send(message)\n        return\n\n    message.setdefault(\"headers\", [])\n    headers = MutableHeaders(scope=message)\n    headers.update(self.simple_headers)\n    origin = request_headers[\"Origin\"]\n    has_cookie = \"cookie\" in request_headers\n\n    # If request includes any cookie headers, then we must respond\n    # with the specific origin instead of '*'.\n    if self.allow_all_origins and has_cookie:\n        self.allow_explicit_origin(headers, origin)\n\n    # If we only allow specific origins, then we have to mirror back\n    # the Origin header in the response.\n    elif not self.allow_all_origins and self.is_allowed_origin(origin=origin):\n        self.allow_explicit_origin(headers, origin)\n\n    await send(message)\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.allow_explicit_origin","title":"allow_explicit_origin  <code>staticmethod</code>","text":"<pre><code>allow_explicit_origin(headers, origin)\n</code></pre> PARAMETER DESCRIPTION <code>headers</code> <p> TYPE: <code>MutableHeaders</code> </p> <code>origin</code> <p> TYPE: <code>str</code> </p> Source code in <code>starlette/middleware/cors.py</code> <pre><code>@staticmethod\ndef allow_explicit_origin(headers: MutableHeaders, origin: str) -&gt; None:\n    headers[\"Access-Control-Allow-Origin\"] = origin\n    headers.add_vary_header(\"Origin\")\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.gzip.GZipMiddleware","title":"readyapi.middleware.gzip.GZipMiddleware","text":"<pre><code>GZipMiddleware(app, minimum_size=500, compresslevel=9)\n</code></pre> PARAMETER DESCRIPTION <code>app</code> <p> TYPE: <code>ASGIApp</code> </p> <code>minimum_size</code> <p> TYPE: <code>int</code> DEFAULT: <code>500</code> </p> <code>compresslevel</code> <p> TYPE: <code>int</code> DEFAULT: <code>9</code> </p> Source code in <code>starlette/middleware/gzip.py</code> <pre><code>def __init__(self, app: ASGIApp, minimum_size: int = 500, compresslevel: int = 9) -&gt; None:\n    self.app = app\n    self.minimum_size = minimum_size\n    self.compresslevel = compresslevel\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.gzip.GZipMiddleware.app","title":"app  <code>instance-attribute</code>","text":"<pre><code>app = app\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.gzip.GZipMiddleware.minimum_size","title":"minimum_size  <code>instance-attribute</code>","text":"<pre><code>minimum_size = minimum_size\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.gzip.GZipMiddleware.compresslevel","title":"compresslevel  <code>instance-attribute</code>","text":"<pre><code>compresslevel = compresslevel\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.httpsredirect.HTTPSRedirectMiddleware","title":"readyapi.middleware.httpsredirect.HTTPSRedirectMiddleware","text":"<pre><code>HTTPSRedirectMiddleware(app)\n</code></pre> PARAMETER DESCRIPTION <code>app</code> <p> TYPE: <code>ASGIApp</code> </p> Source code in <code>starlette/middleware/httpsredirect.py</code> <pre><code>def __init__(self, app: ASGIApp) -&gt; None:\n    self.app = app\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.httpsredirect.HTTPSRedirectMiddleware.app","title":"app  <code>instance-attribute</code>","text":"<pre><code>app = app\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.trustedhost.TrustedHostMiddleware","title":"readyapi.middleware.trustedhost.TrustedHostMiddleware","text":"<pre><code>TrustedHostMiddleware(\n    app, allowed_hosts=None, www_redirect=True\n)\n</code></pre> PARAMETER DESCRIPTION <code>app</code> <p> TYPE: <code>ASGIApp</code> </p> <code>allowed_hosts</code> <p> TYPE: <code>Sequence[str] | None</code> DEFAULT: <code>None</code> </p> <code>www_redirect</code> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>starlette/middleware/trustedhost.py</code> <pre><code>def __init__(\n    self,\n    app: ASGIApp,\n    allowed_hosts: typing.Sequence[str] | None = None,\n    www_redirect: bool = True,\n) -&gt; None:\n    if allowed_hosts is None:\n        allowed_hosts = [\"*\"]\n\n    for pattern in allowed_hosts:\n        assert \"*\" not in pattern[1:], ENFORCE_DOMAIN_WILDCARD\n        if pattern.startswith(\"*\") and pattern != \"*\":\n            assert pattern.startswith(\"*.\"), ENFORCE_DOMAIN_WILDCARD\n    self.app = app\n    self.allowed_hosts = list(allowed_hosts)\n    self.allow_any = \"*\" in allowed_hosts\n    self.www_redirect = www_redirect\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.trustedhost.TrustedHostMiddleware.app","title":"app  <code>instance-attribute</code>","text":"<pre><code>app = app\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.trustedhost.TrustedHostMiddleware.allowed_hosts","title":"allowed_hosts  <code>instance-attribute</code>","text":"<pre><code>allowed_hosts = list(allowed_hosts)\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.trustedhost.TrustedHostMiddleware.allow_any","title":"allow_any  <code>instance-attribute</code>","text":"<pre><code>allow_any = '*' in allowed_hosts\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.trustedhost.TrustedHostMiddleware.www_redirect","title":"www_redirect  <code>instance-attribute</code>","text":"<pre><code>www_redirect = www_redirect\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.wsgi.WSGIMiddleware","title":"readyapi.middleware.wsgi.WSGIMiddleware","text":"<pre><code>WSGIMiddleware(app)\n</code></pre> PARAMETER DESCRIPTION <code>app</code> <p> TYPE: <code>Callable[..., Any]</code> </p> Source code in <code>starlette/middleware/wsgi.py</code> <pre><code>def __init__(self, app: typing.Callable[..., typing.Any]) -&gt; None:\n    self.app = app\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.wsgi.WSGIMiddleware.app","title":"app  <code>instance-attribute</code>","text":"<pre><code>app = app\n</code></pre>"},{"location":"reference/openapi/","title":"OpenAPI","text":"<p>There are several utilities to handle OpenAPI.</p> <p>You normally don't need to use them unless you have a specific advanced use case that requires it.</p>"},{"location":"reference/openapi/docs/","title":"OpenAPI <code>docs</code>","text":"<p>Utilities to handle OpenAPI automatic UI documentation, including Swagger UI (by default at <code>/docs</code>) and ReDoc (by default at <code>/redoc</code>).</p>"},{"location":"reference/openapi/docs/#readyapi.openapi.docs.get_swagger_ui_html","title":"readyapi.openapi.docs.get_swagger_ui_html","text":"<pre><code>get_swagger_ui_html(\n    *,\n    openapi_url,\n    title,\n    swagger_js_url=\"https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui-bundle.js\",\n    swagger_css_url=\"https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui.css\",\n    swagger_favicon_url=\"https://readyapi.github.io/img/favicon.png\",\n    oauth2_redirect_url=None,\n    init_oauth=None,\n    swagger_ui_parameters=None\n)\n</code></pre> <p>Generate and return the HTML  that loads Swagger UI for the interactive API docs (normally served at <code>/docs</code>).</p> <p>You would only call this function yourself if you needed to override some parts, for example the URLs to use to load Swagger UI's JavaScript and CSS.</p> <p>Read more about it in the ReadyAPI docs for Configure Swagger UI and the ReadyAPI docs for Custom Docs UI Static Assets (Self-Hosting).</p> PARAMETER DESCRIPTION <code>openapi_url</code> <p>The OpenAPI URL that Swagger UI should load and use.</p> <p>This is normally done automatically by ReadyAPI using the default URL <code>/openapi.json</code>.</p> <p> TYPE: <code>str</code> </p> <code>title</code> <p>The HTML <code>&lt;title&gt;</code> content, normally shown in the browser tab.</p> <p> TYPE: <code>str</code> </p> <code>swagger_js_url</code> <p>The URL to use to load the Swagger UI JavaScript.</p> <p>It is normally set to a CDN URL.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui-bundle.js'</code> </p> <code>swagger_css_url</code> <p>The URL to use to load the Swagger UI CSS.</p> <p>It is normally set to a CDN URL.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui.css'</code> </p> <code>swagger_favicon_url</code> <p>The URL of the favicon to use. It is normally shown in the browser tab.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'https://readyapi.github.io/img/favicon.png'</code> </p> <code>oauth2_redirect_url</code> <p>The OAuth2 redirect URL, it is normally automatically handled by ReadyAPI.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>init_oauth</code> <p>A dictionary with Swagger UI OAuth2 initialization configurations.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>swagger_ui_parameters</code> <p>Configuration parameters for Swagger UI.</p> <p>It defaults to swagger_ui_default_parameters.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> Source code in <code>readyapi/openapi/docs.py</code> <pre><code>def get_swagger_ui_html(\n    *,\n    openapi_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The OpenAPI URL that Swagger UI should load and use.\n\n            This is normally done automatically by ReadyAPI using the default URL\n            `/openapi.json`.\n            \"\"\"\n        ),\n    ],\n    title: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The HTML `&lt;title&gt;` content, normally shown in the browser tab.\n            \"\"\"\n        ),\n    ],\n    swagger_js_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL to use to load the Swagger UI JavaScript.\n\n            It is normally set to a CDN URL.\n            \"\"\"\n        ),\n    ] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui-bundle.js\",\n    swagger_css_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL to use to load the Swagger UI CSS.\n\n            It is normally set to a CDN URL.\n            \"\"\"\n        ),\n    ] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui.css\",\n    swagger_favicon_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL of the favicon to use. It is normally shown in the browser tab.\n            \"\"\"\n        ),\n    ] = \"https://readyapi.github.io/img/favicon.png\",\n    oauth2_redirect_url: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            The OAuth2 redirect URL, it is normally automatically handled by ReadyAPI.\n            \"\"\"\n        ),\n    ] = None,\n    init_oauth: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            A dictionary with Swagger UI OAuth2 initialization configurations.\n            \"\"\"\n        ),\n    ] = None,\n    swagger_ui_parameters: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Configuration parameters for Swagger UI.\n\n            It defaults to [swagger_ui_default_parameters][readyapi.openapi.docs.swagger_ui_default_parameters].\n            \"\"\"\n        ),\n    ] = None,\n) -&gt; HTMLResponse:\n    \"\"\"\n    Generate and return the HTML  that loads Swagger UI for the interactive\n    API docs (normally served at `/docs`).\n\n    You would only call this function yourself if you needed to override some parts,\n    for example the URLs to use to load Swagger UI's JavaScript and CSS.\n\n    Read more about it in the\n    [ReadyAPI docs for Configure Swagger UI](https://readyapi.github.io/how-to/configure-swagger-ui/)\n    and the [ReadyAPI docs for Custom Docs UI Static Assets (Self-Hosting)](https://readyapi.github.io/how-to/custom-docs-ui-assets/).\n    \"\"\"\n    current_swagger_ui_parameters = swagger_ui_default_parameters.copy()\n    if swagger_ui_parameters:\n        current_swagger_ui_parameters.update(swagger_ui_parameters)\n\n    html = f\"\"\"\n    &lt;!DOCTYPE html&gt;\n    &lt;html&gt;\n    &lt;head&gt;\n    &lt;link type=\"text/css\" rel=\"stylesheet\" href=\"{swagger_css_url}\"&gt;\n    &lt;link rel=\"shortcut icon\" href=\"{swagger_favicon_url}\"&gt;\n    &lt;title&gt;{title}&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;div id=\"swagger-ui\"&gt;\n    &lt;/div&gt;\n    &lt;script src=\"{swagger_js_url}\"&gt;&lt;/script&gt;\n    &lt;!-- `SwaggerUIBundle` is now available on the page --&gt;\n    &lt;script&gt;\n    const ui = SwaggerUIBundle({{\n        url: '{openapi_url}',\n    \"\"\"\n\n    for key, value in current_swagger_ui_parameters.items():\n        html += f\"{json.dumps(key)}: {json.dumps(jsonable_encoder(value))},\\n\"\n\n    if oauth2_redirect_url:\n        html += f\"oauth2RedirectUrl: window.location.origin + '{oauth2_redirect_url}',\"\n\n    html += \"\"\"\n    presets: [\n        SwaggerUIBundle.presets.apis,\n        SwaggerUIBundle.SwaggerUIStandalonePreset\n        ],\n    })\"\"\"\n\n    if init_oauth:\n        html += f\"\"\"\n        ui.initOAuth({json.dumps(jsonable_encoder(init_oauth))})\n        \"\"\"\n\n    html += \"\"\"\n    &lt;/script&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\"\n    return HTMLResponse(html)\n</code></pre>"},{"location":"reference/openapi/docs/#readyapi.openapi.docs.get_redoc_html","title":"readyapi.openapi.docs.get_redoc_html","text":"<pre><code>get_redoc_html(\n    *,\n    openapi_url,\n    title,\n    redoc_js_url=\"https://cdn.jsdelivr.net/npm/redoc@2/bundles/redoc.standalone.js\",\n    redoc_favicon_url=\"https://readyapi.github.io/img/favicon.png\",\n    with_google_fonts=True\n)\n</code></pre> <p>Generate and return the HTML response that loads ReDoc for the alternative API docs (normally served at <code>/redoc</code>).</p> <p>You would only call this function yourself if you needed to override some parts, for example the URLs to use to load ReDoc's JavaScript and CSS.</p> <p>Read more about it in the ReadyAPI docs for Custom Docs UI Static Assets (Self-Hosting).</p> PARAMETER DESCRIPTION <code>openapi_url</code> <p>The OpenAPI URL that ReDoc should load and use.</p> <p>This is normally done automatically by ReadyAPI using the default URL <code>/openapi.json</code>.</p> <p> TYPE: <code>str</code> </p> <code>title</code> <p>The HTML <code>&lt;title&gt;</code> content, normally shown in the browser tab.</p> <p> TYPE: <code>str</code> </p> <code>redoc_js_url</code> <p>The URL to use to load the ReDoc JavaScript.</p> <p>It is normally set to a CDN URL.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'https://cdn.jsdelivr.net/npm/redoc@2/bundles/redoc.standalone.js'</code> </p> <code>redoc_favicon_url</code> <p>The URL of the favicon to use. It is normally shown in the browser tab.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'https://readyapi.github.io/img/favicon.png'</code> </p> <code>with_google_fonts</code> <p>Load and use Google Fonts.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/openapi/docs.py</code> <pre><code>def get_redoc_html(\n    *,\n    openapi_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The OpenAPI URL that ReDoc should load and use.\n\n            This is normally done automatically by ReadyAPI using the default URL\n            `/openapi.json`.\n            \"\"\"\n        ),\n    ],\n    title: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The HTML `&lt;title&gt;` content, normally shown in the browser tab.\n            \"\"\"\n        ),\n    ],\n    redoc_js_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL to use to load the ReDoc JavaScript.\n\n            It is normally set to a CDN URL.\n            \"\"\"\n        ),\n    ] = \"https://cdn.jsdelivr.net/npm/redoc@2/bundles/redoc.standalone.js\",\n    redoc_favicon_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL of the favicon to use. It is normally shown in the browser tab.\n            \"\"\"\n        ),\n    ] = \"https://readyapi.github.io/img/favicon.png\",\n    with_google_fonts: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Load and use Google Fonts.\n            \"\"\"\n        ),\n    ] = True,\n) -&gt; HTMLResponse:\n    \"\"\"\n    Generate and return the HTML response that loads ReDoc for the alternative\n    API docs (normally served at `/redoc`).\n\n    You would only call this function yourself if you needed to override some parts,\n    for example the URLs to use to load ReDoc's JavaScript and CSS.\n\n    Read more about it in the\n    [ReadyAPI docs for Custom Docs UI Static Assets (Self-Hosting)](https://readyapi.github.io/how-to/custom-docs-ui-assets/).\n    \"\"\"\n    html = f\"\"\"\n    &lt;!DOCTYPE html&gt;\n    &lt;html&gt;\n    &lt;head&gt;\n    &lt;title&gt;{title}&lt;/title&gt;\n    &lt;!-- needed for adaptive design --&gt;\n    &lt;meta charset=\"utf-8\"/&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    \"\"\"\n    if with_google_fonts:\n        html += \"\"\"\n    &lt;link href=\"https://fonts.googleapis.com/css?family=Montserrat:300,400,700|Roboto:300,400,700\" rel=\"stylesheet\"&gt;\n    \"\"\"\n    html += f\"\"\"\n    &lt;link rel=\"shortcut icon\" href=\"{redoc_favicon_url}\"&gt;\n    &lt;!--\n    ReDoc doesn't change outer page styles\n    --&gt;\n    &lt;style&gt;\n      body {{\n        margin: 0;\n        padding: 0;\n      }}\n    &lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;noscript&gt;\n        ReDoc requires Javascript to function. Please enable it to browse the documentation.\n    &lt;/noscript&gt;\n    &lt;redoc spec-url=\"{openapi_url}\"&gt;&lt;/redoc&gt;\n    &lt;script src=\"{redoc_js_url}\"&gt; &lt;/script&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\"\n    return HTMLResponse(html)\n</code></pre>"},{"location":"reference/openapi/docs/#readyapi.openapi.docs.get_swagger_ui_oauth2_redirect_html","title":"readyapi.openapi.docs.get_swagger_ui_oauth2_redirect_html","text":"<pre><code>get_swagger_ui_oauth2_redirect_html()\n</code></pre> <p>Generate the HTML response with the OAuth2 redirection for Swagger UI.</p> <p>You normally don't need to use or change this.</p> Source code in <code>readyapi/openapi/docs.py</code> <pre><code>def get_swagger_ui_oauth2_redirect_html() -&gt; HTMLResponse:\n    \"\"\"\n    Generate the HTML response with the OAuth2 redirection for Swagger UI.\n\n    You normally don't need to use or change this.\n    \"\"\"\n    # copied from https://github.com/swagger-api/swagger-ui/blob/v4.14.0/dist/oauth2-redirect.html\n    html = \"\"\"\n    &lt;!doctype html&gt;\n    &lt;html lang=\"en-US\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;Swagger UI: OAuth2 Redirect&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;script&gt;\n        'use strict';\n        function run () {\n            var oauth2 = window.opener.swaggerUIRedirectOauth2;\n            var sentState = oauth2.state;\n            var redirectUrl = oauth2.redirectUrl;\n            var isValid, qp, arr;\n\n            if (/code|token|error/.test(window.location.hash)) {\n                qp = window.location.hash.substring(1).replace('?', '&amp;');\n            } else {\n                qp = location.search.substring(1);\n            }\n\n            arr = qp.split(\"&amp;\");\n            arr.forEach(function (v,i,_arr) { _arr[i] = '\"' + v.replace('=', '\":\"') + '\"';});\n            qp = qp ? JSON.parse('{' + arr.join() + '}',\n                    function (key, value) {\n                        return key === \"\" ? value : decodeURIComponent(value);\n                    }\n            ) : {};\n\n            isValid = qp.state === sentState;\n\n            if ((\n              oauth2.auth.schema.get(\"flow\") === \"accessCode\" ||\n              oauth2.auth.schema.get(\"flow\") === \"authorizationCode\" ||\n              oauth2.auth.schema.get(\"flow\") === \"authorization_code\"\n            ) &amp;&amp; !oauth2.auth.code) {\n                if (!isValid) {\n                    oauth2.errCb({\n                        authId: oauth2.auth.name,\n                        source: \"auth\",\n                        level: \"warning\",\n                        message: \"Authorization may be unsafe, passed state was changed in server. The passed state wasn't returned from auth server.\"\n                    });\n                }\n\n                if (qp.code) {\n                    delete oauth2.state;\n                    oauth2.auth.code = qp.code;\n                    oauth2.callback({auth: oauth2.auth, redirectUrl: redirectUrl});\n                } else {\n                    let oauthErrorMsg;\n                    if (qp.error) {\n                        oauthErrorMsg = \"[\"+qp.error+\"]: \" +\n                            (qp.error_description ? qp.error_description+ \". \" : \"no accessCode received from the server. \") +\n                            (qp.error_uri ? \"More info: \"+qp.error_uri : \"\");\n                    }\n\n                    oauth2.errCb({\n                        authId: oauth2.auth.name,\n                        source: \"auth\",\n                        level: \"error\",\n                        message: oauthErrorMsg || \"[Authorization failed]: no accessCode received from the server.\"\n                    });\n                }\n            } else {\n                oauth2.callback({auth: oauth2.auth, token: qp, isValid: isValid, redirectUrl: redirectUrl});\n            }\n            window.close();\n        }\n\n        if (document.readyState !== 'loading') {\n            run();\n        } else {\n            document.addEventListener('DOMContentLoaded', function () {\n                run();\n            });\n        }\n    &lt;/script&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n        \"\"\"\n    return HTMLResponse(content=html)\n</code></pre>"},{"location":"reference/openapi/docs/#readyapi.openapi.docs.swagger_ui_default_parameters","title":"readyapi.openapi.docs.swagger_ui_default_parameters  <code>module-attribute</code>","text":"<pre><code>swagger_ui_default_parameters = {\n    \"dom_id\": \"#swagger-ui\",\n    \"layout\": \"BaseLayout\",\n    \"deepLinking\": True,\n    \"showExtensions\": True,\n    \"showCommonExtensions\": True,\n}\n</code></pre> <p>Default configurations for Swagger UI.</p> <p>You can use it as a template to add any other configurations needed.</p>"},{"location":"reference/openapi/models/","title":"OpenAPI <code>models</code>","text":"<p>OpenAPI Pydantic models used to generate and validate the generated OpenAPI.</p>"},{"location":"reference/openapi/models/#readyapi.openapi.models","title":"readyapi.openapi.models","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.SchemaOrBool","title":"SchemaOrBool  <code>module-attribute</code>","text":"<pre><code>SchemaOrBool = Union[Schema, bool]\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecurityScheme","title":"SecurityScheme  <code>module-attribute</code>","text":"<pre><code>SecurityScheme = Union[\n    APIKey, HTTPBase, OAuth2, OpenIdConnect, HTTPBearer\n]\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.BaseModelWithConfig","title":"BaseModelWithConfig","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.BaseModelWithConfig.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.BaseModelWithConfig.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.BaseModelWithConfig.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Contact","title":"Contact","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Contact.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Contact.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Contact.url","title":"url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>url = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Contact.email","title":"email  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>email = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Contact.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Contact.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.License","title":"License","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.License.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.License.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.License.identifier","title":"identifier  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>identifier = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.License.url","title":"url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>url = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.License.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.License.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info","title":"Info","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.summary","title":"summary  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>summary = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.termsOfService","title":"termsOfService  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>termsOfService = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.contact","title":"contact  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>contact = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.license","title":"license  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>license = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.version","title":"version  <code>instance-attribute</code>","text":"<pre><code>version\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ServerVariable","title":"ServerVariable","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ServerVariable.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ServerVariable.enum","title":"enum  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>enum = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ServerVariable.default","title":"default  <code>instance-attribute</code>","text":"<pre><code>default\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ServerVariable.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ServerVariable.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.ServerVariable.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Server","title":"Server","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Server.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Server.url","title":"url  <code>instance-attribute</code>","text":"<pre><code>url\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Server.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Server.variables","title":"variables  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>variables = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Server.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Server.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Reference","title":"Reference","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Reference.ref","title":"ref  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ref = Field(alias='$ref')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Discriminator","title":"Discriminator","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Discriminator.propertyName","title":"propertyName  <code>instance-attribute</code>","text":"<pre><code>propertyName\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Discriminator.mapping","title":"mapping  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>mapping = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.XML","title":"XML","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.XML.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.XML.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.XML.namespace","title":"namespace  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>namespace = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.XML.prefix","title":"prefix  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>prefix = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.XML.attribute","title":"attribute  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>attribute = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.XML.wrapped","title":"wrapped  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>wrapped = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.XML.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.XML.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ExternalDocumentation","title":"ExternalDocumentation","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ExternalDocumentation.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ExternalDocumentation.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ExternalDocumentation.url","title":"url  <code>instance-attribute</code>","text":"<pre><code>url\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ExternalDocumentation.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.ExternalDocumentation.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema","title":"Schema","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.schema_","title":"schema_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>schema_ = Field(default=None, alias='$schema')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.vocabulary","title":"vocabulary  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>vocabulary = Field(default=None, alias='$vocabulary')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.id","title":"id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>id = Field(default=None, alias='$id')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.anchor","title":"anchor  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>anchor = Field(default=None, alias='$anchor')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.dynamicAnchor","title":"dynamicAnchor  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>dynamicAnchor = Field(default=None, alias='$dynamicAnchor')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.ref","title":"ref  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ref = Field(default=None, alias='$ref')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.dynamicRef","title":"dynamicRef  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>dynamicRef = Field(default=None, alias='$dynamicRef')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.defs","title":"defs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>defs = Field(default=None, alias='$defs')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.comment","title":"comment  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>comment = Field(default=None, alias='$comment')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.allOf","title":"allOf  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>allOf = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.anyOf","title":"anyOf  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>anyOf = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.oneOf","title":"oneOf  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>oneOf = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.not_","title":"not_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>not_ = Field(default=None, alias='not')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.if_","title":"if_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>if_ = Field(default=None, alias='if')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.then","title":"then  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>then = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.else_","title":"else_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>else_ = Field(default=None, alias='else')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.dependentSchemas","title":"dependentSchemas  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>dependentSchemas = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.prefixItems","title":"prefixItems  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>prefixItems = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.items","title":"items  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>items = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.contains","title":"contains  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>contains = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.properties","title":"properties  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>properties = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.patternProperties","title":"patternProperties  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>patternProperties = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.additionalProperties","title":"additionalProperties  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>additionalProperties = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.propertyNames","title":"propertyNames  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>propertyNames = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.unevaluatedItems","title":"unevaluatedItems  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>unevaluatedItems = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.unevaluatedProperties","title":"unevaluatedProperties  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>unevaluatedProperties = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.type","title":"type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.enum","title":"enum  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>enum = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.const","title":"const  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>const = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.multipleOf","title":"multipleOf  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>multipleOf = Field(default=None, gt=0)\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.maximum","title":"maximum  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>maximum = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.exclusiveMaximum","title":"exclusiveMaximum  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>exclusiveMaximum = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.minimum","title":"minimum  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>minimum = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.exclusiveMinimum","title":"exclusiveMinimum  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>exclusiveMinimum = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.maxLength","title":"maxLength  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>maxLength = Field(default=None, ge=0)\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.minLength","title":"minLength  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>minLength = Field(default=None, ge=0)\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.pattern","title":"pattern  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>pattern = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.maxItems","title":"maxItems  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>maxItems = Field(default=None, ge=0)\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.minItems","title":"minItems  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>minItems = Field(default=None, ge=0)\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.uniqueItems","title":"uniqueItems  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>uniqueItems = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.maxContains","title":"maxContains  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>maxContains = Field(default=None, ge=0)\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.minContains","title":"minContains  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>minContains = Field(default=None, ge=0)\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.maxProperties","title":"maxProperties  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>maxProperties = Field(default=None, ge=0)\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.minProperties","title":"minProperties  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>minProperties = Field(default=None, ge=0)\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.required","title":"required  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>required = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.dependentRequired","title":"dependentRequired  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>dependentRequired = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.format","title":"format  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>format = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.contentEncoding","title":"contentEncoding  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>contentEncoding = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.contentMediaType","title":"contentMediaType  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>contentMediaType = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.contentSchema","title":"contentSchema  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>contentSchema = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.title","title":"title  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>title = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.default","title":"default  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.deprecated","title":"deprecated  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>deprecated = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.readOnly","title":"readOnly  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>readOnly = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.writeOnly","title":"writeOnly  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>writeOnly = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.examples","title":"examples  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>examples = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.discriminator","title":"discriminator  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>discriminator = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.xml","title":"xml  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>xml = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.externalDocs","title":"externalDocs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>externalDocs = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.example","title":"example  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>example = None\n</code></pre> Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, although still supported. Use examples instead."},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Example","title":"Example","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Example.summary","title":"summary  <code>instance-attribute</code>","text":"<pre><code>summary\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Example.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Example.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Example.externalValue","title":"externalValue  <code>instance-attribute</code>","text":"<pre><code>externalValue\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Example.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Example.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterInType","title":"ParameterInType","text":"<p>               Bases: <code>Enum</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterInType.query","title":"query  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>query = 'query'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterInType.header","title":"header  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>header = 'header'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterInType.path","title":"path  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>path = 'path'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterInType.cookie","title":"cookie  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>cookie = 'cookie'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Encoding","title":"Encoding","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Encoding.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Encoding.contentType","title":"contentType  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>contentType = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Encoding.headers","title":"headers  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>headers = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Encoding.style","title":"style  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>style = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Encoding.explode","title":"explode  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>explode = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Encoding.allowReserved","title":"allowReserved  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>allowReserved = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Encoding.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Encoding.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.MediaType","title":"MediaType","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.MediaType.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.MediaType.schema_","title":"schema_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>schema_ = Field(default=None, alias='schema')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.MediaType.example","title":"example  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>example = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.MediaType.examples","title":"examples  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>examples = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.MediaType.encoding","title":"encoding  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>encoding = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.MediaType.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.MediaType.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase","title":"ParameterBase","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.required","title":"required  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>required = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.deprecated","title":"deprecated  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>deprecated = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.style","title":"style  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>style = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.explode","title":"explode  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>explode = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.allowReserved","title":"allowReserved  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>allowReserved = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.schema_","title":"schema_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>schema_ = Field(default=None, alias='schema')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.example","title":"example  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>example = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.examples","title":"examples  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>examples = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.content","title":"content  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>content = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter","title":"Parameter","text":"<p>               Bases: <code>ParameterBase</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.required","title":"required  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>required = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.deprecated","title":"deprecated  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>deprecated = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.style","title":"style  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>style = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.explode","title":"explode  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>explode = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.allowReserved","title":"allowReserved  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>allowReserved = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.schema_","title":"schema_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>schema_ = Field(default=None, alias='schema')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.example","title":"example  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>example = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.examples","title":"examples  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>examples = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.content","title":"content  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>content = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.in_","title":"in_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>in_ = Field(alias='in')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header","title":"Header","text":"<p>               Bases: <code>ParameterBase</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.required","title":"required  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>required = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.deprecated","title":"deprecated  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>deprecated = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.style","title":"style  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>style = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.explode","title":"explode  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>explode = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.allowReserved","title":"allowReserved  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>allowReserved = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.schema_","title":"schema_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>schema_ = Field(default=None, alias='schema')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.example","title":"example  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>example = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.examples","title":"examples  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>examples = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.content","title":"content  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>content = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.RequestBody","title":"RequestBody","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.RequestBody.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.RequestBody.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.RequestBody.content","title":"content  <code>instance-attribute</code>","text":"<pre><code>content\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.RequestBody.required","title":"required  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>required = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.RequestBody.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.RequestBody.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Link","title":"Link","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Link.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Link.operationRef","title":"operationRef  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>operationRef = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Link.operationId","title":"operationId  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>operationId = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Link.parameters","title":"parameters  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>parameters = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Link.requestBody","title":"requestBody  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>requestBody = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Link.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Link.server","title":"server  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>server = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Link.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Link.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Response","title":"Response","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Response.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Response.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Response.headers","title":"headers  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>headers = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Response.content","title":"content  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>content = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Response.links","title":"links  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>links = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Response.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Response.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation","title":"Operation","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.tags","title":"tags  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tags = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.summary","title":"summary  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>summary = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.externalDocs","title":"externalDocs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>externalDocs = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.operationId","title":"operationId  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>operationId = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.parameters","title":"parameters  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>parameters = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.requestBody","title":"requestBody  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>requestBody = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.responses","title":"responses  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>responses = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.callbacks","title":"callbacks  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>callbacks = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.deprecated","title":"deprecated  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>deprecated = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.security","title":"security  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>security = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.servers","title":"servers  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>servers = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem","title":"PathItem","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.ref","title":"ref  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ref = Field(default=None, alias='$ref')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.summary","title":"summary  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>summary = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.get","title":"get  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>get = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.put","title":"put  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>put = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.post","title":"post  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>post = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.delete","title":"delete  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>delete = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.options","title":"options  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>options = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.head","title":"head  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>head = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.patch","title":"patch  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>patch = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.trace","title":"trace  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>trace = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.servers","title":"servers  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>servers = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.parameters","title":"parameters  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>parameters = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecuritySchemeType","title":"SecuritySchemeType","text":"<p>               Bases: <code>Enum</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecuritySchemeType.apiKey","title":"apiKey  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>apiKey = 'apiKey'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecuritySchemeType.http","title":"http  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>http = 'http'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecuritySchemeType.oauth2","title":"oauth2  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>oauth2 = 'oauth2'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecuritySchemeType.openIdConnect","title":"openIdConnect  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>openIdConnect = 'openIdConnect'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecurityBase","title":"SecurityBase","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecurityBase.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecurityBase.type_","title":"type_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type_ = Field(alias='type')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecurityBase.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecurityBase.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.SecurityBase.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKeyIn","title":"APIKeyIn","text":"<p>               Bases: <code>Enum</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKeyIn.query","title":"query  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>query = 'query'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKeyIn.header","title":"header  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>header = 'header'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKeyIn.cookie","title":"cookie  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>cookie = 'cookie'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKey","title":"APIKey","text":"<p>               Bases: <code>SecurityBase</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKey.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKey.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKey.type_","title":"type_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type_ = Field(default=apiKey, alias='type')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKey.in_","title":"in_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>in_ = Field(alias='in')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKey.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKey.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKey.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBase","title":"HTTPBase","text":"<p>               Bases: <code>SecurityBase</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBase.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBase.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBase.type_","title":"type_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type_ = Field(default=http, alias='type')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBase.scheme","title":"scheme  <code>instance-attribute</code>","text":"<pre><code>scheme\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBase.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBase.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBearer","title":"HTTPBearer","text":"<p>               Bases: <code>HTTPBase</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBearer.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBearer.type_","title":"type_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type_ = Field(default=http, alias='type')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBearer.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBearer.scheme","title":"scheme  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>scheme = 'bearer'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBearer.bearerFormat","title":"bearerFormat  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>bearerFormat = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBearer.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBearer.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlow","title":"OAuthFlow","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlow.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlow.refreshUrl","title":"refreshUrl  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>refreshUrl = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlow.scopes","title":"scopes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>scopes = {}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlow.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlow.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowImplicit","title":"OAuthFlowImplicit","text":"<p>               Bases: <code>OAuthFlow</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowImplicit.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowImplicit.refreshUrl","title":"refreshUrl  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>refreshUrl = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowImplicit.scopes","title":"scopes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>scopes = {}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowImplicit.authorizationUrl","title":"authorizationUrl  <code>instance-attribute</code>","text":"<pre><code>authorizationUrl\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowImplicit.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowImplicit.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowPassword","title":"OAuthFlowPassword","text":"<p>               Bases: <code>OAuthFlow</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowPassword.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowPassword.refreshUrl","title":"refreshUrl  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>refreshUrl = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowPassword.scopes","title":"scopes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>scopes = {}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowPassword.tokenUrl","title":"tokenUrl  <code>instance-attribute</code>","text":"<pre><code>tokenUrl\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowPassword.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowPassword.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowClientCredentials","title":"OAuthFlowClientCredentials","text":"<p>               Bases: <code>OAuthFlow</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowClientCredentials.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowClientCredentials.refreshUrl","title":"refreshUrl  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>refreshUrl = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowClientCredentials.scopes","title":"scopes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>scopes = {}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowClientCredentials.tokenUrl","title":"tokenUrl  <code>instance-attribute</code>","text":"<pre><code>tokenUrl\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowClientCredentials.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowClientCredentials.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowAuthorizationCode","title":"OAuthFlowAuthorizationCode","text":"<p>               Bases: <code>OAuthFlow</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowAuthorizationCode.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowAuthorizationCode.refreshUrl","title":"refreshUrl  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>refreshUrl = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowAuthorizationCode.scopes","title":"scopes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>scopes = {}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowAuthorizationCode.authorizationUrl","title":"authorizationUrl  <code>instance-attribute</code>","text":"<pre><code>authorizationUrl\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowAuthorizationCode.tokenUrl","title":"tokenUrl  <code>instance-attribute</code>","text":"<pre><code>tokenUrl\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowAuthorizationCode.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowAuthorizationCode.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlows","title":"OAuthFlows","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlows.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlows.implicit","title":"implicit  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>implicit = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlows.password","title":"password  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>password = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlows.clientCredentials","title":"clientCredentials  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>clientCredentials = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlows.authorizationCode","title":"authorizationCode  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>authorizationCode = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlows.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlows.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuth2","title":"OAuth2","text":"<p>               Bases: <code>SecurityBase</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuth2.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuth2.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuth2.type_","title":"type_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type_ = Field(default=oauth2, alias='type')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuth2.flows","title":"flows  <code>instance-attribute</code>","text":"<pre><code>flows\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuth2.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuth2.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenIdConnect","title":"OpenIdConnect","text":"<p>               Bases: <code>SecurityBase</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenIdConnect.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenIdConnect.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenIdConnect.type_","title":"type_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type_ = Field(default=openIdConnect, alias='type')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenIdConnect.openIdConnectUrl","title":"openIdConnectUrl  <code>instance-attribute</code>","text":"<pre><code>openIdConnectUrl\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenIdConnect.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenIdConnect.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components","title":"Components","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.schemas","title":"schemas  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>schemas = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.responses","title":"responses  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>responses = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.parameters","title":"parameters  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>parameters = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.examples","title":"examples  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>examples = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.requestBodies","title":"requestBodies  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>requestBodies = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.headers","title":"headers  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>headers = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.securitySchemes","title":"securitySchemes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>securitySchemes = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.links","title":"links  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>links = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.callbacks","title":"callbacks  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>callbacks = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.pathItems","title":"pathItems  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>pathItems = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Tag","title":"Tag","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Tag.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Tag.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Tag.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Tag.externalDocs","title":"externalDocs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>externalDocs = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Tag.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Tag.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI","title":"OpenAPI","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.openapi","title":"openapi  <code>instance-attribute</code>","text":"<pre><code>openapi\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.info","title":"info  <code>instance-attribute</code>","text":"<pre><code>info\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.jsonSchemaDialect","title":"jsonSchemaDialect  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>jsonSchemaDialect = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.servers","title":"servers  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>servers = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.paths","title":"paths  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>paths = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.webhooks","title":"webhooks  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>webhooks = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.components","title":"components  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>components = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.security","title":"security  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>security = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.tags","title":"tags  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tags = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.externalDocs","title":"externalDocs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>externalDocs = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/security/","title":"Security Tools","text":"<p>When you need to declare dependencies with OAuth2 scopes you use <code>Security()</code>.</p> <p>But you still need to define what is the dependable, the callable that you pass as a parameter to <code>Depends()</code> or <code>Security()</code>.</p> <p>There are multiple tools that you can use to create those dependables, and they get integrated into OpenAPI so they are shown in the automatic docs UI, they can be used by automatically generated clients and SDKs, etc.</p> <p>You can import them from <code>readyapi.security</code>:</p> <pre><code>from readyapi.security import (\n    APIKeyCookie,\n    APIKeyHeader,\n    APIKeyQuery,\n    HTTPAuthorizationCredentials,\n    HTTPBasic,\n    HTTPBasicCredentials,\n    HTTPBearer,\n    HTTPDigest,\n    OAuth2,\n    OAuth2AuthorizationCodeBearer,\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    OAuth2PasswordRequestFormStrict,\n    OpenIdConnect,\n    SecurityScopes,\n)\n</code></pre>"},{"location":"reference/security/#api-key-security-schemes","title":"API Key Security Schemes","text":""},{"location":"reference/security/#readyapi.security.APIKeyCookie","title":"readyapi.security.APIKeyCookie","text":"<pre><code>APIKeyCookie(\n    *,\n    name,\n    scheme_name=None,\n    description=None,\n    auto_error=True\n)\n</code></pre> <p>               Bases: <code>APIKeyBase</code></p> <p>API key authentication using a cookie.</p> <p>This defines the name of the cookie that should be provided in the request with the API key and integrates that into the OpenAPI documentation. It extracts the key value sent in the cookie automatically and provides it as the dependency result. But it doesn't define how to set that cookie.</p>"},{"location":"reference/security/#readyapi.security.APIKeyCookie--usage","title":"Usage","text":"<p>Create an instance object and use that object as the dependency in <code>Depends()</code>.</p> <p>The dependency result will be a string containing the key value.</p>"},{"location":"reference/security/#readyapi.security.APIKeyCookie--example","title":"Example","text":"<pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import APIKeyCookie\n\napp = ReadyAPI()\n\ncookie_scheme = APIKeyCookie(name=\"session\")\n\n\n@app.get(\"/items/\")\nasync def read_items(session: str = Depends(cookie_scheme)):\n    return {\"session\": session}\n</code></pre> PARAMETER DESCRIPTION <code>name</code> <p>Cookie name.</p> <p> TYPE: <code>str</code> </p> <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if the cookie is not provided, <code>APIKeyCookie</code> will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the cookie is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, in a cookie or in an HTTP Bearer token).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/api_key.py</code> <pre><code>def __init__(\n    self,\n    *,\n    name: Annotated[str, Doc(\"Cookie name.\")],\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if the cookie is not provided, `APIKeyCookie` will\n            automatically cancel the request and send the client an error.\n\n            If `auto_error` is set to `False`, when the cookie is not available,\n            instead of erroring out, the dependency result will be `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, in a cookie or\n            in an HTTP Bearer token).\n            \"\"\"\n        ),\n    ] = True,\n):\n    self.model: APIKey = APIKey(\n        **{\"in\": APIKeyIn.cookie},  # type: ignore[arg-type]\n        name=name,\n        description=description,\n    )\n    self.scheme_name = scheme_name or self.__class__.__name__\n    self.auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyCookie.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = APIKey(\n    **{\"in\": cookie}, name=name, description=description\n)\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyCookie.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyCookie.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyCookie.check_api_key","title":"check_api_key  <code>staticmethod</code>","text":"<pre><code>check_api_key(api_key, auto_error)\n</code></pre> PARAMETER DESCRIPTION <code>api_key</code> <p> TYPE: <code>Optional[str]</code> </p> <code>auto_error</code> <p> TYPE: <code>bool</code> </p> Source code in <code>readyapi/security/api_key.py</code> <pre><code>@staticmethod\ndef check_api_key(api_key: Optional[str], auto_error: bool) -&gt; Optional[str]:\n    if not api_key:\n        if auto_error:\n            raise HTTPException(\n                status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n            )\n        return None\n    return api_key\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyHeader","title":"readyapi.security.APIKeyHeader","text":"<pre><code>APIKeyHeader(\n    *,\n    name,\n    scheme_name=None,\n    description=None,\n    auto_error=True\n)\n</code></pre> <p>               Bases: <code>APIKeyBase</code></p> <p>API key authentication using a header.</p> <p>This defines the name of the header that should be provided in the request with the API key and integrates that into the OpenAPI documentation. It extracts the key value sent in the header automatically and provides it as the dependency result. But it doesn't define how to send that key to the client.</p>"},{"location":"reference/security/#readyapi.security.APIKeyHeader--usage","title":"Usage","text":"<p>Create an instance object and use that object as the dependency in <code>Depends()</code>.</p> <p>The dependency result will be a string containing the key value.</p>"},{"location":"reference/security/#readyapi.security.APIKeyHeader--example","title":"Example","text":"<pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import APIKeyHeader\n\napp = ReadyAPI()\n\nheader_scheme = APIKeyHeader(name=\"x-key\")\n\n\n@app.get(\"/items/\")\nasync def read_items(key: str = Depends(header_scheme)):\n    return {\"key\": key}\n</code></pre> PARAMETER DESCRIPTION <code>name</code> <p>Header name.</p> <p> TYPE: <code>str</code> </p> <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if the header is not provided, <code>APIKeyHeader</code> will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the header is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, in a header or in an HTTP Bearer token).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/api_key.py</code> <pre><code>def __init__(\n    self,\n    *,\n    name: Annotated[str, Doc(\"Header name.\")],\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if the header is not provided, `APIKeyHeader` will\n            automatically cancel the request and send the client an error.\n\n            If `auto_error` is set to `False`, when the header is not available,\n            instead of erroring out, the dependency result will be `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, in a header or\n            in an HTTP Bearer token).\n            \"\"\"\n        ),\n    ] = True,\n):\n    self.model: APIKey = APIKey(\n        **{\"in\": APIKeyIn.header},  # type: ignore[arg-type]\n        name=name,\n        description=description,\n    )\n    self.scheme_name = scheme_name or self.__class__.__name__\n    self.auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyHeader.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = APIKey(\n    **{\"in\": header}, name=name, description=description\n)\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyHeader.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyHeader.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyHeader.check_api_key","title":"check_api_key  <code>staticmethod</code>","text":"<pre><code>check_api_key(api_key, auto_error)\n</code></pre> PARAMETER DESCRIPTION <code>api_key</code> <p> TYPE: <code>Optional[str]</code> </p> <code>auto_error</code> <p> TYPE: <code>bool</code> </p> Source code in <code>readyapi/security/api_key.py</code> <pre><code>@staticmethod\ndef check_api_key(api_key: Optional[str], auto_error: bool) -&gt; Optional[str]:\n    if not api_key:\n        if auto_error:\n            raise HTTPException(\n                status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n            )\n        return None\n    return api_key\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyQuery","title":"readyapi.security.APIKeyQuery","text":"<pre><code>APIKeyQuery(\n    *,\n    name,\n    scheme_name=None,\n    description=None,\n    auto_error=True\n)\n</code></pre> <p>               Bases: <code>APIKeyBase</code></p> <p>API key authentication using a query parameter.</p> <p>This defines the name of the query parameter that should be provided in the request with the API key and integrates that into the OpenAPI documentation. It extracts the key value sent in the query parameter automatically and provides it as the dependency result. But it doesn't define how to send that API key to the client.</p>"},{"location":"reference/security/#readyapi.security.APIKeyQuery--usage","title":"Usage","text":"<p>Create an instance object and use that object as the dependency in <code>Depends()</code>.</p> <p>The dependency result will be a string containing the key value.</p>"},{"location":"reference/security/#readyapi.security.APIKeyQuery--example","title":"Example","text":"<pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import APIKeyQuery\n\napp = ReadyAPI()\n\nquery_scheme = APIKeyQuery(name=\"api_key\")\n\n\n@app.get(\"/items/\")\nasync def read_items(api_key: str = Depends(query_scheme)):\n    return {\"api_key\": api_key}\n</code></pre> PARAMETER DESCRIPTION <code>name</code> <p>Query parameter name.</p> <p> TYPE: <code>str</code> </p> <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if the query parameter is not provided, <code>APIKeyQuery</code> will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the query parameter is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, in a query parameter or in an HTTP Bearer token).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/api_key.py</code> <pre><code>def __init__(\n    self,\n    *,\n    name: Annotated[\n        str,\n        Doc(\"Query parameter name.\"),\n    ],\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if the query parameter is not provided, `APIKeyQuery` will\n            automatically cancel the request and send the client an error.\n\n            If `auto_error` is set to `False`, when the query parameter is not\n            available, instead of erroring out, the dependency result will be\n            `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, in a query\n            parameter or in an HTTP Bearer token).\n            \"\"\"\n        ),\n    ] = True,\n):\n    self.model: APIKey = APIKey(\n        **{\"in\": APIKeyIn.query},  # type: ignore[arg-type]\n        name=name,\n        description=description,\n    )\n    self.scheme_name = scheme_name or self.__class__.__name__\n    self.auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyQuery.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = APIKey(\n    **{\"in\": query}, name=name, description=description\n)\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyQuery.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyQuery.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyQuery.check_api_key","title":"check_api_key  <code>staticmethod</code>","text":"<pre><code>check_api_key(api_key, auto_error)\n</code></pre> PARAMETER DESCRIPTION <code>api_key</code> <p> TYPE: <code>Optional[str]</code> </p> <code>auto_error</code> <p> TYPE: <code>bool</code> </p> Source code in <code>readyapi/security/api_key.py</code> <pre><code>@staticmethod\ndef check_api_key(api_key: Optional[str], auto_error: bool) -&gt; Optional[str]:\n    if not api_key:\n        if auto_error:\n            raise HTTPException(\n                status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n            )\n        return None\n    return api_key\n</code></pre>"},{"location":"reference/security/#http-authentication-schemes","title":"HTTP Authentication Schemes","text":""},{"location":"reference/security/#readyapi.security.HTTPBasic","title":"readyapi.security.HTTPBasic","text":"<pre><code>HTTPBasic(\n    *,\n    scheme_name=None,\n    realm=None,\n    description=None,\n    auto_error=True\n)\n</code></pre> <p>               Bases: <code>HTTPBase</code></p> <p>HTTP Basic authentication.</p>"},{"location":"reference/security/#readyapi.security.HTTPBasic--usage","title":"Usage","text":"<p>Create an instance object and use that object as the dependency in <code>Depends()</code>.</p> <p>The dependency result will be an <code>HTTPBasicCredentials</code> object containing the <code>username</code> and the <code>password</code>.</p> <p>Read more about it in the ReadyAPI docs for HTTP Basic Auth.</p>"},{"location":"reference/security/#readyapi.security.HTTPBasic--example","title":"Example","text":"<pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\n@app.get(\"/users/me\")\ndef read_current_user(credentials: Annotated[HTTPBasicCredentials, Depends(security)]):\n    return {\"username\": credentials.username, \"password\": credentials.password}\n</code></pre> PARAMETER DESCRIPTION <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>realm</code> <p>HTTP Basic authentication realm.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if the HTTP Basic authentication is not provided (a header), <code>HTTPBasic</code> will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the HTTP Basic authentication is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, in HTTP Basic authentication or in an HTTP Bearer token).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/http.py</code> <pre><code>def __init__(\n    self,\n    *,\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    realm: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            HTTP Basic authentication realm.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if the HTTP Basic authentication is not provided (a\n            header), `HTTPBasic` will automatically cancel the request and send the\n            client an error.\n\n            If `auto_error` is set to `False`, when the HTTP Basic authentication\n            is not available, instead of erroring out, the dependency result will\n            be `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, in HTTP Basic\n            authentication or in an HTTP Bearer token).\n            \"\"\"\n        ),\n    ] = True,\n):\n    self.model = HTTPBaseModel(scheme=\"basic\", description=description)\n    self.scheme_name = scheme_name or self.__class__.__name__\n    self.realm = realm\n    self.auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPBasic.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = HTTPBase(scheme='basic', description=description)\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPBasic.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPBasic.realm","title":"realm  <code>instance-attribute</code>","text":"<pre><code>realm = realm\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPBasic.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPBearer","title":"readyapi.security.HTTPBearer","text":"<pre><code>HTTPBearer(\n    *,\n    bearerFormat=None,\n    scheme_name=None,\n    description=None,\n    auto_error=True\n)\n</code></pre> <p>               Bases: <code>HTTPBase</code></p> <p>HTTP Bearer token authentication.</p>"},{"location":"reference/security/#readyapi.security.HTTPBearer--usage","title":"Usage","text":"<p>Create an instance object and use that object as the dependency in <code>Depends()</code>.</p> <p>The dependency result will be an <code>HTTPAuthorizationCredentials</code> object containing the <code>scheme</code> and the <code>credentials</code>.</p>"},{"location":"reference/security/#readyapi.security.HTTPBearer--example","title":"Example","text":"<pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import HTTPAuthorizationCredentials, HTTPBearer\n\napp = ReadyAPI()\n\nsecurity = HTTPBearer()\n\n\n@app.get(\"/users/me\")\ndef read_current_user(\n    credentials: Annotated[HTTPAuthorizationCredentials, Depends(security)]\n):\n    return {\"scheme\": credentials.scheme, \"credentials\": credentials.credentials}\n</code></pre> PARAMETER DESCRIPTION <code>bearerFormat</code> <p>Bearer token format.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if the HTTP Bearer token is not provided (in an <code>Authorization</code> header), <code>HTTPBearer</code> will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the HTTP Bearer token is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, in an HTTP Bearer token or in a cookie).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/http.py</code> <pre><code>def __init__(\n    self,\n    *,\n    bearerFormat: Annotated[Optional[str], Doc(\"Bearer token format.\")] = None,\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if the HTTP Bearer token is not provided (in an\n            `Authorization` header), `HTTPBearer` will automatically cancel the\n            request and send the client an error.\n\n            If `auto_error` is set to `False`, when the HTTP Bearer token\n            is not available, instead of erroring out, the dependency result will\n            be `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, in an HTTP\n            Bearer token or in a cookie).\n            \"\"\"\n        ),\n    ] = True,\n):\n    self.model = HTTPBearerModel(bearerFormat=bearerFormat, description=description)\n    self.scheme_name = scheme_name or self.__class__.__name__\n    self.auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPBearer.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = HTTPBearer(\n    bearerFormat=bearerFormat, description=description\n)\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPBearer.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPBearer.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPDigest","title":"readyapi.security.HTTPDigest","text":"<pre><code>HTTPDigest(\n    *, scheme_name=None, description=None, auto_error=True\n)\n</code></pre> <p>               Bases: <code>HTTPBase</code></p> <p>HTTP Digest authentication.</p>"},{"location":"reference/security/#readyapi.security.HTTPDigest--usage","title":"Usage","text":"<p>Create an instance object and use that object as the dependency in <code>Depends()</code>.</p> <p>The dependency result will be an <code>HTTPAuthorizationCredentials</code> object containing the <code>scheme</code> and the <code>credentials</code>.</p>"},{"location":"reference/security/#readyapi.security.HTTPDigest--example","title":"Example","text":"<pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import HTTPAuthorizationCredentials, HTTPDigest\n\napp = ReadyAPI()\n\nsecurity = HTTPDigest()\n\n\n@app.get(\"/users/me\")\ndef read_current_user(\n    credentials: Annotated[HTTPAuthorizationCredentials, Depends(security)]\n):\n    return {\"scheme\": credentials.scheme, \"credentials\": credentials.credentials}\n</code></pre> PARAMETER DESCRIPTION <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if the HTTP Digest is not provided, <code>HTTPDigest</code> will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the HTTP Digest is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, in HTTP Digest or in a cookie).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/http.py</code> <pre><code>def __init__(\n    self,\n    *,\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if the HTTP Digest is not provided, `HTTPDigest` will\n            automatically cancel the request and send the client an error.\n\n            If `auto_error` is set to `False`, when the HTTP Digest is not\n            available, instead of erroring out, the dependency result will\n            be `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, in HTTP\n            Digest or in a cookie).\n            \"\"\"\n        ),\n    ] = True,\n):\n    self.model = HTTPBaseModel(scheme=\"digest\", description=description)\n    self.scheme_name = scheme_name or self.__class__.__name__\n    self.auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPDigest.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = HTTPBase(scheme='digest', description=description)\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPDigest.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPDigest.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#http-credentials","title":"HTTP Credentials","text":""},{"location":"reference/security/#readyapi.security.HTTPAuthorizationCredentials","title":"readyapi.security.HTTPAuthorizationCredentials","text":"<p>               Bases: <code>BaseModel</code></p> <p>The HTTP authorization credentials in the result of using <code>HTTPBearer</code> or <code>HTTPDigest</code> in a dependency.</p> <p>The HTTP authorization header value is split by the first space.</p> <p>The first part is the <code>scheme</code>, the second part is the <code>credentials</code>.</p> <p>For example, in an HTTP Bearer token scheme, the client will send a header like:</p> <pre><code>Authorization: Bearer deadbeef12346\n</code></pre> <p>In this case:</p> <ul> <li><code>scheme</code> will have the value <code>\"Bearer\"</code></li> <li><code>credentials</code> will have the value <code>\"deadbeef12346\"</code></li> </ul>"},{"location":"reference/security/#readyapi.security.HTTPAuthorizationCredentials.scheme","title":"scheme  <code>instance-attribute</code>","text":"<pre><code>scheme\n</code></pre> <p>The HTTP authorization scheme extracted from the header value.</p>"},{"location":"reference/security/#readyapi.security.HTTPAuthorizationCredentials.credentials","title":"credentials  <code>instance-attribute</code>","text":"<pre><code>credentials\n</code></pre> <p>The HTTP authorization credentials extracted from the header value.</p>"},{"location":"reference/security/#readyapi.security.HTTPBasicCredentials","title":"readyapi.security.HTTPBasicCredentials","text":"<p>               Bases: <code>BaseModel</code></p> <p>The HTTP Basic credentials given as the result of using <code>HTTPBasic</code> in a dependency.</p> <p>Read more about it in the ReadyAPI docs for HTTP Basic Auth.</p>"},{"location":"reference/security/#readyapi.security.HTTPBasicCredentials.username","title":"username  <code>instance-attribute</code>","text":"<pre><code>username\n</code></pre> <p>The HTTP Basic username.</p>"},{"location":"reference/security/#readyapi.security.HTTPBasicCredentials.password","title":"password  <code>instance-attribute</code>","text":"<pre><code>password\n</code></pre> <p>The HTTP Basic password.</p>"},{"location":"reference/security/#oauth2-authentication","title":"OAuth2 Authentication","text":""},{"location":"reference/security/#readyapi.security.OAuth2","title":"readyapi.security.OAuth2","text":"<pre><code>OAuth2(\n    *,\n    flows=OAuthFlows(),\n    scheme_name=None,\n    description=None,\n    auto_error=True\n)\n</code></pre> <p>               Bases: <code>SecurityBase</code></p> <p>This is the base class for OAuth2 authentication, an instance of it would be used as a dependency. All other OAuth2 classes inherit from it and customize it for each OAuth2 flow.</p> <p>You normally would not create a new class inheriting from it but use one of the existing subclasses, and maybe compose them if you want to support multiple flows.</p> <p>Read more about it in the ReadyAPI docs for Security.</p> PARAMETER DESCRIPTION <code>flows</code> <p>The dictionary of OAuth2 flows.</p> <p> TYPE: <code>Union[OAuthFlows, Dict[str, Dict[str, Any]]]</code> DEFAULT: <code>OAuthFlows()</code> </p> <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if no HTTP Authorization header is provided, required for OAuth2 authentication, it will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the HTTP Authorization header is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, with OAuth2 or in a cookie).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/oauth2.py</code> <pre><code>def __init__(\n    self,\n    *,\n    flows: Annotated[\n        Union[OAuthFlowsModel, Dict[str, Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            The dictionary of OAuth2 flows.\n            \"\"\"\n        ),\n    ] = OAuthFlowsModel(),\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if no HTTP Authorization header is provided, required for\n            OAuth2 authentication, it will automatically cancel the request and\n            send the client an error.\n\n            If `auto_error` is set to `False`, when the HTTP Authorization header\n            is not available, instead of erroring out, the dependency result will\n            be `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, with OAuth2\n            or in a cookie).\n            \"\"\"\n        ),\n    ] = True,\n):\n    self.model = OAuth2Model(\n        flows=cast(OAuthFlowsModel, flows), description=description\n    )\n    self.scheme_name = scheme_name or self.__class__.__name__\n    self.auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = OAuth2(\n    flows=cast(OAuthFlows, flows), description=description\n)\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2AuthorizationCodeBearer","title":"readyapi.security.OAuth2AuthorizationCodeBearer","text":"<pre><code>OAuth2AuthorizationCodeBearer(\n    authorizationUrl,\n    tokenUrl,\n    refreshUrl=None,\n    scheme_name=None,\n    scopes=None,\n    description=None,\n    auto_error=True,\n)\n</code></pre> <p>               Bases: <code>OAuth2</code></p> <p>OAuth2 flow for authentication using a bearer token obtained with an OAuth2 code flow. An instance of it would be used as a dependency.</p> PARAMETER DESCRIPTION <code>authorizationUrl</code> <p> TYPE: <code>str</code> </p> <code>tokenUrl</code> <p>The URL to obtain the OAuth2 token.</p> <p> TYPE: <code>str</code> </p> <code>refreshUrl</code> <p>The URL to refresh the token and obtain a new one.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>scopes</code> <p>The OAuth2 scopes that would be required by the path operations that use this dependency.</p> <p> TYPE: <code>Optional[Dict[str, str]]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if no HTTP Authorization header is provided, required for OAuth2 authentication, it will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the HTTP Authorization header is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, with OAuth2 or in a cookie).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/oauth2.py</code> <pre><code>def __init__(\n    self,\n    authorizationUrl: str,\n    tokenUrl: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL to obtain the OAuth2 token.\n            \"\"\"\n        ),\n    ],\n    refreshUrl: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            The URL to refresh the token and obtain a new one.\n            \"\"\"\n        ),\n    ] = None,\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    scopes: Annotated[\n        Optional[Dict[str, str]],\n        Doc(\n            \"\"\"\n            The OAuth2 scopes that would be required by the *path operations* that\n            use this dependency.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if no HTTP Authorization header is provided, required for\n            OAuth2 authentication, it will automatically cancel the request and\n            send the client an error.\n\n            If `auto_error` is set to `False`, when the HTTP Authorization header\n            is not available, instead of erroring out, the dependency result will\n            be `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, with OAuth2\n            or in a cookie).\n            \"\"\"\n        ),\n    ] = True,\n):\n    if not scopes:\n        scopes = {}\n    flows = OAuthFlowsModel(\n        authorizationCode=cast(\n            Any,\n            {\n                \"authorizationUrl\": authorizationUrl,\n                \"tokenUrl\": tokenUrl,\n                \"refreshUrl\": refreshUrl,\n                \"scopes\": scopes,\n            },\n        )\n    )\n    super().__init__(\n        flows=flows,\n        scheme_name=scheme_name,\n        description=description,\n        auto_error=auto_error,\n    )\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2AuthorizationCodeBearer.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = OAuth2(\n    flows=cast(OAuthFlows, flows), description=description\n)\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2AuthorizationCodeBearer.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2AuthorizationCodeBearer.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordBearer","title":"readyapi.security.OAuth2PasswordBearer","text":"<pre><code>OAuth2PasswordBearer(\n    tokenUrl,\n    scheme_name=None,\n    scopes=None,\n    description=None,\n    auto_error=True,\n)\n</code></pre> <p>               Bases: <code>OAuth2</code></p> <p>OAuth2 flow for authentication using a bearer token obtained with a password. An instance of it would be used as a dependency.</p> <p>Read more about it in the ReadyAPI docs for Simple OAuth2 with Password and Bearer.</p> PARAMETER DESCRIPTION <code>tokenUrl</code> <p>The URL to obtain the OAuth2 token. This would be the path operation that has <code>OAuth2PasswordRequestForm</code> as a dependency.</p> <p> TYPE: <code>str</code> </p> <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>scopes</code> <p>The OAuth2 scopes that would be required by the path operations that use this dependency.</p> <p> TYPE: <code>Optional[Dict[str, str]]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if no HTTP Authorization header is provided, required for OAuth2 authentication, it will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the HTTP Authorization header is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, with OAuth2 or in a cookie).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/oauth2.py</code> <pre><code>def __init__(\n    self,\n    tokenUrl: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL to obtain the OAuth2 token. This would be the *path operation*\n            that has `OAuth2PasswordRequestForm` as a dependency.\n            \"\"\"\n        ),\n    ],\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    scopes: Annotated[\n        Optional[Dict[str, str]],\n        Doc(\n            \"\"\"\n            The OAuth2 scopes that would be required by the *path operations* that\n            use this dependency.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if no HTTP Authorization header is provided, required for\n            OAuth2 authentication, it will automatically cancel the request and\n            send the client an error.\n\n            If `auto_error` is set to `False`, when the HTTP Authorization header\n            is not available, instead of erroring out, the dependency result will\n            be `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, with OAuth2\n            or in a cookie).\n            \"\"\"\n        ),\n    ] = True,\n):\n    if not scopes:\n        scopes = {}\n    flows = OAuthFlowsModel(\n        password=cast(Any, {\"tokenUrl\": tokenUrl, \"scopes\": scopes})\n    )\n    super().__init__(\n        flows=flows,\n        scheme_name=scheme_name,\n        description=description,\n        auto_error=auto_error,\n    )\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordBearer.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = OAuth2(\n    flows=cast(OAuthFlows, flows), description=description\n)\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordBearer.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordBearer.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#oauth2-password-form","title":"OAuth2 Password Form","text":""},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestForm","title":"readyapi.security.OAuth2PasswordRequestForm","text":"<pre><code>OAuth2PasswordRequestForm(\n    *,\n    grant_type=None,\n    username,\n    password,\n    scope=\"\",\n    client_id=None,\n    client_secret=None\n)\n</code></pre> <p>This is a dependency class to collect the <code>username</code> and <code>password</code> as form data for an OAuth2 password flow.</p> <p>The OAuth2 specification dictates that for a password flow the data should be collected using form data (instead of JSON) and that it should have the specific fields <code>username</code> and <code>password</code>.</p> <p>All the initialization parameters are extracted from the request.</p> <p>Read more about it in the ReadyAPI docs for Simple OAuth2 with Password and Bearer.</p>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestForm--example","title":"Example","text":"<pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordRequestForm\n\napp = ReadyAPI()\n\n\n@app.post(\"/login\")\ndef login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    data = {}\n    data[\"scopes\"] = []\n    for scope in form_data.scopes:\n        data[\"scopes\"].append(scope)\n    if form_data.client_id:\n        data[\"client_id\"] = form_data.client_id\n    if form_data.client_secret:\n        data[\"client_secret\"] = form_data.client_secret\n    return data\n</code></pre> <p>Note that for OAuth2 the scope <code>items:read</code> is a single scope in an opaque string. You could have custom internal logic to separate it by colon characters (<code>:</code>) or similar, and get the two parts <code>items</code> and <code>read</code>. Many applications do that to group and organize permissions, you could do it as well in your application, just know that that it is application specific, it's not part of the specification.</p> PARAMETER DESCRIPTION <code>grant_type</code> <p>The OAuth2 spec says it is required and MUST be the fixed string \"password\". Nevertheless, this dependency class is permissive and allows not passing it. If you want to enforce it, use instead the <code>OAuth2PasswordRequestFormStrict</code> dependency.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>username</code> <p><code>username</code> string. The OAuth2 spec requires the exact field name <code>username</code>.</p> <p> TYPE: <code>str</code> </p> <code>password</code> <p><code>password</code> string. The OAuth2 spec requires the exact field name `password\".</p> <p> TYPE: <code>str</code> </p> <code>scope</code> <p>A single string with actually several scopes separated by spaces. Each scope is also a string.</p> <p>For example, a single string with:</p> <p>```python \"items:read items:write users:read profile openid\" ````</p> <p>would represent the scopes:</p> <ul> <li><code>items:read</code></li> <li><code>items:write</code></li> <li><code>users:read</code></li> <li><code>profile</code></li> <li><code>openid</code></li> </ul> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>client_id</code> <p>If there's a <code>client_id</code>, it can be sent as part of the form fields. But the OAuth2 specification recommends sending the <code>client_id</code> and <code>client_secret</code> (if any) using HTTP Basic auth.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>client_secret</code> <p>If there's a <code>client_password</code> (and a <code>client_id</code>), they can be sent as part of the form fields. But the OAuth2 specification recommends sending the <code>client_id</code> and <code>client_secret</code> (if any) using HTTP Basic auth.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> Source code in <code>readyapi/security/oauth2.py</code> <pre><code>def __init__(\n    self,\n    *,\n    grant_type: Annotated[\n        Union[str, None],\n        Form(pattern=\"^password$\"),\n        Doc(\n            \"\"\"\n            The OAuth2 spec says it is required and MUST be the fixed string\n            \"password\". Nevertheless, this dependency class is permissive and\n            allows not passing it. If you want to enforce it, use instead the\n            `OAuth2PasswordRequestFormStrict` dependency.\n            \"\"\"\n        ),\n    ] = None,\n    username: Annotated[\n        str,\n        Form(),\n        Doc(\n            \"\"\"\n            `username` string. The OAuth2 spec requires the exact field name\n            `username`.\n            \"\"\"\n        ),\n    ],\n    password: Annotated[\n        str,\n        Form(),\n        Doc(\n            \"\"\"\n            `password` string. The OAuth2 spec requires the exact field name\n            `password\".\n            \"\"\"\n        ),\n    ],\n    scope: Annotated[\n        str,\n        Form(),\n        Doc(\n            \"\"\"\n            A single string with actually several scopes separated by spaces. Each\n            scope is also a string.\n\n            For example, a single string with:\n\n            ```python\n            \"items:read items:write users:read profile openid\"\n            ````\n\n            would represent the scopes:\n\n            * `items:read`\n            * `items:write`\n            * `users:read`\n            * `profile`\n            * `openid`\n            \"\"\"\n        ),\n    ] = \"\",\n    client_id: Annotated[\n        Union[str, None],\n        Form(),\n        Doc(\n            \"\"\"\n            If there's a `client_id`, it can be sent as part of the form fields.\n            But the OAuth2 specification recommends sending the `client_id` and\n            `client_secret` (if any) using HTTP Basic auth.\n            \"\"\"\n        ),\n    ] = None,\n    client_secret: Annotated[\n        Union[str, None],\n        Form(),\n        Doc(\n            \"\"\"\n            If there's a `client_password` (and a `client_id`), they can be sent\n            as part of the form fields. But the OAuth2 specification recommends\n            sending the `client_id` and `client_secret` (if any) using HTTP Basic\n            auth.\n            \"\"\"\n        ),\n    ] = None,\n):\n    self.grant_type = grant_type\n    self.username = username\n    self.password = password\n    self.scopes = scope.split()\n    self.client_id = client_id\n    self.client_secret = client_secret\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestForm.grant_type","title":"grant_type  <code>instance-attribute</code>","text":"<pre><code>grant_type = grant_type\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestForm.username","title":"username  <code>instance-attribute</code>","text":"<pre><code>username = username\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestForm.password","title":"password  <code>instance-attribute</code>","text":"<pre><code>password = password\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestForm.scopes","title":"scopes  <code>instance-attribute</code>","text":"<pre><code>scopes = split()\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestForm.client_id","title":"client_id  <code>instance-attribute</code>","text":"<pre><code>client_id = client_id\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestForm.client_secret","title":"client_secret  <code>instance-attribute</code>","text":"<pre><code>client_secret = client_secret\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestFormStrict","title":"readyapi.security.OAuth2PasswordRequestFormStrict","text":"<pre><code>OAuth2PasswordRequestFormStrict(\n    grant_type,\n    username,\n    password,\n    scope=\"\",\n    client_id=None,\n    client_secret=None,\n)\n</code></pre> <p>               Bases: <code>OAuth2PasswordRequestForm</code></p> <p>This is a dependency class to collect the <code>username</code> and <code>password</code> as form data for an OAuth2 password flow.</p> <p>The OAuth2 specification dictates that for a password flow the data should be collected using form data (instead of JSON) and that it should have the specific fields <code>username</code> and <code>password</code>.</p> <p>All the initialization parameters are extracted from the request.</p> <p>The only difference between <code>OAuth2PasswordRequestFormStrict</code> and <code>OAuth2PasswordRequestForm</code> is that <code>OAuth2PasswordRequestFormStrict</code> requires the client to send the form field <code>grant_type</code> with the value <code>\"password\"</code>, which is required in the OAuth2 specification (it seems that for no particular reason), while for <code>OAuth2PasswordRequestForm</code> <code>grant_type</code> is optional.</p> <p>Read more about it in the ReadyAPI docs for Simple OAuth2 with Password and Bearer.</p>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestFormStrict--example","title":"Example","text":"<pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordRequestForm\n\napp = ReadyAPI()\n\n\n@app.post(\"/login\")\ndef login(form_data: Annotated[OAuth2PasswordRequestFormStrict, Depends()]):\n    data = {}\n    data[\"scopes\"] = []\n    for scope in form_data.scopes:\n        data[\"scopes\"].append(scope)\n    if form_data.client_id:\n        data[\"client_id\"] = form_data.client_id\n    if form_data.client_secret:\n        data[\"client_secret\"] = form_data.client_secret\n    return data\n</code></pre> <p>Note that for OAuth2 the scope <code>items:read</code> is a single scope in an opaque string. You could have custom internal logic to separate it by colon characters (<code>:</code>) or similar, and get the two parts <code>items</code> and <code>read</code>. Many applications do that to group and organize permissions, you could do it as well in your application, just know that that it is application specific, it's not part of the specification.</p> the OAuth2 spec says it is required and MUST be the fixed string \"password\". <p>This dependency is strict about it. If you want to be permissive, use instead the OAuth2PasswordRequestForm dependency class.</p> <p>username: username string. The OAuth2 spec requires the exact field name \"username\". password: password string. The OAuth2 spec requires the exact field name \"password\". scope: Optional string. Several scopes (each one a string) separated by spaces. E.g.     \"items:read items:write users:read profile openid\" client_id: optional string. OAuth2 recommends sending the client_id and client_secret (if any)     using HTTP Basic auth, as: client_id:client_secret client_secret: optional string. OAuth2 recommends sending the client_id and client_secret (if any)     using HTTP Basic auth, as: client_id:client_secret</p> PARAMETER DESCRIPTION <code>grant_type</code> <p>The OAuth2 spec says it is required and MUST be the fixed string \"password\". This dependency is strict about it. If you want to be permissive, use instead the <code>OAuth2PasswordRequestForm</code> dependency class.</p> <p> TYPE: <code>str</code> </p> <code>username</code> <p><code>username</code> string. The OAuth2 spec requires the exact field name <code>username</code>.</p> <p> TYPE: <code>str</code> </p> <code>password</code> <p><code>password</code> string. The OAuth2 spec requires the exact field name `password\".</p> <p> TYPE: <code>str</code> </p> <code>scope</code> <p>A single string with actually several scopes separated by spaces. Each scope is also a string.</p> <p>For example, a single string with:</p> <p>```python \"items:read items:write users:read profile openid\" ````</p> <p>would represent the scopes:</p> <ul> <li><code>items:read</code></li> <li><code>items:write</code></li> <li><code>users:read</code></li> <li><code>profile</code></li> <li><code>openid</code></li> </ul> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>client_id</code> <p>If there's a <code>client_id</code>, it can be sent as part of the form fields. But the OAuth2 specification recommends sending the <code>client_id</code> and <code>client_secret</code> (if any) using HTTP Basic auth.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>client_secret</code> <p>If there's a <code>client_password</code> (and a <code>client_id</code>), they can be sent as part of the form fields. But the OAuth2 specification recommends sending the <code>client_id</code> and <code>client_secret</code> (if any) using HTTP Basic auth.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> Source code in <code>readyapi/security/oauth2.py</code> <pre><code>def __init__(\n    self,\n    grant_type: Annotated[\n        str,\n        Form(pattern=\"^password$\"),\n        Doc(\n            \"\"\"\n            The OAuth2 spec says it is required and MUST be the fixed string\n            \"password\". This dependency is strict about it. If you want to be\n            permissive, use instead the `OAuth2PasswordRequestForm` dependency\n            class.\n            \"\"\"\n        ),\n    ],\n    username: Annotated[\n        str,\n        Form(),\n        Doc(\n            \"\"\"\n            `username` string. The OAuth2 spec requires the exact field name\n            `username`.\n            \"\"\"\n        ),\n    ],\n    password: Annotated[\n        str,\n        Form(),\n        Doc(\n            \"\"\"\n            `password` string. The OAuth2 spec requires the exact field name\n            `password\".\n            \"\"\"\n        ),\n    ],\n    scope: Annotated[\n        str,\n        Form(),\n        Doc(\n            \"\"\"\n            A single string with actually several scopes separated by spaces. Each\n            scope is also a string.\n\n            For example, a single string with:\n\n            ```python\n            \"items:read items:write users:read profile openid\"\n            ````\n\n            would represent the scopes:\n\n            * `items:read`\n            * `items:write`\n            * `users:read`\n            * `profile`\n            * `openid`\n            \"\"\"\n        ),\n    ] = \"\",\n    client_id: Annotated[\n        Union[str, None],\n        Form(),\n        Doc(\n            \"\"\"\n            If there's a `client_id`, it can be sent as part of the form fields.\n            But the OAuth2 specification recommends sending the `client_id` and\n            `client_secret` (if any) using HTTP Basic auth.\n            \"\"\"\n        ),\n    ] = None,\n    client_secret: Annotated[\n        Union[str, None],\n        Form(),\n        Doc(\n            \"\"\"\n            If there's a `client_password` (and a `client_id`), they can be sent\n            as part of the form fields. But the OAuth2 specification recommends\n            sending the `client_id` and `client_secret` (if any) using HTTP Basic\n            auth.\n            \"\"\"\n        ),\n    ] = None,\n):\n    super().__init__(\n        grant_type=grant_type,\n        username=username,\n        password=password,\n        scope=scope,\n        client_id=client_id,\n        client_secret=client_secret,\n    )\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestFormStrict.grant_type","title":"grant_type  <code>instance-attribute</code>","text":"<pre><code>grant_type = grant_type\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestFormStrict.username","title":"username  <code>instance-attribute</code>","text":"<pre><code>username = username\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestFormStrict.password","title":"password  <code>instance-attribute</code>","text":"<pre><code>password = password\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestFormStrict.scopes","title":"scopes  <code>instance-attribute</code>","text":"<pre><code>scopes = split()\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestFormStrict.client_id","title":"client_id  <code>instance-attribute</code>","text":"<pre><code>client_id = client_id\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestFormStrict.client_secret","title":"client_secret  <code>instance-attribute</code>","text":"<pre><code>client_secret = client_secret\n</code></pre>"},{"location":"reference/security/#oauth2-security-scopes-in-dependencies","title":"OAuth2 Security Scopes in Dependencies","text":""},{"location":"reference/security/#readyapi.security.SecurityScopes","title":"readyapi.security.SecurityScopes","text":"<pre><code>SecurityScopes(scopes=None)\n</code></pre> <p>This is a special class that you can define in a parameter in a dependency to obtain the OAuth2 scopes required by all the dependencies in the same chain.</p> <p>This way, multiple dependencies can have different scopes, even when used in the same path operation. And with this, you can access all the scopes required in all those dependencies in a single place.</p> <p>Read more about it in the ReadyAPI docs for OAuth2 scopes.</p> PARAMETER DESCRIPTION <code>scopes</code> <p>This will be filled by ReadyAPI.</p> <p> TYPE: <code>Optional[List[str]]</code> DEFAULT: <code>None</code> </p> Source code in <code>readyapi/security/oauth2.py</code> <pre><code>def __init__(\n    self,\n    scopes: Annotated[\n        Optional[List[str]],\n        Doc(\n            \"\"\"\n            This will be filled by ReadyAPI.\n            \"\"\"\n        ),\n    ] = None,\n):\n    self.scopes: Annotated[\n        List[str],\n        Doc(\n            \"\"\"\n            The list of all the scopes required by dependencies.\n            \"\"\"\n        ),\n    ] = scopes or []\n    self.scope_str: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            All the scopes required by all the dependencies in a single string\n            separated by spaces, as defined in the OAuth2 specification.\n            \"\"\"\n        ),\n    ] = \" \".join(self.scopes)\n</code></pre>"},{"location":"reference/security/#readyapi.security.SecurityScopes.scopes","title":"scopes  <code>instance-attribute</code>","text":"<pre><code>scopes = scopes or []\n</code></pre> <p>The list of all the scopes required by dependencies.</p>"},{"location":"reference/security/#readyapi.security.SecurityScopes.scope_str","title":"scope_str  <code>instance-attribute</code>","text":"<pre><code>scope_str = join(scopes)\n</code></pre> <p>All the scopes required by all the dependencies in a single string separated by spaces, as defined in the OAuth2 specification.</p>"},{"location":"reference/security/#openid-connect","title":"OpenID Connect","text":""},{"location":"reference/security/#readyapi.security.OpenIdConnect","title":"readyapi.security.OpenIdConnect","text":"<pre><code>OpenIdConnect(\n    *,\n    openIdConnectUrl,\n    scheme_name=None,\n    description=None,\n    auto_error=True\n)\n</code></pre> <p>               Bases: <code>SecurityBase</code></p> <p>OpenID Connect authentication class. An instance of it would be used as a dependency.</p> PARAMETER DESCRIPTION <code>openIdConnectUrl</code> <p>The OpenID Connect URL.</p> <p> TYPE: <code>str</code> </p> <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if no HTTP Authorization header is provided, required for OpenID Connect authentication, it will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the HTTP Authorization header is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, with OpenID Connect or in a cookie).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/open_id_connect_url.py</code> <pre><code>def __init__(\n    self,\n    *,\n    openIdConnectUrl: Annotated[\n        str,\n        Doc(\n            \"\"\"\n        The OpenID Connect URL.\n        \"\"\"\n        ),\n    ],\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if no HTTP Authorization header is provided, required for\n            OpenID Connect authentication, it will automatically cancel the request\n            and send the client an error.\n\n            If `auto_error` is set to `False`, when the HTTP Authorization header\n            is not available, instead of erroring out, the dependency result will\n            be `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, with OpenID\n            Connect or in a cookie).\n            \"\"\"\n        ),\n    ] = True,\n):\n    self.model = OpenIdConnectModel(\n        openIdConnectUrl=openIdConnectUrl, description=description\n    )\n    self.scheme_name = scheme_name or self.__class__.__name__\n    self.auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.OpenIdConnect.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = OpenIdConnect(\n    openIdConnectUrl=openIdConnectUrl,\n    description=description,\n)\n</code></pre>"},{"location":"reference/security/#readyapi.security.OpenIdConnect.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.OpenIdConnect.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/encoders/","title":"Encoders - <code>jsonable_encoder</code>","text":""},{"location":"reference/encoders/#readyapi.encoders.jsonable_encoder","title":"readyapi.encoders.jsonable_encoder","text":"<pre><code>jsonable_encoder(\n    obj,\n    include=None,\n    exclude=None,\n    by_alias=True,\n    exclude_unset=False,\n    exclude_defaults=False,\n    exclude_none=False,\n    custom_encoder=None,\n    sqlalchemy_safe=True,\n)\n</code></pre> <p>Convert any object to something that can be encoded in JSON.</p> <p>This is used internally by ReadyAPI to make sure anything you return can be encoded as JSON before it is sent to the client.</p> <p>You can also use it yourself, for example to convert objects before saving them in a database that supports only JSON.</p> <p>Read more about it in the ReadyAPI docs for JSON Compatible Encoder.</p> PARAMETER DESCRIPTION <code>obj</code> <p>The input object to convert to JSON.</p> <p> TYPE: <code>Any</code> </p> <code>include</code> <p>Pydantic's <code>include</code> parameter, passed to Pydantic models to set the fields to include.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>exclude</code> <p>Pydantic's <code>exclude</code> parameter, passed to Pydantic models to set the fields to exclude.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>by_alias</code> <p>Pydantic's <code>by_alias</code> parameter, passed to Pydantic models to define if the output should use the alias names (when provided) or the Python attribute names. In an API, if you set an alias, it's probably because you want to use it in the result, so you probably want to leave this set to <code>True</code>.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>exclude_unset</code> <p>Pydantic's <code>exclude_unset</code> parameter, passed to Pydantic models to define if it should exclude from the output the fields that were not explicitly set (and that only had their default values).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>exclude_defaults</code> <p>Pydantic's <code>exclude_defaults</code> parameter, passed to Pydantic models to define if it should exclude from the output the fields that had the same default value, even when they were explicitly set.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>exclude_none</code> <p>Pydantic's <code>exclude_none</code> parameter, passed to Pydantic models to define if it should exclude from the output any fields that have a <code>None</code> value.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>custom_encoder</code> <p>Pydantic's <code>custom_encoder</code> parameter, passed to Pydantic models to define a custom encoder.</p> <p> TYPE: <code>Optional[Dict[Any, Callable[[Any], Any]]]</code> DEFAULT: <code>None</code> </p> <code>sqlalchemy_safe</code> <p>Exclude from the output any fields that start with the name <code>_sa</code>.</p> <p>This is mainly a hack for compatibility with SQLAlchemy objects, they store internal SQLAlchemy-specific state in attributes named with <code>_sa</code>, and those objects can't (and shouldn't be) serialized to JSON.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/encoders.py</code> <pre><code>def jsonable_encoder(\n    obj: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The input object to convert to JSON.\n            \"\"\"\n        ),\n    ],\n    include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Pydantic's `include` parameter, passed to Pydantic models to set the\n            fields to include.\n            \"\"\"\n        ),\n    ] = None,\n    exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Pydantic's `exclude` parameter, passed to Pydantic models to set the\n            fields to exclude.\n            \"\"\"\n        ),\n    ] = None,\n    by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Pydantic's `by_alias` parameter, passed to Pydantic models to define if\n            the output should use the alias names (when provided) or the Python\n            attribute names. In an API, if you set an alias, it's probably because you\n            want to use it in the result, so you probably want to leave this set to\n            `True`.\n            \"\"\"\n        ),\n    ] = True,\n    exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Pydantic's `exclude_unset` parameter, passed to Pydantic models to define\n            if it should exclude from the output the fields that were not explicitly\n            set (and that only had their default values).\n            \"\"\"\n        ),\n    ] = False,\n    exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Pydantic's `exclude_defaults` parameter, passed to Pydantic models to define\n            if it should exclude from the output the fields that had the same default\n            value, even when they were explicitly set.\n            \"\"\"\n        ),\n    ] = False,\n    exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Pydantic's `exclude_none` parameter, passed to Pydantic models to define\n            if it should exclude from the output any fields that have a `None` value.\n            \"\"\"\n        ),\n    ] = False,\n    custom_encoder: Annotated[\n        Optional[Dict[Any, Callable[[Any], Any]]],\n        Doc(\n            \"\"\"\n            Pydantic's `custom_encoder` parameter, passed to Pydantic models to define\n            a custom encoder.\n            \"\"\"\n        ),\n    ] = None,\n    sqlalchemy_safe: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Exclude from the output any fields that start with the name `_sa`.\n\n            This is mainly a hack for compatibility with SQLAlchemy objects, they\n            store internal SQLAlchemy-specific state in attributes named with `_sa`,\n            and those objects can't (and shouldn't be) serialized to JSON.\n            \"\"\"\n        ),\n    ] = True,\n) -&gt; Any:\n    \"\"\"\n    Convert any object to something that can be encoded in JSON.\n\n    This is used internally by ReadyAPI to make sure anything you return can be\n    encoded as JSON before it is sent to the client.\n\n    You can also use it yourself, for example to convert objects before saving them\n    in a database that supports only JSON.\n\n    Read more about it in the\n    [ReadyAPI docs for JSON Compatible Encoder](https://readyapi.github.io/tutorial/encoder/).\n    \"\"\"\n    custom_encoder = custom_encoder or {}\n    if custom_encoder:\n        if type(obj) in custom_encoder:\n            return custom_encoder[type(obj)](obj)\n        else:\n            for encoder_type, encoder_instance in custom_encoder.items():\n                if isinstance(obj, encoder_type):\n                    return encoder_instance(obj)\n    if include is not None and not isinstance(include, (set, dict)):\n        include = set(include)\n    if exclude is not None and not isinstance(exclude, (set, dict)):\n        exclude = set(exclude)\n    if isinstance(obj, BaseModel):\n        # TODO: remove when deprecating Pydantic v1\n        encoders: Dict[Any, Any] = {}\n        if not PYDANTIC_V2:\n            encoders = getattr(obj.__config__, \"json_encoders\", {})  # type: ignore[attr-defined]\n            if custom_encoder:\n                encoders.update(custom_encoder)\n        obj_dict = _model_dump(\n            obj,\n            mode=\"json\",\n            include=include,\n            exclude=exclude,\n            by_alias=by_alias,\n            exclude_unset=exclude_unset,\n            exclude_none=exclude_none,\n            exclude_defaults=exclude_defaults,\n        )\n        if \"__root__\" in obj_dict:\n            obj_dict = obj_dict[\"__root__\"]\n        return jsonable_encoder(\n            obj_dict,\n            exclude_none=exclude_none,\n            exclude_defaults=exclude_defaults,\n            # TODO: remove when deprecating Pydantic v1\n            custom_encoder=encoders,\n            sqlalchemy_safe=sqlalchemy_safe,\n        )\n    if dataclasses.is_dataclass(obj):\n        obj_dict = dataclasses.asdict(obj)\n        return jsonable_encoder(\n            obj_dict,\n            include=include,\n            exclude=exclude,\n            by_alias=by_alias,\n            exclude_unset=exclude_unset,\n            exclude_defaults=exclude_defaults,\n            exclude_none=exclude_none,\n            custom_encoder=custom_encoder,\n            sqlalchemy_safe=sqlalchemy_safe,\n        )\n    if isinstance(obj, Enum):\n        return obj.value\n    if isinstance(obj, PurePath):\n        return str(obj)\n    if isinstance(obj, (str, int, float, type(None))):\n        return obj\n    if isinstance(obj, UndefinedType):\n        return None\n    if isinstance(obj, dict):\n        encoded_dict = {}\n        allowed_keys = set(obj.keys())\n        if include is not None:\n            allowed_keys &amp;= set(include)\n        if exclude is not None:\n            allowed_keys -= set(exclude)\n        for key, value in obj.items():\n            if (\n                (\n                    not sqlalchemy_safe\n                    or (not isinstance(key, str))\n                    or (not key.startswith(\"_sa\"))\n                )\n                and (value is not None or not exclude_none)\n                and key in allowed_keys\n            ):\n                encoded_key = jsonable_encoder(\n                    key,\n                    by_alias=by_alias,\n                    exclude_unset=exclude_unset,\n                    exclude_none=exclude_none,\n                    custom_encoder=custom_encoder,\n                    sqlalchemy_safe=sqlalchemy_safe,\n                )\n                encoded_value = jsonable_encoder(\n                    value,\n                    by_alias=by_alias,\n                    exclude_unset=exclude_unset,\n                    exclude_none=exclude_none,\n                    custom_encoder=custom_encoder,\n                    sqlalchemy_safe=sqlalchemy_safe,\n                )\n                encoded_dict[encoded_key] = encoded_value\n        return encoded_dict\n    if isinstance(obj, (list, set, frozenset, GeneratorType, tuple, deque)):\n        encoded_list = []\n        for item in obj:\n            encoded_list.append(\n                jsonable_encoder(\n                    item,\n                    include=include,\n                    exclude=exclude,\n                    by_alias=by_alias,\n                    exclude_unset=exclude_unset,\n                    exclude_defaults=exclude_defaults,\n                    exclude_none=exclude_none,\n                    custom_encoder=custom_encoder,\n                    sqlalchemy_safe=sqlalchemy_safe,\n                )\n            )\n        return encoded_list\n\n    if type(obj) in ENCODERS_BY_TYPE:\n        return ENCODERS_BY_TYPE[type(obj)](obj)\n    for encoder, classes_tuple in encoders_by_class_tuples.items():\n        if isinstance(obj, classes_tuple):\n            return encoder(obj)\n\n    try:\n        data = dict(obj)\n    except Exception as e:\n        errors: List[Exception] = []\n        errors.append(e)\n        try:\n            data = vars(obj)\n        except Exception as e:\n            errors.append(e)\n            raise ValueError(errors) from e\n    return jsonable_encoder(\n        data,\n        include=include,\n        exclude=exclude,\n        by_alias=by_alias,\n        exclude_unset=exclude_unset,\n        exclude_defaults=exclude_defaults,\n        exclude_none=exclude_none,\n        custom_encoder=custom_encoder,\n        sqlalchemy_safe=sqlalchemy_safe,\n    )\n</code></pre>"},{"location":"reference/staticfiles/","title":"Static Files - <code>StaticFiles</code>","text":"<p>You can use the <code>StaticFiles</code> class to serve static files, like JavaScript, CSS, images, etc.</p> <p>Read more about it in the ReadyAPI docs for Static Files.</p> <p>You can import it directly from <code>readyapi.staticfiles</code>:</p> <pre><code>from readyapi.staticfiles import StaticFiles\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles","title":"readyapi.staticfiles.StaticFiles","text":"<pre><code>StaticFiles(\n    *,\n    directory=None,\n    packages=None,\n    html=False,\n    check_dir=True,\n    follow_symlink=False\n)\n</code></pre> PARAMETER DESCRIPTION <code>directory</code> <p> TYPE: <code>PathLike | None</code> DEFAULT: <code>None</code> </p> <code>packages</code> <p> TYPE: <code>list[str | tuple[str, str]] | None</code> DEFAULT: <code>None</code> </p> <code>html</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>check_dir</code> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>follow_symlink</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> Source code in <code>starlette/staticfiles.py</code> <pre><code>def __init__(\n    self,\n    *,\n    directory: PathLike | None = None,\n    packages: list[str | tuple[str, str]] | None = None,\n    html: bool = False,\n    check_dir: bool = True,\n    follow_symlink: bool = False,\n) -&gt; None:\n    self.directory = directory\n    self.packages = packages\n    self.all_directories = self.get_directories(directory, packages)\n    self.html = html\n    self.config_checked = False\n    self.follow_symlink = follow_symlink\n    if check_dir and directory is not None and not os.path.isdir(directory):\n        raise RuntimeError(f\"Directory '{directory}' does not exist\")\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.directory","title":"directory  <code>instance-attribute</code>","text":"<pre><code>directory = directory\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.packages","title":"packages  <code>instance-attribute</code>","text":"<pre><code>packages = packages\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.all_directories","title":"all_directories  <code>instance-attribute</code>","text":"<pre><code>all_directories = get_directories(directory, packages)\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.html","title":"html  <code>instance-attribute</code>","text":"<pre><code>html = html\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.config_checked","title":"config_checked  <code>instance-attribute</code>","text":"<pre><code>config_checked = False\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.follow_symlink","title":"follow_symlink  <code>instance-attribute</code>","text":"<pre><code>follow_symlink = follow_symlink\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.get_directories","title":"get_directories","text":"<pre><code>get_directories(directory=None, packages=None)\n</code></pre> <p>Given <code>directory</code> and <code>packages</code> arguments, return a list of all the directories that should be used for serving static files from.</p> PARAMETER DESCRIPTION <code>directory</code> <p> TYPE: <code>PathLike | None</code> DEFAULT: <code>None</code> </p> <code>packages</code> <p> TYPE: <code>list[str | tuple[str, str]] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/staticfiles.py</code> <pre><code>def get_directories(\n    self,\n    directory: PathLike | None = None,\n    packages: list[str | tuple[str, str]] | None = None,\n) -&gt; list[PathLike]:\n    \"\"\"\n    Given `directory` and `packages` arguments, return a list of all the\n    directories that should be used for serving static files from.\n    \"\"\"\n    directories = []\n    if directory is not None:\n        directories.append(directory)\n\n    for package in packages or []:\n        if isinstance(package, tuple):\n            package, statics_dir = package\n        else:\n            statics_dir = \"statics\"\n        spec = importlib.util.find_spec(package)\n        assert spec is not None, f\"Package {package!r} could not be found.\"\n        assert spec.origin is not None, f\"Package {package!r} could not be found.\"\n        package_directory = os.path.normpath(os.path.join(spec.origin, \"..\", statics_dir))\n        assert os.path.isdir(package_directory), (\n            f\"Directory '{statics_dir!r}' in package {package!r} could not be found.\"\n        )\n        directories.append(package_directory)\n\n    return directories\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.get_path","title":"get_path","text":"<pre><code>get_path(scope)\n</code></pre> <p>Given the ASGI scope, return the <code>path</code> string to serve up, with OS specific path separators, and any '..', '.' components removed.</p> PARAMETER DESCRIPTION <code>scope</code> <p> TYPE: <code>Scope</code> </p> Source code in <code>starlette/staticfiles.py</code> <pre><code>def get_path(self, scope: Scope) -&gt; str:\n    \"\"\"\n    Given the ASGI scope, return the `path` string to serve up,\n    with OS specific path separators, and any '..', '.' components removed.\n    \"\"\"\n    route_path = get_route_path(scope)\n    return os.path.normpath(os.path.join(*route_path.split(\"/\")))\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.get_response","title":"get_response  <code>async</code>","text":"<pre><code>get_response(path, scope)\n</code></pre> <p>Returns an HTTP response, given the incoming path, method and request headers.</p> PARAMETER DESCRIPTION <code>path</code> <p> TYPE: <code>str</code> </p> <code>scope</code> <p> TYPE: <code>Scope</code> </p> Source code in <code>starlette/staticfiles.py</code> <pre><code>async def get_response(self, path: str, scope: Scope) -&gt; Response:\n    \"\"\"\n    Returns an HTTP response, given the incoming path, method and request headers.\n    \"\"\"\n    if scope[\"method\"] not in (\"GET\", \"HEAD\"):\n        raise HTTPException(status_code=405)\n\n    try:\n        full_path, stat_result = await anyio.to_thread.run_sync(self.lookup_path, path)\n    except PermissionError:\n        raise HTTPException(status_code=401)\n    except OSError as exc:\n        # Filename is too long, so it can't be a valid static file.\n        if exc.errno == errno.ENAMETOOLONG:\n            raise HTTPException(status_code=404)\n\n        raise exc\n\n    if stat_result and stat.S_ISREG(stat_result.st_mode):\n        # We have a static file to serve.\n        return self.file_response(full_path, stat_result, scope)\n\n    elif stat_result and stat.S_ISDIR(stat_result.st_mode) and self.html:\n        # We're in HTML mode, and have got a directory URL.\n        # Check if we have 'index.html' file to serve.\n        index_path = os.path.join(path, \"index.html\")\n        full_path, stat_result = await anyio.to_thread.run_sync(self.lookup_path, index_path)\n        if stat_result is not None and stat.S_ISREG(stat_result.st_mode):\n            if not scope[\"path\"].endswith(\"/\"):\n                # Directory URLs should redirect to always end in \"/\".\n                url = URL(scope=scope)\n                url = url.replace(path=url.path + \"/\")\n                return RedirectResponse(url=url)\n            return self.file_response(full_path, stat_result, scope)\n\n    if self.html:\n        # Check for '404.html' if we're in HTML mode.\n        full_path, stat_result = await anyio.to_thread.run_sync(self.lookup_path, \"404.html\")\n        if stat_result and stat.S_ISREG(stat_result.st_mode):\n            return FileResponse(full_path, stat_result=stat_result, status_code=404)\n    raise HTTPException(status_code=404)\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.lookup_path","title":"lookup_path","text":"<pre><code>lookup_path(path)\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p> TYPE: <code>str</code> </p> Source code in <code>starlette/staticfiles.py</code> <pre><code>def lookup_path(self, path: str) -&gt; tuple[str, os.stat_result | None]:\n    for directory in self.all_directories:\n        joined_path = os.path.join(directory, path)\n        if self.follow_symlink:\n            full_path = os.path.abspath(joined_path)\n            directory = os.path.abspath(directory)\n        else:\n            full_path = os.path.realpath(joined_path)\n            directory = os.path.realpath(directory)\n        if os.path.commonpath([full_path, directory]) != str(directory):\n            # Don't allow misbehaving clients to break out of the static files directory.\n            continue\n        try:\n            return full_path, os.stat(full_path)\n        except (FileNotFoundError, NotADirectoryError):\n            continue\n    return \"\", None\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.file_response","title":"file_response","text":"<pre><code>file_response(\n    full_path, stat_result, scope, status_code=200\n)\n</code></pre> PARAMETER DESCRIPTION <code>full_path</code> <p> TYPE: <code>PathLike</code> </p> <code>stat_result</code> <p> TYPE: <code>stat_result</code> </p> <code>scope</code> <p> TYPE: <code>Scope</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> Source code in <code>starlette/staticfiles.py</code> <pre><code>def file_response(\n    self,\n    full_path: PathLike,\n    stat_result: os.stat_result,\n    scope: Scope,\n    status_code: int = 200,\n) -&gt; Response:\n    request_headers = Headers(scope=scope)\n\n    response = FileResponse(full_path, status_code=status_code, stat_result=stat_result)\n    if self.is_not_modified(response.headers, request_headers):\n        return NotModifiedResponse(response.headers)\n    return response\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.check_config","title":"check_config  <code>async</code>","text":"<pre><code>check_config()\n</code></pre> <p>Perform a one-off configuration check that StaticFiles is actually pointed at a directory, so that we can raise loud errors rather than just returning 404 responses.</p> Source code in <code>starlette/staticfiles.py</code> <pre><code>async def check_config(self) -&gt; None:\n    \"\"\"\n    Perform a one-off configuration check that StaticFiles is actually\n    pointed at a directory, so that we can raise loud errors rather than\n    just returning 404 responses.\n    \"\"\"\n    if self.directory is None:\n        return\n\n    try:\n        stat_result = await anyio.to_thread.run_sync(os.stat, self.directory)\n    except FileNotFoundError:\n        raise RuntimeError(f\"StaticFiles directory '{self.directory}' does not exist.\")\n    if not (stat.S_ISDIR(stat_result.st_mode) or stat.S_ISLNK(stat_result.st_mode)):\n        raise RuntimeError(f\"StaticFiles path '{self.directory}' is not a directory.\")\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.is_not_modified","title":"is_not_modified","text":"<pre><code>is_not_modified(response_headers, request_headers)\n</code></pre> <p>Given the request and response headers, return <code>True</code> if an HTTP \"Not Modified\" response could be returned instead.</p> PARAMETER DESCRIPTION <code>response_headers</code> <p> TYPE: <code>Headers</code> </p> <code>request_headers</code> <p> TYPE: <code>Headers</code> </p> Source code in <code>starlette/staticfiles.py</code> <pre><code>def is_not_modified(self, response_headers: Headers, request_headers: Headers) -&gt; bool:\n    \"\"\"\n    Given the request and response headers, return `True` if an HTTP\n    \"Not Modified\" response could be returned instead.\n    \"\"\"\n    try:\n        if_none_match = request_headers[\"if-none-match\"]\n        etag = response_headers[\"etag\"]\n        if etag in [tag.strip(\" W/\") for tag in if_none_match.split(\",\")]:\n            return True\n    except KeyError:\n        pass\n\n    try:\n        if_modified_since = parsedate(request_headers[\"if-modified-since\"])\n        last_modified = parsedate(response_headers[\"last-modified\"])\n        if if_modified_since is not None and last_modified is not None and if_modified_since &gt;= last_modified:\n            return True\n    except KeyError:\n        pass\n\n    return False\n</code></pre>"},{"location":"reference/templating/","title":"Templating - <code>Jinja2Templates</code>","text":"<p>You can use the <code>Jinja2Templates</code> class to render Jinja templates.</p> <p>Read more about it in the ReadyAPI docs for Templates.</p> <p>You can import it directly from <code>readyapi.templating</code>:</p> <pre><code>from readyapi.templating import Jinja2Templates\n</code></pre>"},{"location":"reference/templating/#readyapi.templating.Jinja2Templates","title":"readyapi.templating.Jinja2Templates","text":"<pre><code>Jinja2Templates(\n    directory: (\n        str | PathLike[str] | Sequence[str | PathLike[str]]\n    ),\n    *,\n    context_processors: (\n        list[Callable[[Request], dict[str, Any]]] | None\n    ) = None,\n    **env_options: Any\n)\n</code></pre><pre><code>Jinja2Templates(\n    *,\n    env: Environment,\n    context_processors: (\n        list[Callable[[Request], dict[str, Any]]] | None\n    ) = None\n)\n</code></pre> <pre><code>Jinja2Templates(\n    directory=None,\n    *,\n    context_processors=None,\n    env=None,\n    **env_options\n)\n</code></pre> <p>templates = Jinja2Templates(\"templates\")</p> <p>return templates.TemplateResponse(\"index.html\", {\"request\": request})</p> PARAMETER DESCRIPTION <code>directory</code> <p> TYPE: <code>str | PathLike[str] | Sequence[str | PathLike[str]] | None</code> DEFAULT: <code>None</code> </p> <code>context_processors</code> <p> TYPE: <code>list[Callable[[Request], dict[str, Any]]] | None</code> DEFAULT: <code>None</code> </p> <code>env</code> <p> TYPE: <code>Environment | None</code> DEFAULT: <code>None</code> </p> <code>**env_options</code> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>starlette/templating.py</code> <pre><code>def __init__(\n    self,\n    directory: str | PathLike[str] | typing.Sequence[str | PathLike[str]] | None = None,\n    *,\n    context_processors: list[typing.Callable[[Request], dict[str, typing.Any]]] | None = None,\n    env: jinja2.Environment | None = None,\n    **env_options: typing.Any,\n) -&gt; None:\n    if env_options:\n        warnings.warn(\n            \"Extra environment options are deprecated. Use a preconfigured jinja2.Environment instead.\",\n            DeprecationWarning,\n        )\n    assert jinja2 is not None, \"jinja2 must be installed to use Jinja2Templates\"\n    assert bool(directory) ^ bool(env), \"either 'directory' or 'env' arguments must be passed\"\n    self.context_processors = context_processors or []\n    if directory is not None:\n        self.env = self._create_env(directory, **env_options)\n    elif env is not None:  # pragma: no branch\n        self.env = env\n\n    self._setup_env_defaults(self.env)\n</code></pre>"},{"location":"reference/templating/#readyapi.templating.Jinja2Templates.context_processors","title":"context_processors  <code>instance-attribute</code>","text":"<pre><code>context_processors = context_processors or []\n</code></pre>"},{"location":"reference/templating/#readyapi.templating.Jinja2Templates.env","title":"env  <code>instance-attribute</code>","text":"<pre><code>env = _create_env(directory, **env_options)\n</code></pre>"},{"location":"reference/templating/#readyapi.templating.Jinja2Templates.get_template","title":"get_template","text":"<pre><code>get_template(name)\n</code></pre> PARAMETER DESCRIPTION <code>name</code> <p> TYPE: <code>str</code> </p> Source code in <code>starlette/templating.py</code> <pre><code>def get_template(self, name: str) -&gt; jinja2.Template:\n    return self.env.get_template(name)\n</code></pre>"},{"location":"reference/templating/#readyapi.templating.Jinja2Templates.TemplateResponse","title":"TemplateResponse","text":"<pre><code>TemplateResponse(\n    request: Request,\n    name: str,\n    context: dict[str, Any] | None = None,\n    status_code: int = 200,\n    headers: Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; _TemplateResponse\n</code></pre><pre><code>TemplateResponse(\n    name: str,\n    context: dict[str, Any] | None = None,\n    status_code: int = 200,\n    headers: Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; _TemplateResponse\n</code></pre> <pre><code>TemplateResponse(*args, **kwargs)\n</code></pre> PARAMETER DESCRIPTION <code>*args</code> <p> TYPE: <code>Any</code> DEFAULT: <code>()</code> </p> <code>**kwargs</code> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>starlette/templating.py</code> <pre><code>def TemplateResponse(self, *args: typing.Any, **kwargs: typing.Any) -&gt; _TemplateResponse:\n    if args:\n        if isinstance(args[0], str):  # the first argument is template name (old style)\n            warnings.warn(\n                \"The `name` is not the first parameter anymore. \"\n                \"The first parameter should be the `Request` instance.\\n\"\n                'Replace `TemplateResponse(name, {\"request\": request})` by `TemplateResponse(request, name)`.',\n                DeprecationWarning,\n            )\n\n            name = args[0]\n            context = args[1] if len(args) &gt; 1 else kwargs.get(\"context\", {})\n            status_code = args[2] if len(args) &gt; 2 else kwargs.get(\"status_code\", 200)\n            headers = args[3] if len(args) &gt; 3 else kwargs.get(\"headers\")\n            media_type = args[4] if len(args) &gt; 4 else kwargs.get(\"media_type\")\n            background = args[5] if len(args) &gt; 5 else kwargs.get(\"background\")\n\n            if \"request\" not in context:\n                raise ValueError('context must include a \"request\" key')\n            request = context[\"request\"]\n        else:  # the first argument is a request instance (new style)\n            request = args[0]\n            name = args[1] if len(args) &gt; 1 else kwargs[\"name\"]\n            context = args[2] if len(args) &gt; 2 else kwargs.get(\"context\", {})\n            status_code = args[3] if len(args) &gt; 3 else kwargs.get(\"status_code\", 200)\n            headers = args[4] if len(args) &gt; 4 else kwargs.get(\"headers\")\n            media_type = args[5] if len(args) &gt; 5 else kwargs.get(\"media_type\")\n            background = args[6] if len(args) &gt; 6 else kwargs.get(\"background\")\n    else:  # all arguments are kwargs\n        if \"request\" not in kwargs:\n            warnings.warn(\n                \"The `TemplateResponse` now requires the `request` argument.\\n\"\n                'Replace `TemplateResponse(name, {\"context\": context})` by `TemplateResponse(request, name)`.',\n                DeprecationWarning,\n            )\n            if \"request\" not in kwargs.get(\"context\", {}):\n                raise ValueError('context must include a \"request\" key')\n\n        context = kwargs.get(\"context\", {})\n        request = kwargs.get(\"request\", context.get(\"request\"))\n        name = typing.cast(str, kwargs[\"name\"])\n        status_code = kwargs.get(\"status_code\", 200)\n        headers = kwargs.get(\"headers\")\n        media_type = kwargs.get(\"media_type\")\n        background = kwargs.get(\"background\")\n\n    context.setdefault(\"request\", request)\n    for context_processor in self.context_processors:\n        context.update(context_processor(request))\n\n    template = self.get_template(name)\n    return _TemplateResponse(\n        template,\n        context,\n        status_code=status_code,\n        headers=headers,\n        media_type=media_type,\n        background=background,\n    )\n</code></pre>"},{"location":"reference/testclient/","title":"Test Client - <code>TestClient</code>","text":"<p>You can use the <code>TestClient</code> class to test ReadyAPI applications without creating an actual HTTP and socket connection, just communicating directly with the ReadyAPI code.</p> <p>Read more about it in the ReadyAPI docs for Testing.</p> <p>You can import it directly from <code>readyapi.testclient</code>:</p> <pre><code>from readyapi.testclient import TestClient\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient","title":"readyapi.testclient.TestClient","text":"<pre><code>TestClient(\n    app,\n    base_url=\"http://testserver\",\n    raise_server_exceptions=True,\n    root_path=\"\",\n    backend=\"asyncio\",\n    backend_options=None,\n    cookies=None,\n    headers=None,\n    follow_redirects=True,\n    client=(\"testclient\", 50000),\n)\n</code></pre> <p>               Bases: <code>Client</code></p> PARAMETER DESCRIPTION <code>app</code> <p> TYPE: <code>ASGIApp</code> </p> <code>base_url</code> <p> TYPE: <code>str</code> DEFAULT: <code>'http://testserver'</code> </p> <code>raise_server_exceptions</code> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>root_path</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>backend</code> <p> TYPE: <code>Literal['asyncio', 'trio']</code> DEFAULT: <code>'asyncio'</code> </p> <code>backend_options</code> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>dict[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>client</code> <p> TYPE: <code>tuple[str, int]</code> DEFAULT: <code>('testclient', 50000)</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def __init__(\n    self,\n    app: ASGIApp,\n    base_url: str = \"http://testserver\",\n    raise_server_exceptions: bool = True,\n    root_path: str = \"\",\n    backend: typing.Literal[\"asyncio\", \"trio\"] = \"asyncio\",\n    backend_options: dict[str, typing.Any] | None = None,\n    cookies: httpx._types.CookieTypes | None = None,\n    headers: dict[str, str] | None = None,\n    follow_redirects: bool = True,\n    client: tuple[str, int] = (\"testclient\", 50000),\n) -&gt; None:\n    self.async_backend = _AsyncBackend(backend=backend, backend_options=backend_options or {})\n    if _is_asgi3(app):\n        asgi_app = app\n    else:\n        app = typing.cast(ASGI2App, app)  # type: ignore[assignment]\n        asgi_app = _WrapASGI2(app)  # type: ignore[arg-type]\n    self.app = asgi_app\n    self.app_state: dict[str, typing.Any] = {}\n    transport = _TestClientTransport(\n        self.app,\n        portal_factory=self._portal_factory,\n        raise_server_exceptions=raise_server_exceptions,\n        root_path=root_path,\n        app_state=self.app_state,\n        client=client,\n    )\n    if headers is None:\n        headers = {}\n    headers.setdefault(\"user-agent\", \"testclient\")\n    super().__init__(\n        base_url=base_url,\n        headers=headers,\n        transport=transport,\n        follow_redirects=follow_redirects,\n        cookies=cookies,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.headers","title":"headers  <code>property</code> <code>writable</code>","text":"<pre><code>headers\n</code></pre> <p>HTTP headers to include when sending requests.</p>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.follow_redirects","title":"follow_redirects  <code>instance-attribute</code>","text":"<pre><code>follow_redirects = follow_redirects\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.max_redirects","title":"max_redirects  <code>instance-attribute</code>","text":"<pre><code>max_redirects = max_redirects\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.is_closed","title":"is_closed  <code>property</code>","text":"<pre><code>is_closed\n</code></pre> <p>Check if the client being closed</p>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.trust_env","title":"trust_env  <code>property</code>","text":"<pre><code>trust_env\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.timeout","title":"timeout  <code>property</code> <code>writable</code>","text":"<pre><code>timeout\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.event_hooks","title":"event_hooks  <code>property</code> <code>writable</code>","text":"<pre><code>event_hooks\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.auth","title":"auth  <code>property</code> <code>writable</code>","text":"<pre><code>auth\n</code></pre> <p>Authentication class used when none is passed at the request-level.</p> <p>See also Authentication.</p>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.base_url","title":"base_url  <code>property</code> <code>writable</code>","text":"<pre><code>base_url\n</code></pre> <p>Base URL to use when sending requests with relative URLs.</p>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.cookies","title":"cookies  <code>property</code> <code>writable</code>","text":"<pre><code>cookies\n</code></pre> <p>Cookie values to include when sending requests.</p>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.params","title":"params  <code>property</code> <code>writable</code>","text":"<pre><code>params\n</code></pre> <p>Query parameters to include in the URL when sending requests.</p>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.task","title":"task  <code>instance-attribute</code>","text":"<pre><code>task\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.portal","title":"portal  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>portal = None\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.async_backend","title":"async_backend  <code>instance-attribute</code>","text":"<pre><code>async_backend = _AsyncBackend(\n    backend=backend, backend_options=backend_options or {}\n)\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.app","title":"app  <code>instance-attribute</code>","text":"<pre><code>app = asgi_app\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.app_state","title":"app_state  <code>instance-attribute</code>","text":"<pre><code>app_state = {}\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.build_request","title":"build_request","text":"<pre><code>build_request(\n    method,\n    url,\n    *,\n    content=None,\n    data=None,\n    files=None,\n    json=None,\n    params=None,\n    headers=None,\n    cookies=None,\n    timeout=USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> <p>Build and return a request instance.</p> <ul> <li>The <code>params</code>, <code>headers</code> and <code>cookies</code> arguments are merged with any values set on the client.</li> <li>The <code>url</code> argument is merged with any <code>base_url</code> set on the client.</li> </ul> <p>See also: Request instances</p> PARAMETER DESCRIPTION <code>method</code> <p> TYPE: <code>str</code> </p> <code>url</code> <p> TYPE: <code>URL | str</code> </p> <code>content</code> <p> TYPE: <code>RequestContent | None</code> DEFAULT: <code>None</code> </p> <code>data</code> <p> TYPE: <code>RequestData | None</code> DEFAULT: <code>None</code> </p> <code>files</code> <p> TYPE: <code>RequestFiles | None</code> DEFAULT: <code>None</code> </p> <code>json</code> <p> TYPE: <code>Any | None</code> DEFAULT: <code>None</code> </p> <code>params</code> <p> TYPE: <code>QueryParamTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>HeaderTypes | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>timeout</code> <p> TYPE: <code>TimeoutTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>RequestExtensions | None</code> DEFAULT: <code>None</code> </p> Source code in <code>httpx/_client.py</code> <pre><code>def build_request(\n    self,\n    method: str,\n    url: URL | str,\n    *,\n    content: RequestContent | None = None,\n    data: RequestData | None = None,\n    files: RequestFiles | None = None,\n    json: typing.Any | None = None,\n    params: QueryParamTypes | None = None,\n    headers: HeaderTypes | None = None,\n    cookies: CookieTypes | None = None,\n    timeout: TimeoutTypes | UseClientDefault = USE_CLIENT_DEFAULT,\n    extensions: RequestExtensions | None = None,\n) -&gt; Request:\n    \"\"\"\n    Build and return a request instance.\n\n    * The `params`, `headers` and `cookies` arguments\n    are merged with any values set on the client.\n    * The `url` argument is merged with any `base_url` set on the client.\n\n    See also: [Request instances][0]\n\n    [0]: /advanced/clients/#request-instances\n    \"\"\"\n    url = self._merge_url(url)\n    headers = self._merge_headers(headers)\n    cookies = self._merge_cookies(cookies)\n    params = self._merge_queryparams(params)\n    extensions = {} if extensions is None else extensions\n    if \"timeout\" not in extensions:\n        timeout = (\n            self.timeout\n            if isinstance(timeout, UseClientDefault)\n            else Timeout(timeout)\n        )\n        extensions = dict(**extensions, timeout=timeout.as_dict())\n    return Request(\n        method,\n        url,\n        content=content,\n        data=data,\n        files=files,\n        json=json,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        extensions=extensions,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.stream","title":"stream","text":"<pre><code>stream(\n    method,\n    url,\n    *,\n    content=None,\n    data=None,\n    files=None,\n    json=None,\n    params=None,\n    headers=None,\n    cookies=None,\n    auth=USE_CLIENT_DEFAULT,\n    follow_redirects=USE_CLIENT_DEFAULT,\n    timeout=USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> <p>Alternative to <code>httpx.request()</code> that streams the response body instead of loading it into memory at once.</p> <p>Parameters: See <code>httpx.request</code>.</p> <p>See also: Streaming Responses</p> PARAMETER DESCRIPTION <code>method</code> <p> TYPE: <code>str</code> </p> <code>url</code> <p> TYPE: <code>URL | str</code> </p> <code>content</code> <p> TYPE: <code>RequestContent | None</code> DEFAULT: <code>None</code> </p> <code>data</code> <p> TYPE: <code>RequestData | None</code> DEFAULT: <code>None</code> </p> <code>files</code> <p> TYPE: <code>RequestFiles | None</code> DEFAULT: <code>None</code> </p> <code>json</code> <p> TYPE: <code>Any | None</code> DEFAULT: <code>None</code> </p> <code>params</code> <p> TYPE: <code>QueryParamTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>HeaderTypes | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>auth</code> <p> TYPE: <code>AuthTypes | UseClientDefault | None</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>timeout</code> <p> TYPE: <code>TimeoutTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>RequestExtensions | None</code> DEFAULT: <code>None</code> </p> YIELDS DESCRIPTION <code>Response</code> Source code in <code>httpx/_client.py</code> <pre><code>@contextmanager\ndef stream(\n    self,\n    method: str,\n    url: URL | str,\n    *,\n    content: RequestContent | None = None,\n    data: RequestData | None = None,\n    files: RequestFiles | None = None,\n    json: typing.Any | None = None,\n    params: QueryParamTypes | None = None,\n    headers: HeaderTypes | None = None,\n    cookies: CookieTypes | None = None,\n    auth: AuthTypes | UseClientDefault | None = USE_CLIENT_DEFAULT,\n    follow_redirects: bool | UseClientDefault = USE_CLIENT_DEFAULT,\n    timeout: TimeoutTypes | UseClientDefault = USE_CLIENT_DEFAULT,\n    extensions: RequestExtensions | None = None,\n) -&gt; typing.Iterator[Response]:\n    \"\"\"\n    Alternative to `httpx.request()` that streams the response body\n    instead of loading it into memory at once.\n\n    **Parameters**: See `httpx.request`.\n\n    See also: [Streaming Responses][0]\n\n    [0]: /quickstart#streaming-responses\n    \"\"\"\n    request = self.build_request(\n        method=method,\n        url=url,\n        content=content,\n        data=data,\n        files=files,\n        json=json,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        timeout=timeout,\n        extensions=extensions,\n    )\n    response = self.send(\n        request=request,\n        auth=auth,\n        follow_redirects=follow_redirects,\n        stream=True,\n    )\n    try:\n        yield response\n    finally:\n        response.close()\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.send","title":"send","text":"<pre><code>send(\n    request,\n    *,\n    stream=False,\n    auth=USE_CLIENT_DEFAULT,\n    follow_redirects=USE_CLIENT_DEFAULT\n)\n</code></pre> <p>Send a request.</p> <p>The request is sent as-is, unmodified.</p> <p>Typically you'll want to build one with <code>Client.build_request()</code> so that any client-level configuration is merged into the request, but passing an explicit <code>httpx.Request()</code> is supported as well.</p> <p>See also: Request instances</p> PARAMETER DESCRIPTION <code>request</code> <p> TYPE: <code>Request</code> </p> <code>stream</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>auth</code> <p> TYPE: <code>AuthTypes | UseClientDefault | None</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> Source code in <code>httpx/_client.py</code> <pre><code>def send(\n    self,\n    request: Request,\n    *,\n    stream: bool = False,\n    auth: AuthTypes | UseClientDefault | None = USE_CLIENT_DEFAULT,\n    follow_redirects: bool | UseClientDefault = USE_CLIENT_DEFAULT,\n) -&gt; Response:\n    \"\"\"\n    Send a request.\n\n    The request is sent as-is, unmodified.\n\n    Typically you'll want to build one with `Client.build_request()`\n    so that any client-level configuration is merged into the request,\n    but passing an explicit `httpx.Request()` is supported as well.\n\n    See also: [Request instances][0]\n\n    [0]: /advanced/clients/#request-instances\n    \"\"\"\n    if self._state == ClientState.CLOSED:\n        raise RuntimeError(\"Cannot send a request, as the client has been closed.\")\n\n    self._state = ClientState.OPENED\n    follow_redirects = (\n        self.follow_redirects\n        if isinstance(follow_redirects, UseClientDefault)\n        else follow_redirects\n    )\n\n    self._set_timeout(request)\n\n    auth = self._build_request_auth(request, auth)\n\n    response = self._send_handling_auth(\n        request,\n        auth=auth,\n        follow_redirects=follow_redirects,\n        history=[],\n    )\n    try:\n        if not stream:\n            response.read()\n\n        return response\n\n    except BaseException as exc:\n        response.close()\n        raise exc\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.close","title":"close","text":"<pre><code>close()\n</code></pre> <p>Close transport and proxies.</p> Source code in <code>httpx/_client.py</code> <pre><code>def close(self) -&gt; None:\n    \"\"\"\n    Close transport and proxies.\n    \"\"\"\n    if self._state != ClientState.CLOSED:\n        self._state = ClientState.CLOSED\n\n        self._transport.close()\n        for transport in self._mounts.values():\n            if transport is not None:\n                transport.close()\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.request","title":"request","text":"<pre><code>request(\n    method,\n    url,\n    *,\n    content=None,\n    data=None,\n    files=None,\n    json=None,\n    params=None,\n    headers=None,\n    cookies=None,\n    auth=USE_CLIENT_DEFAULT,\n    follow_redirects=USE_CLIENT_DEFAULT,\n    timeout=USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> PARAMETER DESCRIPTION <code>method</code> <p> TYPE: <code>str</code> </p> <code>url</code> <p> TYPE: <code>URLTypes</code> </p> <code>content</code> <p> TYPE: <code>RequestContent | None</code> DEFAULT: <code>None</code> </p> <code>data</code> <p> TYPE: <code>_RequestData | None</code> DEFAULT: <code>None</code> </p> <code>files</code> <p> TYPE: <code>RequestFiles | None</code> DEFAULT: <code>None</code> </p> <code>json</code> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> <code>params</code> <p> TYPE: <code>QueryParamTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>HeaderTypes | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>auth</code> <p> TYPE: <code>AuthTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>timeout</code> <p> TYPE: <code>TimeoutTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def request(  # type: ignore[override]\n    self,\n    method: str,\n    url: httpx._types.URLTypes,\n    *,\n    content: httpx._types.RequestContent | None = None,\n    data: _RequestData | None = None,\n    files: httpx._types.RequestFiles | None = None,\n    json: typing.Any = None,\n    params: httpx._types.QueryParamTypes | None = None,\n    headers: httpx._types.HeaderTypes | None = None,\n    cookies: httpx._types.CookieTypes | None = None,\n    auth: httpx._types.AuthTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    follow_redirects: bool | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    timeout: httpx._types.TimeoutTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    extensions: dict[str, typing.Any] | None = None,\n) -&gt; httpx.Response:\n    if timeout is not httpx.USE_CLIENT_DEFAULT:\n        warnings.warn(\n            \"You should not use the 'timeout' argument with the TestClient. \"\n            \"See https://github.com/encode/starlette/issues/1108 for more information.\",\n            DeprecationWarning,\n        )\n    url = self._merge_url(url)\n    return super().request(\n        method,\n        url,\n        content=content,\n        data=data,\n        files=files,\n        json=json,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        auth=auth,\n        follow_redirects=follow_redirects,\n        timeout=timeout,\n        extensions=extensions,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.get","title":"get","text":"<pre><code>get(\n    url,\n    *,\n    params=None,\n    headers=None,\n    cookies=None,\n    auth=USE_CLIENT_DEFAULT,\n    follow_redirects=USE_CLIENT_DEFAULT,\n    timeout=USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> PARAMETER DESCRIPTION <code>url</code> <p> TYPE: <code>URLTypes</code> </p> <code>params</code> <p> TYPE: <code>QueryParamTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>HeaderTypes | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>auth</code> <p> TYPE: <code>AuthTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>timeout</code> <p> TYPE: <code>TimeoutTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def get(  # type: ignore[override]\n    self,\n    url: httpx._types.URLTypes,\n    *,\n    params: httpx._types.QueryParamTypes | None = None,\n    headers: httpx._types.HeaderTypes | None = None,\n    cookies: httpx._types.CookieTypes | None = None,\n    auth: httpx._types.AuthTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    follow_redirects: bool | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    timeout: httpx._types.TimeoutTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    extensions: dict[str, typing.Any] | None = None,\n) -&gt; httpx.Response:\n    return super().get(\n        url,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        auth=auth,\n        follow_redirects=follow_redirects,\n        timeout=timeout,\n        extensions=extensions,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.options","title":"options","text":"<pre><code>options(\n    url,\n    *,\n    params=None,\n    headers=None,\n    cookies=None,\n    auth=USE_CLIENT_DEFAULT,\n    follow_redirects=USE_CLIENT_DEFAULT,\n    timeout=USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> PARAMETER DESCRIPTION <code>url</code> <p> TYPE: <code>URLTypes</code> </p> <code>params</code> <p> TYPE: <code>QueryParamTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>HeaderTypes | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>auth</code> <p> TYPE: <code>AuthTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>timeout</code> <p> TYPE: <code>TimeoutTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def options(  # type: ignore[override]\n    self,\n    url: httpx._types.URLTypes,\n    *,\n    params: httpx._types.QueryParamTypes | None = None,\n    headers: httpx._types.HeaderTypes | None = None,\n    cookies: httpx._types.CookieTypes | None = None,\n    auth: httpx._types.AuthTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    follow_redirects: bool | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    timeout: httpx._types.TimeoutTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    extensions: dict[str, typing.Any] | None = None,\n) -&gt; httpx.Response:\n    return super().options(\n        url,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        auth=auth,\n        follow_redirects=follow_redirects,\n        timeout=timeout,\n        extensions=extensions,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.head","title":"head","text":"<pre><code>head(\n    url,\n    *,\n    params=None,\n    headers=None,\n    cookies=None,\n    auth=USE_CLIENT_DEFAULT,\n    follow_redirects=USE_CLIENT_DEFAULT,\n    timeout=USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> PARAMETER DESCRIPTION <code>url</code> <p> TYPE: <code>URLTypes</code> </p> <code>params</code> <p> TYPE: <code>QueryParamTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>HeaderTypes | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>auth</code> <p> TYPE: <code>AuthTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>timeout</code> <p> TYPE: <code>TimeoutTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def head(  # type: ignore[override]\n    self,\n    url: httpx._types.URLTypes,\n    *,\n    params: httpx._types.QueryParamTypes | None = None,\n    headers: httpx._types.HeaderTypes | None = None,\n    cookies: httpx._types.CookieTypes | None = None,\n    auth: httpx._types.AuthTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    follow_redirects: bool | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    timeout: httpx._types.TimeoutTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    extensions: dict[str, typing.Any] | None = None,\n) -&gt; httpx.Response:\n    return super().head(\n        url,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        auth=auth,\n        follow_redirects=follow_redirects,\n        timeout=timeout,\n        extensions=extensions,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.post","title":"post","text":"<pre><code>post(\n    url,\n    *,\n    content=None,\n    data=None,\n    files=None,\n    json=None,\n    params=None,\n    headers=None,\n    cookies=None,\n    auth=USE_CLIENT_DEFAULT,\n    follow_redirects=USE_CLIENT_DEFAULT,\n    timeout=USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> PARAMETER DESCRIPTION <code>url</code> <p> TYPE: <code>URLTypes</code> </p> <code>content</code> <p> TYPE: <code>RequestContent | None</code> DEFAULT: <code>None</code> </p> <code>data</code> <p> TYPE: <code>_RequestData | None</code> DEFAULT: <code>None</code> </p> <code>files</code> <p> TYPE: <code>RequestFiles | None</code> DEFAULT: <code>None</code> </p> <code>json</code> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> <code>params</code> <p> TYPE: <code>QueryParamTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>HeaderTypes | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>auth</code> <p> TYPE: <code>AuthTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>timeout</code> <p> TYPE: <code>TimeoutTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def post(  # type: ignore[override]\n    self,\n    url: httpx._types.URLTypes,\n    *,\n    content: httpx._types.RequestContent | None = None,\n    data: _RequestData | None = None,\n    files: httpx._types.RequestFiles | None = None,\n    json: typing.Any = None,\n    params: httpx._types.QueryParamTypes | None = None,\n    headers: httpx._types.HeaderTypes | None = None,\n    cookies: httpx._types.CookieTypes | None = None,\n    auth: httpx._types.AuthTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    follow_redirects: bool | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    timeout: httpx._types.TimeoutTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    extensions: dict[str, typing.Any] | None = None,\n) -&gt; httpx.Response:\n    return super().post(\n        url,\n        content=content,\n        data=data,\n        files=files,\n        json=json,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        auth=auth,\n        follow_redirects=follow_redirects,\n        timeout=timeout,\n        extensions=extensions,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.put","title":"put","text":"<pre><code>put(\n    url,\n    *,\n    content=None,\n    data=None,\n    files=None,\n    json=None,\n    params=None,\n    headers=None,\n    cookies=None,\n    auth=USE_CLIENT_DEFAULT,\n    follow_redirects=USE_CLIENT_DEFAULT,\n    timeout=USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> PARAMETER DESCRIPTION <code>url</code> <p> TYPE: <code>URLTypes</code> </p> <code>content</code> <p> TYPE: <code>RequestContent | None</code> DEFAULT: <code>None</code> </p> <code>data</code> <p> TYPE: <code>_RequestData | None</code> DEFAULT: <code>None</code> </p> <code>files</code> <p> TYPE: <code>RequestFiles | None</code> DEFAULT: <code>None</code> </p> <code>json</code> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> <code>params</code> <p> TYPE: <code>QueryParamTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>HeaderTypes | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>auth</code> <p> TYPE: <code>AuthTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>timeout</code> <p> TYPE: <code>TimeoutTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def put(  # type: ignore[override]\n    self,\n    url: httpx._types.URLTypes,\n    *,\n    content: httpx._types.RequestContent | None = None,\n    data: _RequestData | None = None,\n    files: httpx._types.RequestFiles | None = None,\n    json: typing.Any = None,\n    params: httpx._types.QueryParamTypes | None = None,\n    headers: httpx._types.HeaderTypes | None = None,\n    cookies: httpx._types.CookieTypes | None = None,\n    auth: httpx._types.AuthTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    follow_redirects: bool | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    timeout: httpx._types.TimeoutTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    extensions: dict[str, typing.Any] | None = None,\n) -&gt; httpx.Response:\n    return super().put(\n        url,\n        content=content,\n        data=data,\n        files=files,\n        json=json,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        auth=auth,\n        follow_redirects=follow_redirects,\n        timeout=timeout,\n        extensions=extensions,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.patch","title":"patch","text":"<pre><code>patch(\n    url,\n    *,\n    content=None,\n    data=None,\n    files=None,\n    json=None,\n    params=None,\n    headers=None,\n    cookies=None,\n    auth=USE_CLIENT_DEFAULT,\n    follow_redirects=USE_CLIENT_DEFAULT,\n    timeout=USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> PARAMETER DESCRIPTION <code>url</code> <p> TYPE: <code>URLTypes</code> </p> <code>content</code> <p> TYPE: <code>RequestContent | None</code> DEFAULT: <code>None</code> </p> <code>data</code> <p> TYPE: <code>_RequestData | None</code> DEFAULT: <code>None</code> </p> <code>files</code> <p> TYPE: <code>RequestFiles | None</code> DEFAULT: <code>None</code> </p> <code>json</code> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> <code>params</code> <p> TYPE: <code>QueryParamTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>HeaderTypes | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>auth</code> <p> TYPE: <code>AuthTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>timeout</code> <p> TYPE: <code>TimeoutTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def patch(  # type: ignore[override]\n    self,\n    url: httpx._types.URLTypes,\n    *,\n    content: httpx._types.RequestContent | None = None,\n    data: _RequestData | None = None,\n    files: httpx._types.RequestFiles | None = None,\n    json: typing.Any = None,\n    params: httpx._types.QueryParamTypes | None = None,\n    headers: httpx._types.HeaderTypes | None = None,\n    cookies: httpx._types.CookieTypes | None = None,\n    auth: httpx._types.AuthTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    follow_redirects: bool | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    timeout: httpx._types.TimeoutTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    extensions: dict[str, typing.Any] | None = None,\n) -&gt; httpx.Response:\n    return super().patch(\n        url,\n        content=content,\n        data=data,\n        files=files,\n        json=json,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        auth=auth,\n        follow_redirects=follow_redirects,\n        timeout=timeout,\n        extensions=extensions,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.delete","title":"delete","text":"<pre><code>delete(\n    url,\n    *,\n    params=None,\n    headers=None,\n    cookies=None,\n    auth=USE_CLIENT_DEFAULT,\n    follow_redirects=USE_CLIENT_DEFAULT,\n    timeout=USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> PARAMETER DESCRIPTION <code>url</code> <p> TYPE: <code>URLTypes</code> </p> <code>params</code> <p> TYPE: <code>QueryParamTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>HeaderTypes | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>auth</code> <p> TYPE: <code>AuthTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>timeout</code> <p> TYPE: <code>TimeoutTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def delete(  # type: ignore[override]\n    self,\n    url: httpx._types.URLTypes,\n    *,\n    params: httpx._types.QueryParamTypes | None = None,\n    headers: httpx._types.HeaderTypes | None = None,\n    cookies: httpx._types.CookieTypes | None = None,\n    auth: httpx._types.AuthTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    follow_redirects: bool | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    timeout: httpx._types.TimeoutTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    extensions: dict[str, typing.Any] | None = None,\n) -&gt; httpx.Response:\n    return super().delete(\n        url,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        auth=auth,\n        follow_redirects=follow_redirects,\n        timeout=timeout,\n        extensions=extensions,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.websocket_connect","title":"websocket_connect","text":"<pre><code>websocket_connect(url, subprotocols=None, **kwargs)\n</code></pre> PARAMETER DESCRIPTION <code>url</code> <p> TYPE: <code>str</code> </p> <code>subprotocols</code> <p> TYPE: <code>Sequence[str] | None</code> DEFAULT: <code>None</code> </p> <code>**kwargs</code> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def websocket_connect(\n    self,\n    url: str,\n    subprotocols: typing.Sequence[str] | None = None,\n    **kwargs: typing.Any,\n) -&gt; WebSocketTestSession:\n    url = urljoin(\"ws://testserver\", url)\n    headers = kwargs.get(\"headers\", {})\n    headers.setdefault(\"connection\", \"upgrade\")\n    headers.setdefault(\"sec-websocket-key\", \"testserver==\")\n    headers.setdefault(\"sec-websocket-version\", \"13\")\n    if subprotocols is not None:\n        headers.setdefault(\"sec-websocket-protocol\", \", \".join(subprotocols))\n    kwargs[\"headers\"] = headers\n    try:\n        super().request(\"GET\", url, **kwargs)\n    except _Upgrade as exc:\n        session = exc.session\n    else:\n        raise RuntimeError(\"Expected WebSocket upgrade\")  # pragma: no cover\n\n    return session\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.lifespan","title":"lifespan  <code>async</code>","text":"<pre><code>lifespan()\n</code></pre> Source code in <code>starlette/testclient.py</code> <pre><code>async def lifespan(self) -&gt; None:\n    scope = {\"type\": \"lifespan\", \"state\": self.app_state}\n    try:\n        await self.app(scope, self.stream_receive.receive, self.stream_send.send)\n    finally:\n        await self.stream_send.send(None)\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.wait_startup","title":"wait_startup  <code>async</code>","text":"<pre><code>wait_startup()\n</code></pre> Source code in <code>starlette/testclient.py</code> <pre><code>async def wait_startup(self) -&gt; None:\n    await self.stream_receive.send({\"type\": \"lifespan.startup\"})\n\n    async def receive() -&gt; typing.Any:\n        message = await self.stream_send.receive()\n        if message is None:\n            self.task.result()\n        return message\n\n    message = await receive()\n    assert message[\"type\"] in (\n        \"lifespan.startup.complete\",\n        \"lifespan.startup.failed\",\n    )\n    if message[\"type\"] == \"lifespan.startup.failed\":\n        await receive()\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.wait_shutdown","title":"wait_shutdown  <code>async</code>","text":"<pre><code>wait_shutdown()\n</code></pre> Source code in <code>starlette/testclient.py</code> <pre><code>async def wait_shutdown(self) -&gt; None:\n    async def receive() -&gt; typing.Any:\n        message = await self.stream_send.receive()\n        if message is None:\n            self.task.result()\n        return message\n\n    await self.stream_receive.send({\"type\": \"lifespan.shutdown\"})\n    message = await receive()\n    assert message[\"type\"] in (\n        \"lifespan.shutdown.complete\",\n        \"lifespan.shutdown.failed\",\n    )\n    if message[\"type\"] == \"lifespan.shutdown.failed\":\n        await receive()\n</code></pre>"},{"location":"readyapi-people/","title":"ReadyAPI People","text":"<p>ReadyAPI has an amazing community that welcomes people from all backgrounds.</p>"},{"location":"readyapi-people/#creator","title":"Creator","text":"<p>Hey! \ud83d\udc4b</p> <p>This is me:</p> @khulnasoft Answers: 1898Pull Requests: 734 <p>I'm the creator of ReadyAPI. You can read more about that in Help ReadyAPI - Get Help - Connect with the author.</p> <p>...But here I want to show you the community.</p> <p>ReadyAPI receives a lot of support from the community. And I want to highlight their contributions.</p> <p>These are the people that:</p> <ul> <li>Help others with questions in GitHub.</li> <li>Create Pull Requests.</li> <li>Review Pull Requests, especially important for translations.</li> <li>Help manage the repository (team members).</li> </ul> <p>All these tasks help maintain the repository.</p> <p>A round of applause to them. \ud83d\udc4f \ud83d\ude47</p>"},{"location":"readyapi-people/#team","title":"Team","text":"<p>This is the current list of team members. \ud83d\ude0e</p> <p>They have different levels of involvement and permissions, they can perform repository management tasks and together we  manage the ReadyAPI repository.</p> @khulnasoft @Kludex @alejsdev @svlandeg @YuriiMotov @patrick91 @luzzodev <p>Although the team members have the permissions to perform privileged tasks, all the help from others maintaining ReadyAPI is very much appreciated! \ud83d\ude47\u200d\u2642\ufe0f</p>"},{"location":"readyapi-people/#readyapi-experts","title":"ReadyAPI Experts","text":"<p>These are the users that have been helping others the most with questions in GitHub. \ud83d\ude47</p> <p>They have proven to be ReadyAPI Experts by helping many others. \u2728</p> <p>Tip</p> <p>You could become an official ReadyAPI Expert too!</p> <p>Just help others with questions in GitHub. \ud83e\udd13</p> <p>You can see the ReadyAPI Experts for:</p> <ul> <li>Last Month \ud83e\udd13</li> <li>3 Months \ud83d\ude0e</li> <li>6 Months \ud83e\uddd0</li> <li>1 Year \ud83e\uddd1\u200d\ud83d\udd2c</li> <li>All Time \ud83e\uddd9</li> </ul>"},{"location":"readyapi-people/#readyapi-experts-last-month","title":"ReadyAPI Experts - Last Month","text":"<p>These are the users that have been helping others the most with questions in GitHub during the last month. \ud83e\udd13</p> @YuriiMotov Questions replied: 9 @luzzodev Questions replied: 8 @alv2017 Questions replied: 3 @sachinh35 Questions replied: 2 @KianAnbarestani Questions replied: 2"},{"location":"readyapi-people/#readyapi-experts-3-months","title":"ReadyAPI Experts - 3 Months","text":"<p>These are the users that have been helping others the most with questions in GitHub during the last 3 months. \ud83d\ude0e</p> @luzzodev Questions replied: 25 @YuriiMotov Questions replied: 24 @alv2017 Questions replied: 22 @jgould22 Questions replied: 13 @Kludex Questions replied: 10 @yauhen-sobaleu Questions replied: 9 @JavierSanchezCastro Questions replied: 7 @sachinh35 Questions replied: 3 @SobikXexe Questions replied: 3"},{"location":"readyapi-people/#readyapi-experts-6-months","title":"ReadyAPI Experts - 6 Months","text":"<p>These are the users that have been helping others the most with questions in GitHub during the last 6 months. \ud83e\uddd0</p> @luzzodev Questions replied: 57 @YuriiMotov Questions replied: 56 @Kludex Questions replied: 34 @alv2017 Questions replied: 25 @jgould22 Questions replied: 17 @sehraramiz Questions replied: 11 @JavierSanchezCastro Questions replied: 9 @yauhen-sobaleu Questions replied: 9 @estebanx64 Questions replied: 7 @yvallois Questions replied: 7"},{"location":"readyapi-people/#readyapi-experts-1-year","title":"ReadyAPI Experts - 1 Year","text":"<p>These are the users that have been helping others the most with questions in GitHub during the last year. \ud83e\uddd1\u200d\ud83d\udd2c</p> @YuriiMotov Questions replied: 172 @Kludex Questions replied: 63 @luzzodev Questions replied: 61 @sinisaos Questions replied: 41 @JavierSanchezCastro Questions replied: 33 @jgould22 Questions replied: 27 @alv2017 Questions replied: 25 @ceb10n Questions replied: 15 @estebanx64 Questions replied: 13 @n8sty Questions replied: 13 @Kfir-G Questions replied: 13 @sehraramiz Questions replied: 11 @PhysicallyActive Questions replied: 11 @mattmess1221 Questions replied: 11 @yauhen-sobaleu Questions replied: 9 @AIdjis Questions replied: 8 @yvallois Questions replied: 7 @hasansezertasan Questions replied: 5 @gustavosett Questions replied: 5"},{"location":"readyapi-people/#readyapi-experts-all-time","title":"ReadyAPI Experts - All Time","text":"<p>Here are the all time ReadyAPI Experts. \ud83e\udd13\ud83e\udd2f</p> <p>These are the users that have helped others the most with questions in GitHub through all time. \ud83e\uddd9</p> @Kludex Questions replied: 655 @jgould22 Questions replied: 263 @YuriiMotov Questions replied: 247 @dmontagu Questions replied: 240 @Mause Questions replied: 219 @ycd Questions replied: 217 @JarroVGIT Questions replied: 192 @euri10 Questions replied: 153 @iudeen Questions replied: 128 @phy25 Questions replied: 126 @JavierSanchezCastro Questions replied: 91 @raphaelauv Questions replied: 83 @ghandic Questions replied: 71 @ArcLightSlavik Questions replied: 71 @n8sty Questions replied: 67 @luzzodev Questions replied: 61 @falkben Questions replied: 59 @acidjunk Questions replied: 50 @yinziyan1206 Questions replied: 49 @sm-Fifteen Questions replied: 49 @adriangb Questions replied: 46 @insomnes Questions replied: 45 @Dustyposa Questions replied: 45 @odiseo0 Questions replied: 43 @frankie567 Questions replied: 43 @sinisaos Questions replied: 41 @includeamin Questions replied: 40 @chbndrhnns Questions replied: 37 @STeveShary Questions replied: 37 @krishnardt Questions replied: 35 @panla Questions replied: 32 @prostomarkeloff Questions replied: 28 @hasansezertasan Questions replied: 27 @dbanty Questions replied: 26 @alv2017 Questions replied: 25 @wshayes Questions replied: 25 @SirTelemak Questions replied: 23 @connebs Questions replied: 22 @nymous Questions replied: 22 @chrisK824 Questions replied: 22 @rafsaf Questions replied: 21 @ebottos94 Questions replied: 20 @nsidnev Questions replied: 20 @chris-allnutt Questions replied: 20 @estebanx64 Questions replied: 19 @zoliknemet Questions replied: 18 @sehraramiz Questions replied: 18 @retnikt Questions replied: 18"},{"location":"readyapi-people/#top-contributors","title":"Top Contributors","text":"<p>Here are the Top Contributors. \ud83d\udc77</p> <p>These users have created the most Pull Requests that have been merged.</p> <p>They have contributed source code, documentation, etc. \ud83d\udce6</p> @alejsdev Pull Requests: 47 @Kludex Pull Requests: 23 @dmontagu Pull Requests: 17 @euri10 Pull Requests: 13 @kantandane Pull Requests: 13 @nilslindemann Pull Requests: 11 @zhaohan-dong Pull Requests: 11 @mariacamilagl Pull Requests: 9 @handabaldeep Pull Requests: 9 @vishnuvskvkl Pull Requests: 8 @svlandeg Pull Requests: 7 @alissadb Pull Requests: 6 @wshayes Pull Requests: 5 @samuelcolvin Pull Requests: 5 @waynerv Pull Requests: 5 @krishnamadhavan Pull Requests: 5 @alv2017 Pull Requests: 5 @jekirl Pull Requests: 4 @hitrust Pull Requests: 4 @ShahriyarR Pull Requests: 4 @adriangb Pull Requests: 4 @iudeen Pull Requests: 4 @philipokiokio Pull Requests: 4 @AlexWendland Pull Requests: 4 @divums Pull Requests: 3 @prostomarkeloff Pull Requests: 3 @nsidnev Pull Requests: 3 @pawamoy Pull Requests: 3 @patrickmckenna Pull Requests: 3 @hukkin Pull Requests: 3 @marcosmmb Pull Requests: 3 @Serrones Pull Requests: 3 @uriyyo Pull Requests: 3 @andrew222651 Pull Requests: 3 @rkbeatss Pull Requests: 3 @asheux Pull Requests: 3 @n25a Pull Requests: 3 @ghandic Pull Requests: 3 @TeoZosa Pull Requests: 3 @graingert Pull Requests: 3 @jaystone776 Pull Requests: 3 @zanieb Pull Requests: 3 @MicaelJarniac Pull Requests: 3 @papb Pull Requests: 3 @musicinmybrain Pull Requests: 3 @gitworkflows Pull Requests: 3 <p>There are hundreds of other contributors, you can see them all in the ReadyAPI GitHub Contributors page. \ud83d\udc77</p>"},{"location":"readyapi-people/#top-translators","title":"Top Translators","text":"<p>These are the Top Translators. \ud83c\udf10</p> <p>These users have created the most Pull Requests with translations to other languages that have been merged.</p> @nilslindemann Translations: 120 @jaystone776 Translations: 46 @ceb10n Translations: 27 @tokusumi Translations: 23 @SwftAlpc Translations: 23 @hasansezertasan Translations: 22 @waynerv Translations: 20 @valentinDruzhinin Translations: 18 @AlertRED Translations: 16 @hard-coders Translations: 15 @Joao-Pedro-P-Holanda Translations: 14 @codingjenny Translations: 14 @Xewus Translations: 13 @Zhongheng-Cheng Translations: 13 @Smlep Translations: 11 @marcelomarkus Translations: 11 @KaniKim Translations: 10 @Vincy1230 Translations: 9 @rjNemo Translations: 8 @xzmeng Translations: 8 @pablocm83 Translations: 8 @ptt3199 Translations: 7 @batlopes Translations: 6 @lucasbalieiro Translations: 6 @Alexandrhub Translations: 6 @Serrones Translations: 5 @RunningIkkyu Translations: 5 @Attsun1031 Translations: 5 @NinaHwang Translations: 5 @rostik1410 Translations: 5 @alv2017 Translations: 5 @komtaki Translations: 4 @JulianMaurin Translations: 4 @stlucasgarcia Translations: 4 @ComicShrimp Translations: 4 @BilalAlpaslan Translations: 4 @axel584 Translations: 4 @tamtam-fitness Translations: 4 @Limsunoh Translations: 4 @kwang1215 Translations: 4 @k94-ishi Translations: 4 @jfunez Translations: 3 @ycd Translations: 3 @mariacamilagl Translations: 3 @maoyibo Translations: 3 @blt232018 Translations: 3 @magiskboy Translations: 3 @luccasmmg Translations: 3 @lbmendes Translations: 3"},{"location":"readyapi-people/#top-translation-reviewers","title":"Top Translation Reviewers","text":"<p>These users are the Top Translation Reviewers. \ud83d\udd75\ufe0f</p> <p>I only speak a few languages (and not very well \ud83d\ude05). So, the reviewers are the ones that have the power to approve translations of the documentation. Without them, there wouldn't be documentation in several other languages.</p> @s111d Reviews: 147 @Xewus Reviews: 140 @sodaMelon Reviews: 124 @ceb10n Reviews: 112 @tokusumi Reviews: 104 @hasansezertasan Reviews: 95 @hard-coders Reviews: 92 @alv2017 Reviews: 88 @nazarepiedady Reviews: 83 @AlertRED Reviews: 81 @Alexandrhub Reviews: 68 @waynerv Reviews: 63 @cassiobotaro Reviews: 62 @mattwang44 Reviews: 59 @Laineyzhang55 Reviews: 48 @Kludex Reviews: 47 @komtaki Reviews: 45 @rostik1410 Reviews: 42 @svlandeg Reviews: 42 @alperiox Reviews: 42 @Rishat-F Reviews: 42 @Winand Reviews: 40 @solomein-sv Reviews: 38 @JavierSanchezCastro Reviews: 38 @stlucasgarcia Reviews: 36 @SwftAlpc Reviews: 36 @alejsdev Reviews: 36 @timothy-jeong Reviews: 36 @nilslindemann Reviews: 35 @rjNemo Reviews: 34 @codingjenny Reviews: 34 @mezgoodle Reviews: 33 @akarev0 Reviews: 33 @romashevchenko Reviews: 32 @LorhanSohaky Reviews: 30 @Vincy1230 Reviews: 30 @black-redoc Reviews: 29 @pedabraham Reviews: 28 @Smlep Reviews: 28 @dedkot01 Reviews: 28 @hsuanchi Reviews: 28 @dpinezich Reviews: 28 @maoyibo Reviews: 27 @0417taehyun Reviews: 27 @BilalAlpaslan Reviews: 26 @junah201 Reviews: 26 @zy7y Reviews: 25 @mycaule Reviews: 25 @Aruelius Reviews: 24"},{"location":"readyapi-people/#sponsors","title":"Sponsors","text":"<p>These are the Sponsors. \ud83d\ude0e</p> <p>They are supporting my work with ReadyAPI (and others), mainly through GitHub Sponsors.</p>"},{"location":"readyapi-people/#gold-sponsors","title":"Gold Sponsors","text":""},{"location":"readyapi-people/#silver-sponsors","title":"Silver Sponsors","text":""},{"location":"readyapi-people/#bronze-sponsors","title":"Bronze Sponsors","text":""},{"location":"readyapi-people/#individual-sponsors","title":"Individual Sponsors","text":"@coderabbitai @Nixtla @permitio @mercedes-benz @marvin-robot @Ponte-Energy-Partners @LambdaTest-Inc @BoostryJP @acsone @Trivie @takashi-yoneya @mainframeindustries @yasyf @alixlahuec @primer-io @upciti @f4rk4sh @freddiev4 @samuelcolvin @vincentkoc @otosky @ramonalmeidam @ashi-agrawal @sepsi77 @RaamEEIL @ehaca @raphaellaude @timlrx @Leay15 @ProteinQure @roboflow @kaoru0310 @DelfinaCare @Karine-Bauch @eruditis @jugeeem @logic-automation @dudikbender @patsatsia @anthonycepeda @patricioperezv @chickenandstats @dodo5522 @knallgelb @dblackrun @zsinx6 @kennywakeland @aacayaco @anomaly @gorhack @Ryandaydev @jaredtrog @jstanden @paulcwatts @andreaso @robintw @pamelafox @ericof @wshayes @gaetanBloch @koxudaxi @falkben @mintuhouse @oliverxchen @TrevorBenson @wdwinslow @catherinenelson1 @jsoques @joeds13 @dannywade @khadrawy @mjohnsey @ternaus @eseglem @FernandoCelmer @simw @Rehket @hiancdtrsnm @jpizquierdo @pawamoy @bnkc @petercool @siavashyj @mobyw @ArtyomVancyan @caviri @hgalytoby @joshuatz @SebTota @nisutec @hoenie-ams @joerambo @rlnchow @dvlpjrs @engineerjoe440 @conservative-dude @CR1337 @PunRabbit @PelicanQ @tochikuji @browniebroke @miguelgr @WillHogan @my3 @leobiscassi @Alisa-lisa @ddanier @bryanculbertson @slafs @ceb10n @moonape1226 @msehnout @xncbf @DMantis @hard-coders @supdann @mntolia @pheanex @Zuzah @artempronevskiy @TheR1D @danielunderwood @rangulvers @sdevkota @brizzbuzz @Baghdady92 @KentShikama @katnoria @harsh183 @hcristea @larsyngvelundin @andrecorumba @rwxd @morzan1001 @sadikkuzu @Olegt0rr @Miles-Arts @sandeepsalwan1 @fabioantonioastore @zhandos256 @one-st-one @Toothwitch @ssbarnea @andreagrandi"},{"location":"readyapi-people/#about-the-data-technical-details","title":"About the data - technical details","text":"<p>The main intention of this page is to highlight the effort of the community to help others.</p> <p>Especially including efforts that are normally less visible, and in many cases more arduous, like helping others with questions and reviewing Pull Requests with translations.</p> <p>The data is calculated each month, you can read the source code here.</p> <p>Here I'm also highlighting contributions from sponsors.</p> <p>I also reserve the right to update the algorithm, sections, thresholds, etc (just in case \ud83e\udd37).</p>"},{"location":"contributing/","title":"Development - Contributing","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>First, you might want to see the basic ways to help ReadyAPI and get help.</p>"},{"location":"contributing/#developing","title":"Developing","text":"<p>If you already cloned the readyapi repository and you want to deep dive in the code, here are some guidelines to set up your environment.</p>"},{"location":"contributing/#virtual-environment","title":"Virtual environment","text":"<p>Follow the instructions to create and activate a virtual environment for the internal code of <code>readyapi</code>.</p>"},{"location":"contributing/#install-requirements-using-pip","title":"Install requirements using pip","text":"<p>After activating the environment, install the required packages:</p> <pre><code>$ pip install -r requirements.txt\n\n---&gt; 100%\n</code></pre> <p>It will install all the dependencies and your local ReadyAPI in your local environment.</p>"},{"location":"contributing/#using-your-local-readyapi","title":"Using your local ReadyAPI","text":"<p>If you create a Python file that imports and uses ReadyAPI, and run it with the Python from your local environment, it will use your cloned local ReadyAPI source code.</p> <p>And if you update that local ReadyAPI source code when you run that Python file again, it will use the fresh version of ReadyAPI you just edited.</p> <p>That way, you don't have to \"install\" your local version to be able to test every change.</p> <p>Technical Details</p> <p>This only happens when you install using this included <code>requirements.txt</code> instead of running <code>pip install readyapi</code> directly.</p> <p>That is because inside the <code>requirements.txt</code> file, the local version of ReadyAPI is marked to be installed in \"editable\" mode, with the <code>-e</code> option.</p>"},{"location":"contributing/#format-the-code","title":"Format the code","text":"<p>There is a script that you can run that will format and clean all your code:</p> <pre><code>$ bash scripts/format.sh\n</code></pre> <p>It will also auto-sort all your imports.</p>"},{"location":"contributing/#tests","title":"Tests","text":"<p>There is a script that you can run locally to test all the code and generate coverage reports in HTML:</p> <pre><code>$ bash scripts/test-cov-html.sh\n</code></pre> <p>This command generates a directory <code>./htmlcov/</code>, if you open the file <code>./htmlcov/index.html</code> in your browser, you can explore interactively the regions of code that are covered by the tests, and notice if there is any region missing.</p>"},{"location":"contributing/#docs","title":"Docs","text":"<p>First, make sure you set up your environment as described above, that will install all the requirements.</p>"},{"location":"contributing/#docs-live","title":"Docs live","text":"<p>During local development, there is a script that builds the site and checks for any changes, live-reloading:</p> <pre><code>$ python ./scripts/docs.py live\n\n&lt;span style=\"color: green;\"&gt;[INFO]&lt;/span&gt; Serving on http://127.0.0.1:8008\n&lt;span style=\"color: green;\"&gt;[INFO]&lt;/span&gt; Start watching changes\n&lt;span style=\"color: green;\"&gt;[INFO]&lt;/span&gt; Start detecting changes\n</code></pre> <p>It will serve the documentation on <code>http://127.0.0.1:8008</code>.</p> <p>That way, you can edit the documentation/source files and see the changes live.</p> <p>Tip</p> <p>Alternatively, you can perform the same steps that scripts does manually.</p> <p>Go into the language directory, for the main docs in English it's at <code>docs/en/</code>:</p> <pre><code>$ cd docs/en/\n</code></pre> <p>Then run <code>mkdocs</code> in that directory:</p> <pre><code>$ mkdocs serve --dev-addr 127.0.0.1:8008\n</code></pre>"},{"location":"contributing/#cligenius-cli-optional","title":"Cligenius CLI (optional)","text":"<p>The instructions here show you how to use the script at <code>./scripts/docs.py</code> with the <code>python</code> program directly.</p> <p>But you can also use Cligenius CLI, and you will get autocompletion in your terminal for the commands after installing completion.</p> <p>If you install Cligenius CLI, you can install completion with:</p> <pre><code>$ cligenius --install-completion\n\nzsh completion installed in /home/user/.bashrc.\nCompletion will take effect once you restart the terminal.\n</code></pre>"},{"location":"contributing/#docs-structure","title":"Docs Structure","text":"<p>The documentation uses MkDocs.</p> <p>And there are extra tools/scripts in place to handle translations in <code>./scripts/docs.py</code>.</p> <p>Tip</p> <p>You don't need to see the code in <code>./scripts/docs.py</code>, you just use it in the command line.</p> <p>All the documentation is in Markdown format in the directory <code>./docs/en/</code>.</p> <p>Many of the tutorials have blocks of code.</p> <p>In most of the cases, these blocks of code are actual complete applications that can be run as is.</p> <p>In fact, those blocks of code are not written inside the Markdown, they are Python files in the <code>./examples/</code> directory.</p> <p>And those Python files are included/injected in the documentation when generating the site.</p>"},{"location":"contributing/#docs-for-tests","title":"Docs for tests","text":"<p>Most of the tests actually run against the example source files in the documentation.</p> <p>This helps to make sure that:</p> <ul> <li>The documentation is up-to-date.</li> <li>The documentation examples can be run as is.</li> <li>Most of the features are covered by the documentation, ensured by test coverage.</li> </ul>"},{"location":"contributing/#apps-and-docs-at-the-same-time","title":"Apps and docs at the same time","text":"<p>If you run the examples with, e.g.:</p> <pre><code>$ readyapi dev tutorial001.py\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>as Uvicorn by default will use the port <code>8000</code>, the documentation on port <code>8008</code> won't clash.</p>"},{"location":"contributing/#translations","title":"Translations","text":"<p>Help with translations is VERY MUCH appreciated! And it can't be done without the help from the community. \ud83c\udf0e \ud83d\ude80</p> <p>Here are the steps to help with translations.</p>"},{"location":"contributing/#tips-and-guidelines","title":"Tips and guidelines","text":"<ul> <li> <p>Check the currently existing pull requests for your language. You can filter the pull requests by the ones with the label for your language. For example, for Spanish, the label is <code>lang-es</code>.</p> </li> <li> <p>Review those pull requests, requesting changes or approving them. For the languages I don't speak, I'll wait for several others to review the translation before merging.</p> </li> </ul> <p>Tip</p> <p>You can add comments with change suggestions to existing pull requests.</p> <p>Check the docs about adding a pull request review to approve it or request changes.</p> <ul> <li> <p>Check if there's a GitHub Discussion to coordinate translations for your language. You can subscribe to it, and when there's a new pull request to review, an automatic comment will be added to the discussion.</p> </li> <li> <p>If you translate pages, add a single pull request per page translated. That will make it much easier for others to review it.</p> </li> <li> <p>To check the 2-letter code for the language you want to translate, you can use the table List of ISO 639-1 codes.</p> </li> </ul>"},{"location":"contributing/#existing-language","title":"Existing language","text":"<p>Let's say you want to translate a page for a language that already has translations for some pages, like Spanish.</p> <p>In the case of Spanish, the 2-letter code is <code>es</code>. So, the directory for Spanish translations is located at <code>docs/es/</code>.</p> <p>Tip</p> <p>The main (\"official\") language is English, located at <code>docs/en/</code>.</p> <p>Now run the live server for the docs in Spanish:</p> <pre><code>// Use the command \"live\" and pass the language code as a CLI argument\n$ python ./scripts/docs.py live es\n\n&lt;span style=\"color: green;\"&gt;[INFO]&lt;/span&gt; Serving on http://127.0.0.1:8008\n&lt;span style=\"color: green;\"&gt;[INFO]&lt;/span&gt; Start watching changes\n&lt;span style=\"color: green;\"&gt;[INFO]&lt;/span&gt; Start detecting changes\n</code></pre> <p>Tip</p> <p>Alternatively, you can perform the same steps that scripts does manually.</p> <p>Go into the language directory, for the Spanish translations it's at <code>docs/es/</code>:</p> <pre><code>$ cd docs/es/\n</code></pre> <p>Then run <code>mkdocs</code> in that directory:</p> <pre><code>$ mkdocs serve --dev-addr 127.0.0.1:8008\n</code></pre> <p>Now you can go to http://127.0.0.1:8008 and see your changes live.</p> <p>You will see that every language has all the pages. But some pages are not translated and have an info box at the top, about the missing translation.</p> <p>Now let's say that you want to add a translation for the section Features.</p> <ul> <li>Copy the file at:</li> </ul> <pre><code>docs/en/docs/features.md\n</code></pre> <ul> <li>Paste it in exactly the same location but for the language you want to translate, e.g.:</li> </ul> <pre><code>docs/es/docs/features.md\n</code></pre> <p>Tip</p> <p>Notice that the only change in the path and file name is the language code, from <code>en</code> to <code>es</code>.</p> <p>If you go to your browser you will see that now the docs show your new section (the info box at the top is gone). \ud83c\udf89</p> <p>Now you can translate it all and see how it looks as you save the file.</p>"},{"location":"contributing/#dont-translate-these-pages","title":"Don't Translate these Pages","text":"<p>\ud83d\udea8 Don't translate:</p> <ul> <li>Files under <code>reference/</code></li> <li><code>release-notes.md</code></li> <li><code>readyapi-people.md</code></li> <li><code>external-links.md</code></li> <li><code>newsletter.md</code></li> <li><code>management-tasks.md</code></li> <li><code>management.md</code></li> <li><code>contributing.md</code></li> </ul> <p>Some of these files are updated very frequently and a translation would always be behind, or they include the main content from English source files, etc.</p>"},{"location":"contributing/#new-language","title":"New Language","text":"<p>Let's say that you want to add translations for a language that is not yet translated, not even some pages.</p> <p>Let's say you want to add translations for Creole, and it's not yet there in the docs.</p> <p>Checking the link from above, the code for \"Creole\" is <code>ht</code>.</p> <p>The next step is to run the script to generate a new translation directory:</p> <pre><code>// Use the command new-lang, pass the language code as a CLI argument\n$ python ./scripts/docs.py new-lang ht\n\nSuccessfully initialized: docs/ht\n</code></pre> <p>Now you can check in your code editor the newly created directory <code>docs/ht/</code>.</p> <p>That command created a file <code>docs/ht/mkdocs.yml</code> with a simple config that inherits everything from the <code>en</code> version:</p> <pre><code>INHERIT: ../en/mkdocs.yml\n</code></pre> <p>Tip</p> <p>You could also simply create that file with those contents manually.</p> <p>That command also created a dummy file <code>docs/ht/index.md</code> for the main page, you can start by translating that one.</p> <p>You can continue with the previous instructions for an \"Existing Language\" for that process.</p> <p>You can make the first pull request with those two files, <code>docs/ht/mkdocs.yml</code> and <code>docs/ht/index.md</code>. \ud83c\udf89</p>"},{"location":"contributing/#preview-the-result","title":"Preview the result","text":"<p>As already mentioned above, you can use the <code>./scripts/docs.py</code> with the <code>live</code> command to preview the results (or <code>mkdocs serve</code>).</p> <p>Once you are done, you can also test it all as it would look online, including all the other languages.</p> <p>To do that, first build all the docs:</p> <pre><code>// Use the command \"build-all\", this will take a bit\n$ python ./scripts/docs.py build-all\n\nBuilding docs for: en\nBuilding docs for: es\nSuccessfully built docs for: es\n</code></pre> <p>This builds all those independent MkDocs sites for each language, combines them, and generates the final output at <code>./site/</code>.</p> <p>Then you can serve that with the command <code>serve</code>:</p> <pre><code>// Use the command \"serve\" after running \"build-all\"\n$ python ./scripts/docs.py serve\n\nWarning: this is a very simple server. For development, use mkdocs serve instead.\nThis is here only to preview a site with translations already built.\nMake sure you run the build-all command first.\nServing at: http://127.0.0.1:8008\n</code></pre>"},{"location":"contributing/#translation-specific-tips-and-guidelines","title":"Translation specific tips and guidelines","text":"<ul> <li> <p>Translate only the Markdown documents (<code>.md</code>). Do not translate the code examples at <code>./examples</code>.</p> </li> <li> <p>In code blocks within the Markdown document, translate comments (<code># a comment</code>), but leave the rest unchanged.</p> </li> <li> <p>Do not change anything enclosed in \"``\" (inline code).</p> </li> <li> <p>In lines starting with <code>///</code> translate only the text part after <code>|</code>. Leave the rest unchanged.</p> </li> <li> <p>You can translate info boxes like <code>/// warning</code> with for example <code>/// warning | Achtung</code>. But do not change the word immediately after the <code>///</code>, it determines the color of the info box.</p> </li> <li> <p>Do not change the paths in links to images, code files, Markdown documents.</p> </li> <li> <p>However, when a Markdown document is translated, the <code>#hash-parts</code> in links to its headings may change. Update these links if possible.</p> <ul> <li>Search for such links in the translated document using the regex <code>#[^# ]</code>.</li> <li>Search in all documents already translated into your language for <code>your-translated-document.md</code>. For example VS Code has an option \"Edit\" -&gt; \"Find in Files\".</li> <li>When translating a document, do not \"pre-translate\" <code>#hash-parts</code> that link to headings in untranslated documents.</li> </ul> </li> </ul>"},{"location":"external-links/","title":"External Links and Articles","text":"<p>ReadyAPI has a great community constantly growing.</p> <p>There are many posts, articles, tools, and projects, related to ReadyAPI.</p> <p>Here's an incomplete list of some of them.</p> <p>Tip</p> <p>If you have an article, project, tool, or anything related to ReadyAPI that is not yet listed here, create a Pull Request adding it.</p>"},{"location":"external-links/#articles","title":"Articles","text":""},{"location":"external-links/#english","title":"English","text":"<ul> <li> <p>How to profile a ReadyAPI asynchronous request by Balthazar Rouberol.</p> </li> <li> <p>Deploy a Serverless ReadyAPI App with Neon Postgres and AWS App Runner at any scale by Stephen Siegert - Neon.</p> </li> <li> <p>Building a Machine Learning Microservice with ReadyAPI by Kurtis Pykes - NVIDIA.</p> </li> <li> <p>Booking Appointments with Twilio, Notion, and ReadyAPI by Ravgeet Dhillon - Twilio.</p> </li> <li> <p>Write a Python data layer with Azure Cosmos DB and ReadyAPI by Abhinav Tripathi - Microsoft Blogs.</p> </li> <li> <p>10 Tips for adding SQLAlchemy to ReadyAPI by Donny Peeters.</p> </li> <li> <p>Tips on migrating from Flask to ReadyAPI and vice-versa by Jessica Temporal.</p> </li> <li> <p>Explore How to Effectively Use JWT With ReadyAPI by Ankit Anchlia.</p> </li> <li> <p>Instrument ReadyAPI with OpenTelemetry tracing and visualize traces in Grafana Tempo. by Nicol\u00f3 Lino.</p> </li> <li> <p>ML serving and monitoring with ReadyAPI and Evidently by Mikhail Rozhkov, Elena Samuylova.</p> </li> <li> <p>ReadyAPI Tutorial in Visual Studio Code by Visual Studio Code Team.</p> </li> <li> <p>ReadyAPI application monitoring made easy by Apitally.</p> </li> <li> <p>Building a RESTful API with ReadyAPI: Secure Signup and Login Functionality Included by John Philip.</p> </li> <li> <p>Building a CRUD API with ReadyAPI and Supabase by Keshav Malik.</p> </li> <li> <p>Build an SMS Spam Classifier Serverless Database with FaunaDB and ReadyAPI by Adejumo Ridwan Suleiman.</p> </li> <li> <p>ReadyAPI lambda container: serverless simplified by Raf Rasenberg.</p> </li> <li> <p>Authorization on ReadyAPI with Casbin by Teresa N. Fontanella De Santis.</p> </li> <li> <p>How to monitor ReadyAPI application performance using Python agent by New Relic.</p> </li> <li> <p>Building the Poll App From Django Tutorial With ReadyAPI And React by Jean-Baptiste Rocher.</p> </li> <li> <p>Seamless ReadyAPI Configuration with ConfZ by Silvan Melchior.</p> </li> <li> <p>5 Advanced Features of ReadyAPI You Should Try by Kaustubh Gupta.</p> </li> <li> <p>Deploying ML Models as API Using ReadyAPI and Heroku by Kaustubh Gupta.</p> </li> <li> <p>Using GitHub Actions to Deploy a ReadyAPI Project to Heroku by Somraj Saha.</p> </li> <li> <p>How to Create A Fake Certificate Authority And Generate TLS Certs for ReadyAPI by @pystar.</p> </li> <li> <p>Building a realtime ticket booking solution with Kafka, ReadyAPI, and Ably by Ben Gamble.</p> </li> <li> <p>Building simple E-Commerce with NuxtJS and ReadyAPI by Shahriyar(Shako) Rzayev.</p> </li> <li> <p>Serve a machine learning model using Sklearn, ReadyAPI and Docker by Rodrigo Arenas.</p> </li> <li> <p>Building an API with ReadyAPI and Supabase and Deploying on Deta by Yashasvi Singh.</p> </li> <li> <p>Deploy ReadyAPI on Ubuntu and Serve using Caddy 2 Web Server by Navule Pavan Kumar Rao.</p> </li> <li> <p>Python Facebook messenger webhook with ReadyAPI on Glitch by Patrick Ladon.</p> </li> <li> <p>Deploy a dockerized ReadyAPI application to AWS by Valon Januzaj.</p> </li> <li> <p>ReadyAPI for Flask Users by Amit Chaudhary.</p> </li> <li> <p>How to monitor your ReadyAPI service by Louis Guitton.</p> </li> <li> <p>Creating a CRUD App with ReadyAPI (Part one) by Precious Ndubueze.</p> </li> <li> <p>Build And Host Fast Data Science Applications Using ReadyAPI by Farhad Malik.</p> </li> <li> <p>Deploy ReadyAPI on Azure App Service by Navule Pavan Kumar Rao.</p> </li> <li> <p>Machine learning model serving in Python using ReadyAPI and streamlit by Davide Fiocco.</p> </li> <li> <p>Introducing Dispatch by Netflix.</p> </li> <li> <p>Using ReadyAPI with Django by Stavros Korokithakis.</p> </li> <li> <p>Build a Secure Twilio Webhook with Python and ReadyAPI by Twilio.</p> </li> <li> <p>Build a web API from scratch with ReadyAPI - the workshop by KhulnaSoft Ltd (khulnasoft).</p> </li> <li> <p>ReadyAPI + Zeit.co = \ud83d\ude80 by Paul Sec.</p> </li> <li> <p>Build simple API service with Python ReadyAPI \u2014 Part 1 by cuongld2.</p> </li> <li> <p>Microservice in Python using ReadyAPI by Paurakh Sharma Humagain.</p> </li> <li> <p>Real-time Notifications with Python and Postgres by Guillermo Cruz.</p> </li> <li> <p>Create and Deploy ReadyAPI app to Heroku without using Docker by Navule Pavan Kumar Rao.</p> </li> <li> <p>Another Boilerplate to ReadyAPI: Azure Pipeline CI + Pytest by Arthur Henrique.</p> </li> <li> <p>Deploy Machine Learning Models with Keras, ReadyAPI, Redis and Docker by Shane Soh.</p> </li> <li> <p>Towards Data Science: Deploying Iris Classifications with ReadyAPI and Docker by Mandy Gu.</p> </li> <li> <p>TestDriven.io: Developing and Testing an Asynchronous API with ReadyAPI and Pytest by Michael Herman.</p> </li> <li> <p>How To Deploy Tensorflow 2.0 Models As An API Service With ReadyAPI &amp; Docker by Bernard Brenyah.</p> </li> <li> <p>Why I'm Leaving Flask by Dylan Anthony.</p> </li> <li> <p>Using Docker Compose to deploy a lightweight Python REST API with a job queue by Mike Moritz.</p> </li> <li> <p>A ReadyAPI and Swagger UI visual cheatsheet by @euri10.</p> </li> <li> <p>Uber: Ludwig v0.2 Adds New Features and Other Improvements to its Deep Learning Toolbox [including a ReadyAPI server] by Uber Engineering.</p> </li> <li> <p>How to Deploy a Machine Learning Model by Maarten Grootendorst.</p> </li> <li> <p>JWT Authentication with ReadyAPI and AWS Cognito by Johannes Gontrum.</p> </li> <li> <p>Top 5 Asynchronous Web Frameworks for Python by Ankush Thakur.</p> </li> <li> <p>Deploying a scikit-learn model with ONNX and ReadyAPI by Nico Axtmann.</p> </li> <li> <p>ReadyAPI authentication revisited: Enabling API key authentication by Nils de Bruin.</p> </li> <li> <p>ReadyAPI and Scikit-Learn: Easily Deploy Models by Nick Cortale.</p> </li> <li> <p>Introduction to the readyapi python framework by Errieta Kostala.</p> </li> <li> <p>ReadyAPI\u200a\u2014\u200aHow to add basic and cookie authentication by Nils de Bruin.</p> </li> <li> <p>ReadyAPI\u200a\u2014\u200aGoogle as an external authentication provider by Nils de Bruin.</p> </li> <li> <p>ReadyAPI/Starlette debug vs prod by William Hayes.</p> </li> <li> <p>Developing ReadyAPI Application using K8s &amp; AWS by Mukul Mantosh.</p> </li> <li> <p>Readyapi, Docker(Docker compose) and Postgres by KrishNa.</p> </li> <li> <p>Deployment using Docker, Lambda, Aurora, CDK &amp; GH Actions by Devon Ray.</p> </li> <li> <p>Mastering Soft Delete: Advanced SQLAlchemy Techniques by Shubhendra Kushwaha.</p> </li> <li> <p>Role based row filtering: Advanced SQLAlchemy Techniques by Shubhendra Kushwaha.</p> </li> </ul>"},{"location":"external-links/#german","title":"German","text":"<ul> <li> <p>Domain-driven Design mit Python und ReadyAPI by Marcel Sander (actidoo).</p> </li> <li> <p>Inbetriebnahme eines scikit-learn-Modells mit ONNX und ReadyAPI by Nico Axtmann.</p> </li> <li> <p>REST-API Programmieren mittels Python und dem ReadyAPI Modul by Felix Sch\u00fcrmeyer.</p> </li> </ul>"},{"location":"external-links/#japanese","title":"Japanese","text":"<ul> <li> <p>[ReadyAPI] Python\u200b\u88fd\u200b\u306eASGI Web \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af ReadyAPI\u306b\u200b\u5165\u9580\u200b\u3059\u308b by @bee2.</p> </li> <li> <p>Python\u306eWeb framework\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u200b\u6bd4\u8f03\u200b (Django, Flask, responder, ReadyAPI, japronto) by @bee2.</p> </li> <li> <p>\u3010\u200b\u7b2c\u200b4\u200b\u56de\u200b\u3011ReadyAPI\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb: toDo\u30a2\u30d7\u30ea\u3092\u200b\u4f5c\u200b\u3063\u3066\u307f\u3088\u3046\u3010\u200b\u7ba1\u7406\u8005\u200b\u30da\u30fc\u30b8\u200b\u6539\u826f\u200b\u7de8\u200b\u3011 by \u30e9\u30a4\u30c8\u30b3\u30fc\u30c9\u30e1\u30c7\u30a3\u30a2\u200b\u7de8\u200b\u96c6\u90e8\u200b.</p> </li> <li> <p>\u3010\u200b\u7b2c\u200b3\u200b\u56de\u200b\u3011ReadyAPI\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb: toDo\u30a2\u30d7\u30ea\u3092\u200b\u4f5c\u200b\u3063\u3066\u307f\u3088\u3046\u3010\u200b\u8a8d\u200b\u8a3c\u200b\u30fb\u30e6\u30fc\u30b6\u200b\u767b\u200b\u9332\u200b\u7de8\u200b\u3011 by \u30e9\u30a4\u30c8\u30b3\u30fc\u30c9\u30e1\u30c7\u30a3\u30a2\u200b\u7de8\u200b\u96c6\u90e8\u200b.</p> </li> <li> <p>\u3010\u200b\u7b2c\u200b2\u200b\u56de\u200b\u3011ReadyAPI\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb: ToDo\u30a2\u30d7\u30ea\u3092\u200b\u4f5c\u200b\u3063\u3066\u307f\u3088\u3046\u3010\u30e2\u30c7\u30eb\u200b\u69cb\u7bc9\u7de8\u200b\u3011 by \u30e9\u30a4\u30c8\u30b3\u30fc\u30c9\u30e1\u30c7\u30a3\u30a2\u200b\u7de8\u200b\u96c6\u90e8\u200b.</p> </li> <li> <p>\u3010\u200b\u7b2c\u200b1\u200b\u56de\u200b\u3011ReadyAPI\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb: ToDo\u30a2\u30d7\u30ea\u3092\u200b\u4f5c\u200b\u3063\u3066\u307f\u3088\u3046\u3010\u200b\u74b0\u5883\u200b\u69cb\u7bc9\u7de8\u200b\u3011 by \u30e9\u30a4\u30c8\u30b3\u30fc\u30c9\u30e1\u30c7\u30a3\u30a2\u200b\u7de8\u200b\u96c6\u90e8\u200b.</p> </li> <li> <p>\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u200b\u958b\u200b\u767a\u200b\u8005\u200b\u5411\u200b\u3051\u306eDocker\u306b\u3088\u308bPython\u200b\u958b\u200b\u767a\u200b\u74b0\u200b\u5883\u200b\u69cb\u200b\u7bc9\u200b by Hikaru Takahashi.</p> </li> <li> <p>ReadyAPI\u3067POST\u3055\u308c\u305fJSON\u306e\u30ec\u30b9\u30dd\u30f3\u30b9body\u3092\u200b\u53d7\u200b\u3051\u200b\u53d6\u200b\u308b by @angel_katayoku.</p> </li> <li> <p>ReadyAPI\u3092MySQL\u3068\u200b\u63a5\u200b\u7d9a\u200b\u3057\u3066Docker\u3067\u200b\u7ba1\u7406\u200b\u3057\u3066\u307f\u308b by @angel_katayoku.</p> </li> <li> <p>ReadyAPI\u3067CORS\u3092\u200b\u56de\u907f\u200b by @angel_katayoku.</p> </li> <li> <p>python\u200b\u88fd\u200b\u306e\u200b\u6700\u65b0\u200bAPI\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af ReadyAPI \u3092\u200b\u89e6\u200b\u3063\u3066\u307f\u305f by @ryoryomaru.</p> </li> <li> <p>ReadyAPI\uff5cDB\u200b\u63a5\u200b\u7d9a\u200b\u3057\u3066CRUD\u3059\u308bPython\u200b\u88fd\u200bAPI\u30b5\u30fc\u30d0\u30fc\u3092\u200b\u69cb\u7bc9\u200b by @mtitg.</p> </li> </ul>"},{"location":"external-links/#portuguese","title":"Portuguese","text":"<ul> <li> <p>ReadyAPI do ZERO by Eduardo Mendes.</p> </li> <li> <p>Dicas para migrar uma aplica\u00e7\u00e3o de Flask para ReadyAPI e vice-versa by Jessica Temporal.</p> </li> </ul>"},{"location":"external-links/#russian","title":"Russian","text":"<ul> <li> <p>ReadyAPI: \u0437\u043d\u0430\u043a\u043e\u043c\u0438\u043c\u0441\u044f \u0441 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u043c by Troy K\u00f6hler.</p> </li> <li> <p>\u041f\u043e\u0447\u0435\u043c\u0443 \u0412\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c ReadyAPI? by prostomarkeloff.</p> </li> <li> <p>\u041c\u0435\u043b\u043a\u0430\u044f \u043f\u0438\u0442\u043e\u043d\u044f\u0447\u0430\u044f \u0440\u0430\u0434\u043e\u0441\u0442\u044c #2: Starlette - \u0421\u043e\u043b\u0438\u0434\u043d\u0430\u044f \u043f\u0440\u0438\u043c\u043e\u0447\u043a\u0430 \u2013 ReadyAPI by Andrey Korchak.</p> </li> </ul>"},{"location":"external-links/#vietnamese","title":"Vietnamese","text":"<ul> <li>READYAPI: TRI\u1ec2N KHAI B\u1eb0NG DOCKER by Nguy\u1ec5n Nh\u00e2n.</li> </ul>"},{"location":"external-links/#taiwanese","title":"Taiwanese","text":"<ul> <li>Tortoise ORM / ReadyAPI \u200b\u6574\u5408\u200b\u5feb\u901f\u200b\u7b46\u8a18\u200b by Leon.</li> </ul>"},{"location":"external-links/#spanish","title":"Spanish","text":"<ul> <li>Tutorial de ReadyAPI, \u00bfel mejor framework de Python? by Eduardo Zepeda.</li> </ul>"},{"location":"external-links/#podcasts","title":"Podcasts","text":""},{"location":"external-links/#english_1","title":"English","text":"<ul> <li> <p>Starting With ReadyAPI and Examining Python's Import System - Episode 72 by Real Python.</p> </li> <li> <p>Do you dare to press \".\"? - Episode 247 - Dan #6: SQLDev - use the same models for SQL and ReadyAPI by Python Bytes FM.</p> </li> <li> <p>Build The Next Generation Of Python Web Applications With ReadyAPI - Episode 259 - interview to Sebast\u00edan Ram\u00edrez (khulnasoft) by Podcast.<code>__init__</code>.</p> </li> <li> <p>ReadyAPI on PythonBytes by Python Bytes FM.</p> </li> </ul>"},{"location":"external-links/#talks","title":"Talks","text":""},{"location":"external-links/#english_2","title":"English","text":"<ul> <li> <p>PyCon AU 2023: Testing asynchronous applications with ReadyAPI and pytest by Jeny Sadadia.</p> </li> <li> <p>[VIRTUAL] Py.Amsterdam's flying Software Circus: Intro to ReadyAPI by KhulnaSoft Ltd (khulnasoft).</p> </li> <li> <p>PyConBY 2020: Serve ML models easily with ReadyAPI by KhulnaSoft Ltd (khulnasoft).</p> </li> <li> <p>PyCon UK 2019: ReadyAPI from the ground up by Chris Withers.</p> </li> </ul>"},{"location":"external-links/#taiwanese_1","title":"Taiwanese","text":"<ul> <li>PyCon TW 2024: \u200b\u5168\u65b9\u4f4d\u200b\u5f37\u5316\u200b Python \u200b\u670d\u52d9\u200b\u53ef\u89c0\u200b\u6e2c\u6027\u200b\uff1a\u200b\u4ee5\u200b ReadyAPI \u200b\u548c\u200b Grafana Stack \u200b\u70ba\u4f8b\u200b by Blueswen.</li> </ul>"},{"location":"external-links/#github-repositories","title":"GitHub Repositories","text":"<p>Most starred GitHub repositories with the topic <code>readyapi</code>:</p> <p>\u2605 32337 - full-stack-readyapi-template by @readyapi.</p> <p>\u2605 29833 - Hello-Python by @mouredev.</p> <p>\u2605 21544 - serve by @jina-ai.</p> <p>\u2605 15799 - sqldev by @readyapi.</p> <p>\u2605 15676 - HivisionIDPhotos by @Zeyi-Lin.</p> <p>\u2605 12183 - Douyin_TikTok_Download_API by @Evil0ctal.</p> <p>\u2605 11594 - readyapi-best-practices by @zhanymkanov.</p> <p>\u2605 9586 - awesome-readyapi by @mjhea0.</p> <p>\u2605 8804 - FastUI by @pydantic.</p> <p>\u2605 6688 - nonebot2 by @nonebot.</p> <p>\u2605 6502 - FileCodeBox by @vastsa.</p> <p>\u2605 5720 - serge by @serge-chat.</p> <p>\u2605 5515 - hatchet by @hatchet-dev.</p> <p>\u2605 5162 - readyapi-users by @readyapi-users.</p> <p>\u2605 5119 - polar by @polarsource.</p> <p>\u2605 4302 - chatgpt-web-share by @chatpire.</p> <p>\u2605 4244 - strawberry by @strawberry-graphql.</p> <p>\u2605 4178 - readyapi_mcp by @tadata-org.</p> <p>\u2605 4112 - atrilabs-engine by @Atri-Labs.</p> <p>\u2605 3985 - dynaconf by @dynaconf.</p> <p>\u2605 3918 - poem by @poem-web.</p> <p>\u2605 3287 - farfalle by @rashadphz.</p> <p>\u2605 3192 - readyapi-admin by @readyapi-admin.</p> <p>\u2605 3141 - datamodel-code-generator by @koxudaxi.</p> <p>\u2605 3116 - opyrator by @ml-tooling.</p> <p>\u2605 3088 - LitServe by @Lightning-AI.</p> <p>\u2605 3059 - logfire by @pydantic.</p> <p>\u2605 3052 - docarray by @docarray.</p> <p>\u2605 3025 - huma by @danielgtaylor.</p> <p>\u2605 2883 - readyapi-realworld-example-app by @nsidnev.</p> <p>\u2605 2756 - uvicorn-gunicorn-readyapi-docker by @khulnasoft.</p> <p>\u2605 2587 - tracecat by @TracecatHQ.</p> <p>\u2605 2502 - best-of-web-python by @ml-tooling.</p> <p>\u2605 2500 - Kokoro-ReadyAPI by @remsky.</p> <p>\u2605 2419 - RasaGPT by @paulpierre.</p> <p>\u2605 2350 - readyapi-react by @Buuntu.</p> <p>\u2605 2277 - nextpy by @dot-agent.</p> <p>\u2605 2273 - ReadyAPI-template by @s3rius.</p> <p>\u2605 2183 - 30-Days-of-Python by @codingforentrepreneurs.</p> <p>\u2605 2141 - sqladmin by @aminalaee.</p> <p>\u2605 2070 - langserve by @langchain-ai.</p> <p>\u2605 2063 - readyapi-utils by @readyapiutils.</p> <p>\u2605 2028 - solara by @widgetti.</p> <p>\u2605 1996 - supabase-py by @supabase.</p> <p>\u2605 1870 - mangum by @Kludex.</p> <p>\u2605 1827 - python-week-2022 by @rochacbruno.</p> <p>\u2605 1763 - SurfSense by @MODSetter.</p> <p>\u2605 1743 - manage-readyapi by @ycd.</p> <p>\u2605 1741 - agentkit by @BCG-X-Official.</p> <p>\u2605 1730 - ormar by @collerek.</p> <p>\u2605 1631 - langchain-serve by @jina-ai.</p> <p>\u2605 1610 - termpair by @cs01.</p> <p>\u2605 1588 - piccolo by @piccolo-orm.</p> <p>\u2605 1587 - coronavirus-tracker-api by @ExpDev07.</p> <p>\u2605 1552 - readyapi-cache by @long2ice.</p> <p>\u2605 1536 - openapi-python-client by @openapi-generators.</p> <p>\u2605 1491 - readyapi-crudrouter by @awtkns.</p> <p>\u2605 1450 - slowapi by @laurentS.</p> <p>\u2605 1443 - awesome-readyapi-projects by @Kludex.</p> <p>\u2605 1387 - awesome-python-resources by @DjangoEx.</p> <p>\u2605 1341 - budgetml by @ebhy.</p> <p>\u2605 1331 - readyapi-pagination by @uriyyo.</p> <p>\u2605 1299 - readyapi-boilerplate by @teamhide.</p> <p>\u2605 1235 - readyapi-amis-admin by @amisadmin.</p> <p>\u2605 1222 - readyapi-tutorial by @liaogx.</p> <p>\u2605 1190 - vue-readyapi-admin by @mizhexiaoxiao.</p> <p>\u2605 1180 - readyapi-code-generator by @koxudaxi.</p> <p>\u2605 1166 - bolt-python by @slackapi.</p> <p>\u2605 1134 - readyapi_production_template by @zhanymkanov.</p> <p>\u2605 1127 - langchain-extract by @langchain-ai.</p> <p>\u2605 1115 - odmantic by @art049.</p> <p>\u2605 1112 - prometheus-readyapi-instrumentator by @trallnag.</p> <p>\u2605 1107 - bedrock-chat by @aws-samples.</p> <p>\u2605 1094 - readyapi-alembic-sqldev-async by @jonra1993.</p> <p>\u2605 1041 - restish by @rest-sh.</p> <p>\u2605 1036 - fastcrud by @igorbenav.</p> <p>\u2605 1022 - runhouse by @run-house.</p> <p>\u2605 997 - readyapi_best_architecture by @readyapi-practices.</p> <p>\u2605 990 - lanarky by @ajndkr.</p> <p>\u2605 990 - autollm by @viddexa.</p> <p>\u2605 932 - secure by @TypeError.</p> <p>\u2605 925 - langcorn by @msoedov.</p> <p>\u2605 925 - ReadyAPI-boilerplate by @igorbenav.</p> <p>\u2605 913 - authx by @yezz123.</p> <p>\u2605 907 - energy-forecasting by @iusztinpaul.</p> <p>\u2605 873 - titiler by @developmentseed.</p> <p>\u2605 850 - httpdbg by @cle-b.</p> <p>\u2605 844 - marker-api by @adithya-s-k.</p> <p>\u2605 842 - ludic by @getludic.</p> <p>\u2605 805 - flock by @Onelevenvy.</p> <p>\u2605 797 - readyapi-observability by @blueswen.</p> <p>\u2605 786 - readyapi-do-zero by @dunossauro.</p> <p>\u2605 781 - readyapi-mail by @sabuhish.</p> <p>\u2605 764 - starlette-admin by @jowilf.</p> <p>\u2605 759 - lccn_predictor by @baoliay2008.</p> <p>\u2605 741 - KonomiTV by @tsukumijima.</p> <p>\u2605 734 - ReadyAPI-Backend-Template by @Aeternalis-Ingenium.</p> <p>\u2605 731 - learn-generative-ai by @panaverse.</p> <p>\u2605 730 - annotated-py-projects by @hhstore.</p>"},{"location":"newsletter/","title":"ReadyAPI and friends newsletter","text":""},{"location":"management-tasks/","title":"Repository Management Tasks","text":"<p>These are the tasks that can be performed to manage the ReadyAPI repository by team members.</p> <p>Tip</p> <p>This section is useful only to a handful of people, team members with permissions to manage the repository. You can probably skip it. \ud83d\ude09</p> <p>...so, you are a team member of ReadyAPI? Wow, you are so cool! \ud83d\ude0e</p> <p>You can help with everything on Help ReadyAPI - Get Help the same ways as external contributors. But additionally, there are some tasks that only you (as part of the team) can perform.</p> <p>Here are the general instructions for the tasks you can perform.</p> <p>Thanks a lot for your help. \ud83d\ude47</p>"},{"location":"management-tasks/#be-nice","title":"Be Nice","text":"<p>First of all, be nice. \ud83d\ude0a</p> <p>You probably are super nice if you were added to the team, but it's worth mentioning it. \ud83e\udd13</p>"},{"location":"management-tasks/#when-things-are-difficult","title":"When Things are Difficult","text":"<p>When things are great, everything is easier, so that doesn't need much instructions. But when things are difficult, here are some guidelines.</p> <p>Try to find the good side. In general, if people are not being unfriendly, try to thank their effort and interest, even if you disagree with the main subject (discussion, PR), just thank them for being interested in the project, or for having dedicated some time to try to do something.</p> <p>It's difficult to convey emotion in text, use emojis to help. \ud83d\ude05</p> <p>In discussions and PRs, in many cases, people bring their frustration and show it without filter, in many cases exaggerating, complaining, being entitled, etc. That's really not nice, and when it happens, it lowers our priority to solve their problems. But still, try to breath, and be gentle with your answers.</p> <p>Try to avoid using bitter sarcasm or potentially passive-aggressive comments. If something is wrong, it's better to be direct (try to be gentle) than sarcastic.</p> <p>Try to be as specific and objective as possible, avoid generalizations.</p> <p>For conversations that are more difficult, for example to reject a PR, you can ask me (@khulnasoft) to handle it directly.</p>"},{"location":"management-tasks/#edit-pr-titles","title":"Edit PR Titles","text":"<ul> <li>Edit the PR title to start with an emoji from gitmoji.<ul> <li>Use the emoji character, not the GitHub code. So, use <code>\ud83d\udc1b</code> instead of <code>:bug:</code>. This is so that it shows up correctly outside of GitHub, for example in the release notes.</li> <li>For translations use the <code>\ud83c\udf10</code> emoji (\"globe with meridians\").</li> </ul> </li> <li>Start the title with a verb. For example <code>Add</code>, <code>Refactor</code>, <code>Fix</code>, etc. This way the title will say the action that the PR does. Like <code>Add support for teleporting</code>, instead of <code>Teleporting wasn't working, so this PR fixes it</code>.</li> <li>Edit the text of the PR title to start in \"imperative\", like giving an order. So, instead of <code>Adding support for teleporting</code> use <code>Add support for teleporting</code>.</li> <li>Try to make the title descriptive about what it achieves. If it's a feature, try to describe it, for example <code>Add support for teleporting</code> instead of <code>Create TeleportAdapter class</code>.</li> <li>Do not finish the title with a period (<code>.</code>).</li> <li>When the PR is for a translation, start with the <code>\ud83c\udf10</code> and then <code>Add {language} translation for</code> and then the translated file path. For example:</li> </ul> <pre><code>\ud83c\udf10 Add Spanish translation for `docs/es/docs/teleporting.md`\n</code></pre> <p>Once the PR is merged, a GitHub Action (latest-changes) will use the PR title to update the latest changes automatically.</p> <p>So, having a nice PR title will not only look nice in GitHub, but also in the release notes. \ud83d\udcdd</p>"},{"location":"management-tasks/#add-labels-to-prs","title":"Add Labels to PRs","text":"<p>The same GitHub Action latest-changes uses one label in the PR to decide the section in the release notes to put this PR in.</p> <p>Make sure you use a supported label from the latest-changes list of labels:</p> <ul> <li><code>breaking</code>: Breaking Changes<ul> <li>Existing code will break if they update the version without changing their code. This rarely happens, so this label is not frequently used.</li> </ul> </li> <li><code>security</code>: Security Fixes<ul> <li>This is for security fixes, like vulnerabilities. It would almost never be used.</li> </ul> </li> <li><code>feature</code>: Features<ul> <li>New features, adding support for things that didn't exist before.</li> </ul> </li> <li><code>bug</code>: Fixes<ul> <li>Something that was supported didn't work, and this fixes it. There are many PRs that claim to be bug fixes because the user is doing something in an unexpected way that is not supported, but they considered it what should be supported by default. Many of these are actually features or refactors. But in some cases there's an actual bug.</li> </ul> </li> <li><code>refactor</code>: Refactors<ul> <li>This is normally for changes to the internal code that don't change the behavior. Normally it improves maintainability, or enables future features, etc.</li> </ul> </li> <li><code>upgrade</code>: Upgrades<ul> <li>This is for upgrades to direct dependencies from the project, or extra optional dependencies, normally in <code>pyproject.toml</code>. So, things that would affect final users, they would end up receiving the upgrade in their code base once they update. But this is not for upgrades to internal dependencies used for development, testing, docs, etc. Those internal dependencies, normally in <code>requirements.txt</code> files or GitHub Action versions should be marked as <code>internal</code>, not <code>upgrade</code>.</li> </ul> </li> <li><code>docs</code>: Docs<ul> <li>Changes in docs. This includes updating the docs, fixing typos. But it doesn't include changes to translations.</li> <li>You can normally quickly detect it by going to the \"Files changed\" tab in the PR and checking if the updated file(s) starts with <code>docs/en/docs</code>. The original version of the docs is always in English, so in <code>docs/en/docs</code>.</li> </ul> </li> <li><code>lang-all</code>: Translations<ul> <li>Use this for translations. You can normally quickly detect it by going to the \"Files changed\" tab in the PR and checking if the updated file(s) starts with <code>docs/{some lang}/docs</code> but not <code>docs/en/docs</code>. For example, <code>docs/es/docs</code>.</li> </ul> </li> <li><code>internal</code>: Internal<ul> <li>Use this for changes that only affect how the repo is managed. For example upgrades to internal dependencies, changes in GitHub Actions or scripts, etc.</li> </ul> </li> </ul> <p>Tip</p> <p>Some tools like Dependabot, will add some labels, like <code>dependencies</code>, but have in mind that this label is not used by the <code>latest-changes</code> GitHub Action, so it won't be used in the release notes. Please make sure one of the labels above is added.</p>"},{"location":"management-tasks/#add-labels-to-translation-prs","title":"Add Labels to Translation PRs","text":"<p>When there's a PR for a translation, apart from adding the <code>lang-all</code> label, also add a label for the language.</p> <p>There will be a label for each language using the language code, like <code>lang-{lang code}</code>, for example, <code>lang-es</code> for Spanish, <code>lang-fr</code> for French, etc.</p> <ul> <li>Add the specific language label.</li> <li>Add the label <code>awaiting-review</code>.</li> </ul> <p>The label <code>awaiting-review</code> is special, only used for translations. A GitHub Action will detect it, then it will read the language label, and it will update the GitHub Discussions managing the translations for that language to notify people that there's a new translation to review.</p> <p>Once a native speaker comes, reviews the PR, and approves it, the GitHub Action will come and remove the <code>awaiting-review</code> label, and add the <code>approved-1</code> label.</p> <p>This way, we can notice when there are new translations ready, because they have the <code>approved-1</code> label.</p>"},{"location":"management-tasks/#merge-translation-prs","title":"Merge Translation PRs","text":"<p>For Spanish, as I'm a native speaker and it's a language close to me, I will give it a final review myself and in most cases tweak the PR a bit before merging it.</p> <p>For the other languages, confirm that:</p> <ul> <li>The title is correct following the instructions above.</li> <li>It has the labels <code>lang-all</code> and <code>lang-{lang code}</code>.</li> <li>The PR changes only one Markdown file adding a translation.<ul> <li>Or in some cases, at most two files, if they are small, for the same language, and people reviewed them.</li> <li>If it's the first translation for that language, it will have additional <code>mkdocs.yml</code> files, for those cases follow the instructions below.</li> </ul> </li> <li>The PR doesn't add any additional or extraneous files.</li> <li>The translation seems to have a similar structure as the original English file.</li> <li>The translation doesn't seem to change the original content, for example with obvious additional documentation sections.</li> <li>The translation doesn't use different Markdown structures, for example adding HTML tags when the original didn't have them.</li> <li>The \"admonition\" sections, like <code>tip</code>, <code>info</code>, etc. are not changed or translated. For example:</li> </ul> <pre><code>/// tip\n\nThis is a tip.\n\n///\n</code></pre> <p>looks like this:</p> <p>Tip</p> <p>This is a tip.</p> <p>...it could be translated as:</p> <pre><code>/// tip\n\nEsto es un consejo.\n\n///\n</code></pre> <p>...but needs to keep the exact <code>tip</code> keyword. If it was translated to <code>consejo</code>, like:</p> <pre><code>/// consejo\n\nEsto es un consejo.\n\n///\n</code></pre> <p>it would change the style to the default one, it would look like:</p> <p>/// consejo</p> <p>Esto es un consejo.</p> <p>///</p> <p>Those don't have to be translated, but if they are, they need to be written as:</p> <pre><code>/// tip | consejo\n\nEsto es un consejo.\n\n///\n</code></pre> <p>Which looks like:</p> <p>consejo</p> <p>Esto es un consejo.</p>"},{"location":"management-tasks/#first-translation-pr","title":"First Translation PR","text":"<p>When there's a first translation for a language, it will have a <code>docs/{lang code}/docs/index.md</code> translated file and a <code>docs/{lang code}/mkdocs.yml</code>.</p> <p>For example, for Bosnian, it would be:</p> <ul> <li><code>docs/bs/docs/index.md</code></li> <li><code>docs/bs/mkdocs.yml</code></li> </ul> <p>The <code>mkdocs.yml</code> file will have only the following content:</p> <pre><code>INHERIT: ../en/mkdocs.yml\n</code></pre> <p>The language code would normally be in the ISO 639-1 list of language codes.</p> <p>In any case, the language code should be in the file docs/language_names.yml.</p> <p>There won't be yet a label for the language code, for example, if it was Bosnian, there wouldn't be a <code>lang-bs</code>. Before creating the label and adding it to the PR, create the GitHub Discussion:</p> <ul> <li>Go to the Translations GitHub Discussions</li> <li>Create a new discussion with the title <code>Bosnian Translations</code> (or the language name in English)</li> <li>A description of:</li> </ul> <pre><code>## Bosnian translations\n\nThis is the issue to track translations of the docs to Bosnian. \ud83d\ude80\n\nHere are the [PRs to review with the label `lang-bs`](https://github.com/readyapi/readyapi/pulls?q=is%3Apr+is%3Aopen+sort%3Aupdated-desc+label%3Alang-bs+label%3A%22awaiting-review%22). \ud83e\udd13\n</code></pre> <p>Update \"Bosnian\" with the new language.</p> <p>And update the search link to point to the new language label that will be created, like <code>lang-bs</code>.</p> <p>Create and add the label to that new Discussion just created, like <code>lang-bs</code>.</p> <p>Then go back to the PR, and add the label, like <code>lang-bs</code>, and <code>lang-all</code> and <code>awaiting-review</code>.</p> <p>Now the GitHub action will automatically detect the label <code>lang-bs</code> and will post in that Discussion that this PR is waiting to be reviewed.</p>"},{"location":"management-tasks/#review-prs","title":"Review PRs","text":"<p>If a PR doesn't explain what it does or why, ask for more information.</p> <p>A PR should have a specific use case that it is solving.</p> <ul> <li>If the PR is for a feature, it should have docs.<ul> <li>Unless it's a feature we want to discourage, like support for a corner case that we don't want users to use.</li> </ul> </li> <li>The docs should include a source example file, not write Python directly in Markdown.</li> <li>If the source example(s) file can have different syntax for Python 3.8, 3.9, 3.10, there should be different versions of the file, and they should be shown in tabs in the docs.</li> <li>There should be tests testing the source example.</li> <li>Before the PR is applied, the new tests should fail.</li> <li>After applying the PR, the new tests should pass.</li> <li>Coverage should stay at 100%.</li> <li>If you see the PR makes sense, or we discussed it and considered it should be accepted, you can add commits on top of the PR to tweak it, to add docs, tests, format, refactor, remove extra files, etc.</li> <li>Feel free to comment in the PR to ask for more information, to suggest changes, etc.</li> <li>Once you think the PR is ready, move it in the internal GitHub project for me to review it.</li> </ul>"},{"location":"management-tasks/#readyapi-people-prs","title":"ReadyAPI People PRs","text":"<p>Every month, a GitHub Action updates the ReadyAPI People data. Those PRs look like this one: \ud83d\udc65 Update ReadyAPI People.</p> <p>If the tests are passing, you can merge it right away.</p>"},{"location":"management-tasks/#external-links-prs","title":"External Links PRs","text":"<p>When people add external links they edit this file external_links.yml.</p> <ul> <li>Make sure the new link is in the correct category (e.g. \"Podcasts\") and language (e.g. \"Japanese\").</li> <li>A new link should be at the top of its list.</li> <li>The link URL should work (it should not return a 404).</li> <li>The content of the link should be about ReadyAPI.</li> <li>The new addition should have these fields:<ul> <li><code>author</code>: The name of the author.</li> <li><code>link</code>: The URL with the content.</li> <li><code>title</code>: The title of the link (the title of the article, podcast, etc).</li> </ul> </li> </ul> <p>After checking all these things and ensuring the PR has the right labels, you can merge it.</p>"},{"location":"management-tasks/#dependabot-prs","title":"Dependabot PRs","text":"<p>Dependabot will create PRs to update dependencies for several things, and those PRs all look similar, but some are way more delicate than others.</p> <ul> <li>If the PR is for a direct dependency, so, Dependabot is modifying <code>pyproject.toml</code>, don't merge it. \ud83d\ude31 Let me check it first. There's a good chance that some additional tweaks or updates are needed.</li> <li>If the PR updates one of the internal dependencies, for example it's modifying <code>requirements.txt</code> files, or GitHub Action versions, if the tests are passing, the release notes (shown in a summary in the PR) don't show any obvious potential breaking change, you can merge it. \ud83d\ude0e</li> </ul>"},{"location":"management-tasks/#mark-github-discussions-answers","title":"Mark GitHub Discussions Answers","text":"<p>When a question in GitHub Discussions has been answered, mark the answer by clicking \"Mark as answer\".</p> <p>You can filter discussions by <code>Questions</code> that are <code>Unanswered</code>.</p>"},{"location":"management/","title":"Repository Management","text":"<p>Here's a short description of how the ReadyAPI repository is managed and maintained.</p>"},{"location":"management/#owner","title":"Owner","text":"<p>I, @khulnasoft, am the creator and owner of the ReadyAPI repository. \ud83e\udd13</p> <p>I normally give the final review to each PR before merging them. I make the final decisions on the project, I'm the BDFL. \ud83d\ude05</p>"},{"location":"management/#team","title":"Team","text":"<p>There's a team of people that help manage and maintain the project. \ud83d\ude0e</p> <p>They have different levels of permissions and specific instructions.</p> <p>Some of the tasks they can perform include:</p> <ul> <li>Adding labels to PRs.</li> <li>Editing PR titles.</li> <li>Adding commits on top of PRs to tweak them.</li> <li>Mark answers in GitHub Discussions questions, etc.</li> <li>Merge some specific types of PRs.</li> </ul> <p>You can see the current team members in ReadyAPI People - Team.</p> <p>Joining the team is by invitation only, and I could update or remove permissions, instructions, or membership.</p>"},{"location":"management/#readyapi-experts","title":"ReadyAPI Experts","text":"<p>The people that help others the most in GitHub Discussions can become ReadyAPI Experts.</p> <p>This is normally the best way to contribute to the project.</p>"},{"location":"management/#external-contributions","title":"External Contributions","text":"<p>External contributions are very welcome and appreciated, including answering questions, submitting PRs, etc. \ud83d\ude47\u200d\u2642\ufe0f</p> <p>There are many ways to help maintain ReadyAPI.</p>"},{"location":"release-notes/","title":"Release Notes","text":""},{"location":"release-notes/#latest-changes","title":"Latest Changes","text":""},{"location":"release-notes/#upgrades","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Update ReDoc to version 2.x. PR #9700 by @joakimnordling.</li> </ul>"},{"location":"release-notes/#docs","title":"Docs","text":"<ul> <li>\ud83c\udf71 Update Drawio diagrams SVGs, single file per diagram, sans-serif font. PR #13706 by @khulnasoft.</li> <li>\ud83d\udcdd Update docs for \"Help ReadyAPI\", simplify and reduce \"sponsor\" section. PR #13670 by @khulnasoft.</li> <li>\ud83d\udcdd Remove unnecessary bullet from docs. PR #13641 by @Adamowoc.</li> <li>\u270f\ufe0f Fix syntax error in <code>docs/en/docs/tutorial/handling-errors.md</code>. PR #13623 by @gsheni.</li> <li>\ud83d\udcdd Fix typo in documentation. PR #13599 by @Taoup.</li> <li>\ud83d\udcdd Fix liblab client generation doc link. PR #13571 by @EFord36.</li> <li>\u270f\ufe0f Fix talk information typo. PR #13544 by @blueswen.</li> <li>\ud83d\udcdd Add External Link: Taiwanese talk on ReadyAPI with observability . PR #13527 by @blueswen.</li> </ul>"},{"location":"release-notes/#translations","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/header-param-models.md</code>. PR #13526 by @minaton-ru.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/index.md</code>. PR #13374 by @Zhongheng-Cheng.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/deployment/manually.md</code>. PR #13324 by @Zhongheng-Cheng.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/deployment/server-workers.md</code>. PR #13292 by @Zhongheng-Cheng.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/first-steps.md</code>. PR #13348 by @Zhongheng-Cheng.</li> </ul>"},{"location":"release-notes/#internal","title":"Internal","text":"<ul> <li>\u2b06 Bump ruff from 0.11.2 to 0.12.7. PR #229 by @dependabot[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #228 by @pre-commit-ci[bot].</li> <li>\u2b06 Bump actions/download-artifact from 4 to 5. PR #230 by @dependabot[bot].</li> <li>\u2b06 Bump actions/checkout from 4 to 5. PR #231 by @dependabot[bot].</li> <li>\ud83d\udc77 Add CI to translate with LLMs. PR #233 by @khulnasoft-bot.</li> <li>\u2692\ufe0f Update translate script, update prompt to minimize generated diff. PR #232 by @khulnasoft-bot.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #221 by @pre-commit-ci[bot].</li> <li>Bump tj-actions/changed-files from 44 to 46 in /.github/workflows in the github_actions group across 1 directory. PR #227 by @dependabot[bot].</li> <li>Pre commit. PR #220 by @gitworkflows.</li> <li>\ud83d\udc77 Add custom pre-commit. PR #219 by @gitworkflows.</li> <li>\ud83d\udd27 Update sponsors: add Subtotal. PR #13701 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors: remove deepset / Haystack. PR #13700 by @khulnasoft.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #13688 by @pre-commit-ci[bot].</li> <li>\ud83d\udc65 Update ReadyAPI People - Experts. PR #13671 by @khulnasoft.</li> <li>\u2b06 Bump cligenius from 0.12.5 to 0.15.3. PR #13666 by @dependabot[bot].</li> <li>\u2b06 Bump sqldev from 0.0.23 to 0.0.24. PR #13665 by @dependabot[bot].</li> <li>\ud83d\udd27 Update Sponsors: Zuplo logo and alt text. PR #13645 by @martyndavies.</li> <li>\ud83d\udc65 Update ReadyAPI GitHub topic repositories. PR #13667 by @khulnasoft.</li> <li>\ud83d\udd27 Update links for LinkedIn and bottom. PR #13669 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors: remove Bump.sh and Coherence. PR #13668 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People - Sponsors. PR #13664 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People - Contributors and Translators. PR #13662 by @khulnasoft.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #13656 by @pre-commit-ci[bot].</li> <li>\u2705 Use <code>inline-snapshot</code> to support different Pydantic versions in the test suite. PR #12534 by @15r10nk.</li> <li>\u2b06 Bump astral-sh/setup-uv from 5 to 6. PR #13648 by @dependabot[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #13634 by @pre-commit-ci[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #13619 by @pre-commit-ci[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #13594 by @pre-commit-ci[bot].</li> <li>\ud83d\udc65 Update ReadyAPI People - Experts. PR #13568 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI GitHub topic repositories. PR #13565 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People - Sponsors. PR #13559 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People - Contributors and Translators. PR #13558 by @khulnasoft.</li> <li>\u2b06 Bump dirty-equals from 0.8.0 to 0.9.0. PR #13561 by @dependabot[bot].</li> <li>\ud83d\udd27 Clean up <code>docs/en/mkdocs.yml</code> configuration file. PR #13542 by @svlandeg.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12986 by @pre-commit-ci[bot].</li> </ul>"},{"location":"release-notes/#011512","title":"0.115.12","text":""},{"location":"release-notes/#fixes","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix <code>convert_underscores=False</code> for header Pydantic models. PR #13515 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_1","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update <code>docs/en/docs/tutorial/middleware.md</code>. PR #13444 by @Rishat-F.</li> <li>\ud83d\udc65 Update ReadyAPI People - Experts. PR #13493 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_1","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/metadata.md</code> page. PR #13459 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/response-status-code.md</code> page. PR #13462 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/cookie-param-models.md</code> page. PR #13460 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/header-param-models.md</code> page. PR #13461 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/virtual-environments.md</code>. PR #13304 by @k94-ishi.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/security/oauth2-jwt.md</code>. PR #13333 by @yes0ng.</li> <li>\ud83c\udf10 Add Vietnamese translation for <code>docs/vi/docs/deployment/cloud.md</code>. PR #13407 by @ptt3199.</li> </ul>"},{"location":"release-notes/#internal_1","title":"Internal","text":"<ul> <li>\u2b06 Bump pydantic-ai from 0.0.15 to 0.0.30. PR #13438 by @dependabot[bot].</li> <li>\u2b06 Bump sqldev from 0.0.22 to 0.0.23. PR #13437 by @dependabot[bot].</li> <li>\u2b06 Bump black from 24.10.0 to 25.1.0. PR #13436 by @dependabot[bot].</li> <li>\u2b06 Bump ruff to 0.9.4. PR #13299 by @dependabot[bot].</li> <li>\ud83d\udd27 Update sponsors: pause TestDriven. PR #13446 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#011511","title":"0.115.11","text":""},{"location":"release-notes/#fixes_1","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Add docs examples and tests (support) for <code>Annotated</code> custom validations, like <code>AfterValidator</code>, revert #13440. PR #13442 by @khulnasoft.<ul> <li>New docs: Query Parameters and String Validations - Custom Validation.</li> </ul> </li> </ul>"},{"location":"release-notes/#translations_2","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for  <code>docs/ru/docs/tutorial/middleware.md</code>. PR #13412 by @alv2017.</li> </ul>"},{"location":"release-notes/#internal_2","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI GitHub topic repositories. PR #13439 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People - Contributors and Translators. PR #13432 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People - Sponsors. PR #13433 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#011510","title":"0.115.10","text":""},{"location":"release-notes/#fixes_2","title":"Fixes","text":"<ul> <li>\u267b\ufe0f Update internal annotation usage for compatibility with Pydantic 2.11. PR #13314 by @Viicos.</li> </ul>"},{"location":"release-notes/#upgrades_1","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Bump Starlette to allow up to 0.46.0: <code>&gt;=0.40.0,&lt;0.47.0</code>. PR #13426 by @musicinmybrain.</li> </ul>"},{"location":"release-notes/#translations_3","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/debugging.md</code>. PR #13370 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/query-params.md</code>. PR #13362 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/path-params.md</code>. PR #13354 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/cookie-param-models.md</code>. PR #13330 by @k94-ishi.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/body-multiple-params.md</code>. PR #13408 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/query-param-models.md</code>. PR #13323 by @k94-ishi.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/body-nested-models.md</code>. PR #13409 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Vietnamese translation for <code>docs/vi/docs/deployment/versions.md</code>. PR #13406 by @ptt3199.</li> <li>\ud83c\udf10 Add Vietnamese translation for <code>docs/vi/docs/deployment/index.md</code>. PR #13405 by @ptt3199.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/request-forms.md</code>. PR #13383 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/testing.md</code>. PR #13371 by @valentinDruzhinin.</li> </ul>"},{"location":"release-notes/#01159","title":"0.115.9","text":""},{"location":"release-notes/#fixes_3","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Ensure that <code>HTTPDigest</code> only raises an exception when <code>auto_error is True</code>. PR #2939 by @arthurio.</li> </ul>"},{"location":"release-notes/#refactors","title":"Refactors","text":"<ul> <li>\u2705 Simplify tests for <code>query_params_str_validations</code>. PR #13218 by @alv2017.</li> <li>\u2705 Simplify tests for <code>app_testing</code>. PR #13220 by @alv2017.</li> <li>\u2705 Simplify tests for <code>dependency_testing</code>. PR #13223 by @alv2017.</li> </ul>"},{"location":"release-notes/#docs_2","title":"Docs","text":"<ul> <li>\ud83c\udf71 Update sponsors: CodeRabbit logo. PR #13424 by @khulnasoft.</li> <li>\ud83e\ude7a Unify the badges across all tutorial translations. PR #13329 by @svlandeg.</li> <li>\ud83d\udcdd Fix typos in virtual environments documentation. PR #13396 by @bullet-ant.</li> <li>\ud83d\udc1b Fix issue with Swagger theme change example in the official tutorial. PR #13289 by @Zerohertz.</li> <li>\ud83d\udcdd Add more precise description of HTTP status code range in docs. PR #13347 by @DanielYang59.</li> <li>\ud83d\udd25 Remove manual type annotations in JWT tutorial to avoid typing expectations (JWT doesn't provide more types). PR #13378 by @khulnasoft.</li> <li>\ud83d\udcdd Update docs for Query Params and String Validations, remove obsolete Ellipsis docs (<code>...</code>). PR #13377 by @khulnasoft.</li> <li>\u270f\ufe0f Remove duplicate title in docs <code>body-multiple-params</code>. PR #13345 by @DanielYang59.</li> <li>\ud83d\udcdd Fix test badge. PR #13313 by @esadek.</li> </ul>"},{"location":"release-notes/#translations_4","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/header-params.md</code>. PR #13381 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/request-files.md</code>. PR #13395 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/request-form-models.md</code>. PR #13384 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/request-forms-and-files.md</code>. PR #13386 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Update Korean translation for <code>docs/ko/docs/help-readyapi.md</code>. PR #13262 by @Zerohertz.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/custom-response.md</code>. PR #13265 by @11kkw.</li> <li>\ud83c\udf10 Update Korean translation for <code>docs/ko/docs/tutorial/security/simple-oauth2.md</code>. PR #13335 by @yes0ng.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/advanced/response-cookies.md</code>. PR #13327 by @Stepakinoyan.</li> <li>\ud83c\udf10  Add Vietnamese translation for <code>docs/vi/docs/tutorial/static-files.md</code>. PR #11291 by @ptt3199.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/dependencies/dependencies-with-yield.md</code>. PR #13257 by @11kkw.</li> <li>\ud83c\udf10 Add Vietnamese translation for <code>docs/vi/docs/virtual-environments.md</code>. PR #13282 by @ptt3199.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/static-files.md</code>. PR #13285 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Vietnamese translation for <code>docs/vi/docs/environment-variables.md</code>. PR #13287 by @ptt3199.</li> <li>\ud83c\udf10 Add Vietnamese translation for <code>docs/vi/docs/readyapi-cli.md</code>. PR #13294 by @ptt3199.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/features.md</code>. PR #13308 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/learn/index.md</code>. PR #13306 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Update Portuguese Translation for <code>docs/pt/docs/deployment/https.md</code>. PR #13317 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Update Portuguese Translation for <code>docs/pt/docs/index.md</code>. PR #13328 by @ceb10n.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/advanced/websockets.md</code>. PR #13279 by @Rishat-F.</li> </ul>"},{"location":"release-notes/#internal_3","title":"Internal","text":"<ul> <li>\u2705 Fix a minor bug in the test <code>tests/test_modules_same_name_body/test_main.py</code>. PR #13411 by @alv2017.</li> <li>\ud83d\udc77 Use <code>wrangler-action</code> v3. PR #13415 by @joakimnordling.</li> <li>\ud83d\udd27 Update sponsors: add CodeRabbit. PR #13402 by @khulnasoft.</li> <li>\ud83d\udd27 Update team: Add Ludovico. PR #13390 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors: Add LambdaTest. PR #13389 by @khulnasoft.</li> <li>\u2b06 Bump cloudflare/wrangler-action from 3.13 to 3.14. PR #13350 by @dependabot[bot].</li> <li>\u2b06 Bump mkdocs-material from 9.5.18 to 9.6.1. PR #13301 by @dependabot[bot].</li> <li>\u2b06 Bump pillow from 11.0.0 to 11.1.0. PR #13300 by @dependabot[bot].</li> <li>\ud83d\udc65 Update ReadyAPI People - Sponsors. PR #13295 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People - Experts. PR #13303 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI GitHub topic repositories. PR #13302 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People - Contributors and Translators. PR #13293 by @khulnasoft.</li> <li>\u2b06 Bump inline-snapshot from 0.18.1 to 0.19.3. PR #13298 by @dependabot[bot].</li> <li>\ud83d\udd27 Update sponsors, add Permit. PR #13288 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01158","title":"0.115.8","text":""},{"location":"release-notes/#fixes_4","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix <code>OAuth2PasswordRequestForm</code> and <code>OAuth2PasswordRequestFormStrict</code> fixed <code>grant_type</code> \"password\" RegEx. PR #9783 by @skarfie123.</li> </ul>"},{"location":"release-notes/#refactors_1","title":"Refactors","text":"<ul> <li>\u2705 Simplify tests for body_multiple_params . PR #13237 by @alejsdev.</li> <li>\u267b\ufe0f Move duplicated code portion to a static method in the <code>APIKeyBase</code> super class. PR #3142 by @ShahriyarR.</li> <li>\u2705 Simplify tests for request_files. PR #13182 by @alejsdev.</li> </ul>"},{"location":"release-notes/#docs_3","title":"Docs","text":"<ul> <li>\ud83d\udcdd Change the word \"unwrap\" to \"unpack\" in <code>docs/en/docs/tutorial/extra-models.md</code>. PR #13061 by @timothy-jeong.</li> <li>\ud83d\udcdd Update Request Body's <code>tutorial002</code> to deal with <code>tax=0</code> case. PR #13230 by @togogh.</li> <li>\ud83d\udc65 Update ReadyAPI People - Experts. PR #13269 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_5","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/environment-variables.md</code>. PR #13226 by @k94-ishi.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/advanced/async-tests.md</code>. PR #13227 by @Rishat-F.</li> <li>\ud83c\udf10 Update Russian translation for <code>docs/ru/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md</code>. PR #13252 by @Rishat-F.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/bigger-applications.md</code>. PR #13154 by @alv2017.</li> </ul>"},{"location":"release-notes/#internal_4","title":"Internal","text":"<ul> <li>\u2b06\ufe0f Add support for Python 3.13. PR #13274 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade AnyIO max version for tests, new range: <code>&gt;=3.2.1,&lt;5.0.0</code>. PR #13273 by @khulnasoft.</li> <li>\ud83d\udd27 Update Sponsors badges. PR #13271 by @khulnasoft.</li> <li>\u267b\ufe0f Fix <code>notify_translations.py</code> empty env var handling for PR label events vs workflow_dispatch. PR #13272 by @khulnasoft.</li> <li>\u267b\ufe0f Refactor and move <code>scripts/notify_translations.py</code>, no need for a custom GitHub Action. PR #13270 by @khulnasoft.</li> <li>\ud83d\udd28 Update ReadyAPI People Experts script, refactor and optimize data fetching to handle rate limits. PR #13267 by @khulnasoft.</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.12.3 to 1.12.4. PR #13251 by @dependabot[bot].</li> </ul>"},{"location":"release-notes/#01157","title":"0.115.7","text":""},{"location":"release-notes/#upgrades_2","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade <code>python-multipart</code> to &gt;=0.0.18. PR #13219 by @DanielKusyDev.</li> <li>\u2b06\ufe0f Bump Starlette to allow up to 0.45.0: <code>&gt;=0.40.0,&lt;0.46.0</code>. PR #13117 by @Kludex.</li> <li>\u2b06\ufe0f Upgrade <code>jinja2</code> to &gt;=3.1.5. PR #13194 by @DanielKusyDev.</li> </ul>"},{"location":"release-notes/#refactors_2","title":"Refactors","text":"<ul> <li>\u2705 Simplify tests for websockets. PR #13202 by @alejsdev.</li> <li>\u2705 Simplify tests for request_form_models . PR #13183 by @alejsdev.</li> <li>\u2705 Simplify tests for separate_openapi_schemas. PR #13201 by @alejsdev.</li> <li>\u2705 Simplify tests for security. PR #13200 by @alejsdev.</li> <li>\u2705 Simplify tests for schema_extra_example. PR #13197 by @alejsdev.</li> <li>\u2705 Simplify tests for request_model. PR #13195 by @alejsdev.</li> <li>\u2705 Simplify tests for request_forms_and_files. PR #13185 by @alejsdev.</li> <li>\u2705 Simplify tests for request_forms. PR #13184 by @alejsdev.</li> <li>\u2705 Simplify tests for path_query_params. PR #13181 by @alejsdev.</li> <li>\u2705 Simplify tests for path_operation_configurations. PR #13180 by @alejsdev.</li> <li>\u2705 Simplify tests for header_params. PR #13179 by @alejsdev.</li> <li>\u2705 Simplify tests for extra_models. PR #13178 by @alejsdev.</li> <li>\u2705 Simplify tests for extra_data_types. PR #13177 by @alejsdev.</li> <li>\u2705 Simplify tests for cookie_params. PR #13176 by @alejsdev.</li> <li>\u2705 Simplify tests for dependencies. PR #13174 by @alejsdev.</li> <li>\u2705 Simplify tests for body_updates. PR #13172 by @alejsdev.</li> <li>\u2705 Simplify tests for body_nested_models. PR #13171 by @alejsdev.</li> <li>\u2705 Simplify tests for body_multiple_params. PR #13170 by @alejsdev.</li> <li>\u2705 Simplify tests for body_fields. PR #13169 by @alejsdev.</li> <li>\u2705 Simplify tests for body. PR #13168 by @alejsdev.</li> <li>\u2705 Simplify tests for bigger_applications. PR #13167 by @alejsdev.</li> <li>\u2705 Simplify tests for background_tasks. PR #13166 by @alejsdev.</li> <li>\u2705 Simplify tests for additional_status_codes. PR #13149 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_4","title":"Docs","text":"<ul> <li>\u270f\ufe0f Update Strawberry integration docs. PR #13155 by @kinuax.</li> <li>\ud83d\udd25 Remove unused Peewee tutorial files. PR #13158 by @alejsdev.</li> <li>\ud83d\udcdd Update image in body-nested-model docs. PR #11063 by @untilhamza.</li> <li>\ud83d\udcdd Update <code>readyapi-cli</code> UI examples in docs. PR #13107 by @Zhongheng-Cheng.</li> <li>\ud83d\udc77 Add new GitHub Action to update contributors, translators, and translation reviewers. PR #13136 by @khulnasoft.</li> <li>\u270f\ufe0f Fix typo in <code>docs/en/docs/virtual-environments.md</code>. PR #13124 by @khulnasoft.</li> <li>\u270f\ufe0f Fix error in <code>docs/en/docs/contributing.md</code>. PR #12899 by @kingsubin.</li> <li>\ud83d\udcdd Minor corrections in <code>docs/en/docs/tutorial/sql-databases.md</code>. PR #13081 by @alv2017.</li> <li>\ud83d\udcdd Update includes in <code>docs/ru/docs/tutorial/query-param-models.md</code>. PR #12994 by @alejsdev.</li> <li>\u270f\ufe0f Fix typo in README installation instructions. PR #13011 by @dave-hay.</li> <li>\ud83d\udcdd Update docs for <code>readyapi-cli</code>. PR #13031 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_6","title":"Translations","text":"<ul> <li>\ud83c\udf10 Update Portuguese Translation for <code>docs/pt/docs/tutorial/request-forms.md</code>. PR #13216 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Update Portuguese translation for <code>docs/pt/docs/advanced/settings.md</code>. PR #13209 by @ceb10n.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/security/oauth2-jwt.md</code>. PR #13205 by @ceb10n.</li> <li>\ud83c\udf10 Add Indonesian translation for <code>docs/id/docs/index.md</code>. PR #13191 by @gerry-sabar.</li> <li>\ud83c\udf10 Add Indonesian translation for <code>docs/id/docs/tutorial/static-files.md</code>. PR #13092 by @guspan-tanadi.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/security/get-current-user.md</code>. PR #13188 by @ceb10n.</li> <li>\ud83c\udf10 Remove Wrong Portuguese translations location for <code>docs/pt/docs/advanced/benchmarks.md</code>. PR #13187 by @ceb10n.</li> <li>\ud83c\udf10 Update Portuguese translations. PR #13156 by @nillvitor.</li> <li>\ud83c\udf10 Update Russian translation for <code>docs/ru/docs/tutorial/security/first-steps.md</code>. PR #13159 by @Yarous.</li> <li>\u270f\ufe0f Delete unnecessary backspace in <code>docs/ja/docs/tutorial/path-params-numeric-validations.md</code>. PR #12238 by @FakeDocument.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/readyapi-cli.md</code>. PR #13102 by @Zhongheng-Cheng.</li> <li>\ud83c\udf10 Add new Spanish translations for all docs with new LLM-assisted system using PydanticAI. PR #13122 by @khulnasoft.</li> <li>\ud83c\udf10 Update existing Spanish translations using the new LLM-assisted system using PydanticAI. PR #13118 by @khulnasoft.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/advanced/security/oauth2-scopes.md</code>. PR #13110 by @ChenPu2002.</li> <li>\ud83c\udf10 Add Indonesian translation for <code>docs/id/docs/tutorial/path-params.md</code>. PR #13086 by @gerry-sabar.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/sql-databases.md</code>. PR #13093 by @GeumBinLee.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/async.md</code>. PR #13095 by @Zhongheng-Cheng.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/openapi-webhooks.md</code>. PR #13091 by @Zhongheng-Cheng.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/async-tests.md</code>. PR #13074 by @Zhongheng-Cheng.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/readyapi-cli.md</code>. PR #13020 by @ykertytsky.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/events.md</code>. PR #12512 by @ZhibangYue.</li> <li>\ud83c\udf10 Add Russian translation for <code>/docs/ru/docs/tutorial/sql-databases.md</code>. PR #13079 by @alv2017.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/advanced/testing-dependencies.md</code>. PR #13066 by @Zhongheng-Cheng.</li> <li>\ud83c\udf10 Update Traditional Chinese translation for <code>docs/zh-hant/docs/tutorial/index.md</code>. PR #13075 by @codingjenny.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/sql-databases.md</code>. PR #13051 by @Zhongheng-Cheng.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/query-params-str-validations.md</code>. PR #12928 by @Vincy1230.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/header-param-models.md</code>. PR #13040 by @Zhongheng-Cheng.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/path-params.md</code>. PR #12926 by @Vincy1230.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/first-steps.md</code>. PR #12923 by @Vincy1230.</li> <li>\ud83c\udf10 Update Russian translation for <code>docs/ru/docs/deployment/docker.md</code>. PR #13048 by @anklav24.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/generate-clients.md</code>. PR #13030 by @vitumenezes.</li> <li>\ud83c\udf10 Add Indonesian translation for <code>docs/id/docs/tutorial/first-steps.md</code>. PR #13042 by @gerry-sabar.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/cookie-param-models.md</code>. PR #13038 by @Zhongheng-Cheng.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/request-form-models.md</code>. PR #13045 by @Zhongheng-Cheng.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/virtual-environments.md</code>. PR #13026 by @alv2017.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/testing.md</code>. PR #12968 by @jts8257.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/async-test.md</code>. PR #12918 by @icehongssii.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/security/oauth2-jwt.md</code>. PR #10601 by @AlertRED.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/security/simple-oauth2.md</code>. PR #10599 by @AlertRED.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/security/get-current-user.md</code>. PR #10594 by @AlertRED.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/features.md</code>. PR #12441 by @codingjenny.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/virtual-environments.md</code>. PR #12791 by @Vincy1230.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/templates.md</code>. PR #12726 by @Heumhub.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/readyapi-cli.md</code>. PR #13041 by @alv2017.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/cookie-param-models.md</code>. PR #13000 by @hard-coders.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/header-param-models.md</code>. PR #13001 by @hard-coders.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/request-form-models.md</code>. PR #13002 by @hard-coders.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/request-forms.md</code>. PR #13003 by @hard-coders.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/resources/index.md</code>. PR #13004 by @hard-coders.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/how-to/configure-swagger-ui.md</code>. PR #12898 by @nahyunkeem.</li> <li>\ud83c\udf10 Add Korean translation to <code>docs/ko/docs/advanced/additional-status-codes.md</code>. PR #12715 by @nahyunkeem.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/tutorial/first-steps.md</code>. PR #12467 by @codingjenny.</li> </ul>"},{"location":"release-notes/#internal_5","title":"Internal","text":"<ul> <li>\ud83d\udd27 Add Pydantic 2 trove classifier. PR #13199 by @johnthagen.</li> <li>\ud83d\udc65 Update ReadyAPI People - Sponsors. PR #13231 by @khulnasoft.</li> <li>\ud83d\udc77 Refactor ReadyAPI People Sponsors to use 2 tokens. PR #13228 by @khulnasoft.</li> <li>\ud83d\udc77 Update token for ReadyAPI People - Sponsors. PR #13225 by @khulnasoft.</li> <li>\ud83d\udc77 Add independent CI automation for ReadyAPI People - Sponsors. PR #13221 by @khulnasoft.</li> <li>\ud83d\udc77 Add retries to Smokeshow. PR #13151 by @khulnasoft.</li> <li>\ud83d\udd27 Update Speakeasy sponsor graphic. PR #13147 by @chailandau.</li> <li>\ud83d\udc65 Update ReadyAPI GitHub topic repositories. PR #13146 by @khulnasoft.</li> <li>\ud83d\udc77\u200d\u2640\ufe0f Add script for GitHub Topic Repositories and update External Links. PR #13135 by @alejsdev.</li> <li>\ud83d\udc65 Update ReadyAPI People - Contributors and Translators. PR #13145 by @khulnasoft.</li> <li>\u2b06 Bump markdown-include-variants from 0.0.3 to 0.0.4. PR #13129 by @dependabot[bot].</li> <li>\u2b06 Bump inline-snapshot from 0.14.0 to 0.18.1. PR #13132 by @dependabot[bot].</li> <li>\u2b06 Bump mkdocs-macros-plugin from 1.0.5 to 1.3.7. PR #13133 by @dependabot[bot].</li> <li>\ud83d\udd28 Add internal scripts to generate language translations with PydanticAI, include Spanish prompt. PR #13123 by @khulnasoft.</li> <li>\u2b06 Bump astral-sh/setup-uv from 4 to 5. PR #13096 by @dependabot[bot].</li> <li>\ud83d\udd27 Update sponsors: rename CryptAPI to BlockBee. PR #13078 by @khulnasoft.</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.12.2 to 1.12.3. PR #13055 by @dependabot[bot].</li> <li>\u2b06 Bump types-ujson from 5.7.0.1 to 5.10.0.20240515. PR #13018 by @dependabot[bot].</li> <li>\u2b06 Bump black from 24.3.0 to 24.10.0. PR #13014 by @dependabot[bot].</li> <li>\u2b06 Bump inline-snapshot from 0.13.0 to 0.14.0. PR #13017 by @dependabot[bot].</li> <li>\u2b06 Bump dirty-equals from 0.6.0 to 0.8.0. PR #13015 by @dependabot[bot].</li> <li>\u2b06 Bump cloudflare/wrangler-action from 3.12 to 3.13. PR #12996 by @dependabot[bot].</li> <li>\u2b06 Bump astral-sh/setup-uv from 3 to 4. PR #12982 by @dependabot[bot].</li> <li>\ud83d\udd27 Remove duplicate actions/checkout in <code>notify-translations.yml</code>. PR #12915 by @tinyboxvk.</li> <li>\ud83d\udd27 Update team members. PR #13033 by @khulnasoft.</li> <li>\ud83d\udcdd Update sponsors: remove Codacy. PR #13032 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01156","title":"0.115.6","text":""},{"location":"release-notes/#fixes_5","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Preserve traceback when an exception is raised in sync dependency with <code>yield</code>. PR #5823 by @sombek.</li> </ul>"},{"location":"release-notes/#refactors_3","title":"Refactors","text":"<ul> <li>\u267b\ufe0f Update tests and internals for compatibility with Pydantic &gt;=2.10. PR #12971 by @tamird.</li> </ul>"},{"location":"release-notes/#docs_5","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update includes format in docs with an automated script. PR #12950 by @khulnasoft.</li> <li>\ud83d\udcdd Update includes for <code>docs/de/docs/advanced/using-request-directly.md</code>. PR #12685 by @alissadb.</li> <li>\ud83d\udcdd Update includes for <code>docs/de/docs/how-to/conditional-openapi.md</code>. PR #12689 by @alissadb.</li> </ul>"},{"location":"release-notes/#translations_7","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/async.md</code>. PR #12990 by @ILoveSorasakiHina.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/tutorial/query-param-models.md</code>. PR #12932 by @Vincy1230.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/testing-dependencies.md</code>. PR #12992 by @Limsunoh.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/websockets.md</code>. PR #12991 by @kwang1215.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/response-model.md</code>. PR #12933 by @AndreBBM.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/middlewares.md</code>. PR #12753 by @nahyunkeem.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/openapi-webhooks.md</code>. PR #12752 by @saeye.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/query-param-models.md</code>. PR #12931 by @Vincy1230.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/query-param-models.md</code>. PR #12445 by @gitgernit.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/query-param-models.md</code>. PR #12940 by @jts8257.</li> <li>\ud83d\udd25 Remove obsolete tutorial translation to Chinese for <code>docs/zh/docs/tutorial/sql-databases.md</code>, it references files that are no longer on the repo. PR #12949 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_6","title":"Internal","text":"<ul> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12954 by @pre-commit-ci[bot].</li> </ul>"},{"location":"release-notes/#01155","title":"0.115.5","text":""},{"location":"release-notes/#refactors_4","title":"Refactors","text":"<ul> <li>\u267b\ufe0f Update internal checks to support Pydantic 2.10. PR #12914 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_6","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/body.md</code>. PR #12757 by @gsheni.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/testing-dependencies.md</code>. PR #12647 by @AyushSinghal1794.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/metadata.md</code>. PR #12773 by @Nimitha-jagadeesha.</li> <li>\ud83d\udcdd Update <code>docs/en/docs/tutorial/dependencies/dependencies-with-yield.md</code>. PR #12045 by @xuvjso.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/dependencies/global-dependencies.md</code>. PR #12653 by @vishnuvskvkl.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/body-updates.md</code>. PR #12712 by @davioc.</li> <li>\ud83d\udcdd Remove mention of Celery in the project generators. PR #12742 by @david-caro.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/header-param-models.md</code>. PR #12814 by @zhaohan-dong.</li> <li>\ud83d\udcdd Update <code>contributing.md</code> docs, include note to not translate this page. PR #12841 by @khulnasoft.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/request-forms.md</code>. PR #12648 by @vishnuvskvkl.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/request-form-models.md</code>. PR #12649 by @vishnuvskvkl.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/security/oauth2-jwt.md</code>. PR #12650 by @OCE1960.</li> <li>\ud83d\udcdd Update includes in <code>docs/vi/docs/tutorial/first-steps.md</code>. PR #12754 by @MxPy.</li> <li>\ud83d\udcdd Update includes for <code>docs/pt/docs/advanced/wsgi.md</code>. PR #12769 by @Nimitha-jagadeesha.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md</code>. PR #12815 by @handabaldeep.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/dependencies/classes-as-dependencies.md</code>. PR #12813 by @handabaldeep.</li> <li>\u270f\ufe0f Fix error in <code>docs/en/docs/tutorial/middleware.md</code>. PR #12819 by @alejsdev.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/security/get-current-user.md</code>. PR #12645 by @OCE1960.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/security/first-steps.md</code>. PR #12643 by @OCE1960.</li> <li>\ud83d\udcdd Update includes in <code>docs/de/docs/advanced/additional-responses.md</code>. PR #12821 by @zhaohan-dong.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/generate-clients.md</code>. PR #12642 by @AyushSinghal1794.</li> <li>\ud83d\udcdd Fix admonition double quotes with new syntax. PR #12835 by @khulnasoft.</li> <li>\ud83d\udcdd Update includes in <code>docs/zh/docs/advanced/additional-responses.md</code>. PR #12828 by @zhaohan-dong.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/path-params-numeric-validations.md</code>. PR #12825 by @zhaohan-dong.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/advanced/testing-websockets.md</code>. PR #12761 by @hamidrasti.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/advanced/using-request-directly.md</code>. PR #12760 by @hamidrasti.</li> <li>\ud83d\udcdd Update includes for <code>docs/advanced/wsgi.md</code>. PR #12758 by @hamidrasti.</li> <li>\ud83d\udcdd Update includes in <code>docs/de/docs/tutorial/middleware.md</code>. PR #12729 by @paintdog.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/schema-extra-example.md</code>. PR #12822 by @khulnasoft.</li> <li>\ud83d\udcdd Update includes in <code>docs/fr/docs/advanced/additional-responses.md</code>. PR #12634 by @fegmorte.</li> <li>\ud83d\udcdd Update includes in <code>docs/fr/docs/advanced/path-operation-advanced-configuration.md</code>. PR #12633 by @kantandane.</li> <li>\ud83d\udcdd Update includes in <code>docs/fr/docs/advanced/response-directly.md</code>. PR #12632 by @kantandane.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/header-params.md</code>. PR #12640 by @vishnuvskvkl.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/cookie-param-models.md</code>. PR #12639 by @vishnuvskvkl.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/extra-models.md</code>. PR #12638 by @vishnuvskvkl.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/cors.md</code>. PR #12637 by @vishnuvskvkl.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/dependencies/sub-dependencies.md</code>. PR #12810 by @handabaldeep.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/body-nested-models.md</code>. PR #12812 by @zhaohan-dong.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/path-operation-configuration.md</code>. PR #12809 by @AlexWendland.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/request-files.md</code>. PR #12818 by @zhaohan-dong.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/query-param-models.md</code>. PR #12817 by @handabaldeep.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/path-params.md</code>. PR #12811 by @AlexWendland.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/response-model.md</code>. PR #12621 by @kantandane.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/websockets.md</code>. PR #12606 by @vishnuvskvkl.</li> <li>\ud83d\udcdd Updates include for <code>docs/en/docs/tutorial/cookie-params.md</code>. PR #12808 by @handabaldeep.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/middleware.md</code>. PR #12807 by @AlexWendland.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/sub-applications.md</code>. PR #12806 by @zhaohan-dong.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/response-headers.md</code>. PR #12805 by @zhaohan-dong.</li> <li>\ud83d\udcdd Update includes in <code>docs/fr/docs/tutorial/first-steps.md</code>. PR #12594 by @kantandane.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/response-cookies.md</code>. PR #12804 by @zhaohan-dong.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/path-operation-advanced-configuration.md</code>. PR #12802 by @zhaohan-dong.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/advanced/response-directly.md</code>. PR #12803 by @handabaldeep.</li> <li>\ud83d\udcdd Update includes in <code>docs/zh/docs/tutorial/background-tasks.md</code>. PR #12798 by @zhaohan-dong.</li> <li>\ud83d\udcdd Update includes for <code>docs/de/docs/tutorial/body-multiple-params.md</code>. PR #12699 by @alissadb.</li> <li>\ud83d\udcdd Update includes in <code>docs/em/docs/tutorial/body-updates.md</code>. PR #12799 by @AlexWendland.</li> <li>\ud83d\udcdd Update includes <code>docs/en/docs/advanced/response-change-status-code.md</code>. PR #12801 by @handabaldeep.</li> <li>\ud83d\udcdd Update includes <code>docs/en/docs/advanced/openapi-callbacks.md</code>. PR #12800 by @handabaldeep.</li> <li>\ud83d\udcdd  Update includes in <code>docs/fr/docs/tutorial/body-multiple-params.md</code>. PR #12598 by @kantandane.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/body-multiple-params.md</code>. PR #12593 by @Tashanam-Shahbaz.</li> <li>\ud83d\udcdd Update includes in <code>docs/pt/docs/tutorial/background-tasks.md</code>. PR #12736 by @bhunao.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/advanced/custom-response.md</code>. PR #12797 by @handabaldeep.</li> <li>\ud83d\udcdd Update includes for <code>docs/pt/docs/python-types.md</code>. PR #12671 by @ceb10n.</li> <li>\ud83d\udcdd Update includes for <code>docs/de/docs/python-types.md</code>. PR #12660 by @alissadb.</li> <li>\ud83d\udcdd Update includes for <code>docs/de/docs/advanced/dataclasses.md</code>. PR #12658 by @alissadb.</li> <li>\ud83d\udcdd Update includes in <code>docs/fr/docs/tutorial/path-params.md</code>. PR #12592 by @kantandane.</li> <li>\ud83d\udcdd Update includes for <code>docs/de/docs/how-to/configure-swagger-ui.md</code>. PR #12690 by @alissadb.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/security/oauth2-scopes.md</code>. PR #12572 by @krishnamadhavan.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/how-to/conditional-openapi.md</code>. PR #12624 by @rabinlamadong.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/dependencies/index.md</code>. PR #12615 by @bharara.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/response-status-code.md</code>. PR #12620 by @kantandane.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/how-to/custom-docs-ui-assets.md</code>. PR #12623 by @rabinlamadong.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/openapi-webhooks.md</code>. PR #12605 by @salmantec.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/events.md</code>. PR #12604 by @salmantec.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/dataclasses.md</code>. PR #12603 by @salmantec.</li> <li>\ud83d\udcdd Update includes in <code>docs/es/docs/tutorial/cookie-params.md</code>. PR #12602 by @antonyare93.</li> <li>\ud83d\udcdd Update includes in <code>docs/fr/docs/tutorial/path-params-numeric-validations.md</code>. PR #12601 by @kantandane.</li> <li>\ud83d\udcdd Update includes in <code>docs/fr/docs/tutorial/background-tasks.md</code>. PR #12600 by @kantandane.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/encoder.md</code>. PR #12597 by @tonyjly.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/how-to/custom-docs-ui-assets.md</code>. PR #12557 by @philipokiokio.</li> <li>\ud83c\udfa8 Adjust spacing. PR #12635 by @alejsdev.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/how-to/custom-request-and-route.md</code>. PR #12560 by @philipokiokio.</li> </ul>"},{"location":"release-notes/#translations_8","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/testing-websockets.md</code>. PR #12739 by @Limsunoh.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/environment-variables.md</code>. PR #12785 by @Vincy1230.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/environment-variables.md</code>. PR #12784 by @Vincy1230.</li> <li>\ud83c\udf10 Add Korean translation for <code>ko/docs/advanced/response-headers.md</code>. PR #12740 by @kwang1215.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/virtual-environments.md</code>. PR #12790 by @Vincy1230.</li> <li>\ud83c\udf10 Add Korean translation for <code>/docs/ko/docs/environment-variables.md</code>. PR #12526 by @Tolerblanc.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/history-design-future.md</code>. PR #12646 by @saeye.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/advanced-dependencies.md</code>. PR #12675 by @kim-sangah.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/how-to/conditional-openapi.md</code>. PR #12731 by @sptcnl.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/using_request_directly.md</code>. PR #12738 by @kwang1215.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/testing-events.md</code>. PR #12741 by @9zimin9.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/security/index.md</code>. PR #12743 by @kim-sangah.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/path-operation-advanced-configuration.md</code>. PR #12762 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/wsgi.md</code>. PR #12659 by @Limsunoh.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/websockets.md</code>. PR #12703 by @devfernandoa.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/security/simple-oauth2.md</code>. PR #12520 by @LidiaDomingos.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/response-directly.md</code>. PR #12674 by @9zimin9.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/middleware.md</code>. PR #12704 by @devluisrodrigues.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/openapi-callbacks.md</code>. PR #12705 by @devfernandoa.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/request-files.md</code>. PR #12706 by @devluisrodrigues.</li> <li>\ud83c\udf10 Add Portuguese Translation for <code>docs/pt/docs/advanced/custom-response.md</code>. PR #12631 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/metadata.md</code>. PR #12538 by @LinkolnR.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/metadata.md</code>. PR #12541 by @kwang1215.</li> <li>\ud83c\udf10 Add Korean Translation for <code>docs/ko/docs/advanced/response-cookies.md</code>. PR #12546 by @kim-sangah.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/readyapi-cli.md</code>. PR #12515 by @dhdld.</li> <li>\ud83c\udf10 Add Korean Translation for <code>docs/ko/docs/advanced/response-change-status-code.md</code>. PR #12547 by @9zimin9.</li> </ul>"},{"location":"release-notes/#internal_7","title":"Internal","text":"<ul> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12907 by @pre-commit-ci[bot].</li> <li>\ud83d\udd28 Update docs preview script to show previous version and English version. PR #12856 by @khulnasoft.</li> <li>\u2b06 Bump khulnasoft/latest-changes from 0.3.1 to 0.3.2. PR #12794 by @dependabot[bot].</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.12.0 to 1.12.2. PR #12788 by @dependabot[bot].</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.11.0 to 1.12.0. PR #12781 by @dependabot[bot].</li> <li>\u2b06 Bump cloudflare/wrangler-action from 3.11 to 3.12. PR #12777 by @dependabot[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12766 by @pre-commit-ci[bot].</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.10.3 to 1.11.0. PR #12721 by @dependabot[bot].</li> <li>\u2b06 Update pre-commit requirement from &lt;4.0.0,&gt;=2.17.0 to &gt;=2.17.0,&lt;5.0.0. PR #12749 by @dependabot[bot].</li> <li>\u2b06 Bump cligenius from 0.12.3 to 0.12.5. PR #12748 by @dependabot[bot].</li> <li>\u2b06 Update flask requirement from &lt;3.0.0,&gt;=1.1.2 to &gt;=1.1.2,&lt;4.0.0. PR #12747 by @dependabot[bot].</li> <li>\u2b06 Bump pillow from 10.4.0 to 11.0.0. PR #12746 by @dependabot[bot].</li> <li>\u2b06 Update pytest requirement from &lt;8.0.0,&gt;=7.1.3 to &gt;=7.1.3,&lt;9.0.0. PR #12745 by @dependabot[bot].</li> <li>\ud83d\udd27 Update sponsors: add Render. PR #12733 by @khulnasoft.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12707 by @pre-commit-ci[bot].</li> </ul>"},{"location":"release-notes/#01154","title":"0.115.4","text":""},{"location":"release-notes/#refactors_5","title":"Refactors","text":"<ul> <li>\u267b\ufe0f Update logic to import and check <code>python-multipart</code> for compatibility with newer version. PR #12627 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_7","title":"Docs","text":"<ul> <li>\ud83d\udcdd  Update includes in <code>docs/fr/docs/tutorial/body.md</code>. PR #12596 by @kantandane.</li> <li>\ud83d\udcdd Update includes in <code>docs/fr/docs/tutorial/debugging.md</code>. PR #12595 by @kantandane.</li> <li>\ud83d\udcdd Update includes in <code>docs/fr/docs/tutorial/query-params-str-validations.md</code>. PR #12591 by @kantandane.</li> <li>\ud83d\udcdd Update includes in <code>docs/fr/docs/tutorial/query-params.md</code>. PR #12589 by @kantandane.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/tutorial/body-fields.md</code>. PR #12588 by @lucaromagnoli.</li> <li>\ud83d\udcdd Update includes in <code>docs/de/docs/tutorial/response-status-code.md</code>. PR #12585 by @abejaranoh.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/body.md</code>. PR #12586 by @lucaromagnoli.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/behind-a-proxy.md</code>. PR #12583 by @imjuanleonard.</li> <li>\ud83d\udcdd Update includes syntax for <code>docs/pl/docs/tutorial/first-steps.md</code>. PR #12584 by @sebkozlo.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/middleware.md</code>. PR #12582 by @montanarograziano.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/additional-status-codes.md</code>. PR #12577 by @krishnamadhavan.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/advanced-dependencies.md</code>. PR #12578 by @krishnamadhavan.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/additional-responses.md</code>. PR #12576 by @krishnamadhavan.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/static-files.md</code>. PR #12575 by @lucaromagnoli.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/async-tests.md</code>. PR #12568 by @krishnamadhavan.</li> <li>\ud83d\udcdd Update includes in <code>docs/pt/docs/advanced/behind-a-proxy.md</code>. PR #12563 by @asmioglou.</li> <li>\ud83d\udcdd Update includes in <code>docs/de/docs/advanced/security/http-basic-auth.md</code>. PR #12561 by @Nimitha-jagadeesha.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/background-tasks.md</code>. PR #12559 by @FarhanAliRaza.</li> <li>\ud83d\udcdd Update includes in <code>docs/fr/docs/python-types.md</code>. PR #12558 by @Ismailtlem.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/how-to/graphql.md</code>. PR #12564 by @philipokiokio.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/how-to/extending-openapi.md</code>. PR #12562 by @philipokiokio.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/how-to/configure-swagger-ui.md</code>. PR #12556 by @khulnasoft.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/how-to/separate-openapi-schemas.md</code>. PR #12555 by @khulnasoft.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/advanced/security/http-basic-auth.md</code>. PR #12553 by @khulnasoft.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/first-steps.md</code>. PR #12552 by @khulnasoft.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/python-types.md</code>. PR #12551 by @khulnasoft.</li> <li>\ud83d\udcdd Fix link in OAuth2 docs. PR #12550 by @khulnasoft.</li> <li>\ud83d\udcdd Add External Link: ReadyAPI do Zero. PR #12533 by @rennerocha.</li> <li>\ud83d\udcdd Fix minor typos. PR #12516 by @kkirsche.</li> <li>\ud83c\udf10 Fix rendering issue in translations. PR #12509 by @alejsdev.</li> </ul>"},{"location":"release-notes/#translations_9","title":"Translations","text":"<ul> <li>\ud83d\udcdd Update includes in <code>docs/de/docs/advanced/async-tests.md</code>. PR #12567 by @imjuanleonard.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/sql-databases.md</code>. PR #12530 by @ilacftemp.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/benchmarks.md</code>. PR #12540 by @Limsunoh.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/how-to/separate-openapi-schemas.md</code>. PR #12518 by @ilacftemp.</li> <li>\ud83c\udf10 Update Traditional Chinese translation for <code>docs/zh-hant/docs/deployment/index.md</code>. PR #12521 by @codingjenny.</li> <li>\ud83c\udf10 Update Traditional Chinese translation for <code>docs/zh-hant/docs/deployment/cloud.md</code>. PR #12522 by @codingjenny.</li> <li>\ud83c\udf10 Update Traditional Chinese translation for <code>docs/zh-hant/docs/how-to/index.md</code>. PR #12523 by @codingjenny.</li> <li>\ud83c\udf10 Update Traditional Chinese translation for <code>docs/zh-hant/docs/tutorial/index.md</code>. PR #12524 by @codingjenny.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/how-to/index.md</code>. PR #12468 by @codingjenny.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/tutorial/index.md</code>. PR #12466 by @codingjenny.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/header-param-models.md</code>. PR #12437 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/how-to/extending-openapi.md</code>. PR #12470 by @ilacftemp.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/dataclasses.md</code>. PR #12475 by @leoscarlato.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/how-to/custom-request-and-route.md</code>. PR #12483 by @devfernandoa.</li> </ul>"},{"location":"release-notes/#internal_8","title":"Internal","text":"<ul> <li>\u2b06 Bump cloudflare/wrangler-action from 3.9 to 3.11. PR #12544 by @dependabot[bot].</li> <li>\ud83d\udc77 Update GitHub Action to deploy docs previews to handle missing deploy comments. PR #12527 by @khulnasoft.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12505 by @pre-commit-ci[bot].</li> </ul>"},{"location":"release-notes/#01153","title":"0.115.3","text":""},{"location":"release-notes/#upgrades_3","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette to <code>&gt;=0.40.0,&lt;0.42.0</code>. PR #12469 by @defnull.</li> </ul>"},{"location":"release-notes/#docs_8","title":"Docs","text":"<ul> <li>\ud83d\udcdd Fix broken link in docs. PR #12495 by @eltonjncorreia.</li> </ul>"},{"location":"release-notes/#translations_10","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/readyapi-cli.md</code>. PR #12444 by @codingjenny.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/deployment/index.md</code>. PR #12439 by @codingjenny.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/how-to/testing-database.md</code>. PR #12472 by @GuilhermeRameh.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/how-to/custom-docs-ui-assets.md</code>. PR #12473 by @devluisrodrigues.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/response-headers.md</code>. PR #12458 by @leonardopaloschi.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/deployment/cloud.md</code>. PR #12440 by @codingjenny.</li> <li>\ud83c\udf10 Update Portuguese translation for <code>docs/pt/docs/python-types.md</code>. PR #12428 by @ceb10n.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/environment-variables.md</code>. PR #12436 by @wisderfin.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/resources/index.md</code>. PR #12443 by @codingjenny.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/about/index.md</code>. PR #12438 by @codingjenny.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/query-param-models.md</code>. PR #12414 by @ceb10n.</li> <li>\ud83c\udf10 Remove Portuguese translation for <code>docs/pt/docs/deployment.md</code>. PR #12427 by @ceb10n.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/body-updates.md</code>. PR #12381 by @andersonrocha0.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/response-cookies.md</code>. PR #12417 by @Paulofalcao2002.</li> </ul>"},{"location":"release-notes/#internal_9","title":"Internal","text":"<ul> <li>\ud83d\udc77 Update issue manager workflow . PR #12457 by @alejsdev.</li> <li>\ud83d\udd27 Update team, include YuriiMotov \ud83d\ude80. PR #12453 by @khulnasoft.</li> <li>\ud83d\udc77 Refactor label-approved, make it an internal script instead of an external GitHub Action. PR #12280 by @khulnasoft.</li> <li>\ud83d\udc77 Fix smokeshow, checkout files on CI. PR #12434 by @khulnasoft.</li> <li>\ud83d\udc77 Use uv in CI. PR #12281 by @khulnasoft.</li> <li>\u2b06 Update httpx requirement from &lt;0.25.0,&gt;=0.23.0 to &gt;=0.23.0,&lt;0.28.0. PR #11509 by @dependabot[bot].</li> </ul>"},{"location":"release-notes/#01152","title":"0.115.2","text":""},{"location":"release-notes/#upgrades_4","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette to <code>&gt;=0.37.2,&lt;0.41.0</code>. PR #12431 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01151","title":"0.115.1","text":""},{"location":"release-notes/#fixes_6","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix openapi generation with responses kwarg. PR #10895 by @flxdot.</li> <li>\ud83d\udc1b Remove <code>Required</code> shadowing from readyapi using Pydantic v2. PR #12197 by @pachewise.</li> </ul>"},{"location":"release-notes/#refactors_6","title":"Refactors","text":"<ul> <li>\u267b\ufe0f Update type annotations for improved <code>python-multipart</code>. PR #12407 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_9","title":"Docs","text":"<ul> <li>\u2728 Add new tutorial for SQL databases with SQLDev. PR #12285 by @khulnasoft.</li> <li>\ud83d\udcdd Add External Link: How to profile a ReadyAPI asynchronous request. PR #12389 by @brouberol.</li> <li>\ud83d\udd27 Remove <code>base_path</code> for <code>mdx_include</code> Markdown extension in MkDocs. PR #12391 by @khulnasoft.</li> <li>\ud83d\udcdd Update link to Swagger UI configuration docs. PR #12264 by @makisukurisu.</li> <li>\ud83d\udcdd Adding links for Playwright and Vite in <code>docs/project-generation.md</code>. PR #12274 by @kayqueGovetri.</li> <li>\ud83d\udcdd Fix small typos in the documentation. PR #12213 by @svlandeg.</li> </ul>"},{"location":"release-notes/#translations_11","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/cookie-param-models.md</code>. PR #12298 by @ceb10n.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/how-to/graphql.md</code>. PR #12215 by @AnandaCampelo.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/security/oauth2-scopes.md</code>. PR #12263 by @ceb10n.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/deployment/concepts.md</code>. PR #12219 by @marcelomarkus.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/how-to/conditional-openapi.md</code>. PR #12221 by @marcelomarkus.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/response-directly.md</code>. PR #12266 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Update Portuguese translation for <code>docs/pt/docs/tutorial/cookie-params.md</code>. PR #12297 by @ceb10n.</li> <li>\ud83c\udf10 Fix Korean translation for <code>docs/ko/docs/tutorial/index.md</code>. PR #12278 by @kkotipy.</li> <li>\ud83c\udf10 Update Portuguese translation for <code>docs/pt/docs/advanced/security/http-basic-auth.md</code>. PR #12275 by @andersonrocha0.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/deployment/cloud.md</code>. PR #12217 by @marcelomarkus.</li> <li>\u270f\ufe0f Fix typo in <code>docs/es/docs/python-types.md</code>. PR #12235 by @JavierSanchezCastro.</li> <li>\ud83c\udf10 Add Dutch translation for <code>docs/nl/docs/environment-variables.md</code>. PR #12200 by @maxscheijen.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/deployment/manually.md</code>. PR #12210 by @JoaoGustavoRogel.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/deployment/server-workers.md</code>. PR #12220 by @marcelomarkus.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/how-to/configure-swagger-ui.md</code>. PR #12222 by @marcelomarkus.</li> </ul>"},{"location":"release-notes/#internal_10","title":"Internal","text":"<ul> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12396 by @pre-commit-ci[bot].</li> <li>\ud83d\udd28 Add script to generate variants of files. PR #12405 by @khulnasoft.</li> <li>\ud83d\udd27 Add speakeasy-api to <code>sponsors_badge.yml</code>. PR #12404 by @khulnasoft.</li> <li>\u2795 Add docs dependency: markdown-include-variants. PR #12399 by @khulnasoft.</li> <li>\ud83d\udcdd Fix extra mdx-base-path paths. PR #12397 by @khulnasoft.</li> <li>\ud83d\udc77 Tweak labeler to not override custom labels. PR #12398 by @khulnasoft.</li> <li>\ud83d\udc77 Update worfkow deploy-docs-notify URL. PR #12392 by @khulnasoft.</li> <li>\ud83d\udc77 Update Cloudflare GitHub Action. PR #12387 by @khulnasoft.</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.10.1 to 1.10.3. PR #12386 by @dependabot[bot].</li> <li>\u2b06 Bump mkdocstrings[python] from 0.25.1 to 0.26.1. PR #12371 by @dependabot[bot].</li> <li>\u2b06 Bump griffe-typingdoc from 0.2.6 to 0.2.7. PR #12370 by @dependabot[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12331 by @pre-commit-ci[bot].</li> <li>\ud83d\udd27 Update sponsors, remove Fine.dev. PR #12271 by @khulnasoft.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12253 by @pre-commit-ci[bot].</li> <li>\u270f\ufe0f Fix docstring typos in http security. PR #12223 by @albertvillanova.</li> </ul>"},{"location":"release-notes/#01150","title":"0.115.0","text":""},{"location":"release-notes/#highlights","title":"Highlights","text":"<p>Now you can declare <code>Query</code>, <code>Header</code>, and <code>Cookie</code> parameters with Pydantic models. \ud83c\udf89</p>"},{"location":"release-notes/#query-parameter-models","title":"<code>Query</code> Parameter Models","text":"<p>Use Pydantic models for <code>Query</code> parameters:</p> <pre><code>from typing import Annotated, Literal\n\nfrom readyapi import ReadyAPI, Query\nfrom pydantic import BaseModel, Field\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: Annotated[FilterParams, Query()]):\n    return filter_query\n</code></pre> <p>Read the new docs: Query Parameter Models.</p>"},{"location":"release-notes/#header-parameter-models","title":"<code>Header</code> Parameter Models","text":"<p>Use Pydantic models for <code>Header</code> parameters:</p> <pre><code>from typing import Annotated\n\nfrom readyapi import ReadyAPI, Header\nfrom pydantic import BaseModel\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    host: str\n    save_data: bool\n    if_modified_since: str | None = None\n    traceparent: str | None = None\n    x_tag: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: Annotated[CommonHeaders, Header()]):\n    return headers\n</code></pre> <p>Read the new docs: Header Parameter Models.</p>"},{"location":"release-notes/#cookie-parameter-models","title":"<code>Cookie</code> Parameter Models","text":"<p>Use Pydantic models for <code>Cookie</code> parameters:</p> <pre><code>from typing import Annotated\n\nfrom readyapi import Cookie, ReadyAPI\nfrom pydantic import BaseModel\n\napp = ReadyAPI()\n\n\nclass Cookies(BaseModel):\n    session_id: str\n    fatebook_tracker: str | None = None\n    googall_tracker: str | None = None\n\n\n@app.get(\"/items/\")\nasync def read_items(cookies: Annotated[Cookies, Cookie()]):\n    return cookies\n</code></pre> <p>Read the new docs: Cookie Parameter Models.</p>"},{"location":"release-notes/#forbid-extra-query-cookie-header-parameters","title":"Forbid Extra Query (Cookie, Header) Parameters","text":"<p>Use Pydantic models to restrict extra values for <code>Query</code> parameters (also applies to <code>Header</code> and <code>Cookie</code> parameters).</p> <p>To achieve it, use Pydantic's <code>model_config = {\"extra\": \"forbid\"}</code>:</p> <pre><code>from typing import Annotated, Literal\n\nfrom readyapi import ReadyAPI, Query\nfrom pydantic import BaseModel, Field\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: Annotated[FilterParams, Query()]):\n    return filter_query\n</code></pre> <p>This applies to <code>Query</code>, <code>Header</code>, and <code>Cookie</code> parameters, read the new docs:</p> <ul> <li>Forbid Extra Query Parameters</li> <li>Forbid Extra Headers</li> <li>Forbid Extra Cookies</li> </ul>"},{"location":"release-notes/#features","title":"Features","text":"<ul> <li>\u2728 Add support for Pydantic models for parameters using <code>Query</code>, <code>Cookie</code>, <code>Header</code>. PR #12199 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_12","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/security/http-basic-auth.md</code>. PR #12195 by @ceb10n.</li> </ul>"},{"location":"release-notes/#internal_11","title":"Internal","text":"<ul> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12204 by @pre-commit-ci[bot].</li> </ul>"},{"location":"release-notes/#01142","title":"0.114.2","text":""},{"location":"release-notes/#fixes_7","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix form field regression with <code>alias</code>. PR #12194 by @Wurstnase.</li> </ul>"},{"location":"release-notes/#translations_13","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/request-form-models.md</code>. PR #12175 by @ceb10n.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/project-generation.md</code>. PR #12170 by @waketzheng.</li> <li>\ud83c\udf10 Add Dutch translation for <code>docs/nl/docs/python-types.md</code>. PR #12158 by @maxscheijen.</li> </ul>"},{"location":"release-notes/#internal_12","title":"Internal","text":"<ul> <li>\ud83d\udca1 Add comments with instructions for Playwright screenshot scripts. PR #12193 by @khulnasoft.</li> <li>\u2795 Add inline-snapshot for tests. PR #12189 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01141","title":"0.114.1","text":""},{"location":"release-notes/#refactors_7","title":"Refactors","text":"<ul> <li>\u26a1\ufe0f Improve performance in request body parsing with a cache for internal model fields. PR #12184 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_10","title":"Docs","text":"<ul> <li>\ud83d\udcdd Remove duplicate line in docs for <code>docs/en/docs/environment-variables.md</code>. PR #12169 by @prometek.</li> </ul>"},{"location":"release-notes/#translations_14","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/virtual-environments.md</code>. PR #12163 by @marcelomarkus.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/environment-variables.md</code>. PR #12162 by @marcelomarkus.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/testing.md</code>. PR #12164 by @marcelomarkus.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/debugging.md</code>. PR #12165 by @marcelomarkus.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/project-generation.md</code>. PR #12157 by @BORA040126.</li> </ul>"},{"location":"release-notes/#internal_13","title":"Internal","text":"<ul> <li>\u2b06 Bump khulnasoft/issue-manager from 0.5.0 to 0.5.1. PR #12173 by @dependabot[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12176 by @pre-commit-ci[bot].</li> <li>\ud83d\udc77 Update <code>issue-manager.yml</code>. PR #12159 by @khulnasoft.</li> <li>\u270f\ufe0f Fix typo in <code>readyapi/params.py</code>. PR #12143 by @surreal30.</li> </ul>"},{"location":"release-notes/#01140","title":"0.114.0","text":"<p>You can restrict form fields to only include those declared in a Pydantic model and forbid any extra field sent in the request using Pydantic's <code>model_config = {\"extra\": \"forbid\"}</code>:</p> <pre><code>from typing import Annotated\n\nfrom readyapi import ReadyAPI, Form\nfrom pydantic import BaseModel\n\napp = ReadyAPI()\n\n\nclass FormData(BaseModel):\n    username: str\n    password: str\n    model_config = {\"extra\": \"forbid\"}\n\n\n@app.post(\"/login/\")\nasync def login(data: Annotated[FormData, Form()]):\n    return data\n</code></pre> <p>Read the new docs: Form Models - Forbid Extra Form Fields.</p>"},{"location":"release-notes/#features_1","title":"Features","text":"<ul> <li>\u2728 Add support for forbidding extra form fields with Pydantic models. PR #12134 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_11","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update docs, Form Models section title, to match config name. PR #12152 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_14","title":"Internal","text":"<ul> <li>\u2705 Update internal tests for latest Pydantic, including CI tweaks to install the latest Pydantic. PR #12147 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01130","title":"0.113.0","text":"<p>Now you can declare form fields with Pydantic models:</p> <pre><code>from typing import Annotated\n\nfrom readyapi import ReadyAPI, Form\nfrom pydantic import BaseModel\n\napp = ReadyAPI()\n\n\nclass FormData(BaseModel):\n    username: str\n    password: str\n\n\n@app.post(\"/login/\")\nasync def login(data: Annotated[FormData, Form()]):\n    return data\n</code></pre> <p>Read the new docs: Form Models.</p>"},{"location":"release-notes/#features_2","title":"Features","text":"<ul> <li>\u2728 Add support for Pydantic models in <code>Form</code> parameters. PR #12129 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_15","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update sponsors: Coherence link. PR #12130 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01124","title":"0.112.4","text":"<p>This release is mainly a big internal refactor to enable adding support for Pydantic models for <code>Form</code> fields, but that feature comes in the next release.</p> <p>This release shouldn't affect apps using ReadyAPI in any way. You don't even have to upgrade to this version yet. It's just a checkpoint. \ud83e\udd13</p>"},{"location":"release-notes/#refactors_8","title":"Refactors","text":"<ul> <li>\u267b\ufe0f Refactor deciding if <code>embed</code> body fields, do not overwrite fields, compute once per router, refactor internals in preparation for Pydantic models in <code>Form</code>, <code>Query</code> and others. PR #12117 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_16","title":"Internal","text":"<ul> <li>\u23ea\ufe0f Temporarily revert \"\u2728 Add support for Pydantic models in <code>Form</code> parameters\" to make a checkpoint release. PR #12128 by @khulnasoft. Restored by PR #12129.</li> <li>\u2728 Add support for Pydantic models in <code>Form</code> parameters. PR #12127 by @khulnasoft. Reverted by PR #12128 to make a checkpoint release with only refactors. Restored by PR #12129.</li> </ul>"},{"location":"release-notes/#01123","title":"0.112.3","text":"<p>This release is mainly internal refactors, it shouldn't affect apps using ReadyAPI in any way. You don't even have to upgrade to this version yet. There are a few bigger releases coming right after. \ud83d\ude80</p>"},{"location":"release-notes/#refactors_9","title":"Refactors","text":"<ul> <li>\u267b\ufe0f Refactor internal <code>check_file_field()</code>, rename to <code>ensure_multipart_is_installed()</code> to clarify its purpose. PR #12106 by @khulnasoft.</li> <li>\u267b\ufe0f Rename internal <code>create_response_field()</code> to <code>create_model_field()</code> as it's used for more than response models. PR #12103 by @khulnasoft.</li> <li>\u267b\ufe0f Refactor and simplify internal data from <code>solve_dependencies()</code> using dataclasses. PR #12100 by @khulnasoft.</li> <li>\u267b\ufe0f Refactor and simplify internal <code>analyze_param()</code> to structure data with dataclasses instead of tuple. PR #12099 by @khulnasoft.</li> <li>\u267b\ufe0f Refactor and simplify dependencies data structures with dataclasses. PR #12098 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_12","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add External Link: Techniques and applications of SQLAlchemy global filters in ReadyAPI. PR #12109 by @TheShubhendra.</li> <li>\ud83d\udcdd Add note about <code>time.perf_counter()</code> in middlewares. PR #12095 by @khulnasoft.</li> <li>\ud83d\udcdd Tweak middleware code sample <code>time.time()</code> to <code>time.perf_counter()</code>. PR #11957 by @domdent.</li> <li>\ud83d\udd27 Update sponsors: Coherence. PR #12093 by @khulnasoft.</li> <li>\ud83d\udcdd Fix async test example not to trigger DeprecationWarning. PR #12084 by @marcinsulikowski.</li> <li>\ud83d\udcdd Update <code>examples/path_params_numeric_validations/tutorial006.py</code>. PR #11478 by @MuhammadAshiqAmeer.</li> <li>\ud83d\udcdd Update comma in <code>docs/en/docs/async.md</code>. PR #12062 by @Alec-Gillis.</li> <li>\ud83d\udcdd Update docs about serving ReadyAPI: ASGI servers, Docker containers, etc.. PR #12069 by @khulnasoft.</li> <li>\ud83d\udcdd Clarify <code>response_class</code> parameter, validations, and returning a response directly. PR #12067 by @khulnasoft.</li> <li>\ud83d\udcdd Fix minor typos and issues in the documentation. PR #12063 by @svlandeg.</li> <li>\ud83d\udcdd Add note in Docker docs about ensuring graceful shutdowns and lifespan events with <code>CMD</code> exec form. PR #11960 by @GPla.</li> </ul>"},{"location":"release-notes/#translations_15","title":"Translations","text":"<ul> <li>\ud83c\udf10  Add Dutch translation for <code>docs/nl/docs/features.md</code>. PR #12101 by @maxscheijen.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/testing-events.md</code>. PR #12108 by @ceb10n.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/security/index.md</code>. PR #12114 by @ceb10n.</li> <li>\ud83c\udf10 Add Dutch translation for <code>docs/nl/docs/index.md</code>. PR #12042 by @svlandeg.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/how-to/index.md</code>. PR #12070 by @synthpop123.</li> </ul>"},{"location":"release-notes/#internal_17","title":"Internal","text":"<ul> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12115 by @pre-commit-ci[bot].</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.10.0 to 1.10.1. PR #12120 by @dependabot[bot].</li> <li>\u2b06 Bump pillow from 10.3.0 to 10.4.0. PR #12105 by @dependabot[bot].</li> <li>\ud83d\udc9a Set <code>include-hidden-files</code> to <code>True</code> when using the <code>upload-artifact</code> GH action. PR #12118 by @svlandeg.</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.9.0 to 1.10.0. PR #12112 by @dependabot[bot].</li> <li>\ud83d\udd27 Update sponsors link: Coherence. PR #12097 by @khulnasoft.</li> <li>\ud83d\udd27 Update labeler config to handle sponsorships data. PR #12096 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, remove Kong. PR #12085 by @khulnasoft.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12076 by @pre-commit-ci[bot].</li> <li>\ud83d\udc77 Update <code>latest-changes</code> GitHub Action. PR #12073 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01122","title":"0.112.2","text":""},{"location":"release-notes/#fixes_8","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix <code>allow_inf_nan</code> option for Param and Body classes. PR #11867 by @giunio-prc.</li> <li>\ud83d\udc1b Ensure that <code>app.include_router</code> merges nested lifespans. PR #9630 by @Lancetnik.</li> </ul>"},{"location":"release-notes/#refactors_10","title":"Refactors","text":"<ul> <li>\ud83c\udfa8 Fix typing annotation for semi-internal <code>ReadyAPI.add_api_route()</code>. PR #10240 by @ordinary-jamie.</li> <li>\u2b06\ufe0f Upgrade version of Ruff and reformat. PR #12032 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_13","title":"Docs","text":"<ul> <li>\ud83d\udcdd Fix a typo in <code>docs/en/docs/virtual-environments.md</code>. PR #12064 by @aymenkrifa.</li> <li>\ud83d\udcdd Add docs about Environment Variables and Virtual Environments. PR #12054 by @khulnasoft.</li> <li>\ud83d\udcdd Add Asyncer mention in async docs. PR #12037 by @khulnasoft.</li> <li>\ud83d\udcdd Move the Features docs to the top level to improve the main page menu. PR #12036 by @khulnasoft.</li> <li>\u270f\ufe0f Fix import typo in reference example for <code>Security</code>. PR #11168 by @0shah0.</li> <li>\ud83d\udcdd Highlight correct line in tutorial <code>docs/en/docs/tutorial/body-multiple-params.md</code>. PR #11978 by @svlandeg.</li> <li>\ud83d\udd25 Remove Sentry link from Advanced Middleware docs. PR #12031 by @alejsdev.</li> <li>\ud83d\udcdd Clarify management tasks for translations, multiples files in one PR. PR #12030 by @khulnasoft.</li> <li>\ud83d\udcdd Edit the link to the OpenAPI \"Responses Object\" and \"Response Object\" sections in the \"Additional Responses in OpenAPI\" section. PR #11996 by @VaitoSoi.</li> <li>\ud83d\udd28 Specify <code>email-validator</code> dependency with dash. PR #11515 by @jirikuncar.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/project-generation.md</code>. PR #11947 by @alejsdev.</li> <li>\ud83d\udcdd Fix minor typo. PR #12026 by @MicaelJarniac.</li> <li>\ud83d\udcdd Several docs improvements, tweaks, and clarifications. PR #11390 by @nilslindemann.</li> <li>\ud83d\udcdd Add missing <code>compresslevel</code> parameter on docs for <code>GZipMiddleware</code>. PR #11350 by @junah201.</li> <li>\ud83d\udcdd Fix inconsistent response code when item already exists in docs for testing. PR #11818 by @lokomilo.</li> <li>\ud83d\udcdd Update <code>docs/en/docs/tutorial/body.md</code> with Python 3.10 union type example. PR #11415 by @rangzen.</li> </ul>"},{"location":"release-notes/#translations_16","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/request_file.md</code>. PR #12018 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/learn/index.md</code>. PR #11592 by @ukwhatn.</li> <li>\ud83d\udcdd Update Spanish translation docs for consistency. PR #12044 by @alejsdev.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/dependencies/dependencies-with-yield.md</code>. PR #12028 by @xuvjso.</li> <li>\ud83d\udcdd Update ReadyAPI People, do not translate to have the most recent info. PR #12034 by @khulnasoft.</li> <li>\ud83c\udf10 Update Urdu translation for <code>docs/ur/docs/benchmarks.md</code>. PR #10046 by @AhsanSheraz.</li> </ul>"},{"location":"release-notes/#internal_18","title":"Internal","text":"<ul> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12046 by @pre-commit-ci[bot].</li> <li>\ud83d\udd27 Update coverage config files. PR #12035 by @khulnasoft.</li> <li>\ud83d\udd28 Standardize shebang across shell scripts. PR #11942 by @gitworkflows.</li> <li>\u2b06 Update sqlalchemy requirement from &lt;1.4.43,&gt;=1.3.18 to &gt;=1.3.18,&lt;2.0.33. PR #11979 by @dependabot[bot].</li> <li>\ud83d\udd0a Remove old ignore warnings. PR #11950 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade griffe-typingdoc for the docs. PR #12029 by @khulnasoft.</li> <li>\ud83d\ude48 Add .coverage* to <code>.gitignore</code>. PR #11940 by @gitworkflows.</li> <li>\u2699\ufe0f Record and show test coverage contexts (what test covers which line). PR #11518 by @slafs.</li> </ul>"},{"location":"release-notes/#01121","title":"0.112.1","text":""},{"location":"release-notes/#upgrades_5","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Allow Starlette 0.38.x, update the pin to <code>&gt;=0.37.2,&lt;0.39.0</code>. PR #11876 by @musicinmybrain.</li> </ul>"},{"location":"release-notes/#docs_14","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update docs section about \"Don't Translate these Pages\". PR #12022 by @khulnasoft.</li> <li>\ud83d\udcdd Add documentation for non-translated pages and scripts to verify them. PR #12020 by @khulnasoft.</li> <li>\ud83d\udcdd Update docs about discussions questions. PR #11985 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_17","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/bigger-applications.md</code>. PR #11971 by @marcelomarkus.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/testing-websockets.md</code>. PR #11994 by @ceb10n.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/testing-dependencies.md</code>. PR #11995 by @ceb10n.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/using-request-directly.md</code>. PR #11956 by @ceb10n.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/tutorial/body-multiple-params.md</code>. PR #11796 by @pe-brian.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/query-params.md</code>. PR #11557 by @caomingpei.</li> <li>\ud83c\udf10 Update typo in Chinese translation for <code>docs/zh/docs/advanced/testing-dependencies.md</code>. PR #11944 by @bestony.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/sub-applications.md</code> and <code>docs/pt/docs/advanced/behind-a-proxy.md</code>. PR #11856 by @marcelomarkus.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/cors.md</code> and <code>docs/pt/docs/tutorial/middleware.md</code>. PR #11916 by @wesinalves.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/tutorial/path-params-numeric-validations.md</code>. PR #11788 by @pe-brian.</li> </ul>"},{"location":"release-notes/#internal_19","title":"Internal","text":"<ul> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.8.14 to 1.9.0. PR #11727 by @dependabot[bot].</li> <li>\ud83d\udd27 Add changelog URL to <code>pyproject.toml</code>, shows in PyPI. PR #11152 by @Pierre-VF.</li> <li>\ud83d\udc77 Do not sync labels as it overrides manually added labels. PR #12024 by @khulnasoft.</li> <li>\ud83d\udc77\ud83c\udffb Update Labeler GitHub Actions. PR #12019 by @khulnasoft.</li> <li>\ud83d\udd27 Update configs for MkDocs for languages and social cards. PR #12016 by @khulnasoft.</li> <li>\ud83d\udc77 Update permissions and config for labeler GitHub Action. PR #12008 by @khulnasoft.</li> <li>\ud83d\udc77\ud83c\udffb Add GitHub Action label-checker. PR #12005 by @khulnasoft.</li> <li>\ud83d\udc77 Add label checker GitHub Action. PR #12004 by @khulnasoft.</li> <li>\ud83d\udc77 Update GitHub Action add-to-project. PR #12002 by @khulnasoft.</li> <li>\ud83d\udd27 Update labeler GitHub Action. PR #12001 by @khulnasoft.</li> <li>\ud83d\udc77 Add GitHub Action labeler. PR #12000 by @khulnasoft.</li> <li>\ud83d\udc77 Add GitHub Action add-to-project. PR #11999 by @khulnasoft.</li> <li>\ud83d\udcdd Update admonitions in docs missing. PR #11998 by @khulnasoft.</li> <li>\ud83d\udd28 Update docs.py script to enable dirty reload conditionally. PR #11986 by @khulnasoft.</li> <li>\ud83d\udd27 Update MkDocs instant previews. PR #11982 by @khulnasoft.</li> <li>\ud83d\udc1b Fix deploy docs previews script to handle mkdocs.yml files. PR #11984 by @khulnasoft.</li> <li>\ud83d\udca1 Add comment about custom Termynal line-height. PR #11976 by @khulnasoft.</li> <li>\ud83d\udc77 Add alls-green for test-redistribute. PR #11974 by @khulnasoft.</li> <li>\ud83d\udc77 Update docs-previews to handle no docs changes. PR #11975 by @khulnasoft.</li> <li>\ud83d\udd28 Refactor script <code>deploy_docs_status.py</code> to account for deploy URLs with or without trailing slash. PR #11965 by @khulnasoft.</li> <li>\ud83d\udd12\ufe0f Update permissions for deploy-docs action. PR #11964 by @khulnasoft.</li> <li>\ud83d\udc77\ud83c\udffb Add deploy docs status and preview links to PRs. PR #11961 by @khulnasoft.</li> <li>\ud83d\udd27 Update docs setup with latest configs and plugins. PR #11953 by @khulnasoft.</li> <li>\ud83d\udd07 Ignore warning from attrs in Trio. PR #11949 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01120","title":"0.112.0","text":""},{"location":"release-notes/#breaking-changes","title":"Breaking Changes","text":"<ul> <li>\u267b\ufe0f Add support for <code>pip install \"readyapi[standard]\"</code> with standard dependencies and <code>python -m readyapi</code>. PR #11935 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#summary","title":"Summary","text":"<p>Install with:</p> <pre><code>pip install \"readyapi[standard]\"\n</code></pre>"},{"location":"release-notes/#other-changes","title":"Other Changes","text":"<ul> <li>This adds support for calling the CLI as:</li> </ul> <pre><code>python -m readyapi\n</code></pre> <ul> <li>And it upgrades <code>readyapi-cli[standard] &gt;=0.0.5</code>.</li> </ul>"},{"location":"release-notes/#technical-details","title":"Technical Details","text":"<p>Before this, <code>readyapi</code> would include the standard dependencies, with Uvicorn and the <code>readyapi-cli</code>, etc.</p> <p>And <code>readyapi-slim</code> would not include those standard dependencies.</p> <p>Now <code>readyapi</code> doesn't include those standard dependencies unless you install with <code>pip install \"readyapi[standard]\"</code>.</p> <p>Before, you would install <code>pip install readyapi</code>, now you should include the <code>standard</code> optional dependencies (unless you want to exclude one of those): <code>pip install \"readyapi[standard]\"</code>.</p> <p>This change is because having the standard optional dependencies installed by default was being inconvenient to several users, and having to install instead <code>readyapi-slim</code> was not being a feasible solution.</p> <p>Discussed here: #11522 and here: #11525</p>"},{"location":"release-notes/#docs_15","title":"Docs","text":"<ul> <li>\u270f\ufe0f Fix typos in docs. PR #11926 by @jianghuyiyuan.</li> <li>\ud83d\udcdd Tweak management docs. PR #11918 by @khulnasoft.</li> <li>\ud83d\ude9a Rename GitHub links from khulnasoft/readyapi to readyapi/readyapi. PR #11913 by @khulnasoft.</li> <li>\ud83d\udcdd Add docs about ReadyAPI team and project management. PR #11908 by @khulnasoft.</li> <li>\ud83d\udcdd Re-structure docs main menu. PR #11904 by @khulnasoft.</li> <li>\ud83d\udcdd Update Speakeasy URL. PR #11871 by @ndimares.</li> </ul>"},{"location":"release-notes/#translations_18","title":"Translations","text":"<ul> <li>\ud83c\udf10 Update Portuguese translation for <code>docs/pt/docs/alternatives.md</code>. PR #11931 by @ceb10n.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/dependencies/sub-dependencies.md</code>. PR #10515 by @AlertRED.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/response-change-status-code.md</code>. PR #11863 by @ceb10n.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/reference/background.md</code>. PR #11849 by @lucasbalieiro.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/dependencies/dependencies-with-yield.md</code>. PR #11848 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/reference/apirouter.md</code>. PR #11843 by @lucasbalieiro.</li> </ul>"},{"location":"release-notes/#internal_20","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update sponsors: add liblab. PR #11934 by @khulnasoft.</li> <li>\ud83d\udc77 Update GitHub Action label-approved permissions. PR #11933 by @khulnasoft.</li> <li>\ud83d\udc77 Refactor GitHub Action to comment docs deployment URLs and update token. PR #11925 by @khulnasoft.</li> <li>\ud83d\udc77 Update tokens for GitHub Actions. PR #11924 by @khulnasoft.</li> <li>\ud83d\udc77 Update token permissions to comment deployment URL in docs. PR #11917 by @khulnasoft.</li> <li>\ud83d\udc77 Update token permissions for GitHub Actions. PR #11915 by @khulnasoft.</li> <li>\ud83d\udc77 Update GitHub Actions token usage. PR #11914 by @khulnasoft.</li> <li>\ud83d\udc77 Update GitHub Action to notify translations with label <code>approved-1</code>. PR #11907 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, remove Reflex. PR #11875 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors: remove TalkPython. PR #11861 by @khulnasoft.</li> <li>\ud83d\udd28 Update docs Termynal scripts to not include line nums for local dev. PR #11854 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01111","title":"0.111.1","text":""},{"location":"release-notes/#upgrades_6","title":"Upgrades","text":"<ul> <li>\u2796 Remove <code>orjson</code> and <code>ujson</code> from default dependencies. PR #11842 by @khulnasoft.<ul> <li>These dependencies are still installed when you install with <code>pip install \"readyapi[all]\"</code>. But they are not included in <code>pip install readyapi</code>.</li> </ul> </li> <li>\ud83d\udcdd Restored Swagger-UI links to use the latest version possible. PR #11459 by @UltimateLobster.</li> </ul>"},{"location":"release-notes/#docs_16","title":"Docs","text":"<ul> <li>\u270f\ufe0f Rewording in <code>docs/en/docs/readyapi-cli.md</code>. PR #11716 by @alejsdev.</li> <li>\ud83d\udcdd Update Hypercorn links in all the docs. PR #11744 by @kittydoor.</li> <li>\ud83d\udcdd  Update docs with Ariadne reference from Starlette to ReadyAPI. PR #11797 by @DamianCzajkowski.</li> <li>\ud83d\udcdd Update readyapi instrumentation external link. PR #11317 by @softwarebloat.</li> <li>\u270f\ufe0f Fix links to alembic example repo in docs. PR #11628 by @augiwan.</li> <li>\u270f\ufe0f Update <code>docs/en/docs/readyapi-cli.md</code>. PR #11715 by @alejsdev.</li> <li>\ud83d\udcdd Update External Links . PR #11500 by @devon2018.</li> <li>\ud83d\udcdd Add External Link: Tutorial de ReadyAPI, \u00bfel mejor framework de Python?. PR #11618 by @EduardoZepeda.</li> <li>\ud83d\udcdd Fix typo in <code>docs/en/docs/tutorial/body-multiple-params.md</code>. PR #11698 by @mwb-u.</li> <li>\ud83d\udcdd Add External Link: Deploy a Serverless ReadyAPI App with Neon Postgres and AWS App Runner at any scale. PR #11633 by @ananis25.</li> <li>\ud83d\udcdd Update <code>security/first-steps.md</code>. PR #11674 by @alejsdev.</li> <li>\ud83d\udcdd Update <code>security/first-steps.md</code>. PR #11673 by @alejsdev.</li> <li>\ud83d\udcdd Update note in <code>path-params-numeric-validations.md</code>. PR #11672 by @alejsdev.</li> <li>\ud83d\udcdd Tweak intro docs about <code>Annotated</code> and <code>Query()</code> params. PR #11664 by @khulnasoft.</li> <li>\ud83d\udcdd Update JWT auth documentation to use PyJWT instead of pyhon-jose. PR #11589 by @estebanx64.</li> <li>\ud83d\udcdd Update docs. PR #11603 by @alejsdev.</li> <li>\u270f\ufe0f Fix typo: convert every 're-use' to 'reuse'.. PR #11598 by @hasansezertasan.</li> <li>\u270f\ufe0f Fix typo in <code>readyapi/applications.py</code>. PR #11593 by @petarmaric.</li> <li>\u270f\ufe0f Fix link in <code>readyapi-cli.md</code>. PR #11524 by @svlandeg.</li> </ul>"},{"location":"release-notes/#translations_19","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/how-to/graphql.md</code>. PR #11697 by @camigomezdev.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/reference/index.md</code>. PR #11840 by @lucasbalieiro.</li> <li>\ud83c\udf10 Fix link in German translation. PR #11836 by @anitahammer.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/dependencies/sub-dependencies.md</code>. PR #11792 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/tutorial/request-forms.md</code>. PR #11553 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/reference/exceptions.md</code>. PR #11834 by @lucasbalieiro.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/dependencies/global-dependencies.md</code>. PR #11826 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/how-to/general.md</code>. PR #11825 by @lucasbalieiro.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/async-tests.md</code>. PR #11808 by @ceb10n.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/first-steps.md</code>. PR #11809 by @vkhoroshchak.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/dependencies/dependencies-in-path-operation-operators.md</code>. PR #11804 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/readyapi-cli.md</code>. PR #11786 by @logan2d5.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/openapi-webhooks.md</code>. PR #11791 by @ceb10n.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/tutorial/security/oauth2-jwt.md</code>. PR #11781 by @logan2d5.</li> <li>\ud83d\udcdd Fix image missing in French translation for <code>docs/fr/docs/async.md</code> . PR #11787 by @pe-brian.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/advanced-dependencies.md</code>. PR #11775 by @ceb10n.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/dependencies/classes-as-dependencies.md</code>. PR #11768 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10  Add Portuguese translation for <code>docs/pt/docs/advanced/additional-status-codes.md</code>. PR #11753 by @ceb10n.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/dependencies/index.md</code>. PR #11757 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/settings.md</code>. PR #11739 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/learn/index.md</code>. PR #11712 by @benjaminvandammeholberton.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/how-to/index.md</code>. PR #11731 by @vhsenna.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/additional-responses.md</code>. PR #11736 by @ceb10n.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/benchmarks.md</code>. PR #11713 by @ceb10n.</li> <li>\ud83c\udf10 Fix Korean translation for <code>docs/ko/docs/tutorial/response-status-code.md</code>. PR #11718 by @nayeonkinn.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/extra-data-types.md</code>. PR #11711 by @nayeonkinn.</li> <li>\ud83c\udf10 Fix Korean translation for <code>docs/ko/docs/tutorial/body-nested-models.md</code>. PR #11710 by @nayeonkinn.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/readyapi-cli.md</code>. PR #11641 by @ayr-ton.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/readyapi-people.md</code>. PR #11639 by @hsuanchi.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/advanced/index.md</code>. PR #11606 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/deployment/cloud.md</code>. PR #11610 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/advanced/security/index.md</code>. PR #11609 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/advanced/testing-websockets.md</code>. PR #11608 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/how-to/general.md</code>. PR #11607 by @hasansezertasan.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/advanced/templates.md</code>. PR #11620 by @chaoless.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/deployment/index.md</code>. PR #11605 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/tutorial/static-files.md</code>. PR #11599 by @hasansezertasan.</li> <li>\ud83c\udf10 Polish translation for <code>docs/pl/docs/readyapi-people.md</code>. PR #10196 by @isulim.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/advanced/wsgi.md</code>. PR #11575 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/tutorial/cookie-params.md</code>. PR #11561 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/about/index.md</code>. PR #10961 by @s111d.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/sql-databases.md</code>. PR #11539 by @chaoless.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/how-to/configure-swagger-ui.md</code>. PR #11501 by @Lucas-lyh.</li> <li>\ud83c\udf10 Update Chinese translation for <code>/docs/advanced/security/http-basic-auth.md</code>. PR #11512 by @nick-cjyx9.</li> </ul>"},{"location":"release-notes/#internal_21","title":"Internal","text":"<ul> <li>\u267b\ufe0f Simplify internal docs script. PR #11777 by @gitworkflows.</li> <li>\ud83d\udd27 Update sponsors: add Fine. PR #11784 by @khulnasoft.</li> <li>\ud83d\udd27 Tweak sponsors: Kong URL. PR #11765 by @khulnasoft.</li> <li>\ud83d\udd27 Tweak sponsors: Kong URL. PR #11764 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, add Stainless. PR #11763 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, add Zuplo. PR #11729 by @khulnasoft.</li> <li>\ud83d\udd27 Update Sponsor link: Coherence. PR #11730 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #11669 by @khulnasoft.</li> <li>\ud83d\udd27 Add sponsor Kong. PR #11662 by @khulnasoft.</li> <li>\ud83d\udc77 Update Smokeshow, fix sync download artifact and smokeshow configs. PR #11563 by @khulnasoft.</li> <li>\ud83d\udc77 Update Smokeshow download artifact GitHub Action. PR #11562 by @khulnasoft.</li> <li>\ud83d\udc77 Update GitHub actions to download and upload artifacts to v4, for docs and coverage. PR #11550 by @tamird.</li> <li>\ud83d\udc77 Tweak CI for test-redistribute, add needed env vars for slim. PR #11549 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #11511 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01110","title":"0.111.0","text":""},{"location":"release-notes/#features_3","title":"Features","text":"<ul> <li>\u2728 Add ReadyAPI CLI, the new <code>readyapi</code> command. PR #11522 by @khulnasoft.<ul> <li>New docs: ReadyAPI CLI.</li> </ul> </li> </ul> <p>Try it out with:</p> <pre><code>$ pip install --upgrade readyapi\n\n$ readyapi dev main.py\n\n\n \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 ReadyAPI CLI - Development mode \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n \u2502                                                     \u2502\n \u2502  Serving at: http://127.0.0.1:8000                  \u2502\n \u2502                                                     \u2502\n \u2502  API docs: http://127.0.0.1:8000/docs               \u2502\n \u2502                                                     \u2502\n \u2502  Running in development mode, for production use:   \u2502\n \u2502                                                     \u2502\n \u2502  readyapi run                                        \u2502\n \u2502                                                     \u2502\n \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\nINFO:     Will watch for changes in these directories: ['/home/user/code/awesomeapp']\nINFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\nINFO:     Started reloader process [2248755] using WatchFiles\nINFO:     Started server process [2248757]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\n</code></pre>"},{"location":"release-notes/#refactors_11","title":"Refactors","text":"<ul> <li>\ud83d\udd27 Add configs and setup for <code>readyapi-slim</code> including optional extras <code>readyapi-slim[standard]</code>, and <code>readyapi</code> including by default the same <code>standard</code> extras. PR #11503 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01103","title":"0.110.3","text":""},{"location":"release-notes/#docs_17","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update references to Python version, ReadyAPI supports all the current versions, no need to make the version explicit. PR #11496 by @khulnasoft.</li> <li>\u270f\ufe0f Fix typo in <code>readyapi/security/api_key.py</code>. PR #11481 by @ch33zer.</li> <li>\u270f\ufe0f Fix typo in <code>security/http.py</code>. PR #11455 by @omarmoo5.</li> </ul>"},{"location":"release-notes/#translations_20","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/benchmarks.md</code>. PR #11484 by @KNChiu.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/readyapi-people.md</code>. PR #11476 by @billzhong.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/how-to/index.md</code> and <code>docs/zh/docs/how-to/general.md</code>. PR #11443 by @billzhong.</li> <li>\ud83c\udf10 Add Spanish translation for cookie-params <code>docs/es/docs/tutorial/cookie-params.md</code>. PR #11410 by @fabianfalon.</li> </ul>"},{"location":"release-notes/#internal_22","title":"Internal","text":"<ul> <li>\u2b06 Bump mkdocstrings[python] from 0.23.0 to 0.24.3. PR #11469 by @dependabot[bot].</li> <li>\ud83d\udd28 Update internal scripts and remove unused ones. PR #11499 by @khulnasoft.</li> <li>\ud83d\udd27 Migrate from Hatch to PDM for the internal build. PR #11498 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade MkDocs Material and re-enable cards. PR #11466 by @khulnasoft.</li> <li>\u2b06 Bump pillow from 10.2.0 to 10.3.0. PR #11403 by @dependabot[bot].</li> <li>\ud83d\udd27 Ungroup dependabot updates. PR #11465 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01102","title":"0.110.2","text":""},{"location":"release-notes/#fixes_9","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix support for query parameters with list types, handle JSON encoding Pydantic <code>UndefinedType</code>. PR #9929 by @arjwilliams.</li> </ul>"},{"location":"release-notes/#refactors_12","title":"Refactors","text":"<ul> <li>\u267b\ufe0f Simplify Pydantic configs in OpenAPI models in <code>readyapi/openapi/models.py</code>. PR #10886 by @JoeTanto2.</li> <li>\u2728 Add support for Pydantic's 2.7 new deprecated Field parameter, remove URL from validation errors response. PR #11461 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_18","title":"Docs","text":"<ul> <li>\ud83d\udcdd Fix types in examples under <code>examples/extra_data_types</code>. PR #10535 by @nilslindemann.</li> <li>\ud83d\udcdd Update references to UJSON. PR #11464 by @khulnasoft.</li> <li>\ud83d\udcdd Tweak docs and translations links, typos, format. PR #11389 by @nilslindemann.</li> <li>\ud83d\udcdd Fix typo in <code>docs/es/docs/async.md</code>. PR #11400 by @fabianfalon.</li> <li>\ud83d\udcdd Update OpenAPI client generation docs to use <code>@hey-api/openapi-ts</code>. PR #11339 by @jordanshatford.</li> </ul>"},{"location":"release-notes/#translations_21","title":"Translations","text":"<ul> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/index.html</code>. PR #11430 by @waketzheng.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md</code>. PR #11411 by @anton2yakovlev.</li> <li>\ud83c\udf10 Add Portuguese translations for <code>learn/index.md</code> <code>resources/index.md</code> <code>help/index.md</code> <code>about/index.md</code>. PR #10807 by @nazarepiedady.</li> <li>\ud83c\udf10 Update Russian translations for deployments docs. PR #11271 by @Lufa1u.</li> <li>\ud83c\udf10 Add Bengali translations for <code>docs/bn/docs/python-types.md</code>. PR #11376 by @imtiaz101325.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/security/simple-oauth2.md</code>. PR #5744 by @KdHyeon0661.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/help-readyapi.md</code>. PR #4139 by @kty4119.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/events.md</code>. PR #5087 by @pers0n4.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/path-operation-configuration.md</code>. PR #1954 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/request-forms-and-files.md</code>. PR #1946 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/dependencies/dependencies-with-yield.md</code>. PR #10532 by @AlertRED.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/debugging.md</code>. PR #5695 by @JungWooGeon.</li> </ul>"},{"location":"release-notes/#internal_23","title":"Internal","text":"<ul> <li>\u2b06\ufe0f Upgrade version of cligenius for docs. PR #11393 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01101","title":"0.110.1","text":""},{"location":"release-notes/#fixes_10","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix parameterless <code>Depends()</code> with generics. PR #9479 by @nzig.</li> </ul>"},{"location":"release-notes/#refactors_13","title":"Refactors","text":"<ul> <li>\u267b\ufe0f Update mypy. PR #11049 by @k0t3n.</li> <li>\u267b\ufe0f Simplify string format with f-strings in <code>readyapi/applications.py</code>. PR #11335 by @igeni.</li> </ul>"},{"location":"release-notes/#upgrades_7","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette to &gt;=0.37.2,&lt;0.38.0, remove Starlette filterwarning for internal tests. PR #11266 by @nothielf.</li> </ul>"},{"location":"release-notes/#docs_19","title":"Docs","text":"<ul> <li>\ud83d\udcdd Tweak docs and translations links and remove old docs translations. PR #11381 by @khulnasoft.</li> <li>\u270f\ufe0f Fix typo in <code>readyapi/security/oauth2.py</code>. PR #11368 by @shandongbinzhou.</li> <li>\ud83d\udcdd Update links to Pydantic docs to point to new website. PR #11328 by @alejsdev.</li> <li>\u270f\ufe0f Fix typo in <code>docs/en/docs/tutorial/extra-models.md</code>. PR #11329 by @alejsdev.</li> <li>\ud83d\udcdd Update <code>project-generation.md</code>. PR #11326 by @alejsdev.</li> <li>\ud83d\udcdd Update External Links. PR #11327 by @alejsdev.</li> <li>\ud83d\udd25 Remove link to Pydantic's benchmark, on other i18n pages.. PR #11224 by @hirotoKirimaru.</li> <li>\u270f\ufe0f Fix typos in docstrings. PR #11295 by @davidhuser.</li> <li>\ud83d\udee0\ufe0f Improve Node.js script in docs to generate TypeScript clients. PR #11293 by @alejsdev.</li> <li>\ud83d\udcdd Update examples for tests to replace \"inexistent\" for \"nonexistent\". PR #11220 by @Homesteady.</li> <li>\ud83d\udcdd Update <code>python-multipart</code> GitHub link in all docs from <code>https://andrew-d.github.io/python-multipart/</code> to <code>https://github.com/Kludex/python-multipart</code>. PR #11239 by @joshjhans.</li> </ul>"},{"location":"release-notes/#translations_22","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/response-status-code.md</code>. PR #10357 by @nilslindemann.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/query-params.md</code>. PR #3480 by @jaystone776.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/body.md</code>. PR #3481 by @jaystone776.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/path-params.md</code>. PR #3479 by @jaystone776.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/tutorial/body-fields.md</code>. PR #3496 by @jaystone776.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/tutorial/extra-models.md</code>. PR #3497 by @jaystone776.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/metadata.md</code>. PR #2667 by @tokusumi.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/contributing.md</code>. PR #10487 by @nilslindemann.</li> <li>\ud83c\udf10 Update Japanese translation of <code>docs/ja/docs/tutorial/query-params.md</code>. PR #10808 by @urushio.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/security/get-current-user.md</code>. PR #3842 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/openapi-callbacks.md</code>. PR #3825 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/extending-openapi.md</code>. PR #3823 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/testing-dependencies.md</code>. PR #3819 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/custom-request-and-route.md</code>. PR #3816 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/external-links.md</code>. PR #3833 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/templates.md</code>. PR #3812 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/sub-applications.md</code>. PR #3811 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/async-sql-databases.md</code>. PR #3805 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/middleware.md</code>. PR #3804 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/dataclasses.md</code>. PR #3803 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/using-request-directly.md</code>. PR #3802 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/security/http-basic-auth.md</code>. PR #3801 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/security/oauth2-scopes.md</code>. PR #3800 by @jaystone776.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/cookie-params.md</code>. PR #3486 by @jaystone776.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/header-params.md</code>. PR #3487 by @jaystone776.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/tutorial/response-status-code.md</code>. PR #3498 by @jaystone776.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/security/first-steps.md</code>. PR #10432 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/events.md</code>. PR #10693 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/deployment/cloud.md</code>. PR #10746 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/behind-a-proxy.md</code>. PR #10675 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/help-readyapi.md</code>. PR #10455 by @nilslindemann.</li> <li>\ud83c\udf10 Update German translation for <code>docs/de/docs/python-types.md</code>. PR #10287 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/path-params.md</code>. PR #10290 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/handling-errors.md</code>. PR #10379 by @nilslindemann.</li> <li>\ud83c\udf10 Update German translation for <code>docs/de/docs/index.md</code>. PR #10283 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/security/http-basic-auth.md</code>. PR #10651 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/bigger-applications.md</code>. PR #10554 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/path-operation-advanced-configuration.md</code>. PR #10612 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/static-files.md</code>. PR #10584 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/security/oauth2-jwt.md</code>. PR #10522 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/response-model.md</code>. PR #10345 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/extra-models.md</code>. PR #10351 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/body-updates.md</code>. PR #10396 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/alternatives.md</code>. PR #10855 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/templates.md</code>. PR #10678 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/security/oauth2-scopes.md</code>. PR #10643 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/async-tests.md</code>. PR #10708 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/metadata.md</code>. PR #10581 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/testing.md</code>. PR #10586 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/schema-extra-example.md</code>. PR #10597 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/index.md</code>. PR #10611 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/response-directly.md</code>. PR #10618 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/additional-responses.md</code>. PR #10626 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/response-cookies.md</code>. PR #10627 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/response-headers.md</code>. PR #10628 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/response-change-status-code.md</code>. PR #10632 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/advanced-dependencies.md</code>. PR #10633 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/security/index.md</code>. PR #10635 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/using-request-directly.md</code>. PR #10653 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/dataclasses.md</code>. PR #10667 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/middleware.md</code>. PR #10668 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/sub-applications.md</code>. PR #10671 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/websockets.md</code>. PR #10687 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/testing-websockets.md</code>. PR #10703 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/testing-events.md</code>. PR #10704 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/testing-dependencies.md</code>. PR #10706 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/openapi-callbacks.md</code>. PR #10710 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/settings.md</code>. PR #10709 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/wsgi.md</code>. PR #10713 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/deployment/index.md</code>. PR #10733 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/deployment/https.md</code>. PR #10737 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/deployment/manually.md</code>. PR #10738 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/deployment/concepts.md</code>. PR #10744 by @nilslindemann.</li> <li>\ud83c\udf10 Update German translation for <code>docs/de/docs/features.md</code>. PR #10284 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/deployment/server-workers.md</code>. PR #10747 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/deployment/docker.md</code>. PR #10759 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/how-to/index.md</code>. PR #10769 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/how-to/general.md</code>. PR #10770 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/how-to/graphql.md</code>. PR #10788 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/how-to/custom-request-and-route.md</code>. PR #10789 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/how-to/conditional-openapi.md</code>. PR #10790 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/how-to/separate-openapi-schemas.md</code>. PR #10796 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/how-to/configure-swagger-ui.md</code>. PR #10804 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/how-to/custom-docs-ui-assets.md</code>. PR #10803 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/parameters.md</code>. PR #10814 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/status.md</code>. PR #10815 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/uploadfile.md</code>. PR #10816 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/exceptions.md</code>. PR #10817 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/dependencies.md</code>. PR #10818 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/apirouter.md</code>. PR #10819 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/websockets.md</code>. PR #10822 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/httpconnection.md</code>. PR #10823 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/response.md</code>. PR #10824 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/middleware.md</code>. PR #10837 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/openapi/*.md</code>. PR #10838 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/security/index.md</code>. PR #10839 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/staticfiles.md</code>. PR #10841 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/testclient.md</code>. PR #10843 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/project-generation.md</code>. PR #10851 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/history-design-future.md</code>. PR #10865 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/dependencies/dependencies-with-yield.md</code>. PR #10422 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/dependencies/global-dependencies.md</code>. PR #10420 by @nilslindemann.</li> <li>\ud83c\udf10 Update German translation for <code>docs/de/docs/readyapi-people.md</code>. PR #10285 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/dependencies/sub-dependencies.md</code>. PR #10409 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/security/index.md</code>. PR #10429 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md</code>. PR #10411 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/extra-data-types.md</code>. PR #10534 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/security/simple-oauth2.md</code>. PR #10504 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/security/get-current-user.md</code>. PR #10439 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/request-forms-and-files.md</code>. PR #10368 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/encoder.md</code>. PR #10385 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/request-forms.md</code>. PR #10361 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/deployment/versions.md</code>. PR #10491 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/async.md</code>. PR #10449 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/cookie-params.md</code>. PR #10323 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/dependencies/classes-as-dependencies.md</code>. PR #10407 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/dependencies/index.md</code>. PR #10399 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/header-params.md</code>. PR #10326 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/path-params-numeric-validations.md</code>. PR #10307 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/query-params-str-validations.md</code>. PR #10304 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/request-files.md</code>. PR #10364 by @nilslindemann.</li> <li>:globe_with_meridians: Add Portuguese translation for <code>docs/pt/docs/advanced/templates.md</code>. PR #11338 by @SamuelBFavarin.</li> <li>\ud83c\udf10 Add Bengali translations for <code>docs/bn/docs/learn/index.md</code>. PR #11337 by @imtiaz101325.</li> <li>\ud83c\udf10 Fix Korean translation for <code>docs/ko/docs/index.md</code>. PR #11296 by @choi-haram.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/about/index.md</code>. PR #11299 by @choi-haram.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/index.md</code>. PR #9613 by @ElliottLarsen.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/how-to/extending-openapi.md</code>. PR #10794 by @nilslindemann.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/metadata.md</code>. PR #11286 by @jackleeio.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/contributing.md</code>. PR #10887 by @Aruelius.</li> <li>\ud83c\udf10 Add Azerbaijani translation for <code>docs/az/docs/readyapi-people.md</code>. PR #11195 by @vusallyv.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/dependencies/index.md</code>. PR #11223 by @kohiry.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/query-params.md</code>. PR #11242 by @jackleeio.</li> <li>\ud83c\udf10 Add Azerbaijani translation for <code>docs/az/learn/index.md</code>. PR #11192 by @vusallyv.</li> </ul>"},{"location":"release-notes/#internal_24","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #11387 by @khulnasoft.</li> <li>\u2b06 Bump actions/cache from 3 to 4. PR #10988 by @dependabot[bot].</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.8.11 to 1.8.14. PR #11318 by @dependabot[bot].</li> <li>\u2b06 Bump pillow from 10.1.0 to 10.2.0. PR #11011 by @dependabot[bot].</li> <li>\u2b06 Bump black from 23.3.0 to 24.3.0. PR #11325 by @dependabot[bot].</li> <li>\ud83d\udc77 Add cron to run test once a week on monday. PR #11377 by @estebanx64.</li> <li>\u2795 Replace mkdocs-markdownextradata-plugin with mkdocs-macros-plugin. PR #11383 by @khulnasoft.</li> <li>\ud83d\udc77 Disable MkDocs insiders social plugin while an issue in MkDocs Material is handled. PR #11373 by @khulnasoft.</li> <li>\ud83d\udc77 Fix logic for when to install and use MkDocs Insiders. PR #11372 by @khulnasoft.</li> <li>\ud83d\udc77 Do not use Python packages cache for publish. PR #11366 by @khulnasoft.</li> <li>\ud83d\udc77 Add CI to test sdists for redistribution (e.g. Linux distros). PR #11365 by @khulnasoft.</li> <li>\ud83d\udc77 Update build-docs GitHub Action path filter. PR #11354 by @khulnasoft.</li> <li>\ud83d\udd27 Update Ruff config, add extra ignore rule from SQLDev. PR #11353 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade configuration for Ruff v0.2.0. PR #11075 by @charliermarsh.</li> <li>\ud83d\udd27 Update sponsors, add MongoDB. PR #11346 by @khulnasoft.</li> <li>\u2b06 Bump dorny/paths-filter from 2 to 3. PR #11028 by @dependabot[bot].</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 3.0.0 to 3.1.4. PR #11310 by @dependabot[bot].</li> <li>\u267b\ufe0f Refactor computing ReadyAPI People, include 3 months, 6 months, 1 year, based on comment date, not discussion date. PR #11304 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #11228 by @khulnasoft.</li> <li>\ud83d\udd25 Remove Jina AI QA Bot from the docs. PR #11268 by @nan-wang.</li> <li>\ud83d\udd27 Update sponsors, remove Jina, remove Powens, move TestDriven.io. PR #11213 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01100","title":"0.110.0","text":""},{"location":"release-notes/#breaking-changes_1","title":"Breaking Changes","text":"<ul> <li>\ud83d\udc1b Fix unhandled growing memory for internal server errors, refactor dependencies with <code>yield</code> and <code>except</code> to require raising again as in regular Python. PR #11191 by @khulnasoft.<ul> <li>This is a breaking change (and only slightly) if you used dependencies with <code>yield</code>, used <code>except</code> in those dependencies, and didn't raise again.</li> <li>This was reported internally by @rushilsrivastava as a memory leak when the server had unhandled exceptions that would produce internal server errors, the memory allocated before that point would not be released.</li> <li>Read the new docs: Dependencies with <code>yield</code> and <code>except</code>.</li> </ul> </li> </ul> <p>In short, if you had dependencies that looked like:</p> <pre><code>def my_dep():\n    try:\n        yield\n    except SomeException:\n        pass\n</code></pre> <p>Now you need to make sure you raise again after <code>except</code>, just as you would in regular Python:</p> <pre><code>def my_dep():\n    try:\n        yield\n    except SomeException:\n        raise\n</code></pre>"},{"location":"release-notes/#docs_20","title":"Docs","text":"<ul> <li>\u270f\ufe0f Fix minor typos in <code>docs/ko/docs/</code>. PR #11126 by @KaniKim.</li> <li>\u270f\ufe0f Fix minor typo in <code>readyapi/applications.py</code>. PR #11099 by @JacobHayes.</li> </ul>"},{"location":"release-notes/#translations_23","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/background.md</code>. PR #10820 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/templating.md</code>. PR #10842 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/external-links.md</code>. PR #10852 by @nilslindemann.</li> <li>\ud83c\udf10 Update Turkish translation for <code>docs/tr/docs/tutorial/query-params.md</code>. PR #11162 by @hasansezertasan.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/encoders.md</code>. PR #10840 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/responses.md</code>. PR #10825 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/request.md</code>. PR #10821 by @nilslindemann.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/tutorial/query-params.md</code>. PR #11078 by @emrhnsyts.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/readyapi.md</code>. PR #10813 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/newsletter.md</code>. PR #10853 by @nilslindemann.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/learn/index.md</code>. PR #11142 by @hsuanchi.</li> <li>\ud83c\udf10 Add Korean translation for <code>/docs/ko/docs/tutorial/dependencies/global-dependencies.md</code>. PR #11123 by @riroan.</li> <li>\ud83c\udf10 Add Korean translation for <code>/docs/ko/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md</code>. PR #11124 by @riroan.</li> <li>\ud83c\udf10 Add Korean translation for <code>/docs/ko/docs/tutorial/schema-extra-example.md</code>. PR #11121 by @KaniKim.</li> <li>\ud83c\udf10 Add Korean translation for <code>/docs/ko/docs/tutorial/body-fields.md</code>. PR #11112 by @KaniKim.</li> <li>\ud83c\udf10 Add Korean translation for <code>/docs/ko/docs/tutorial/cookie-params.md</code>. PR #11118 by @riroan.</li> <li>\ud83c\udf10 Update Korean translation for <code>/docs/ko/docs/dependencies/index.md</code>. PR #11114 by @KaniKim.</li> <li>\ud83c\udf10 Update Korean translation for <code>/docs/ko/docs/deployment/docker.md</code>. PR #11113 by @KaniKim.</li> <li>\ud83c\udf10 Update Turkish translation for <code>docs/tr/docs/tutorial/first-steps.md</code>. PR #11094 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/advanced/security/index.md</code>. PR #2278 by @Xaraxx.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/advanced/response-headers.md</code>. PR #2276 by @Xaraxx.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/deployment/index.md</code> and <code>~/deployment/versions.md</code>. PR #9669 by @pabloperezmoya.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/benchmarks.md</code>. PR #10928 by @pablocm83.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/advanced/response-change-status-code.md</code>. PR #11100 by @alejsdev.</li> </ul>"},{"location":"release-notes/#01092","title":"0.109.2","text":""},{"location":"release-notes/#upgrades_8","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade version of Starlette to <code>&gt;= 0.36.3</code>. PR #11086 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_24","title":"Translations","text":"<ul> <li>\ud83c\udf10 Update Turkish translation for <code>docs/tr/docs/readyapi-people.md</code>. PR #10547 by @alperiox.</li> </ul>"},{"location":"release-notes/#internal_25","title":"Internal","text":"<ul> <li>\ud83c\udf71 Add new ReadyAPI logo. PR #11090 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01091","title":"0.109.1","text":""},{"location":"release-notes/#security-fixes","title":"Security fixes","text":"<ul> <li>\u2b06\ufe0f Upgrade minimum version of <code>python-multipart</code> to <code>&gt;=0.0.7</code> to fix a vulnerability when using form data with a ReDos attack. You can also simply upgrade <code>python-multipart</code>.</li> </ul> <p>Read more in the advisory: Content-Type Header ReDoS.</p>"},{"location":"release-notes/#features_4","title":"Features","text":"<ul> <li>\u2728  Include HTTP 205 in status codes with no body. PR #10969 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#refactors_14","title":"Refactors","text":"<ul> <li>\u2705 Refactor tests for duplicate operation ID generation for compatibility with other tools running the ReadyAPI test suite. PR #10876 by @emmettbutler.</li> <li>\u267b\ufe0f Simplify string format with f-strings in <code>readyapi/utils.py</code>. PR #10576 by @eukub.</li> <li>\ud83d\udd27 Fix Ruff configuration unintentionally enabling and re-disabling mccabe complexity check. PR #10893 by @jiridanek.</li> <li>\u2705 Re-enable test in <code>tests/test_tutorial/test_header_params/test_tutorial003.py</code> after fix in Starlette. PR #10904 by @ooknimm.</li> </ul>"},{"location":"release-notes/#docs_21","title":"Docs","text":"<ul> <li>\ud83d\udcdd Tweak wording in <code>help-readyapi.md</code>. PR #11040 by @khulnasoft.</li> <li>\ud83d\udcdd Tweak docs for Behind a Proxy. PR #11038 by @khulnasoft.</li> <li>\ud83d\udcdd Add External Link: 10 Tips for adding SQLAlchemy to ReadyAPI. PR #11036 by @Donnype.</li> <li>\ud83d\udcdd Add External Link: Tips on migrating from Flask to ReadyAPI and vice-versa. PR #11029 by @jtemporal.</li> <li>\ud83d\udcdd Deprecate old tutorials: Peewee, Couchbase, encode/databases. PR #10979 by @khulnasoft.</li> <li>\u270f\ufe0f Fix typo in <code>readyapi/security/oauth2.py</code>. PR #10972 by @RafalSkolasinski.</li> <li>\ud83d\udcdd Update <code>HTTPException</code> details in <code>docs/en/docs/tutorial/handling-errors.md</code>. PR #5418 by @papb.</li> <li>\u270f\ufe0f A few tweaks in <code>docs/de/docs/tutorial/first-steps.md</code>. PR #10959 by @nilslindemann.</li> <li>\u270f\ufe0f Fix link in <code>docs/en/docs/advanced/async-tests.md</code>. PR #10960 by @nilslindemann.</li> <li>\u270f\ufe0f Fix typos for Spanish documentation. PR #10957 by @jlopezlira.</li> <li>\ud83d\udcdd Add warning about lifespan functions and backwards compatibility with events. PR #10734 by @jacob-indigo.</li> <li>\u270f\ufe0f Fix broken link in <code>docs/tutorial/sql-databases.md</code> in several languages. PR #10716 by @theoohoho.</li> <li>\u270f\ufe0f Remove broken links from <code>external_links.yml</code>. PR #10943 by @Torabek.</li> <li>\ud83d\udcdd Update template docs with more info about <code>url_for</code>. PR #5937 by @EzzEddin.</li> <li>\ud83d\udcdd Update usage of Token model in security docs. PR #9313 by @piotrszacilowski.</li> <li>\u270f\ufe0f Update highlighted line in <code>docs/en/docs/tutorial/bigger-applications.md</code>. PR #5490 by @papb.</li> <li>\ud83d\udcdd Add External Link: Explore How to Effectively Use JWT With ReadyAPI. PR #10212 by @aanchlia.</li> <li>\ud83d\udcdd Add hyperlink to <code>docs/en/docs/tutorial/static-files.md</code>. PR #10243 by @hungtsetse.</li> <li>\ud83d\udcdd Add External Link: Instrument a ReadyAPI service adding tracing with OpenTelemetry and send/show traces in Grafana Tempo. PR #9440 by @softwarebloat.</li> <li>\ud83d\udcdd Review and rewording of <code>en/docs/contributing.md</code>. PR #10480 by @nilslindemann.</li> <li>\ud83d\udcdd Add External Link: ML serving and monitoring with ReadyAPI and Evidently. PR #9701 by @mnrozhkov.</li> <li>\ud83d\udcdd Reword in docs, from \"have in mind\" to \"keep in mind\". PR #10376 by @malicious.</li> <li>\ud83d\udcdd Add External Link: Talk by Jeny Sadadia. PR #10265 by @JenySadadia.</li> <li>\ud83d\udcdd Add location info to <code>tutorial/bigger-applications.md</code>. PR #10552 by @nilslindemann.</li> <li>\u270f\ufe0f Fix Pydantic method name in <code>docs/en/docs/advanced/path-operation-advanced-configuration.md</code>. PR #10826 by @ahmedabdou14.</li> </ul>"},{"location":"release-notes/#translations_25","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/external-links.md</code>. PR #10933 by @pablocm83.</li> <li>\ud83c\udf10 Update Korean translation for <code>docs/ko/docs/tutorial/first-steps.md</code>, <code>docs/ko/docs/tutorial/index.md</code>, <code>docs/ko/docs/tutorial/path-params.md</code>, and <code>docs/ko/docs/tutorial/query-params.md</code>. PR #4218 by @SnowSuno.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/dependencies/dependencies-with-yield.md</code>. PR #10870 by @zhiquanchi.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/deployment/concepts.md</code>. PR #10282 by @xzmeng.</li> <li>\ud83c\udf10 Add Azerbaijani translation for <code>docs/az/docs/index.md</code>. PR #11047 by @aykhans.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/middleware.md</code>. PR #2829 by @JeongHyeongKim.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/body-nested-models.md</code>. PR #10313 by @nilslindemann.</li> <li>\ud83c\udf10 Add Persian translation for <code>docs/fa/docs/tutorial/middleware.md</code>. PR #9695 by @mojtabapaso.</li> <li>\ud83c\udf10 Update Farsi translation for <code>docs/fa/docs/index.md</code>. PR #10216 by @theonlykingpin.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/body-fields.md</code>. PR #10310 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/body.md</code>. PR #10295 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/body-multiple-params.md</code>. PR #10308 by @nilslindemann.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/security/get-current-user.md</code>. PR #2681 by @sh0nk.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/advanced-dependencies.md</code>. PR #3798 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/events.md</code>. PR #3815 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/behind-a-proxy.md</code>. PR #3820 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/testing-events.md</code>. PR #3818 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/testing-websockets.md</code>. PR #3817 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/testing-database.md</code>. PR #3821 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/deployment/deta.md</code>. PR #3837 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/history-design-future.md</code>. PR #3832 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/project-generation.md</code>. PR #3831 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/deployment/docker.md</code>. PR #10296 by @xzmeng.</li> <li>\ud83c\udf10 Update Spanish translation for <code>docs/es/docs/features.md</code>. PR #10884 by @pablocm83.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/newsletter.md</code>. PR #10922 by @pablocm83.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/background-tasks.md</code>. PR #5910 by @junah201.</li> <li>:globe_with_meridians: Add Turkish translation for <code>docs/tr/docs/alternatives.md</code>. PR #10502 by @alperiox.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/dependencies/index.md</code>. PR #10989 by @KaniKim.</li> <li>\ud83c\udf10 Add Korean translation for <code>/docs/ko/docs/tutorial/body.md</code>. PR #11000 by @KaniKim.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/schema-extra-example.md</code>. PR #4065 by @luccasmmg.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/history-design-future.md</code>. PR #11012 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/resources/index.md</code>. PR #11020 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/how-to/index.md</code>. PR #11021 by @hasansezertasan.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/query-params.md</code>. PR #10293 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/benchmarks.md</code>. PR #10866 by @nilslindemann.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/learn/index.md</code>. PR #11014 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Persian translation for <code>docs/fa/docs/tutorial/security/index.md</code>. PR #9945 by @mojtabapaso.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/help/index.md</code>. PR #11013 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/about/index.md</code>. PR #11006 by @hasansezertasan.</li> <li>\ud83c\udf10 Update Turkish translation for <code>docs/tr/docs/benchmarks.md</code>. PR #11005 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Italian translation for <code>docs/it/docs/index.md</code>. PR #5233 by @matteospanio.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/help/index.md</code>. PR #10983 by @KaniKim.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/features.md</code>. PR #10976 by @KaniKim.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/security/get-current-user.md</code>. PR #5737 by @KdHyeon0661.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/security/first-steps.md</code>. PR #10541 by @AlertRED.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/handling-errors.md</code>. PR #10375 by @AlertRED.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/encoder.md</code>. PR #10374 by @AlertRED.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/body-updates.md</code>. PR #10373 by @AlertRED.</li> <li>\ud83c\udf10 Russian translation: updated <code>readyapi-people.md</code>.. PR #10255 by @NiKuma0.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/security/index.md</code>. PR #5798 by @3w36zj6.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/generate-clients.md</code>. PR #10725 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/openapi-webhooks.md</code>. PR #10712 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/custom-response.md</code>. PR #10624 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/additional-status-codes.md</code>. PR #10617 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/middleware.md</code>. PR #10391 by @JohannesJungbluth.</li> <li>\ud83c\udf10 Add German translation for introduction documents. PR #10497 by @nilslindemann.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/encoder.md</code>. PR #1955 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/extra-data-types.md</code>. PR #1932 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/async.md</code>. PR #5191 by @BilalAlpaslan.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/project-generation.md</code>. PR #5192 by @BilalAlpaslan.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/deployment/docker.md</code>. PR #5657 by @nearnear.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/deployment/server-workers.md</code>. PR #4935 by @jujumilk3.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/deployment/index.md</code>. PR #4561 by @jujumilk3.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/path-operation-configuration.md</code>. PR #3639 by @jungsu-kwon.</li> <li>\ud83c\udf10 Modify the description of <code>zh</code> - Traditional Chinese. PR #10889 by @cherinyy.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/static-files.md</code>. PR #2957 by @jeesang7.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/response-model.md</code>. PR #2766 by @hard-coders.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/body-multiple-params.md</code>. PR #2461 by @PandaHun.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/query-params-str-validations.md</code>. PR #2415 by @hard-coders.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/python-types.md</code>. PR #2267 by @jrim.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/body-nested-models.md</code>. PR #2506 by @hard-coders.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/learn/index.md</code>. PR #10977 by @KaniKim.</li> <li>\ud83c\udf10 Initialize translations for Traditional Chinese. PR #10505 by @hsuanchi.</li> <li>\u270f\ufe0f Tweak the german translation of <code>docs/de/docs/tutorial/index.md</code>. PR #10962 by @nilslindemann.</li> <li>\u270f\ufe0f Fix typo error in <code>docs/ko/docs/tutorial/path-params.md</code>. PR #10758 by @2chanhaeng.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/dependencies/dependencies-with-yield.md</code>. PR #1961 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md</code>. PR #1960 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/dependencies/sub-dependencies.md</code>. PR #1959 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/background-tasks.md</code>. PR #2668 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/dependencies/index.md</code> and <code>docs/ja/docs/tutorial/dependencies/classes-as-dependencies.md</code>. PR #1958 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/response-model.md</code>. PR #1938 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/body-multiple-params.md</code>. PR #1903 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/path-params-numeric-validations.md</code>. PR #1902 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/python-types.md</code>. PR #1899 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/handling-errors.md</code>. PR #1953 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/response-status-code.md</code>. PR #1942 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/extra-models.md</code>. PR #1941 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese tranlsation for <code>docs/ja/docs/tutorial/schema-extra-example.md</code>. PR #1931 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/body-nested-models.md</code>. PR #1930 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/body-fields.md</code>. PR #1923 by @SwftAlpc.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/index.md</code>. PR #9502 by @fhabers21.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/background-tasks.md</code>. PR #10566 by @nilslindemann.</li> <li>\u270f\ufe0f Fix typo in <code>docs/ru/docs/index.md</code>. PR #10672 by @Delitel-WEB.</li> <li>\u270f\ufe0f Fix typos in <code>docs/zh/docs/tutorial/extra-data-types.md</code>. PR #10727 by @HiemalBeryl.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/dependencies/classes-as-dependencies.md</code>. PR #10410 by @AlertRED.</li> </ul>"},{"location":"release-notes/#internal_26","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #11074 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors: add Coherence. PR #11066 by @khulnasoft.</li> <li>\ud83d\udc77 Upgrade GitHub Action issue-manager. PR #11056 by @khulnasoft.</li> <li>\ud83c\udf71 Update sponsors: TalkPython badge. PR #11052 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors: TalkPython badge image. PR #11048 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, remove Deta. PR #11041 by @khulnasoft.</li> <li>\ud83d\udc84 Fix CSS breaking RTL languages (erroneously introduced by a previous RTL PR). PR #11039 by @khulnasoft.</li> <li>\ud83d\udd27 Add Italian to <code>mkdocs.yml</code>. PR #11016 by @alejsdev.</li> <li>\ud83d\udd28 Verify <code>mkdocs.yml</code> languages in CI, update <code>docs.py</code>. PR #11009 by @khulnasoft.</li> <li>\ud83d\udd27 Update config in <code>label-approved.yml</code> to accept translations with 1 reviewer. PR #11007 by @alejsdev.</li> <li>\ud83d\udc77 Add changes-requested handling in GitHub Action issue manager. PR #10971 by @khulnasoft.</li> <li>\ud83d\udd27  Group dependencies on dependabot updates. PR #10952 by @Kludex.</li> <li>\u2b06 Bump actions/setup-python from 4 to 5. PR #10764 by @dependabot[bot].</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.8.10 to 1.8.11. PR #10731 by @dependabot[bot].</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.28.0 to 3.0.0. PR #10777 by @dependabot[bot].</li> <li>\ud83d\udd27  Add support for translations to languages with a longer code name, like <code>zh-hant</code>. PR #10950 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01090","title":"0.109.0","text":""},{"location":"release-notes/#features_5","title":"Features","text":"<ul> <li>\u2728 Add support for Python 3.12. PR #10666 by @Jamim.</li> </ul>"},{"location":"release-notes/#upgrades_9","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette to &gt;=0.35.0,&lt;0.36.0. PR #10938 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_22","title":"Docs","text":"<ul> <li>\u270f\ufe0f Fix typo in <code>docs/en/docs/alternatives.md</code>. PR #10931 by @s111d.</li> <li>\ud83d\udcdd Replace <code>email</code> with <code>username</code> in <code>examples/security/tutorial007</code> code examples. PR #10649 by @nilslindemann.</li> <li>\ud83d\udcdd Add VS Code tutorial link. PR #10592 by @nilslindemann.</li> <li>\ud83d\udcdd Add notes about Pydantic v2's new <code>.model_dump()</code>. PR #10929 by @khulnasoft.</li> <li>\ud83d\udcdd Fix broken link in <code>docs/en/docs/tutorial/sql-databases.md</code>. PR #10765 by @HurSungYun.</li> <li>\ud83d\udcdd Add External Link: ReadyAPI application monitoring made easy. PR #10917 by @khulnasoft.</li> <li>\u2728 Generate automatic language names for docs translations. PR #5354 by @jakul.</li> <li>\u270f\ufe0f Fix typos in <code>docs/en/docs/alternatives.md</code> and <code>docs/en/docs/tutorial/dependencies/index.md</code>. PR #10906 by @s111d.</li> <li>\u270f\ufe0f Fix typos in <code>docs/en/docs/tutorial/dependencies/dependencies-with-yield.md</code>. PR #10834 by @Molkree.</li> <li>\ud83d\udcdd Add article: \"Building a RESTful API with ReadyAPI: Secure Signup and Login Functionality Included\". PR #9733 by @dxphilo.</li> <li>\ud83d\udcdd Add warning about lifecycle events with <code>AsyncClient</code>. PR #4167 by @andrew-chang-dewitt.</li> <li>\u270f\ufe0f Fix typos in <code>/docs/reference/exceptions.md</code> and <code>/en/docs/reference/status.md</code>. PR #10809 by @clarencepenz.</li> <li>\u270f\ufe0f Fix typo in <code>openapi-callbacks.md</code>. PR #10673 by @kayjan.</li> <li>\u270f\ufe0f Fix typo in <code>readyapi/routing.py</code> . PR #10520 by @sepsh.</li> <li>\ud83d\udcdd Replace HTTP code returned in case of existing user error in docs for testing. PR #4482 by @TristanMarion.</li> <li>\ud83d\udcdd Add blog for ReadyAPI &amp; Supabase. PR #6018 by @theinfosecguy.</li> <li>\ud83d\udcdd Update example source files for SQL databases with SQLAlchemy. PR #9508 by @s-mustafa.</li> <li>\ud83d\udcdd Update code examples in docs for body, replace name <code>create_item</code> with <code>update_item</code> when appropriate. PR #5913 by @OttoAndrey.</li> <li>\u270f\ufe0f Fix typo in dependencies with yield source examples. PR #10847 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_26","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Bengali translation for <code>docs/bn/docs/index.md</code>. PR #9177 by @Fahad-Md-Kamal.</li> <li>\u270f\ufe0f Update Python version in <code>index.md</code> in several languages. PR #10711 by @tamago3keran.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/request-forms-and-files.md</code>. PR #10347 by @AlertRED.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/index.md</code>. PR #10362 by @rostik1410.</li> <li>\u270f\ufe0f  Update Python version in <code>docs/ko/docs/index.md</code>. PR #10680 by @Eeap.</li> <li>\ud83c\udf10 Add Persian translation for <code>docs/fa/docs/features.md</code>. PR #5887 by @amirilf.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/additional-responses.md</code>. PR #10325 by @ShuibeiC.</li> <li>\ud83c\udf10 Fix typos in Russian translations for <code>docs/ru/docs/tutorial/background-tasks.md</code>, <code>docs/ru/docs/tutorial/body-nested-models.md</code>, <code>docs/ru/docs/tutorial/debugging.md</code>, <code>docs/ru/docs/tutorial/testing.md</code>. PR #10311 by @AlertRED.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/request-files.md</code>. PR #10332 by @AlertRED.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/deployment/server-workers.md</code>. PR #10292 by @xzmeng.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/deployment/cloud.md</code>. PR #10291 by @xzmeng.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/deployment/manually.md</code>. PR #10279 by @xzmeng.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/deployment/https.md</code>. PR #10277 by @xzmeng.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/deployment/index.md</code>. PR #10275 by @xzmeng.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/first-steps.md</code>. PR #9530 by @fhabers21.</li> <li>\ud83c\udf10 Update Turkish translation for <code>docs/tr/docs/index.md</code>. PR #10444 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/learn/index.md</code>. PR #10479 by @KAZAMA-DREAM.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/learn/index.md</code>. PR #10539 by @AlertRED.</li> <li>\ud83c\udf10 Update SQLAlchemy instruction in Chinese translation <code>docs/zh/docs/tutorial/sql-databases.md</code>. PR #9712 by @Royc30ne.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/external-links.md</code>. PR #10549 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/learn/index.md</code>. PR #10885 by @pablocm83.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/body-fields.md</code>. PR #10670 by @ArtemKhymenko.</li> <li>\ud83c\udf10 Add Hungarian translation for <code>/docs/hu/docs/index.md</code>. PR #10812 by @takacs.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/newsletter.md</code>. PR #10550 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/help/index.md</code>. PR #10907 by @pablocm83.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/about/index.md</code>. PR #10908 by @pablocm83.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/resources/index.md</code>. PR #10909 by @pablocm83.</li> </ul>"},{"location":"release-notes/#internal_27","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #10871 by @khulnasoft.</li> <li>\ud83d\udc77 Upgrade custom GitHub Action comment-docs-preview-in-pr. PR #10916 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade GitHub Action latest-changes. PR #10915 by @khulnasoft.</li> <li>\ud83d\udc77 Upgrade GitHub Action label-approved. PR #10913 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade GitHub Action label-approved. PR #10905 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01080","title":"0.108.0","text":""},{"location":"release-notes/#upgrades_10","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette to <code>&gt;=0.29.0,&lt;0.33.0</code>, update docs and usage of templates with new Starlette arguments. Remove pin of AnyIO <code>&gt;=3.7.1,&lt;4.0.0</code>, add support for AnyIO 4.x.x. PR #10846 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01070","title":"0.107.0","text":""},{"location":"release-notes/#upgrades_11","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette to 0.28.0. PR #9636 by @adriangb.</li> </ul>"},{"location":"release-notes/#docs_23","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add docs: Node.js script alternative to update OpenAPI for generated clients. PR #10845 by @alejsdev.</li> <li>\ud83d\udcdd Restructure Docs section in Contributing page. PR #10844 by @alejsdev.</li> </ul>"},{"location":"release-notes/#01060","title":"0.106.0","text":""},{"location":"release-notes/#breaking-changes_2","title":"Breaking Changes","text":"<p>Using resources from dependencies with <code>yield</code> in background tasks is no longer supported.</p> <p>This change is what supports the new features, read below. \ud83e\udd13</p>"},{"location":"release-notes/#dependencies-with-yield-httpexception-and-background-tasks","title":"Dependencies with <code>yield</code>, <code>HTTPException</code> and Background Tasks","text":"<p>Dependencies with <code>yield</code> now can raise <code>HTTPException</code> and other exceptions after <code>yield</code>. \ud83c\udf89</p> <p>Read the new docs here: Dependencies with <code>yield</code> and <code>HTTPException</code>.</p> <pre><code>from readyapi import Depends, ReadyAPI, HTTPException\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\ndata = {\n    \"plumbus\": {\"description\": \"Freshly pickled plumbus\", \"owner\": \"Morty\"},\n    \"portal-gun\": {\"description\": \"Gun to create portals\", \"owner\": \"Rick\"},\n}\n\n\nclass OwnerError(Exception):\n    pass\n\n\ndef get_username():\n    try:\n        yield \"Rick\"\n    except OwnerError as e:\n        raise HTTPException(status_code=400, detail=f\"Owner error: {e}\")\n\n\n@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: Annotated[str, Depends(get_username)]):\n    if item_id not in data:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    item = data[item_id]\n    if item[\"owner\"] != username:\n        raise OwnerError(username)\n    return item\n</code></pre> <p>Before ReadyAPI 0.106.0, raising exceptions after <code>yield</code> was not possible, the exit code in dependencies with <code>yield</code> was executed after the response was sent, so Exception Handlers would have already run.</p> <p>This was designed this way mainly to allow using the same objects \"yielded\" by dependencies inside of background tasks, because the exit code would be executed after the background tasks were finished.</p> <p>Nevertheless, as this would mean waiting for the response to travel through the network while unnecessarily holding a resource in a dependency with yield (for example a database connection), this was changed in ReadyAPI 0.106.0.</p> <p>Additionally, a background task is normally an independent set of logic that should be handled separately, with its own resources (e.g. its own database connection).</p> <p>If you used to rely on this behavior, now you should create the resources for background tasks inside the background task itself, and use internally only data that doesn't depend on the resources of dependencies with <code>yield</code>.</p> <p>For example, instead of using the same database session, you would create a new database session inside of the background task, and you would obtain the objects from the database using this new session. And then instead of passing the object from the database as a parameter to the background task function, you would pass the ID of that object and then obtain the object again inside the background task function.</p> <p>The sequence of execution before ReadyAPI 0.106.0 was like this diagram:</p> <p>Time flows from top to bottom. And each column is one of the parts interacting or executing code.</p> <pre><code>sequenceDiagram\n\nparticipant client as Client\nparticipant handler as Exception handler\nparticipant dep as Dep with yield\nparticipant operation as Path Operation\nparticipant tasks as Background tasks\n\n    Note over client,tasks: Can raise exception for dependency, handled after response is sent\n    Note over client,operation: Can raise HTTPException and can change the response\n    client -&gt;&gt; dep: Start request\n    Note over dep: Run code up to yield\n    opt raise\n        dep --&gt;&gt; handler: Raise HTTPException\n        handler --&gt;&gt; client: HTTP error response\n        dep --&gt;&gt; dep: Raise other exception\n    end\n    dep -&gt;&gt; operation: Run dependency, e.g. DB session\n    opt raise\n        operation --&gt;&gt; dep: Raise HTTPException\n        dep --&gt;&gt; handler: Auto forward exception\n        handler --&gt;&gt; client: HTTP error response\n        operation --&gt;&gt; dep: Raise other exception\n        dep --&gt;&gt; handler: Auto forward exception\n    end\n    operation -&gt;&gt; client: Return response to client\n    Note over client,operation: Response is already sent, can't change it anymore\n    opt Tasks\n        operation --&gt;&gt; tasks: Send background tasks\n    end\n    opt Raise other exception\n        tasks --&gt;&gt; dep: Raise other exception\n    end\n    Note over dep: After yield\n    opt Handle other exception\n        dep --&gt;&gt; dep: Handle exception, can't change response. E.g. close DB session.\n    end</code></pre> <p>The new execution flow can be found in the docs: Execution of dependencies with <code>yield</code>.</p>"},{"location":"release-notes/#features_6","title":"Features","text":"<ul> <li>\u2728 Add support for raising exceptions (including <code>HTTPException</code>) in dependencies with <code>yield</code> in the exit code, do not support them in background tasks. PR #10831 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_28","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #10567 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01050","title":"0.105.0","text":""},{"location":"release-notes/#features_7","title":"Features","text":"<ul> <li>\u2728 Add support for multiple Annotated annotations, e.g. <code>Annotated[str, Field(), Query()]</code>. PR #10773 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#refactors_15","title":"Refactors","text":"<ul> <li>\ud83d\udd25 Remove unused NoneType. PR #10774 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_24","title":"Docs","text":"<ul> <li>\ud83d\udcdd Tweak default suggested configs for generating clients. PR #10736 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_29","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update sponsors, add Scalar. PR #10728 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, add PropelAuth. PR #10760 by @khulnasoft.</li> <li>\ud83d\udc77 Update build docs, verify README on CI. PR #10750 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, remove Fern. PR #10729 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, add Codacy. PR #10677 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, add Reflex. PR #10676 by @khulnasoft.</li> <li>\ud83d\udcdd Update release notes, move and check latest-changes. PR #10588 by @khulnasoft.</li> <li>\ud83d\udc77 Upgrade latest-changes GitHub Action. PR #10587 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01041","title":"0.104.1","text":""},{"location":"release-notes/#fixes_11","title":"Fixes","text":"<ul> <li>\ud83d\udccc Pin Swagger UI version to 5.9.0 temporarily to handle a bug crashing it in 5.9.1. PR #10529 by @alejandraklachquin.<ul> <li>This is not really a bug in ReadyAPI but in Swagger UI, nevertheless pinning the version will work while a solution is found on the Swagger UI side.</li> </ul> </li> </ul>"},{"location":"release-notes/#docs_25","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update data structure and render for external-links. PR #10495 by @khulnasoft.</li> <li>\u270f\ufe0f Fix link to SPDX license identifier in <code>docs/en/docs/tutorial/metadata.md</code>. PR #10433 by @worldworm.</li> <li>\ud83d\udcdd Update example validation error from Pydantic v1 to match Pydantic v2 in <code>docs/en/docs/tutorial/path-params.md</code>. PR #10043 by @giuliowaitforitdavide.</li> <li>\u270f\ufe0f Fix typos in emoji docs and in some source examples. PR #10438 by @afuetterer.</li> <li>\u270f\ufe0f Fix typo in <code>docs/en/docs/reference/dependencies.md</code>. PR #10465 by @suravshresth.</li> <li>\u270f\ufe0f Fix typos and rewordings in <code>docs/en/docs/tutorial/body-nested-models.md</code>. PR #10468 by @yogabonito.</li> <li>\ud83d\udcdd Update docs, remove references to removed <code>pydantic.Required</code> in <code>docs/en/docs/tutorial/query-params-str-validations.md</code>. PR #10469 by @yogabonito.</li> <li>\u270f\ufe0f Fix typo in <code>docs/en/docs/reference/index.md</code>. PR #10467 by @tarsil.</li> <li>\ud83d\udd25 Remove unnecessary duplicated docstrings. PR #10484 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_30","title":"Internal","text":"<ul> <li>\u270f\ufe0f Update Pydantic links to dotenv support. PR #10511 by @White-Mask.</li> <li>\u270f\ufe0f Update links in <code>docs/en/docs/async.md</code> and <code>docs/zh/docs/async.md</code> to make them relative. PR #10498 by @hasnatsajid.</li> <li>\u270f\ufe0f Fix links in <code>docs/em/docs/async.md</code>. PR #10507 by @hasnatsajid.</li> <li>\u270f\ufe0f Fix typo in <code>docs/em/docs/index.md</code>, Python 3.8. PR #10521 by @kerriop.</li> <li>\u2b06 Bump pillow from 9.5.0 to 10.1.0. PR #10446 by @dependabot[bot].</li> <li>\u2b06 Update mkdocs-material requirement from &lt;9.0.0,&gt;=8.1.4 to &gt;=8.1.4,&lt;10.0.0. PR #5862 by @dependabot[bot].</li> <li>\u2b06 Bump mkdocs-material from 9.1.21 to 9.4.7. PR #10545 by @dependabot[bot].</li> <li>\ud83d\udc77 Install MkDocs Material Insiders only when secrets are available, for Dependabot. PR #10544 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors badges, Databento. PR #10519 by @khulnasoft.</li> <li>\ud83d\udc77 Adopt Ruff format. PR #10517 by @khulnasoft.</li> <li>\ud83d\udd27 Add <code>CITATION.cff</code> file for academic citations. PR #10496 by @khulnasoft.</li> <li>\ud83d\udc1b Fix overriding MKDocs theme lang in hook. PR #10490 by @khulnasoft.</li> <li>\ud83d\udd25 Drop/close Gitter chat. Questions should go to GitHub Discussions, free conversations to Discord.. PR #10485 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01040","title":"0.104.0","text":""},{"location":"release-notes/#features_8","title":"Features","text":"<ul> <li>\u2728 Add reference (code API) docs with PEP 727, add subclass with custom docstrings for <code>BackgroundTasks</code>, refactor docs structure. PR #10392 by @khulnasoft. New docs at ReadyAPI Reference - Code API.</li> </ul>"},{"location":"release-notes/#upgrades_12","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Drop support for Python 3.7, require Python 3.8 or above. PR #10442 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_31","title":"Internal","text":"<ul> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.27.0 to 2.28.0. PR #10268 by @dependabot[bot].</li> <li>\u2b06 Bump actions/checkout from 3 to 4. PR #10208 by @dependabot[bot].</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.8.6 to 1.8.10. PR #10061 by @dependabot[bot].</li> <li>\ud83d\udd27 Update sponsors, Bump.sh images. PR #10381 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #10363 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01032","title":"0.103.2","text":""},{"location":"release-notes/#refactors_16","title":"Refactors","text":"<ul> <li>\u2b06\ufe0f Upgrade compatibility with Pydantic v2.4, new renamed functions and JSON Schema input/output models with default values. PR #10344 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_27","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/extra-data-types.md</code>. PR #10132 by @ArtemKhymenko.</li> <li>\ud83c\udf10 Fix typos in French translations for <code>docs/fr/docs/advanced/path-operation-advanced-configuration.md</code>, <code>docs/fr/docs/alternatives.md</code>, <code>docs/fr/docs/async.md</code>, <code>docs/fr/docs/features.md</code>, <code>docs/fr/docs/help-readyapi.md</code>, <code>docs/fr/docs/index.md</code>, <code>docs/fr/docs/python-types.md</code>, <code>docs/fr/docs/tutorial/body.md</code>, <code>docs/fr/docs/tutorial/first-steps.md</code>, <code>docs/fr/docs/tutorial/query-params.md</code>. PR #10154 by @s-rigaud.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/async.md</code>. PR #5591 by @mkdir700.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/tutorial/security/simple-oauth2.md</code>. PR #3844 by @jaystone776.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/deployment/cloud.md</code>. PR #10191 by @Sion99.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/deployment/https.md</code>. PR #10298 by @tamtam-fitness.</li> <li>\ud83c\udf10 Fix typo in Russian translation for <code>docs/ru/docs/tutorial/body-fields.md</code>. PR #10224 by @AlertRED.</li> <li>\ud83c\udf10 Add Polish translation for <code>docs/pl/docs/help-readyapi.md</code>. PR #10121 by @romabozhanovgithub.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/header-params.md</code>. PR #10226 by @AlertRED.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/deployment/versions.md</code>. PR #10276 by @xzmeng.</li> </ul>"},{"location":"release-notes/#internal_32","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update sponsors, remove Flint. PR #10349 by @khulnasoft.</li> <li>\ud83d\udd27 Rename label \"awaiting review\" to \"awaiting-review\" to simplify search queries. PR #10343 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, enable Svix (revert #10228). PR #10253 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, remove Svix. PR #10228 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, add Bump.sh. PR #10227 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01031","title":"0.103.1","text":""},{"location":"release-notes/#fixes_12","title":"Fixes","text":"<ul> <li>\ud83d\udccc Pin AnyIO to &lt; 4.0.0 to handle an incompatibility while upgrading to Starlette 0.31.1. PR #10194 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_26","title":"Docs","text":"<ul> <li>\u270f\ufe0f Fix validation parameter name in docs, from <code>regex</code> to <code>pattern</code>. PR #10085 by @pablodorrio.</li> <li>\u270f\ufe0f Fix indent format in <code>docs/en/docs/deployment/server-workers.md</code>. PR #10066 by @tamtam-fitness.</li> <li>\u270f\ufe0f Fix Pydantic examples in tutorial for Python types. PR #9961 by @rahulsalgare.</li> <li>\u270f\ufe0f Fix link to Pydantic docs in <code>docs/en/docs/tutorial/extra-data-types.md</code>. PR #10155 by @hasnatsajid.</li> <li>\u270f\ufe0f Fix typo in <code>docs/en/docs/tutorial/handling-errors.md</code>. PR #10170 by @poupapaa.</li> <li>\u270f\ufe0f Fix typo in <code>docs/en/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md</code>. PR #10172 by @ragul-kachiappan.</li> </ul>"},{"location":"release-notes/#translations_28","title":"Translations","text":"<ul> <li>\ud83c\udf10 Remove duplicate line in translation for <code>docs/pt/docs/tutorial/path-params.md</code>. PR #10126 by @LecoOliveira.</li> <li>\ud83c\udf10 Add Yoruba translation for <code>docs/yo/docs/index.md</code>. PR #10033 by @AfolabiOlaoluwa.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/python-types.md</code>. PR #10080 by @rostik1410.</li> <li>\ud83c\udf10 Add Vietnamese translations for <code>docs/vi/docs/tutorial/first-steps.md</code> and <code>docs/vi/docs/tutorial/index.md</code>. PR #10088 by @magiskboy.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/alternatives.md</code>. PR #10060 by @whysage.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/index.md</code>. PR #10079 by @rostik1410.</li> <li>\u270f\ufe0f Fix typos in <code>docs/en/docs/how-to/separate-openapi-schemas.md</code> and <code>docs/en/docs/tutorial/schema-extra-example.md</code>. PR #10189 by @xzmeng.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/generate-clients.md</code>. PR #9883 by @funny-cat-happy.</li> </ul>"},{"location":"release-notes/#refactors_17","title":"Refactors","text":"<ul> <li>\u270f\ufe0f Fix typos in comment in <code>readyapi/applications.py</code>. PR #10045 by @AhsanSheraz.</li> <li>\u2705 Add missing test for OpenAPI examples, it was missing in coverage. PR #10188 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_33","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #10186 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01030","title":"0.103.0","text":""},{"location":"release-notes/#features_9","title":"Features","text":"<ul> <li>\u2728 Add support for <code>openapi_examples</code> in all ReadyAPI parameters. PR #10152 by @khulnasoft.<ul> <li>New docs: OpenAPI-specific examples.</li> </ul> </li> </ul>"},{"location":"release-notes/#docs_27","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add note to docs about Separate Input and Output Schemas with ReadyAPI version. PR #10150 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01020","title":"0.102.0","text":""},{"location":"release-notes/#features_10","title":"Features","text":"<ul> <li>\u2728 Add support for disabling the separation of input and output JSON Schemas in OpenAPI with Pydantic v2 with <code>separate_input_output_schemas=False</code>. PR #10145 by @khulnasoft.<ul> <li>New docs Separate OpenAPI Schemas for Input and Output or Not.</li> <li>This PR also includes a new setup (internal tools) for generating screenshots for the docs.</li> </ul> </li> </ul>"},{"location":"release-notes/#refactors_18","title":"Refactors","text":"<ul> <li>\u267b\ufe0f Refactor tests for new Pydantic 2.2.1. PR #10115 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_28","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add new docs section, How To - Recipes, move docs that don't have to be read by everyone to How To. PR #10114 by @khulnasoft.</li> <li>\ud83d\udcdd Update Advanced docs, add links to sponsor courses. PR #10113 by @khulnasoft.</li> <li>\ud83d\udcdd Update docs for generating clients. PR #10112 by @khulnasoft.</li> <li>\ud83d\udcdd Tweak MkDocs and add redirects. PR #10111 by @khulnasoft.</li> <li>\ud83d\udcdd Restructure docs for cloud providers, include links to sponsors. PR #10110 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_34","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update sponsors, add Speakeasy. PR #10098 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01011","title":"0.101.1","text":""},{"location":"release-notes/#fixes_13","title":"Fixes","text":"<ul> <li>\u2728 Add <code>ResponseValidationError</code> printable details, to show up in server error logs. PR #10078 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#refactors_19","title":"Refactors","text":"<ul> <li>\u270f\ufe0f Fix typo in deprecation warnings in <code>readyapi/params.py</code>. PR #9854 by @russbiggs.</li> <li>\u270f\ufe0f Fix typos in comments on internal code in <code>readyapi/concurrency.py</code> and <code>readyapi/routing.py</code>. PR #9590 by @ElliottLarsen.</li> </ul>"},{"location":"release-notes/#docs_29","title":"Docs","text":"<ul> <li>\u270f\ufe0f Fix typo in release notes. PR #9835 by @francisbergin.</li> <li>\ud83d\udcdd Add external article: Build an SMS Spam Classifier Serverless Database with FaunaDB and ReadyAPI. PR #9847 by @adejumoridwan.</li> <li>\ud83d\udcdd Fix typo in <code>docs/en/docs/contributing.md</code>. PR #9878 by @VicenteMerino.</li> <li>\ud83d\udcdd Fix code highlighting in <code>docs/en/docs/tutorial/bigger-applications.md</code>. PR #9806 by @theonlykingpin.</li> </ul>"},{"location":"release-notes/#translations_29","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/deployment/concepts.md</code>. PR #10062 by @tamtam-fitness.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/deployment/server-workers.md</code>. PR #10064 by @tamtam-fitness.</li> <li>\ud83c\udf10 Update Japanese translation for <code>docs/ja/docs/deployment/docker.md</code>. PR #10073 by @tamtam-fitness.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/readyapi-people.md</code>. PR #10059 by @rostik1410.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/cookie-params.md</code>. PR #10032 by @rostik1410.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/deployment/docker.md</code>. PR #9971 by @Xewus.</li> <li>\ud83c\udf10 Add Vietnamese translation for <code>docs/vi/docs/python-types.md</code>. PR #10047 by @magiskboy.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/dependencies/global-dependencies.md</code>. PR #9970 by @dudyaosuplayer.</li> <li>\ud83c\udf10 Add Urdu translation for <code>docs/ur/docs/benchmarks.md</code>. PR #9974 by @AhsanSheraz.</li> </ul>"},{"location":"release-notes/#internal_35","title":"Internal","text":"<ul> <li>\ud83d\udd27 Add sponsor Porter. PR #10051 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, add Jina back as bronze sponsor. PR #10050 by @khulnasoft.</li> <li>\u2b06 Bump mypy from 1.4.0 to 1.4.1. PR #9756 by @dependabot[bot].</li> <li>\u2b06 Bump mkdocs-material from 9.1.17 to 9.1.21. PR #9960 by @dependabot[bot].</li> </ul>"},{"location":"release-notes/#01010","title":"0.101.0","text":""},{"location":"release-notes/#features_11","title":"Features","text":"<ul> <li>\u2728 Enable Pydantic's serialization mode for responses, add support for Pydantic's <code>computed_field</code>, better OpenAPI for response models, proper required attributes, better generated clients. PR #10011 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#refactors_20","title":"Refactors","text":"<ul> <li>\u2705 Fix tests for compatibility with pydantic 2.1.1. PR #9943 by @dmontagu.</li> <li>\u2705 Fix test error in Windows for <code>jsonable_encoder</code>. PR #9840 by @iudeen.</li> </ul>"},{"location":"release-notes/#upgrades_13","title":"Upgrades","text":"<ul> <li>\ud83d\udccc Do not allow Pydantic 2.1.0 that breaks (require 2.1.1). PR #10012 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_30","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/security/index.md</code>. PR #9963 by @eVery1337.</li> <li>\ud83c\udf10 Remove Vietnamese note about missing translation. PR #9957 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_36","title":"Internal","text":"<ul> <li>\ud83d\udc77 Add GitHub Actions step dump context to debug external failures. PR #10008 by @khulnasoft.</li> <li>\ud83d\udd27 Restore MkDocs Material pin after the fix. PR #10001 by @khulnasoft.</li> <li>\ud83d\udd27 Update the Question template to ask for the Pydantic version. PR #10000 by @khulnasoft.</li> <li>\ud83d\udccd Update MkDocs Material dependencies. PR #9986 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #9999 by @khulnasoft.</li> <li>\ud83d\udc33 Update Dockerfile with compatibility versions, to upgrade later. PR #9998 by @khulnasoft.</li> <li>\u2795 Add pydantic-settings to ReadyAPI People dependencies. PR #9988 by @khulnasoft.</li> <li>\u267b\ufe0f Update ReadyAPI People logic with new Pydantic. PR #9985 by @khulnasoft.</li> <li>\ud83c\udf71 Update sponsors, Fern badge. PR #9982 by @khulnasoft.</li> <li>\ud83d\udc77 Deploy docs to Cloudflare Pages. PR #9978 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsor Fern. PR #9979 by @khulnasoft.</li> <li>\ud83d\udc77 Update CI debug mode with Tmate. PR #9977 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01001","title":"0.100.1","text":""},{"location":"release-notes/#fixes_14","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Replace <code>MultHostUrl</code> to <code>AnyUrl</code> for compatibility with older versions of Pydantic v1. PR #9852 by @Kludex.</li> </ul>"},{"location":"release-notes/#docs_30","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update links for self-hosted Swagger UI, point to v5, for OpenAPI 31.0. PR #9834 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_31","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/body.md</code>. PR #4574 by @ss-o-furda.</li> <li>\ud83c\udf10 Add Vietnamese translation for <code>docs/vi/docs/features.md</code> and <code>docs/vi/docs/index.md</code>. PR #3006 by @magiskboy.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/async.md</code>. PR #4179 by @NinaHwang.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/background-tasks.md</code>. PR #9812 by @wdh99.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/tutorial/query-params-str-validations.md</code>. PR #4075 by @Smlep.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/tutorial/index.md</code>. PR #2234 by @JulianMaurin.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/contributing.md</code>. PR #2132 by @JulianMaurin.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/benchmarks.md</code>. PR #2155 by @clemsau.</li> <li>\ud83c\udf10 Update Chinese translations with new source files. PR #9738 by @mahone3297.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/request-forms.md</code>. PR #9841 by @dedkot01.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/handling-errors.md</code>. PR #9485 by @Creat55.</li> </ul>"},{"location":"release-notes/#internal_37","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update sponsors, add Fern. PR #9956 by @khulnasoft.</li> <li>\ud83d\udc77 Update ReadyAPI People token. PR #9844 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #9775 by @khulnasoft.</li> <li>\ud83d\udc77 Update MkDocs Material token. PR #9843 by @khulnasoft.</li> <li>\ud83d\udc77 Update token for latest changes. PR #9842 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01000","title":"0.100.0","text":"<p>\u2728 Support for Pydantic v2 \u2728</p> <p>Pydantic version 2 has the core re-written in Rust and includes a lot of improvements and features, for example:</p> <ul> <li>Improved correctness in corner cases.</li> <li>Safer types.</li> <li>Better performance and less energy consumption.</li> <li>Better extensibility.</li> <li>etc.</li> </ul> <p>...all this while keeping the same Python API. In most of the cases, for simple models, you can simply upgrade the Pydantic version and get all the benefits. \ud83d\ude80</p> <p>In some cases, for pure data validation and processing, you can get performance improvements of 20x or more. This means 2,000% or more. \ud83e\udd2f</p> <p>When you use ReadyAPI, there's a lot more going on, processing the request and response, handling dependencies, executing your own code, and particularly, waiting for the network. But you will probably still get some nice performance improvements just from the upgrade.</p> <p>The focus of this release is compatibility with Pydantic v1 and v2, to make sure your current apps keep working. Later there will be more focus on refactors, correctness, code improvements, and then performance improvements. Some third-party early beta testers that ran benchmarks on the beta releases of ReadyAPI reported improvements of 2x - 3x. Which is not bad for just doing <code>pip install --upgrade readyapi pydantic</code>. This was not an official benchmark and I didn't check it myself, but it's a good sign.</p>"},{"location":"release-notes/#migration","title":"Migration","text":"<p>Check out the Pydantic migration guide.</p> <p>For the things that need changes in your Pydantic models, the Pydantic team built <code>bump-pydantic</code>.</p> <p>A command line tool that will process your code and update most of the things automatically for you. Make sure you have your code in git first, and review each of the changes to make sure everything is correct before committing the changes.</p>"},{"location":"release-notes/#pydantic-v1","title":"Pydantic v1","text":"<p>This version of ReadyAPI still supports Pydantic v1. And although Pydantic v1 will be deprecated at some point, it will still be supported for a while.</p> <p>This means that you can install the new Pydantic v2, and if something fails, you can install Pydantic v1 while you fix any problems you might have, but having the latest ReadyAPI.</p> <p>There are tests for both Pydantic v1 and v2, and test coverage is kept at 100%.</p>"},{"location":"release-notes/#changes","title":"Changes","text":"<ul> <li> <p>There are new parameter fields supported by Pydantic <code>Field()</code> for:</p> <ul> <li><code>Path()</code></li> <li><code>Query()</code></li> <li><code>Header()</code></li> <li><code>Cookie()</code></li> <li><code>Body()</code></li> <li><code>Form()</code></li> <li><code>File()</code></li> </ul> </li> <li> <p>The new parameter fields are:</p> <ul> <li><code>default_factory</code></li> <li><code>alias_priority</code></li> <li><code>validation_alias</code></li> <li><code>serialization_alias</code></li> <li><code>discriminator</code></li> <li><code>strict</code></li> <li><code>multiple_of</code></li> <li><code>allow_inf_nan</code></li> <li><code>max_digits</code></li> <li><code>decimal_places</code></li> <li><code>json_schema_extra</code></li> </ul> </li> </ul> <p>...you can read about them in the Pydantic docs.</p> <ul> <li>The parameter <code>regex</code> has been deprecated and replaced by <code>pattern</code>.<ul> <li>You can read more about it in the docs for Query Parameters and String Validations: Add regular expressions.</li> </ul> </li> <li>New Pydantic models use an improved and simplified attribute <code>model_config</code> that takes a simple dict instead of an internal class <code>Config</code> for their configuration.<ul> <li>You can read more about it in the docs for Declare Request Example Data.</li> </ul> </li> <li>The attribute <code>schema_extra</code> for the internal class <code>Config</code> has been replaced by the key <code>json_schema_extra</code> in the new <code>model_config</code> dict.<ul> <li>You can read more about it in the docs for Declare Request Example Data.</li> </ul> </li> <li>When you install <code>\"readyapi[all]\"</code> it now also includes:<ul> <li><code>pydantic-settings</code> - for settings management.</li> <li><code>pydantic-extra-types</code> - for extra types to be used with Pydantic.</li> </ul> </li> <li> <p>Now Pydantic Settings is an additional optional package (included in <code>\"readyapi[all]\"</code>). To use settings you should now import <code>from pydantic_settings import BaseSettings</code> instead of importing from <code>pydantic</code> directly.</p> <ul> <li>You can read more about it in the docs for Settings and Environment Variables.</li> </ul> </li> <li> <p>PR #9816 by @khulnasoft, included all the work done (in multiple PRs) on the beta branch (<code>main-pv2</code>).</p> </li> </ul>"},{"location":"release-notes/#0991","title":"0.99.1","text":""},{"location":"release-notes/#fixes_15","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix JSON Schema accepting bools as valid JSON Schemas, e.g. <code>additionalProperties: false</code>. PR #9781 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_31","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update source examples to use new JSON Schema examples field. PR #9776 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0990","title":"0.99.0","text":""},{"location":"release-notes/#features_12","title":"Features","text":"<ul> <li> <p>\u2728 Add support for OpenAPI 3.1.0. PR #9770 by @khulnasoft.</p> <ul> <li>New support for documenting webhooks, read the new docs here: Advanced User Guide: OpenAPI Webhooks.</li> <li>Upgrade OpenAPI 3.1.0, this uses JSON Schema 2020-12.</li> <li>Upgrade Swagger UI to version 5.x.x, that supports OpenAPI 3.1.0.</li> <li>Updated <code>examples</code> field in <code>Query()</code>, <code>Cookie()</code>, <code>Body()</code>, etc. based on the latest JSON Schema and OpenAPI. Now it takes a list of examples and they are included directly in the JSON Schema, not outside. Read more about it (including the historical technical details) in the updated docs: Tutorial: Declare Request Example Data.</li> </ul> </li> <li> <p>\u2728 Add support for <code>deque</code> objects and children in <code>jsonable_encoder</code>. PR #9433 by @cranium.</p> </li> </ul>"},{"location":"release-notes/#docs_32","title":"Docs","text":"<ul> <li>\ud83d\udcdd Fix form for the ReadyAPI and friends newsletter. PR #9749 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_32","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Persian translation for <code>docs/fa/docs/advanced/sub-applications.md</code>. PR #9692 by @mojtabapaso.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/response-model.md</code>. PR #9675 by @glsglsgls.</li> </ul>"},{"location":"release-notes/#internal_38","title":"Internal","text":"<ul> <li>\ud83d\udd28 Enable linenums in MkDocs Material during local live development to simplify highlighting code. PR #9769 by @khulnasoft.</li> <li>\u2b06 Update httpx requirement from &lt;0.24.0,&gt;=0.23.0 to &gt;=0.23.0,&lt;0.25.0. PR #9724 by @dependabot[bot].</li> <li>\u2b06 Bump mkdocs-material from 9.1.16 to 9.1.17. PR #9746 by @dependabot[bot].</li> <li>\ud83d\udd25 Remove missing translation dummy pages, no longer necessary. PR #9751 by @khulnasoft.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #9259 by @pre-commit-ci[bot].</li> <li>\u2728 Add Material for MkDocs Insiders features and cards. PR #9748 by @khulnasoft.</li> <li>\ud83d\udd25 Remove languages without translations. PR #9743 by @khulnasoft.</li> <li>\u2728 Refactor docs for building scripts, use MkDocs hooks, simplify (remove) configs for languages. PR #9742 by @khulnasoft.</li> <li>\ud83d\udd28 Add MkDocs hook that renames sections based on the first index file. PR #9737 by @khulnasoft.</li> <li>\ud83d\udc77 Make cron jobs run only on main repo, not on forks, to avoid error notifications from missing tokens. PR #9735 by @khulnasoft.</li> <li>\ud83d\udd27 Update MkDocs for other languages. PR #9734 by @khulnasoft.</li> <li>\ud83d\udc77 Refactor Docs CI, run in multiple workers with a dynamic matrix to optimize speed. PR #9732 by @khulnasoft.</li> <li>\ud83d\udd25 Remove old internal GitHub Action watch-previews that is no longer needed. PR #9730 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade MkDocs and MkDocs Material. PR #9729 by @khulnasoft.</li> <li>\ud83d\udc77 Build and deploy docs only on docs changes. PR #9728 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0980","title":"0.98.0","text":""},{"location":"release-notes/#features_13","title":"Features","text":"<ul> <li>\u2728 Allow disabling <code>redirect_slashes</code> at the ReadyAPI app level. PR #3432 by @cyberlis.</li> </ul>"},{"location":"release-notes/#docs_33","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update docs on Pydantic using ujson internally. PR #5804 by @mvasilkov.</li> <li>\u270f Rewording in <code>docs/en/docs/tutorial/debugging.md</code>. PR #9581 by @ivan-abc.</li> <li>\ud83d\udcdd Add german blog post (Domain-driven Design mit Python und ReadyAPI). PR #9261 by @msander.</li> <li>\u270f\ufe0f Tweak wording in <code>docs/en/docs/tutorial/security/index.md</code>. PR #9561 by @jyothish-mohan.</li> <li>\ud83d\udcdd Update <code>Annotated</code> notes in <code>docs/en/docs/tutorial/schema-extra-example.md</code>. PR #9620 by @Alexandrhub.</li> <li>\u270f\ufe0f Fix typo <code>Annotation</code> -&gt; <code>Annotated</code> in <code>docs/en/docs/tutorial/query-params-str-validations.md</code>. PR #9625 by @mccricardo.</li> <li>\ud83d\udcdd Use in memory database for testing SQL in docs. PR #1223 by @HarshaLaxman.</li> </ul>"},{"location":"release-notes/#translations_33","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/metadata.md</code>. PR #9681 by @TabarakoAkula.</li> <li>\ud83c\udf10 Fix typo in Spanish translation for <code>docs/es/docs/tutorial/first-steps.md</code>. PR #9571 by @lilidl-nft.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/tutorial/path-operation-configuration.md</code>. PR #9696 by @TabarakoAkula.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/security/index.md</code>. PR #9666 by @lordqyxz.</li> <li>\ud83c\udf10 Add Chinese translations for <code>docs/zh/docs/advanced/settings.md</code>. PR #9652 by @ChoyeonChern.</li> <li>\ud83c\udf10 Add Chinese translations for <code>docs/zh/docs/advanced/websockets.md</code>. PR #9651 by @ChoyeonChern.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/testing.md</code>. PR #9641 by @wdh99.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/tutorial/extra-models.md</code>. PR #9619 by @ivan-abc.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/tutorial/cors.md</code>. PR #9608 by @ivan-abc.</li> <li>\ud83c\udf10 Add Polish translation for <code>docs/pl/docs/features.md</code>. PR #5348 by @mbroton.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/body-nested-models.md</code>. PR #9605 by @Alexandrhub.</li> </ul>"},{"location":"release-notes/#internal_39","title":"Internal","text":"<ul> <li>\u2b06 Bump ruff from 0.0.272 to 0.0.275. PR #9721 by @dependabot[bot].</li> <li>\u2b06 Update uvicorn[standard] requirement from &lt;0.21.0,&gt;=0.12.0 to &gt;=0.12.0,&lt;0.23.0. PR #9463 by @dependabot[bot].</li> <li>\u2b06 Bump mypy from 1.3.0 to 1.4.0. PR #9719 by @dependabot[bot].</li> <li>\u2b06 Update pre-commit requirement from &lt;3.0.0,&gt;=2.17.0 to &gt;=2.17.0,&lt;4.0.0. PR #9251 by @dependabot[bot].</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.8.5 to 1.8.6. PR #9482 by @dependabot[bot].</li> <li>\u270f\ufe0f Fix tooltips for light/dark theme toggler in docs. PR #9588 by @pankaj1707k.</li> <li>\ud83d\udd27 Set minimal hatchling version needed to build the package. PR #9240 by @mgorny.</li> <li>\ud83d\udcdd Add repo link to PyPI. PR #9559 by @JacobCoffee.</li> <li>\u270f\ufe0f Fix typos in data for tests. PR #4958 by @ryanrussell.</li> <li>\ud83d\udd27 Update sponsors, add Flint. PR #9699 by @khulnasoft.</li> <li>\ud83d\udc77 Lint in CI only once, only with one version of Python, run tests with all of them. PR #9686 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0970","title":"0.97.0","text":""},{"location":"release-notes/#features_14","title":"Features","text":"<ul> <li>\u2728 Add support for <code>dependencies</code> in WebSocket routes. PR #4534 by @paulo-raca.</li> <li>\u2728 Add exception handler for <code>WebSocketRequestValidationError</code> (which also allows to override it). PR #6030 by @kristjanvalur.</li> </ul>"},{"location":"release-notes/#refactors_21","title":"Refactors","text":"<ul> <li>\u2b06\ufe0f Upgrade and fully migrate to Ruff, remove isort, includes a couple of tweaks suggested by the new version of Ruff. PR #9660 by @khulnasoft.</li> <li>\u267b\ufe0f Update internal type annotations and upgrade mypy. PR #9658 by @khulnasoft.</li> <li>\u267b\ufe0f Simplify <code>AsyncExitStackMiddleware</code> as without Python 3.6 <code>AsyncExitStack</code> is always available. PR #9657 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#upgrades_14","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade Black. PR #9661 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_40","title":"Internal","text":"<ul> <li>\ud83d\udc9a Update CI cache to fix installs when dependencies change. PR #9659 by @khulnasoft.</li> <li>\u2b07\ufe0f Separate requirements for development into their own requirements.txt files, they shouldn't be extras. PR #9655 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0961","title":"0.96.1","text":""},{"location":"release-notes/#fixes_16","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix <code>HTTPException</code> header type annotations. PR #9648 by @khulnasoft.</li> <li>\ud83d\udc1b Fix OpenAPI model fields int validations, <code>gte</code> to <code>ge</code>. PR #9635 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#upgrades_15","title":"Upgrades","text":"<ul> <li>\ud83d\udccc Update minimum version of Pydantic to &gt;=1.7.4. This fixes an issue when trying to use an old version of Pydantic. PR #9567 by @Kludex.</li> </ul>"},{"location":"release-notes/#refactors_22","title":"Refactors","text":"<ul> <li>\u267b Remove <code>media_type</code> from <code>ORJSONResponse</code> as it's inherited from the parent class. PR #5805 by @Kludex.</li> <li>\u267b Instantiate <code>HTTPException</code> only when needed, optimization refactor. PR #5356 by @pawamoy.</li> </ul>"},{"location":"release-notes/#docs_34","title":"Docs","text":"<ul> <li>\ud83d\udd25 Remove link to Pydantic's benchmark, as it was removed there. PR #5811 by @Kludex.</li> </ul>"},{"location":"release-notes/#translations_34","title":"Translations","text":"<ul> <li>\ud83c\udf10 Fix spelling in Indonesian translation of <code>docs/id/docs/tutorial/index.md</code>. PR #5635 by @purwowd.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/index.md</code>. PR #5896 by @Wilidon.</li> <li>\ud83c\udf10 Add Chinese translations for <code>docs/zh/docs/advanced/response-change-status-code.md</code> and <code>docs/zh/docs/advanced/response-headers.md</code>. PR #9544 by @ChoyeonChern.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/schema-extra-example.md</code>. PR #9621 by @Alexandrhub.</li> </ul>"},{"location":"release-notes/#internal_41","title":"Internal","text":"<ul> <li>\ud83d\udd27 Add sponsor Platform.sh. PR #9650 by @khulnasoft.</li> <li>\ud83d\udc77 Add custom token to Smokeshow and Preview Docs for download-artifact, to prevent API rate limits. PR #9646 by @khulnasoft.</li> <li>\ud83d\udc77 Add custom tokens for GitHub Actions to avoid rate limits. PR #9647 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0960","title":"0.96.0","text":""},{"location":"release-notes/#features_15","title":"Features","text":"<ul> <li>\u26a1 Update <code>create_cloned_field</code> to use a global cache and improve startup performance. PR #4645 by @madkinsz and previous original PR by @huonw.</li> </ul>"},{"location":"release-notes/#docs_35","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update Deta deployment tutorial for compatibility with Deta Space. PR #6004 by @mikBighne98.</li> <li>\u270f\ufe0f Fix typo in Deta deployment tutorial. PR #9501 by @lemonyte.</li> </ul>"},{"location":"release-notes/#translations_35","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/tutorial/body.md</code>. PR #3885 by @solomein-sv.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/static-files.md</code>. PR #9580 by @Alexandrhub.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/query-params.md</code>. PR #9584 by @Alexandrhub.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/first-steps.md</code>. PR #9471 by @AGolicyn.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/debugging.md</code>. PR #9579 by @Alexandrhub.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/path-params.md</code>. PR #9519 by @AGolicyn.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/static-files.md</code>. PR #9436 by @wdh99.</li> <li>\ud83c\udf10 Update Spanish translation including new illustrations in <code>docs/es/docs/async.md</code>. PR #9483 by @andresbermeoq.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/path-params-numeric-validations.md</code>. PR #9563 by @ivan-abc.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/deployment/concepts.md</code>. PR #9577 by @Xewus.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/body-multiple-params.md</code>. PR #9586 by @Alexandrhub.</li> </ul>"},{"location":"release-notes/#internal_42","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #9602 by @github-actions[bot].</li> <li>\ud83d\udd27 Update sponsors, remove InvestSuite. PR #9612 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0952","title":"0.95.2","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette version to <code>&gt;=0.27.0</code> for a security release. PR #9541 by @khulnasoft. Details on Starlette's security advisory.</li> </ul>"},{"location":"release-notes/#translations_36","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/events.md</code>. PR #9326 by @oandersonmagalhaes.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/deployment/manually.md</code>. PR #9417 by @Xewus.</li> <li>\ud83c\udf10 Add setup for translations to Lao. PR #9396 by @TheBrown.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/testing.md</code>. PR #9403 by @Xewus.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/deployment/https.md</code>. PR #9428 by @Xewus.</li> <li>\u270f Fix command to install requirements in Windows. PR #9445 by @MariiaRomanuik.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/advanced/response-directly.md</code>. PR #9415 by @axel584.</li> <li>\ud83c\udf10 Initiate Czech translation setup. PR #9288 by @3p1463k.</li> <li>\u270f Fix typo in Portuguese docs for <code>docs/pt/docs/index.md</code>. PR #9337 by @lucasbalieiro.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/response-status-code.md</code>. PR #9370 by @nadia3373.</li> </ul>"},{"location":"release-notes/#internal_43","title":"Internal","text":"<ul> <li>\ud83d\udc1b Fix <code>flask.escape</code> warning for internal tests. PR #9468 by @samuelcolvin.</li> <li>\u2705 Refactor 2 tests, for consistency and simplification. PR #9504 by @khulnasoft.</li> <li>\u2705 Refactor OpenAPI tests, prepare for Pydantic v2. PR #9503 by @khulnasoft.</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.26.0 to 2.27.0. PR #9394 by @dependabot[bot].</li> <li>\ud83d\udc9a Disable setup-python pip cache in CI. PR #9438 by @khulnasoft.</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.6.4 to 1.8.5. PR #9346 by @dependabot[bot].</li> </ul>"},{"location":"release-notes/#0951","title":"0.95.1","text":""},{"location":"release-notes/#fixes_17","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix using <code>Annotated</code> in routers or path operations decorated multiple times. PR #9315 by @sharonyogev.</li> </ul>"},{"location":"release-notes/#docs_36","title":"Docs","text":"<ul> <li>\ud83c\udf10 \ud83d\udd20 \ud83d\udcc4 \ud83d\udc22 Translate docs to Emoji \ud83e\udd73 \ud83c\udf89 \ud83d\udca5 \ud83e\udd2f \ud83e\udd2f. PR #5385 by @LeeeeT.</li> <li>\ud83d\udcdd Add notification message warning about old versions of ReadyAPI not supporting <code>Annotated</code>. PR #9298 by @grdworkin.</li> <li>\ud83d\udcdd Fix typo in <code>docs/en/docs/advanced/behind-a-proxy.md</code>. PR #5681 by @Leommjr.</li> <li>\u270f Fix wrong import from typing module in Persian translations for <code>docs/fa/docs/index.md</code>. PR #6083 by @Kimiaattaei.</li> <li>\u270f\ufe0f Fix format, remove unnecessary asterisks in <code>docs/en/docs/help-readyapi.md</code>. PR #9249 by @armgabrielyan.</li> <li>\u270f Fix typo in <code>docs/en/docs/tutorial/query-params-str-validations.md</code>. PR #9272 by @nicornk.</li> <li>\u270f Fix typo/bug in inline code example in <code>docs/en/docs/tutorial/query-params-str-validations.md</code>. PR #9273 by @tim-habitat.</li> <li>\u270f Fix typo in <code>docs/en/docs/tutorial/path-params-numeric-validations.md</code>. PR #9282 by @aadarsh977.</li> <li>\u270f Fix typo: 'wll' to 'will' in <code>docs/en/docs/tutorial/query-params-str-validations.md</code>. PR #9380 by @dasstyxx.</li> </ul>"},{"location":"release-notes/#translations_37","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/advanced/index.md</code>. PR #5673 by @axel584.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/body-nested-models.md</code>. PR #4053 by @luccasmmg.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/alternatives.md</code>. PR #5994 by @Xewus.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/extra-models.md</code>. PR #5912 by @LorhanSohaky.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/path-operation-configuration.md</code>. PR #5936 by @LorhanSohaky.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/contributing.md</code>. PR #6002 by @stigsanek.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/tutorial/dependencies/classes-as-dependencies.md</code>. PR #9176 by @sehwan505.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/project-generation.md</code>. PR #9243 by @Xewus.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/index.md</code>. PR #9265 by @frabc.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/query-params-str-validations.md</code>. PR #9267 by @dedkot01.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/benchmarks.md</code>. PR #9271 by @Xewus.</li> </ul>"},{"location":"release-notes/#internal_44","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update sponsors: remove Jina. PR #9388 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, add databento, remove Ines's course and StriveWorks. PR #9351 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0950","title":"0.95.0","text":""},{"location":"release-notes/#highlights_1","title":"Highlights","text":"<p>This release adds support for dependencies and parameters using <code>Annotated</code> and recommends its usage. \u2728</p> <p>This has several benefits, one of the main ones is that now the parameters of your functions with <code>Annotated</code> would not be affected at all.</p> <p>If you call those functions in other places in your code, the actual default values will be kept, your editor will help you notice missing required arguments, Python will require you to pass required arguments at runtime, you will be able to use the same functions for different things and with different libraries (e.g. Cligenius will soon support <code>Annotated</code> too, then you could use the same function for an API and a CLI), etc.</p> <p>Because <code>Annotated</code> is standard Python, you still get all the benefits from editors and tools, like autocompletion, inline errors, etc.</p> <p>One of the biggest benefits is that now you can create <code>Annotated</code> dependencies that are then shared by multiple path operation functions, this will allow you to reduce a lot of code duplication in your codebase, while keeping all the support from editors and tools.</p> <p>For example, you could have code like this:</p> <pre><code>def get_current_user(token: str):\n    # authenticate user\n    return User()\n\n\n@app.get(\"/items/\")\ndef read_items(user: User = Depends(get_current_user)):\n    ...\n\n\n@app.post(\"/items/\")\ndef create_item(*, user: User = Depends(get_current_user), item: Item):\n    ...\n\n\n@app.get(\"/items/{item_id}\")\ndef read_item(*, user: User = Depends(get_current_user), item_id: int):\n    ...\n\n\n@app.delete(\"/items/{item_id}\")\ndef delete_item(*, user: User = Depends(get_current_user), item_id: int):\n    ...\n</code></pre> <p>There's a bit of code duplication for the dependency:</p> <pre><code>user: User = Depends(get_current_user)\n</code></pre> <p>...the bigger the codebase, the more noticeable it is.</p> <p>Now you can create an annotated dependency once, like this:</p> <pre><code>CurrentUser = Annotated[User, Depends(get_current_user)]\n</code></pre> <p>And then you can reuse this <code>Annotated</code> dependency:</p> <pre><code>CurrentUser = Annotated[User, Depends(get_current_user)]\n\n\n@app.get(\"/items/\")\ndef read_items(user: CurrentUser):\n    ...\n\n\n@app.post(\"/items/\")\ndef create_item(user: CurrentUser, item: Item):\n    ...\n\n\n@app.get(\"/items/{item_id}\")\ndef read_item(user: CurrentUser, item_id: int):\n    ...\n\n\n@app.delete(\"/items/{item_id}\")\ndef delete_item(user: CurrentUser, item_id: int):\n    ...\n</code></pre> <p>...and <code>CurrentUser</code> has all the typing information as <code>User</code>, so your editor will work as expected (autocompletion and everything), and ReadyAPI will be able to understand the dependency defined in <code>Annotated</code>. \ud83d\ude0e</p> <p>Roughly all the docs have been rewritten to use <code>Annotated</code> as the main way to declare parameters and dependencies. All the examples in the docs now include a version with <code>Annotated</code> and a version without it, for each of the specific Python versions (when there are small differences/improvements in more recent versions). There were around 23K new lines added between docs, examples, and tests. \ud83d\ude80</p> <p>The key updated docs are:</p> <ul> <li>Python Types Intro:<ul> <li>Type Hints with Metadata Annotations.</li> </ul> </li> <li>Tutorial:<ul> <li>Query Parameters and String Validations - Additional validation<ul> <li>Advantages of <code>Annotated</code></li> </ul> </li> <li>Path Parameters and Numeric Validations - Order the parameters as you need, tricks<ul> <li>Better with <code>Annotated</code></li> </ul> </li> <li>Dependencies - First Steps - Share <code>Annotated</code> dependencies</li> </ul> </li> </ul> <p>Special thanks to @nzig for the core implementation and to @adriangb for the inspiration and idea with Xpresso! \ud83d\ude80</p>"},{"location":"release-notes/#features_16","title":"Features","text":"<ul> <li>\u2728Add support for PEP-593 <code>Annotated</code> for specifying dependencies and parameters. PR #4871 by @nzig.</li> </ul>"},{"location":"release-notes/#docs_37","title":"Docs","text":"<ul> <li>\ud83d\udcdd Tweak tip recommending <code>Annotated</code> in docs. PR #9270 by @khulnasoft.</li> <li>\ud83d\udcdd Update order of examples, latest Python version first, and simplify version tab names. PR #9269 by @khulnasoft.</li> <li>\ud83d\udcdd Update all docs to use <code>Annotated</code> as the main recommendation, with new examples and tests. PR #9268 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0941","title":"0.94.1","text":""},{"location":"release-notes/#fixes_18","title":"Fixes","text":"<ul> <li>\ud83c\udfa8 Fix types for lifespan, upgrade Starlette to 0.26.1. PR #9245 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0940","title":"0.94.0","text":""},{"location":"release-notes/#upgrades_16","title":"Upgrades","text":"<ul> <li>\u2b06 Upgrade python-multipart to support 0.0.6. PR #9212 by @musicinmybrain.</li> <li>\u2b06\ufe0f Upgrade Starlette version, support new <code>lifespan</code> with state. PR #9239 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_38","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update Sentry link in docs. PR #9218 by @smeubank.</li> </ul>"},{"location":"release-notes/#translations_38","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/history-design-future.md</code>. PR #5986 by @Xewus.</li> </ul>"},{"location":"release-notes/#internal_45","title":"Internal","text":"<ul> <li>\u2795 Add <code>pydantic</code> to PyPI classifiers. PR #5914 by @yezz123.</li> <li>\u2b06 Bump black from 22.10.0 to 23.1.0. PR #5953 by @dependabot[bot].</li> <li>\u2b06 Bump types-ujson from 5.6.0.0 to 5.7.0.1. PR #6027 by @dependabot[bot].</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.24.3 to 2.26.0. PR #6034 by @dependabot[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #5709 by @pre-commit-ci[bot].</li> </ul>"},{"location":"release-notes/#0930","title":"0.93.0","text":""},{"location":"release-notes/#features_17","title":"Features","text":"<ul> <li>\u2728 Add support for <code>lifespan</code> async context managers (superseding <code>startup</code> and <code>shutdown</code> events). Initial PR #2944 by @uSpike.</li> </ul> <p>Now, instead of using independent <code>startup</code> and <code>shutdown</code> events, you can define that logic in a single function with <code>yield</code> decorated with <code>@asynccontextmanager</code> (an async context manager).</p> <p>For example:</p> <pre><code>from contextlib import asynccontextmanager\n\nfrom readyapi import ReadyAPI\n\n\ndef fake_answer_to_everything_ml_model(x: float):\n    return x * 42\n\n\nml_models = {}\n\n\n@asynccontextmanager\nasync def lifespan(app: ReadyAPI):\n    # Load the ML model\n    ml_models[\"answer_to_everything\"] = fake_answer_to_everything_ml_model\n    yield\n    # Clean up the ML models and release the resources\n    ml_models.clear()\n\n\napp = ReadyAPI(lifespan=lifespan)\n\n\n@app.get(\"/predict\")\nasync def predict(x: float):\n    result = ml_models[\"answer_to_everything\"](x)\n    return {\"result\": result}\n</code></pre> <p>Note: This is the recommended way going forward, instead of using <code>startup</code> and <code>shutdown</code> events.</p> <p>Read more about it in the new docs: Advanced User Guide: Lifespan Events.</p>"},{"location":"release-notes/#docs_39","title":"Docs","text":"<ul> <li>\u270f Fix formatting in <code>docs/en/docs/tutorial/metadata.md</code> for <code>ReDoc</code>. PR #6005 by @eykamp.</li> </ul>"},{"location":"release-notes/#translations_39","title":"Translations","text":"<ul> <li>\ud83c\udf10 Tamil translations - initial setup. PR #5564 by @gusty1g.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/advanced/path-operation-advanced-configuration.md</code>. PR #9221 by @axel584.</li> <li>\ud83c\udf10 Add French translation for <code>docs/tutorial/debugging.md</code>. PR #9175 by @frabc.</li> <li>\ud83c\udf10 Initiate Armenian translation setup. PR #5844 by @har8.</li> <li>\ud83c\udf10 Add French translation for <code>deployment/manually.md</code>. PR #3693 by @rjNemo.</li> </ul>"},{"location":"release-notes/#internal_46","title":"Internal","text":"<ul> <li>\ud83d\udc77 Update translation bot messages. PR #9206 by @khulnasoft.</li> <li>\ud83d\udc77 Update translations bot to use Discussions, and notify when a PR is done. PR #9183 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors-badges. PR #9182 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #9181 by @github-actions[bot].</li> <li>\ud83d\udd0a Log GraphQL errors in ReadyAPI People, because it returns 200, with a payload with an error. PR #9171 by @khulnasoft.</li> <li>\ud83d\udc9a Fix/workaround GitHub Actions in Docker with git for ReadyAPI People. PR #9169 by @khulnasoft.</li> <li>\u267b\ufe0f Refactor ReadyAPI Experts to use only discussions now that questions are migrated. PR #9165 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade analytics. PR #6025 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade and re-enable installing Cligenius-CLI. PR #6008 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0920","title":"0.92.0","text":"<p>\ud83d\udea8 This is a security fix. Please upgrade as soon as possible.</p>"},{"location":"release-notes/#upgrades_17","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette to 0.25.0. PR #5996 by @khulnasoft.<ul> <li>This solves a vulnerability that could allow denial of service attacks by using many small multipart fields/files (parts), consuming high CPU and memory.</li> <li>Only applications using forms (e.g. file uploads) could be affected.</li> <li>For most cases, upgrading won't have any breaking changes.</li> </ul> </li> </ul>"},{"location":"release-notes/#0910","title":"0.91.0","text":""},{"location":"release-notes/#upgrades_18","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette version to <code>0.24.0</code> and refactor internals for compatibility. PR #5985 by @khulnasoft.<ul> <li>This can solve nuanced errors when using middlewares. Before Starlette <code>0.24.0</code>, a new instance of each middleware class would be created when a new middleware was added. That normally was not a problem, unless the middleware class expected to be created only once, with only one instance, that happened in some cases. This upgrade would solve those cases (thanks @adriangb! Starlette PR #2017). Now the middleware class instances are created once, right before the first request (the first time the app is called).</li> <li>If you depended on that previous behavior, you might need to update your code. As always, make sure your tests pass before merging the upgrade.</li> </ul> </li> </ul>"},{"location":"release-notes/#0901","title":"0.90.1","text":""},{"location":"release-notes/#upgrades_19","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette range to allow 0.23.1. PR #5980 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_40","title":"Docs","text":"<ul> <li>\u270f Tweak wording to clarify <code>docs/en/docs/project-generation.md</code>. PR #5930 by @chandra-deb.</li> <li>\u270f Update Pydantic GitHub URLs. PR #5952 by @yezz123.</li> <li>\ud83d\udcdd Add opinion from Cisco. PR #5981 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_40","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/cookie-params.md</code>. PR #5890 by @bnzone.</li> </ul>"},{"location":"release-notes/#internal_47","title":"Internal","text":"<ul> <li>\u270f Update <code>zip-docs.sh</code> internal script, remove extra space. PR #5931 by @JuanPerdomo00.</li> </ul>"},{"location":"release-notes/#0900","title":"0.90.0","text":""},{"location":"release-notes/#upgrades_20","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Bump Starlette from 0.22.0 to 0.23.0. Initial PR #5739 by @Kludex.</li> </ul>"},{"location":"release-notes/#docs_41","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add article \"Tortoise ORM / ReadyAPI \u200b\u6574\u5408\u200b\u5feb\u901f\u200b\u7b46\u8a18\u200b\" to External Links. PR #5496 by @Leon0824.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #5954 by @github-actions[bot].</li> <li>\ud83d\udcdd Micro-tweak help docs. PR #5960 by @khulnasoft.</li> <li>\ud83d\udd27 Update new issue chooser to direct to GitHub Discussions. PR #5948 by @khulnasoft.</li> <li>\ud83d\udcdd Recommend GitHub Discussions for questions. PR #5944 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_41","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/body-fields.md</code>. PR #5898 by @simatheone.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/help-readyapi.md</code>. PR #5970 by @khulnasoft.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/static-files.md</code>. PR #5858 by @batlopes.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/encoder.md</code>. PR #5525 by @felipebpl.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/contributing.md</code>. PR #5870 by @Xewus.</li> </ul>"},{"location":"release-notes/#internal_48","title":"Internal","text":"<ul> <li>\u2b06\ufe0f Upgrade Ubuntu version for docs workflow. PR #5971 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors badges. PR #5943 by @khulnasoft.</li> <li>\u2728 Compute ReadyAPI Experts including GitHub Discussions. PR #5941 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade isort and update pre-commit. PR #5940 by @khulnasoft.</li> <li>\ud83d\udd27 Add template for questions in Discussions. PR #5920 by @khulnasoft.</li> <li>\ud83d\udd27 Update Sponsor Budget Insight to Powens. PR #5916 by @khulnasoft.</li> <li>\ud83d\udd27 Update GitHub Sponsors badge data. PR #5915 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0891","title":"0.89.1","text":""},{"location":"release-notes/#fixes_19","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Ignore Response classes on return annotation. PR #5855 by @Kludex. See the new docs in the PR below.</li> </ul>"},{"location":"release-notes/#docs_42","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update docs and examples for Response Model with Return Type Annotations, and update runtime error. PR #5873 by @khulnasoft. New docs at Response Model - Return Type: Other Return Type Annotations.</li> <li>\ud83d\udcdd Add External Link: ReadyAPI lambda container: serverless simplified. PR #5784 by @rafrasenberg.</li> </ul>"},{"location":"release-notes/#translations_42","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/tutorial/first_steps.md</code>. PR #5691 by @Kadermiyanyedi.</li> </ul>"},{"location":"release-notes/#0890","title":"0.89.0","text":""},{"location":"release-notes/#features_18","title":"Features","text":"<ul> <li>\u2728 Add support for function return type annotations to declare the <code>response_model</code>. Initial PR #1436 by @uriyyo.</li> </ul> <p>Now you can declare the return type / <code>response_model</code> in the function return type annotation:</p> <pre><code>from readyapi import ReadyAPI\nfrom pydantic import BaseModel\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n\n@app.get(\"/items/\")\nasync def read_items() -&gt; list[Item]:\n    return [\n        Item(name=\"Portal Gun\", price=42.0),\n        Item(name=\"Plumbus\", price=32.0),\n    ]\n</code></pre> <p>ReadyAPI will use the return type annotation to perform:</p> <ul> <li>Data validation</li> <li>Automatic documentation<ul> <li>It could power automatic client generators</li> </ul> </li> <li>Data filtering</li> </ul> <p>Before this version it was only supported via the <code>response_model</code> parameter.</p> <p>Read more about it in the new docs: Response Model - Return Type.</p>"},{"location":"release-notes/#docs_43","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add External Link: Authorization on ReadyAPI with Casbin. PR #5712 by @Xhy-5000.</li> <li>\u270f Fix typo in <code>docs/en/docs/async.md</code>. PR #5785 by @Kingdageek.</li> <li>\u270f Fix typo in <code>docs/en/docs/deployment/concepts.md</code>. PR #5824 by @kelbyfaessler.</li> </ul>"},{"location":"release-notes/#translations_43","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/readyapi-people.md</code>. PR #5577 by @Xewus.</li> <li>\ud83c\udf10 Fix typo in Chinese translation for <code>docs/zh/docs/benchmarks.md</code>. PR #4269 by @15027668g.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/tutorial/cors.md</code>. PR #3764 by @NinaHwang.</li> </ul>"},{"location":"release-notes/#internal_49","title":"Internal","text":"<ul> <li>\u2b06 Update coverage[toml] requirement from &lt;7.0,&gt;=6.5.0 to &gt;=6.5.0,&lt;8.0. PR #5801 by @dependabot[bot].</li> <li>\u2b06 Update uvicorn[standard] requirement from &lt;0.19.0,&gt;=0.12.0 to &gt;=0.12.0,&lt;0.21.0 for development. PR #5795 by @dependabot[bot].</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.24.2 to 2.24.3. PR #5842 by @dependabot[bot].</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #5825 by @github-actions[bot].</li> <li>\u2b06 Bump types-ujson from 5.5.0 to 5.6.0.0. PR #5735 by @dependabot[bot].</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.5.2 to 1.6.4. PR #5750 by @dependabot[bot].</li> <li>\ud83d\udc77 Add GitHub Action gate/check. PR #5492 by @webknjaz.</li> <li>\ud83d\udd27 Update sponsors, add Svix. PR #5848 by @khulnasoft.</li> <li>\ud83d\udd27 Remove Doist sponsor. PR #5847 by @khulnasoft.</li> <li>\u2b06 Update sqlalchemy requirement from &lt;=1.4.41,&gt;=1.3.18 to &gt;=1.3.18,&lt;1.4.43. PR #5540 by @dependabot[bot].</li> <li>\u2b06 Bump nwtgck/actions-netlify from 1.2.4 to 2.0.0. PR #5757 by @dependabot[bot].</li> <li>\ud83d\udc77 Refactor CI artifact upload/download for docs previews. PR #5793 by @khulnasoft.</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.5.1 to 1.5.2. PR #5714 by @dependabot[bot].</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #5722 by @github-actions[bot].</li> <li>\ud83d\udd27 Update sponsors, disable course bundle. PR #5713 by @khulnasoft.</li> <li>\u2b06 Update cligenius[all] requirement from &lt;0.7.0,&gt;=0.6.1 to &gt;=0.6.1,&lt;0.8.0. PR #5639 by @dependabot[bot].</li> </ul>"},{"location":"release-notes/#0880","title":"0.88.0","text":""},{"location":"release-notes/#upgrades_21","title":"Upgrades","text":"<ul> <li>\u2b06 Bump Starlette to version <code>0.22.0</code> to fix bad encoding for query parameters in new <code>TestClient</code>. PR #5659 by @azogue.</li> </ul>"},{"location":"release-notes/#docs_44","title":"Docs","text":"<ul> <li>\u270f\ufe0f Fix typo in docs for <code>docs/en/docs/advanced/middleware.md</code>. PR #5376 by @rifatrakib.</li> </ul>"},{"location":"release-notes/#translations_44","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/deployment/docker.md</code>. PR #5663 by @ayr-ton.</li> </ul>"},{"location":"release-notes/#internal_50","title":"Internal","text":"<ul> <li>\ud83d\udc77 Tweak build-docs to improve CI performance. PR #5699 by @khulnasoft.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #5566 by @pre-commit-ci[bot].</li> <li>\u2b06\ufe0f Upgrade Ruff. PR #5698 by @khulnasoft.</li> <li>\ud83d\udc77 Remove pip cache for Smokeshow as it depends on a requirements.txt. PR #5700 by @khulnasoft.</li> <li>\ud83d\udc9a Fix pip cache for Smokeshow. PR #5697 by @khulnasoft.</li> <li>\ud83d\udc77 Fix and tweak CI cache handling. PR #5696 by @khulnasoft.</li> <li>\ud83d\udc77 Update <code>setup-python</code> action in tests to use new caching feature. PR #5680 by @madkinsz.</li> <li>\u2b06 Bump black from 22.8.0 to 22.10.0. PR #5569 by @dependabot[bot].</li> </ul>"},{"location":"release-notes/#0870","title":"0.87.0","text":"<p>Highlights of this release:</p> <ul> <li>Upgraded Starlette<ul> <li>Now the <code>TestClient</code> is based on HTTPX instead of Requests. \ud83d\ude80</li> <li>There are some possible breaking changes in the <code>TestClient</code> usage, but @Kludex built bump-testclient to help you automatize migrating your tests. Make sure you are using Git and that you can undo any unnecessary changes (false positive changes, etc) before using <code>bump-testclient</code>.</li> </ul> </li> <li>New WebSocketException (and docs), re-exported from Starlette.</li> <li>Upgraded and relaxed dependencies for package extras <code>all</code> (including new Uvicorn version), when you install <code>\"readyapi[all]\"</code>.</li> <li>New docs about how to Help Maintain ReadyAPI.</li> </ul>"},{"location":"release-notes/#features_19","title":"Features","text":"<ul> <li>\u2b06\ufe0f Upgrade and relax dependencies for extras \"all\". PR #5634 by @khulnasoft.</li> <li>\u2728 Re-export Starlette's <code>WebSocketException</code> and add it to docs. PR #5629 by @khulnasoft.</li> <li>\ud83d\udcdd Update references to Requests for tests to HTTPX, and add HTTPX to extras. PR #5628 by @khulnasoft.</li> <li>\u2b06 Upgrade Starlette to <code>0.21.0</code>, including the new <code>TestClient</code> based on HTTPX. PR #5471 by @pawelrubin.</li> </ul>"},{"location":"release-notes/#docs_45","title":"Docs","text":"<ul> <li>\u270f\ufe0f Tweak Help ReadyAPI from PR review after merging. PR #5633 by @khulnasoft.</li> <li>\u270f\ufe0f  Clarify docs on CORS. PR #5627 by @paxcodes.</li> <li>\ud83d\udcdd Update Help ReadyAPI: Help Maintain ReadyAPI. PR #5632 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_45","title":"Translations","text":"<ul> <li>\ud83c\udf10 Fix highlight lines for Japanese translation for <code>docs/tutorial/query-params.md</code>. PR #2969 by @ftnext.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/advanced/additional-status-code.md</code>. PR #5477 by @axel584.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/request-forms-and-files.md</code>. PR #5579 by @batlopes.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/advanced/websockets.md</code>. PR #4983 by @xryuseix.</li> </ul>"},{"location":"release-notes/#internal_51","title":"Internal","text":"<ul> <li>\u2728 Use Ruff for linting. PR #5630 by @khulnasoft.</li> <li>\ud83d\udee0 Add Arabic issue number to Notify Translations GitHub Action. PR #5610 by @khulnasoft.</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.24.1 to 2.24.2. PR #5609 by @dependabot[bot].</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.24.0 to 2.24.1. PR #5603 by @dependabot[bot].</li> <li>\ud83d\udcdd Update coverage badge to use Samuel Colvin's Smokeshow. PR #5585 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0860","title":"0.86.0","text":""},{"location":"release-notes/#features_20","title":"Features","text":"<ul> <li>\u2b06 Add Python 3.11 to the officially supported versions. PR #5587 by @khulnasoft.</li> <li>\u2705 Enable tests for Python 3.11. PR #4881 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#fixes_20","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Close FormData (uploaded files) after the request is done. PR #5465 by @adriangb.</li> </ul>"},{"location":"release-notes/#docs_46","title":"Docs","text":"<ul> <li>\u270f Fix typo in <code>docs/en/docs/tutorial/security/oauth2-jwt.md</code>. PR #5584 by @vivekashok1221.</li> </ul>"},{"location":"release-notes/#translations_46","title":"Translations","text":"<ul> <li>\ud83c\udf10 Update wording in Chinese translation for <code>docs/zh/docs/python-types.md</code>. PR #5416 by @supercaizehua.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/deployment/index.md</code>. PR #5336 by @Xewus.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/tutorial/security/oauth2-jwt.md</code>. PR #3846 by @jaystone776.</li> </ul>"},{"location":"release-notes/#internal_52","title":"Internal","text":"<ul> <li>\ud83d\udc77 Update ReadyAPI People to exclude bots: pre-commit-ci, dependabot. PR #5586 by @khulnasoft.</li> <li>\ud83c\udfa8 Format OpenAPI JSON in <code>test_starlette_exception.py</code>. PR #5379 by @iudeen.</li> <li>\ud83d\udc77 Switch from Codecov to Smokeshow plus pytest-cov to pure coverage for internal tests. PR #5583 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #5571 by @github-actions[bot].</li> </ul>"},{"location":"release-notes/#0852","title":"0.85.2","text":""},{"location":"release-notes/#docs_47","title":"Docs","text":"<ul> <li>\u270f Fix grammar and add helpful links to dependencies in <code>docs/en/docs/async.md</code>. PR #5432 by @pamelafox.</li> <li>\u270f Fix broken link in <code>alternatives.md</code>. PR #5455 by @su-shubham.</li> <li>\u270f Fix typo in docs about contributing, for compatibility with <code>pip</code> in Zsh. PR #5523 by @zhangbo2012.</li> <li>\ud83d\udcdd Fix typo in docs with examples for Python 3.10 instead of 3.9. PR #5545 by @feliciss.</li> </ul>"},{"location":"release-notes/#translations_47","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/request-forms.md</code>. PR #4934 by @batlopes.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/dependencies/classes-as-dependencies.md</code>. PR #4971 by @Zssaer.</li> <li>\ud83c\udf10 Add French translation for <code>deployment/deta.md</code>. PR #3692 by @rjNemo.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/query-params-str-validations.md</code>. PR #5255 by @hjlarry.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/sql-databases.md</code>. PR #4999 by @Zssaer.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/wsgi.md</code>. PR #4505 by @ASpathfinder.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/body-multiple-params.md</code>. PR #4111 by @lbmendes.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/path-params-numeric-validations.md</code>. PR #4099 by @lbmendes.</li> <li>\ud83c\udf10 Add French translation for <code>deployment/versions.md</code>. PR #3690 by @rjNemo.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/help-readyapi.md</code>. PR #2233 by @JulianMaurin.</li> <li>\ud83c\udf10 Fix typo in Chinese translation for <code>docs/zh/docs/tutorial/security/first-steps.md</code>. PR #5530 by @yuki1sntSnow.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/response-status-code.md</code>. PR #4922 by @batlopes.</li> <li>\ud83d\udd27 Add config for Tamil translations. PR #5563 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_53","title":"Internal","text":"<ul> <li>\u2b06 Bump internal dependency mypy from 0.971 to 0.982. PR #5541 by @dependabot[bot].</li> <li>\u2b06 Bump nwtgck/actions-netlify from 1.2.3 to 1.2.4. PR #5507 by @dependabot[bot].</li> <li>\u2b06 Bump internal dependency types-ujson from 5.4.0 to 5.5.0. PR #5537 by @dependabot[bot].</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.23.0 to 2.24.0. PR #5508 by @dependabot[bot].</li> <li>\u2b06 Update internal dependency pytest-cov requirement from &lt;4.0.0,&gt;=2.12.0 to &gt;=2.12.0,&lt;5.0.0. PR #5539 by @dependabot[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #5536 by @pre-commit-ci[bot].</li> <li>\ud83d\udc1b Fix internal Trio test warnings. PR #5547 by @samuelcolvin.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #5408 by @pre-commit-ci[bot].</li> <li>\u2b06\ufe0f Upgrade Cligenius to include Rich in scripts for docs. PR #5502 by @khulnasoft.</li> <li>\ud83d\udc1b Fix calling <code>mkdocs</code> for languages as a subprocess to fix/enable MkDocs Material search plugin. PR #5501 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0851","title":"0.85.1","text":""},{"location":"release-notes/#fixes_21","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix support for strings in OpenAPI status codes: <code>default</code>, <code>1XX</code>, <code>2XX</code>, <code>3XX</code>, <code>4XX</code>, <code>5XX</code>. PR #5187 by @JarroVGIT.</li> </ul>"},{"location":"release-notes/#docs_48","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add WayScript x ReadyAPI Tutorial to External Links section. PR #5407 by @moneeka.</li> </ul>"},{"location":"release-notes/#internal_54","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #5447 by @github-actions[bot].</li> <li>\ud83d\udd27 Disable Material for MkDocs search plugin. PR #5495 by @khulnasoft.</li> <li>\ud83d\udd07 Ignore Trio warning in tests for CI. PR #5483 by @samuelcolvin.</li> </ul>"},{"location":"release-notes/#0850","title":"0.85.0","text":""},{"location":"release-notes/#features_21","title":"Features","text":"<ul> <li>\u2b06 Upgrade version required of Starlette from <code>0.19.1</code> to <code>0.20.4</code>. Initial PR #4820 by @Kludex.<ul> <li>This includes several bug fixes in Starlette.</li> </ul> </li> <li>\u2b06\ufe0f Upgrade Uvicorn max version in public extras: all. From <code>&gt;=0.12.0,&lt;0.18.0</code> to <code>&gt;=0.12.0,&lt;0.19.0</code>. PR #5401 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_55","title":"Internal","text":"<ul> <li>\u2b06\ufe0f Upgrade dependencies for doc and dev internal extras: Cligenius, Uvicorn. PR #5400 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade test dependencies: Black, HTTPX, databases, types-ujson. PR #5399 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade mypy and tweak internal type annotations. PR #5398 by @khulnasoft.</li> <li>\ud83d\udd27 Update test dependencies, upgrade Pytest, move dependencies from dev to test. PR #5396 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0840","title":"0.84.0","text":""},{"location":"release-notes/#breaking-changes_3","title":"Breaking Changes","text":"<p>This version of ReadyAPI drops support for Python 3.6. \ud83d\udd25 Please upgrade to a supported version of Python (3.7 or above), Python 3.6 reached the end-of-life a long time ago. \ud83d\ude05\u2620</p> <ul> <li>\ud83d\udd27 Update package metadata, drop support for Python 3.6, move build internals from Flit to Hatch. PR #5240 by @ofek.</li> </ul>"},{"location":"release-notes/#0830","title":"0.83.0","text":"<p>\ud83d\udea8 This is probably the last release (or one of the last releases) to support Python 3.6. \ud83d\udd25</p> <p>Python 3.6 reached the end-of-life and is no longer supported by Python since around a year ago.</p> <p>You hopefully updated to a supported version of Python a while ago. If you haven't, you really should.</p>"},{"location":"release-notes/#features_22","title":"Features","text":"<ul> <li>\u2728 Add support in <code>jsonable_encoder</code> for include and exclude with dataclasses. PR #4923 by @DCsunset.</li> </ul>"},{"location":"release-notes/#fixes_22","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix <code>RuntimeError</code> raised when <code>HTTPException</code> has a status code with no content. PR #5365 by @iudeen.</li> <li>\ud83d\udc1b Fix empty reponse body when default <code>status_code</code> is empty but the a <code>Response</code> parameter with <code>response.status_code</code> is set. PR #5360 by @tmeckel.</li> </ul>"},{"location":"release-notes/#docs_49","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update <code>SECURITY.md</code>. PR #5377 by @Kludex.</li> </ul>"},{"location":"release-notes/#internal_56","title":"Internal","text":"<ul> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #5352 by @pre-commit-ci[bot].</li> </ul>"},{"location":"release-notes/#0820","title":"0.82.0","text":"<p>\ud83d\udea8 This is probably the last release (or one of the last releases) to support Python 3.6. \ud83d\udd25</p> <p>Python 3.6 reached the end-of-life and is no longer supported by Python since around a year ago.</p> <p>You hopefully updated to a supported version of Python a while ago. If you haven't, you really should.</p>"},{"location":"release-notes/#features_23","title":"Features","text":"<ul> <li>\u2728 Export <code>WebSocketState</code> in <code>readyapi.websockets</code>. PR #4376 by @matiuszka.</li> <li>\u2728 Support Python internal description on Pydantic model's docstring. PR #3032 by @Kludex.</li> <li>\u2728 Update <code>ORJSONResponse</code> to support non <code>str</code> keys and serializing Numpy arrays. PR #3892 by @baby5.</li> </ul>"},{"location":"release-notes/#fixes_23","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Allow exit code for dependencies with <code>yield</code> to always execute, by removing capacity limiter for them, to e.g. allow closing DB connections without deadlocks. PR #5122 by @adriangb.</li> <li>\ud83d\udc1b Fix ReadyAPI People GitHub Action: set HTTPX timeout for GraphQL query request. PR #5222 by @iudeen.</li> <li>\ud83d\udc1b Make sure a parameter defined as required is kept required in OpenAPI even if defined as optional in another dependency. PR #4319 by @cd17822.</li> <li>\ud83d\udc1b Fix support for path parameters in WebSockets. PR #3879 by @davidbrochart.</li> </ul>"},{"location":"release-notes/#docs_50","title":"Docs","text":"<ul> <li>\u270f Update Hypercorn link, now pointing to GitHub. PR #5346 by @baconfield.</li> <li>\u270f Tweak wording in <code>docs/en/docs/advanced/dataclasses.md</code>. PR #3698 by @pfackeldey.</li> <li>\ud83d\udcdd Add note about Python 3.10 <code>X | Y</code> operator in explanation about Response Models. PR #5307 by @MendyLanda.</li> <li>\ud83d\udcdd Add link to New Relic article: \"How to monitor ReadyAPI application performance using Python agent\". PR #5260 by @sjyothi54.</li> <li>\ud83d\udcdd Update docs for <code>ORJSONResponse</code> with details about improving performance. PR #2615 by @falkben.</li> <li>\ud83d\udcdd Add docs for creating a custom Response class. PR #5331 by @khulnasoft.</li> <li>\ud83d\udcdd Add tip about using alias for form data fields. PR #5329 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_48","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/features.md</code>. PR #5315 by @Xewus.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/request-files.md</code>. PR #4529 by @ASpathfinder.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/encoder.md</code>. PR #4969 by @Zssaer.</li> <li>\ud83c\udf10 Fix MkDocs file line for Portuguese translation of <code>background-task.md</code>. PR #5242 by @ComicShrimp.</li> </ul>"},{"location":"release-notes/#internal_57","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #5347 by @github-actions[bot].</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.22.0 to 2.23.0. PR #5321 by @dependabot[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #5318 by @pre-commit-ci[bot].</li> <li>\u270f Fix a small code highlight line error. PR #5256 by @hjlarry.</li> <li>\u267b Internal small refactor, move <code>operation_id</code> parameter position in delete method for consistency with the code. PR #4474 by @hiel.</li> <li>\ud83d\udd27 Update sponsors, disable ImgWhale. PR #5338 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0810","title":"0.81.0","text":""},{"location":"release-notes/#features_24","title":"Features","text":"<ul> <li>\u2728 Add ReDoc <code>&lt;noscript&gt;</code> warning when JS is disabled. PR #5074 by @evroon.</li> <li>\u2728 Add support for <code>FrozenSet</code> in parameters (e.g. query). PR #2938 by @juntatalor.</li> <li>\u2728 Allow custom middlewares to raise <code>HTTPException</code>s and propagate them. PR #2036 by @ghandic.</li> <li>\u2728 Preserve <code>json.JSONDecodeError</code> information when handling invalid JSON in request body, to support custom exception handlers that use its information. PR #4057 by @UKnowWhoIm.</li> </ul>"},{"location":"release-notes/#fixes_24","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix <code>jsonable_encoder</code> for dataclasses with pydantic-compatible fields. PR #3607 by @himbeles.</li> <li>\ud83d\udc1b Fix support for extending <code>openapi_extras</code> with parameter lists. PR #4267 by @orilevari.</li> </ul>"},{"location":"release-notes/#docs_51","title":"Docs","text":"<ul> <li>\u270f Fix a simple typo in <code>docs/en/docs/python-types.md</code>. PR #5193 by @GlitchingCore.</li> <li>\u270f Fix typos in <code>tests/test_schema_extra_examples.py</code>. PR #5126 by @supraaxdd.</li> <li>\u270f Fix typos in <code>docs/en/docs/tutorial/path-params-numeric-validations.md</code>. PR #5142 by @invisibleroads.</li> <li>\ud83d\udcdd Add step about upgrading pip in the venv to avoid errors when installing dependencies <code>docs/en/docs/contributing.md</code>. PR #5181 by @edisnake.</li> <li>\u270f Reword and clarify text in tutorial <code>docs/en/docs/tutorial/body-nested-models.md</code>. PR #5169 by @papb.</li> <li>\u270f Fix minor typo in <code>docs/en/docs/features.md</code>. PR #5206 by @OtherBarry.</li> <li>\u270f Fix minor typos in <code>docs/en/docs/async.md</code>. PR #5125 by @Ksenofanex.</li> <li>\ud83d\udcdd Add external link to docs: \"Readyapi, Docker(Docker compose) and Postgres\". PR #5033 by @krishnardt.</li> <li>\ud83d\udcdd Simplify example for docs for Additional Responses, remove unnecessary <code>else</code>. PR #4693 by @adriangb.</li> <li>\ud83d\udcdd Update docs, compare enums with identity instead of equality. PR #4905 by @MicaelJarniac.</li> <li>\u270f Fix typo in <code>docs/en/docs/python-types.md</code>. PR #4886 by @MicaelJarniac.</li> <li>\ud83c\udfa8 Fix syntax highlighting in docs for OpenAPI Callbacks. PR #4368 by @xncbf.</li> <li>\u270f Reword confusing sentence in docs file <code>typo-fix-path-params-numeric-validations.md</code>. PR #3219 by @ccrenfroe.</li> <li>\ud83d\udcdd Update docs for handling HTTP Basic Auth with <code>secrets.compare_digest()</code> to account for non-ASCII characters. PR #3536 by @lewoudar.</li> <li>\ud83d\udcdd Update docs for testing, fix examples with relative imports. PR #5302 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_49","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/index.md</code>. PR #5289 by @impocode.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/deployment/versions.md</code>. PR #4985 by @emp7yhead.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/header-params.md</code>. PR #4921 by @batlopes.</li> <li>\ud83c\udf10 Update <code>ko/mkdocs.yml</code> for a missing link. PR #5020 by @dalinaum.</li> </ul>"},{"location":"release-notes/#internal_58","title":"Internal","text":"<ul> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.21.1 to 2.22.0. PR #5258 by @dependabot[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #5196 by @pre-commit-ci[bot].</li> <li>\ud83d\udd25 Delete duplicated tests in <code>tests/test_tutorial/test_sql_databases/test_sql_databases.py</code>. PR #5040 by @raccoonyy.</li> <li>\u267b Simplify internal RegEx in <code>readyapi/utils.py</code>. PR #5057 by @pylounge.</li> <li>\ud83d\udd27 Fix Type hint of <code>auto_error</code> which does not need to be <code>Optional[bool]</code>. PR #4933 by @DavidKimDY.</li> <li>\ud83d\udd27 Update mypy config, use <code>strict = true</code> instead of manual configs. PR #4605 by @michaeloliverx.</li> <li>\u267b Change a <code>dict()</code> for <code>{}</code> in <code>readyapi/utils.py</code>. PR #3138 by @ShahriyarR.</li> <li>\u267b Move internal variable for errors in <code>jsonable_encoder</code> to put related code closer. PR #4560 by @GuilleQP.</li> <li>\u267b Simplify conditional assignment in <code>readyapi/dependencies/utils.py</code>. PR #4597 by @cikay.</li> <li>\u2b06 Upgrade version pin accepted for Flake8, for internal code, to <code>flake8 &gt;=3.8.3,&lt;6.0.0</code>. PR #4097 by @jamescurtin.</li> <li>\ud83c\udf71 Update Jina banner, fix typo. PR #5301 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0800","title":"0.80.0","text":""},{"location":"release-notes/#breaking-changes-fixes","title":"Breaking Changes - Fixes","text":"<ul> <li>\ud83d\udc1b Fix <code>response_model</code> not invalidating <code>None</code>. PR #2725 by @hukkin.</li> </ul> <p>If you are using <code>response_model</code> with some type that doesn't include <code>None</code> but the function is returning <code>None</code>, it will now raise an internal server error, because you are returning invalid data that violates the contract in <code>response_model</code>. Before this release it would allow breaking that contract returning <code>None</code>.</p> <p>For example, if you have an app like this:</p> <pre><code>from readyapi import ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    price: Optional[float] = None\n    owner_ids: Optional[List[int]] = None\n\napp = ReadyAPI()\n\n@app.get(\"/items/invalidnone\", response_model=Item)\ndef get_invalid_none():\n    return None\n</code></pre> <p>...calling the path <code>/items/invalidnone</code> will raise an error, because <code>None</code> is not a valid type for the <code>response_model</code> declared with <code>Item</code>.</p> <p>You could also be implicitly returning <code>None</code> without realizing, for example:</p> <pre><code>from readyapi import ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    price: Optional[float] = None\n    owner_ids: Optional[List[int]] = None\n\napp = ReadyAPI()\n\n@app.get(\"/items/invalidnone\", response_model=Item)\ndef get_invalid_none():\n    if flag:\n        return {\"name\": \"foo\"}\n    # if flag is False, at this point the function will implicitly return None\n</code></pre> <p>If you have path operations using <code>response_model</code> that need to be allowed to return <code>None</code>, make it explicit in <code>response_model</code> using <code>Union[Something, None]</code>:</p> <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    price: Optional[float] = None\n    owner_ids: Optional[List[int]] = None\n\napp = ReadyAPI()\n\n@app.get(\"/items/invalidnone\", response_model=Union[Item, None])\ndef get_invalid_none():\n    return None\n</code></pre> <p>This way the data will be correctly validated, you won't have an internal server error, and the documentation will also reflect that this path operation could return <code>None</code> (or <code>null</code> in JSON).</p>"},{"location":"release-notes/#fixes_25","title":"Fixes","text":"<ul> <li>\u2b06 Upgrade Swagger UI copy of <code>oauth2-redirect.html</code> to include fixes for flavors of authorization code flows in Swagger UI. PR #3439 initial PR by @koonpeng.</li> <li>\u267b Strip empty whitespace from description extracted from docstrings. PR #2821 by @and-semakin.</li> <li>\ud83d\udc1b Fix cached dependencies when using a dependency in <code>Security()</code> and other places (e.g. <code>Depends()</code>) with different OAuth2 scopes. PR #2945 by @laggardkernel.</li> <li>\ud83c\udfa8 Update type annotations for <code>response_model</code>, allow things like <code>Union[str, None]</code>. PR #5294 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_50","title":"Translations","text":"<ul> <li>\ud83c\udf10 Fix typos in German translation for <code>docs/de/docs/features.md</code>. PR #4533 by @0xflotus.</li> <li>\ud83c\udf10 Add missing navigator for <code>encoder.md</code> in Korean translation. PR #5238 by @joonas-yoon.</li> <li>(Empty PR merge by accident) #4913.</li> </ul>"},{"location":"release-notes/#0791","title":"0.79.1","text":""},{"location":"release-notes/#fixes_26","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix <code>jsonable_encoder</code> using <code>include</code> and <code>exclude</code> parameters for non-Pydantic objects. PR #2606 by @xaviml.</li> <li>\ud83d\udc1b Fix edge case with repeated aliases names not shown in OpenAPI. PR #2351 by @klaa97.</li> <li>\ud83d\udcdd Add misc dependency installs to tutorial docs. PR #2126 by @TeoZosa.</li> </ul>"},{"location":"release-notes/#docs_52","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add note giving credit for illustrations to Ketrina Thompson. PR #5284 by @khulnasoft.</li> <li>\u270f Fix typo in <code>python-types.md</code>. PR #5116 by @Kludex.</li> <li>\u270f Fix typo in <code>docs/en/docs/python-types.md</code>. PR #5007 by @atiabbz.</li> <li>\ud83d\udcdd Remove unneeded Django/Flask references from async topic intro. PR #5280 by @carltongibson.</li> <li>\u2728 Add illustrations for Concurrent burgers and Parallel burgers. PR #5277 by @khulnasoft. Updated docs at: Concurrency and Burgers.</li> </ul>"},{"location":"release-notes/#translations_51","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/query-params.md</code>. PR #4775 by @batlopes.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/security/first-steps.md</code>. PR #4954 by @FLAIR7.</li> <li>\ud83c\udf10 Add translation for <code>docs/zh/docs/advanced/response-cookies.md</code>. PR #4638 by @zhangbo2012.</li> <li>\ud83c\udf10  Add French translation for <code>docs/fr/docs/deployment/index.md</code>. PR #3689 by @rjNemo.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>tutorial/handling-errors.md</code>. PR #4769 by @frnsimoes.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/history-design-future.md</code>. PR #3451 by @rjNemo.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/background-tasks.md</code>. PR #4854 by @AdmiralDesu.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/tutorial/security/first-steps.md</code>. PR #3841 by @jaystone776.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/advanced/nosql-databases.md</code>. PR #4205 by @sUeharaE4.</li> <li>\ud83c\udf10 Add Indonesian translation for <code>docs/id/docs/tutorial/index.md</code>. PR #4705 by @bas-baskara.</li> <li>\ud83c\udf10 Add Persian translation for <code>docs/fa/docs/index.md</code> and tweak right-to-left CSS. PR #2395 by @mohsen-mahmoodi.</li> </ul>"},{"location":"release-notes/#internal_59","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update Jina sponsorship. PR #5283 by @khulnasoft.</li> <li>\ud83d\udd27 Update Jina sponsorship. PR #5272 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, Striveworks badge. PR #5179 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0790","title":"0.79.0","text":""},{"location":"release-notes/#fixes-breaking-changes","title":"Fixes - Breaking Changes","text":"<ul> <li>\ud83d\udc1b Fix removing body from status codes that do not support it. PR #5145 by @khulnasoft.<ul> <li>Setting <code>status_code</code> to <code>204</code>, <code>304</code>, or any code below <code>200</code> (1xx) will remove the body from the response.</li> <li>This fixes an error in Uvicorn that otherwise would be thrown: <code>RuntimeError: Response content longer than Content-Length</code>.</li> <li>This removes <code>readyapi.openapi.constants.STATUS_CODES_WITH_NO_BODY</code>, it is replaced by a function in utils.</li> </ul> </li> </ul>"},{"location":"release-notes/#translations_52","title":"Translations","text":"<ul> <li>\ud83c\udf10 Start of Hebrew translation. PR #5050 by @itay-raveh.</li> <li>\ud83d\udd27 Add config for Swedish translations notification. PR #5147 by @khulnasoft.</li> <li>\ud83c\udf10 Start of Swedish translation. PR #5062 by @MrRawbin.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/advanced/index.md</code>. PR #5043 by @wakabame.</li> <li>\ud83c\udf10\ud83c\uddf5\ud83c\uddf1 Add Polish translation for <code>docs/pl/docs/tutorial/first-steps.md</code>. PR #5024 by @Valaraucoo.</li> </ul>"},{"location":"release-notes/#internal_60","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update translations notification for Hebrew. PR #5158 by @khulnasoft.</li> <li>\ud83d\udd27 Update Dependabot commit message. PR #5156 by @khulnasoft.</li> <li>\u2b06 Bump actions/upload-artifact from 2 to 3. PR #5148 by @dependabot[bot].</li> <li>\u2b06 Bump actions/cache from 2 to 3. PR #5149 by @dependabot[bot].</li> <li>\ud83d\udd27 Update sponsors badge configs. PR #5155 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #5154 by @khulnasoft.</li> <li>\ud83d\udd27 Update Jina sponsor badges. PR #5151 by @khulnasoft.</li> <li>\u2b06 Bump actions/checkout from 2 to 3. PR #5133 by @dependabot[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #5030 by @pre-commit-ci[bot].</li> <li>\u2b06 Bump nwtgck/actions-netlify from 1.1.5 to 1.2.3. PR #5132 by @dependabot[bot].</li> <li>\u2b06 Bump codecov/codecov-action from 2 to 3. PR #5131 by @dependabot[bot].</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.9.0 to 2.21.1. PR #5130 by @dependabot[bot].</li> <li>\u2b06 Bump actions/setup-python from 2 to 4. PR #5129 by @dependabot[bot].</li> <li>\ud83d\udc77 Add Dependabot. PR #5128 by @khulnasoft.</li> <li>\u267b\ufe0f Move from <code>Optional[X]</code> to <code>Union[X, None]</code> for internal utils. PR #5124 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, remove Dropbase, add Doist. PR #5096 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, remove Classiq, add ImgWhale. PR #5079 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0780","title":"0.78.0","text":""},{"location":"release-notes/#features_25","title":"Features","text":"<ul> <li> <p>\u2728 Add support for omitting <code>...</code> as default value when declaring required parameters with:</p> </li> <li> <p><code>Path()</code></p> </li> <li><code>Query()</code></li> <li><code>Header()</code></li> <li><code>Cookie()</code></li> <li><code>Body()</code></li> <li><code>Form()</code></li> <li><code>File()</code></li> </ul> <p>New docs at Tutorial - Query Parameters and String Validations - Make it required. PR #4906 by @khulnasoft.</p> <p>Up to now, declaring a required parameter while adding additional validation or metadata needed using <code>...</code> (Ellipsis).</p> <p>For example:</p> <pre><code>from readyapi import Cookie, ReadyAPI, Header, Path, Query\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\ndef main(\n    item_id: int = Path(default=..., gt=0),\n    query: str = Query(default=..., max_length=10),\n    session: str = Cookie(default=..., min_length=3),\n    x_trace: str = Header(default=..., title=\"Tracing header\"),\n):\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>...all these parameters are required because the default value is <code>...</code> (Ellipsis).</p> <p>But now it's possible and supported to just omit the default value, as would be done with Pydantic fields, and the parameters would still be required.</p> <p>\u2728 For example, this is now supported:</p> <pre><code>from readyapi import Cookie, ReadyAPI, Header, Path, Query\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\ndef main(\n    item_id: int = Path(gt=0),\n    query: str = Query(max_length=10),\n    session: str = Cookie(min_length=3),\n    x_trace: str = Header(title=\"Tracing header\"),\n):\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>To declare parameters as optional (not required), you can set a default value as always, for example using <code>None</code>:</p> <pre><code>from typing import Union\nfrom readyapi import Cookie, ReadyAPI, Header, Path, Query\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\ndef main(\n    item_id: int = Path(gt=0),\n    query: Union[str, None] = Query(default=None, max_length=10),\n    session: Union[str, None] = Cookie(default=None, min_length=3),\n    x_trace: Union[str, None] = Header(default=None, title=\"Tracing header\"),\n):\n    return {\"message\": \"Hello World\"}\n</code></pre>"},{"location":"release-notes/#docs_53","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add docs recommending <code>Union</code> over <code>Optional</code> and migrate source examples. New docs at Python Types Intro - Using <code>Union</code> or <code>Optional</code>. PR #4908 by @khulnasoft.</li> <li>\ud83c\udfa8 Fix default value as set in tutorial for Path Operations Advanced Configurations. PR #4899 by @khulnasoft.</li> <li>\ud83d\udcdd Add documentation for redefined path operations. PR #4864 by @madkinsz.</li> <li>\ud83d\udcdd Updates links for Celery documentation. PR #4736 by @sammyzord.</li> <li>\u270f Fix example code with sets in tutorial for body nested models. PR #3030 by @hitrust.</li> <li>\u270f Fix links to Pydantic docs. PR #4670 by @kinuax.</li> <li>\ud83d\udcdd Update docs about Swagger UI self-hosting with newer source links. PR #4813 by @Kastakin.</li> <li>\ud83d\udcdd Add link to external article: Building the Poll App From Django Tutorial With ReadyAPI And React. PR #4778 by @jbrocher.</li> <li>\ud83d\udcdd Add OpenAPI warning to \"Body - Fields\" docs with extra schema extensions. PR #4846 by @ml-evs.</li> </ul>"},{"location":"release-notes/#translations_53","title":"Translations","text":"<ul> <li>\ud83c\udf10 Fix code examples in Japanese translation for <code>docs/ja/docs/tutorial/testing.md</code>. PR #4623 by @hirotoKirimaru.</li> </ul>"},{"location":"release-notes/#internal_61","title":"Internal","text":"<ul> <li>\u267b Refactor dict value extraction to minimize key lookups <code>readyapi/utils.py</code>. PR #3139 by @ShahriyarR.</li> <li>\u2705 Add tests for required nonable parameters and body fields. PR #4907 by @khulnasoft.</li> <li>\ud83d\udc77 Fix installing Material for MkDocs Insiders in CI. PR #4897 by @khulnasoft.</li> <li>\ud83d\udc77 Add pre-commit CI instead of custom GitHub Action. PR #4896 by @khulnasoft.</li> <li>\ud83d\udc77 Add pre-commit GitHub Action workflow. PR #4895 by @khulnasoft.</li> <li>\ud83d\udcdd Add dark mode auto switch to docs based on OS preference. PR #4869 by @ComicShrimp.</li> <li>\ud83d\udd25 Remove un-used old pending tests, already covered in other places. PR #4891 by @khulnasoft.</li> <li>\ud83d\udd27 Add Python formatting hooks to pre-commit. PR #4890 by @khulnasoft.</li> <li>\ud83d\udd27 Add pre-commit with first config and first formatting pass. PR #4888 by @khulnasoft.</li> <li>\ud83d\udc77 Disable CI installing Material for MkDocs in forks. PR #4410 by @dolfinus.</li> </ul>"},{"location":"release-notes/#0771","title":"0.77.1","text":""},{"location":"release-notes/#upgrades_22","title":"Upgrades","text":"<ul> <li>\u2b06 Upgrade Starlette from 0.19.0 to 0.19.1. PR #4819 by @Kludex.</li> </ul>"},{"location":"release-notes/#docs_54","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add link to german article: REST-API Programmieren mittels Python und dem ReadyAPI Modul. PR #4624 by @fschuermeyer.</li> <li>\ud83d\udcdd Add external link: PyCharm Guide to ReadyAPI. PR #4512 by @mukulmantosh.</li> <li>\ud83d\udcdd Add external link to article: Building an API with ReadyAPI and Supabase and Deploying on Deta. PR #4440 by @aUnicornDev.</li> <li>\u270f Fix small typo in <code>docs/en/docs/tutorial/security/first-steps.md</code>. PR #4515 by @KikoIlievski.</li> </ul>"},{"location":"release-notes/#translations_54","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Polish translation for <code>docs/pl/docs/tutorial/index.md</code>. PR #4516 by @MKaczkow.</li> <li>\u270f Fix typo in deployment. PR #4629 by @raisulislam541.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/help-readyapi.md</code>. PR #4583 by @mateusjs.</li> </ul>"},{"location":"release-notes/#internal_62","title":"Internal","text":"<ul> <li>\ud83d\udd27 Add notifications in issue for Uzbek translations. PR #4884 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0770","title":"0.77.0","text":""},{"location":"release-notes/#upgrades_23","title":"Upgrades","text":"<ul> <li>\u2b06 Upgrade Starlette from 0.18.0 to 0.19.0. PR #4488 by @Kludex.<ul> <li>When creating an explicit <code>JSONResponse</code> the <code>content</code> argument is now required.</li> </ul> </li> </ul>"},{"location":"release-notes/#docs_55","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add external link to article: Seamless ReadyAPI Configuration with ConfZ. PR #4414 by @silvanmelchior.</li> <li>\ud83d\udcdd Add external link to article: 5 Advanced Features of ReadyAPI You Should Try. PR #4436 by @kaustubhgupta.</li> <li>\u270f Reword to improve legibility of docs about <code>TestClient</code>. PR #4389 by @rgilton.</li> <li>\ud83d\udcdd Add external link to blog post about Kafka, ReadyAPI, and Ably. PR #4044 by @Ugbot.</li> <li>\u270f Fix typo in <code>docs/en/docs/tutorial/sql-databases.md</code>. PR #4875 by @wpyoga.</li> <li>\u270f Fix typo in <code>docs/en/docs/async.md</code>. PR #4726 by @Prezu.</li> </ul>"},{"location":"release-notes/#translations_55","title":"Translations","text":"<ul> <li>\ud83c\udf10 Update source example highlights for <code>docs/zh/docs/tutorial/query-params-str-validations.md</code>. PR #4237 by @caimaoy.</li> <li>\ud83c\udf10 Remove translation docs references to aiofiles as it's no longer needed since AnyIO. PR #3594 by @alonme.</li> <li>\u270f \ud83c\udf10 Fix typo in Portuguese translation for <code>docs/pt/docs/tutorial/path-params.md</code>. PR #4722 by @CleoMenezesJr.</li> <li>\ud83c\udf10 Fix live docs server for translations for some languages. PR #4729 by @wakabame.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/cookie-params.md</code>. PR #4112 by @lbmendes.</li> <li>\ud83c\udf10 Fix French translation for <code>docs/tutorial/body.md</code>. PR #4332 by @Smlep.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/advanced/conditional-openapi.md</code>. PR #2631 by @sh0nk.</li> <li>\ud83c\udf10 Fix Japanese translation of <code>docs/ja/docs/tutorial/body.md</code>. PR #3062 by @a-takahashi223.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/background-tasks.md</code>. PR #2170 by @izaguerreiro.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/deployment/deta.md</code>. PR #4442 by @lsglucas.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/async.md</code>. PR #4036 by @Winand.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/tutorial/body.md</code>. PR #3960 by @leandrodesouzadev.</li> <li>\ud83c\udf10 Add Portuguese translation of <code>tutorial/extra-data-types.md</code>. PR #4077 by @luccasmmg.</li> <li>\ud83c\udf10 Update German translation for <code>docs/features.md</code>. PR #3905 by @jomue.</li> </ul>"},{"location":"release-notes/#0760","title":"0.76.0","text":""},{"location":"release-notes/#upgrades_24","title":"Upgrades","text":"<ul> <li>\u2b06 Upgrade Starlette from 0.17.1 to 0.18.0. PR #4483 by @Kludex.</li> </ul>"},{"location":"release-notes/#internal_63","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #4847 by @github-actions[bot].</li> <li>\ud83d\udd27 Add Budget Insight sponsor. PR #4824 by @khulnasoft.</li> <li>\ud83c\udf71 Update sponsor, ExoFlare badge. PR #4822 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, enable Dropbase again, update TalkPython link. PR #4821 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0752","title":"0.75.2","text":"<p>This release includes upgrades to third-party packages that handle security issues. Although there's a chance these issues don't affect you in particular, please upgrade as soon as possible.</p>"},{"location":"release-notes/#fixes_27","title":"Fixes","text":"<ul> <li>\u2705 Fix new/recent tests with new fixed <code>ValidationError</code> JSON Schema. PR #4806 by @khulnasoft.</li> <li>\ud83d\udc1b Fix JSON Schema for <code>ValidationError</code> at field <code>loc</code>. PR #3810 by @dconathan.</li> <li>\ud83d\udc1b Fix support for prefix on APIRouter WebSockets. PR #2640 by @Kludex.</li> </ul>"},{"location":"release-notes/#upgrades_25","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Update ujson ranges for CVE-2021-45958. PR #4804 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade dependencies upper range for extras \"all\". PR #4803 by @khulnasoft.</li> <li>\u2b06 Upgrade Swagger UI - swagger-ui-dist@4. This handles a security issue in Swagger UI itself where it could be possible to inject HTML into Swagger UI. Please upgrade as soon as you can, in particular if you expose your Swagger UI (<code>/docs</code>) publicly to non-expert users. PR #4347 by @RAlanWright.</li> </ul>"},{"location":"release-notes/#internal_64","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update sponsors, add: ExoFlare, Ines Course; remove: Dropbase, Vim.so, Calmcode; update: Striveworks, TalkPython and TestDriven.io. PR #4805 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade Codecov GitHub Action. PR #4801 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0751","title":"0.75.1","text":""},{"location":"release-notes/#translations_56","title":"Translations","text":"<ul> <li>\ud83c\udf10 Start Dutch translations. PR #4703 by @khulnasoft.</li> <li>\ud83c\udf10 Start Persian/Farsi translations. PR #4243 by @aminalaee.</li> <li>\u270f Reword sentence about handling errors. PR #1993 by @khuhroproeza.</li> </ul>"},{"location":"release-notes/#internal_65","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #4752 by @github-actions[bot].</li> <li>\u2796 Temporarily remove cligenius-cli from dependencies and upgrade Black to unblock Pydantic CI. PR #4754 by @khulnasoft.</li> <li>\ud83d\udd27 Add configuration to notify Dutch translations. PR #4702 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #4699 by @github-actions[bot].</li> <li>\ud83d\udc1b Fix ReadyAPI People generation to include missing file in commit. PR #4695 by @khulnasoft.</li> <li>\ud83d\udd27 Update Classiq sponsor links. PR #4688 by @khulnasoft.</li> <li>\ud83d\udd27 Add Classiq sponsor. PR #4671 by @khulnasoft.</li> <li>\ud83d\udcdd Add Jina's QA Bot to the docs to help people that want to ask quick questions. PR #4655 by @khulnasoft based on original PR #4626 by @hanxiao.</li> </ul>"},{"location":"release-notes/#0750","title":"0.75.0","text":""},{"location":"release-notes/#features_26","title":"Features","text":"<ul> <li>\u2728 Add support for custom <code>generate_unique_id_function</code> and docs for generating clients. New docs: Advanced - Generate Clients. PR #4650 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0741","title":"0.74.1","text":""},{"location":"release-notes/#features_27","title":"Features","text":"<ul> <li>\u2728 Include route in scope to allow middleware and other tools to extract its information. PR #4603 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0740","title":"0.74.0","text":""},{"location":"release-notes/#breaking-changes_4","title":"Breaking Changes","text":"<ul> <li>\u2728 Update internal <code>AsyncExitStack</code> to fix context for dependencies with <code>yield</code>. PR #4575 by @khulnasoft.</li> </ul> <p>Dependencies with <code>yield</code> can now catch <code>HTTPException</code> and custom exceptions. For example:</p> <pre><code>async def get_database():\n    with Session() as session:\n        try:\n            yield session\n        except HTTPException:\n            session.rollback()\n            raise\n        finally:\n            session.close()\n</code></pre> <p>After the dependency with <code>yield</code> handles the exception (or not) the exception is raised again. So that any exception handlers can catch it, or ultimately the default internal <code>ServerErrorMiddleware</code>.</p> <p>If you depended on exceptions not being received by dependencies with <code>yield</code>, and receiving an exception breaks the code after <code>yield</code>, you can use a block with <code>try</code> and <code>finally</code>:</p> <pre><code>async def do_something():\n    try:\n        yield something\n    finally:\n        some_cleanup()\n</code></pre> <p>...that way the <code>finally</code> block is run regardless of any exception that might happen.</p>"},{"location":"release-notes/#features_28","title":"Features","text":"<ul> <li>The same PR #4575 from above also fixes the <code>contextvars</code> context for the code before and after <code>yield</code>. This was the main objective of that PR.</li> </ul> <p>This means that now, if you set a value in a context variable before <code>yield</code>, the value would still be available after <code>yield</code> (as you would intuitively expect). And it also means that you can reset the context variable with a token afterwards.</p> <p>For example, this works correctly now:</p> <pre><code>from contextvars import ContextVar\nfrom typing import Any, Dict, Optional\n\n\nlegacy_request_state_context_var: ContextVar[Optional[Dict[str, Any]]] = ContextVar(\n    \"legacy_request_state_context_var\", default=None\n)\n\nasync def set_up_request_state_dependency():\n    request_state = {\"user\": \"deadpond\"}\n    contextvar_token = legacy_request_state_context_var.set(request_state)\n    yield request_state\n    legacy_request_state_context_var.reset(contextvar_token)\n</code></pre> <p>...before this change it would raise an error when resetting the context variable, because the <code>contextvars</code> context was different, because of the way it was implemented.</p> <p>Note: You probably don't need <code>contextvars</code>, and you should probably avoid using them. But they are powerful and useful in some advanced scenarios, for example, migrating from code that used Flask's <code>g</code> semi-global variable.</p> <p>Technical Details: If you want to know more of the technical details you can check out the PR description #4575.</p>"},{"location":"release-notes/#internal_66","title":"Internal","text":"<ul> <li>\ud83d\udd27 Add Striveworks sponsor. PR #4596 by @khulnasoft.</li> <li>\ud83d\udc9a Only build docs on push when on master to avoid duplicate runs from PRs. PR #4564 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #4502 by @github-actions[bot].</li> </ul>"},{"location":"release-notes/#0730","title":"0.73.0","text":""},{"location":"release-notes/#features_29","title":"Features","text":"<ul> <li>\u2728 Add support for declaring <code>UploadFile</code> parameters without explicit <code>File()</code>. PR #4469 by @khulnasoft. New docs: Request Files - File Parameters with UploadFile.</li> <li>\u2728 Add support for tags with Enums. PR #4468 by @khulnasoft. New docs: Path Operation Configuration - Tags with Enums.</li> <li>\u2728 Allow hiding from OpenAPI (and Swagger UI) <code>Query</code>, <code>Cookie</code>, <code>Header</code>, and <code>Path</code> parameters. PR #3144 by @astraldawn. New docs: Query Parameters and String Validations - Exclude from OpenAPI.</li> </ul>"},{"location":"release-notes/#docs_56","title":"Docs","text":"<ul> <li>\ud83d\udcdd Tweak and improve docs for Request Files. PR #4470 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#fixes_28","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix bug preventing to use OpenAPI when using tuples. PR #3874 by @victorbenichoux.</li> <li>\ud83d\udc1b Prefer custom encoder over defaults if specified in <code>jsonable_encoder</code>. PR #2061 by @viveksunder.<ul> <li>\ud83d\udc9a Duplicate PR to trigger CI. PR #4467 by @khulnasoft.</li> </ul> </li> </ul>"},{"location":"release-notes/#internal_67","title":"Internal","text":"<ul> <li>\ud83d\udc1b Fix docs dependencies cache, to get the latest Material for MkDocs. PR #4466 by @khulnasoft.</li> <li>\ud83d\udd27 Add sponsor Dropbase. PR #4465 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0720","title":"0.72.0","text":""},{"location":"release-notes/#features_30","title":"Features","text":"<ul> <li>\u2728 Enable configuring Swagger UI parameters. Original PR #2568 by @jmriebold. Here are the new docs: Configuring Swagger UI.</li> </ul>"},{"location":"release-notes/#docs_57","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update Python Types docs, add missing 3.6 / 3.9 example. PR #4434 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_57","title":"Translations","text":"<ul> <li>\ud83c\udf10 Update Chinese translation for <code>docs/help-readyapi.md</code>. PR #3847 by @jaystone776.</li> <li>\ud83c\udf10 Fix Korean translation for <code>docs/ko/docs/index.md</code>. PR #4195 by @kty4119.</li> <li>\ud83c\udf10 Add Polish translation for <code>docs/pl/docs/index.md</code>. PR #4245 by @MicroPanda123.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs\\tutorial\\path-operation-configuration.md</code>. PR #3312 by @jaystone776.</li> </ul>"},{"location":"release-notes/#internal_68","title":"Internal","text":"<ul> <li>\ud83d\udd27 Enable MkDocs Material Insiders' <code>content.tabs.link</code>. PR #4399 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0710","title":"0.71.0","text":""},{"location":"release-notes/#features_31","title":"Features","text":"<ul> <li>\u2728 Add docs and tests for Python 3.9 and Python 3.10. PR #3712 by @khulnasoft.<ul> <li>You can start with Python Types Intro, it explains what changes between different Python versions, in Python 3.9 and in Python 3.10.</li> <li>All the ReadyAPI docs are updated. Each code example in the docs that could use different syntax in Python 3.9 or Python 3.10 now has all the alternatives in tabs.</li> </ul> </li> <li>\u2b06\ufe0f Upgrade Starlette to 0.17.1. PR #4145 by @simondale00.</li> </ul>"},{"location":"release-notes/#internal_69","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #4354 by @github-actions[bot].</li> <li>\ud83d\udd27 Add ReadyAPI Trove Classifier for PyPI as now there's one \ud83e\udd37\ud83d\ude01. PR #4386 by @khulnasoft.</li> <li>\u2b06 Upgrade MkDocs Material and configs. PR #4385 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0701","title":"0.70.1","text":"<p>There's nothing interesting in this particular ReadyAPI release. It is mainly to enable/unblock the release of the next version of Pydantic that comes packed with features and improvements. \ud83e\udd29</p>"},{"location":"release-notes/#fixes_29","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix JSON Schema for dataclasses, supporting the fixes in Pydantic 1.9. PR #4272 by @PrettyWood.</li> </ul>"},{"location":"release-notes/#translations_58","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Korean translation for <code>docs/tutorial/request-forms-and-files.md</code>. PR #3744 by @NinaHwang.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/tutorial/request-files.md</code>. PR #3743 by @NinaHwang.</li> <li>\ud83c\udf10 Add portuguese translation for <code>docs/tutorial/query-params-str-validations.md</code>. PR #3965 by @leandrodesouzadev.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/tutorial/response-status-code.md</code>. PR #3742 by @NinaHwang.</li> <li>\ud83c\udf10 Add Korean translation for Tutorial - JSON Compatible Encoder. PR #3152 by @NEONKID.</li> <li>\ud83c\udf10 Add Korean translation for Tutorial - Path Parameters and Numeric Validations. PR #2432 by @hard-coders.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/deployment/versions.md</code>. PR #4121 by @DevDae.</li> <li>\ud83c\udf10 Fix Korean translation for <code>docs/ko/docs/tutorial/index.md</code>. PR #4193 by @kimjaeyoonn.</li> <li>\ud83d\udd27 Add CryptAPI sponsor. PR #4264 by @khulnasoft.</li> <li>\ud83d\udcdd Update <code>docs/tutorial/dependencies/classes-as-dependencies</code>: Add type of query parameters in a description of <code>Classes as dependencies</code>. PR #4015 by @0417taehyun.</li> <li>\ud83c\udf10 Add French translation for Tutorial - First steps. PR #3455 by @Smlep.</li> <li>\ud83c\udf10 Add French translation for <code>docs/tutorial/path-params.md</code>. PR #3548 by @Smlep.</li> <li>\ud83c\udf10 Add French translation for <code>docs/tutorial/query-params.md</code>. PR #3556 by @Smlep.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/python-types.md</code>. PR #3926 by @BilalAlpaslan.</li> </ul>"},{"location":"release-notes/#internal_70","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #4274 by @github-actions[bot].</li> </ul>"},{"location":"release-notes/#0700","title":"0.70.0","text":"<p>This release just upgrades Starlette to the latest version, <code>0.16.0</code>, which includes several bug fixes and some small breaking changes.</p> <p>These last three consecutive releases are independent so that you can migrate gradually:</p> <ul> <li>First to ReadyAPI <code>0.68.2</code>, with no breaking changes, but upgrading all the sub-dependencies.</li> <li>Next to ReadyAPI <code>0.69.0</code>, which upgrades Starlette to <code>0.15.0</code>, with AnyIO support, and a higher chance of having breaking changes in your code.</li> <li>Finally to ReadyAPI <code>0.70.0</code>, just upgrading Starlette to the latest version <code>0.16.0</code> with additional bug fixes.</li> </ul> <p>This way, in case there was a breaking change for your code in one of the releases, you can still benefit from the previous upgrades. \u2728</p>"},{"location":"release-notes/#breaking-changes-upgrade","title":"Breaking Changes - Upgrade","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette to 0.16.0. PR #4016 by @khulnasoft.</li> </ul> <p>Also upgrades the ranges of optional dependencies:</p> <ul> <li><code>\"jinja2 &gt;=2.11.2,&lt;4.0.0\"</code></li> <li><code>\"itsdangerous &gt;=1.1.0,&lt;3.0.0\"</code></li> </ul>"},{"location":"release-notes/#0690","title":"0.69.0","text":""},{"location":"release-notes/#breaking-changes-upgrade_1","title":"Breaking Changes - Upgrade","text":"<p>This release adds support for Trio. \u2728</p> <p>It upgrades the version of Starlette to <code>0.15.0</code>, now based on AnyIO, and the internal async components in ReadyAPI are now based on AnyIO as well, making it compatible with both asyncio and Trio.</p> <p>You can read the docs about running ReadyAPI with Trio using Hypercorn.</p> <p>This release also removes <code>graphene</code> as an optional dependency for GraphQL. If you need to work with GraphQL, the recommended library now is Strawberry. You can read the new ReadyAPI with GraphQL docs.</p>"},{"location":"release-notes/#features_32","title":"Features","text":"<ul> <li>\u2728 Add support for Trio via AnyIO, upgrading Starlette to <code>0.15.0</code>. PR #3372 by @graingert.</li> <li>\u2796 Remove <code>graphene</code> as an optional dependency. PR #4007 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_58","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add docs for using Trio with Hypercorn. PR #4014 by @khulnasoft.</li> <li>\u270f Fix typos in Deployment Guide. PR #3975 by @ghandic.</li> <li>\ud83d\udcdd Update docs with pip install calls when using extras with brackets, use quotes for compatibility with Zsh. PR #3131 by @tomwei7.</li> <li>\ud83d\udcdd Add external link to article: Deploying ML Models as API Using ReadyAPI and Heroku. PR #3904 by @kaustubhgupta.</li> <li>\u270f Fix typo in file paths in <code>docs/en/docs/contributing.md</code>. PR #3752 by @NinaHwang.</li> <li>\u270f Fix a typo in <code>docs/en/docs/advanced/path-operation-advanced-configuration.md</code> and <code>docs/en/docs/release-notes.md</code>. PR #3750 by @saintmalik.</li> <li>\u270f\ufe0f Add a missing comma in the security tutorial. PR #3564 by @jalvaradosegura.</li> <li>\u270f Fix typo in <code>docs/en/docs/help-readyapi.md</code>. PR #3760 by @jaystone776.</li> <li>\u270f Fix typo about file path in <code>docs/en/docs/tutorial/bigger-applications.md</code>. PR #3285 by @HolyDorus.</li> <li>\u270f Re-word to clarify test client in <code>docs/en/docs/tutorial/testing.md</code>. PR #3382 by @Bharat123rox.</li> <li>\ud83d\udcdd  Fix incorrect highlighted code. PR #3325 by @paxcodes.</li> <li>\ud83d\udcdd Add external link to article: How-to deploy ReadyAPI app to Heroku. PR #3241 by @Jarmos-san.</li> <li>\u270f Fix typo (mistranslation) in <code>docs/en/docs/advanced/templates.md</code>. PR #3211 by @oerpli.</li> <li>\ud83d\udcdd Remove note about (now supported) feature from Swagger UI in <code>docs/en/docs/tutorial/request-files.md</code>. PR #2803 by @gsganden.</li> <li>\u270f Fix typo re-word in <code>docs/tutorial/handling-errors.md</code>. PR #2700 by @graue70.</li> </ul>"},{"location":"release-notes/#translations_59","title":"Translations","text":"<ul> <li>\ud83c\udf10 Initialize Azerbaijani translations. PR #3941 by @madatbay.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/readyapi-people.md</code>. PR #3848 by @BilalAlpaslan.</li> </ul>"},{"location":"release-notes/#internal_71","title":"Internal","text":"<ul> <li>\ud83d\udcdd Add supported Python versions badge. PR #2794 by @hramezani.</li> <li>\u270f Fix link in Japanese docs for <code>docs/ja/docs/deployment/docker.md</code>. PR #3245 by @utamori.</li> <li>\ud83d\udd27 Correct DeprecationWarning config and comment in pytest settings. PR #4008 by @graingert.</li> <li>\ud83d\udd27 Swap light/dark theme button icon. PR #3246 by @eddsalkield.</li> <li>\ud83d\udd27 Lint only in Python 3.7 and above. PR #4006 by @khulnasoft.</li> <li>\ud83d\udd27 Add GitHub Action notify-translations config for Azerbaijani. PR #3995 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0682","title":"0.68.2","text":"<p>This release has no breaking changes. \ud83c\udf89</p> <p>It upgrades the version ranges of sub-dependencies to allow applications using ReadyAPI to easily upgrade them.</p> <p>Soon there will be a new ReadyAPI release upgrading Starlette to take advantage of recent improvements, but as that has a higher chance of having breaking changes, it will be in a separate release.</p>"},{"location":"release-notes/#features_33","title":"Features","text":"<ul> <li>\u2b06Increase supported version of aiofiles to suppress warnings. PR #2899 by @SnkSynthesis.</li> <li>\u2796 Do not require backports in Python &gt;= 3.7. PR #1880 by @FFY00.</li> <li>\u2b06 Upgrade required Python version to &gt;= 3.6.1, needed by typing.Deque, used by Pydantic. PR #2733 by @hukkin.</li> <li>\u2b06\ufe0f Bump Uvicorn max range to 0.15.0. PR #3345 by @Kludex.</li> </ul>"},{"location":"release-notes/#docs_59","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update GraphQL docs, recommend Strawberry. PR #3981 by @khulnasoft.</li> <li>\ud83d\udcdd Re-write and extend Deployment guide: Concepts, Uvicorn, Gunicorn, Docker, Containers, Kubernetes. PR #3974 by @khulnasoft.</li> <li>\ud83d\udcdd Upgrade HTTPS guide with more explanations and diagrams. PR #3950 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_60","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Turkish translation for <code>docs/features.md</code>. PR #1950 by @ycd.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/benchmarks.md</code>. PR #2729 by @Telomeraz.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/index.md</code>. PR #1908 by @ycd.</li> <li>\ud83c\udf10 Add French translation for <code>docs/tutorial/body.md</code>. PR #3671 by @Smlep.</li> <li>\ud83c\udf10 Add French translation for <code>deployment/docker.md</code>. PR #3694 by @rjNemo.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/tutorial/path-params.md</code>. PR #3664 by @FelipeSilva93.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/deployment/https.md</code>. PR #3754 by @lsglucas.</li> <li>\ud83c\udf10 Add German translation for <code>docs/features.md</code>. PR #3699 by @mawassk.</li> </ul>"},{"location":"release-notes/#internal_72","title":"Internal","text":"<ul> <li>\u2728 Update GitHub Action: notify-translations, to avoid a race conditions. PR #3989 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade development <code>autoflake</code>, supporting multi-line imports. PR #3988 by @khulnasoft.</li> <li>\u2b06\ufe0f Increase dependency ranges for tests and docs: pytest-cov, pytest-asyncio, black, httpx, sqlalchemy, databases, mkdocs-markdownextradata-plugin. PR #3987 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #3986 by @github-actions[bot].</li> <li>\ud83d\udc9a Fix badges in README and main page. PR #3979 by @ghandic.</li> <li>\u2b06 Upgrade internal testing dependencies: mypy to version 0.910, add newly needed type packages. PR #3350 by @ArcLightSlavik.</li> <li>\u2728 Add Deepset Sponsorship. PR #3976 by @khulnasoft.</li> <li>\ud83c\udfa8 Tweak CSS styles for shell animations. PR #3888 by @khulnasoft.</li> <li>\ud83d\udd27 Add new Sponsor Calmcode.io. PR #3777 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0681","title":"0.68.1","text":"<ul> <li>\u2728 Add support for <code>read_with_orm_mode</code>, to support SQLDev relationship attributes. PR #3757 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_61","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Portuguese translation of <code>docs/readyapi-people.md</code>. PR #3461 by @ComicShrimp.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md</code>. PR #3492 by @jaystone776.</li> <li>\ud83d\udd27 Add new Translation tracking issues for German and Indonesian. PR #3718 by @khulnasoft.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/tutorial/dependencies/sub-dependencies.md</code>. PR #3491 by @jaystone776.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/advanced/index.md</code>. PR #3460 by @ComicShrimp.</li> <li>\ud83c\udf10 Portuguese translation of <code>docs/async.md</code>. PR #1330 by @Serrones.</li> <li>\ud83c\udf10 Add French translation for <code>docs/async.md</code>. PR #3416 by @Smlep.</li> </ul>"},{"location":"release-notes/#internal_73","title":"Internal","text":"<ul> <li>\u2728 Add GitHub Action: Notify Translations. PR #3715 by @khulnasoft.</li> <li>\u2728 Update computation of ReadyAPI People and sponsors. PR #3714 by @khulnasoft.</li> <li>\u2728 Enable recent Material for MkDocs Insiders features. PR #3710 by @khulnasoft.</li> <li>\ud83d\udd25 Remove/clean extra imports from examples in docs for features. PR #3709 by @khulnasoft.</li> <li>\u2795 Update docs library to include sources in Markdown. PR #3648 by @khulnasoft.</li> <li>\u2b06 Enable tests for Python 3.9. PR #2298 by @Kludex.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #3642 by @github-actions[bot].</li> </ul>"},{"location":"release-notes/#0680","title":"0.68.0","text":""},{"location":"release-notes/#features_34","title":"Features","text":"<ul> <li>\u2728 Add support for extensions and updates to the OpenAPI schema in each path operation. New docs: ReadyAPI Path Operation Advanced Configuration - OpenAPI Extra. Initial PR #1922 by @edouardlp.</li> <li>\u2728 Add additional OpenAPI metadata parameters to <code>ReadyAPI</code> class, shown on the automatic API docs UI. New docs: Metadata and Docs URLs. Initial PR #1812 by @dkreeft.</li> <li>\u2728 Add <code>description</code> parameter to all the security scheme classes, e.g. <code>APIKeyQuery(name=\"key\", description=\"A very cool API key\")</code>. PR #1757 by @hylkepostma.</li> <li>\u2728 Update OpenAPI models, supporting recursive models and extensions. PR #3628 by @khulnasoft.</li> <li>\u2728 Import and re-export data structures from Starlette, used by Request properties, on <code>readyapi.datastructures</code>. Initial PR #1872 by @jamescurtin.</li> </ul>"},{"location":"release-notes/#docs_60","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update docs about async and response-model with more gender neutral language. PR #1869 by @Edward-Knight.</li> </ul>"},{"location":"release-notes/#translations_62","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/python-types.md</code>. PR #3039 by @dukkee.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/tutorial/dependencies/index.md</code>. PR #3489 by @jaystone776.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/external-links.md</code>. PR #3036 by @dukkee.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/tutorial/dependencies/global-dependencies.md</code>. PR #3493 by @jaystone776.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/deployment/versions.md</code>. PR #3618 by @lsglucas.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/tutorial/security/oauth2-jwt.md</code>. PR #3526 by @sattosan.</li> </ul>"},{"location":"release-notes/#internal_74","title":"Internal","text":"<ul> <li>\u2705 Add  the <code>examples</code> directory to test coverage and update tests. Initial PR #1904 by @Kludex.</li> <li>\ud83d\udd27 Add new GitHub templates with forms for new issues. PR #3612 by @khulnasoft.</li> <li>\ud83d\udcdd Add official ReadyAPI Twitter to docs: @readyapi. PR #3578 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0670","title":"0.67.0","text":""},{"location":"release-notes/#features_35","title":"Features","text":"<ul> <li>\u2728 Add support for <code>dataclasses</code> in request bodies and <code>response_model</code>. New documentation: Advanced User Guide - Using Dataclasses. PR #3577 by @khulnasoft.</li> <li>\u2728 Support <code>dataclasses</code> in responses. PR #3576 by @khulnasoft, continuation from initial PR #2722 by @amitlissack.</li> </ul>"},{"location":"release-notes/#docs_61","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add external link: How to Create A Fake Certificate Authority And Generate TLS Certs for ReadyAPI. PR #2839 by @aitoehigie.</li> <li>\u270f Fix code highlighted line in: <code>body-nested-models.md</code>. PR #3463 by @jaystone776.</li> <li>\u270f Fix typo in <code>body-nested-models.md</code>. PR #3462 by @jaystone776.</li> <li>\u270f Fix typo \"might me\" -&gt; \"might be\" in <code>docs/en/docs/tutorial/schema-extra-example.md</code>. PR #3362 by @dbrakman.</li> <li>\ud83d\udcdd Add external link: Building simple E-Commerce with NuxtJS and ReadyAPI. PR #3271 by @ShahriyarR.</li> <li>\ud83d\udcdd Add external link: Serve a machine learning model using Sklearn, ReadyAPI and Docker. PR #2974 by @rodrigo-arenas.</li> <li>\u270f\ufe0f Fix typo on docstring in datastructures file. PR #2887 by @Kludex.</li> <li>\ud83d\udcdd Add External Link: Deploy ReadyAPI on Ubuntu and Serve using Caddy 2 Web Server. PR #3572 by @khulnasoft.</li> <li>\ud83d\udcdd Add External Link, replaces #1898. PR #3571 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_75","title":"Internal","text":"<ul> <li>\ud83c\udfa8 Improve style for sponsors, add radius border. PR #2388 by @Kludex.</li> <li>\ud83d\udc77 Update GitHub Action latest-changes. PR #3574 by @khulnasoft.</li> <li>\ud83d\udc77 Update GitHub Action latest-changes. PR #3573 by @khulnasoft.</li> <li>\ud83d\udc77 Rename and clarify CI workflow job names. PR #3570 by @khulnasoft.</li> <li>\ud83d\udc77 Update GitHub Action latest-changes, strike 2 \u26be. PR #3575 by @khulnasoft.</li> <li>\ud83d\udd27 Sort external links in docs to have the most recent at the top. PR #3568 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0661","title":"0.66.1","text":""},{"location":"release-notes/#translations_63","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add basic setup for German translations. PR #3522 by @0x4Dark.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/tutorial/security/index.md</code>. PR #3507 by @oandersonmagalhaes.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/deployment/index.md</code>. PR #3337 by @lsglucas.</li> </ul>"},{"location":"release-notes/#internal_76","title":"Internal","text":"<ul> <li>\ud83d\udd27 Configure strict pytest options and update/refactor tests. Upgrade pytest to <code>&gt;=6.2.4,&lt;7.0.0</code> and pytest-cov to <code>&gt;=2.12.0,&lt;3.0.0</code>. Initial PR #2790 by @graingert.</li> <li>\u2b06\ufe0f Upgrade python-jose dependency to <code>&gt;=3.3.0,&lt;4.0.0</code> for tests. PR #3468 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0660","title":"0.66.0","text":""},{"location":"release-notes/#features_36","title":"Features","text":"<ul> <li>\u2728 Allow setting the <code>response_class</code> to <code>RedirectResponse</code> or <code>FileResponse</code> and returning the URL from the function. New and updated docs are in the tutorial section Custom Response - HTML, Stream, File, others, in RedirectResponse and in FileResponse. PR #3457 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#fixes_30","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix include/exclude for dicts in <code>jsonable_encoder</code>. PR #2016 by @Rubikoid.</li> <li>\ud83d\udc1b Support custom OpenAPI / JSON Schema fields in the generated output OpenAPI. PR #1429 by @jmagnusson.</li> </ul>"},{"location":"release-notes/#translations_64","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Spanish translation for <code>tutorial/query-params.md</code>. PR #2243 by @mariacamilagl.</li> <li>\ud83c\udf10 Add Spanish translation for <code>advanced/response-directly.md</code>. PR #1253 by @jfunez.</li> <li>\ud83c\udf10 Add Spanish translation for <code>advanced/additional-status-codes.md</code>. PR #1252 by @jfunez.</li> <li>\ud83c\udf10 Add Spanish translation for <code>advanced/path-operation-advanced-configuration.md</code>. PR #1251 by @jfunez.</li> </ul>"},{"location":"release-notes/#0653","title":"0.65.3","text":""},{"location":"release-notes/#fixes_31","title":"Fixes","text":"<ul> <li>\u267b Assume request bodies contain JSON when no Content-Type header is provided. This fixes a breaking change introduced by 0.65.2 with PR #2118. It should allow upgrading ReadyAPI applications with clients that send JSON data without a <code>Content-Type</code> header. And there's still protection against CSRFs. PR #3456 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_65","title":"Translations","text":"<ul> <li>\ud83c\udf10 Initialize Indonesian translations. PR #3014 by @pace-noge.</li> <li>\ud83c\udf10 Add Spanish translation of Tutorial - Path Parameters. PR #2219 by @mariacamilagl.</li> <li>\ud83c\udf10 Add Spanish translation of Tutorial - First Steps. PR #2208 by @mariacamilagl.</li> <li>\ud83c\udf10 Portuguese translation of Tutorial - Body - Fields. PR #3420 by @ComicShrimp.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Request - Forms - and - Files. PR #3249 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Handling - Errors. PR #3299 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Form - Data. PR #3248 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Body - Updates. PR #3237 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for ReadyAPI People. PR #3112 by @hareru.</li> <li>\ud83c\udf10 Add French translation for Project Generation. PR #3197 by @Smlep.</li> <li>\ud83c\udf10 Add French translation for Python Types Intro. PR #3185 by @Smlep.</li> <li>\ud83c\udf10 Add French translation for External Links. PR #3103 by @Smlep.</li> <li>\ud83c\udf10 Add French translation for Alternatives, Inspiration and Comparisons. PR #3020 by @rjNemo.</li> <li>\ud83c\udf10 Fix Chinese translation code snippet mismatch in Tutorial - Python Types Intro. PR #2573 by @BoYanZh.</li> <li>\ud83c\udf10 Add Portuguese translation for Development Contributing. PR #1364 by @Serrones.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Request - Files. PR #3244 by @jaystone776.</li> </ul>"},{"location":"release-notes/#internal_77","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #3450 by @github-actions[bot].</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #3319 by @github-actions[bot].</li> <li>\u2b06 Upgrade docs development dependency on <code>cligenius-cli</code> to &gt;=0.0.12 to fix conflicts. PR #3429 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0652","title":"0.65.2","text":""},{"location":"release-notes/#security-fixes_1","title":"Security fixes","text":"<ul> <li>\ud83d\udd12 Check Content-Type request header before assuming JSON. Initial PR #2118 by @patrickkwang.</li> </ul> <p>This change fixes a CSRF security vulnerability when using cookies for authentication in path operations with JSON payloads sent by browsers.</p> <p>In versions lower than <code>0.65.2</code>, ReadyAPI would try to read the request payload as JSON even if the <code>content-type</code> header sent was not set to <code>application/json</code> or a compatible JSON media type (e.g. <code>application/geo+json</code>).</p> <p>So, a request with a content type of <code>text/plain</code> containing JSON data would be accepted and the JSON data would be extracted.</p> <p>But requests with content type <code>text/plain</code> are exempt from CORS preflights, for being considered Simple requests. So, the browser would execute them right away including cookies, and the text content could be a JSON string that would be parsed and accepted by the ReadyAPI application.</p> <p>See CVE-2021-32677 for more details.</p> <p>Thanks to Dima Boger for the security report! \ud83d\ude47\ud83d\udd12</p>"},{"location":"release-notes/#internal_78","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update sponsors badge, course bundle. PR #3340 by @khulnasoft.</li> <li>\ud83d\udd27 Add new gold sponsor Jina \ud83c\udf89. PR #3291 by @khulnasoft.</li> <li>\ud83d\udd27 Add new banner sponsor badge for ReadyAPI courses bundle. PR #3288 by @khulnasoft.</li> <li>\ud83d\udc77 Upgrade Issue Manager GitHub Action. PR #3236 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0651","title":"0.65.1","text":""},{"location":"release-notes/#security-fixes_2","title":"Security fixes","text":"<ul> <li>\ud83d\udccc Upgrade pydantic pin, to handle security vulnerability CVE-2021-29510. PR #3213 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0650","title":"0.65.0","text":""},{"location":"release-notes/#breaking-changes-upgrade_2","title":"Breaking Changes - Upgrade","text":"<ul> <li>\u2b06\ufe0f  Upgrade Starlette to <code>0.14.2</code>, including internal <code>UJSONResponse</code> migrated from Starlette. This includes several bug fixes and features from Starlette. PR #2335 by @hanneskuettner.</li> </ul>"},{"location":"release-notes/#translations_66","title":"Translations","text":"<ul> <li>\ud83c\udf10 Initialize new language Polish for translations. PR #3170 by @neternefer.</li> </ul>"},{"location":"release-notes/#internal_79","title":"Internal","text":"<ul> <li>\ud83d\udc77 Add GitHub Action cache to speed up CI installs. PR #3204 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade setup-python GitHub Action to v2. PR #3203 by @khulnasoft.</li> <li>\ud83d\udc1b Fix docs script to generate a new translation language with <code>overrides</code> boilerplate. PR #3202 by @khulnasoft.</li> <li>\u2728 Add new Deta banner badge with new sponsorship tier \ud83d\ude47. PR #3194 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #3189 by @github-actions[bot].</li> <li>\ud83d\udd0a Update ReadyAPI People to allow better debugging. PR #3188 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0640","title":"0.64.0","text":""},{"location":"release-notes/#features_37","title":"Features","text":"<ul> <li>\u2728 Add support for adding multiple <code>examples</code> in request bodies and path, query, cookie, and header params. New docs: Declare Request Example Data. Initial PR #1267 by @austinorr.</li> </ul>"},{"location":"release-notes/#fixes_32","title":"Fixes","text":"<ul> <li>\ud83d\udccc Pin SQLAlchemy range for tests, as it doesn't use SemVer. PR #3001 by @khulnasoft.</li> <li>\ud83c\udfa8 Add newly required type annotations for mypy. PR #2882 by @khulnasoft.</li> <li>\ud83c\udfa8 Remove internal \"type: ignore\", now unnecessary. PR #2424 by @AsakuraMizu.</li> </ul>"},{"location":"release-notes/#docs_62","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add link to article in Russian \"ReadyAPI: \u0437\u043d\u0430\u043a\u043e\u043c\u0438\u043c\u0441\u044f \u0441 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u043c\". PR #2564 by @trkohler.</li> <li>\ud83d\udcdd Add external link to blog post \"Authenticate Your ReadyAPI App with Auth0\". PR #2172 by @dompatmore.</li> <li>\ud83d\udcdd Fix broken link to article: Machine learning model serving in Python using ReadyAPI and Streamlit. PR #2557 by @davidefiocco.</li> <li>\ud83d\udcdd Add ReadyAPI Medium Article: Deploy a dockerized ReadyAPI application to AWS. PR #2515 by @vjanz.</li> <li>\u270f Fix typo in Tutorial - Handling Errors. PR #2486 by @johnthagen.</li> <li>\u270f Fix typo in Security OAuth2 scopes. PR #2407 by @jugmac00.</li> <li>\u270f Fix typo/clarify docs for SQL (Relational) Databases. PR #2393 by @kangni.</li> <li>\ud83d\udcdd Add external link to \"ReadyAPI for Flask Users\". PR #2280 by @amitness.</li> </ul>"},{"location":"release-notes/#translations_67","title":"Translations","text":"<ul> <li>\ud83c\udf10 Fix Chinese translation of Tutorial - Query Parameters, remove obsolete content. PR #3051 by @louis70109.</li> <li>\ud83c\udf10 Add French translation for Tutorial - Background Tasks. PR #3098 by @Smlep.</li> <li>\ud83c\udf10 Fix Korean translation for docs/ko/docs/index.md. PR #3159 by @SueNaEunYang.</li> <li>\ud83c\udf10 Add Korean translation for Tutorial - Query Parameters. PR #2390 by @hard-coders.</li> <li>\ud83c\udf10 Add French translation for ReadyAPI People. PR #2232 by @JulianMaurin.</li> <li>\ud83c\udf10 Add Korean translation for Tutorial - Path Parameters. PR #2355 by @hard-coders.</li> <li>\ud83c\udf10 Add French translation for Features. PR #2157 by @Jefidev.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #3031 by @github-actions[bot].</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Debugging. PR #2737 by @blt232018.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Security - OAuth2 with Password (and hashing), Bearer with JWT tokens. PR #2642 by @waynerv.</li> <li>\ud83c\udf10 Add Korean translation for Tutorial - Header Parameters. PR #2589 by @mode9.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Metadata and Docs URLs. PR #2559 by @blt232018.</li> <li>\ud83c\udf10 Add Korean translation for Tutorial - First Steps. PR #2323 by @hard-coders.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - CORS (Cross-Origin Resource Sharing). PR #2540 by @blt232018.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Middleware. PR #2334 by @lpdswing.</li> <li>\ud83c\udf10 Add Korean translation for Tutorial - Intro. PR #2317 by @hard-coders.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Bigger Applications - Multiple Files. PR #2453 by @waynerv.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Security - Security Intro. PR #2443 by @waynerv.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Header Parameters. PR #2412 by @maoyibo.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Extra Data Types. PR #2410 by @maoyibo.</li> <li>\ud83c\udf10 Add Japanese translation for Deployment - Docker. PR #2312 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Deployment - Versions. PR #2310 by @tokusumi.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Cookie Parameters. PR #2261 by @alicrazy1947.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Static files. PR #2260 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Testing. PR #2259 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Debugging. PR #2256 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Middleware. PR #2255 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Concurrency and async / await. PR #2058 by @tokusumi.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Security - Simple OAuth2 with Password and Bearer. PR #2514 by @waynerv.</li> <li>\ud83c\udf10 Add Japanese translation for Deployment - Deta. PR #2314 by @tokusumi.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Security - Get Current User. PR #2474 by @waynerv.</li> <li>\ud83c\udf10 Add Japanese translation for Deployment - Manually. PR #2313 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Deployment - Intro. PR #2309 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for ReadyAPI People. PR #2254 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Advanced - Path Operation Advanced Configuration. PR #2124 by @Attsun1031.</li> <li>\ud83c\udf10 Add Japanese translation for External Links. PR #2070 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Body - Updates. PR #1956 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Form Data. PR #1943 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Cookie Parameters. PR #1933 by @SwftAlpc.</li> </ul>"},{"location":"release-notes/#internal_80","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update top banner, point to newsletter. PR #3003 by @khulnasoft.</li> <li>\ud83d\udd27 Disable sponsor WeTransfer. PR #3002 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #2880 by @github-actions[bot].</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #2739 by @github-actions[bot].</li> <li>\ud83d\udd27 Add new Gold Sponsor Talk Python \ud83c\udf89. PR #2673 by @khulnasoft.</li> <li>\ud83d\udd27 Add new Gold Sponsor vim.so \ud83c\udf89. PR #2669 by @khulnasoft.</li> <li>\ud83d\udd27 Add ReadyAPI user survey banner. PR #2623 by @khulnasoft.</li> <li>\ud83d\udd27 Add new Bronze Sponsor(s) \ud83e\udd49\ud83c\udf89. PR #2622 by @khulnasoft.</li> <li>\ud83d\udcdd Update social links: add Discord, fix GitHub. PR #2621 by @khulnasoft.</li> <li>\ud83d\udd27 Update ReadyAPI People GitHub Sponsors order. PR #2620 by @khulnasoft.</li> <li>\ud83d\udd27 Update InvestSuite sponsor data. PR #2608 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #2590 by @github-actions[bot].</li> </ul>"},{"location":"release-notes/#0630","title":"0.63.0","text":""},{"location":"release-notes/#features_38","title":"Features","text":"<ul> <li>\u2728 Improve type annotations, add support for mypy --strict, internally and for external packages. PR #2547 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#breaking-changes_5","title":"Breaking changes","text":"<ul> <li>\u2b06\ufe0f Upgrade Uvicorn when installing <code>readyapi[all]</code> to the latest version including <code>uvloop</code>, the new range is <code>uvicorn[standard] &gt;=0.12.0,&lt;0.14.0</code>. PR #2548 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#fixes_33","title":"Fixes","text":"<ul> <li>\ud83d\udc1b PR #2547 (read above) also fixes some false-positive mypy errors with <code>callbacks</code> parameters and when using the <code>OAuth2</code> class.</li> </ul>"},{"location":"release-notes/#docs_63","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update Uvicorn installation instructions to use uvicorn[standard] (includes uvloop). PR #2543 by @khulnasoft.</li> <li>\ud83d\udcdd Update title for Deta tutorial. PR #2466 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #2454 by @github-actions[bot].</li> </ul>"},{"location":"release-notes/#translations_68","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add docs lang selector widget. PR #2542 by @khulnasoft.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Response Status Code. PR #2442 by @waynerv.</li> <li>\ud83c\udf10 Start translation of the documentation for the Albanian language. PR #2516 by @vjanz.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Extra Models. PR #2416 by @waynerv.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Response Model. PR #2414 by @waynerv.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Schema Extra Example. PR #2411 by @maoyibo.</li> <li>\ud83c\udf10 Add Korean translation for Index. PR #2192 by @hard-coders.</li> <li>\ud83c\udf10 Add Japanese translation for Advanced User Guide - Additional Status Codes. PR #2145 by @Attsun1031.</li> </ul>"},{"location":"release-notes/#internal_81","title":"Internal","text":"<ul> <li>\ud83d\udc1b Fix docs overrides directory for translations. PR #2541 by @khulnasoft.</li> <li>\u2796 Remove Cligenius as a docs building dependency (covered by cligenius-cli) to fix pip resolver conflicts. PR #2539 by @khulnasoft.</li> <li>\u2728 Add newsletter: ReadyAPI and friends. PR #2509 by @khulnasoft.</li> <li>\u2728 Add new Gold Sponsor: InvestSuite \ud83c\udf89. PR #2508 by @khulnasoft.</li> <li>\ud83d\udd27 Add issue template configs. PR #2476 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0620","title":"0.62.0","text":""},{"location":"release-notes/#features_39","title":"Features","text":"<ul> <li>\u2728 Add support for shared/top-level parameters (dependencies, tags, etc). PR #2434 by @khulnasoft.</li> </ul> <p>Up to now, for several options, the only way to apply them to a group of path operations was in <code>include_router</code>. That works well, but the call to <code>app.include_router()</code> or <code>router.include_router()</code> is normally done in another file.</p> <p>That means that, for example, to apply authentication to all the path operations in a router it would end up being done in a different file, instead of keeping related logic together.</p> <p>Setting options in <code>include_router</code> still makes sense in some cases, for example, to override or increase configurations from a third party router included in an app. But in a router that is part of a bigger application, it would probably make more sense to add those settings when creating the <code>APIRouter</code>.</p> <p>In <code>ReadyAPI</code></p> <p>This allows setting the (mostly new) parameters (additionally to the already existing parameters):</p> <ul> <li><code>default_response_class</code>: updated to handle defaults in <code>APIRouter</code> and <code>include_router</code>.</li> <li><code>dependencies</code>: to include \u2728 top-level dependencies \u2728 that apply to the whole application. E.g. to add global authentication.</li> <li><code>callbacks</code>: OpenAPI callbacks that apply to all the path operations.</li> <li><code>deprecated</code>: to mark all the path operations as deprecated. \ud83e\udd37</li> <li><code>include_in_schema</code>: to allow excluding all the path operations from the OpenAPI schema.</li> <li><code>responses</code>: OpenAPI responses that apply to all the path operations.</li> </ul> <p>For example:</p> <pre><code>from readyapi import ReadyAPI, Depends\n\n\nasync def some_dependency():\n    return\n\n\napp = ReadyAPI(dependencies=[Depends(some_dependency)])\n</code></pre> <p>In <code>APIRouter</code></p> <p>This allows setting the (mostly new) parameters (additionally to the already existing parameters):</p> <ul> <li><code>default_response_class</code>: updated to handle defaults in <code>APIRouter</code> and <code>include_router</code>. For example, it's not needed to set it explicitly when creating callbacks.</li> <li><code>dependencies</code>: to include \u2728 router-level dependencies \u2728 that apply to all the path operations in a router. Up to now, this was only possible with <code>include_router</code>.</li> <li><code>callbacks</code>: OpenAPI callbacks that apply to all the path operations in this router.</li> <li><code>deprecated</code>: to mark all the path operations in a router as deprecated.</li> <li><code>include_in_schema</code>: to allow excluding all the path operations in a router from the OpenAPI schema.</li> <li><code>responses</code>: OpenAPI responses that apply to all the path operations in a router.</li> <li><code>prefix</code>: to set the path prefix for a router. Up to now, this was only possible when calling <code>include_router</code>.</li> <li><code>tags</code>: OpenAPI tags to apply to all the path operations in this router.</li> </ul> <p>For example:</p> <pre><code>from readyapi import APIRouter, Depends\n\n\nasync def some_dependency():\n    return\n\n\nrouter = APIRouter(prefix=\"/users\", dependencies=[Depends(some_dependency)])\n</code></pre> <p>In <code>include_router</code></p> <p>Most of these settings are now supported in <code>APIRouter</code>, which normally lives closer to the related code, so it is recommended to use <code>APIRouter</code> when possible.</p> <p>But <code>include_router</code> is still useful to, for example, adding options (like <code>dependencies</code>, <code>prefix</code>, and <code>tags</code>) when including a third party router, or a generic router that is shared between several projects.</p> <p>This PR allows setting the (mostly new) parameters (additionally to the already existing parameters):</p> <ul> <li><code>default_response_class</code>: updated to handle defaults in <code>APIRouter</code> and <code>ReadyAPI</code>.</li> <li><code>deprecated</code>: to mark all the path operations in a router as deprecated in OpenAPI.</li> <li><code>include_in_schema</code>: to allow disabling all the path operations from showing in the OpenAPI schema.</li> <li><code>callbacks</code>: OpenAPI callbacks that apply to all the path operations in this router.</li> </ul> <p>Note: all the previous parameters are still there, so it's still possible to declare <code>dependencies</code> in <code>include_router</code>.</p>"},{"location":"release-notes/#breaking-changes_6","title":"Breaking Changes","text":"<ul> <li>PR #2434 includes several improvements that shouldn't affect normal use cases, but could affect in advanced scenarios:<ul> <li>If you are testing the generated OpenAPI (you shouldn't, ReadyAPI already tests it extensively for you): the order for <code>tags</code> in <code>include_router</code> and path operations was updated for consistency, but it's a simple order change.</li> <li>If you have advanced custom logic to access each route's <code>route.response_class</code>, or the <code>router.default_response_class</code>, or the <code>app.default_response_class</code>: the default value for <code>response_class</code> in <code>APIRoute</code> and for <code>default_response_class</code> in <code>APIRouter</code> and <code>ReadyAPI</code> is now a <code>DefaultPlaceholder</code> used internally to handle and solve default values and overrides. The actual response class inside the <code>DefaultPlaceholder</code> is available at <code>route.response_class.value</code>.</li> </ul> </li> </ul>"},{"location":"release-notes/#docs_64","title":"Docs","text":"<ul> <li> <p>PR #2434 (above) includes new or updated docs:</p> <ul> <li>Advanced User Guide - OpenAPI Callbacks.</li> <li>Tutorial - Bigger Applications.</li> <li>Tutorial - Dependencies - Dependencies in path operation decorators.</li> <li>Tutorial - Dependencies - Global Dependencies.</li> </ul> </li> <li> <p>\ud83d\udcdd Add ReadyAPI monitoring blog post to External Links. PR #2324 by @louisguitton.</p> </li> <li>\u270f\ufe0f Fix typo in Deta tutorial. PR #2320 by @khulnasoft.</li> <li>\u2728 Add Discord chat. PR #2322 by @khulnasoft.</li> <li>\ud83d\udcdd Fix image links for sponsors. PR #2304 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_69","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Japanese translation for Advanced - Custom Response. PR #2193 by @Attsun1031.</li> <li>\ud83c\udf10 Add Chinese translation for Benchmarks. PR #2119 by @spaceack.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Body - Nested Models. PR #1609 by @waynerv.</li> <li>\ud83c\udf10 Add Chinese translation for Advanced - Custom Response. PR #1459 by @RunningIkkyu.</li> <li>\ud83c\udf10 Add Chinese translation for Advanced - Return a Response Directly. PR #1452 by @RunningIkkyu.</li> <li>\ud83c\udf10 Add Chinese translation for Advanced - Additional Status Codes. PR #1451 by @RunningIkkyu.</li> <li>\ud83c\udf10 Add Chinese translation for Advanced - Path Operation Advanced Configuration. PR #1447 by @RunningIkkyu.</li> <li>\ud83c\udf10 Add Chinese translation for Advanced User Guide - Intro. PR #1445 by @RunningIkkyu.</li> </ul>"},{"location":"release-notes/#internal_82","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update TestDriven link to course in sponsors section. PR #2435 by @khulnasoft.</li> <li>\ud83c\udf71 Update sponsor logos. PR #2418 by @khulnasoft.</li> <li>\ud83d\udc9a Fix disabling install of Material for MkDocs Insiders in forks, strike 1 \u26be. PR #2340 by @khulnasoft.</li> <li>\ud83d\udc1b Fix disabling Material for MkDocs Insiders install in forks. PR #2339 by @khulnasoft.</li> <li>\u2728 Add silver sponsor WeTransfer. PR #2338 by @khulnasoft.</li> <li>\u2728 Set up and enable Material for MkDocs Insiders for the docs. PR #2325 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0612","title":"0.61.2","text":""},{"location":"release-notes/#fixes_34","title":"Fixes","text":"<ul> <li>\ud83d\udccc Relax Swagger UI version pin. PR #2089 by @jmriebold.</li> <li>\ud83d\udc1b Fix bug overriding custom HTTPException and RequestValidationError from exception_handlers. PR #1924 by @uriyyo.</li> <li>\u270f\ufe0f Fix typo on dependencies utils and cleanup unused variable. PR #1912 by @Kludex.</li> </ul>"},{"location":"release-notes/#docs_65","title":"Docs","text":"<ul> <li>\u270f\ufe0f  Fix typo in Tutorial - Path Parameters. PR #2231 by @mariacamilagl.</li> <li>\u270f Fix a stylistic error in docs. PR #2206 by @ddobrinskiy.</li> <li>\u270f Fix capitalizaiton typo in docs. PR #2204 by @imba-tjd.</li> <li>\u270f Fix typo in docs. PR #2179 by @ammarasmro.</li> <li>\ud83d\udcdd Update/fix links in docs to use HTTPS. PR #2165 by @imba-tjd.</li> <li>\u270f Fix typos and add rewording in docs. PR #2159 by @nukopy.</li> <li>\ud83d\udcdd Fix code consistency in examples for Tutorial - User Guide - Path Parameters. PR #2158 by @nukopy.</li> <li>\ud83d\udcdd Fix renamed parameter <code>content_type</code> typo. PR #2135 by @TeoZosa.</li> <li>\u270f Fix minor typos in docs. PR #2122 by @TeoZosa.</li> <li>\u270f Fix typos in docs and source examples. PR #2102 by @AdrianDeAnda.</li> <li>\u270f Fix incorrect Celery URLs in docs. PR #2100 by @CircleOnCircles.</li> <li>\ud83d\udcdd Simplify intro to Python Types, all currently supported Python versions include type hints \ud83c\udf89. PR #2085 by @ninjaaron.</li> <li>\ud83d\udcdd Fix example code with sets in Tutorial - Body - Nested Models 3. PR #2054 by @hitrust.</li> <li>\ud83d\udcdd Fix example code with sets in Tutorial - Body - Nested Models 2. PR #2053 by @hitrust.</li> <li>\ud83d\udcdd Fix example code with sets in Tutorial - Body - Nested Models. PR #2052 by @hitrust.</li> <li>\u270f Fix typo in Benchmarks. PR #1995 by @AlejoAsd.</li> <li>\ud83d\udcdd Add note in CORS tutorial about allow_origins with [\"*\"] and allow_credentials. PR #1895 by @dsmurrell.</li> <li>\ud83d\udcdd Add deployment to Deta, the first gold sponsor \ud83c\udf89. PR #2303 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #2282 by @github-actions[bot].</li> <li>\u270f\ufe0f Fix uppercase in Tutorial - Query parameters. PR #2245 by @mariacamilagl.</li> <li>\ud83d\udcdd Add articles to External Links. PR #2247 by @khulnasoft.</li> <li>\u270f Fix typo in Spanish tutorial index. PR #2020 by @aviloncho.</li> </ul>"},{"location":"release-notes/#translations_70","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Japanese translation for Advanced Tutorial - Response Directly. PR #2191 by @Attsun1031.</li> <li>\ud83d\udcdd Add Japanese translation for Tutorial - Security - First Steps. PR #2153 by @komtaki.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Query Parameters and String Validations. PR #1901 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Portuguese translation for External Links. PR #1443 by @Serrones.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - CORS. PR #2125 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Contributing. PR #2067 by @komtaki.</li> <li>\ud83c\udf10 Add Japanese translation for Project Generation. PR #2050 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Alternatives. PR #2043 by @Attsun1031.</li> <li>\ud83c\udf10 Add Japanese translation for History Design and Future. PR #2002 by @komtaki.</li> <li>\ud83c\udf10 Add Japanese translation for Benchmarks. PR #1992 by @komtaki.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Header Parameters. PR #1935 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Portuguese translation for Tutorial - First Steps. PR #1861 by @jessicapaz.</li> <li>\ud83c\udf10 Add Portuguese translation for Python Types. PR #1796 by @izaguerreiro.</li> <li>\ud83c\udf10 Add Japanese translation for Help ReadyAPI. PR #1692 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Body. PR #1683 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Query Params. PR #1674 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for tutorial/path-params.md. PR #1671 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for tutorial/first-steps.md. PR #1658 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for tutorial/index.md. PR #1656 by @tokusumi.</li> <li>\ud83c\udf10 Add translation to Portuguese for Project Generation. PR #1602 by @Serrones.</li> <li>\ud83c\udf10 Add Japanese translation for Features. PR #1625 by @tokusumi.</li> <li>\ud83c\udf10 Initialize new language Korean for translations. PR #2018 by @hard-coders.</li> <li>\ud83c\udf10 Add Portuguese translation of Deployment. PR #1374 by @Serrones.</li> </ul>"},{"location":"release-notes/#internal_83","title":"Internal","text":"<ul> <li>\ud83d\udd25 Cleanup after upgrade for Docs Previews GitHub Action. PR #2248 by @khulnasoft.</li> <li>\ud83d\udc1b Fix CI docs preview, unzip docs. PR #2246 by @khulnasoft.</li> <li>\u2728 Add instant docs deploy previews for PRs from forks. PR #2244 by @khulnasoft.</li> <li>\u26a1\ufe0f Build docs for languages in parallel in subprocesses to speed up CI. PR #2242 by @khulnasoft.</li> <li>\ud83d\udc1b Fix docs order generation for partial translations. PR #2238 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #2202 by @github-actions[bot].</li> <li>\u267b\ufe0f Update ReadyAPI People GitHub Action to send the PR as github-actions. PR #2201 by @khulnasoft.</li> <li>\ud83d\udd27 Update ReadyAPI People GitHub Action config, run monthly. PR #2199 by @khulnasoft.</li> <li>\ud83d\udc1b Fix ReadyAPI People GitHub Action Docker dependency, strike 1 \u26be. PR #2198 by @khulnasoft.</li> <li>\ud83d\udc1b Fix ReadyAPI People GitHub Action Docker dependencies. PR #2197 by @khulnasoft.</li> <li>\ud83d\udc1b Fix ReadyAPI People GitHub Action when there's nothing to change. PR #2196 by @khulnasoft.</li> <li>\ud83d\udc65 Add new section ReadyAPI People. PR #2195 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade GitHub Action Latest Changes. PR #2190 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade GitHub Action Label Approved. PR #2189 by @khulnasoft.</li> <li>\ud83d\udd27 Update GitHub Action Label Approved, run at 12:00. PR #2185 by @khulnasoft.</li> <li>\ud83d\udc77 Upgrade GitHub Action Latest Changes. PR #2184 by @khulnasoft.</li> <li>\ud83d\udc77 Set GitHub Action Label Approved to run daily, not every minute. PR #2163 by @khulnasoft.</li> <li>\ud83d\udd25 Remove pr-approvals GitHub Action as it's not compatible with forks. Use the new one. PR #2162 by @khulnasoft.</li> <li>\ud83d\udc77 Add GitHub Action Latest Changes. PR #2160.</li> <li>\ud83d\udc77 Add GitHub Action Label Approved. PR #2161.</li> </ul>"},{"location":"release-notes/#0611","title":"0.61.1","text":""},{"location":"release-notes/#fixes_35","title":"Fixes","text":"<ul> <li>Fix issues using <code>jsonable_encoder</code> with SQLAlchemy models directly. PR #1987.</li> </ul>"},{"location":"release-notes/#docs_66","title":"Docs","text":"<ul> <li>Fix typo in NoSQL docs. PR #1980 by @facundojmaero.</li> </ul>"},{"location":"release-notes/#translations_71","title":"Translations","text":"<ul> <li>Add translation for main page to Japanese PR #1571 by @ryuckel.</li> <li>Initialize French translations. PR #1975 by @JulianMaurin-BM.</li> <li>Initialize Turkish translations. PR #1905 by @ycd.</li> </ul>"},{"location":"release-notes/#internal_84","title":"Internal","text":"<ul> <li>Improve docs maintainability by updating <code>hl_lines</code> syntax to use ranges. PR #1863 by @la-mar.</li> </ul>"},{"location":"release-notes/#0610","title":"0.61.0","text":""},{"location":"release-notes/#features_40","title":"Features","text":"<ul> <li>Add support for injecting <code>HTTPConnection</code> (as <code>Request</code> and <code>WebSocket</code>). Useful for sharing app state in dependencies. PR #1827 by @nsidnev.</li> <li>Export <code>WebSocketDisconnect</code> and add example handling WebSocket disconnections to docs. PR #1822 by @rkbeatss.</li> </ul>"},{"location":"release-notes/#breaking-changes_7","title":"Breaking Changes","text":"<ul> <li>Require Pydantic &gt; <code>1.0.0</code>.<ul> <li>Remove support for deprecated Pydantic <code>0.32.2</code>. This improves maintainability and allows new features.</li> <li>In <code>ReadyAPI</code> and <code>APIRouter</code>:<ul> <li>Remove path operation decorators related/deprecated parameter <code>response_model_skip_defaults</code> (use <code>response_model_exclude_unset</code> instead).</li> <li>Change path operation decorators parameter default for <code>response_model_exclude</code> from <code>set()</code> to <code>None</code> (as is in Pydantic).</li> </ul> </li> <li>In <code>encoders.jsonable_encoder</code>:<ul> <li>Remove deprecated <code>skip_defaults</code>, use instead <code>exclude_unset</code>.</li> <li>Set default of <code>exclude</code> from <code>set()</code> to <code>None</code> (as is in Pydantic).</li> </ul> </li> <li>PR #1862.</li> </ul> </li> <li>In <code>encoders.jsonable_encoder</code> remove parameter <code>sqlalchemy_safe</code>.<ul> <li>It was an early hack to allow returning SQLAlchemy models, but it was never documented, and the recommended way is using Pydantic's <code>orm_mode</code> as described in the tutorial: SQL (Relational) Databases.</li> <li>PR #1864.</li> </ul> </li> </ul>"},{"location":"release-notes/#docs_67","title":"Docs","text":"<ul> <li>Add link to the course by TestDriven.io: Test-Driven Development with ReadyAPI and Docker. PR #1860.</li> <li>Fix empty log message in docs example about handling errors. PR #1815 by @manlix.</li> <li>Reword text to reduce ambiguity while not being gender-specific. PR #1824 by @Mause.</li> </ul>"},{"location":"release-notes/#internal_85","title":"Internal","text":"<ul> <li>Add Flake8 linting. Original PR #1774 by @MashhadiNima.</li> <li>Disable Gitter bot, as it's currently broken, and Gitter's response doesn't show the problem. PR #1853.</li> </ul>"},{"location":"release-notes/#0602","title":"0.60.2","text":"<ul> <li>Fix typo in docs for query parameters. PR #1832 by @ycd.</li> <li>Add docs about Async Tests. PR #1619 by @empicano.</li> <li>Raise an exception when using form data (<code>Form</code>, <code>File</code>) without having <code>python-multipart</code> installed.<ul> <li>Up to now the application would run, and raise an exception only when receiving a request with form data, the new behavior, raising early, will prevent from deploying applications with broken dependencies.</li> <li>It also detects if the correct package <code>python-multipart</code> is installed instead of the incorrect <code>multipart</code> (both importable as <code>multipart</code>).</li> <li>PR #1851 based on original PR #1627 by @chrisngyn, @YKo20010, @kx-chen.</li> </ul> </li> <li>Re-enable Gitter releases bot. PR #1831.</li> <li>Add link to async SQL databases tutorial from main SQL tutorial. PR #1813 by @short2strings.</li> <li>Fix typo in tutorial about behind a proxy. PR #1807 by @toidi.</li> <li>Fix typo in Portuguese docs. PR #1795 by @izaguerreiro.</li> <li>Add translations setup for Ukrainian. PR #1830.</li> <li>Add external link Build And Host Fast Data Science Applications Using ReadyAPI. PR #1786 by @Kludex.</li> <li>Fix encoding of Pydantic models that inherit from others models with custom <code>json_encoders</code>. PR #1769 by @henrybetts.</li> <li>Simplify and improve <code>jsonable_encoder</code>. PR #1754 by @MashhadiNima.</li> <li>Simplify internal code syntax in several points. PR #1753 by @uriyyo.</li> <li>Improve internal typing, declare <code>Optional</code> parameters. PR #1731 by @MashhadiNima.</li> <li>Add external link Deploy ReadyAPI on Azure App Service to docs. PR #1726 by @windson.</li> <li>Add link to Starlette docs about WebSocket testing. PR #1717 by @hellocoldworld.</li> <li>Refactor generating dependant, merge for loops. PR #1714 by @Bloodielie.</li> <li>Update example for templates with Jinja to include HTML media type. PR #1690 by @frafra.</li> <li>Fix typos in docs for security. PR #1678 by @nilslindemann.</li> <li>Fix typos in docs for dependencies. PR #1675 by @nilslindemann.</li> <li>Fix type annotation for <code>**extra</code> parameters in <code>ReadyAPI</code>. PR #1659 by @bharel.</li> <li>Bump MkDocs Material to fix docs in browsers with dark mode. PR #1789 by @adriencaccia.</li> <li>Remove docs preview comment from each commit. PR #1826.</li> <li>Update GitHub context extraction for Gitter notification bot. PR #1766.</li> </ul>"},{"location":"release-notes/#0601","title":"0.60.1","text":"<ul> <li>Add debugging logs for GitHub actions to introspect GitHub hidden context. PR #1764.</li> <li>Use OS preference theme for online docs. PR #1760 by @adriencaccia.</li> <li>Upgrade Starlette to version <code>0.13.6</code> to handle a vulnerability when using static files in Windows. PR #1759 by @jamesag26.</li> <li>Pin Swagger UI temporarily, waiting for a fix for swagger-api/swagger-ui#6249. PR #1763.</li> <li>Update GitHub Actions, use commit from PR for docs preview, not commit from pre-merge. PR #1761.</li> <li>Update GitHub Actions, refactor Gitter bot. PR #1746.</li> </ul>"},{"location":"release-notes/#0600","title":"0.60.0","text":"<ul> <li>Add GitHub Action to watch for missing preview docs and trigger a preview deploy. PR #1740.</li> <li>Add custom GitHub Action to get artifact with docs preview. PR #1739.</li> <li>Add new GitHub Actions to preview docs from PRs. PR #1738.</li> <li>Add XML test coverage to support GitHub Actions. PR #1737.</li> <li>Update badges and remove Travis now that GitHub Actions is the main CI. PR #1736.</li> <li>Add GitHub Actions for CI, move from Travis. PR #1735.</li> <li>Add support for adding OpenAPI schema for GET requests with a body. PR #1626 by @victorphoenix3.</li> </ul>"},{"location":"release-notes/#0590","title":"0.59.0","text":"<ul> <li>Fix typo in docstring for OAuth2 utils. PR #1621 by @tomarv2.</li> <li>Update JWT docs to use Python-jose instead of PyJWT. Initial PR #1610 by @asheux.</li> <li>Fix/re-enable search bar in docs. PR #1703.</li> <li>Auto-generate a \"server\" in OpenAPI <code>servers</code> when there's a <code>root_path</code> instead of prefixing all the <code>paths</code>:<ul> <li>Add a new parameter for <code>ReadyAPI</code> classes: <code>root_path_in_servers</code> to disable the auto-generation of <code>servers</code>.</li> <li>New docs about <code>root_path</code> and <code>servers</code> in Additional Servers.</li> <li>Update OAuth2 examples to use a relative URL for <code>tokenUrl=\"token\"</code> to make sure those examples keep working as-is even when behind a reverse proxy.</li> <li>Initial PR #1596 by @rkbeatss.</li> </ul> </li> <li>Fix typo/link in External Links. PR #1702.</li> <li>Update handling of External Links to use a data file and allow translating the headers without becoming obsolete quickly when new links are added. PR #https://github.com/khulnasoft/readyapi/pull/1701.</li> <li>Add external link Machine learning model serving in Python using ReadyAPI and Streamlit to docs. PR #1669 by @davidefiocco.</li> <li>Add note in docs on order in Pydantic Unions. PR #1591 by @kbanc.</li> <li>Improve support for tests in editor. PR #1699.</li> <li>Pin dependencies. PR #1697.</li> <li>Update isort to version 5.x.x. PR #1670 by @asheux.</li> </ul>"},{"location":"release-notes/#0581","title":"0.58.1","text":"<ul> <li>Add link in docs to Pydantic data types. PR #1612 by @tayoogunbiyi.</li> <li>Fix link in warning logs for <code>openapi_prefix</code>. PR #1611 by @bavaria95.</li> <li>Fix bad link in docs. PR #1603 by @molto0504.</li> <li>Add Vim temporary files to <code>.gitignore</code> for contributors using Vim. PR #1590 by @asheux.</li> <li>Fix typo in docs for sub-applications. PR #1578 by @schlpbch.</li> <li>Use <code>Optional</code> in all the examples in the docs. Original PR #1574 by @chrisngyn, @kx-chen, @YKo20010. Updated and merged PR #1644.</li> <li>Update tests and handling of <code>response_model_by_alias</code>. PR #1642.</li> <li>Add translation to Chinese for Body - Fields - \u200b\u8bf7\u6c42\u200b\u4f53\u200b - \u200b\u5b57\u200b\u6bb5\u200b. PR #1569 by @waynerv.</li> <li>Update Chinese translation of main page. PR #1564 by @waynerv.</li> <li>Add translation to Chinese for Body - Multiple Parameters - \u200b\u8bf7\u6c42\u200b\u4f53\u200b - \u200b\u591a\u4e2a\u200b\u53c2\u6570\u200b. PR #1532 by @waynerv.</li> <li>Add translation to Chinese for Path Parameters and Numeric Validations - \u200b\u8def\u5f84\u200b\u53c2\u6570\u200b\u548c\u200b\u6570\u503c\u200b\u6821\u9a8c\u200b. PR #1506 by @waynerv.</li> <li>Add GitHub action to auto-label approved PRs (mainly for translations). PR #1638.</li> </ul>"},{"location":"release-notes/#0580","title":"0.58.0","text":"<ul> <li>Deep merge OpenAPI responses to preserve all the additional metadata. PR #1577.</li> <li>Mention in docs that only main app events are run (not sub-apps). PR #1554 by @amacfie.</li> <li>Fix body validation error response, do not include body variable when it is not embedded. PR #1553 by @amacfie.</li> <li>Fix testing OAuth2 security scopes when using dependency overrides. PR #1549 by @amacfie.</li> <li>Fix Model for JSON Schema keyword <code>not</code> as a JSON Schema instead of a list. PR #1548 by @v-do.</li> <li>Add support for OpenAPI <code>servers</code>. PR #1547 by @mikaello.</li> </ul>"},{"location":"release-notes/#0570","title":"0.57.0","text":"<ul> <li>Remove broken link from \"External Links\". PR #1565 by @victorphoenix3.</li> <li>Update/fix docs for WebSockets with dependencies. Original PR #1540 by @ChihSeanHsu.</li> <li>Add support for Python's <code>http.HTTPStatus</code> in <code>status_code</code> parameters. PR #1534 by @retnikt.</li> <li>When using Pydantic models with <code>__root__</code>, use the internal value in <code>jsonable_encoder</code>. PR #1524 by @patrickkwang.</li> <li>Update docs for path parameters. PR #1521 by @yankeexe.</li> <li>Update docs for first steps, links and rewording. PR #1518 by @yankeexe.</li> <li>Enable <code>showCommonExtensions</code> in Swagger UI to show additional validations like <code>maxLength</code>, etc. PR #1466 by @TiewKH.</li> <li>Make <code>OAuth2PasswordRequestFormStrict</code> importable directly from <code>readyapi.security</code>. PR #1462 by @RichardHoekstra.</li> <li>Add docs about Default response class. PR #1455 by @TezRomacH.</li> <li>Add note in docs about additional parameters <code>response_model_exclude_defaults</code> and <code>response_model_exclude_none</code> in Response Model. PR #1427 by @wshayes.</li> <li>Add note about PyCharm Pydantic plugin to docs. PR #1420 by @koxudaxi.</li> <li>Update and clarify testing function name. PR #1395 by @chenl.</li> <li>Fix duplicated headers created by indirect dependencies that use the request directly. PR #1386 by @obataku from tests by @scottsmith2gmail.</li> <li>Upgrade Starlette version to <code>0.13.4</code>. PR #1361 by @rushton.</li> <li>Improve error handling and feedback for requests with invalid JSON. PR #1354 by @aviramha.</li> <li>Add support for declaring metadata for tags in OpenAPI. New docs at Tutorial - Metadata and Docs URLs - Metadata for tags. PR #1348 by @thomas-maschler.</li> <li>Add basic setup for Russian translations. PR #1566.</li> <li>Remove obsolete Chinese articles after adding official community translations. PR #1510 by @waynerv.</li> <li>Add <code>__repr__</code> for path operation function parameter helpers (like <code>Query</code>, <code>Depends</code>, etc) to simplify debugging. PR #1560 by @rkbeatss and @victorphoenix3.</li> </ul>"},{"location":"release-notes/#0561","title":"0.56.1","text":"<ul> <li>Add link to advanced docs from tutorial. PR #1512 by @kx-chen.</li> <li>Remove internal unnecessary f-strings. PR #1526 by @kotamatsuoka.</li> <li>Add translation to Chinese for Query Parameters and String Validations - \u200b\u67e5\u8be2\u200b\u53c2\u6570\u200b\u548c\u200b\u5b57\u7b26\u4e32\u200b\u6821\u9a8c\u200b. PR #1500 by @waynerv.</li> <li>Add translation to Chinese for Request Body - \u200b\u8bf7\u6c42\u200b\u4f53\u200b. PR #1492 by @waynerv.</li> <li>Add translation to Chinese for Help ReadyAPI - Get Help - \u200b\u5e2e\u52a9\u200b ReadyAPI - \u200b\u83b7\u53d6\u200b\u5e2e\u52a9\u200b. PR #1465 by @waynerv.</li> <li>Add translation to Chinese for Query Parameters - \u200b\u67e5\u8be2\u200b\u53c2\u6570\u200b. PR #1454 by @waynerv.</li> <li>Add translation to Chinese for Contributing - \u200b\u5f00\u53d1\u200b - \u200b\u8d21\u732e\u200b. PR #1460 by @waynerv.</li> <li>Add translation to Chinese for Path Parameters - \u200b\u8def\u5f84\u200b\u53c2\u6570\u200b. PR #1453 by @waynerv.</li> <li>Add official Microsoft project generator for serving spaCy with ReadyAPI and Azure Cognitive Skills to Project Generators. PR #1390 by @kabirkhan.</li> <li>Update docs in Python Types Intro to include info about <code>Optional</code>. Original PR #1377 by @yaegassy.</li> <li>Fix support for callable class dependencies with <code>yield</code>. PR #1365 by @mrosales.</li> <li>Fix/remove incorrect error logging when a client sends invalid payloads. PR #1351 by @dbanty.</li> <li>Add translation to Chinese for First Steps - \u200b\u7b2c\u4e00\u6b65\u200b. PR #1323 by @waynerv.</li> <li>Fix generating OpenAPI for apps using callbacks with routers including Pydantic models. PR #1322 by @nsidnev.</li> <li>Optimize internal regex performance in <code>get_path_param_names()</code>. PR #1243 by @heckad.</li> <li>Remove <code>*,</code> from functions in docs where it's not needed. PR #1239 by @pankaj-giri.</li> <li>Start translations for Italian. PR #1557 by @csr.</li> </ul>"},{"location":"release-notes/#0560","title":"0.56.0","text":"<ul> <li>Add support for ASGI <code>root_path</code>:<ul> <li>Use <code>root_path</code> internally for mounted applications, so that OpenAPI and the docs UI works automatically without extra configurations and parameters.</li> <li>Add new <code>root_path</code> parameter for <code>ReadyAPI</code> applications to provide it in cases where it can be set with the command line (e.g. for Uvicorn and Hypercorn, with the parameter <code>--root-path</code>).</li> <li>Deprecate <code>openapi_prefix</code> parameter in favor of the new <code>root_path</code> parameter.</li> <li>Add new/updated docs for Sub Applications - Mounts, without <code>openapi_prefix</code> (as it is now handled automatically).</li> <li>Add new/updated docs for Behind a Proxy, including how to setup a local testing proxy with Traefik and using <code>root_path</code>.</li> <li>Update docs for Extending OpenAPI with the new <code>openapi_prefix</code> parameter passed (internally generated from <code>root_path</code>).</li> <li>Original PR #1199 by @iksteen.</li> </ul> </li> <li>Update new issue templates and docs: Help ReadyAPI - Get Help. PR #1531.</li> <li>Update GitHub action issue-manager. PR #1520.</li> <li>Add new links:<ul> <li>English articles:<ul> <li>Real-time Notifications with Python and Postgres by Guillermo Cruz.</li> <li>Microservice in Python using ReadyAPI  by Paurakh Sharma Humagain.</li> <li>Build simple API service with Python ReadyAPI \u2014 Part 1 by cuongld2.</li> <li>ReadyAPI + Zeit.co = \ud83d\ude80 by Paul Sec.</li> <li>Build a web API from scratch with ReadyAPI - the workshop by KhulnaSoft Ltd (khulnasoft).</li> <li>Build a Secure Twilio Webhook with Python and ReadyAPI  by Twilio.</li> <li>Using ReadyAPI with Django  by Stavros Korokithakis.</li> <li>Introducing Dispatch by Netflix.</li> </ul> </li> <li>Podcasts:<ul> <li>Build The Next Generation Of Python Web Applications With ReadyAPI - Episode 259 - interview to Sebast\u00edan Ram\u00edrez (khulnasoft) by Podcast.<code>__init__</code>.</li> </ul> </li> <li>Talks:<ul> <li>PyConBY 2020: Serve ML models easily with ReadyAPI by KhulnaSoft Ltd (khulnasoft).</li> <li>[VIRTUAL] Py.Amsterdam's flying Software Circus: Intro to ReadyAPI by KhulnaSoft Ltd (khulnasoft).</li> </ul> </li> <li>PR #1467.</li> </ul> </li> <li>Add translation to Chinese for Python Types Intro - Python \u200b\u7c7b\u578b\u200b\u63d0\u793a\u200b\u7b80\u4ecb\u200b. PR #1197 by @waynerv.</li> </ul>"},{"location":"release-notes/#0551","title":"0.55.1","text":"<ul> <li>Fix handling of enums with their own schema in path parameters. To support pydantic/pydantic#1432 in ReadyAPI. PR #1463.</li> </ul>"},{"location":"release-notes/#0550","title":"0.55.0","text":"<ul> <li>Allow enums to allow them to have their own schemas in OpenAPI. To support pydantic/pydantic#1432 in ReadyAPI. PR #1461.</li> <li>Add links for funding through GitHub sponsors. PR #1425.</li> <li>Update issue template for for questions. PR #1344 by @retnikt.</li> <li>Update warning about storing passwords in docs. PR #1336 by @skorokithakis.</li> <li>Fix typo. PR #1326 by @chenl.</li> <li>Add translation to Portuguese for Alternatives, Inspiration and Comparisons - Alternativas, Inspira\u00e7\u00e3o e Compara\u00e7\u00f5es. PR #1325 by @Serrones.</li> <li>Fix 2 typos in docs. PR #1324 by @waynerv.</li> <li>Update CORS docs, fix correct default of <code>max_age=600</code>. PR #1301 by @derekbekoe.</li> <li>Add translation of main page to Portuguese. PR #1300 by @Serrones.</li> <li>Re-word and clarify docs for extra info in fields. PR #1299 by @chris-allnutt.</li> <li>Make sure the <code>*</code> in short features in the docs is consistent (after <code>.</code>) in all languages. PR #1424.</li> <li>Update order of execution for <code>get_db</code> in SQLAlchemy tutorial. PR #1293 by @bcb.</li> <li>Fix typos in Async docs. PR #1423.</li> </ul>"},{"location":"release-notes/#0542","title":"0.54.2","text":"<ul> <li>Add translation to Spanish for Concurrency and async / await - Concurrencia y async / await. PR #1290 by @alvaropernas.</li> <li>Remove obsolete vote link. PR #1289 by @donhui.</li> <li>Allow disabling docs UIs by just disabling OpenAPI with <code>openapi_url=None</code>. New example in docs: Advanced: Conditional OpenAPI. PR #1421.</li> <li>Add translation to Portuguese for Benchmarks - Compara\u00e7\u00f5es. PR #1274 by @Serrones.</li> <li>Add translation to Portuguese for Tutorial - User Guide - Intro - Tutorial - Guia de Usu\u00e1rio - Introdu\u00e7\u00e3o. PR #1259 by @marcosmmb.</li> <li>Allow using Unicode in MkDocs for translations. PR #1419.</li> <li>Add translation to Spanish for Advanced User Guide - Intro - Gu\u00eda de Usuario Avanzada - Introducci\u00f3n. PR #1250 by @jfunez.</li> <li>Add translation to Portuguese for History, Design and Future - Hist\u00f3ria, Design e Futuro. PR #1249 by @marcosmmb.</li> <li>Add translation to Portuguese for Features - Recursos. PR #1248 by @marcosmmb.</li> <li>Add translation to Spanish for Tutorial - User Guide - Intro - Tutorial - Gu\u00eda de Usuario - Introducci\u00f3n. PR #1244 by @MartinEliasQ.</li> <li>Add translation to Chinese for Deployment - \u200b\u90e8\u7f72\u200b. PR #1203 by @RunningIkkyu.</li> <li>Add translation to Chinese for Tutorial - User Guide - Intro - \u200b\u6559\u7a0b\u200b - \u200b\u7528\u6237\u200b\u6307\u5357\u200b - \u200b\u7b80\u4ecb\u200b. PR #1202 by @waynerv.</li> <li>Add translation to Chinese for Features - \u200b\u7279\u6027\u200b. PR #1192 by @Dustyposa.</li> <li>Add translation for main page to Chinese PR #1191 by @waynerv.</li> <li>Update docs for project generation. PR #1287.</li> <li>Add Spanish translation for Introducci\u00f3n a los Tipos de Python (Python Types Intro). PR #1237 by @mariacamilagl.</li> <li>Add Spanish translation for Caracter\u00edsticas (Features). PR #1220 by @mariacamilagl.</li> </ul>"},{"location":"release-notes/#0541","title":"0.54.1","text":"<ul> <li>Update database test setup. PR #1226.</li> <li>Improve test debugging by showing response text in failing tests. PR #1222 by @samuelcolvin.</li> </ul>"},{"location":"release-notes/#0540","title":"0.54.0","text":"<ul> <li>Fix grammatical mistakes in async docs. PR #1188 by @mickeypash.</li> <li>Add support for <code>response_model_exclude_defaults</code> and <code>response_model_exclude_none</code>:<ul> <li>Deprecate the parameter <code>include_none</code> in <code>jsonable_encoder</code> and add the inverted <code>exclude_none</code>, to keep in sync with Pydantic.</li> <li>PR #1166 by @voegtlel.</li> </ul> </li> <li>Add example about Testing a Database. Initial PR #1144 by @duganchen.</li> <li>Update docs for Development - Contributing: Translations including note about reviewing translation PRs. #1215.</li> <li>Update log style in README.md for GitHub Markdown compatibility. PR #1200 by #geekgao.</li> <li>Add Python venv <code>env</code> to <code>.gitignore</code>. PR #1212 by @cassiobotaro.</li> <li>Start Portuguese translations. PR #1210 by @cassiobotaro.</li> <li>Update docs for Pydantic's <code>Settings</code> using a dependency with <code>@lru_cache()</code>. PR #1214.</li> <li>Add first translation to Spanish ReadyAPI. PR #1201 by @mariacamilagl.</li> <li>Add docs about Settings and Environment Variables. Initial PR 1118 by @alexmitelman.</li> </ul>"},{"location":"release-notes/#0532","title":"0.53.2","text":"<ul> <li>Fix automatic embedding of body fields for dependencies and sub-dependencies. Original PR #1079 by @Toad2186.</li> <li>Fix dependency overrides in WebSocket testing. PR #1122 by @amitlissack.</li> <li>Fix docs script to ensure languages are always sorted. PR #1189.</li> <li>Start translations for Chinese. PR #1187 by @RunningIkkyu.</li> <li>Add docs for Schema Extra - Example. PR #1185.</li> </ul>"},{"location":"release-notes/#0531","title":"0.53.1","text":"<ul> <li>Fix included example after translations refactor. PR #1182.</li> <li>Add docs example for <code>example</code> in <code>Field</code>. Docs at Body - Fields: JSON Schema extras. PR #1106 by @JohnPaton.</li> <li>Fix using recursive models in <code>response_model</code>. PR #1164 by @voegtlel.</li> <li>Add docs for Pycharm Debugging. PR #1096 by @youngquan.</li> <li>Fix typo in docs. PR #1148 by @PLNech.</li> <li>Update Windows development environment instructions. PR #1179.</li> </ul>"},{"location":"release-notes/#0530","title":"0.53.0","text":"<ul> <li>Update test coverage badge. PR #1175.</li> <li>Add <code>orjson</code> to <code>pip install readyapi[all]</code>. PR #1161 by @michael0liver.</li> <li>Fix included example for <code>GZipMiddleware</code>. PR #1138 by @arimbr.</li> <li>Fix class name in docstring for <code>OAuth2PasswordRequestFormStrict</code>. PR #1126 by @adg-mh.</li> <li>Clarify function name in example in docs. PR #1121 by @tmsick.</li> <li>Add external link Apache Kafka producer and consumer with ReadyAPI and aiokafka to docs. PR #1112 by @iwpnd.</li> <li>Fix serialization when using <code>by_alias</code> or <code>exclude_unset</code> and returning data with Pydantic models. PR #1074 by @juhovh-aiven.</li> <li>Add Gitter chat to docs. PR #1061 by @aakashnand.</li> <li>Update and simplify translations docs. PR #1171.</li> <li>Update development of ReadyAPI docs, set address to <code>127.0.0.1</code> to improve Windows support. PR #1169 by @mariacamilagl.</li> <li>Add support for docs translations. New docs: Development - Contributing: Docs: Translations. PR #1168.</li> <li>Update terminal styles in docs and add note about Cligenius, the ReadyAPI of CLIs. PR #1139.</li> </ul>"},{"location":"release-notes/#0520","title":"0.52.0","text":"<ul> <li>Add new high-performance JSON response class using <code>orjson</code>. New docs: Custom Response - HTML, Stream, File, others: <code>ORJSONResponse</code>. PR #1065.</li> </ul>"},{"location":"release-notes/#0510","title":"0.51.0","text":"<ul> <li>Re-export utils from Starlette:<ul> <li>This allows using things like <code>from readyapi.responses import JSONResponse</code> instead of <code>from starlette.responses import JSONResponse</code>.</li> <li>It's mainly syntax sugar, a convenience for developer experience.</li> <li>Now <code>Request</code>, <code>Response</code>, <code>WebSocket</code>, <code>status</code> can be imported directly from <code>readyapi</code> as in <code>from readyapi import Response</code>. This is because those are frequently used, to use the request directly, to set headers and cookies, to get status codes, etc.</li> <li>Documentation changes in many places, but new docs and noticeable improvements:<ul> <li>Custom Response - HTML, Stream, File, others.</li> <li>Advanced Middleware.</li> <li>Including WSGI - Flask, Django, others.</li> </ul> </li> <li>PR #1064.</li> </ul> </li> </ul>"},{"location":"release-notes/#0500","title":"0.50.0","text":"<ul> <li>Add link to Release Notes from docs about pinning versions for deployment. PR #1058.</li> <li>Upgrade code to use the latest version of Starlette, including:<ul> <li>Several bug fixes.</li> <li>Optional redirects of slashes, with or without ending in <code>/</code>.</li> <li>Events for routers, <code>\"startup\"</code>, and <code>\"shutdown\"</code>.</li> <li>PR #1057.</li> </ul> </li> <li>Add docs about pinning ReadyAPI versions for deployment: Deployment: ReadyAPI versions. PR #1056.</li> </ul>"},{"location":"release-notes/#0492","title":"0.49.2","text":"<ul> <li>Fix links in release notes. PR #1052 by @sattosan.</li> <li>Fix typo in release notes. PR #1051 by @sattosan.</li> <li>Refactor/clarify <code>serialize_response</code> parameter name to avoid confusion. PR #1031 by @patrickmckenna.</li> <li>Refactor calling each a path operation's handler function in an isolated function, to simplify profiling. PR #1027 by @sm-Fifteen.</li> <li>Add missing dependencies for testing. PR #1026 by @sm-Fifteen.</li> <li>Fix accepting valid types for response models, including Python types like <code>List[int]</code>. PR #1017 by @patrickmckenna.</li> <li>Fix format in SQL tutorial. PR #1015 by @vegarsti.</li> </ul>"},{"location":"release-notes/#0491","title":"0.49.1","text":"<ul> <li>Fix path operation duplicated parameters when used in dependencies and the path operation function. PR #994 by @merowinger92.</li> <li>Update Netlify previews deployment GitHub action as the fix is already merged and there's a new release. PR #1047.</li> <li>Move mypy configurations to config file. PR #987 by @hukkinj1.</li> <li>Temporary fix to Netlify previews not deployable from PRs from forks. PR #1046 by @mariacamilagl.</li> </ul>"},{"location":"release-notes/#0490","title":"0.49.0","text":"<ul> <li>Fix encoding of <code>pathlib</code> paths in <code>jsonable_encoder</code>. PR #978 by @patrickmckenna.</li> <li>Add articles to External Links: Python\u306eWeb framework\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u200b\u6bd4\u8f03\u200b (Django, Flask, responder, ReadyAPI, japronto) and [ReadyAPI] Python\u200b\u88fd\u200b\u306eASGI Web \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af ReadyAPI\u306b\u200b\u5165\u9580\u200b\u3059\u308b. PR #974 by @tokusumi.</li> <li>Fix broken links in docs. PR #949 by @tsotnikov.</li> <li>Fix small typos. PR #941 by @NikitaKolesov.</li> <li>Update and clarify docs for dependencies with <code>yield</code>. PR #986.</li> <li>Add Mermaid JS support for diagrams in docs. Add first diagrams to Dependencies: First Steps and Dependencies with <code>yield</code> and <code>HTTPException</code>. PR #985.</li> <li>Update CI to run docs deployment in GitHub actions. PR #983.</li> <li>Allow <code>callable</code>s in path operation functions, like functions modified with <code>functools.partial</code>. PR #977.</li> </ul>"},{"location":"release-notes/#0480","title":"0.48.0","text":"<ul> <li>Run linters first in tests to error out faster. PR #948.</li> <li>Log warning about <code>email-validator</code> only when used. PR #946.</li> <li>Simplify Peewee docs with double dependency with <code>yield</code>. PR #947.</li> <li>Add article External Links: Create and Deploy ReadyAPI app to Heroku. PR #942 by @windson.</li> <li>Update description of Sanic, as it is now ASGI too. PR #932 by @raphaelauv.</li> <li>Fix typo in main page. PR #920 by @mMarzeta.</li> <li>Fix parsing of possibly invalid bodies. PR #918 by @dmontagu.</li> <li>Fix typo #916 by @adursun.</li> <li>Allow <code>Any</code> type for enums in OpenAPI. PR #906 by @songzhi.</li> <li>Add article to External Links: How to continuously deploy a ReadyAPI to AWS Lambda with AWS SAM. PR #901 by @iwpnd.</li> <li>Add note about using Body parameters without Pydantic. PR #900 by @pawamoy.</li> <li>Fix Pydantic field clone logic. PR #899 by @deuce2367.</li> <li>Fix link in middleware docs. PR #893 by @linchiwei123.</li> <li>Rename default API title from \"Fast API\" to \"ReadyAPI\" for consistency. PR #890.</li> </ul>"},{"location":"release-notes/#0471","title":"0.47.1","text":"<ul> <li>Fix model filtering in <code>response_model</code>, cloning sub-models. PR #889.</li> <li>Fix ReadyAPI serialization of Pydantic models using ORM mode blocking the event loop. PR #888.</li> </ul>"},{"location":"release-notes/#0470","title":"0.47.0","text":"<ul> <li>Refactor documentation to make a simpler and shorter Tutorial - User Guide and an additional Advanced User Guide with all the additional docs. PR #887.</li> <li>Tweak external links, Markdown format, typos. PR #881.</li> <li>Fix bug in tutorial handling HTTP Basic Auth <code>username</code> and <code>password</code>. PR #865 by @isaevpd.</li> <li>Fix handling form path operation parameters declared with pure classes like <code>list</code>, <code>tuple</code>, etc. PR #856 by @nsidnev.</li> <li>Add request <code>body</code> to <code>RequestValidationError</code>, new docs: Use the <code>RequestValidationError</code> body. Initial PR #853 by @aviramha.</li> <li>Update External Links with new links and dynamic GitHub projects with <code>readyapi</code> topic. PR #850.</li> <li>Fix Peewee <code>contextvars</code> handling in docs: SQL (Relational) Databases with Peewee. PR #879.</li> <li>Setup development environment with Python's Venv and Flit, instead of requiring the extra Pipenv duplicating dependencies. Updated docs: Development - Contributing. PR #877.</li> <li>Update docs for HTTP Basic Auth to improve security against timing attacks. Initial PR #807 by @zwass.</li> </ul>"},{"location":"release-notes/#0460","title":"0.46.0","text":"<ul> <li>Fix typos and tweak configs. PR #837.</li> <li>Add link to Chinese article in External Links. PR 810 by @wxq0309.</li> <li>Implement <code>OAuth2AuthorizationCodeBearer</code> class. PR #797 by @kuwv.</li> <li>Update example upgrade in docs main page. PR #795 by @cdeil.</li> <li>Fix callback handling for sub-routers. PR #792 by @jekirl.</li> <li>Fix typos. PR #784 by @kkinder.</li> <li>Add 4 Japanese articles to External Links. PR #783 by @HymanZHAN.</li> <li>Add support for subtypes of main types in <code>jsonable_encoder</code>, e.g. asyncpg's UUIDs. PR #756 by @RmStorm.</li> <li>Fix usage of Pydantic's <code>HttpUrl</code> in docs. PR #832 by @Dustyposa.</li> <li>Fix Twitter links in docs. PR #813 by @justindujardin.</li> <li>Add docs for correctly using ReadyAPI with Peewee ORM. Including how to overwrite parts of Peewee to correctly handle async threads. PR #789.</li> </ul>"},{"location":"release-notes/#0450","title":"0.45.0","text":"<ul> <li>Add support for OpenAPI Callbacks:<ul> <li>New docs: OpenAPI Callbacks.</li> <li>Refactor generation of <code>operationId</code>s to be valid Python names (also valid variables in most languages).</li> <li>Add <code>default_response_class</code> parameter to <code>APIRouter</code>.</li> <li>Original PR #722 by @booooh.</li> </ul> </li> <li>Refactor logging to use the same logger everywhere, update log strings and levels. PR #781.</li> <li>Add article to External Links: \u041f\u043e\u0447\u0435\u043c\u0443 \u0412\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c ReadyAPI?. PR #766 by @prostomarkeloff.</li> <li>Remove gender bias in docs for handling errors. PR #780. Original idea in PR #761 by @classywhetten.</li> <li>Rename docs and references to <code>body-schema</code> to <code>body-fields</code> to keep in line with Pydantic. PR #746 by @prostomarkeloff.</li> </ul>"},{"location":"release-notes/#0441","title":"0.44.1","text":"<ul> <li>Add GitHub social preview images to git. PR #752.</li> <li>Update PyPI \"trove classifiers\". PR #751.</li> <li>Add full support for Python 3.8. Enable Python 3.8 in full in Travis. PR 749.</li> <li>Update \"new issue\" templates. PR #749.</li> <li>Fix serialization of errors for exotic Pydantic types. PR #748 by @dmontagu.</li> </ul>"},{"location":"release-notes/#0440","title":"0.44.0","text":"<ul> <li>Add GitHub action Issue Manager. PR #742.</li> <li>Fix typos in docs. PR 734 by @bundabrg.</li> <li>Fix usage of <code>custom_encoder</code> in <code>jsonable_encoder</code>. PR #715 by @matrixise.</li> <li>Fix invalid XML example. PR 710 by @OcasoProtal.</li> <li>Fix typos and update wording in deployment docs. PR #700 by @marier-nico.</li> <li>Add note about dependencies in <code>APIRouter</code> docs. PR #698 by @marier-nico.</li> <li>Add support for async class methods as dependencies #681 by @frankie567.</li> <li>Add ReadyAPI with Swagger UI cheatsheet to external links. PR #671 by @euri10.</li> <li>Fix typo in HTTP protocol in CORS example. PR #647 by @forestmonster.</li> <li>Add support for Pydantic versions <code>1.0.0</code> and above, with temporary (deprecated) backwards compatibility for Pydantic <code>0.32.2</code>. PR #646 by @dmontagu.</li> </ul>"},{"location":"release-notes/#0430","title":"0.43.0","text":"<ul> <li>Update docs to reduce gender bias. PR #645 by @ticosax.</li> <li>Add docs about overriding the <code>operationId</code> for all the path operations based on their function name. PR #642 by @SKalt.</li> <li>Fix validators in models generating an incorrect key order. PR #637 by @jaddison.</li> <li>Generate correct OpenAPI docs for responses with no content. PR #621 by @brotskydotcom.</li> <li>Remove <code>$</code> from Bash code blocks in docs for consistency. PR #613 by @nstapelbroek.</li> <li>Add docs for self-serving docs' (Swagger UI) static assets, e.g. to use the docs offline, or without Internet. Initial PR #557 by @svalouch.</li> <li>Fix <code>black</code> linting after upgrade. PR #682 by @frankie567.</li> </ul>"},{"location":"release-notes/#0420","title":"0.42.0","text":"<ul> <li>Add dependencies with <code>yield</code>, a.k.a. exit steps, context managers, cleanup, teardown, ...<ul> <li>This allows adding extra code after a dependency is done. It can be used, for example, to close database connections.</li> <li>Dependencies with <code>yield</code> can be normal or <code>async</code>, ReadyAPI will run normal dependencies in a threadpool.</li> <li>They can be combined with normal dependencies.</li> <li>It's possible to have arbitrary trees/levels of dependencies with <code>yield</code> and exit steps are handled in the correct order automatically.</li> <li>It works by default in Python 3.7 or above. For Python 3.6, it requires the extra backport dependencies:<ul> <li><code>async-exit-stack</code></li> <li><code>async-generator</code></li> </ul> </li> <li>New docs at Dependencies with <code>yield</code>.</li> <li>Updated database docs SQL (Relational) Databases: Main ReadyAPI app.</li> <li>PR #595.</li> </ul> </li> <li>Fix <code>sitemap.xml</code> in website. PR #598 by @samuelcolvin.</li> </ul>"},{"location":"release-notes/#0410","title":"0.41.0","text":"<ul> <li>Upgrade required Starlette to <code>0.12.9</code>, the new range is <code>&gt;=0.12.9,&lt;=0.12.9</code>.<ul> <li>Add <code>State</code> to ReadyAPI apps at <code>app.state</code>.</li> <li>PR #593.</li> </ul> </li> <li>Improve handling of custom classes for <code>Request</code>s and <code>APIRoute</code>s.<ul> <li>This helps to more easily solve use cases like:<ul> <li>Reading a body before and/or after a request (equivalent to a middleware).</li> <li>Run middleware-like code only for a subset of path operations.</li> <li>Process a request before passing it to a path operation function. E.g. decompressing, deserializing, etc.</li> <li>Processing a response after being generated by path operation functions but before returning it. E.g. adding custom headers, logging, adding extra metadata.</li> </ul> </li> <li>New docs section: Custom Request and APIRoute class.</li> <li>PR #589 by @dmontagu.</li> </ul> </li> <li>Fix preserving custom route class in routers when including other sub-routers. PR #538 by @dmontagu.</li> </ul>"},{"location":"release-notes/#0400","title":"0.40.0","text":"<ul> <li>Add notes to docs about installing <code>python-multipart</code> when using forms. PR #574 by @sliptonic.</li> <li>Generate OpenAPI schemas in alphabetical order. PR #554 by @dmontagu.</li> <li>Add support for truncating docstrings from path operation functions.<ul> <li>New docs at Advanced description from docstring.</li> <li>PR #556 by @svalouch.</li> </ul> </li> <li>Fix <code>DOCTYPE</code> in HTML files generated for Swagger UI and ReDoc. PR #537 by @Trim21.</li> <li>Fix handling <code>4XX</code> responses overriding default <code>422</code> validation error responses. PR #517 by @tsouvarev.</li> <li>Fix typo in documentation for Simple HTTP Basic Auth. PR #514 by @prostomarkeloff.</li> <li>Fix incorrect documentation example in first steps. PR #511 by @IgnatovFedor.</li> <li>Add support for Swagger UI initOauth settings with the parameter <code>swagger_ui_init_oauth</code>. PR #499 by @zamiramir.</li> </ul>"},{"location":"release-notes/#0390","title":"0.39.0","text":"<ul> <li>Allow path parameters to have default values (e.g. <code>None</code>) and discard them instead of raising an error.<ul> <li>This allows declaring a parameter like <code>user_id: str = None</code> that can be taken from a query parameter, but the same path operation can be included in a router with a path <code>/users/{user_id}</code>, in which case will be taken from the path and will be required.</li> <li>PR #464 by @jonathanunderwood.</li> </ul> </li> <li>Add support for setting a <code>default_response_class</code> in the <code>ReadyAPI</code> instance or in <code>include_router</code>. Initial PR #467 by @toppk.</li> <li>Add support for type annotations using strings and <code>from __future__ import annotations</code>. PR #451 by @dmontagu.</li> </ul>"},{"location":"release-notes/#0381","title":"0.38.1","text":"<ul> <li>Fix incorrect <code>Request</code> class import. PR #493 by @kamalgill.</li> </ul>"},{"location":"release-notes/#0380","title":"0.38.0","text":"<ul> <li>Add recent articles to External Links and recent opinions. PR #490.</li> <li>Upgrade support range for Starlette to include <code>0.12.8</code>. The new range is <code>&gt;=0.11.1,&lt;=0.12.8\"</code>. PR #477 by @dmontagu.</li> <li>Upgrade support to Pydantic version 0.32.2 and update internal code to use it (breaking change). PR #463 by @dmontagu.</li> </ul>"},{"location":"release-notes/#0370","title":"0.37.0","text":"<ul> <li>Add support for custom route classes for advanced use cases. PR #468 by @dmontagu.</li> <li>Allow disabling Google fonts in ReDoc. PR #481 by @b1-luettje.</li> <li>Fix security issue: when returning a sub-class of a response model and using <code>skip_defaults</code> it could leak information. PR #485 by @dmontagu.</li> <li>Enable tests for Python 3.8-dev. PR #465 by @Jamim.</li> <li>Add support and tests for Pydantic dataclasses in <code>response_model</code>. PR #454 by @dconathan.</li> <li>Fix typo in OAuth2 JWT tutorial. PR #447 by @pablogamboa.</li> <li>Use the <code>media_type</code> parameter in <code>Body()</code> params to set the media type in OpenAPI for <code>requestBody</code>. PR #439 by @divums.</li> <li>Add article Deploying a scikit-learn model with ONNX and ReadyAPI by Nico Axtmann. PR #438 by @naxty.</li> <li>Allow setting custom <code>422</code> (validation error) response/schema in OpenAPI.<ul> <li>And use media type from response class instead of fixed <code>application/json</code> (the default).</li> <li>PR #437 by @divums.</li> </ul> </li> <li>Fix using <code>\"default\"</code> extra response with status codes at the same time. PR #489.</li> <li>Allow additional responses to use status code ranges (like <code>5XX</code> and <code>4XX</code>) and <code>\"default\"</code>. PR #435 by @divums.</li> </ul>"},{"location":"release-notes/#0360","title":"0.36.0","text":"<ul> <li>Fix implementation for <code>skip_defaults</code> when returning a Pydantic model. PR #422 by @dmontagu.</li> <li>Fix OpenAPI generation when using the same dependency in multiple places for the same path operation. PR #417 by @dmontagu.</li> <li>Allow having empty paths in path operations used with <code>include_router</code> and a <code>prefix</code>.<ul> <li>This allows having a router for <code>/cats</code> and all its path operations, while having one of them for <code>/cats</code>.</li> <li>Now it doesn't have to be only <code>/cats/</code> (with a trailing slash).</li> <li>To use it, declare the path in the path operation as the empty string (<code>\"\"</code>).</li> <li>PR #415 by @vitalik.</li> </ul> </li> <li>Fix mypy error after merging PR #415. PR #462.</li> </ul>"},{"location":"release-notes/#0350","title":"0.35.0","text":"<ul> <li>Fix typo in routing <code>assert</code>. PR #419 by @pablogamboa.</li> <li>Fix typo in docs. PR #411 by @bronsen.</li> <li>Fix parsing a body type declared with <code>Union</code>. PR #400 by @koxudaxi.</li> </ul>"},{"location":"release-notes/#0340","title":"0.34.0","text":"<ul> <li> <p>Upgrade Starlette supported range to include the latest <code>0.12.7</code>. The new range is <code>0.11.1,&lt;=0.12.7</code>. PR #367 by @dedsm.</p> </li> <li> <p>Add test for OpenAPI schema with duplicate models from PR #333 by @dmontagu. PR #385.</p> </li> </ul>"},{"location":"release-notes/#0330","title":"0.33.0","text":"<ul> <li>Upgrade Pydantic version to <code>0.30.0</code>. PR #384 by @jekirl.</li> </ul>"},{"location":"release-notes/#0320","title":"0.32.0","text":"<ul> <li> <p>Fix typo in docs for features. PR #380 by @MartinoMensio.</p> </li> <li> <p>Fix source code <code>limit</code> for example in Query Parameters. PR #366 by @Smashman.</p> </li> <li> <p>Update wording in docs about OAuth2 scopes. PR #371 by @cjw296.</p> </li> <li> <p>Update docs for <code>Enum</code>s to inherit from <code>str</code> and improve Swagger UI rendering. PR #351.</p> </li> <li> <p>Fix regression, add Swagger UI deep linking again. PR #350.</p> </li> <li> <p>Add test for having path templates in <code>prefix</code> of <code>.include_router</code>. PR #349.</p> </li> <li> <p>Add note to docs: Include the same router multiple times with different <code>prefix</code>. PR #348.</p> </li> <li> <p>Fix OpenAPI/JSON Schema generation for two functions with the same name (in different modules) with the same composite bodies.</p> <ul> <li>Composite bodies' IDs are now based on path, not only on route name, as the auto-generated name uses the function names, that can be duplicated in different modules.</li> <li>The same new ID generation applies to response models.</li> <li>This also changes the generated title for those models.</li> <li>Only composite bodies and response models are affected because those are generated dynamically, they don't have a module (a Python file).</li> <li>This also adds the possibility of using <code>.include_router()</code> with the same <code>APIRouter</code> multiple  times, with different prefixes, e.g. <code>/api/v2</code> and <code>/api/latest</code>, and it will now work correctly.</li> <li>PR #347.</li> </ul> </li> </ul>"},{"location":"release-notes/#0310","title":"0.31.0","text":"<ul> <li>Upgrade Pydantic supported version to <code>0.29.0</code>.<ul> <li>New supported version range is <code>\"pydantic &gt;=0.28,&lt;=0.29.0\"</code>.</li> <li>This adds support for Pydantic Generic Models, kudos to @dmontagu.</li> <li>PR #344.</li> </ul> </li> </ul>"},{"location":"release-notes/#0301","title":"0.30.1","text":"<ul> <li> <p>Add section in docs about External Links and Articles. PR #341.</p> </li> <li> <p>Remove <code>Pipfile.lock</code> from the repository as it is only used by ReadyAPI contributors (developers of ReadyAPI itself). See the PR for more details. PR #340.</p> </li> <li> <p>Update section about Help ReadyAPI - Get Help. PR #339.</p> </li> <li> <p>Refine internal type declarations to improve/remove Mypy errors in users' code. PR #338.</p> </li> <li> <p>Update and clarify SQL tutorial with SQLAlchemy. PR #331 by @mariacamilagl.</p> </li> <li> <p>Add SQLite online viewers to the docs. PR #330 by @cyrilbois.</p> </li> </ul>"},{"location":"release-notes/#0300","title":"0.30.0","text":"<ul> <li> <p>Add support for Pydantic's ORM mode:</p> <ul> <li>Updated documentation about SQL with SQLAlchemy, using Pydantic models with ORM mode, SQLAlchemy models with relations, separation of files, simplification of code and other changes. New docs: SQL (Relational) Databases.</li> <li>The new support for ORM mode fixes issues/adds features related to ORMs with lazy-loading, hybrid properties, dynamic/getters (using <code>@property</code> decorators) and several other use cases.</li> <li>This applies to ORMs like SQLAlchemy, Peewee, Tortoise ORM, GINO ORM and virtually any other.</li> <li>If your path operations return an arbitrary object with attributes (e.g. <code>my_item.name</code> instead of <code>my_item[\"name\"]</code>) AND you use a <code>response_model</code>, make sure to update the Pydantic models with <code>orm_mode = True</code> as described in the docs (link above).</li> <li>New documentation about receiving plain <code>dict</code>s as request bodies: Bodies of arbitrary <code>dict</code>s.</li> <li>New documentation about returning arbitrary <code>dict</code>s in responses: Response with arbitrary <code>dict</code>.</li> <li>Technical Details:<ul> <li>When declaring a <code>response_model</code> it is used directly to generate the response content, from whatever was returned from the path operation function.</li> <li>Before this, the return content was first passed through <code>jsonable_encoder</code> to ensure it was a \"jsonable\" object, like a <code>dict</code>, instead of an arbitrary object with attributes (like an ORM model). That's why you should make sure to update your Pydantic models for objects with attributes to use <code>orm_mode = True</code>.</li> <li>If you don't have a <code>response_model</code>, the return object will still be passed through <code>jsonable_encoder</code> first.</li> <li>When a <code>response_model</code> is declared, the same <code>response_model</code> type declaration won't be used as is, it will be \"cloned\" to create an new one (a cloned Pydantic <code>Field</code> with all the submodels cloned as well).</li> <li>This avoids/fixes a potential security issue: as the returned object is passed directly to Pydantic, if the returned object was a subclass of the <code>response_model</code> (e.g. you return a <code>UserInDB</code> that inherits from <code>User</code> but contains extra fields, like <code>hashed_password</code>, and <code>User</code> is used in the <code>response_model</code>), it would still pass the validation (because <code>UserInDB</code> is a subclass of <code>User</code>) and the object would be returned as-is, including the <code>hashed_password</code>. To fix this, the declared <code>response_model</code> is cloned, if it is a Pydantic model class (or contains Pydantic model classes in it, e.g. in a <code>List[Item]</code>), the Pydantic model class(es) will be a different one (the \"cloned\" one). So, an object that is a subclass won't simply pass the validation and returned as-is, because it is no longer a sub-class of the cloned <code>response_model</code>. Instead, a new Pydantic model object will be created with the contents of the returned object. So, it will be a new object (made with the data from the returned one), and will be filtered by the cloned <code>response_model</code>, containing only the declared fields as normally.</li> </ul> </li> <li>PR #322.</li> </ul> </li> <li> <p>Remove/clean unused RegEx code in routing. PR #314 by @dmontagu.</p> </li> <li> <p>Use default response status code descriptions for additional responses. PR #313 by @duxiaoyao.</p> </li> <li> <p>Upgrade Pydantic support to <code>0.28</code>. PR #320 by @jekirl.</p> </li> </ul>"},{"location":"release-notes/#0291","title":"0.29.1","text":"<ul> <li> <p>Fix handling an empty-body request with a required body param. PR #311.</p> </li> <li> <p>Fix broken link in docs: Return a Response directly. PR #306 by @dmontagu.</p> </li> <li> <p>Fix docs discrepancy in docs for Response Model. PR #288 by @awiddersheim.</p> </li> </ul>"},{"location":"release-notes/#0290","title":"0.29.0","text":"<ul> <li>Add support for declaring a <code>Response</code> parameter:<ul> <li>This allows declaring:<ul> <li>Response Cookies.</li> <li>Response Headers.</li> <li>An HTTP Status Code different than the default: Response - Change Status Code.</li> </ul> </li> <li>All of this while still being able to return arbitrary objects (<code>dict</code>, DB model, etc).</li> <li>Update attribution to Hug, for inspiring the <code>response</code> parameter pattern.</li> <li>PR #294.</li> </ul> </li> </ul>"},{"location":"release-notes/#0280","title":"0.28.0","text":"<ul> <li> <p>Implement dependency cache per request.</p> <ul> <li>This avoids calling each dependency multiple times for the same request.</li> <li>This is useful while calling external services, performing costly computation, etc.</li> <li>This also means that if a dependency was declared as a path operation decorator dependency, possibly at the router level (with <code>.include_router()</code>) and then it is declared again in a specific path operation, the dependency will be called only once.</li> <li>The cache can be disabled per dependency declaration, using <code>use_cache=False</code> as in <code>Depends(your_dependency, use_cache=False)</code>.</li> <li>Updated docs at: Using the same dependency multiple times.</li> <li>PR #292.</li> </ul> </li> <li> <p>Implement dependency overrides for testing.</p> <ul> <li>This allows using overrides/mocks of dependencies during tests.</li> <li>New docs: Testing Dependencies with Overrides.</li> <li>PR #291.</li> </ul> </li> </ul>"},{"location":"release-notes/#0272","title":"0.27.2","text":"<ul> <li>Fix path and query parameters receiving <code>dict</code> as a valid type. It should be mapped to a body payload. PR #287. Updated docs at: Query parameter list / multiple values with defaults: Using <code>list</code>.</li> </ul>"},{"location":"release-notes/#0271","title":"0.27.1","text":"<ul> <li> <p>Fix <code>auto_error=False</code> handling in <code>HTTPBearer</code> security scheme. Do not <code>raise</code> when there's an incorrect <code>Authorization</code> header if <code>auto_error=False</code>. PR #282.</p> </li> <li> <p>Fix type declaration of <code>HTTPException</code>. PR #279.</p> </li> </ul>"},{"location":"release-notes/#0270","title":"0.27.0","text":"<ul> <li> <p>Fix broken link in docs about OAuth 2.0 with scopes. PR #275 by @dmontagu.</p> </li> <li> <p>Refactor param extraction using Pydantic <code>Field</code>:</p> <ul> <li>Large refactor, improvement, and simplification of param extraction from path operations.</li> <li>Fix/add support for list query parameters with list defaults. New documentation: Query parameter list / multiple values with defaults.</li> <li>Add support for enumerations in path operation parameters. New documentation: Path Parameters: Predefined values.</li> <li>Add support for type annotations using <code>Optional</code> as in <code>param: Optional[str] = None</code>. New documentation: Optional type declarations.</li> <li>PR #278.</li> </ul> </li> </ul>"},{"location":"release-notes/#0260","title":"0.26.0","text":"<ul> <li> <p>Separate error handling for validation errors.</p> <ul> <li>This will allow developers to customize the exception handlers.</li> <li>Document better how to handle exceptions and use error handlers.</li> <li>Include <code>RequestValidationError</code> and <code>WebSocketRequestValidationError</code> (this last one will be useful once encode/starlette#527 or equivalent is merged).</li> <li>New documentation about exceptions handlers:<ul> <li>Install custom exception handlers.</li> <li>Override the default exception handlers.</li> <li>Reuse ReadyAPI's exception handlers.</li> </ul> </li> <li>PR #273.</li> </ul> </li> <li> <p>Fix support for paths in path parameters without needing explicit <code>Path(...)</code>.</p> <ul> <li>PR #256.</li> <li>Documented in PR #272 by @wshayes.</li> <li>New documentation at: Path Parameters containing paths.</li> </ul> </li> <li> <p>Update docs for testing ReadyAPI. Include using <code>POST</code>, sending JSON, testing headers, etc. New documentation: Testing. PR #271.</p> </li> <li> <p>Fix type declaration of <code>response_model</code> to allow generic Python types as <code>List[Model]</code>. Mainly to fix <code>mypy</code> for users. PR #266.</p> </li> </ul>"},{"location":"release-notes/#0250","title":"0.25.0","text":"<ul> <li> <p>Add support for Pydantic's <code>include</code>, <code>exclude</code>, <code>by_alias</code>.</p> <ul> <li>Update documentation: Response Model.</li> <li>Add docs for: Body - updates, using Pydantic's <code>skip_defaults</code>.</li> <li>Add method consistency tests.</li> <li>PR #264.</li> </ul> </li> <li> <p>Add <code>CONTRIBUTING.md</code> file to GitHub, to help new contributors. PR #255 by @wshayes.</p> </li> <li> <p>Add support for Pydantic's <code>skip_defaults</code>:</p> <ul> <li>There's a new path operation decorator parameter <code>response_model_skip_defaults</code>.<ul> <li>The name of the parameter will most probably change in a future version to <code>response_skip_defaults</code>, <code>model_skip_defaults</code> or something similar.</li> </ul> </li> <li>New documentation section about using <code>response_model_skip_defaults</code>.</li> <li>PR #248 by @wshayes.</li> </ul> </li> </ul>"},{"location":"release-notes/#0240","title":"0.24.0","text":"<ul> <li> <p>Add support for WebSockets with dependencies and parameters.</p> <ul> <li>Support included for:<ul> <li><code>Depends</code></li> <li><code>Security</code></li> <li><code>Cookie</code></li> <li><code>Header</code></li> <li><code>Path</code></li> <li><code>Query</code></li> <li>...as these are compatible with the WebSockets protocol (e.g. <code>Body</code> is not).</li> </ul> </li> <li>Updated documentation for WebSockets.</li> <li>PR #178 by @jekirl.</li> </ul> </li> <li> <p>Upgrade the compatible version of Pydantic to <code>0.26.0</code>.</p> <ul> <li>This includes JSON Schema support for IP address and network objects, bug fixes, and other features.</li> <li>PR #247 by @euri10.</li> </ul> </li> </ul>"},{"location":"release-notes/#0230","title":"0.23.0","text":"<ul> <li> <p>Upgrade the compatible version of Starlette to <code>0.12.0</code>.</p> <ul> <li>This includes support for ASGI 3 (the latest version of the standard).</li> <li>It's now possible to use Starlette's <code>StreamingResponse</code> with iterators, like file-like objects (as those returned by <code>open()</code>).</li> <li>It's now possible to use the low level utility <code>iterate_in_threadpool</code> from <code>starlette.concurrency</code> (for advanced scenarios).</li> <li>PR #243.</li> </ul> </li> <li> <p>Add OAuth2 redirect page for Swagger UI. This allows having delegated authentication in the Swagger UI docs. For this to work, you need to add <code>{your_origin}/docs/oauth2-redirect</code> to the allowed callbacks in your OAuth2 provider (in Auth0, Facebook, Google, etc).</p> <ul> <li>For example, during development, it could be <code>http://localhost:8000/docs/oauth2-redirect</code>.</li> <li>Keep in mind that this callback URL is independent of whichever one is used by your frontend. You might also have another callback at <code>https://yourdomain.com/login/callback</code>.</li> <li>This is only to allow delegated authentication in the API docs with Swagger UI.</li> <li>PR #198 by @steinitzu.</li> </ul> </li> <li> <p>Make Swagger UI and ReDoc route handlers (path operations) be <code>async</code> functions instead of lambdas to improve performance. PR #241 by @Trim21.</p> </li> <li> <p>Make Swagger UI and ReDoc URLs parameterizable, allowing to host and serve local versions of them and have offline docs. PR #112 by @euri10.</p> </li> </ul>"},{"location":"release-notes/#0220","title":"0.22.0","text":"<ul> <li> <p>Add support for <code>dependencies</code> parameter:</p> <ul> <li>A parameter in path operation decorators, for dependencies that should be executed but the return value is not important or not used in the path operation function.</li> <li>A parameter in the <code>.include_router()</code> method of ReadyAPI applications and routers, to include dependencies that should be executed in each path operation in a router.<ul> <li>This is useful, for example, to require authentication or permissions in specific group of path operations.</li> <li>Different <code>dependencies</code> can be applied to different routers.</li> </ul> </li> <li>These <code>dependencies</code> are run before the normal parameter dependencies. And normal dependencies are run too. They can be combined.</li> <li>Dependencies declared in a router are executed first, then the ones defined in path operation decorators, and then the ones declared in normal parameters. They are all combined and executed.</li> <li>All this also supports using <code>Security</code> with <code>scopes</code> in those <code>dependencies</code> parameters, for more advanced OAuth 2.0 security scenarios with scopes.</li> <li>New documentation about dependencies in path operation decorators.</li> <li>New documentation about dependencies in the <code>include_router()</code> method.</li> <li>PR #235.</li> </ul> </li> <li> <p>Fix OpenAPI documentation of Starlette URL convertors. Specially useful when using <code>path</code> convertors, to take a whole path as a parameter, like <code>/some/url/{p:path}</code>. PR #234 by @euri10.</p> </li> <li> <p>Make default parameter utilities exported from <code>readyapi</code> be functions instead of classes (the new functions return instances of those classes). To be able to override the return types and fix <code>mypy</code> errors in ReadyAPI's users' code. Applies to <code>Path</code>, <code>Query</code>, <code>Header</code>, <code>Cookie</code>, <code>Body</code>, <code>Form</code>, <code>File</code>, <code>Depends</code>, and <code>Security</code>. PR #226 and PR #231.</p> </li> <li> <p>Separate development scripts <code>test.sh</code>, <code>lint.sh</code>, and <code>format.sh</code>. PR #232.</p> </li> <li> <p>Re-enable <code>black</code> formatting checks for Python 3.7. PR #229 by @zamiramir.</p> </li> </ul>"},{"location":"release-notes/#0210","title":"0.21.0","text":"<ul> <li> <p>On body parsing errors, raise <code>from</code> previous exception, to allow better introspection in logging code. PR #192 by @ricardomomm.</p> </li> <li> <p>Use Python logger named \"<code>readyapi</code>\" instead of root logger. PR #222 by @euri10.</p> </li> <li> <p>Upgrade Pydantic to version 0.25. PR #225 by @euri10.</p> </li> <li> <p>Fix typo in routing. PR #221 by @djlambert.</p> </li> </ul>"},{"location":"release-notes/#0201","title":"0.20.1","text":"<ul> <li> <p>Add typing information to package including file <code>py.typed</code>. PR #209 by @meadsteve.</p> </li> <li> <p>Add ReadyAPI bot for Gitter. To automatically announce new releases. PR #189.</p> </li> </ul>"},{"location":"release-notes/#0200","title":"0.20.0","text":"<ul> <li> <p>Upgrade OAuth2:</p> <ul> <li>Upgrade Password flow using Bearer tokens to use the correct HTTP status code 401 <code>UNAUTHORIZED</code>, with <code>WWW-Authenticate</code> headers.</li> <li>Update, simplify, and improve all the security docs.</li> <li>Add new <code>scope_str</code> to <code>SecurityScopes</code> and update docs: OAuth2 scopes.</li> <li>Update docs, images, tests.</li> <li>PR #188.</li> </ul> </li> <li> <p>Include Hypercorn as an alternative ASGI server in the docs. PR #187.</p> </li> <li> <p>Add docs for Static Files and Templates. PR #186.</p> </li> <li> <p>Add docs for handling Response Cookies and Response Headers. PR #185.</p> </li> <li> <p>Fix typos in docs. PR #176 by @chdsbd.</p> </li> </ul>"},{"location":"release-notes/#0190","title":"0.19.0","text":"<ul> <li> <p>Rename path operation decorator parameter <code>content_type</code> to <code>response_class</code>. PR #183.</p> </li> <li> <p>Add docs:</p> <ul> <li>How to use the <code>jsonable_encoder</code> in JSON compatible encoder.</li> <li>How to Return a Response directly.</li> <li>Update how to use a Custom Response Class.</li> <li>PR #184.</li> </ul> </li> </ul>"},{"location":"release-notes/#0180","title":"0.18.0","text":"<ul> <li> <p>Add docs for HTTP Basic Auth. PR #177.</p> </li> <li> <p>Upgrade HTTP Basic Auth handling with automatic headers (automatic browser login prompt). PR #175.</p> </li> <li> <p>Update dependencies for security. PR #174.</p> </li> <li> <p>Add docs for Middleware. PR #173.</p> </li> </ul>"},{"location":"release-notes/#0170","title":"0.17.0","text":"<ul> <li> <p>Make Flit publish from CI. PR #170.</p> </li> <li> <p>Add documentation about handling CORS (Cross-Origin Resource Sharing). PR #169.</p> </li> <li> <p>By default, encode by alias. This allows using Pydantic <code>alias</code> parameters working by default. PR #168.</p> </li> </ul>"},{"location":"release-notes/#0160","title":"0.16.0","text":"<ul> <li> <p>Upgrade path operation <code>docstring</code> parsing to support proper Markdown descriptions. New documentation at Path Operation Configuration. PR #163.</p> </li> <li> <p>Refactor internal usage of Pydantic to use correct data types. PR #164.</p> </li> <li> <p>Upgrade Pydantic to version <code>0.23</code>. PR #160 by @euri10.</p> </li> <li> <p>Fix typo in Tutorial about Extra Models. PR #159 by @danielmichaels.</p> </li> <li> <p>Fix Query Parameters URL examples in docs. PR #157 by @hayata-yamamoto.</p> </li> </ul>"},{"location":"release-notes/#0150","title":"0.15.0","text":"<ul> <li> <p>Add support for multiple file uploads (as a single form field). New docs at: Multiple file uploads. PR #158.</p> </li> <li> <p>Add docs for: Additional Status Codes. PR #156.</p> </li> </ul>"},{"location":"release-notes/#0140","title":"0.14.0","text":"<ul> <li> <p>Improve automatically generated names of path operations in OpenAPI (in API docs). A function <code>read_items</code> instead of having a generated name \"Read Items Get\" will have \"Read Items\". PR #155.</p> </li> <li> <p>Add docs for: Testing ReadyAPI. PR #151.</p> </li> <li> <p>Update <code>/docs</code> Swagger UI to enable deep linking. This allows sharing the URL pointing directly to the path operation documentation in the docs. PR #148 by @wshayes.</p> </li> <li> <p>Update development dependencies, <code>Pipfile.lock</code>. PR #150.</p> </li> <li> <p>Include Falcon and Hug in: Alternatives, Inspiration and Comparisons.</p> </li> </ul>"},{"location":"release-notes/#0130","title":"0.13.0","text":"<ul> <li>Improve/upgrade OAuth2 scopes support with <code>SecurityScopes</code>:<ul> <li><code>SecurityScopes</code> can be declared as a parameter like <code>Request</code>, to get the scopes of all super-dependencies/dependants.</li> <li>Improve <code>Security</code> handling, merging scopes when declaring <code>SecurityScopes</code>.</li> <li>Allow using <code>SecurityBase</code> (like <code>OAuth2</code>) classes with <code>Depends</code> and still document them. <code>Security</code> now is needed only to declare <code>scopes</code>.</li> <li>Updated docs about: OAuth2 with Password (and hashing), Bearer with JWT tokens.</li> <li>New docs about: OAuth2 scopes.</li> <li>PR #141.</li> </ul> </li> </ul>"},{"location":"release-notes/#0121","title":"0.12.1","text":"<ul> <li> <p>Fix bug: handling additional <code>responses</code> in <code>APIRouter.include_router()</code>. PR #140.</p> </li> <li> <p>Fix typo in SQL tutorial. PR #138 by @mostaphaRoudsari.</p> </li> <li> <p>Fix typos in section about nested models and OAuth2 with JWT. PR #127 by @mmcloud.</p> </li> </ul>"},{"location":"release-notes/#0120","title":"0.12.0","text":"<ul> <li>Add additional <code>responses</code> parameter to path operation decorators to extend responses in OpenAPI (and API docs).<ul> <li>It also allows extending existing responses generated from <code>response_model</code>, declare other media types (like images), etc.</li> <li>The new documentation is here: Additional Responses.</li> <li><code>responses</code> can also be added to <code>.include_router()</code>, the updated docs are here: Bigger Applications.</li> <li>PR #97 originally initiated by @barsi.</li> </ul> </li> <li>Update <code>scripts/test-cov-html.sh</code> to allow passing extra parameters like <code>-vv</code>, for development.</li> </ul>"},{"location":"release-notes/#0110","title":"0.11.0","text":"<ul> <li> <p>Add <code>auto_error</code> parameter to security utility functions. Allowing them to be optional. Also allowing to have multiple alternative security schemes that are then checked in a single dependency instead of each one verifying and returning the error to the client automatically when not satisfied. PR #134.</p> </li> <li> <p>Update SQL Tutorial to close database sessions even when there are exceptions. PR #89 by @alexiri.</p> </li> <li> <p>Fix duplicate dependency in <code>pyproject.toml</code>. PR #128 by @zxalif.</p> </li> </ul>"},{"location":"release-notes/#0103","title":"0.10.3","text":"<ul> <li> <p>Add Gitter chat, badge, links, etc. https://gitter.im/khulnasoft/readyapi . PR #117.</p> </li> <li> <p>Add docs about Extending OpenAPI. PR #126.</p> </li> <li> <p>Make Travis run Ubuntu Xenial (newer version) and Python 3.7 instead of Python 3.7-dev. PR #92 by @blueyed.</p> </li> <li> <p>Fix duplicated param variable creation. PR #123 by @yihuang.</p> </li> <li> <p>Add note in Response Model docs about why using a function parameter instead of a function return type annotation. PR #109 by @JHSaunders.</p> </li> <li> <p>Fix event docs (startup/shutdown) function name. PR #105 by @stratosgear.</p> </li> </ul>"},{"location":"release-notes/#0102","title":"0.10.2","text":"<ul> <li> <p>Fix OpenAPI (JSON Schema) for declarations of Python <code>Union</code> (JSON Schema <code>additionalProperties</code>). PR #121.</p> </li> <li> <p>Update Background Tasks with a note on Celery.</p> </li> <li> <p>Document response models using unions and lists, updated at: Extra Models. PR #108.</p> </li> </ul>"},{"location":"release-notes/#0101","title":"0.10.1","text":"<ul> <li>Add docs and tests for encode/databases. New docs at: Async SQL (Relational) Databases. PR #107.</li> </ul>"},{"location":"release-notes/#0100","title":"0.10.0","text":"<ul> <li> <p>Add support for Background Tasks in path operation functions and dependencies. New documentation about Background Tasks is here. PR #103.</p> </li> <li> <p>Add support for <code>.websocket_route()</code> in <code>APIRouter</code>. PR #100 by @euri10.</p> </li> <li> <p>New docs section about Events: startup - shutdown. PR #99.</p> </li> </ul>"},{"location":"release-notes/#091","title":"0.9.1","text":"<ul> <li>Document receiving Multiple values with the same query parameter and Duplicate headers. PR #95.</li> </ul>"},{"location":"release-notes/#090","title":"0.9.0","text":"<ul> <li> <p>Upgrade compatible Pydantic version to <code>0.21.0</code>. PR #90.</p> </li> <li> <p>Add documentation for: Application Configuration.</p> </li> <li> <p>Fix typo in docs. PR #76 by @matthewhegarty.</p> </li> <li> <p>Fix link in \"Deployment\" to \"Bigger Applications\".</p> </li> </ul>"},{"location":"release-notes/#080","title":"0.8.0","text":"<ul> <li> <p>Make development scripts executable. PR #76 by @euri10.</p> </li> <li> <p>Add support for adding <code>tags</code> in <code>app.include_router()</code>. PR #55 by @euri10. Documentation updated in the section: Bigger Applications.</p> </li> <li> <p>Update docs related to Uvicorn to use new <code>--reload</code> option from version <code>0.5.x</code>. PR #74.</p> </li> <li> <p>Update <code>isort</code> imports and scripts to be compatible with newer versions. PR #75.</p> </li> </ul>"},{"location":"release-notes/#071","title":"0.7.1","text":"<ul> <li> <p>Update technical details about <code>async def</code> handling with respect to previous frameworks. PR #64 by @haizaar.</p> </li> <li> <p>Add deployment documentation for Docker in Raspberry Pi and other architectures.</p> </li> <li> <p>Trigger Docker images build on Travis CI automatically. PR #65.</p> </li> </ul>"},{"location":"release-notes/#070","title":"0.7.0","text":"<ul> <li>Add support for <code>UploadFile</code> in <code>File</code> parameter annotations.<ul> <li>This includes a file-like interface.</li> <li>Here's the updated documentation for declaring <code>File</code> parameters with <code>UploadFile</code>.</li> <li>And here's the updated documentation for using <code>Form</code> parameters mixed with <code>File</code> parameters, supporting <code>bytes</code> and <code>UploadFile</code> at the same time.</li> <li>PR #63.</li> </ul> </li> </ul>"},{"location":"release-notes/#064","title":"0.6.4","text":"<ul> <li> <p>Add technical details about <code>async def</code> handling to docs. PR #61.</p> </li> <li> <p>Add docs for Debugging ReadyAPI applications in editors.</p> </li> <li> <p>Clarify Bigger Applications deployed with Docker.</p> </li> <li> <p>Fix typos in docs.</p> </li> <li> <p>Add section about History, Design and Future.</p> </li> <li> <p>Add docs for using WebSockets with ReadyAPI. PR #62.</p> </li> </ul>"},{"location":"release-notes/#063","title":"0.6.3","text":"<ul> <li>Add Favicons to docs. PR #53.</li> </ul>"},{"location":"release-notes/#062","title":"0.6.2","text":"<ul> <li> <p>Introduce new project generator based on ReadyAPI and PostgreSQL: https://github.com/khulnasoft/full-stack-readyapi-postgresql. PR #52.</p> </li> <li> <p>Update SQL tutorial with SQLAlchemy, using <code>Depends</code> to improve editor support and reduce code repetition. PR #52.</p> </li> <li> <p>Improve middleware naming in tutorial for SQL with SQLAlchemy https://readyapi.github.io/tutorial/sql-databases/.</p> </li> </ul>"},{"location":"release-notes/#061","title":"0.6.1","text":"<ul> <li>Add docs for GraphQL: https://readyapi.github.io/advanced/graphql/. PR #48.</li> </ul>"},{"location":"release-notes/#060","title":"0.6.0","text":"<ul> <li> <p>Update SQL with SQLAlchemy tutorial at https://readyapi.github.io/tutorial/sql-databases/ using the new official <code>request.state</code>. PR #45.</p> </li> <li> <p>Upgrade Starlette to version <code>0.11.1</code> and add required compatibility changes. PR #44.</p> </li> </ul>"},{"location":"release-notes/#051","title":"0.5.1","text":"<ul> <li> <p>Add section about helping and getting help with ReadyAPI.</p> </li> <li> <p>Add note about path operations order in docs.</p> </li> <li> <p>Update section about error handling with more information and make relation with Starlette error handling utilities more explicit. PR #41.</p> </li> <li> <p>Add Development - Contributing section to the docs. PR #42.</p> </li> </ul>"},{"location":"release-notes/#050","title":"0.5.0","text":"<ul> <li> <p>Add new <code>HTTPException</code> with support for custom headers. With new documentation for handling errors at: https://readyapi.github.io/tutorial/handling-errors/. PR #35.</p> </li> <li> <p>Add documentation to use Starlette <code>Request</code> object directly. Check #25 by @euri10.</p> </li> <li> <p>Add issue templates to simplify reporting bugs, getting help, etc: #34.</p> </li> <li> <p>Update example for the SQLAlchemy tutorial at https://readyapi.github.io/tutorial/sql-databases/ using middleware and database session attached to request.</p> </li> </ul>"},{"location":"release-notes/#040","title":"0.4.0","text":"<ul> <li> <p>Add <code>openapi_prefix</code>, support for reverse proxy and mounting sub-applications. See the docs at https://readyapi.github.io/advanced/sub-applications-proxy/: #26 by @kabirkhan.</p> </li> <li> <p>Update docs/tutorial for SQLAlchemy including note about DB Browser for SQLite.</p> </li> </ul>"},{"location":"release-notes/#030","title":"0.3.0","text":"<ul> <li>Fix/add SQLAlchemy support, including ORM, and update docs for SQLAlchemy: #30.</li> </ul>"},{"location":"release-notes/#021","title":"0.2.1","text":"<ul> <li>Fix <code>jsonable_encoder</code> for Pydantic models with <code>Config</code> but without <code>json_encoders</code>: #29.</li> </ul>"},{"location":"release-notes/#020","title":"0.2.0","text":"<ul> <li> <p>Fix typos in Security section: #24 by @kkinder.</p> </li> <li> <p>Add support for Pydantic custom JSON encoders: #21 by @euri10.</p> </li> </ul>"},{"location":"release-notes/#0119","title":"0.1.19","text":"<ul> <li>Upgrade Starlette version to the current latest <code>0.10.1</code>: #17 by @euri10.</li> </ul>"}]}