{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ReadyAPI","text":"<p> ReadyAPI \ud83d\udee0\ufe0f, \u2195 \ud83c\udfad, \u23e9 \ud83d\udca1, \u23e9 \ud83d\udcdf, \ud83d\udd1c \ud83c\udfed </p> <p> </p> <p>\ud83e\uddfe: https://readyapi.github.io</p> <p>\u2139 \ud83d\udcdf: https://github.com/readyapi/readyapi</p> <p>ReadyAPI \ud83c\udfdb, \u23e9 (\u2195-\ud83c\udfad), \ud83d\udd78 \ud83d\udee0\ufe0f \ud83c\udfd7 \ud83d\udee0\ufe0f \u23ee\ufe0f \ud83d\udc0d 3\ufe0f\u20e3.8\ufe0f\u20e3 \u2795 \u2693\ufe0f \ud83d\udd1b \ud83d\udc29 \ud83d\udc0d \ud83c\udd8e \ud83d\udd11.</p> <p>\ud83d\udd11 \u2692:</p> <ul> <li>\u23e9: \ud83d\udcf6 \u2195 \ud83c\udfad, \ud83d\udd1b \ud83c\uddf7\ud83c\uddea \u23ee\ufe0f \u2733 &amp; \ud83d\udeb6 (\ud83d\udc4f \ud83d\udc83 &amp; Pydantic). 1\ufe0f\u20e3 \u23e9 \ud83d\udc0d \ud83d\udee0\ufe0f \ud83d\udcaa.</li> <li>\u23e9 \ud83d\udcdf: \ud83d\udcc8 \ud83d\ude85 \ud83d\udee0\ufe0f \u2692 \ud83d\udd03 2\ufe0f\u20e30\ufe0f\u20e30\ufe0f\u20e3 \ud83d\udcaf 3\ufe0f\u20e30\ufe0f\u20e30\ufe0f\u20e3 \ud83d\udcaf. *</li> <li>\ud83d\udc69\u200d\u2764\u200d\ud83d\udc68 \ud83d\udc1b: \ud83d\udcc9 \ud83d\udd03 4\ufe0f\u20e30\ufe0f\u20e3 \ud83d\udcaf \ud83d\uddff (\ud83d\udc69\u200d\ud83d\udcbb) \ud83d\udcc9 \u274c. *</li> <li>\ud83c\udfcb\ufe0f: \ud83d\udc51 \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udc15\u200d\ud83e\uddba. \ud83d\udee0\ufe0f \ud83c\udf10. \ud83c\udf18 \ud83d\udd70 \ud83d\udee0\ufe0f.</li> <li>\u23e9: \ud83d\udd27 \u23e9 \u2699\ufe0f &amp; \ud83d\udca1. \ud83c\udf18 \ud83d\udd70 \ud83d\udc42 \ud83e\ude7a.</li> <li>\ud83d\udccf: \ud83d\udcc9 \ud83d\udcdf \u274e. \ud83d\udc97 \u2692 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udd20 \ud83d\udd22 \ud83d\udcc4. \ud83d\udc69\u200d\u2764\u200d\ud83d\udc68 \ud83d\udc1b.</li> <li>\ud83c\udfcb\ufe0f: \ud83e\udd1a \ud83c\udfed-\ud83d\udd1c \ud83d\udcdf. \u23ee\ufe0f \ud83c\udfe7 \ud83c\udf93 \ud83e\uddfe.</li> <li>\ud83d\udc29-\u2693\ufe0f: \u2693\ufe0f \ud83d\udd1b (&amp; \ud83c\udf55 \ud83d\udd17 \u23ee\ufe0f) \ud83d\udcc2 \ud83d\udc29 \ud83d\udd17: \ud83d\uddc4 (\u23ea \ud83d\udcad \ud83e\udd81) &amp; \ud83c\udfbb \ud83d\udd17.</li> </ul> <p>* \u2696 \u2693\ufe0f \ud83d\udd1b \ud83d\udcaf \ud83d\udd1b \ud83d\udd17 \ud83d\udee0\ufe0f \ud83c\udfc9, \ud83c\udfd7 \ud83c\udfed \ud83c\ude38.</p>"},{"location":"#_1","title":"\ud83d\udcb0","text":"<p>\ud83c\udf8f \ud83d\udcb0</p>"},{"location":"#_2","title":"\ud83e\udd14","text":"<p>\"[...] \ud83d\udc64 \u2699\ufe0f ReadyAPI \ud83d\udcda \ud83d\udc6b \ud83d\udcc6. [...] \ud83d\udc64 \ud83e\udd19 \ud83d\udcc6 \u2699\ufe0f \u26ab\ufe0f \ud83c\udf10 \ud83d\udc47 \ud83c\udfc9 \u2697 \ud83d\udc15\u200d\ud83e\uddba \ud83e\udd38\u200d\u2642. \ud83d\udc6b \ud83d\udc86\u200d\u2642 \ud83d\udee0\ufe0f \ud83d\udd18 \ud83d\udc1a \ud83d\udda5 \ud83c\udfec &amp; \ud83d\udce0 \ud83c\udfec.\"</p> \ud83e\uddff \ud83c\uddf5\ud83c\uddf0 - \ud83e\udd38\u200d\u2642 (\ud83c\udde6\ud83c\uddea) <p>\"\ud83d\udc65 \ud83d\udee0\ufe0f ReadyAPI \ud83d\uddc3 \ud83e\udd16 \ud83c\udf82 \ud83d\udcbd \ud83d\udc48 \ud83d\udcaa \ud83d\udd22 \ud83d\ude9a \ud83d\udd2e. [\ud83d\udc68\ud83d\udcdb]\"</p> \ud83c\uddee\ud83c\uddf9 \ud83c\uddf8\ud83c\uddfb, \ud83d\udc68\ud83d\udcdb \ud83d\udc68\ud83d\udcdb, &amp; \ud83c\uddf1\ud83c\uddf0 \ud83d\udd49 \ud83d\udd49 - \ud83d\ude43 (\ud83c\udde6\ud83c\uddea) <p>\"\ud83d\udcfa \ud83d\ude4f \ud83d\udce3 \ud83d\udcc2-\u2139 \ud83d\ude80 \ud83d\udc46 \u2694 \ud83e\uddfe \ud83c\udfb6 \ud83d\udee0\ufe0f: \ud83d\udce8\u2757 [\ud83c\udfd7 \u23ee\ufe0f ReadyAPI]\"</p> \u2721 \ud83c\udf4f, \ud83d\udc56 \ud83c\uddea\ud83c\uddf8, \ud83c\udf32 \ud83c\udf4f - \ud83d\udcfa (\ud83c\udde6\ud83c\uddea) <p>\"\ud83d\udc64 \ud83e\udd2d \ud83c\udf15 \ud83d\ude04 \ud83d\udd03 ReadyAPI. \u26ab\ufe0f \ud83c\udf8a \u2757\"</p> \u2721 \ud83c\udded\ud83c\uddf0 - \ud83d\udc0d \ud83d\udd22 \ud83d\udcfb \ud83e\udda0 (\ud83c\udde6\ud83c\uddea) <p>\"\ud83e\udd19, \u26ab\ufe0f\u2754 \ud83d\udc46 \u2714\ufe0f \ud83c\udfd7 \ud83d\udc40 \ud83d\udc8e \ud83d\udca0 &amp; \ud83c\uddf5\ud83c\uddf1. \ud83d\udcda \ud83c\udf0c, \u26ab\ufe0f \u26ab\ufe0f\u2754 \ud83d\udc64 \ud83d\udc9a \ud83e\udd17 - \u26ab\ufe0f \ud83e\udd19 \ud83d\ude0d \ud83d\udc40 \ud83d\udc71 \ud83c\udfd7 \ud83d\udc48.\"</p> \u2721 \ud83d\uddc4 - \ud83e\udd17 \ud83d\udc7c (\ud83c\udde6\ud83c\uddea) <p>\"\ud83d\udea5 \ud83d\udc46 \ud83d\udc40 \ud83d\udca1 1\ufe0f\u20e3 \ud83c\udfdb \ud83d\udee0\ufe0f \ud83c\udfd7 \ud83c\udf82 \ud83d\udd17, \u2705 \ud83d\udc45 ReadyAPI [...] \u26ab\ufe0f \u23e9, \u23e9 \u2699\ufe0f &amp; \u23e9 \ud83d\udca1 [...]\"</p> <p>\"\ud83d\udc65 \u2714\ufe0f \ud83c\udf9b \ud83e\udd2d ReadyAPI \ud83d\udc46 \ud83d\udd17 [...] \ud83d\udc64 \ud83d\udcad \ud83d\udc46 \ud83d\udd1c \ud83d\udc96 \u26ab\ufe0f [...]\"</p> \ud83c\uddf1\ud83c\udde8 \ud83c\uddf8\ud83c\uddf2 - \u2721 Honnibal - \ud83d\udca5 \ud83d\udc72 \ud83d\udd74 - \ud83c\udf08 \ud83d\udc7c (\ud83c\udde6\ud83c\uddea) - (\ud83c\udde6\ud83c\uddea) <p>\"\ud83d\udea5 \ud83d\ude46 \ud83d\udc40 \ud83c\udfd7 \ud83c\udfed \ud83d\udc0d \ud83d\udee0\ufe0f, \ud83d\udc64 \ud83d\udd1c \ud83c\udfc6 \ud83d\udc4d ReadyAPI. \u26ab\ufe0f \ud83d\udc8e \ud83c\udfd7, \ud83d\ude45 \u2699\ufe0f &amp; \ud83c\udfc6 \ud83d\udee0\ufe0f, \u26ab\ufe0f \u2714\ufe0f \u25b6\ufe0f\ufe0f \ud83d\udd11 \ud83e\uddb2 \ud83d\udc46 \ud83d\udee0\ufe0f \ud83e\udd47 \ud83d\udee0\ufe0f \ud83c\udf9b &amp; \ud83d\ude98 \ud83d\udcda \ud83c\udfe7 &amp; \ud83d\udc15\u200d\ud83e\uddba \u2705 \ud83d\udc46 \ud83d\udd79 \ud83d\udd2b \ud83d\udc68\u200d\ud83d\udcbb.\"</p> \ud83c\uddf9\ud83c\udde6 \ud83c\udf70 - \ud83d\udcfb (\ud83c\udde6\ud83c\uddea)"},{"location":"#readyapi_1","title":"\ud83c\udfce, ReadyAPI \ud83c\uddf3\ud83c\udde8","text":"<p>\ud83d\udea5 \ud83d\udc46 \ud83c\udfd7 \u2733 \ud83d\udcf1 \u2699\ufe0f \ud83d\udcf6 \u21a9\ufe0f \ud83d\udd78 \ud83d\udee0\ufe0f, \u2705 \ud83d\udc45 \ud83c\udfce.</p> <p>\ud83c\udfce ReadyAPI \ud83d\udc25 \ud83d\udc6a. &amp; \u26ab\ufe0f \ud83c\udfaf ReadyAPI \ud83c\uddf3\ud83c\udde8. \ud83d\udc76 \ud83d\udc76 \ud83d\udc76</p>"},{"location":"#_3","title":"\ud83d\udcc4","text":"<p>\ud83d\udc0d 3\ufe0f\u20e3.7\ufe0f\u20e3 \u2795</p> <p>ReadyAPI \ud83e\uddcd \ud83d\udd1b \u231a \ud83d\udc18:</p> <ul> <li>\ud83d\udc83 \ud83d\udd78 \ud83c\udf55.</li> <li>Pydantic \ud83d\udcca \ud83c\udf55.</li> </ul>"},{"location":"#_4","title":"\ud83d\udc77\u200d\u2642","text":"<pre><code>$ pip install \"readyapi[standard]\"\n\n---&gt; 100%\n</code></pre> <p>\ud83d\udc46 \ud83d\udd1c \ud83d\udcaa \ud83d\udd2b \ud83d\udcbd, \ud83c\udfed \u2705 Uvicorn \u2696\ufe0f Hypercorn.</p> <pre><code>$ pip install \"uvicorn[standard]\"\n\n---&gt; 100%\n</code></pre>"},{"location":"#_5","title":"\ud83d\uddbc","text":""},{"location":"#_6","title":"\u270d \u26ab\ufe0f","text":"<ul> <li>\u270d \ud83d\udcc1 <code>main.py</code> \u23ee\ufe0f:</li> </ul> <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n</code></pre> \u2696\ufe0f \u2699\ufe0f <code>async def</code>... <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udcdf \u2699\ufe0f <code>async</code> / <code>await</code>, \u2699\ufe0f <code>async def</code>:</p> <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n</code></pre> <p>\ud83d\uddd2:</p> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udeab \ud83d\udcad, \u2705 _\"\ud83c\udfc3 \u2753\" _ \ud83d\udcc4 \ud83d\udd03 <code>async</code> &amp; <code>await</code> \ud83e\ude7a.</p>"},{"location":"#_7","title":"\ud83c\udfc3 \u26ab\ufe0f","text":"<p>\ud83c\udfc3 \ud83d\udcbd \u23ee\ufe0f:</p> <pre><code>$ uvicorn main:app --reload\n\nINFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\nINFO:     Started reloader process [28720]\nINFO:     Started server process [28722]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\n</code></pre> \ud83d\udd03 \ud83d\udccb <code>uvicorn main:app --reload</code>... <p>\ud83d\udccb <code>uvicorn main:app</code> \ud83d\udd17:</p> <ul> <li><code>main</code>: \ud83d\udcc1 <code>main.py</code> (\ud83d\udc0d \"\ud83d\udd79\").</li> <li><code>app</code>: \ud83c\udf9a \u270d \ud83d\udd18 <code>main.py</code> \u23ee\ufe0f \u23f8 <code>app = ReadyAPI()</code>.</li> <li><code>--reload</code>: \u2692 \ud83d\udcbd \u23cf \u23ee\ufe0f \ud83d\udcdf \ud83d\udd00. \ud83d\udd74 \ud83d\udc49 \ud83d\udee0\ufe0f.</li> </ul>"},{"location":"#_8","title":"\u2705 \u26ab\ufe0f","text":"<p>\ud83d\udcc2 \ud83d\udc46 \ud83d\udda5 http://127.0.0.1:8000/items/5?q=somequery.</p> <p>\ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \ud83c\udfbb \ud83d\udce8:</p> <pre><code>{\"item_id\": 5, \"q\": \"somequery\"}\n</code></pre> <p>\ud83d\udc46 \u23ea \u270d \ud83d\udee0\ufe0f \ud83d\udc48:</p> <ul> <li>\ud83d\udce8 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udce8 \u27a1 <code>/</code> &amp; <code>/items/{item_id}</code>.</li> <li>\ud83d\udc6f\u200d\u2642\ufe0f \u27a1 \u270a <code>GET</code> \ud83d\udee0\ufe0f (\ud83d\udcad \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udc69\u200d\ud83d\udd2c).</li> <li>\u27a1 <code>/items/{item_id}</code> \u2714\ufe0f \u27a1 \ud83d\udd22 <code>item_id</code> \ud83d\udc48 \ud83d\udd1c <code>int</code>.</li> <li>\u27a1 <code>/items/{item_id}</code> \u2714\ufe0f \ud83d\udce6 <code>str</code> _\ud83d\udd22 = <code>q</code>.</li> </ul>"},{"location":"#_9","title":"\ud83c\udf93 \ud83d\udee0\ufe0f \ud83e\ude7a","text":"<p>\ud83d\udd1c \ud83d\udeb6 http://127.0.0.1:8000/docs.</p> <p>\ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \ud83c\udfe7 \ud83c\udf93 \ud83d\udee0\ufe0f \ud83e\uddfe (\ud83d\ude9a \ud83e\udd81 \ud83c\udf9a):</p> <p></p>"},{"location":"#_10","title":"\ud83c\udf9b \ud83d\udee0\ufe0f \ud83e\ude7a","text":"<p>&amp; \ud83d\udd1c, \ud83d\udeb6 http://127.0.0.1:8000/redoc.</p> <p>\ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \ud83c\udf9b \ud83c\udfe7 \ud83e\uddfe (\ud83d\ude9a \ud83d\udcc4):</p> <p></p>"},{"location":"#_11","title":"\ud83d\uddbc \u267b","text":"<p>\ud83d\udd1c \ud83d\udd00 \ud83d\udcc1 <code>main.py</code> \ud83d\udce8 \ud83d\udcaa \u26aa\ufe0f\u27a1\ufe0f <code>PUT</code> \ud83d\udce8.</p> <p>\ud83d\udce3 \ud83d\udcaa \u2699\ufe0f \ud83d\udc29 \ud83d\udc0d \ud83c\udd8e, \ud83d\udc4f Pydantic.</p> <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI\nfrom pydantic import BaseModel\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n    is_offer: Union[bool, None] = None\n\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n\n\n@app.put(\"/items/{item_id}\")\ndef update_item(item_id: int, item: Item):\n    return {\"item_name\": item.name, \"item_id\": item_id}\n</code></pre> <p>\ud83d\udcbd \ud83d\udd1c \ud83d\udd03 \ud83d\udd01 (\u21a9\ufe0f \ud83d\udc46 \ud83d\udeae <code>--reload</code> <code>uvicorn</code> \ud83d\udccb \ud83d\udd1b).</p>"},{"location":"#_12","title":"\ud83c\udf93 \ud83d\udee0\ufe0f \ud83e\ude7a \u267b","text":"<p>\ud83d\udd1c \ud83d\udeb6 http://127.0.0.1:8000/docs.</p> <ul> <li>\ud83c\udf93 \ud83d\udee0\ufe0f \ud83e\uddfe \ud83d\udd1c \ud83d\udd01 \u2139, \ud83d\udd0c \ud83c\udd95 \ud83d\udcaa:</li> </ul> <p></p> <ul> <li>\ud83d\udd8a \ud83d\udd1b \ud83d\udd3c \"\ud83d\udd04 \u26ab\ufe0f \ud83d\udc45\", \u26ab\ufe0f \u2714 \ud83d\udc46 \ud83e\udd67 \ud83d\udd22 &amp; \ud83d\udd17 \ud83d\udd17 \u23ee\ufe0f \ud83d\udee0\ufe0f:</li> </ul> <p></p> <ul> <li>\u2934\ufe0f \ud83d\udd8a \ud83d\udd1b \"\ud83d\udee0\ufe0f\" \ud83d\udd3c, \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd22 \ud83d\udd1c \ud83d\udd17 \u23ee\ufe0f \ud83d\udc46 \ud83d\udee0\ufe0f, \ud83d\udce8 \ud83d\udd22, \ud83e\udd1a \ud83c\udfc1 &amp; \ud83c\udfa6 \ud83d\udc6b \ud83d\udd1b \ud83d\udda5:</li> </ul> <p></p>"},{"location":"#_13","title":"\ud83c\udf9b \ud83d\udee0\ufe0f \ud83e\ude7a \u267b","text":"<p>&amp; \ud83d\udd1c, \ud83d\udeb6 http://127.0.0.1:8000/redoc.</p> <ul> <li>\ud83c\udf9b \ud83e\uddfe \ud83d\udd1c \ud83c\udfa8 \ud83c\udd95 \ud83d\udd22 \ud83d\udd22 &amp; \ud83d\udcaa:</li> </ul> <p></p>"},{"location":"#_14","title":"\ud83c\udf03","text":"<p>\ud83d\udcc4, \ud83d\udc46 \ud83d\udce3 \ud83d\udd50 \ud83c\udd8e \ud83d\udd22, \ud83d\udcaa, \u2652\ufe0f. \ud83d\udd22 \ud83d\udd22.</p> <p>\ud83d\udc46 \ud83d\udc48 \u23ee\ufe0f \ud83d\udc29 \ud83c\udfdb \ud83d\udc0d \ud83c\udd8e.</p> <p>\ud83d\udc46 \ud83d\udeab \u2714\ufe0f \ud83d\udca1 \ud83c\udd95 \u2755, \ud83d\udc69\u200d\ud83d\udd2c \u2696\ufe0f \ud83c\udf93 \ud83c\udfaf \ud83d\uddc3, \u2652\ufe0f.</p> <p>\ud83d\udc29 \ud83d\udc0d 3\ufe0f\u20e3.7\ufe0f\u20e3 \u2795.</p> <p>\ud83d\uddbc, <code>int</code>:</p> <pre><code>item_id: int\n</code></pre> <p>\u2696\ufe0f \ud83c\udf16 \ud83c\udfd7 <code>Item</code> \ud83c\udff7:</p> <pre><code>item: Item\n</code></pre> <p>...&amp; \u23ee\ufe0f \ud83d\udc48 \ud83d\udc41 \ud83d\udcc4 \ud83d\udc46 \ud83e\udd1a:</p> <ul> <li>\ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udc15\u200d\ud83e\uddba, \ud83d\udd0c:<ul> <li>\ud83d\udee0\ufe0f.</li> <li>\ud83c\udd8e \u2705.</li> </ul> </li> <li>\ud83d\udd2c \ud83d\udcbd:<ul> <li>\ud83c\udfe7 &amp; \ud83c\udd91 \u274c \ud83d\udd50\u2754 \ud83d\udcca \u274c.</li> <li>\ud83d\udd2c \ud83d\ude47 \ud83d\udc26 \ud83c\udfbb \ud83c\udf9a.</li> </ul> </li> <li>\ud83d\udee0\ufe0f \ud83d\udd22 \ud83d\udcbd: \ud83d\udc5f \u26aa\ufe0f\u27a1\ufe0f \ud83d\udd78 \ud83d\udc0d \ud83d\udcbd &amp; \ud83c\udd8e. \ud83d\udc42 \u26aa\ufe0f\u27a1\ufe0f:<ul> <li>\ud83c\udfbb.</li> <li>\u27a1 \ud83d\udd22.</li> <li>\ud83d\udd22 \ud83d\udd22.</li> <li>\ud83c\udf6a.</li> <li>\ud83c\udf9a.</li> <li>\ud83d\udce8.</li> <li>\ud83d\udcc1.</li> </ul> </li> <li>\ud83d\udee0\ufe0f \ud83d\udd22 \ud83d\udcca: \ud83d\udddc \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc0d \ud83d\udcbd &amp; \ud83c\udd8e \ud83d\udd78 \ud83d\udcbd (\ud83c\udfbb):<ul> <li>\ud83d\udddc \ud83d\udc0d \ud83c\udd8e (<code>str</code>, <code>int</code>, <code>float</code>, <code>bool</code>, <code>list</code>, \u2652\ufe0f).</li> <li><code>datetime</code> \ud83c\udf9a.</li> <li><code>UUID</code> \ud83c\udf9a.</li> <li>\ud83d\udcbd \ud83c\udff7.</li> <li>...&amp; \ud83d\udcda \ud83c\udf16.</li> </ul> </li> <li>\ud83c\udfe7 \ud83c\udf93 \ud83d\udee0\ufe0f \ud83e\uddfe, \ud83d\udd0c 2\ufe0f\u20e3 \ud83c\udf9b \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd22:<ul> <li>\ud83e\udd81 \ud83c\udf9a.</li> <li>\ud83d\udcc4.</li> </ul> </li> </ul> <p>\ud83d\udc5f \ud83d\udd19 \u23ee\ufe0f \ud83d\udcdf \ud83d\uddbc, ReadyAPI \ud83d\udd1c:</p> <ul> <li>\u2714 \ud83d\udc48 \ud83d\udce4 <code>item_id</code> \u27a1 <code>GET</code> &amp; <code>PUT</code> \ud83d\udce8.</li> <li>\u2714 \ud83d\udc48 <code>item_id</code> \ud83c\udd8e <code>int</code> <code>GET</code> &amp; <code>PUT</code> \ud83d\udce8.<ul> <li>\ud83d\udea5 \u26ab\ufe0f \ud83d\udeab, \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd1c \ud83d\udc40 \u26a0, \ud83c\udd91 \u274c.</li> </ul> </li> <li>\u2705 \ud83d\udea5 \ud83d\udce4 \ud83d\udce6 \ud83d\udd22 \ud83d\udd22 \ud83d\udcdb <code>q</code> ( <code>http://127.0.0.1:8000/items/foo?q=somequery</code>) <code>GET</code> \ud83d\udce8.<ul> <li><code>q</code> \ud83d\udd22 \ud83d\udce3 \u23ee\ufe0f <code>= None</code>, \u26ab\ufe0f \ud83d\udce6.</li> <li>\ud83c\udf75 <code>None</code> \u26ab\ufe0f \ud83d\udd1c \ud83d\ude9a (\ud83d\udcaa \ud83d\udcbc \u23ee\ufe0f <code>PUT</code>).</li> </ul> </li> <li><code>PUT</code> \ud83d\udce8 <code>/items/{item_id}</code>, \u270d \ud83d\udcaa \ud83c\udfbb:<ul> <li>\u2705 \ud83d\udc48 \u26ab\ufe0f \u2714\ufe0f \u2714 \ud83d\udd22 <code>name</code> \ud83d\udc48 \ud83d\udd1c <code>str</code>.</li> <li>\u2705 \ud83d\udc48 \u26ab\ufe0f \u2714\ufe0f \u2714 \ud83d\udd22 <code>price</code> \ud83d\udc48 \u2714\ufe0f <code>float</code>.</li> <li>\u2705 \ud83d\udc48 \u26ab\ufe0f \u2714\ufe0f \ud83d\udce6 \ud83d\udd22 <code>is_offer</code>, \ud83d\udc48 \ud83d\udd1c <code>bool</code>, \ud83d\udea5 \ud83c\udf81.</li> <li>\ud83c\udf10 \ud83d\udc49 \ud83d\udd1c \ud83d\udc77 \ud83d\ude47 \ud83d\udc26 \ud83c\udfbb \ud83c\udf9a.</li> </ul> </li> <li>\ud83d\udddc \u26aa\ufe0f\u27a1\ufe0f &amp; \ud83c\udfbb \ud83d\udd01.</li> <li>\ud83d\udcc4 \ud83c\udf10 \u23ee\ufe0f \ud83d\uddc4, \ud83d\udc48 \ud83d\udcaa \u2699\ufe0f:<ul> <li>\ud83c\udf93 \ud83e\uddfe \u2699\ufe0f.</li> <li>\ud83c\udfe7 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udcdf \u26a1 \u2699\ufe0f, \ud83d\udcda \ud83c\uddea\ud83c\uddf8.</li> </ul> </li> <li>\ud83d\ude9a 2\ufe0f\u20e3 \ud83c\udf93 \ud83e\uddfe \ud83d\udd78 \ud83d\udd22 \ud83d\udd17.</li> </ul> <p>\ud83d\udc65 \ud83d\udd8c \ud83e\uddfd, \u270b\ufe0f \ud83d\udc46 \u23ea \ud83e\udd1a \ud83d\udcad \u2754 \u26ab\ufe0f \ud83c\udf10 \ud83d\udc77.</p> <p>\ud83d\udd04 \ud83d\udd00 \u23f8 \u23ee\ufe0f:</p> <pre><code>    return {\"item_name\": item.name, \"item_id\": item_id}\n</code></pre> <p>...\u26aa\ufe0f\u27a1\ufe0f:</p> <pre><code>        ... \"item_name\": item.name ...\n</code></pre> <p>...:</p> <pre><code>        ... \"item_price\": item.price ...\n</code></pre> <p>...&amp; \ud83d\udc40 \u2754 \ud83d\udc46 \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udd1c \ud83d\ude98-\ud83c\udfc1 \ud83d\udd22 &amp; \ud83d\udcad \ud83d\udc6b \ud83c\udd8e:</p> <p></p> <p>\ud83c\udf05 \ud83c\udfc1 \ud83d\uddbc \ud83d\udd0c \ud83c\udf05 \u2692, \ud83d\udc40 \ud83d\udd30 - \ud83d\udc69\u200d\ud83d\udcbb \ud83e\uddae.</p> <p>\ud83d\ude98 \ud83d\udea8: \ud83d\udd30 - \ud83d\udc69\u200d\ud83d\udcbb \ud83e\uddae \ud83d\udd0c:</p> <ul> <li>\ud83d\udcc4 \ud83d\udd22 \u26aa\ufe0f\u27a1\ufe0f \ud83c\udf8f \ud83c\udf8f \ud83e\udd49: \ud83c\udf9a, \ud83c\udf6a, \ud83d\udce8 \ud83c\udfd1 &amp; \ud83d\udcc1.</li> <li>\u2754 \u2692 \ud83d\udd2c \u269b <code>maximum_length</code> \u2696\ufe0f <code>regex</code>.</li> <li>\ud83d\udcf6 \ud83c\udfcb\ufe0f &amp; \u23e9 \u2699\ufe0f \ud83d\udd17 \ud83d\udc89 \u2699\ufe0f.</li> <li>\ud83d\udc82\u200d\u2642 &amp; \ud83e\udd1d, \u2705 \ud83d\udc15\u200d\ud83e\uddba Oauth2\ufe0f\u20e3 \u23ee\ufe0f \ud83e\udd59 \ud83e\udd1d &amp; \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udd30 \ud83d\udd10.</li> <li>\ud83c\udf05 \ud83c\udfe7 (\u270b\ufe0f \ud83d\ude28 \u23e9) \u2692 \ud83d\udce3 \ud83d\ude47 \ud83d\udc26 \ud83c\udfbb \ud83c\udff7 (\ud83d\udc4f Pydantic).</li> <li>\ud83d\udd79 \ud83d\udee0\ufe0f \u23ee\ufe0f \ud83c\udf53 &amp; \ud83c\udf8f \ud83d\uddc3.</li> <li>\ud83d\udcda \u2795 \u2692 (\ud83d\udc4f \ud83d\udc83):<ul> <li>** *\ufe0f\u20e3 **</li> <li>\ud83d\udcf6 \u23e9 \ud83d\udcaf \u2693\ufe0f \ud83d\udd1b \ud83c\uddf8\ud83c\uddf2 &amp; <code>pytest</code></li> <li>\u269c</li> <li>\ud83c\udf6a \ud83c\udf89</li> <li>...&amp; \ud83c\udf16.</li> </ul> </li> </ul>"},{"location":"#_15","title":"\ud83c\udfad","text":"<p>\ud83d\udd2c \ud83c\uddf8\ud83c\uddf2 \ud83d\udcc7 \ud83c\udfa6 ReadyAPI \ud83c\ude38 \ud83c\udfc3\u200d\u2642 \ud83d\udd3d Uvicorn 1\ufe0f\u20e3 \u23e9 \ud83d\udc0d \ud83d\udee0\ufe0f \ud83d\udcaa, \ud83d\udd74 \ud83d\udd1b \ud83d\udc83 &amp; Uvicorn \ud83d\udc6b (\u2699\ufe0f \ud83d\udd18 ReadyAPI). (*)</p> <p>\ud83e\udd14 \ud83c\udf16 \ud83d\udd03 \u26ab\ufe0f, \ud83d\udc40 \ud83d\udcc4 \ud83d\udcc7.</p>"},{"location":"#_16","title":"\ud83d\udce6 \ud83d\udd17","text":"<p>\u2699\ufe0f Pydantic:</p> <ul> <li><code>email-validator</code> - \ud83d\udce7 \ud83d\udd2c.</li> </ul> <p>\u2699\ufe0f \ud83d\udc83:</p> <ul> <li><code>httpx</code> - \u2714 \ud83d\udea5 \ud83d\udc46 \ud83d\udc9a \u2699\ufe0f <code>TestClient</code>.</li> <li><code>jinja2</code> - \u2714 \ud83d\udea5 \ud83d\udc46 \ud83d\udc9a \u2699\ufe0f \ud83d\udd22 \ud83d\udcc4 \ud83d\udcf3.</li> <li><code>python-multipart</code> - \u2714 \ud83d\udea5 \ud83d\udc46 \ud83d\udc9a \ud83d\udc15\u200d\ud83e\uddba \ud83d\udce8 \"\u270d\", \u23ee\ufe0f <code>request.form()</code>.</li> <li><code>itsdangerous</code> - \u2714 <code>SessionMiddleware</code> \ud83d\udc15\u200d\ud83e\uddba.</li> <li><code>pyyaml</code> - \u2714 \ud83d\udc83 <code>SchemaGenerator</code> \ud83d\udc15\u200d\ud83e\uddba (\ud83d\udc46 \ud83c\udfb2 \ud83d\udeab \ud83d\udcaa \u26ab\ufe0f \u23ee\ufe0f ReadyAPI).</li> </ul> <p>\u2699\ufe0f ReadyAPI / \ud83d\udc83:</p> <ul> <li><code>uvicorn</code> - \ud83d\udcbd \ud83d\udc48 \ud83d\udcd0 &amp; \ud83c\udf66 \ud83d\udc46 \ud83c\ude38.</li> <li><code>orjson</code> - \u2714 \ud83d\udea5 \ud83d\udc46 \ud83d\udc9a \u2699\ufe0f <code>ORJSONResponse</code>.</li> <li><code>ujson</code> - \u2714 \ud83d\udea5 \ud83d\udc46 \ud83d\udc9a \u2699\ufe0f <code>UJSONResponse</code>.</li> </ul> <p>\ud83d\udc46 \ud83d\udcaa \u274e \ud83c\udf10 \ud83d\udc6b \u23ee\ufe0f <code>pip install \"readyapi[all]\"</code>.</p>"},{"location":"#_17","title":"\ud83d\udec2","text":"<p>\ud83d\udc49 \ud83c\udfd7 \u00ae \ud83d\udd3d \u2696 \ud83c\udde9\ud83c\uddea \ud83d\udec2.</p>"},{"location":"alternatives/","title":"\ud83c\udf9b, \ud83c\udf08 &amp; \ud83d\udd3a","text":"<p>\u26ab\ufe0f\u2754 \ud83d\ude2e ReadyAPI, \u2754 \u26ab\ufe0f \ud83d\udd2c \ud83c\udf8f \ud83c\udf9b &amp; \u26ab\ufe0f\u2754 \u26ab\ufe0f \ud83c\udded\ud83c\uddf2 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc6b.</p>"},{"location":"alternatives/#_2","title":"\ud83c\udfb6","text":"<p>ReadyAPI \ud83d\udeab\ud83d\udd1c \ud83d\udd00 \ud83d\udea5 \ud83d\udeab \u23ee\ufe0f \ud83d\udc77 \ud83c\udf8f.</p> <p>\ud83d\udce4 \u2714\ufe0f \ud83d\udcda \ud83e\uddf0 \u270d \u23ed \ud83d\udc48 \u2714\ufe0f \u2139 \ud83d\ude2e \ud83d\udeae \ud83c\udfd7.</p> <p>\ud83d\udc64 \u2714\ufe0f \u274e \ud83c\udfd7 \ud83c\udd95 \ud83d\udee0\ufe0f \ud83d\udcda 1\ufe0f\u20e32\ufe0f\u20e3\ud83d\uddd3\ufe0f. \ud83e\udd47 \ud83d\udc64 \ud83d\udd04 \u274e \ud83c\udf10 \u2692 \ud83d\udcd4 ReadyAPI \u2699\ufe0f \ud83d\udcda \ud83c\udf8f \ud83d\udee0\ufe0f, \ud83d\udd0c-\ud83d\udd0c, &amp; \ud83e\uddf0.</p> <p>\u270b\ufe0f \u261d, \ud83d\udce4 \ud83d\ude45\u200d\u2642 \ud83c\udf8f \ud83c\udf9b \ud83c\udf18 \ud83c\udfd7 \ud83d\udd73 \ud83d\udc48 \ud83d\ude9a \ud83c\udf10 \ud83d\udc6b \u2692, \u270a \ud83c\udfc6 \ud83d\udcad \u26aa\ufe0f\u27a1\ufe0f \u23ee\ufe0f \ud83e\uddf0, &amp; \ud83c\udf00 \ud83d\udc6b \ud83c\udfc6 \ud83c\udf0c \ud83d\udcaa, \u2699\ufe0f \ud83c\uddea\ud83c\uddf8 \u2692 \ud83d\udc48 \u2796\ud83d\udeab \ud83d\udcaa \u23ed (\ud83d\udc0d 3\ufe0f\u20e3.6\ufe0f\u20e3 \u2795 \ud83c\udd8e \ud83d\udd11).</p>"},{"location":"alternatives/#_3","title":"\u23ee\ufe0f \ud83e\uddf0","text":""},{"location":"alternatives/#_4","title":"\u2733","text":"<p>\u26ab\ufe0f \ud83c\udf05 \ud83c\udf1f \ud83d\udc0d \ud83d\udee0\ufe0f &amp; \ud83d\udece \ud83d\udd74. \u26ab\ufe0f \u2699\ufe0f \ud83c\udfd7 \u2699\ufe0f \ud83d\udc96 \ud83d\udc71\ud83d\udcd4.</p> <p>\u26ab\ufe0f \ud83d\udcf6 \ud83d\ude06 \ud83d\udd17 \u23ee\ufe0f \ud83d\udd17 \ud83d\udcbd (\ud83d\udc96 \u2733 \u2696\ufe0f \u2733),, \u2714\ufe0f \u2601 \ud83d\udcbd (\ud83d\udc96 \ud83d\uddc4, \u2733, \ud83d\udc78, \u2652\ufe0f) \ud83d\udc51 \ud83c\udfea \ud83d\ude92 \ud83d\udeab \ud83d\udcf6 \u23e9.</p> <p>\u26ab\ufe0f \u270d \ud83c\udfd7 \ud83d\udd78 \ud83d\udc69\u200d\ud83d\udcbb, \ud83d\udeab \u270d \ud83d\udd17 \u2699\ufe0f \ud83c\udfdb \ud83d\udd78 (\ud83d\udc96 \ud83d\ude25, Vue.js &amp; \ud83d\udcd0) \u2696\ufe0f \ud83c\udf8f \u2699\ufe0f (\ud83d\udc96 \u2601 \ud83d\udcf3) \ud83d\udd17 \u23ee\ufe0f \u26ab\ufe0f.</p>"},{"location":"alternatives/#_5","title":"\u2733 \ud83c\udf82 \ud83d\udee0\ufe0f","text":"<p>\u2733 \ud83c\udf82 \ud83d\udee0\ufe0f \u270d \ud83d\udddc \ud83e\uddf0 \ud83c\udfd7 \ud83d\udd78 \ud83d\udd17 \u2699\ufe0f \u2733 \ud83d\udd18, \ud83d\udcc9 \ud83d\udeae \ud83d\udee0\ufe0f \ud83d\udee0\ufe0f.</p> <p>\u26ab\ufe0f \u2699\ufe0f \ud83d\udcda \ud83c\udfe2 \u2705 \ud83e\udd8e, \ud83d\udfe5 \ud83d\udc52 &amp; \ud83c\udf9f.</p> <p>\u26ab\ufe0f \ud83d\udd50 \ud83e\udd47 \ud83d\uddbc \ud83c\udfe7 \ud83d\udee0\ufe0f \ud83e\uddfe, &amp; \ud83d\udc49 \ud83c\udfaf \ud83d\udd50 \ud83e\udd47 \ud83d\udcad \ud83d\udc48 \ud83d\ude2e \"\ud83d\udd0e\" ReadyAPI.</p> <p>Note</p> <p>\u2733 \ud83c\udf82 \ud83d\udee0\ufe0f \u270d \u2721 \ud83c\uddfa\ud83c\uddf8\ud83c\udfdb. \ud83c\udf8f \ud83d\udc7c \ud83d\udc83 &amp; Uvicorn, \ud83d\udd1b \u2754 ReadyAPI \u2693\ufe0f.</p> <p>\ud83d\ude2e ReadyAPI</p> <p>\u2714\ufe0f \ud83c\udfe7 \ud83d\udee0\ufe0f \ud83e\uddfe \ud83d\udd78 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd22.</p>"},{"location":"alternatives/#_6","title":"\ud83c\udffa","text":"<p>\ud83c\udffa \"\ud83d\udd78\", \u26ab\ufe0f \ud83d\udeab \ud83d\udd0c \ud83d\udcbd \ud83d\udee0\ufe0f \ud83d\udeab \ud83d\udcda \ud83d\udc5c \ud83d\udc48 \ud83d\udc5f \ud83d\udd22 \u2733.</p> <p>\ud83d\udc49 \ud83e\udd81 &amp; \ud83d\udcaa \u2714 \ud83d\udd28 \ud83d\udc5c \ud83d\udc96 \u2699\ufe0f \u2601 \ud83d\udcbd \ud83d\udc51 \ud83d\udcbd \ud83d\udcbe \u2699\ufe0f.</p> <p>\u26ab\ufe0f \ud83d\udcf6 \ud83d\ude45, \u26ab\ufe0f \ud83d\udcf6 \ud83c\udfcb\ufe0f \ud83d\udca1, \ud83d\udc50 \ud83e\uddfe \ud83e\udd1a \ud83d\ude41 \ud83d\udce1 \u261d.</p> <p>\u26ab\ufe0f \ud83d\udece \u2699\ufe0f \ud83c\udf8f \ud83c\ude38 \ud83d\udc48 \ud83d\udeab \ud83c\udfaf \ud83d\udcaa \ud83d\udcbd, \ud83d\udc69\u200d\ud83d\udcbb \ud83e\uddfe, \u2696\ufe0f \ud83d\ude46 \ud83d\udcda \u2692 \ud83d\udc48 \ud83d\udc5f \ud83c\udfe4-\ud83c\udfd7 \u2733. \ud83d\udc50 \ud83d\udcda \ud83d\udc6b \u2692 \ud83d\udcaa \ud83d\udeae \u23ee\ufe0f \ud83d\udd0c-\ud83d\udd0c.</p> <p>\ud83d\udc49 \u2696 \ud83c\udf55, &amp; \u2796 \"\ud83d\udd78\" \ud83d\udc48 \ud83d\udcaa \u2194 \ud83d\udcd4 \u26ab\ufe0f\u2754 \u26ab\ufe0f\u2754 \ud83d\udcaa \ud83d\udd11 \u2692 \ud83d\udc48 \ud83d\udc64 \ud83d\udc9a \ud83d\udea7.</p> <p>\ud83d\udc50 \ud83e\udd81 \ud83c\udffa, \u26ab\ufe0f \ud83d\ude11 \ud83d\udc96 \ud83d\udc4d \ud83c\udfcf \ud83c\udfd7 \ud83d\udd17. \u23ed \ud83d\udc5c \ud83d\udd0e \"\u2733 \ud83c\udf82 \ud83d\udee0\ufe0f\" \ud83c\udffa.</p> <p>\ud83d\ude2e ReadyAPI</p> <p>\u25fe-\ud83d\udee0\ufe0f. \u2692 \u26ab\ufe0f \u23e9 \ud83c\udf00 &amp; \ud83c\udfcf \ud83e\uddf0 &amp; \ud83c\udf55 \ud83d\udcaa.</p> <p>\u2714\ufe0f \ud83d\ude45 &amp; \u23e9 \u2699\ufe0f \ud83d\udd79 \u2699\ufe0f.</p>"},{"location":"alternatives/#_7","title":"\ud83d\udce8","text":"<p>ReadyAPI \ud83d\udeab \ud83e\udd19 \ud83c\udf9b \ud83d\udce8. \ud83d\udc6b \u2194 \ud83d\udcf6 \ud83c\udf8f.</p> <p>\u26ab\ufe0f \ud83d\udd1c \ud83e\udd19 \u26a0 \u2699\ufe0f \ud83d\udce8 \ud83d\udd18 ReadyAPI \ud83c\ude38.</p> <p>\u270b\ufe0f, ReadyAPI \ud83e\udd1a \ud83c\udf08 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udce8.</p> <p>\ud83d\udce8 \ud83d\uddc3 \ud83d\udd17 \u23ee\ufe0f \ud83d\udd17 (\ud83d\udc69\u200d\ud83d\udcbb), \u23ea ReadyAPI \ud83d\uddc3 \ud83c\udfd7 \ud83d\udd17 (\ud83d\udcbd).</p> <p>\ud83d\udc6b, \ud83c\udf16 \u2696\ufe0f \ud83c\udf18, \ud83d\udd04 \ud83d\udd1a, \ud83d\udd17 \ud83d\udd20 \ud83c\udf8f.</p> <p>\ud83d\udce8 \u2714\ufe0f \ud83d\udcf6 \ud83d\ude45 &amp; \ud83c\udfcb\ufe0f \ud83d\udd27, \u26ab\ufe0f \ud83d\udcf6 \u23e9 \u2699\ufe0f, \u23ee\ufe0f \ud83e\udd14 \ud83d\udd22. \u270b\ufe0f \ud83c\udf8f \ud83d\udd70, \u26ab\ufe0f \ud83d\udcf6 \ud83c\udfcb\ufe0f &amp; \ud83d\udec3.</p> <p>\ud83d\udc48 \u26ab\ufe0f\u2754, \ud83d\udcac \ud83d\udec2 \ud83d\udd78:</p> <p>&gt; \ud83d\udce8 1\ufe0f\u20e3 \ud83c\udfc6 \u23ec \ud83d\udc0d \ud83d\udce6 \ud83c\udf10 \ud83d\udd70</p> <p>\ud83c\udf0c \ud83d\udc46 \u2699\ufe0f \u26ab\ufe0f \ud83d\udcf6 \ud83d\ude45. \ud83d\uddbc, <code>GET</code> \ud83d\udce8, \ud83d\udc46 \ud83d\udd1c \u270d:</p> <pre><code>response = requests.get(\"http://example.com/some/url\")\n</code></pre> <p>ReadyAPI \ud83d\ude11 \ud83d\udee0\ufe0f \u27a1 \ud83d\udee0\ufe0f \ud83d\udcaa \ud83d\udc40 \ud83d\udc96:</p> <pre><code>@app.get(\"/some/url\")\ndef read_url():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>\ud83d\udc40 \ud83d\udd00 <code>requests.get(...)</code> &amp; <code>@app.get(...)</code>.</p> <p>\ud83d\ude2e ReadyAPI</p> <ul> <li>\u2714\ufe0f \ud83d\ude45 &amp; \ud83c\udfcb\ufe0f \ud83d\udee0\ufe0f.</li> <li>\u2699\ufe0f \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udc69\u200d\ud83d\udd2c \ud83d\udcdb (\ud83d\udee0\ufe0f) \ud83d\udd17, \ud83c\udfaf &amp; \ud83c\udfcb\ufe0f \ud83c\udf0c.</li> <li>\u2714\ufe0f \ud83e\udd14 \ud83d\udd22, \u270b\ufe0f \ud83c\udfcb\ufe0f \ud83d\udec3.</li> </ul>"},{"location":"alternatives/#_8","title":"\ud83e\udd81 / \ud83d\uddc4","text":"<p>\ud83d\udc51 \u2692 \ud83d\udc64 \ud83d\udc9a \u26aa\ufe0f\u27a1\ufe0f \u2733 \ud83c\udf82 \ud83d\udee0\ufe0f \ud83c\udfe7 \ud83d\udee0\ufe0f \ud83e\uddfe.</p> <p>\u2934\ufe0f \ud83d\udc64 \ud83d\udd0e \ud83d\udc48 \ud83d\udce4 \ud83d\udc29 \ud83d\udcc4 \ud83d\udd17, \u2699\ufe0f \ud83c\udfbb (\u2696\ufe0f \ud83d\udcc1, \u2194 \ud83c\udfbb) \ud83e\udd19 \ud83e\udd81.</p> <p>&amp; \ud83d\udce4 \ud83d\udd78 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd22 \ud83e\udd81 \ud83d\udee0\ufe0f \u23ea \u270d. , \ud83d\udc86\u200d\u2642 \ud83d\udcaa \ud83c\udfd7 \ud83e\udd81 \ud83e\uddfe \ud83d\udee0\ufe0f \ud83d\udd1c \u2714 \u2699\ufe0f \ud83d\udc49 \ud83d\udd78 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd22 \ud83d\udd01.</p> <p>\u261d, \ud83e\udd81 \ud83d\udc50 \ud83d\udcbe \ud83c\udfdb, \ud83d\udcc1 \ud83d\uddc4.</p> <p>\ud83d\udc48 \u26ab\ufe0f\u2754 \ud83d\udd50\u2754 \ud83d\udcac \ud83d\udd03 \u23ec 2\ufe0f\u20e3.0\ufe0f\u20e3 \u26ab\ufe0f \u26a0 \ud83d\udcac \"\ud83e\udd81\", &amp; \u23ec 3\ufe0f\u20e3 \u2795 \"\ud83d\uddc4\".</p> <p>\ud83d\ude2e ReadyAPI</p> <p>\ud83d\udee0\ufe0f &amp; \u2699\ufe0f \ud83d\udcc2 \ud83d\udc29 \ud83d\udee0\ufe0f \ud83d\udd27, \u21a9\ufe0f \ud83d\udec3 \ud83d\udd17.</p> <p>&amp; \ud83d\udee0\ufe0f \ud83d\udc29-\u2693\ufe0f \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd22 \ud83e\uddf0:</p> <ul> <li>\ud83e\udd81 \ud83c\udf9a</li> <li>\ud83d\udcc4</li> </ul> <p>\ud83d\udc6b 2\ufe0f\u20e3 \ud83d\udc50 \u2796 \ud83d\udcf6 \ud83c\udf1f &amp; \u2696, \u270b\ufe0f \ud83d\udd28 \u23e9 \ud83d\udd0e, \ud83d\udc46 \ud83d\udcaa \ud83d\udd0e \ud83d\udcaf \ud83c\udf16 \ud83c\udf9b \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd22 \ud83d\uddc4 (\ud83d\udc48 \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \u23ee\ufe0f ReadyAPI).</p>"},{"location":"alternatives/#_9","title":"\ud83c\udffa \ud83c\udf82 \ud83d\udee0\ufe0f","text":"<p>\ud83d\udce4 \ud83d\udcda \ud83c\udffa \ud83c\udf82 \ud83d\udee0\ufe0f, \u270b\ufe0f \u23ee\ufe0f \ud83d\udcb0 \ud83d\udd70 &amp; \ud83d\udc77 \ud83d\udd18 \ud83d\udd2c \ud83d\udc6b, \ud83d\udc64 \ud83d\udd0e \ud83d\udc48 \ud83d\udcda \ud83d\ude1e \u2696\ufe0f \ud83d\udeab, \u23ee\ufe0f \ud83d\udcda \ud83e\uddcd \u2754 \ud83d\udc48 \u2692 \ud83d\udc6b \ud83d\ude43.</p>"},{"location":"alternatives/#_10","title":"\ud83c\udf6d","text":"<p>1\ufe0f\u20e3 \ud83d\udc51 \u2692 \ud83d\udcaa \ud83d\udee0\ufe0f \u2699\ufe0f \ud83d\udcca \"\ud83d\udee0\ufe0f\" \u2754 \u270a \ud83d\udcca \u26aa\ufe0f\u27a1\ufe0f \ud83d\udcdf (\ud83d\udc0d) &amp; \ud83c\udfed \u26ab\ufe0f \ud83d\udd18 \ud83d\udd73 \ud83d\udc48 \ud83d\udcaa \ud83d\udce8 \ud83d\udd18 \ud83d\udd78. \ud83d\uddbc, \ud83c\udfed \ud83c\udf9a \u2697 \ud83d\udcca \u26aa\ufe0f\u27a1\ufe0f \ud83d\udcbd \ud83d\udd18 \ud83c\udfbb \ud83c\udf9a. \ud83c\udfed <code>datetime</code> \ud83c\udf9a \ud83d\udd18 \ud83c\udfbb, \u2652\ufe0f.</p> <p>\u27951\ufe0f\u20e3 \ud83e\udd8f \u2692 \ud83d\udc9a \ud83d\udd17 \ud83d\udcbd \ud83d\udd2c, \u2692 \ud83d\udcad \ud83d\udc48 \ud83d\udcbd \u2611, \ud83e\udd1d \ud83c\udfaf \ud83d\udd22. \ud83d\uddbc, \ud83d\udc48 \ud83c\udfd1 <code>int</code>, &amp; \ud83d\udeab \ud83c\udfb2 \ud83c\udfbb. \ud83d\udc49 \u2734\ufe0f \u26a0 \ud83d\udce8 \ud83d\udcbd.</p> <p>\ud83c\udf75 \ud83d\udcbd \ud83d\udd2c \u2699\ufe0f, \ud83d\udc46 \ud83d\udd1c \u2714\ufe0f \ud83c\udf10 \u2705 \u270b, \ud83d\udcdf.</p> <p>\ud83d\udc6b \u2692 \u26ab\ufe0f\u2754 \ud83c\udf6d \ud83c\udfd7 \ud83d\ude9a. \u26ab\ufe0f \ud83d\udc51 \ud83d\uddc3, &amp; \ud83d\udc64 \u2714\ufe0f \u2699\ufe0f \u26ab\ufe0f \ud83d\udcda \u23ed.</p> <p>\u270b\ufe0f \u26ab\ufe0f \u270d \u23ed \ud83d\udce4 \ud83d\udd00 \ud83d\udc0d \ud83c\udd8e \ud83d\udd11. , \ud83d\udd2c \ud83d\udd20 \ud83d\udd17 \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83c\udfaf \ud83c\udde8\ud83c\uddfb &amp; \ud83c\udf93 \ud83d\ude9a \ud83c\udf6d.</p> <p>\ud83d\ude2e ReadyAPI</p> <p>\u2699\ufe0f \ud83d\udcdf \ud83d\udd2c \"\ud83d\udd17\" \ud83d\udc48 \ud83d\ude9a \ud83d\udcbd \ud83c\udd8e &amp; \ud83d\udd2c, \ud83d\udd01.</p>"},{"location":"alternatives/#webarg","title":"Webarg","text":"<p>\u27951\ufe0f\u20e3 \ud83e\udd8f \u2692 \u2714 \ud83d\udd17 \u270d \ud83d\udcca \u26aa\ufe0f\u27a1\ufe0f \ud83d\udce8 \ud83d\udce8.</p> <p>Webarg \ud83e\uddf0 \ud83d\udc48 \u2692 \ud83d\ude9a \ud83d\udc48 \ud83d\udd1b \ud83d\udd1d \ud83d\udcda \ud83d\udee0\ufe0f, \ud83d\udd0c \ud83c\udffa.</p> <p>\u26ab\ufe0f \u2699\ufe0f \ud83c\udf6d \ud83d\udd18 \ud83d\udcbd \ud83d\udd2c. &amp; \u26ab\ufe0f \u270d \ud83c\udf8f \ud83d\udc69\u200d\ud83d\udcbb.</p> <p>\u26ab\ufe0f \ud83d\udc51 \ud83e\uddf0 &amp; \ud83d\udc64 \u2714\ufe0f \u2699\ufe0f \u26ab\ufe0f \ud83d\udcda \ud83d\udc81\u200d\u2642\ufe0f, \u23ed \u2714\ufe0f ReadyAPI.</p> <p>Info</p> <p>Webarg \u270d \ud83c\udf8f \ud83c\udf6d \ud83d\udc69\u200d\ud83d\udcbb.</p> <p>\ud83d\ude2e ReadyAPI</p> <p>\u2714\ufe0f \ud83c\udfe7 \ud83d\udd2c \ud83d\udce8 \ud83d\udce8 \ud83d\udcbd.</p>"},{"location":"alternatives/#apispec","title":"APISpec","text":"<p>\ud83c\udf6d &amp; Webarg \ud83d\ude9a \ud83d\udd2c, \u270d &amp; \ud83d\udee0\ufe0f \ud83d\udd0c-\ud83d\udd0c.</p> <p>\u270b\ufe0f \ud83e\uddfe \u274c. \u2934\ufe0f APISpec \u270d.</p> <p>\u26ab\ufe0f \ud83d\udd0c-\ud83d\udcda \ud83d\udee0\ufe0f (&amp; \ud83d\udce4 \ud83d\udd0c-\ud83d\udc83 \ud83d\udc81\u200d\u2642\ufe0f).</p> <p>\ud83c\udf0c \u26ab\ufe0f \ud83d\udc77 \ud83d\udc48 \ud83d\udc46 \u270d \ud83d\udd11 \ud83d\udd17 \u2699\ufe0f \ud83d\udcc1 \ud83d\udcc1 \ud83d\udd18 #\ufe0f\u20e3 \ud83d\udd20 \ud83d\udd22 \ud83d\ude9a \ud83d\udee3.</p> <p>&amp; \u26ab\ufe0f \ud83c\udfd7 \ud83d\uddc4 \ud83d\udd17.</p> <p>\ud83d\udc48 \u2754 \u26ab\ufe0f \ud83d\udc77 \ud83c\udffa, \ud83d\udc83, \ud83c\udd98, \u2652\ufe0f.</p> <p>\u270b\ufe0f \u2934\ufe0f, \ud83d\udc65 \u2714\ufe0f \ud83d\udd04 \u26a0 \u2714\ufe0f \u25fe-\u2755, \ud83d\udd18 \ud83d\udc0d \ud83c\udfbb (\ud83e\udd8f \ud83d\udcc1).</p> <p>\ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udcaa \ud83d\udeab \u2139 \ud83c\udf05 \u23ee\ufe0f \ud83d\udc48. &amp; \ud83d\udea5 \ud83d\udc65 \ud83d\udd00 \ud83d\udd22 \u2696\ufe0f \ud83c\udf6d \ud83d\udd17 &amp; \ud83d\udcad \ud83d\udd00 \ud83d\udc48 \ud83d\udcc1#\ufe0f\u20e3, \ud83c\udfd7 \ud83d\udd17 \ud83d\udd1c \u274c.</p> <p>Info</p> <p>APISpec \u270d \ud83c\udf8f \ud83c\udf6d \ud83d\udc69\u200d\ud83d\udcbb.</p> <p>\ud83d\ude2e ReadyAPI</p> <p>\ud83d\udc15\u200d\ud83e\uddba \ud83d\udcc2 \ud83d\udc29 \ud83d\udee0\ufe0f, \ud83d\uddc4.</p>"},{"location":"alternatives/#-apispec","title":"\ud83c\udffa-Apispec","text":"<p>\u26ab\ufe0f \ud83c\udffa \ud83d\udd0c -, \ud83d\udc48 \ud83d\udc54 \ud83d\udc6f\u200d\u2642\ufe0f Webarg, \ud83c\udf6d &amp; APISpec.</p> <p>\u26ab\ufe0f \u2699\ufe0f \u2139 \u26aa\ufe0f\u27a1\ufe0f Webarg &amp; \ud83c\udf6d \ud83d\udd01 \ud83c\udfd7 \ud83d\uddc4 \ud83d\udd17, \u2699\ufe0f APISpec.</p> <p>\u26ab\ufe0f \ud83d\udc51 \ud83e\uddf0, \ud83d\udcf6 \ud83d\udd3d-\ud83d\udcc8. \u26ab\ufe0f \ud83d\udd1c \ud83c\udf0c \ud83c\udf16 \ud83c\udf1f \ud83c\udf18 \ud83d\udcda \ud83c\udffa \ud83d\udd0c-\ud83d\udd0c \ud83d\udc45 \ud83d\udce4. \u26ab\ufe0f \ud83d\udcaa \u21a9\ufe0f \ud83d\udeae \ud83e\uddfe \u2796 \ud83d\udc81\u200d\u2642\ufe0f \ud83e\ude72 &amp; \ud83d\udcdd.</p> <p>\ud83d\udc49 \u274e \u2714\ufe0f \u270d \ud83d\udcc1 (\u27951\ufe0f\u20e3 \u2755) \ud83d\udd18 \ud83d\udc0d \u270d.</p> <p>\ud83d\udc49 \ud83c\udf00 \ud83c\udffa, \ud83c\udffa-Apispec \u23ee\ufe0f \ud83c\udf6d &amp; Webarg \ud83d\udc47 \ud83d\udc95 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udcda \u23ed \ud83c\udfd7 ReadyAPI.</p> <p>\u2699\ufe0f \u26ab\ufe0f \u2198\ufe0f \ud83c\udfd7 \ud83d\udcda \ud83c\udffa \ud83c\udf15-\ud83d\udcda \ud83d\ude82. \ud83d\udc6b \ud83d\udc51 \ud83d\udcda \ud83d\udc64 (&amp; \ud83d\udcda \ud83d\udd22 \ud83c\udfc9) \u2714\ufe0f \u2699\ufe0f \ud83c\udd99 \ud83d\udd1c:</p> <ul> <li>https://github.com/khulnasoft/full-stack</li> <li>https://github.com/khulnasoft/full-stack-flask-couchbase</li> <li>https://github.com/khulnasoft/full-stack-flask-couchdb</li> </ul> <p>&amp; \ud83d\udc6b \ud83c\udf8f \ud83c\udf15-\ud83d\udcda \ud83d\ude82 \ud83e\udde2 ReadyAPI \ud83c\udfd7 \ud83d\ude82.</p> <p>Info</p> <p>\ud83c\udffa-Apispec \u270d \ud83c\udf8f \ud83c\udf6d \ud83d\udc69\u200d\ud83d\udcbb.</p> <p>\ud83d\ude2e ReadyAPI</p> <p>\ud83c\udfd7 \ud83d\uddc4 \ud83d\udd17 \ud83d\udd01, \u26aa\ufe0f\u27a1\ufe0f \ud83c\udf8f \ud83d\udcdf \ud83d\udc48 \ud83d\udd2c \ud83d\udee0\ufe0f &amp; \ud83d\udd2c.</p>"},{"location":"alternatives/#nestjs","title":"NestJS (&amp; \ud83d\udcd0)","text":"<p>\ud83d\udc49 \u2796\ud83d\udeab \ud83d\udeab \ud83d\udc0d, NestJS \ud83d\udd78 (\ud83d\udcd5) \u2733 \ud83d\udee0\ufe0f \ud83d\ude2e \ud83d\udcd0.</p> <p>\u26ab\ufe0f \ud83c\udfc6 \ud83d\udd73 \ud83d\ude41 \ud83c\udf8f \u26ab\ufe0f\u2754 \ud83d\udcaa \ud83d\udd28 \u23ee\ufe0f \ud83c\udffa-Apispec.</p> <p>\u26ab\ufe0f \u2714\ufe0f \ud83d\udee0\ufe0f \ud83d\udd17 \ud83d\udc89 \u2699\ufe0f, \ud83d\ude2e \ud83d\udcd0 2\ufe0f\u20e3. \u26ab\ufe0f \ud83d\ude9a \ud83c\udfe4-\u00ae \"\ud83d\udc89\" (\ud83d\udc96 \ud83c\udf10 \ud83c\udf8f \ud83d\udd17 \ud83d\udc89 \u2699\ufe0f \ud83d\udc64 \ud83d\udcad),, \u26ab\ufe0f \ud83d\udeae \ud83c\udfad &amp; \ud83d\udcdf \ud83d\udd01.</p> <p>\ud83d\udd22 \ud83d\udd2c \u23ee\ufe0f \ud83d\udcd5 \ud83c\udd8e (\ud83c\udf8f \ud83d\udc0d \ud83c\udd8e \ud83d\udd11), \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udc15\u200d\ud83e\uddba \ud83d\udc4d.</p> <p>\u270b\ufe0f \ud83d\udcd5 \ud83d\udcca \ud83d\udeab \ud83d\udee1 \u23ee\ufe0f \ud83d\udcf9 \ud83d\udd78, \u26ab\ufe0f \ud83d\udeab\ud83d\udd1c \u2693\ufe0f \ud83d\udd1b \ud83c\udd8e \ud83d\udd2c \ud83d\udd2c, \ud83d\udee0\ufe0f &amp; \ud83e\uddfe \ud83c\udf8f \ud83d\udd70. \u21a9\ufe0f \ud83d\udc49 &amp; \ud83d\udd27 \ud83d\udeab, \ud83e\udd1a \ud83d\udd2c, \ud83d\udee0\ufe0f &amp; \ud83c\udfe7 \ud83d\udd17 \u26a1, \u26ab\ufe0f \ud83d\udcaa \ud83d\udeae \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udcda \ud83e\udd49. , \u26ab\ufe0f \u25b6\ufe0f\ufe0f \ud83d\udd01.</p> <p>\u26ab\ufe0f \ud83d\udcaa \ud83d\udeab \ud83c\udf75 \ud83d\udd01 \ud83c\udff7 \ud83d\udcf6 \ud83d\udc4d. , \ud83d\udea5 \ud83c\udfbb \ud83d\udcaa \ud83d\udce8 \ud83c\udfbb \ud83c\udf9a \ud83d\udc48 \u2714\ufe0f \ud83d\udd18 \ud83c\udfd1 \ud83d\udc48 \ud83d\udd04 \ud83d\udc26 \ud83c\udfbb \ud83c\udf9a, \u26ab\ufe0f \ud83d\udeab\ud83d\udd1c \u2611 \ud83d\udcc4 &amp; \u2714.</p> <p>\ud83d\ude2e ReadyAPI</p> <p>\u2699\ufe0f \ud83d\udc0d \ud83c\udd8e \u2714\ufe0f \ud83d\udc51 \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udc15\u200d\ud83e\uddba.</p> <p>\u2714\ufe0f \ud83c\udfcb\ufe0f \ud83d\udd17 \ud83d\udc89 \u2699\ufe0f. \ud83d\udd0e \ud83c\udf0c \ud83d\udcc9 \ud83d\udcdf \ud83d\udd01.</p>"},{"location":"alternatives/#_11","title":"\ud83e\udd23","text":"<p>\u26ab\ufe0f \ud83d\udd50 \ud83e\udd47 \ud83d\udcf6 \u23e9 \ud83d\udc0d \ud83d\udee0\ufe0f \u2693\ufe0f \ud83d\udd1b <code>asyncio</code>. \u26ab\ufe0f \u2692 \ud83d\udcf6 \ud83c\udf8f \ud83c\udffa.</p> <p>\ud83d\udce1 \u2139</p> <p>\u26ab\ufe0f \u2699\ufe0f <code>uvloop</code> \u21a9\ufe0f \ud83d\udd22 \ud83d\udc0d <code>asyncio</code> \u27b0. \ud83d\udc48 \u26ab\ufe0f\u2754 \u2692 \u26ab\ufe0f \u23e9.</p> <p>\u26ab\ufe0f \ud83c\udfaf \ud83d\ude2e Uvicorn &amp; \ud83d\udc83, \ud83d\udc48 \u23f3 \u23e9 \ud83c\udf18 \ud83e\udd23 \ud83d\udcc2 \ud83d\udcc7.</p> <p>\ud83d\ude2e ReadyAPI</p> <p>\ud83d\udd0e \ud83c\udf0c \u2714\ufe0f \ud83d\ude1c \ud83c\udfad.</p> <p>\ud83d\udc48 \u26ab\ufe0f\u2754 ReadyAPI \u2693\ufe0f \ud83d\udd1b \ud83d\udc83, \u26ab\ufe0f \u23e9 \ud83d\udee0\ufe0f \ud83d\udcaa (\ud83d\udcaf \ud83e\udd49-\ud83e\udd73 \ud83d\udcc7).</p>"},{"location":"alternatives/#_12","title":"\ud83e\udd85","text":"<p>\ud83e\udd85 \u27951\ufe0f\u20e3 \u2195 \ud83c\udfad \ud83d\udc0d \ud83d\udee0\ufe0f, \u26ab\ufe0f \ud83d\udd27 \u2b50, &amp; \ud83d\udc77 \ud83c\udfdb \ud83c\udf8f \ud83d\udee0\ufe0f \ud83d\udc96 \ud83e\udd17.</p> <p>\u26ab\ufe0f \ud83c\udfd7 \u2714\ufe0f \ud83d\udd22 \ud83d\udc48 \ud83d\udce8 2\ufe0f\u20e3 \ud83d\udd22, 1\ufe0f\u20e3 \"\ud83d\udce8\" &amp; 1\ufe0f\u20e3 \"\ud83d\udce8\". \u2934\ufe0f \ud83d\udc46 \"\u270d\" \ud83c\udf55 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udce8, &amp; \"\u270d\" \ud83c\udf55 \ud83d\udce8. \u21a9\ufe0f \ud83d\udc49 \ud83d\udd27, \u26ab\ufe0f \ud83d\udeab \ud83d\udcaa \ud83d\udce3 \ud83d\udce8 \ud83d\udd22 &amp; \ud83d\udcaa \u23ee\ufe0f \ud83d\udc29 \ud83d\udc0d \ud83c\udd8e \ud83d\udd11 \ud83d\udd22 \ud83d\udd22.</p> <p>, \ud83d\udcbd \ud83d\udd2c, \ud83d\udee0\ufe0f, &amp; \ud83e\uddfe, \u2714\ufe0f \u231b \ud83d\udcdf, \ud83d\udeab \ud83d\udd01. \u2696\ufe0f \ud83d\udc6b \u2714\ufe0f \ud83d\udee0\ufe0f \ud83d\udee0\ufe0f \ud83d\udd1b \ud83d\udd1d \ud83e\udd85, \ud83d\udc96 \ud83e\udd17. \ud83d\udc49 \ud83c\udf8f \ud83d\udd3a \ud83d\udd28 \ud83c\udf8f \ud83d\udee0\ufe0f \ud83d\udc48 \ud83d\ude2e \ud83e\udd85 \ud83d\udd27, \u2714\ufe0f 1\ufe0f\u20e3 \ud83d\udce8 \ud83c\udf9a &amp; 1\ufe0f\u20e3 \ud83d\udce8 \ud83c\udf9a \ud83d\udd22.</p> <p>\ud83d\ude2e ReadyAPI</p> <p>\ud83d\udd0e \ud83c\udf0c \ud83e\udd1a \ud83d\udc51 \ud83c\udfad.</p> <p>\u2934\ufe0f \u23ee\ufe0f \ud83e\udd17 (\ud83e\udd17 \u2693\ufe0f \ud83d\udd1b \ud83e\udd85) \ud83d\ude2e ReadyAPI \ud83d\udce3 <code>response</code> \ud83d\udd22 \ud83d\udd22.</p> <p>\ud83d\udc50 ReadyAPI \u26ab\ufe0f \ud83d\udce6, &amp; \u2699\ufe0f \u2734\ufe0f \u2692 \ud83c\udf9a, \ud83c\udf6a, &amp; \ud83c\udf9b \ud83d\udc54 \ud83d\udcdf.</p>"},{"location":"alternatives/#_13","title":"\u2668","text":"<p>\ud83d\udc64 \ud83d\udd0e \u2668 \ud83e\udd47 \u25b6\ufe0f \ud83c\udfd7 ReadyAPI. &amp; \u26ab\ufe0f \u2714\ufe0f \ud83c\udf8f \ud83d\udcad:</p> <ul> <li>\u2693\ufe0f \ud83d\udd1b \ud83d\udc0d \ud83c\udd8e \ud83d\udd11.</li> <li>\ud83d\udd2c &amp; \ud83e\uddfe \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc6b \ud83c\udd8e.</li> <li>\ud83d\udd17 \ud83d\udc89 \u2699\ufe0f.</li> </ul> <p>\u26ab\ufe0f \ud83d\udeab \u2699\ufe0f \ud83d\udcbd \ud83d\udd2c, \ud83d\udee0\ufe0f &amp; \ud83e\uddfe \ud83e\udd49-\ud83e\udd73 \ud83d\uddc3 \ud83d\udc96 Pydantic, \u26ab\ufe0f \u2714\ufe0f \ud83d\udeae \ud83d\udc4d. , \ud83d\udc6b \ud83d\udcbd \ud83c\udd8e \ud83d\udd11 \ud83d\udd1c \ud83d\udeab \u267b \ud83d\udcaa.</p> <p>\u26ab\ufe0f \ud83d\ude9a \ud83d\udc25 \ud83c\udf56 \ud83c\udf05 \ud83d\udd01 \ud83d\udcf3. &amp; \u26ab\ufe0f \u2693\ufe0f \ud83d\udd1b \ud83c\udde8\ud83c\uddfb (\u21a9\ufe0f \ud83d\udd2b), \u26ab\ufe0f \ud83d\udeab \ud83d\udd27 \u270a \ud83d\udcc8 \u2195-\ud83c\udfad \ud83d\ude9a \ud83e\uddf0 \ud83d\udc96 Uvicorn, \ud83d\udc83 &amp; \ud83e\udd23.</p> <p>\ud83d\udd17 \ud83d\udc89 \u2699\ufe0f \ud83d\ude9a \ud83c\udfe4-\u00ae \ud83d\udd17 &amp; \ud83d\udd17 \u274e \ud83e\udde2 \ud83d\udd1b \ud83d\udce3 \ud83c\udd8e. , \u26ab\ufe0f \ud83d\udeab \ud83d\udcaa \ud83d\udce3 \ud83c\udf05 \ud83c\udf18 1\ufe0f\u20e3 \"\ud83e\uddb2\" \ud83d\udc48 \ud83d\ude9a \ud83c\udfaf \ud83c\udd8e.</p> <p>\ud83d\udee3 \ud83d\udce3 \ud83d\udc41 \ud83e\udd49, \u2699\ufe0f \ud83d\udd22 \ud83d\udce3 \ud83c\udf8f \ud83e\udd49 (\u21a9\ufe0f \u2699\ufe0f \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udc48 \ud83d\udcaa \ud83e\udd49 \u25b6\ufe0f\ufe0f \ud83d\udd1b \ud83d\udd1d \ud83d\udd22 \ud83d\udc48 \ud83c\udf75 \ud83d\udd17). \ud83d\udc49 \ud83d\udd10 \u2754 \u2733 \ud83d\udd28 \u26ab\ufe0f \ud83c\udf18 \u2754 \ud83c\udffa (&amp; \ud83d\udc83) \ud83d\udd28 \u26ab\ufe0f. \u26ab\ufe0f \ud83c\udf8f \ud83d\udcdf \ud83d\udc5c \ud83d\udc48 \ud83d\udcf6 \ud83d\ude06 \ud83d\udd17.</p> <p>\ud83d\ude2e ReadyAPI</p> <p>\ud83d\udd2c \u2795 \ud83d\udd2c \ud83d\udcbd \ud83c\udd8e \u2699\ufe0f \"\ud83d\udd22\" \ud83d\udcb2 \ud83c\udff7 \ud83d\udd22. \ud83d\udc49 \ud83d\udcc9 \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udc15\u200d\ud83e\uddba, &amp; \u26ab\ufe0f \ud83d\udeab \ud83d\udcaa Pydantic \u23ed.</p> <p>\ud83d\udc49 \ud83e\udd19 \ud83d\ude2e \ud83d\udee0\ufe0f \ud83c\udf55 Pydantic, \ud83d\udc15\u200d\ud83e\uddba \ud83c\udf8f \ud83d\udd2c \ud83d\udcc4 \ud83d\udc57 (\ud83c\udf10 \ud83d\udc49 \ud83d\udee0\ufe0f \ud83d\udd1c \u23ea \ud83d\udcaa Pydantic).</p>"},{"location":"alternatives/#_14","title":"\ud83e\udd17","text":"<p>\ud83e\udd17 \ud83d\udd50 \ud83e\udd47 \ud83d\udee0\ufe0f \ud83d\udee0\ufe0f \ud83d\udcc4 \ud83d\udee0\ufe0f \ud83d\udd22 \ud83c\udd8e \u2699\ufe0f \ud83d\udc0d \ud83c\udd8e \ud83d\udd11. \ud83d\udc49 \ud83d\udc51 \ud83d\udcad \ud83d\udc48 \ud83d\ude2e \ud83c\udf8f \ud83e\uddf0 \ud83c\udf8f.</p> <p>\u26ab\ufe0f \u2699\ufe0f \ud83d\udec3 \ud83c\udd8e \ud83d\udeae \ud83d\udcc4 \u21a9\ufe0f \ud83d\udc29 \ud83d\udc0d \ud83c\udd8e, \u270b\ufe0f \u26ab\ufe0f \ud83e\udd8f \ud83d\udd01 \u23e9.</p> <p>\u26ab\ufe0f \ud83d\udd50 \ud83e\udd47 \ud83d\udee0\ufe0f \ud83c\udfd7 \ud83d\udec3 \ud83d\udd17 \ud83d\udce3 \ud83c\udf82 \ud83d\udee0\ufe0f \ud83c\udfbb.</p> <p>\u26ab\ufe0f \ud83d\udeab \u2693\ufe0f \ud83d\udd1b \ud83d\udc29 \ud83d\udc96 \ud83d\uddc4 &amp; \ud83c\udfbb \ud83d\udd17. \u26ab\ufe0f \ud83d\udeab\ud83d\udd1c \ud83c\udfaf \ud83d\udee0\ufe0f \u26ab\ufe0f \u23ee\ufe0f \ud83c\udf8f \ud83e\uddf0, \ud83d\udc96 \ud83e\udd81 \ud83c\udf9a. \u270b\ufe0f \ud83d\udd04, \u26ab\ufe0f \ud83d\udcf6 \ud83d\udca1 \ud83d\udcad.</p> <p>\u26ab\ufe0f \u2714\ufe0f \ud83d\ude0c, \u2b50 \u2692: \u2699\ufe0f \ud83c\udf8f \ud83d\udee0\ufe0f, \u26ab\ufe0f \ud83d\udcaa \u270d \ud83d\udd17 &amp; \ud83c\uddf3\ud83c\udde8.</p> <p>\u26ab\ufe0f \u2693\ufe0f \ud83d\udd1b \u23ee\ufe0f \ud83d\udc29 \ud83d\udd01 \ud83d\udc0d \ud83d\udd78 \ud83d\udee0\ufe0f (\ud83c\udde8\ud83c\uddfb), \u26ab\ufe0f \ud83d\udcaa \ud83d\udeab \ud83c\udf75 *\ufe0f\u20e3 &amp; \ud83c\udf8f \ud83d\udc5c, \ud83d\udc50 \u26ab\ufe0f \u2714\ufe0f \u2195 \ud83c\udfad \ud83d\udc81\u200d\u2642\ufe0f.</p> <p>Info</p> <p>\ud83e\udd17 \u270d \u2721 \ud83d\uddc4, \ud83c\udf8f \ud83d\udc7c <code>isort</code>, \ud83d\udc51 \ud83e\uddf0 \ud83d\udd01 \ud83d\ude07 \ud83d\uddc4 \ud83d\udc0d \ud83d\udcc1.</p> <p>\ud83d\udcad \ud83d\ude2e ReadyAPI</p> <p>\ud83e\udd17 \ud83d\ude2e \ud83c\udf55 APIStar, &amp; 1\ufe0f\u20e3 \ud83e\uddf0 \ud83d\udc64 \ud83d\udd0e \ud83c\udfc6 \ud83d\udc4d, \ud83c\udf1f APIStar.</p> <p>\ud83e\udd17 \u2139 \ud83d\ude0d ReadyAPI \u2699\ufe0f \ud83d\udc0d \ud83c\udd8e \ud83d\udd11 \ud83d\udce3 \ud83d\udd22, &amp; \ud83c\udfd7 \ud83d\udd17 \u2696 \ud83d\udee0\ufe0f \ud83d\udd01.</p> <p>\ud83e\udd17 \ud83d\ude2e ReadyAPI \ud83d\udce3 <code>response</code> \ud83d\udd22 \ud83d\udd22 \u2692 \ud83c\udf9a &amp; \ud83c\udf6a.</p>"},{"location":"alternatives/#apistar-05","title":"APIStar (&lt;= 0\ufe0f\u20e3.5\ufe0f\u20e3)","text":"<p>\u25b6\ufe0f\ufe0f \u23ed \ud83e\udd14 \ud83c\udfd7 ReadyAPI \ud83d\udc64 \ud83d\udd0e APIStar \ud83d\udcbd. \u26ab\ufe0f \u2714\ufe0f \ud83c\udf16 \ud83c\udf10 \ud83d\udc64 \ud83d\udc40 &amp; \u2714\ufe0f \ud83d\udc51 \ud83d\udd27.</p> <p>\u26ab\ufe0f \ud83d\udd50 \ud83e\udd47 \ud83d\udee0\ufe0f \ud83d\udee0\ufe0f \u2699\ufe0f \ud83d\udc0d \ud83c\udd8e \ud83d\udd11 \ud83d\udce3 \ud83d\udd22 &amp; \ud83d\udce8 \ud83d\udc48 \ud83d\udc64 \u23f1 \ud83d\udc40 (\u23ed NestJS &amp; \u2668). \ud83d\udc64 \ud83d\udd0e \u26ab\ufe0f \ud83c\udf05 \u2696\ufe0f \ud83c\udf18 \ud83c\udf8f \ud83d\udd70 \ud83e\udd17. \u270b\ufe0f APIStar \u2699\ufe0f \ud83d\uddc4 \ud83d\udc29.</p> <p>\u26ab\ufe0f \u2714\ufe0f \ud83c\udfe7 \ud83d\udcbd \ud83d\udd2c, \ud83d\udcbd \ud83d\udee0\ufe0f &amp; \ud83d\uddc4 \ud83d\udd17 \u26a1 \u2693\ufe0f \ud83d\udd1b \ud83c\udf8f \ud83c\udd8e \ud83d\udd11 \ud83d\udcda \ud83e\udd49.</p> <p>\ud83d\udcaa \ud83d\udd17 \ud83d\udd11 \ud83d\udeab \u2699\ufe0f \ud83c\udf8f \ud83d\udc0d \ud83c\udd8e \ud83d\udd11 \ud83d\udc96 Pydantic, \u26ab\ufe0f \ud83c\udf56 \ud83c\udf05 \ud83c\udf8f \ud83c\udf6d,, \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udc15\u200d\ud83e\uddba \ud83d\udeab\ud83d\udd1c \ud83d\udc4d, \u270b\ufe0f, APIStar \ud83c\udfc6 \ud83d\udcaa \ud83c\udf9b.</p> <p>\u26ab\ufe0f \u2714\ufe0f \ud83c\udfc6 \ud83c\udfad \ud83d\udcc7 \ud83d\udd70 (\ud83d\udd74 \ud83d\udca5 \ud83d\udc83).</p> <p>\ud83e\udd47, \u26ab\ufe0f \ud83d\udeab \u2714\ufe0f \ud83c\udfe7 \ud83d\udee0\ufe0f \ud83e\uddfe \ud83d\udd78 \ud83c\udf9a, \u270b\ufe0f \ud83d\udc64 \ud83d\udcad \ud83d\udc64 \ud83d\udcaa \ud83d\udeae \ud83e\udd81 \ud83c\udf9a \u26ab\ufe0f.</p> <p>\u26ab\ufe0f \u2714\ufe0f \ud83d\udd17 \ud83d\udc89 \u2699\ufe0f. \u26ab\ufe0f \u2714 \ud83c\udfe4-\u00ae \ud83e\uddb2, \ud83c\udf8f \ud83e\uddf0 \ud83d\udd2c \ud83d\udd1b. \u270b\ufe0f, \u26ab\ufe0f \ud83d\udc51 \u2692.</p> <p>\ud83d\udc64 \ud83d\ude45 \ud83d\udcaa \u2699\ufe0f \u26ab\ufe0f \ud83c\udf15 \ud83c\udfd7, \u26ab\ufe0f \ud83d\udeab \u2714\ufe0f \ud83d\udc82\u200d\u2642 \ud83d\udee0\ufe0f,, \ud83d\udc64 \ud83d\udeab \ud83d\udeab \u274e \ud83c\udf10 \u2692 \ud83d\udc64 \u2714\ufe0f \u23ee\ufe0f \ud83c\udf15-\ud83d\udcda \ud83d\ude82 \u2693\ufe0f \ud83d\udd1b \ud83c\udffa-Apispec. \ud83d\udc64 \u2714\ufe0f \ud83d\udc47 \ud83d\udcc8 \ud83c\udfd7 \u270d \ud83d\udeb2 \ud83d\udce8 \u274e \ud83d\udc48 \ud83d\udee0\ufe0f.</p> <p>\u270b\ufe0f \u2934\ufe0f, \ud83c\udfd7 \ud83c\udfaf \ud83d\udd00.</p> <p>\u26ab\ufe0f \ud83d\ude45\u200d\u2642 \ud83d\udccf \ud83d\udee0\ufe0f \ud83d\udd78 \ud83d\udee0\ufe0f, \ud83d\udc7c \ud83d\udcaa \ud83c\udfaf \ud83d\udd1b \ud83d\udc83.</p> <p>\ud83d\udd1c APIStar \u2692 \ud83e\uddf0 \u2714 \ud83d\uddc4 \ud83d\udd27, \ud83d\udeab \ud83d\udd78 \ud83d\udee0\ufe0f.</p> <p>Info</p> <p>APIStar \u270d \u2721 \ud83c\uddfa\ud83c\uddf8\ud83c\udfdb. \ud83c\udf8f \ud83d\udc68 \ud83d\udc48 \u270d:</p> <ul> <li>\u2733 \ud83c\udf82 \ud83d\udee0\ufe0f</li> <li>\ud83d\udc83 (\u2754 ReadyAPI \u2693\ufe0f)</li> <li>Uvicorn (\u2699\ufe0f \ud83d\udc83 &amp; ReadyAPI)</li> </ul> <p>\ud83d\ude2e ReadyAPI</p> <p>\ud83d\udd00.</p> <p>\ud83d\udcad \ud83d\udce3 \ud83d\udc97 \ud83d\udc5c (\ud83d\udcbd \ud83d\udd2c, \ud83d\udee0\ufe0f &amp; \ud83e\uddfe) \u23ee\ufe0f \ud83c\udf8f \ud83d\udc0d \ud83c\udd8e, \ud83d\udc48 \ud83c\udf8f \ud83d\udd70 \ud83d\ude9a \ud83d\udc51 \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udc15\u200d\ud83e\uddba, \ud83d\udd73 \ud83d\udc64 \ud83e\udd14 \ud83d\udc8e \ud83d\udcad.</p> <p>&amp; \u23ee\ufe0f \ud83d\udd0e \ud83d\udccf \ud83d\udd70 \ud83c\udf8f \ud83d\udee0\ufe0f &amp; \ud83d\udd2c \ud83d\udcda \ud83c\udf8f \ud83c\udf9b, APIStar \ud83c\udfc6 \ud83c\udf9b \ud83d\udcaa.</p> <p>\u2934\ufe0f APIStar \u26d4\ufe0f \ud83d\udd00 \ud83d\udcbd &amp; \ud83d\udc83 \u270d, &amp; \ud83c\udd95 \ud83d\udc7b \ud83c\udfdb \u2705 \u2699\ufe0f. \ud83d\udc48 \ud83c\udfc1 \ud83c\udf08 \ud83c\udfd7 ReadyAPI.</p> <p>\ud83d\udc64 \ud83e\udd14 ReadyAPI \"\ud83d\uded0 \ud83d\udc68\u200d\ud83d\udcbc\" APIStar, \u23ea \ud83d\udcc9 &amp; \ud83d\udcc8 \u2692, \u2328 \u2699\ufe0f, &amp; \ud83c\udf8f \ud83c\udf55, \u2693\ufe0f \ud83d\udd1b \ud83c\udfeb \u26aa\ufe0f\u27a1\ufe0f \ud83c\udf10 \ud83d\udc49 \u23ee\ufe0f \ud83e\uddf0.</p>"},{"location":"alternatives/#readyapi","title":"\u2699\ufe0f ReadyAPI","text":""},{"location":"alternatives/#pydantic","title":"Pydantic","text":"<p>Pydantic \ud83d\uddc3 \ud83d\udd2c \ud83d\udcbd \ud83d\udd2c, \ud83d\udee0\ufe0f &amp; \ud83e\uddfe (\u2699\ufe0f \ud83c\udfbb \ud83d\udd17) \u2693\ufe0f \ud83d\udd1b \ud83d\udc0d \ud83c\udd8e \ud83d\udd11.</p> <p>\ud83d\udc48 \u2692 \u26ab\ufe0f \ud83d\udcf6 \ud83c\udfcb\ufe0f.</p> <p>\u26ab\ufe0f \u2b50 \ud83c\udf6d. \ud83d\udc50 \u26ab\ufe0f \u23e9 \ud83c\udf18 \ud83c\udf6d \ud83d\udcc7. &amp; \u26ab\ufe0f \u2693\ufe0f \ud83d\udd1b \ud83c\udf8f \ud83d\udc0d \ud83c\udd8e \ud83d\udd11, \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udc15\u200d\ud83e\uddba \ud83d\udc51.</p> <p>ReadyAPI \u2699\ufe0f \u26ab\ufe0f</p> <p>\ud83c\udf75 \ud83c\udf10 \ud83d\udcbd \ud83d\udd2c, \ud83d\udcbd \ud83d\udee0\ufe0f &amp; \ud83c\udfe7 \ud83c\udff7 \ud83e\uddfe (\u2693\ufe0f \ud83d\udd1b \ud83c\udfbb \ud83d\udd17).</p> <p>ReadyAPI \u2934\ufe0f \u270a \ud83d\udc48 \ud83c\udfbb \ud83d\udd17 \ud83d\udcbd &amp; \ud83d\udeae \u26ab\ufe0f \ud83d\uddc4, \u2196\ufe0f \u26aa\ufe0f\u27a1\ufe0f \ud83c\udf10 \ud83c\udf8f \ud83d\udc5c \u26ab\ufe0f \ud83d\udd28.</p>"},{"location":"alternatives/#_15","title":"\ud83d\udc83","text":"<p>\ud83d\udc83 \ud83d\udcbf \ud83d\udd2b \ud83d\udee0\ufe0f/\ud83e\uddf0, \u2754 \ud83d\udcaf \ud83c\udfd7 \u2195-\ud83c\udfad \u2733 \ud83d\udc15\u200d\ud83e\uddba.</p> <p>\u26ab\ufe0f \ud83d\udcf6 \ud83d\ude45 &amp; \ud83c\udfcb\ufe0f. \u26ab\ufe0f \ud83d\udd27 \ud83d\udcaa \ud83c\udfe7, &amp; \u2714\ufe0f \ud83d\udd27 \ud83e\uddb2.</p> <p>\u26ab\ufe0f \u2714\ufe0f:</p> <ul> <li>\ud83e\udd19 \ud83c\udf86 \ud83c\udfad.</li> <li>*\ufe0f\u20e3 \ud83d\udc15\u200d\ud83e\uddba.</li> <li>-\ud83d\udee0\ufe0f \ud83d\udda5 \ud83d\udccb.</li> <li>\ud83d\udd74 &amp; \ud83e\udd2b \ud83c\udf89.</li> <li>\ud83d\udcaf \ud83d\udc69\u200d\ud83d\udcbb \ud83c\udfd7 \ud83d\udd1b \ud83c\uddf8\ud83c\uddf2.</li> <li>\u269c, \ud83d\udddc, \ud83c\udfbb \ud83d\udcc1, \ud83c\udf8f \ud83d\udce8.</li> <li>\ud83c\udf89 &amp; \ud83c\udf6a \ud83d\udc15\u200d\ud83e\uddba.</li> <li>1\ufe0f\u20e30\ufe0f\u20e30\ufe0f\u20e3 \ud83d\udcaf \ud83d\udcaf \ud83d\udcb0.</li> <li>1\ufe0f\u20e30\ufe0f\u20e30\ufe0f\u20e3 \ud83d\udcaf \ud83c\udd8e \u270d \u270d.</li> <li>\ud83d\udc69\u200d\u2764\u200d\ud83d\udc68 \ud83c\udfcb\ufe0f \ud83d\udd17.</li> </ul> <p>\ud83d\udc83 \u23f3 \u23e9 \ud83d\udc0d \ud83d\udee0\ufe0f \ud83d\udcaf. \ud83d\udd74 \ud83d\udca5 Uvicorn, \u2754 \ud83d\udeab \ud83d\udee0\ufe0f, \u270b\ufe0f \ud83d\udcbd.</p> <p>\ud83d\udc83 \ud83d\ude9a \ud83c\udf10 \ud83d\udd30 \ud83d\udd78 \ud83d\udd78 \ud83d\udee0\ufe0f.</p> <p>\u270b\ufe0f \u26ab\ufe0f \ud83d\udeab \ud83d\ude9a \ud83c\udfe7 \ud83d\udcbd \ud83d\udd2c, \ud83d\udee0\ufe0f \u2696\ufe0f \ud83e\uddfe.</p> <p>\ud83d\udc48 1\ufe0f\u20e3 \ud83d\udc51 \ud83d\udc5c \ud83d\udc48 ReadyAPI \ud83d\udeae \ud83d\udd1b \ud83d\udd1d, \ud83c\udf10 \u2693\ufe0f \ud83d\udd1b \ud83d\udc0d \ud83c\udd8e \ud83d\udd11 (\u2699\ufe0f Pydantic). \ud83d\udc48, \u2795 \ud83d\udd17 \ud83d\udc89 \u2699\ufe0f, \ud83d\udc82\u200d\u2642 \ud83d\ude99, \ud83d\uddc4 \ud83d\udd17 \u26a1, \u2652\ufe0f.</p> <p>\ud83d\udce1 \u2139</p> <p>\ud83d\udd2b \ud83c\udd95 \"\ud83d\udc29\" \u2796 \ud83d\udee0\ufe0f \u2733 \ud83d\udc1a \ud83c\udfc9 \ud83d\udc68\u200d\ud83c\udf93. \u26ab\ufe0f \ud83d\udeab \"\ud83d\udc0d \ud83d\udc29\" (\ud83c\udde9\ud83c\uddec), \ud83d\udc50 \ud83d\udc6b \ud83d\udee0\ufe0f \ud83d\udd28 \ud83d\udc48.</p> <p>\ud83d\udc50, \u26ab\ufe0f \u23ea \u2796 \u2699\ufe0f \"\ud83d\udc29\" \ud83d\udcda \ud83e\uddf0. \ud83d\udc49 \ud83d\udcc9 \ud83d\udcc9 \ud83d\udee0\ufe0f, \ud83d\udc46 \ud83d\udcaa \ud83c\udf9b Uvicorn \ud83d\ude46 \ud83c\udf8f \ud83d\udd2b \ud83d\udcbd (\ud83d\udc96 \ud83d\udc78 \u2696\ufe0f Hypercorn), \u2696\ufe0f \ud83d\udc46 \ud83d\udcaa \ud83d\udeae \ud83d\udd2b \ud83d\udd17 \ud83e\uddf0, \ud83d\udc96 <code>python-socketio</code>.</p> <p>ReadyAPI \u2699\ufe0f \u26ab\ufe0f</p> <p>\ud83c\udf75 \ud83c\udf10 \ud83d\udc1a \ud83d\udd78 \ud83c\udf55. \u274e \u2692 \ud83d\udd1b \ud83d\udd1d.</p> <p>\ud83c\udf93 <code>ReadyAPI</code> \u26ab\ufe0f \ud83d\ude16 \ud83d\udd17 \u26aa\ufe0f\u27a1\ufe0f \ud83c\udf93 <code>Starlette</code>.</p> <p>, \ud83d\udd73 \ud83d\udc48 \ud83d\udc46 \ud83d\udcaa \u23ee\ufe0f \ud83d\udc83, \ud83d\udc46 \ud83d\udcaa \u26ab\ufe0f \ud83d\udd17 \u23ee\ufe0f ReadyAPI, \u26ab\ufe0f \ud83c\udf16 \ud83d\udc83 \ud83d\udd1b \ud83d\udc8a.</p>"},{"location":"alternatives/#uvicorn","title":"Uvicorn","text":"<p>Uvicorn \ud83c\udf29-\u23e9 \ud83d\udd2b \ud83d\udcbd, \ud83c\udfd7 \ud83d\udd1b uvloop &amp; httptool.</p> <p>\u26ab\ufe0f \ud83d\udeab \ud83d\udd78 \ud83d\udee0\ufe0f, \u270b\ufe0f \ud83d\udcbd. \ud83d\uddbc, \u26ab\ufe0f \ud83d\udeab \ud83d\ude9a \ud83e\uddf0 \ud83d\udd79 \u27a1. \ud83d\udc48 \ud83d\udd73 \ud83d\udc48 \ud83d\udee0\ufe0f \ud83d\udc96 \ud83d\udc83 (\u2696\ufe0f ReadyAPI) \ud83d\udd1c \ud83d\ude9a \ud83d\udd1b \ud83d\udd1d.</p> <p>\u26ab\ufe0f \ud83d\udc4d \ud83d\udcbd \ud83d\udc83 &amp; ReadyAPI.</p> <p>ReadyAPI \ud83d\udc4d \u26ab\ufe0f</p> <p>\ud83d\udc51 \ud83d\udd78 \ud83d\udcbd \ud83c\udfc3 ReadyAPI \ud83c\ude38.</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83c\udf00 \u26ab\ufe0f \u23ee\ufe0f \ud83d\udc01, \u2714\ufe0f \ud83d\udd01 \ud83d\udc41-\ud83d\udee0\ufe0f \ud83d\udcbd.</p> <p>\u2705 \ud83c\udf05 \u2139 \ud83d\udee0\ufe0f \ud83d\udcc4.</p>"},{"location":"alternatives/#_16","title":"\ud83d\udcc7 &amp; \ud83d\ude85","text":"<p>\ud83e\udd14, \ud83d\udd2c, &amp; \ud83d\udc40 \ud83d\udd3a \ud83d\udd96 Uvicorn, \ud83d\udc83 &amp; ReadyAPI, \u2705 \ud83d\udcc4 \ud83d\udd03 \ud83d\udcc7.</p>"},{"location":"async/","title":"\ud83d\udee0\ufe0f &amp; \ud83d\udd01 / \u231b","text":"<p>\u2139 \ud83d\udd03 <code>async def</code> \u2755 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22 &amp; \ud83d\udda5 \ud83d\udd03 \ud83d\udd01 \ud83d\udcdf, \ud83d\udee0\ufe0f, &amp; \ud83d\udd01.</p>"},{"location":"async/#_2","title":"\ud83c\udfc3 \u2753","text":"<p>\ud83c\udd91;\ud83d\udc69\u200d\u2695\ufe0f:</p> <p>\ud83d\udea5 \ud83d\udc46 \u2699\ufe0f \ud83e\udd49 \ud83e\udd73 \ud83d\uddc3 \ud83d\udc48 \ud83d\udcac \ud83d\udc46 \ud83e\udd19 \ud83d\udc6b \u23ee\ufe0f <code>await</code>, \ud83d\udc96:</p> <pre><code>results = await some_library()\n</code></pre> <p>\u2934\ufe0f, \ud83d\udce3 \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22 \u23ee\ufe0f <code>async def</code> \ud83d\udc96:</p> <pre><code>@app.get('/')\nasync def read_results():\n    results = await some_library()\n    return results\n</code></pre> <p>Note</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udd74 \u2699\ufe0f <code>await</code> \ud83d\udd18 \ud83d\udd22 \u270d \u23ee\ufe0f <code>async def</code>.</p> <p>\ud83d\udea5 \ud83d\udc46 \u2699\ufe0f \ud83e\udd49 \ud83e\udd73 \ud83d\uddc3 \ud83d\udc48 \ud83d\udd17 \u23ee\ufe0f \ud83d\udd73 (\ud83d\udcbd, \ud83d\udee0\ufe0f, \ud83d\udcc1 \u2699\ufe0f, \u2652\ufe0f.) &amp; \ud83d\udeab \u2714\ufe0f \ud83d\udc15\u200d\ud83e\uddba \u2699\ufe0f <code>await</code>, (\ud83d\udc49 \u23f3 \ud83d\udcbc \ud83c\udf05 \ud83d\udcbd \ud83d\uddc3), \u2934\ufe0f \ud83d\udce3 \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22 \ud83d\udece, \u23ee\ufe0f <code>def</code>, \ud83d\udc96:</p> <pre><code>@app.get('/')\ndef results():\n    results = some_library()\n    return results\n</code></pre> <p>\ud83d\udea5 \ud83d\udc46 \ud83c\ude38 (\ud83d\ude2b) \ud83d\udeab \u2714\ufe0f \ud83d\udd17 \u23ee\ufe0f \ud83d\udd73 \ud83d\ude46 &amp; \u231b \u26ab\ufe0f \ud83d\udce8, \u2699\ufe0f <code>async def</code>.</p> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udeab \ud83d\udcad, \u2699\ufe0f \ud83d\ude10 <code>def</code>.</p> <p>\ud83d\uddd2: \ud83d\udc46 \ud83d\udcaa \ud83c\udf00 <code>def</code> &amp; <code>async def</code> \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22 \ud83c\udf05 \ud83d\udc46 \ud83d\udcaa &amp; \ud83d\udd2c \ud83d\udd20 1\ufe0f\u20e3 \u2699\ufe0f \ud83c\udfc6 \ud83c\udf9b \ud83d\udc46. ReadyAPI \ud83d\udd1c \u25b6\ufe0f\ufe0f \ud83d\udc5c \u23ee\ufe0f \ud83d\udc6b.</p> <p>\ud83d\ude06, \ud83d\ude46 \ud83d\udcbc \ud83d\udd1b, ReadyAPI \ud83d\udd1c \ud83d\udc77 \ud83d\udd01 &amp; \ud83d\udcf6 \u23e9.</p> <p>\u270b\ufe0f \ud83d\udcc4 \ud83d\udcf6 \ud83d\udd1b, \u26ab\ufe0f \ud83d\udd1c \ud83d\udcaa \ud83c\udfad \ud83d\udee0\ufe0f.</p>"},{"location":"async/#i","title":"\ud83d\udce1 \u2139","text":"<p>\ud83c\udfdb \u23ec \ud83d\udc0d \u2714\ufe0f \ud83d\udc15\u200d\ud83e\uddba \"\ud83d\udd01 \ud83d\udcdf\" \u2699\ufe0f \ud83d\udd73 \ud83e\udd19 \"\ud83d\udd01\", \u23ee\ufe0f <code>async</code> &amp; <code>await</code> \u2755.</p> <p>\u27a1\ufe0f \ud83d\udc40 \ud83d\udc48 \ud83d\udd24 \ud83c\udf55 \ud83d\udcc4 \ud83d\udd1b:</p> <ul> <li>\ud83d\udd01 \ud83d\udcdf</li> <li><code>async</code> &amp; <code>await</code></li> <li>\ud83d\udd01</li> </ul>"},{"location":"async/#_3","title":"\ud83d\udd01 \ud83d\udcdf","text":"<p>\ud83d\udd01 \ud83d\udcdf \u26d3 \ud83d\udc48 \ud83c\uddea\ud83c\uddf8 \ud83d\udc76 \u2714\ufe0f \ud83c\udf0c \ud83d\udcac \ud83d\udcbb / \ud83d\udccb \ud83d\udc76 \ud83d\udc48 \u261d \ud83d\udcdf, \u26ab\ufe0f \ud83d\udc76 \ud83d\udd1c \u2714\ufe0f \u231b \ud83d\udd73 \ud83d\ude46 \ud83c\udfc1 \ud83d\udc71 \ud83d\ude46. \u27a1\ufe0f \ud83d\udcac \ud83d\udc48 \ud83d\udd73 \ud83d\ude46 \ud83e\udd19 \"\ud83d\udc0c-\ud83d\udcc1\" \ud83d\udc76.</p> <p>, \u23ee\ufe0f \ud83d\udc48 \ud83d\udd70, \ud83d\udcbb \ud83d\udcaa \ud83d\udeb6 &amp; \ud83c\udf8f \ud83d\udc77, \u23ea \"\ud83d\udc0c-\ud83d\udcc1\" \ud83d\udc76 \ud83c\udfc1.</p> <p>\u2934\ufe0f \ud83d\udcbb / \ud83d\udccb \ud83d\udc76 \ud83d\udd1c \ud83d\udc5f \ud83d\udd19 \ud83d\udd20 \ud83d\udd70 \u26ab\ufe0f \u2714\ufe0f \ud83e\udd1e \u21a9\ufe0f \u26ab\ufe0f \u231b \ud83d\udd04, \u2696\ufe0f \ud83d\udd50\u2754 \u26ab\ufe0f \ud83d\udc76 \ud83c\udfc1 \ud83c\udf10 \ud83d\udc77 \u26ab\ufe0f \u2714\ufe0f \ud83d\udc48 \u261d. &amp; \u26ab\ufe0f \ud83d\udc76 \ud83d\udd1c \ud83d\udc40 \ud83d\udea5 \ud83d\ude46 \ud83d\udccb \u26ab\ufe0f \u231b \u2714\ufe0f \u23ea \ud83c\udfc1, \ud83e\udd38 \u26ab\ufe0f\u2754 \u26ab\ufe0f \u2714\ufe0f.</p> <p>\u23ed, \u26ab\ufe0f \ud83d\udc76 \u270a \ud83e\udd47 \ud83d\udccb \ud83c\udfc1 (\u27a1\ufe0f \ud83d\udcac, \ud83d\udc46 \"\ud83d\udc0c-\ud83d\udcc1\" \ud83d\udc76) &amp; \ud83d\ude23 \u26ab\ufe0f\u2754 \u26ab\ufe0f \u2714\ufe0f \u23ee\ufe0f \u26ab\ufe0f.</p> <p>\ud83d\udc48 \"\u231b \ud83d\udd73 \ud83d\ude46\" \ud83d\udece \ud83d\udd17 \ud83d\udc64/\ud83c\udd7e \ud83d\udee0\ufe0f \ud83d\udc48 \ud83d\udcf6 \"\ud83d\udc0c\" (\ud83d\udd2c \ud83d\ude85 \ud83d\udd79 &amp; \ud83d\udcbe \ud83d\udcbe), \ud83d\udc96 \u231b:</p> <ul> <li>\ud83d\udcca \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udce8 \ud83d\udd18 \ud83d\udd78</li> <li>\ud83d\udcca \ud83d\udce8 \ud83d\udc46 \ud83d\udccb \ud83d\udce8 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd18 \ud83d\udd78</li> <li>\ud83c\udf9a \ud83d\udcc1 \ud83d\udcbe \u270d \u2699\ufe0f &amp; \ud83e\udd1d \ud83d\udc46 \ud83d\udccb</li> <li>\ud83c\udf9a \ud83d\udc46 \ud83d\udccb \ud83e\udd1d \u2699\ufe0f \u270d \ud83d\udcbe</li> <li>\ud83d\udef0 \ud83d\udee0\ufe0f \ud83d\udee0\ufe0f</li> <li>\ud83d\udcbd \ud83d\udee0\ufe0f \ud83c\udfc1</li> <li>\ud83d\udcbd \ud83d\udd22 \ud83d\udce8 \ud83c\udfc1</li> <li>\u2652\ufe0f.</li> </ul> <p>\ud83d\udee0\ufe0f \ud83d\udd70 \ud83c\udf74 \u2734\ufe0f \u231b \ud83d\udc64/\ud83c\udd7e \ud83d\udee0\ufe0f, \ud83d\udc6b \ud83e\udd19 \ud83d\udc6b \"\ud83d\udc64/\ud83c\udd7e \ud83d\udd17\" \ud83d\udee0\ufe0f.</p> <p>\u26ab\ufe0f \ud83e\udd19 \"\ud83d\udd01\" \u21a9\ufe0f \ud83d\udcbb / \ud83d\udccb \ud83d\udeab \u2714\ufe0f \"\ud83d\udd01\" \u23ee\ufe0f \ud83d\udc0c \ud83d\udccb, \u231b \u2611 \ud83d\ude4d \ud83d\udc48 \ud83d\udccb \ud83c\udfc1, \u23ea \ud83d\udd28 \ud83d\udd73, \ud83d\udcaa \u270a \ud83d\udccb \ud83c\udfc1 &amp; \ud83d\ude23 \ud83d\udc77.</p> <p>\u21a9\ufe0f \ud83d\udc48, \ud83d\udc86\u200d\u2642 \"\ud83d\udd01\" \u2699\ufe0f, \ud83d\udd50 \ud83c\udfc1, \ud83d\udccb \ud83d\udcaa \u231b \u23f8 \ud83d\udc25 \ud83d\udc44 (\u23f2) \ud83d\udcbb / \ud83d\udccb \ud83c\udfc1 \u26ab\ufe0f\u2754 \u26ab\ufe0f \ud83d\udeb6, &amp; \u2934\ufe0f \ud83d\udc5f \ud83d\udd19 \u270a \ud83c\udfc1 &amp; \ud83d\ude23 \ud83d\udc77 \u23ee\ufe0f \ud83d\udc6b.</p> <p>\"\ud83d\udd01\" (\ud83d\udc7d \"\ud83d\udd01\") \ud83d\udc6b \ud83d\udece \u2699\ufe0f \u2696 \"\ud83d\udd01\", \u21a9\ufe0f \ud83d\udcbb / \ud83d\udccb \u23e9 \ud83c\udf10 \ud83d\udcf6 \ud83d\udd01 \u23ed \ud83d\udd00 \ud83c\udf8f \ud83d\udccb, \ud83d\udea5 \ud83d\udc48 \ud83d\udd01 \ud83d\udd0c \u231b.</p>"},{"location":"async/#_4","title":"\ud83d\udee0\ufe0f &amp; \ud83c\udf54","text":"<p>\ud83d\udc49 \ud83d\udcad \ud83d\udd01 \ud83d\udcdf \ud83d\udd2c \ud83d\udd1b \ud83d\udd63 \ud83e\udd19 \"\ud83d\udee0\ufe0f\". \u26ab\ufe0f \ud83c\udf8f \u26aa\ufe0f\u27a1\ufe0f \"\ud83d\udd01\".</p> <p>\ud83d\udee0\ufe0f &amp; \ud83d\udd01 \ud83d\udc6f\u200d\u2642\ufe0f \ud83d\udd17 \"\ud83c\udf8f \ud83d\udc5c \ud83d\ude25 \ud83c\udf05 \u2696\ufe0f \ud83c\udf18 \ud83c\udf8f \ud83d\udd70\".</p> <p>\u270b\ufe0f \u2139 \ud83d\udd96 \ud83d\udee0\ufe0f &amp; \ud83d\udd01 \ud83c\udf8f.</p> <p>\ud83d\udc40 \ud83d\udd3a, \ud83c\udf08 \ud83d\udcc4 \ud83d\udcd6 \ud83d\udd03 \ud83c\udf54:</p>"},{"location":"async/#_5","title":"\ud83d\udee0\ufe0f \ud83c\udf54","text":"<p>\ud83d\udc46 \ud83d\udeb6 \u23ee\ufe0f \ud83d\udc46 \ud83e\udd70 \ud83e\udd1a \u23e9 \ud83e\udd55, \ud83d\udc46 \ud83e\uddcd \u23f8 \u23ea \ud83c\udfe7 \u270a \u2714 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc6b\ud83d\udc6b \ud83d\udeaa \ud83d\udc46. \ud83d\udc76</p> <p></p> <p>\u2934\ufe0f \u26ab\ufe0f \ud83d\udc46 \ud83d\udd04, \ud83d\udc46 \ud83e\udd49 \ud83d\udc46 \u2714 2\ufe0f\u20e3 \ud83d\udcf6 \ud83c\udf80 \ud83c\udf54 \ud83d\udc46 \ud83e\udd70 &amp; \ud83d\udc46. \ud83d\udc76 \ud83d\udc76</p> <p></p> <p>\ud83c\udfe7 \ud83d\udcac \ud83d\udd73 \ud83c\udf73 \ud83d\udc68\u200d\ud83c\udf73 \ud83d\udc6b \ud83d\udcad \ud83d\udc6b \u2714\ufe0f \ud83c\udfd7 \ud83d\udc46 \ud83c\udf54 (\u270b\ufe0f \ud83d\udc6b \u23f3 \ud83c\udfd7 \ud83d\udd50 \u23ee\ufe0f \ud83d\udc69\u200d\ud83d\udcbb).</p> <p></p> <p>\ud83d\udc46 \ud83d\udcb8. \ud83d\udc76</p> <p>\ud83c\udfe7 \ud83e\udd1d \ud83d\udc46 \ud83d\udd22 \ud83d\udc46 \ud83d\udd04.</p> <p></p> <p>\u23ea \ud83d\udc46 \u231b, \ud83d\udc46 \ud83d\udeb6 \u23ee\ufe0f \ud83d\udc46 \ud83e\udd70 &amp; \u2692 \ud83c\udfd3, \ud83d\udc46 \ud83e\uddce &amp; \ud83d\udcac \u23ee\ufe0f \ud83d\udc46 \ud83e\udd70 \ud83d\udccf \ud83d\udd70 (\ud83d\udc46 \ud83c\udf54 \ud83d\udcf6 \ud83c\udf80 &amp; \u270a \ud83d\udd70 \ud83c\udfd7).</p> <p>\ud83d\udc46 \ud83c\udfd6 \ud83c\udfd3 \u23ee\ufe0f \ud83d\udc46 \ud83e\udd70, \u23ea \ud83d\udc46 \u231b \ud83c\udf54, \ud83d\udc46 \ud83d\udcaa \ud83d\udcb8 \ud83d\udc48 \ud83d\udd70 \ud83d\ude2e \u2754 \ud83d\udc4c, \ud83d\udc28 &amp; \ud83d\ude43 \ud83d\udc46 \ud83e\udd70 \ud83d\udc76 \ud83d\udc76 \ud83d\udc76.</p> <p></p> <p>\u23ea \u231b &amp; \ud83d\udcac \ud83d\udc46 \ud83e\udd70, \u26aa\ufe0f\u27a1\ufe0f \ud83d\udd70 \ud83d\udd70, \ud83d\udc46 \u2705 \ud83d\udd22 \ud83d\udda5 \ud83d\udd1b \u23f2 \ud83d\udc40 \ud83d\udea5 \u26ab\ufe0f \ud83d\udc46 \ud83d\udd04 \u23ea.</p> <p>\u2934\ufe0f \u261d, \u26ab\ufe0f \ud83d\ude12 \ud83d\udc46 \ud83d\udd04. \ud83d\udc46 \ud83d\udeb6 \u23f2, \ud83e\udd1a \ud83d\udc46 \ud83c\udf54 &amp; \ud83d\udc5f \ud83d\udd19 \ud83c\udfd3.</p> <p></p> <p>\ud83d\udc46 &amp; \ud83d\udc46 \ud83e\udd70 \ud83c\udf74 \ud83c\udf54 &amp; \u2714\ufe0f \ud83d\udc4c \ud83d\udd70. \ud83d\udc76</p> <p></p> <p>Info</p> <p>\ud83c\udf39 \ud83d\uddbc \ud83d\udc6f \ud83c\udf4f. \ud83d\udc76</p> <p>\ud83c\udf08 \ud83d\udc46 \ud83d\udcbb / \ud83d\udccb \ud83d\udc76 \ud83d\udc48 \ud83d\udcd6.</p> <p>\u23ea \ud83d\udc46 \u23f8, \ud83d\udc46 \u26fd \ud83d\udc76, \u231b \ud83d\udc46 \ud83d\udd04, \ud83d\udeab \ud83d\udd28 \ud83d\udd73 \ud83d\udcf6 \"\ud83d\ude0c\". \u270b\ufe0f \u23f8 \u23e9 \u21a9\ufe0f \ud83c\udfe7 \ud83d\udd74 \u270a \u2714 (\ud83d\udeab \ud83c\udfd7 \ud83d\udc6b), \ud83d\udc48 \ud83d\udc4c.</p> <p>\u2934\ufe0f, \ud83d\udd50\u2754 \u26ab\ufe0f \ud83d\udc46 \ud83d\udd04, \ud83d\udc46 \u2611 \"\ud83d\ude0c\" \ud83d\udc77, \ud83d\udc46 \ud83d\udee0\ufe0f \ud83c\udf63, \ud83d\udcad \u26ab\ufe0f\u2754 \ud83d\udc46 \ud83d\udc9a, \ud83e\udd1a \ud83d\udc46 \ud83e\udd70 \u2692, \ud83d\udcb8, \u2705 \ud83d\udc48 \ud83d\udc46 \ud83e\udd1d \u2611 \ud83d\udcb5 \u2696\ufe0f \ud83d\udcb3, \u2705 \ud83d\udc48 \ud83d\udc46 \ud83c\ude1a \u2611, \u2705 \ud83d\udc48 \u2714 \u2714\ufe0f \u2611 \ud83c\udfec, \u2652\ufe0f.</p> <p>\u270b\ufe0f \u2934\ufe0f, \u270b\ufe0f \ud83d\udc46 \ud83d\udeab \u2714\ufe0f \ud83d\udc46 \ud83c\udf54, \ud83d\udc46 \ud83d\udc77 \u23ee\ufe0f \ud83c\udfe7 \"\ud83d\udd1b \u23f8\" \u23f8, \u21a9\ufe0f \ud83d\udc46 \u2714\ufe0f \u231b \ud83d\udc76 \ud83d\udc46 \ud83c\udf54 \ud83d\udd1c.</p> <p>\u270b\ufe0f \ud83d\udc46 \ud83d\udeb6 \u2196\ufe0f \u26aa\ufe0f\u27a1\ufe0f \u23f2 &amp; \ud83e\uddce \ud83c\udfd3 \u23ee\ufe0f \ud83d\udd22 \ud83d\udc46 \ud83d\udd04, \ud83d\udc46 \ud83d\udcaa \ud83c\udf9b \ud83d\udc76 \ud83d\udc46 \ud83d\ude4b \ud83d\udc46 \ud83e\udd70, &amp; \"\ud83d\udc77\" \ud83d\udc76 \ud83d\udc76 \ud83d\udd1b \ud83d\udc48. \u2934\ufe0f \ud83d\udc46 \ud83d\udd04 \ud83d\udd28 \ud83d\udd73 \ud83d\udcf6 \"\ud83d\ude0c\" \ud83d\ude0f \u23ee\ufe0f \ud83d\udc46 \ud83e\udd70 \ud83d\udc76.</p> <p>\u2934\ufe0f \ud83c\udfe7 \ud83d\udc76 \ud83d\udcac \"\ud83d\udc64 \ud83c\udfc1 \u23ee\ufe0f \ud83d\udd28 \ud83c\udf54\" \ud83d\udeae \ud83d\udc46 \ud83d\udd22 \ud83d\udd1b \u23f2 \ud83d\udda5, \u270b\ufe0f \ud83d\udc46 \ud83d\udeab \ud83e\udd98 \ud83d\udc96 \ud83d\ude1c \u23ea \ud83d\udd50\u2754 \ud83d\udda5 \ud83d\udd22 \ud83d\udd00 \ud83d\udc46 \ud83d\udd04 \ud83d\udd22. \ud83d\udc46 \ud83d\udcad \ud83d\ude45\u200d\u2642 1\ufe0f\u20e3 \ud83d\udd1c \ud83d\udcce \ud83d\udc46 \ud83c\udf54 \u21a9\ufe0f \ud83d\udc46 \u2714\ufe0f \ud83d\udd22 \ud83d\udc46 \ud83d\udd04, &amp; \ud83d\udc6b \u2714\ufe0f \ud83d\udc6b.</p> <p>\ud83d\udc46 \u231b \ud83d\udc46 \ud83e\udd70 \ud83c\udfc1 \ud83d\udcd6 (\ud83c\udfc1 \u23ee\ufe0f \ud83d\udc77 \ud83d\udc76 / \ud83d\udccb \u2796 \ud83d\udee0\ufe0f \ud83d\udc76), \ud83d\ude00 \ud83d\udd90 &amp; \ud83d\udcac \ud83d\udc48 \ud83d\udc46 \ud83d\udd1c \ud83c\udf54 \u23f8.</p> <p>\u2934\ufe0f \ud83d\udc46 \ud83d\udeb6 \u23f2 \ud83d\udc76, \u25b6\ufe0f \ud83d\udccb \ud83d\udc48 \ud83d\udd1c \ud83c\udfc1 \ud83d\udc76, \u2692 \ud83c\udf54, \ud83d\udcac \ud83d\udc4f &amp; \u270a \ud83d\udc6b \ud83c\udfd3. \ud83d\udc48 \ud83c\udfc1 \ud83d\udc48 \ud83d\udd01 / \ud83d\udccb \ud83d\udd17 \u23ee\ufe0f \u23f2 \u23f9. \ud83d\udc48 \ud83d\udd04, \u270d \ud83c\udd95 \ud83d\udccb, \"\ud83c\udf74 \ud83c\udf54\" \ud83d\udc76 \ud83d\udc76, \u270b\ufe0f \u23ee\ufe0f 1\ufe0f\u20e3 \"\ud83e\udd1a \ud83c\udf54\" \ud83c\udfc1 \u23f9.</p>"},{"location":"async/#_6","title":"\ud83d\udd17 \ud83c\udf54","text":"<p>\ud83d\udd1c \u27a1\ufe0f \ud83c\udf08 \ud83d\udc6b \u2796\ud83d\udeab \ud83d\udeab \"\ud83d\udee0\ufe0f \ud83c\udf54\", \u270b\ufe0f \"\ud83d\udd17 \ud83c\udf54\".</p> <p>\ud83d\udc46 \ud83d\udeb6 \u23ee\ufe0f \ud83d\udc46 \ud83e\udd70 \ud83e\udd1a \ud83d\udd17 \u23e9 \ud83e\udd55.</p> <p>\ud83d\udc46 \ud83e\uddcd \u23f8 \u23ea \ud83d\udcda (\u27a1\ufe0f \ud83d\udcac 8\ufe0f\u20e3) \ud83c\udfe7 \ud83d\udc48 \ud83c\udf8f \ud83d\udd70 \ud83c\udf73 \u270a \u2714 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc6b\ud83d\udc6b \ud83d\udeaa \ud83d\udc46.</p> <p>\ud83d\udc71 \u23ed \ud83d\udc46 \u231b \ud83d\udc6b \ud83c\udf54 \ud83d\udd1c \u23ed \ud83c\udf42 \u23f2 \u21a9\ufe0f \ud83d\udd20 8\ufe0f\u20e3 \ud83c\udfe7 \ud83d\udeb6 &amp; \ud83c\udfd7 \ud83c\udf54 \u25b6\ufe0f\ufe0f \u2196\ufe0f \u23ed \ud83d\udc86\u200d\u2642 \u23ed \u2714.</p> <p></p> <p>\u2934\ufe0f \u26ab\ufe0f \ud83d\ude12 \ud83d\udc46 \ud83d\udd04, \ud83d\udc46 \ud83e\udd49 \ud83d\udc46 \u2714 2\ufe0f\u20e3 \ud83d\udcf6 \ud83c\udf80 \ud83c\udf54 \ud83d\udc46 \ud83e\udd70 &amp; \ud83d\udc46.</p> <p>\ud83d\udc46 \ud83d\udcb8 \ud83d\udc76.</p> <p></p> <p>\ud83c\udfe7 \ud83d\udeb6 \ud83d\udc68\u200d\ud83c\udf73.</p> <p>\ud83d\udc46 \u231b, \ud83e\uddcd \ud83d\udeaa \u23f2 \ud83d\udc76, \ud83d\udc48 \ud83d\ude45\u200d\u2642 1\ufe0f\u20e3 \ud83d\ude46 \u270a \ud83d\udc46 \ud83c\udf54 \u23ed \ud83d\udc46, \ud83d\udce4 \ud83d\ude45\u200d\u2642 \ud83d\udd22 \ud83d\udd04.</p> <p></p> <p>\ud83d\udc46 &amp; \ud83d\udc46 \ud83e\udd70 \ud83d\ude29 \ud83d\udeab \u27a1\ufe0f \ud83d\ude46 \ud83e\udd1a \ud83d\udeaa \ud83d\udc46 &amp; \u270a \ud83d\udc46 \ud83c\udf54 \ud83d\udd50\u2754 \ud83d\udc6b \ud83d\udeec, \ud83d\udc46 \ud83d\udeab\ud83d\udd1c \ud83d\udcb8 \ud83d\ude4b \ud83d\udc46 \ud83e\udd70. \ud83d\udc76</p> <p>\ud83d\udc49 \"\ud83d\udd01\" \ud83d\udc77, \ud83d\udc46 \"\ud83d\udd01\" \u23ee\ufe0f \ud83c\udfe7/\ud83c\udf73 \ud83d\udc76 \ud83d\udc76. \ud83d\udc46 \u2714\ufe0f \u231b \ud83d\udc76 &amp; \ud83d\udce4 \u2611 \ud83d\ude4d \ud83d\udc48 \ud83c\udfe7/\ud83c\udf73 \ud83d\udc76 \ud83d\udc76 \ud83c\udfc1 \ud83c\udf54 &amp; \ud83e\udd1d \ud83d\udc6b \ud83d\udc46, \u2696\ufe0f \u23ea, \ud83d\udc71 \ud83d\ude46 \ud83d\udcaa \u270a \ud83d\udc6b.</p> <p></p> <p>\u2934\ufe0f \ud83d\udc46 \ud83c\udfe7/\ud83c\udf73 \ud83d\udc76 \ud83d\udc76 \ud83d\ude12 \ud83d\udc5f \ud83d\udd19 \u23ee\ufe0f \ud83d\udc46 \ud83c\udf54, \u23ee\ufe0f \ud83d\udccf \ud83d\udd70 \u231b \ud83d\udc76 \ud83d\udce4 \ud83d\udeaa \u23f2.</p> <p></p> <p>\ud83d\udc46 \u270a \ud83d\udc46 \ud83c\udf54 &amp; \ud83d\udeb6 \ud83c\udfd3 \u23ee\ufe0f \ud83d\udc46 \ud83e\udd70.</p> <p>\ud83d\udc46 \ud83c\udf74 \ud83d\udc6b, &amp; \ud83d\udc46 \ud83d\udd28. \u23f9</p> <p></p> <p>\ud83d\udce4 \ud83d\udeab \ud83c\udf05 \ud83d\udcac \u2696\ufe0f \ud83d\ude0f \ud83c\udf05 \ud83d\udd70 \ud83d\udcb8 \u231b \ud83d\udc76 \ud83d\udeaa \u23f2. \ud83d\udc76</p> <p>Info</p> <p>\ud83c\udf39 \ud83d\uddbc \ud83d\udc6f \ud83c\udf4f. \ud83d\udc76</p> <p>\ud83d\udc49 \ud83d\ude10 \ud83d\udd17 \ud83c\udf54, \ud83d\udc46 \ud83d\udcbb / \ud83d\udccb \ud83d\udc76 \u23ee\ufe0f 2\ufe0f\u20e3 \ud83d\udd79 (\ud83d\udc46 &amp; \ud83d\udc46 \ud83e\udd70), \ud83d\udc6f\u200d\u2642\ufe0f \u231b \ud83d\udc76 &amp; \ud83d\udca1 \ud83d\udc6b \ud83d\ude4b \ud83d\udc76 \"\u231b \ud83d\udd1b \u23f2\" \ud83d\udc76 \ud83d\udccf \ud83d\udd70.</p> <p>\u23e9 \ud83e\udd55 \ud83c\udfea \u2714\ufe0f 8\ufe0f\u20e3 \ud83d\udd79 (\ud83c\udfe7/\ud83c\udf73). \u23ea \ud83d\udee0\ufe0f \ud83c\udf54 \ud83c\udfea \ud83d\udcaa \u2714\ufe0f \u2714\ufe0f \ud83d\udd74 2\ufe0f\u20e3 (1\ufe0f\u20e3 \ud83c\udfe7 &amp; 1\ufe0f\u20e3 \ud83c\udf73).</p> <p>\u270b\ufe0f, \ud83c\udfc1 \ud83d\udca1 \ud83d\udeab \ud83c\udfc6. \ud83d\udc76</p> <p>\ud83d\udc49 \ud83d\udd1c \ud83d\udd17 \ud83c\udf13 \ud83d\udcd6 \ud83c\udf54. \ud83d\udc76</p> <p>\ud83c\udf05 \"\ud83c\udfb0 \ud83d\udc68\u200d\u2764\u200d\ud83d\udc68\" \ud83d\uddbc \ud83d\udc49, \ud83c\udf08 \ud83c\udfe6.</p> <p>\ud83c\udd99 \u23f3, \ud83c\udfc6 \ud83c\udfe6 \u2714\ufe0f \ud83d\udc97 \ud83c\udfe7 \ud83d\udc76 \ud83d\udc76 \ud83d\udc76 \ud83d\udc76 \ud83d\udc76 \ud83d\udc76 \ud83d\udc76 \ud83d\udc76 &amp; \ud83e\udd8f \u23f8 \ud83d\udc76 \ud83d\udc76 \ud83d\udc76 \ud83d\udc76 \ud83d\udc76 \ud83d\udc76 \ud83d\udc76 \ud83d\udc76.</p> <p>\ud83c\udf10 \ud83c\udfe7 \ud83d\udd28 \ud83c\udf10 \ud83d\udc77 \u23ee\ufe0f 1\ufe0f\u20e3 \ud83d\udc69\u200d\ud83d\udcbb \u23ee\ufe0f \ud83c\udf8f \ud83d\udc76 \ud83d\udc76 \ud83d\udc76.</p> <p>&amp; \ud83d\udc46 \u2714\ufe0f \u231b \ud83d\udc76 \u23f8 \ud83d\udccf \ud83d\udd70 \u2696\ufe0f \ud83d\udc46 \ud83d\udcb8 \ud83d\udc46 \ud83d\udd04.</p> <p>\ud83d\udc46 \ud83c\udfb2 \ud83d\udeab\ud83d\udd1c \ud83d\udc9a \u270a \ud83d\udc46 \ud83e\udd70 \ud83d\udc76 \u23ee\ufe0f \ud83d\udc46 \ud83d\udc77 \ud83c\udfe6 \ud83d\udc76.</p>"},{"location":"async/#_7","title":"\ud83c\udf54 \ud83c\udfc1","text":"<p>\ud83d\udc49 \ud83d\ude10 \"\u23e9 \ud83e\udd55 \ud83c\udf54 \u23ee\ufe0f \ud83d\udc46 \ud83e\udd70\", \ud83d\udce4 \ud83d\udcda \u231b \ud83d\udc76, \u26ab\ufe0f \u2692 \ud83d\udcda \ud83c\udf05 \ud83d\udd11 \u2714\ufe0f \ud83d\udee0\ufe0f \u2699\ufe0f \u23f8 \ud83d\udc76 \ud83d\udc76.</p> <p>\ud83d\udc49 \ud83d\udcbc \ud83c\udf05 \ud83d\udd78 \ud83c\ude38.</p> <p>\ud83d\udcda, \ud83d\udcda \ud83d\udc69\u200d\ud83d\udcbb, \u270b\ufe0f \ud83d\udc46 \ud83d\udcbd \u231b \ud83d\udc76 \ud83d\udc6b \ud83d\udeab--\ud83d\udc4d \ud83d\udd17 \ud83d\udce8 \ud83d\udc6b \ud83d\udce8.</p> <p>&amp; \u2934\ufe0f \u231b \ud83d\udc76 \ud83d\udd04 \ud83d\udce8 \ud83d\udc5f \ud83d\udd19.</p> <p>\ud83d\udc49 \"\u231b\" \ud83d\udc76 \u2696 \u23f2, \u270b\ufe0f, \u2696 \u26ab\ufe0f \ud83c\udf10, \u26ab\ufe0f \ud83d\udcda \u231b \ud83d\udd1a.</p> <p>\ud83d\udc48 \u26ab\ufe0f\u2754 \u26ab\ufe0f \u2692 \ud83d\udcda \ud83d\udd11 \u2699\ufe0f \ud83d\udd01 \u23f8 \ud83d\udc76 \ud83d\udc76 \ud83d\udcdf \ud83d\udd78 \ud83d\udd17.</p> <p>\ud83d\udc49 \ud83d\ude07 \ud83d\udd00 \u26ab\ufe0f\u2754 \u2692 \u2733 \ud83c\udf1f (\u270b\ufe0f \u2733 \ud83d\udeab \ud83d\udd17) &amp; \ud83d\udc48 \ud83d\udcaa \ud83d\udeb6 \ud83d\udee0\ufe0f \ud83c\uddea\ud83c\uddf8.</p> <p>&amp; \ud83d\udc48 \ud83c\udf8f \ud83c\udf9a \ud83c\udfad \ud83d\udc46 \ud83e\udd1a \u23ee\ufe0f ReadyAPI.</p> <p>&amp; \ud83d\udc46 \ud83d\udcaa \u2714\ufe0f \ud83d\udd01 &amp; \ud83d\udd00 \ud83c\udf8f \ud83d\udd70, \ud83d\udc46 \ud83e\udd1a \u2195 \ud83c\udfad \ud83c\udf18 \ud83c\udf05 \ud83d\udcaf \u2733 \ud83d\udee0\ufe0f &amp; \ud83d\udd1b \ud83c\uddf7\ud83c\uddea \u23ee\ufe0f \ud83d\udeb6, \u2754 \u270d \ud83c\uddea\ud83c\uddf8 \ud83d\udd10 \ud83c\udd71 (\ud83c\udf10 \ud83d\udc4f \ud83d\udc83).</p>"},{"location":"async/#_8","title":"\ud83d\udee0\ufe0f \ud83d\udc4d \ud83c\udf18 \ud83d\udd01 \u2753","text":"<p>\ud83d\ude06 \u2757 \ud83d\udc48 \ud83d\udeab \ud83d\uded0 \ud83d\udcd6.</p> <p>\ud83d\udee0\ufe0f \ud83c\udf8f \ud83c\udf18 \ud83d\udd01. &amp; \u26ab\ufe0f \ud83d\udc7b \ud83d\udd1b \ud83c\udfaf \ud83d\ude10 \ud83d\udc48 \ud83d\udd0c \ud83d\udcda \u231b. \u21a9\ufe0f \ud83d\udc48, \u26ab\ufe0f \ud83d\udece \ud83d\udcda \ud83d\udc4d \ud83c\udf18 \ud83d\udd01 \ud83d\udd78 \ud83c\ude38 \ud83d\udee0\ufe0f. \u270b\ufe0f \ud83d\udeab \ud83c\udf10.</p> <p>, \u2696 \ud83d\udc48 \ud83d\udc45, \ud83c\udf08 \ud83d\udcc4 \ud83d\udccf \ud83d\udcd6:</p> <p>&gt; \ud83d\udc46 \u2714\ufe0f \ud83e\uddf9 \ud83e\udd8f, \ud83d\udca9 \ud83c\udfe0.</p> <p>\ud83d\ude06, \ud83d\udc48 \ud83c\udf82 \ud83d\udcd6.</p> <p>\ud83d\udce4 \ud83d\ude45\u200d\u2642 \u231b \ud83d\udc76 \ud83d\ude46, \ud83d\udcda \ud83d\udc77 \ud83d\udd28, \ud83d\udd1b \ud83d\udc97 \ud83e\udd49 \ud83c\udfe0.</p> <p>\ud83d\udc46 \ud83d\udcaa \u2714\ufe0f \ud83d\udd04 \ud83c\udf54 \ud83d\uddbc, \ud83e\udd47 \ud83c\udfe0 \ud83e\uddd6\u200d\u2642, \u2934\ufe0f \ud83d\udc68\u200d\ud83c\udf73, \u270b\ufe0f \ud83d\udc46 \ud83d\udeab \u231b \ud83d\udc76 \ud83d\udd73, \ud83e\uddf9 &amp; \ud83e\uddf9, \ud83d\udd04 \ud83d\udeab\ud83d\udd1c \ud83d\udcc9 \ud83d\udd73.</p> <p>\u26ab\ufe0f \ud83d\udd1c \u270a \ud83c\udf8f \ud83d\udcb8 \ud83d\udd70 \ud83c\udfc1 \u23ee\ufe0f \u2696\ufe0f \ud83c\udf75 \ud83d\udd04 (\ud83d\udee0\ufe0f) &amp; \ud83d\udc46 \ud83d\udd1c \u2714\ufe0f \u231b \ud83c\udf8f \ud83d\udcb8 \ud83d\udc77.</p> <p>\u270b\ufe0f \ud83d\udc49 \ud83d\udcbc, \ud83d\udea5 \ud83d\udc46 \ud83d\udcaa \u270a\ufe0f 8\ufe0f\u20e3 \ud83d\udc70-\ud83c\udfe7/\ud83c\udf73/\ud83d\udd1c-\ud83e\uddf9, &amp; \ud83d\udd20 1\ufe0f\u20e3 \ud83d\udc6b (\u2795 \ud83d\udc46) \ud83d\udcaa \u270a \ud83c\udfd2 \ud83c\udfe0 \ud83e\uddf9 \u26ab\ufe0f, \ud83d\udc46 \ud83d\udcaa \ud83c\udf10 \ud83d\udc77 \ud83d\udd17, \u23ee\ufe0f \u2795 \u2139, &amp; \ud83c\udfc1 \ud83c\udf05 \ud83d\udd1c.</p> <p>\ud83d\udc49 \ud83d\ude10, \ud83d\udd20 1\ufe0f\u20e3 \ud83e\uddf9 (\ud83d\udd0c \ud83d\udc46) \ud83d\udd1c \ud83d\udd79, \ud83e\udd38 \ud83d\udc6b \ud83c\udf55 \ud83d\udc68\u200d\ud83c\udfed.</p> <p>&amp; \ud83c\udfc6 \ud83d\udee0\ufe0f \ud83d\udd70 \u270a \u2611 \ud83d\udc77 (\u21a9\ufe0f \u231b), &amp; \ud83d\udc77 \ud83d\udcbb \u231b \ud83d\udcbd, \ud83d\udc6b \ud83e\udd19 \ud83d\udc6b \u26a0 \"\ud83d\udcbd \ud83c\udf81\".</p> <p>\u26a0 \ud83d\uddbc \ud83d\udcbd \ud83d\udd17 \ud83d\udee0\ufe0f \ud83d\udc5c \ud83d\udc48 \ud83d\ude9a \ud83c\udfd7 \ud83e\uddea \ud83c\udfed.</p> <p>\ud83d\uddbc:</p> <ul> <li>\ud83c\udfa7 \u2696\ufe0f \ud83d\uddbc \ud83c\udfed.</li> <li>\ud83d\udcbb \ud83d\udc53: \ud83d\uddbc \u270d \ud83d\udcaf \ud83d\udd05, \ud83d\udd20 \ud83d\udd05 \u2714\ufe0f 3\ufe0f\u20e3 \ud83d\udcb2 / \ud83c\udfa8, \ud83c\udfed \ud83d\udc48 \ud83d\udece \ud83d\ude9a \ud83d\udcbb \ud83d\udd73 \ud83d\udd1b \ud83d\udcda \ud83d\udd05, \ud83c\udf10 \ud83c\udf8f \ud83d\udd70.</li> <li>\ud83c\udfb0 \ud83c\udfeb: \u26ab\ufe0f \ud83d\udece \ud83d\ude9a \ud83d\udcda \"\u2716\" &amp; \"\ud83d\uddbc\" \u2716. \ud83d\udcad \ud83e\udd8f \ud83d\udccb \u23ee\ufe0f \ud83d\udd22 &amp; \u2716 \ud83c\udf10 \ud83d\udc6b \ud83d\udc6f\u200d\u2642\ufe0f \ud83c\udf8f \ud83d\udd70.</li> <li>\u23ec \ud83c\udfeb: \ud83d\udc49 \ud83c\udfa7-\ud83c\udfd1 \ud83c\udfb0 \ud83c\udfeb,, \ud83c\udf8f \u2714. \u26ab\ufe0f \ud83d\udc48 \ud83d\udce4 \ud83d\udeab \ud83d\udc41 \ud83d\udccb \ud83d\udd22 \u2716, \u270b\ufe0f \ud83e\udd8f \u2692 \ud83d\udc6b, &amp; \ud83d\udcda \ud83d\udcbc, \ud83d\udc46 \u2699\ufe0f \ud83c\udf81 \ud83d\udd79 \ud83c\udfd7 &amp; / \u2696\ufe0f \u2699\ufe0f \ud83d\udc48 \ud83c\udff7.</li> </ul>"},{"location":"async/#_9","title":"\ud83d\udee0\ufe0f \u2795 \ud83d\udd01: \ud83d\udd78 \u2795 \ud83c\udfb0 \ud83c\udfeb","text":"<p>\u23ee\ufe0f ReadyAPI \ud83d\udc46 \ud83d\udcaa \u270a \ud83d\udcc8 \ud83d\udee0\ufe0f \ud83d\udc48 \ud83d\udcf6 \u26a0 \ud83d\udd78 \ud83d\udee0\ufe0f (\ud83c\udf8f \ud83d\udc51 \ud83e\uddf2 \u2733).</p> <p>\u270b\ufe0f \ud83d\udc46 \ud83d\udcaa \ud83d\udc04 \ud83d\udcb0 \ud83d\udd01 &amp; \ud83d\udcbe (\u2714\ufe0f \ud83d\udc97 \ud83d\udee0\ufe0f \ud83c\udfc3\u200d\u2642 \ud83d\udd17) \ud83d\udcbd \ud83c\udf81 \u2696 \ud83d\udc96 \ud83d\udc48 \ud83c\udfb0 \ud83c\udfeb \u2699\ufe0f.</p> <p>\ud83d\udc48, \u2795 \ud83d\ude45 \ud83d\udc50 \ud83d\udc48 \ud83d\udc0d \ud83d\udc51 \ud83c\uddea\ud83c\uddf8 \ud83d\udcbd \ud83e\uddea, \ud83c\udfb0 \ud83c\udfeb &amp; \u2734\ufe0f \u23ec \ud83c\udfeb, \u2692 ReadyAPI \ud83d\udcf6 \ud83d\udc4d \ud83c\udfcf \ud83d\udcbd \ud83e\uddea / \ud83c\udfb0 \ud83c\udfeb \ud83d\udd78 \ud83d\udd17 &amp; \ud83c\ude38 (\ud83d\udc6a \ud83d\udcda \ud83c\udf8f).</p> <p>\ud83d\udc40 \u2754 \ud83c\udfc6 \ud83d\udc49 \ud83d\udd01 \ud83c\udfed \ud83d\udc40 \ud83d\udcc4 \ud83d\udd03 \ud83d\udee0\ufe0f.</p>"},{"location":"async/#async-await","title":"<code>async</code> &amp; <code>await</code>","text":"<p>\ud83c\udfdb \u23ec \ud83d\udc0d \u2714\ufe0f \ud83d\udcf6 \ud83c\udfcb\ufe0f \ud83c\udf0c \ud83d\udd2c \ud83d\udd01 \ud83d\udcdf. \ud83d\udc49 \u2692 \u26ab\ufe0f \ud83d\udc40 \ud83d\udc96 \ud83d\ude10 \"\ud83d\udd01\" \ud83d\udcdf &amp; \"\u231b\" \ud83d\udc46 \u25b6\ufe0f\ufe0f \ud83d\ude4d.</p> <p>\ud83d\udd50\u2754 \ud83d\udce4 \ud83d\udee0\ufe0f \ud83d\udc48 \ud83d\udd1c \ud83d\ude9a \u231b \u23ed \ud83e\udd1d \ud83c\udfc1 &amp; \u2714\ufe0f \ud83d\udc15\u200d\ud83e\uddba \ud83d\udc49 \ud83c\udd95 \ud83d\udc0d \u2692, \ud83d\udc46 \ud83d\udcaa \ud83d\udcdf \u26ab\ufe0f \ud83d\udc96:</p> <pre><code>burgers = await get_burgers(2)\n</code></pre> <p>\ud83d\udd11 \ud83d\udce5 <code>await</code>. \u26ab\ufe0f \ud83d\udcac \ud83d\udc0d \ud83d\udc48 \u26ab\ufe0f \u2714\ufe0f \u231b \u23f8 <code>get_burgers(2)</code> \ud83c\udfc1 \ud83d\udd28 \ud83d\udeae \ud83d\udc5c \ud83d\udc76 \u23ed \u267b \ud83c\udfc1 <code>burgers</code>. \u23ee\ufe0f \ud83d\udc48, \ud83d\udc0d \ud83d\udd1c \ud83d\udcad \ud83d\udc48 \u26ab\ufe0f \ud83d\udcaa \ud83d\udeb6 &amp; \ud83d\udd73 \ud83d\ude46 \ud83d\udc76 \ud83d\udc76 \ud83d\udc50 (\ud83d\udc96 \ud83d\udce8 \u27951\ufe0f\u20e3 \ud83d\udce8).</p> <p><code>await</code> \ud83d\udc77, \u26ab\ufe0f \u2714\ufe0f \ud83d\udd18 \ud83d\udd22 \ud83d\udc48 \ud83d\udc15\u200d\ud83e\uddba \ud83d\udc49 \ud83d\udd00. \ud83d\udc48, \ud83d\udc46 \ud83d\udce3 \u26ab\ufe0f \u23ee\ufe0f <code>async def</code>:</p> <pre><code>async def get_burgers(number: int):\n    # Do some asynchronous stuff to create the burgers\n    return burgers\n</code></pre> <p>...\u21a9\ufe0f <code>def</code>:</p> <pre><code># This is not asynchronous\ndef get_sequential_burgers(number: int):\n    # Do some sequential stuff to create the burgers\n    return burgers\n</code></pre> <p>\u23ee\ufe0f <code>async def</code>, \ud83d\udc0d \ud83d\udcad \ud83d\udc48, \ud83d\udd18 \ud83d\udc48 \ud83d\udd22, \u26ab\ufe0f \u2714\ufe0f \ud83e\udd14 <code>await</code> \ud83e\uddec, &amp; \ud83d\udc48 \u26ab\ufe0f \ud83d\udcaa \"\u23f8\" \u23f8 \ud83d\udee0\ufe0f \ud83d\udc48 \ud83d\udd22 &amp; \ud83d\udeb6 \ud83d\udd73 \ud83d\ude46 \ud83d\udc76 \u23ed \ud83d\udc5f \ud83d\udd19.</p> <p>\ud83d\udd50\u2754 \ud83d\udc46 \ud83d\udc9a \ud83e\udd19 <code>async def</code> \ud83d\udd22, \ud83d\udc46 \u2714\ufe0f \"\u231b\" \u26ab\ufe0f. , \ud83d\udc49 \ud83c\udfc6 \ud83d\udeab \ud83d\udc77:</p> <pre><code># This won't work, because get_burgers was defined with: async def\nburgers = get_burgers(2)\n</code></pre> <p>, \ud83d\udea5 \ud83d\udc46 \u2699\ufe0f \ud83d\uddc3 \ud83d\udc48 \ud83d\udcac \ud83d\udc46 \ud83d\udc48 \ud83d\udc46 \ud83d\udcaa \ud83e\udd19 \u26ab\ufe0f \u23ee\ufe0f <code>await</code>, \ud83d\udc46 \ud83d\udcaa \u270d \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22 \ud83d\udc48 \u2699\ufe0f \u26ab\ufe0f \u23ee\ufe0f <code>async def</code>, \ud83d\udc96:</p> <pre><code>@app.get('/burgers')\nasync def read_burgers():\n    burgers = await get_burgers(2)\n    return burgers\n</code></pre>"},{"location":"async/#i_1","title":"\ud83c\udf05 \ud83d\udce1 \u2139","text":"<p>\ud83d\udc46 \ud83d\udcaa \u2714\ufe0f \ud83d\udc40 \ud83d\udc48 <code>await</code> \ud83d\udcaa \ud83d\udd74 \u2699\ufe0f \ud83d\udd18 \ud83d\udd22 \ud83d\udd2c \u23ee\ufe0f <code>async def</code>.</p> <p>\u270b\ufe0f \ud83c\udf8f \ud83d\udd70, \ud83d\udd22 \ud83d\udd2c \u23ee\ufe0f <code>async def</code> \u2714\ufe0f \"\u231b\". , \ud83d\udd22 \u23ee\ufe0f <code>async def</code> \ud83d\udcaa \ud83d\udd74 \ud83e\udd19 \ud83d\udd18 \ud83d\udd22 \ud83d\udd2c \u23ee\ufe0f <code>async def</code> \ud83d\udc81\u200d\u2642\ufe0f.</p> <p>, \ud83d\udd03 \ud83e\udd5a &amp; \ud83d\udc14, \u2754 \ud83d\udc46 \ud83e\udd19 \ud83e\udd47 <code>async</code> \ud83d\udd22 \u2753</p> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udc77 \u23ee\ufe0f ReadyAPI \ud83d\udc46 \ud83d\udeab \u2714\ufe0f \ud83d\ude1f \ud83d\udd03 \ud83d\udc48, \u21a9\ufe0f \ud83d\udc48 \"\ud83e\udd47\" \ud83d\udd22 \ud83d\udd1c \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22, &amp; ReadyAPI \ud83d\udd1c \ud83d\udcad \u2754 \u25b6\ufe0f\ufe0f \ud83d\udc5c.</p> <p>\u270b\ufe0f \ud83d\udea5 \ud83d\udc46 \ud83d\udc9a \u2699\ufe0f <code>async</code> / <code>await</code> \ud83c\udf75 ReadyAPI, \ud83d\udc46 \ud83d\udcaa \u26ab\ufe0f \ud83d\udc4d.</p>"},{"location":"async/#_10","title":"\u270d \ud83d\udc46 \ud83d\udc4d \ud83d\udd01 \ud83d\udcdf","text":"<p>\ud83d\udc83 (&amp; ReadyAPI) \u2693\ufe0f \ud83d\udd1b AnyIO, \u2754 \u2692 \u26ab\ufe0f \ud83d\udd17 \u23ee\ufe0f \ud83d\udc6f\u200d\u2642\ufe0f \ud83d\udc0d \ud83d\udc29 \ud83d\uddc3 \u2733 &amp; \ud83c\udfbb.</p> <p>\ud83c\udfaf, \ud83d\udc46 \ud83d\udcaa \ud83d\udd17 \u2699\ufe0f AnyIO \ud83d\udc46 \ud83c\udfe7 \ud83d\udee0\ufe0f \u2699\ufe0f \ud83d\udcbc \ud83d\udc48 \ud83d\ude9a \ud83c\udf05 \ud83c\udfe7 \u2693 \ud83d\udc46 \ud83d\udc4d \ud83d\udcdf.</p> <p>&amp; \ud83d\udea5 \ud83d\udc46 \ud83d\udeab \u2699\ufe0f ReadyAPI, \ud83d\udc46 \ud83d\udcaa \u270d \ud83d\udc46 \ud83d\udc4d \ud83d\udd01 \ud83c\ude38 \u23ee\ufe0f AnyIO \ud83c\udfc6 \ud83d\udd17 &amp; \ud83e\udd1a \ud83d\udeae \ud83d\udcb0 (\u2705 \ud83d\udcca \ud83d\udee0\ufe0f).</p>"},{"location":"async/#_11","title":"\ud83c\udf8f \ud83d\udce8 \ud83d\udd01 \ud83d\udcdf","text":"<p>\ud83d\udc49 \ud83d\udc57 \u2699\ufe0f <code>async</code> &amp; <code>await</code> \ud83d\udcf6 \ud83c\udd95 \ud83c\uddea\ud83c\uddf8.</p> <p>\u270b\ufe0f \u26ab\ufe0f \u2692 \ud83d\udc77 \u23ee\ufe0f \ud83d\udd01 \ud83d\udcdf \ud83d\udcda \u23e9.</p> <p>\ud83d\udc49 \ud83c\udf8f \u2755 (\u2696\ufe0f \ud83c\udf16 \ud83c\udf13) \ud83d\udd0c \u23f3 \ud83c\udfdb \u23ec \ud83d\udd78 (\ud83d\udda5 &amp; \u2733).</p> <p>\u270b\ufe0f \u23ed \ud83d\udc48, \ud83d\ude9a \ud83d\udd01 \ud83d\udcdf \ud83c\udf16 \ud83c\udfd7 &amp; \u26a0.</p> <p>\u23ee\ufe0f \u23ec \ud83d\udc0d, \ud83d\udc46 \ud83d\udcaa \u2714\ufe0f \u2699\ufe0f \ud83e\uddf5 \u2696\ufe0f \ud83d\udc01. \u270b\ufe0f \ud83d\udcdf \ud83c\udf0c \ud83c\udf16 \ud83c\udfd7 \ud83e\udd14, \u2139, &amp; \ud83d\udcad \ud83d\udd03.</p> <p>\u23ee\ufe0f \u23ec \u2733 / \ud83d\udda5 \ud83d\udd78, \ud83d\udc46 \ud83d\udd1c \u2714\ufe0f \u2699\ufe0f \"\u23f2\". \u2754 \u2198\ufe0f \u23f2 \ud83d\udd25\ud83d\ude08.</p>"},{"location":"async/#_12","title":"\ud83d\udd01","text":"<p>\ud83d\udd01 \ud83d\udcf6 \ud83c\udf80 \u2696 \ud83d\udc5c \ud83d\udce8 <code>async def</code> \ud83d\udd22. \ud83d\udc0d \ud83d\udcad \ud83d\udc48 \u26ab\ufe0f \ud83d\udd73 \ud83d\udc96 \ud83d\udd22 \ud83d\udc48 \u26ab\ufe0f \ud83d\udcaa \u25b6\ufe0f &amp; \ud83d\udc48 \u26ab\ufe0f \ud83d\udd1c \ud83d\udd1a \u261d, \u270b\ufe0f \ud83d\udc48 \u26ab\ufe0f 5\ufe0f\u20e3\ud83d\udcc6 \u23f8 \u23f8 \ud83d\udd18 \ud83d\udc81\u200d\u2642\ufe0f, \ud83d\udd50\u2754 \ud83d\udce4 <code>await</code> \ud83d\udd18 \u26ab\ufe0f.</p> <p>\u270b\ufe0f \ud83c\udf10 \ud83d\udc49 \ud83d\udee0\ufe0f \u2699\ufe0f \ud83d\udd01 \ud83d\udcdf \u23ee\ufe0f <code>async</code> &amp; <code>await</code> \ud83d\udcda \ud83d\udd70 \ud83d\udd2c \u2699\ufe0f \"\ud83d\udd01\". \u26ab\ufe0f \u2b50 \ud83d\udc51 \ud83d\udd11 \u2692 \ud83d\udeb6, \"\ud83d\udd01\".</p>"},{"location":"async/#_13","title":"\ud83c\udfc1","text":"<p>\u27a1\ufe0f \ud83d\udc40 \ud83c\udf8f \ud83d\udd24 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udd1b:</p> <p>\ud83c\udfdb \u23ec \ud83d\udc0d \u2714\ufe0f \ud83d\udc15\u200d\ud83e\uddba \"\ud83d\udd01 \ud83d\udcdf\" \u2699\ufe0f \ud83d\udd73 \ud83e\udd19 \"\ud83d\udd01\", \u23ee\ufe0f <code>async</code> &amp; <code>await</code> \u2755.</p> <p>\ud83d\udc48 \ud83d\udd1c \u2692 \ud83c\udf05 \ud83d\udd11 \ud83d\udd1c. \ud83d\udc76</p> <p>\ud83c\udf10 \ud83d\udc48 \u26ab\ufe0f\u2754 \ud83c\udfcb\ufe0f ReadyAPI (\ud83d\udd18 \ud83d\udc83) &amp; \u26ab\ufe0f\u2754 \u2692 \u26ab\ufe0f \u2714\ufe0f \u2705 \ud83c\udf86 \ud83c\udfad.</p>"},{"location":"async/#i_2","title":"\ud83d\udcf6 \ud83d\udce1 \u2139","text":"<p>Warning</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83c\udfb2 \ud83d\udeb6 \ud83d\udc49.</p> <p>\ud83d\udc49 \ud83d\udcf6 \ud83d\udce1 \u2139 \u2754 ReadyAPI \ud83d\udc77 \ud83d\udd18.</p> <p>\ud83d\udea5 \ud83d\udc46 \u2714\ufe0f \ud83d\udce1 \ud83d\udca1 (\ud83c\ude36-\ud83c\udfcb, \ud83e\uddf5, \ud83c\udf6b, \u2652\ufe0f.) &amp; \ud83d\ude1f \ud83d\udd03 \u2754 ReadyAPI \ud83c\udf75 <code>async def</code> \ud83c\udd9a \ud83d\ude10 <code>def</code>, \ud83d\udeb6 \u2934\ufe0f.</p>"},{"location":"async/#_14","title":"\u27a1 \ud83d\udee0\ufe0f \ud83d\udd22","text":"<p>\ud83d\udd50\u2754 \ud83d\udc46 \ud83d\udce3 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22 \u23ee\ufe0f \ud83d\ude10 <code>def</code> \u21a9\ufe0f <code>async def</code>, \u26ab\ufe0f \ud83c\udfc3 \ud83d\udd22 \ud83e\uddf5 \ud83d\udc48 \u2934\ufe0f \u231b, \u21a9\ufe0f \u2796 \ud83e\udd19 \ud83d\udd17 (\u26ab\ufe0f \ud83d\udd1c \ud83c\udf6b \ud83d\udcbd).</p> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udc5f \u26aa\ufe0f\u27a1\ufe0f \u27951\ufe0f\u20e3 \ud83d\udd01 \ud83d\udee0\ufe0f \ud83d\udc48 \ud83d\udd28 \ud83d\udeab \ud83d\udc77 \ud83c\udf0c \ud83d\udd2c \ud83d\udd1b &amp; \ud83d\udc46 \u2699\ufe0f \u2696 \ud83d\ude43 \ud83d\udcca-\ud83d\udd74 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22 \u23ee\ufe0f \u2705 <code>def</code> \ud83e\udd2a \ud83c\udfad \ud83d\udcc8 (\ud83d\udd03 1\ufe0f\u20e30\ufe0f\u20e30\ufe0f\u20e3 \ud83d\udc93), \ud83d\ude4f \ud83d\uddd2 \ud83d\udc48 ReadyAPI \u2b50 \ud83d\udd1c \ud83d\udd04. \ud83d\udc6b \ud83d\udcbc, \u26ab\ufe0f \ud83d\udc7b \u2699\ufe0f <code>async def</code> \ud83d\udea5 \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22 \u2699\ufe0f \ud83d\udcdf \ud83d\udc48 \ud83c\udfad \ud83d\udea7 \ud83d\udc64/\ud83c\udd7e.</p> <p>, \ud83d\udc6f\u200d\u2642\ufe0f \u26a0, \ud83e\udd1e \ud83d\udc48 ReadyAPI \ud83d\udd1c \u23e9 \ud83c\udf18 (\u2696\ufe0f \ud83c\udf18 \u2b50) \ud83d\udc46 \u23ee\ufe0f \ud83d\udee0\ufe0f.</p>"},{"location":"async/#_15","title":"\ud83d\udd17","text":"<p>\ud83c\udf8f \u2714 \ud83d\udd17. \ud83d\udea5 \ud83d\udd17 \ud83d\udc29 <code>def</code> \ud83d\udd22 \u21a9\ufe0f <code>async def</code>, \u26ab\ufe0f \ud83c\udfc3 \ud83d\udd22 \ud83e\uddf5.</p>"},{"location":"async/#-","title":"\ud83c\udfa7-\ud83d\udd17","text":"<p>\ud83d\udc46 \ud83d\udcaa \u2714\ufe0f \ud83d\udc97 \ud83d\udd17 &amp; \ud83c\udfa7-\ud83d\udd17 \ud83d\udeab \ud83d\udd20 \ud83c\udf8f (\ud83d\udd22 \ud83d\udd22 \ud83d\udd11), \ud83d\udc6b \ud83d\udcaa \u270d \u23ee\ufe0f <code>async def</code> &amp; \u23ee\ufe0f \ud83d\ude10 <code>def</code>. \u26ab\ufe0f \ud83d\udd1c \ud83d\udc77, &amp; \ud83d\udd50 \u270d \u23ee\ufe0f \ud83d\ude10 <code>def</code> \ud83d\udd1c \ud83e\udd19 \ud83d\udd1b \ud83d\udd22 \ud83e\uddf5 (\u26aa\ufe0f\u27a1\ufe0f \ud83e\uddf5) \u21a9\ufe0f \u2796 \"\u231b\".</p>"},{"location":"async/#_16","title":"\ud83c\udf8f \ud83d\ude99 \ud83d\udd22","text":"<p>\ud83d\ude46 \ud83c\udf8f \ud83d\ude99 \ud83d\udd22 \ud83d\udc48 \ud83d\udc46 \ud83e\udd19 \ud83d\udd17 \ud83d\udcaa \u270d \u23ee\ufe0f \ud83d\ude10 <code>def</code> \u2696\ufe0f <code>async def</code> &amp; ReadyAPI \ud83c\udfc6 \ud83d\udeab \ud83d\udcc9 \ud83c\udf0c \ud83d\udc46 \ud83e\udd19 \u26ab\ufe0f.</p> <p>\ud83d\udc49 \ud83d\udd05 \ud83d\udd22 \ud83d\udc48 ReadyAPI \ud83e\udd19 \ud83d\udc46: \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22 &amp; \ud83d\udd17.</p> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\ude99 \ud83d\udd22 \ud83d\ude10 \ud83d\udd22 \u23ee\ufe0f <code>def</code>, \u26ab\ufe0f \ud83d\udd1c \ud83e\udd19 \ud83d\udd17 (\ud83d\udc46 \u270d \u26ab\ufe0f \ud83d\udc46 \ud83d\udcdf), \ud83d\udeab \ud83e\uddf5, \ud83d\udea5 \ud83d\udd22 \u270d \u23ee\ufe0f <code>async def</code> \u2934\ufe0f \ud83d\udc46 \ud83d\udd1c <code>await</code> \ud83d\udc48 \ud83d\udd22 \ud83d\udd50\u2754 \ud83d\udc46 \ud83e\udd19 \u26ab\ufe0f \ud83d\udc46 \ud83d\udcdf.</p> <p>\ud83d\udd04, \ud83d\udc49 \ud83d\udcf6 \ud83d\udce1 \u2139 \ud83d\udc48 \ud83d\udd1c \ud83c\udfb2 \u26a0 \ud83d\udea5 \ud83d\udc46 \ud83d\udc5f \ud83d\udd0e \ud83d\udc6b.</p> <p>\u23ea, \ud83d\udc46 \ud83d\udd1c \ud83d\udc4d \u23ee\ufe0f \ud83d\udcc4 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udcc4 \ud83d\udd1b: \ud83c\udfc3 \u2753.</p>"},{"location":"benchmarks/","title":"\ud83d\udcc7","text":"<p>\ud83d\udd2c \ud83c\uddf8\ud83c\uddf2 \ud83d\udcc7 \ud83c\udfa6 ReadyAPI \ud83c\ude38 \ud83c\udfc3\u200d\u2642 \ud83d\udd3d Uvicorn 1\ufe0f\u20e3 \u23e9 \ud83d\udc0d \ud83d\udee0\ufe0f \ud83d\udcaa, \ud83d\udd74 \ud83d\udd1b \ud83d\udc83 &amp; Uvicorn \ud83d\udc6b (\u2699\ufe0f \ud83d\udd18 ReadyAPI). (*)</p> <p>\u270b\ufe0f \ud83d\udd50\u2754 \u2705 \ud83d\udcc7 &amp; \ud83d\udd3a \ud83d\udc46 \ud83d\udd1c \u2714\ufe0f \ud83d\udcc4 \ud83e\udd2f.</p>"},{"location":"benchmarks/#_2","title":"\ud83d\udcc7 &amp; \ud83d\ude85","text":"<p>\ud83d\udd50\u2754 \ud83d\udc46 \u2705 \ud83d\udcc7, \u26ab\ufe0f \u26a0 \ud83d\udc40 \ud83d\udcda \ud83e\uddf0 \ud83c\udf8f \ud83c\udd8e \ud83d\udd2c \ud83c\udf13.</p> <p>\ud83c\udfaf, \ud83d\udc40 Uvicorn, \ud83d\udc83 &amp; ReadyAPI \ud83d\udd2c \ud83d\udc6f\u200d\u2642\ufe0f (\ud83d\udc6a \ud83d\udcda \ud83c\udf8f \ud83e\uddf0).</p> <p>\ud83d\ude45 \u26a0 \u274e \ud83e\uddf0, \ud83d\udc4d \ud83c\udfad \u26ab\ufe0f \ud83d\udd1c \ud83e\udd1a. &amp; \ud83c\udfc6 \ud83d\udcc7 \ud83d\udeab \ud83d\udcaf \ud83c\udf16 \u2692 \ud83d\ude9a \ud83e\uddf0.</p> <p>\ud83d\udd17 \ud83d\udc96:</p> <ul> <li> <p>Uvicorn: \ud83d\udd2b \ud83d\udcbd</p> <ul> <li>\ud83d\udc83: (\u2699\ufe0f Uvicorn) \ud83d\udd78 \ud83d\udd78<ul> <li>ReadyAPI: (\u2699\ufe0f \ud83d\udc83) \ud83d\udee0\ufe0f \ud83d\udd78 \u23ee\ufe0f \ud83d\udcda \ud83c\udf16 \u2692 \ud83c\udfd7 \ud83d\udd17, \u23ee\ufe0f \ud83d\udcbd \ud83d\udd2c, \u2652\ufe0f.</li> </ul> </li> </ul> </li> <li> <p>Uvicorn:</p> <ul> <li>\ud83d\udd1c \u2714\ufe0f \ud83c\udfc6 \ud83c\udfad, \u26ab\ufe0f \ud83d\udeab \u2714\ufe0f \ud83c\udf05 \u2795 \ud83d\udcdf \u2196\ufe0f \u26aa\ufe0f\u27a1\ufe0f \ud83d\udcbd \u26ab\ufe0f.</li> <li>\ud83d\udc46 \ud83d\udeab\ud83d\udd1c \u270d \ud83c\ude38 Uvicorn \ud83d\udd17. \ud83d\udc48 \ud83d\udd1c \u26d3 \ud83d\udc48 \ud83d\udc46 \ud83d\udcdf \ud83d\udd1c \u2714\ufe0f \ud83d\udd0c \ud83c\udf16 \u2696\ufe0f \ud83c\udf18, \ud83c\udf18, \ud83c\udf10 \ud83d\udcdf \ud83d\ude9a \ud83d\udc83 (\u2696\ufe0f ReadyAPI). &amp; \ud83d\udea5 \ud83d\udc46 \ud83d\udc48, \ud83d\udc46 \ud83c\udfc1 \ud83c\ude38 \ud83d\udd1c \u2714\ufe0f \ud83c\udf8f \ud83c\udf25 \u2714\ufe0f \u2699\ufe0f \ud83d\udee0\ufe0f &amp; \ud83d\udcc9 \ud83d\udc46 \ud83d\udcf1 \ud83d\udcdf &amp; \ud83d\udc1b.</li> <li>\ud83d\udea5 \ud83d\udc46 \u2696 Uvicorn, \ud83d\udd2c \u26ab\ufe0f \ud83d\udee1 \ud83d\udc78, Hypercorn, \u2733, \u2652\ufe0f. \ud83c\ude38 \ud83d\udcbd.</li> </ul> </li> <li>\ud83d\udc83:<ul> <li>\ud83d\udd1c \u2714\ufe0f \u23ed \ud83c\udfc6 \ud83c\udfad, \u23ee\ufe0f Uvicorn. \ud83d\udc50, \ud83d\udc83 \u2699\ufe0f Uvicorn \ud83c\udfc3. , \u26ab\ufe0f \ud83c\udfb2 \ud83d\udcaa \ud83d\udd74 \ud83e\udd1a \"\ud83d\udc0c\" \ud83c\udf18 Uvicorn \u2714\ufe0f \ud83d\udee0\ufe0f \ud83c\udf05 \ud83d\udcdf.</li> <li>\u270b\ufe0f \u26ab\ufe0f \ud83d\ude9a \ud83d\udc46 \ud83e\uddf0 \ud83c\udfd7 \ud83d\ude45 \ud83d\udd78 \ud83c\ude38, \u23ee\ufe0f \ud83d\udd79 \u2693\ufe0f \ud83d\udd1b \u27a1, \u2652\ufe0f.</li> <li>\ud83d\udea5 \ud83d\udc46 \u2696 \ud83d\udc83, \ud83d\udd2c \u26ab\ufe0f \ud83d\udee1 \ud83e\udd23, \ud83c\udffa, \u2733, \u2652\ufe0f. \ud83d\udd78 \ud83d\udee0\ufe0f (\u2696\ufe0f \ud83d\udd78).</li> </ul> </li> <li>ReadyAPI:<ul> <li>\ud83c\udf8f \ud83c\udf0c \ud83d\udc48 \ud83d\udc83 \u2699\ufe0f Uvicorn &amp; \ud83d\udeab\ud83d\udd1c \u23e9 \ud83c\udf18 \u26ab\ufe0f, ReadyAPI \u2699\ufe0f \ud83d\udc83, \u26ab\ufe0f \ud83d\udeab\ud83d\udd1c \u23e9 \ud83c\udf18 \u26ab\ufe0f.</li> <li>ReadyAPI \ud83d\ude9a \ud83c\udf05 \u2692 \ud83d\udd1b \ud83d\udd1d \ud83d\udc83. \u2692 \ud83d\udc48 \ud83d\udc46 \ud83c\udf16 \ud83d\udd67 \ud83d\udcaa \ud83d\udd50\u2754 \ud83c\udfd7 \ud83d\udd17, \ud83d\udc96 \ud83d\udcbd \ud83d\udd2c &amp; \ud83d\udee0\ufe0f. &amp; \u2699\ufe0f \u26ab\ufe0f, \ud83d\udc46 \ud83e\udd1a \ud83c\udfe7 \ud83e\uddfe \ud83c\udd93 (\ud83c\udfe7 \ud83e\uddfe \ud83d\udeab \ud83d\udeae \ud83c\udf25 \ud83c\udfc3\u200d\u2642 \ud83c\ude38, \u26ab\ufe0f \ud83c\udfd7 \ud83d\udd1b \ud83d\udd74).</li> <li>\ud83d\udea5 \ud83d\udc46 \ud83d\udeab \u2699\ufe0f ReadyAPI &amp; \u2699\ufe0f \ud83d\udc83 \ud83d\udd17 (\u2696\ufe0f \u27951\ufe0f\u20e3 \ud83e\uddf0, \ud83d\udc96 \ud83e\udd23, \ud83c\udffa, \ud83c\udd98, \u2652\ufe0f) \ud83d\udc46 \ud83d\udd1c \u2714\ufe0f \ud83d\udee0\ufe0f \ud83c\udf10 \ud83d\udcbd \ud83d\udd2c &amp; \ud83d\udee0\ufe0f \ud83d\udc46. , \ud83d\udc46 \ud83c\udfc1 \ud83c\ude38 \ud83d\udd1c \u2714\ufe0f \ud83c\udf8f \ud83c\udf25 \ud83d\udea5 \u26ab\ufe0f \ud83c\udfd7 \u2699\ufe0f ReadyAPI. &amp; \ud83d\udcda \ud83d\udcbc, \ud83d\udc49 \ud83d\udcbd \ud83d\udd2c &amp; \ud83d\udee0\ufe0f \ud83e\udd8f \ud83d\udcb8 \ud83d\udcdf \u270d \ud83c\ude38.</li> <li>, \u2699\ufe0f ReadyAPI \ud83d\udc46 \u267b \ud83d\udee0\ufe0f \ud83d\udd70, \ud83d\udc1b, \u23f8 \ud83d\udcdf, &amp; \ud83d\udc46 \ud83d\udd1c \ud83c\udfb2 \ud83e\udd1a \ud83c\udf8f \ud83c\udfad (\u2696\ufe0f \ud83d\udc4d) \ud83d\udc46 \ud83d\udd1c \ud83d\udea5 \ud83d\udc46 \ud83d\udeab \u2699\ufe0f \u26ab\ufe0f (\ud83d\udc46 \ud83d\udd1c \u2714\ufe0f \ud83d\udee0\ufe0f \u26ab\ufe0f \ud83c\udf10 \ud83d\udc46 \ud83d\udcdf).</li> <li>\ud83d\udea5 \ud83d\udc46 \u2696 ReadyAPI, \ud83d\udd2c \u26ab\ufe0f \ud83d\udee1 \ud83d\udd78 \ud83c\ude38 \ud83d\udee0\ufe0f (\u2696\ufe0f \u2692 \ud83e\uddf0) \ud83d\udc48 \ud83d\ude9a \ud83d\udcbd \ud83d\udd2c, \ud83d\udee0\ufe0f &amp; \ud83e\uddfe, \ud83d\udc96 \ud83c\udffa-apispec, NestJS, \u2668, \u2652\ufe0f. \ud83d\udee0\ufe0f \u23ee\ufe0f \ud83d\udee0\ufe0f \ud83c\udfe7 \ud83d\udcbd \ud83d\udd2c, \ud83d\udee0\ufe0f &amp; \ud83e\uddfe.</li> </ul> </li> </ul>"},{"location":"features/","title":"\u2692","text":""},{"location":"features/#readyapi","title":"ReadyAPI \u2692","text":"<p>ReadyAPI \ud83e\udd1d \ud83d\udc46 \ud83d\udcc4:</p>"},{"location":"features/#_2","title":"\u2693\ufe0f \ud83d\udd1b \ud83d\udcc2 \ud83d\udc29","text":"<ul> <li>\ud83d\uddc4 \ud83d\udee0\ufe0f \ud83c\udfd7, \u2705 \ud83d\udcc4 \u27a1 \ud83d\udee0\ufe0f, \ud83d\udd22, \ud83d\udcaa \ud83d\udce8, \ud83d\udc82\u200d\u2642, \u2652\ufe0f.</li> <li>\ud83c\udfe7 \ud83d\udcca \ud83c\udff7 \ud83e\uddfe \u23ee\ufe0f \ud83c\udfbb \ud83d\udd17 (\ud83d\uddc4 \u26ab\ufe0f \ud83e\udde2 \ud83d\udd1b \ud83c\udfbb \ud83d\udd17).</li> <li>\ud83d\udd27 \ud83e\udd2d \ud83d\udc6b \ud83d\udc29, \u23ee\ufe0f \ud83d\ude14 \ud83d\udd2c. \u21a9\ufe0f \ud83d\udc4e \ud83e\uddfd \ud83d\udd1b \ud83d\udd1d.</li> <li>\ud83d\udc49 \u2714 \u2699\ufe0f \ud83c\udfe7 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udcdf \u26a1 \ud83d\udcda \ud83c\uddea\ud83c\uddf8.</li> </ul>"},{"location":"features/#_3","title":"\ud83c\udfe7 \ud83e\ude7a","text":"<p>\ud83c\udf93 \ud83d\udee0\ufe0f \ud83e\uddfe &amp; \ud83d\udd2c \ud83d\udd78 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd22. \ud83d\udee0\ufe0f \u2693\ufe0f \ud83d\udd1b \ud83d\uddc4, \ud83d\udce4 \ud83d\udc97 \ud83c\udf9b, 2\ufe0f\u20e3 \ud83d\udd0c \ud83d\udd22.</p> <ul> <li>\ud83e\udd81 \ud83c\udf9a, \u23ee\ufe0f \ud83c\udf93 \ud83d\udd2c, \ud83e\udd19 &amp; \ud83d\udcaf \ud83d\udc46 \ud83d\udee0\ufe0f \ud83d\udd17 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udda5.</li> </ul> <p></p> <ul> <li>\ud83c\udf9b \ud83d\udee0\ufe0f \ud83e\uddfe \u23ee\ufe0f \ud83d\udcc4.</li> </ul> <p></p>"},{"location":"features/#_4","title":"\ud83c\udfdb \ud83d\udc0d","text":"<p>\u26ab\ufe0f \ud83c\udf10 \u2693\ufe0f \ud83d\udd1b \ud83d\udc29 \ud83d\udc0d 3\ufe0f\u20e3.6\ufe0f\u20e3 \ud83c\udd8e \ud83d\udcc4 (\ud83d\udc4f Pydantic). \ud83d\ude45\u200d\u2642 \ud83c\udd95 \u2755 \ud83d\udca1. \ud83d\udc29 \ud83c\udfdb \ud83d\udc0d.</p> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udcaa 2\ufe0f\u20e3 \u23f2 \u2197\ufe0f \u2754 \u2699\ufe0f \ud83d\udc0d \ud83c\udd8e (\ud83d\udea5 \ud83d\udc46 \ud83d\udeab \u2699\ufe0f ReadyAPI), \u2705 \ud83d\udccf \ud83d\udd30: \ud83d\udc0d \ud83c\udd8e.</p> <p>\ud83d\udc46 \u270d \ud83d\udc29 \ud83d\udc0d \u23ee\ufe0f \ud83c\udd8e:</p> <pre><code>from datetime import date\n\nfrom pydantic import BaseModel\n\n# Declare a variable as a str\n# and get editor support inside the function\ndef main(user_id: str):\n    return user_id\n\n\n# A Pydantic model\nclass User(BaseModel):\n    id: int\n    name: str\n    joined: date\n</code></pre> <p>\ud83d\udc48 \ud83d\udcaa \u2934\ufe0f \u2699\ufe0f \ud83d\udc96:</p> <pre><code>my_user: User = User(id=3, name=\"John Doe\", joined=\"2018-07-19\")\n\nsecond_user_data = {\n    \"id\": 4,\n    \"name\": \"Mary\",\n    \"joined\": \"2018-11-30\",\n}\n\nmy_second_user: User = User(**second_user_data)\n</code></pre> <p>Info</p> <p><code>**second_user_data</code> \u26d3:</p> <p>\ud83d\udeb6\u200d\u2640\ufe0f \ud83d\udd11 &amp; \ud83d\udcb2 <code>second_user_data</code> #\ufe0f\u20e3 \ud83d\udd17 \ud83d\udd11-\ud83d\udcb2 \u274c, \ud83c\udf13: <code>User(id=4, name=\"Mary\", joined=\"2018-11-30\")</code></p>"},{"location":"features/#_5","title":"\ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udc15\u200d\ud83e\uddba","text":"<p>\ud83c\udf10 \ud83d\udee0\ufe0f \ud83c\udfd7 \u23e9 &amp; \ud83c\udfcb\ufe0f \u2699\ufe0f, \ud83c\udf10 \ud83d\udeab \ud83d\udcaf \ud83d\udd1b \ud83d\udc97 \ud83d\udc68\u200d\ud83c\udfa8 \u23ed \u25b6\ufe0f \ud83d\udee0\ufe0f, \ud83d\ude9a \ud83c\udfc6 \ud83d\udee0\ufe0f \ud83d\udca1.</p> <p>\ud83c\udfc1 \ud83d\udc0d \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd2c \u26ab\ufe0f \ud83c\udd91 \ud83d\udc48 \ud83c\udf05 \u2699\ufe0f \u2692 \"\u270d\".</p> <p>\ud83c\udf82 ReadyAPI \ud83d\udee0\ufe0f \u2693\ufe0f \ud83d\ude0c \ud83d\udc48. \u270d \ud83d\udc77 \ud83c\udf10.</p> <p>\ud83d\udc46 \ud83d\udd1c \ud83d\udece \ud83d\udcaa \ud83d\udc5f \ud83d\udd19 \ud83e\ude7a.</p> <p>\ud83d\udce5 \u2754 \ud83d\udc46 \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udcaa \u2139 \ud83d\udc46:</p> <ul> <li>\ud83c\udf99 \ud83c\udf99 \ud83d\udcdf:</li> </ul> <p></p> <ul> <li>\ud83d\uddd2:</li> </ul> <p></p> <p>\ud83d\udc46 \ud83d\udd1c \ud83e\udd1a \ud83d\udee0\ufe0f \ud83d\udcdf \ud83d\udc46 5\ufe0f\u20e3\ud83d\udcc6 \ud83e\udd14 \ud83d\udcaa \u23ed. \ud83d\uddbc, <code>price</code> \ud83d\udd11 \ud83d\udd18 \ud83c\udfbb \ud83d\udcaa (\ud83d\udc48 \ud83d\udcaa \u2714\ufe0f \ud83d\udc26) \ud83d\udc48 \ud83d\udc5f \u26aa\ufe0f\u27a1\ufe0f \ud83d\udce8.</p> <p>\ud83d\ude45\u200d\u2642 \ud83c\udf16 \u2328 \u274c \ud83d\udd11 \ud83d\udcdb, \ud83d\udc5f \ud83d\udd19 &amp; \u27a1 \ud83d\udd96 \ud83e\ude7a, \u2696\ufe0f \ud83d\udcdc \ud83c\udd99 &amp; \ud83d\udd3d \ud83d\udd0e \ud83d\udea5 \ud83d\udc46 \ud83d\ude12 \u2699\ufe0f <code>username</code> \u2696\ufe0f <code>user_name</code>.</p>"},{"location":"features/#_6","title":"\ud83d\udccf","text":"<p>\u26ab\ufe0f \u2714\ufe0f \ud83e\udd14 \ud83d\udd22 \ud83c\udf10, \u23ee\ufe0f \ud83d\udce6 \ud83d\udcf3 \ud83c\udf10. \ud83c\udf10 \ud83d\udd22 \ud83d\udcaa \ud83d\udc4c-\ud83c\udfa7 \u26ab\ufe0f\u2754 \ud83d\udc46 \ud83d\udcaa &amp; \ud83d\udd2c \ud83d\udee0\ufe0f \ud83d\udc46 \ud83d\udcaa.</p> <p>\u270b\ufe0f \ud83d\udd22, \u26ab\ufe0f \ud83c\udf10 \"\ud83d\udc77\".</p>"},{"location":"features/#_7","title":"\ud83d\udd2c","text":"<ul> <li> <p>\ud83d\udd2c \ud83c\udf05 (\u2696\ufe0f \ud83c\udf10 \u2753) \ud83d\udc0d \ud83d\udcbd \ud83c\udd8e, \ud83d\udd0c:</p> <ul> <li>\ud83c\udfbb \ud83c\udf9a (<code>dict</code>).</li> <li>\ud83c\udfbb \ud83c\udfbb (<code>list</code>) \u2696 \ud83c\udfec \ud83c\udd8e.</li> <li>\ud83c\udfbb (<code>str</code>) \ud83c\udfd1, \ud83d\udd2c \ud83d\udd59 &amp; \ud83d\udc5f \ud83d\udcd0.</li> <li>\ud83d\udd22 (<code>int</code>, <code>float</code>) \u23ee\ufe0f \ud83d\udd59 &amp; \ud83d\udc5f \ud83d\udcb2, \u2652\ufe0f.</li> </ul> </li> <li> <p>\ud83d\udd2c \ud83c\udf05 \ud83d\ude0d \ud83c\udd8e, \ud83d\udc96:</p> <ul> <li>\ud83d\udcdb.</li> <li>\ud83d\udce7.</li> <li>\ud83c\udd94.</li> <li>...&amp; \ud83c\udf8f.</li> </ul> </li> </ul> <p>\ud83c\udf10 \ud83d\udd2c \ud83c\udf75 \ud83d\udc4d-\ud83c\udfdb &amp; \ud83c\udfcb\ufe0f Pydantic.</p>"},{"location":"features/#_8","title":"\ud83d\udc82\u200d\u2642 &amp; \ud83e\udd1d","text":"<p>\ud83d\udc82\u200d\u2642 &amp; \ud83e\udd1d \ud83d\udee0\ufe0f. \ud83c\udf75 \ud83d\ude46 \u26a0 \u23ee\ufe0f \ud83d\udcbd \u2696\ufe0f \ud83d\udcca \ud83c\udff7.</p> <p>\ud83c\udf10 \ud83d\udc82\u200d\u2642 \u2696 \ud83d\udd2c \ud83d\uddc4, \ud83d\udd0c:</p> <ul> <li>\ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udd30.</li> <li>Oauth2\ufe0f\u20e3 (\u23ee\ufe0f \ud83e\udd59 \ud83e\udd1d). \u2705 \ud83d\udd30 \ud83d\udd1b Oauth2\ufe0f\u20e3 \u23ee\ufe0f \ud83e\udd59.</li> <li>\ud83d\udee0\ufe0f \ud83d\udd11:<ul> <li>\ud83c\udf9a.</li> <li>\ud83d\udd22 \ud83d\udd22.</li> <li>\ud83c\udf6a, \u2652\ufe0f.</li> </ul> </li> </ul> <p>\u2795 \ud83c\udf10 \ud83d\udc82\u200d\u2642 \u2692 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc83 (\ud83d\udd0c \ud83c\udf89 \ud83c\udf6a).</p> <p>\ud83c\udf10 \ud83c\udfd7 \u267b \ud83e\uddf0 &amp; \ud83e\uddb2 \ud83d\udc48 \u23e9 \ud83d\udee0\ufe0f \u23ee\ufe0f \ud83d\udc46 \u2699\ufe0f, \ud83d\udcca \ud83c\udfea, \ud83d\udd17 &amp; \u2601 \ud83d\udcbd, \u2652\ufe0f.</p>"},{"location":"features/#_9","title":"\ud83d\udd17 \ud83d\udc89","text":"<p>ReadyAPI \ud83d\udd0c \ud83d\udcf6 \u23e9 \u2699\ufe0f, \u270b\ufe0f \ud83d\udcf6 \ud83c\udfcb\ufe0f \ud83d\udd17 \ud83d\udc89 \u2699\ufe0f.</p> <ul> <li>\ud83d\udd17 \ud83d\udcaa \u2714\ufe0f \ud83d\udd17, \ud83c\udfd7 \ud83d\udd17 \u2696\ufe0f \"\ud83d\udcca\" \ud83d\udd17.</li> <li>\ud83c\udf10 \ud83d\udd01 \ud83c\udf75 \ud83d\udee0\ufe0f.</li> <li>\ud83c\udf10 \ud83d\udd17 \ud83d\udcaa \ud83d\ude9a \ud83d\udcbd \u26aa\ufe0f\u27a1\ufe0f \ud83d\udce8 &amp; \u2194 \u27a1 \ud83d\udee0\ufe0f \u269b &amp; \ud83c\udfe7 \ud83e\uddfe.</li> <li>\ud83c\udfe7 \ud83d\udd2c \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22 \ud83d\udd2c \ud83d\udd17.</li> <li>\ud83d\udc15\u200d\ud83e\uddba \ud83c\udfd7 \ud83d\udc69\u200d\ud83d\udcbb \ud83e\udd1d \u2699\ufe0f, \ud83d\udcbd \ud83d\udd17, \u2652\ufe0f.</li> <li>\ud83d\ude45\u200d\u2642 \u26a0 \u23ee\ufe0f \ud83d\udcbd, \ud83d\udd78, \u2652\ufe0f. \u270b\ufe0f \u23e9 \ud83d\udee0\ufe0f \u23ee\ufe0f \ud83c\udf10 \ud83d\udc6b.</li> </ul>"},{"location":"features/#-","title":"\u267e \"\ud83d\udd0c-\ud83d\udd0c\"","text":"<p>\u2696\ufe0f \ud83c\udf8f \ud83c\udf0c, \ud83d\ude45\u200d\u2642 \ud83d\udcaa \ud83d\udc6b, \ud83d\uddc4 &amp; \u2699\ufe0f \ud83d\udcdf \ud83d\udc46 \ud83d\udcaa.</p> <p>\ud83d\ude46 \ud83d\udee0\ufe0f \ud83c\udfd7 \ud83d\ude45 \u2699\ufe0f (\u23ee\ufe0f \ud83d\udd17) \ud83d\udc48 \ud83d\udc46 \ud83d\udcaa \u270d \"\ud83d\udd0c-\" \ud83d\udc46 \ud83c\ude38 2\ufe0f\u20e3 \u23f8 \ud83d\udcdf \u2699\ufe0f \ud83c\udf8f \ud83d\udcca &amp; \u2755 \u2699\ufe0f \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f.</p>"},{"location":"features/#_10","title":"\ud83d\udcaf","text":"<ul> <li>1\ufe0f\u20e30\ufe0f\u20e30\ufe0f\u20e3 \ud83d\udcaf \ud83d\udcaf \ud83d\udcb0.</li> <li>1\ufe0f\u20e30\ufe0f\u20e30\ufe0f\u20e3 \ud83d\udcaf \ud83c\udd8e \u270d \ud83d\udcdf \ud83e\udde2.</li> <li>\u2699\ufe0f \ud83c\udfed \ud83c\ude38.</li> </ul>"},{"location":"features/#_11","title":"\ud83d\udc83 \u2692","text":"<p>ReadyAPI \ud83c\udf55 \ud83d\udd17 \u23ee\ufe0f (&amp; \u2693\ufe0f \ud83d\udd1b) \ud83d\udc83. , \ud83d\ude46 \ud83c\udf16 \ud83d\udc83 \ud83d\udcdf \ud83d\udc46 \u2714\ufe0f, \ud83d\udd1c \ud83d\udc77.</p> <p><code>ReadyAPI</code> \ud83e\udd19 \ud83c\udfa7-\ud83c\udf93 <code>Starlette</code>. , \ud83d\udea5 \ud83d\udc46 \u23ea \ud83d\udcad \u2696\ufe0f \u2699\ufe0f \ud83d\udc83, \ud83c\udf05 \ud83d\udee0\ufe0f \ud83d\udd1c \ud83d\udc77 \ud83c\udf8f \ud83c\udf0c.</p> <p>\u23ee\ufe0f ReadyAPI \ud83d\udc46 \ud83e\udd1a \ud83c\udf10 \ud83d\udc83'\u24c2 \u2692 (ReadyAPI \ud83d\udc83 \ud83d\udd1b \ud83d\udc8a):</p> <ul> <li>\ud83e\udd19 \ud83c\udf86 \ud83c\udfad. \u26ab\ufe0f 1\ufe0f\u20e3 \u23e9 \ud83d\udc0d \ud83d\udee0\ufe0f \ud83d\udcaa, \ud83d\udd1b \ud83c\uddf7\ud83c\uddea \u23ee\ufe0f \u2733 &amp; \ud83d\udeb6.</li> <li>** *\ufe0f\u20e3 ** \ud83d\udc15\u200d\ud83e\uddba.</li> <li>-\ud83d\udee0\ufe0f \ud83d\udda5 \ud83d\udccb.</li> <li>\ud83d\udd74 &amp; \ud83e\udd2b \ud83c\udf89.</li> <li>\ud83d\udcaf \ud83d\udc69\u200d\ud83d\udcbb \ud83c\udfd7 \ud83d\udd1b \ud83c\uddf8\ud83c\uddf2.</li> <li>\u269c, \ud83d\udddc, \ud83c\udfbb \ud83d\udcc1, \ud83c\udf8f \ud83d\udce8.</li> <li>\ud83c\udf89 &amp; \ud83c\udf6a \ud83d\udc15\u200d\ud83e\uddba.</li> <li>1\ufe0f\u20e30\ufe0f\u20e30\ufe0f\u20e3 \ud83d\udcaf \ud83d\udcaf \ud83d\udcb0.</li> <li>1\ufe0f\u20e30\ufe0f\u20e30\ufe0f\u20e3 \ud83d\udcaf \ud83c\udd8e \u270d \u270d.</li> </ul>"},{"location":"features/#pydantic","title":"Pydantic \u2692","text":"<p>ReadyAPI \ud83c\udf55 \ud83d\udd17 \u23ee\ufe0f (&amp; \u2693\ufe0f \ud83d\udd1b) Pydantic. , \ud83d\ude46 \ud83c\udf16 Pydantic \ud83d\udcdf \ud83d\udc46 \u2714\ufe0f, \ud83d\udd1c \ud83d\udc77.</p> <p>\u2705 \ud83d\udd22 \ud83d\uddc3 \u2693\ufe0f \ud83d\udd1b Pydantic, \ud83d\udc1c\u24c2, \ud83c\udfed\u24c2 \ud83d\udcbd.</p> <p>\ud83d\udc49 \u26d3 \ud83d\udc48 \ud83d\udcda \ud83d\udcbc \ud83d\udc46 \ud83d\udcaa \ud83d\udeb6\u200d\u2640\ufe0f \ud83c\udf8f \ud83c\udf9a \ud83d\udc46 \ud83e\udd1a \u26aa\ufe0f\u27a1\ufe0f \ud83d\udce8 \ud83d\udd17 \ud83d\udcbd, \ud83c\udf10 \u2714 \ud83d\udd01.</p> <p>\ud83c\udf8f \u2714 \ud83c\udf8f \ud83c\udf0c \ud83e\udd2d, \ud83d\udcda \ud83d\udcbc \ud83d\udc46 \ud83d\udcaa \ud83d\udeb6\u200d\u2640\ufe0f \ud83c\udf9a \ud83d\udc46 \ud83e\udd1a \u26aa\ufe0f\u27a1\ufe0f \ud83d\udcbd \ud83d\udd17 \ud83d\udc69\u200d\ud83d\udcbb.</p> <p>\u23ee\ufe0f ReadyAPI \ud83d\udc46 \ud83e\udd1a \ud83c\udf10 Pydantic'\u24c2 \u2692 (ReadyAPI \u2693\ufe0f \ud83d\udd1b Pydantic \ud83c\udf10 \ud83d\udcbd \ud83d\ude9a):</p> <ul> <li>\ud83d\ude45\u200d\u2642 \ud83d\udd20:<ul> <li>\ud83d\ude45\u200d\u2642 \ud83c\udd95 \ud83d\udd17 \ud83d\udd11 \u25fe-\ud83c\uddea\ud83c\uddf8 \ud83d\udca1.</li> <li>\ud83d\udea5 \ud83d\udc46 \ud83d\udcad \ud83d\udc0d \ud83c\udd8e \ud83d\udc46 \ud83d\udcad \u2754 \u2699\ufe0f Pydantic.</li> </ul> </li> <li>\ud83e\udd3e \ud83c\udf86 \u23ee\ufe0f \ud83d\udc46 \ud83d\udcbe/\ud83e\uddf6/\ud83e\udde0:<ul> <li>\u21a9\ufe0f Pydantic \ud83d\udcca \ud83d\udcca \ud83d\udc50 \ud83c\udf93 \ud83d\udc46 \ud83d\udd2c; \ud83d\ude98-\ud83d\udee0\ufe0f, \ud83e\uddfd, \u270d &amp; \ud83d\udc46 \ud83e\udd14 \ud83d\udd1c \ud83c\udf10 \ud83d\udc77 \u2611 \u23ee\ufe0f \ud83d\udc46 \u2714 \ud83d\udcbd.</li> </ul> </li> <li>\u2714 \ud83c\udfd7 \ud83d\udcca:<ul> <li>\u2699\ufe0f \ud83d\udd17 Pydantic \ud83c\udff7, \ud83d\udc0d <code>typing</code>'\u24c2 <code>List</code> &amp; <code>Dict</code>, \u2652\ufe0f.</li> <li>&amp; \ud83d\udcb3 \u2714 \ud83c\udfd7 \ud83d\udcbd \ud83d\udd17 \ud83c\udfaf &amp; \ud83d\udcaa \ud83d\udd2c, \u2705 &amp; \ud83d\udcc4 \ud83c\udfbb \ud83d\udd17.</li> <li>\ud83d\udc46 \ud83d\udcaa \u2714\ufe0f \ud83d\ude47 \ud83d\udc26 \ud83c\udfbb \ud83c\udf9a &amp; \u2714\ufe0f \ud83d\udc6b \ud83c\udf10 \u2714 &amp; \u270d.</li> </ul> </li> <li>\ud83c\udfe7:<ul> <li>Pydantic \u2714 \ud83d\udec3 \ud83d\udcca \ud83c\udd8e \ud83d\udd2c \u2696\ufe0f \ud83d\udc46 \ud83d\udcaa \u2194 \ud83d\udd2c \u23ee\ufe0f \ud83d\udc69\u200d\ud83d\udd2c \ud83d\udd1b \ud83c\udff7 \ud83c\udf80 \u23ee\ufe0f \ud83d\udcb3 \ud83d\udc68\u200d\ud83c\udfa8.</li> </ul> </li> <li>1\ufe0f\u20e30\ufe0f\u20e30\ufe0f\u20e3 \ud83d\udcaf \ud83d\udcaf \ud83d\udcb0.</li> </ul>"},{"location":"help-readyapi/","title":"\u2139 ReadyAPI - \ud83e\udd1a \u2139","text":"<p>\ud83d\udc46 \ud83d\udc96 ReadyAPI\u2753</p> <p>\ud83d\udd1c \ud83d\udc46 \ud83d\udc96 \u2139 ReadyAPI, \ud83c\udf8f \ud83d\udc69\u200d\ud83d\udcbb, &amp; \ud83d\udcd5 \u2753</p> <p>\u2696\ufe0f \ud83d\udd1c \ud83d\udc46 \ud83d\udc96 \ud83e\udd1a \u2139 \u23ee\ufe0f ReadyAPI\u2753</p> <p>\ud83d\udce4 \ud83d\udcf6 \ud83d\ude45 \ud83c\udf0c \u2139 (\ud83d\udcda \ud83d\udd0c 1\ufe0f\u20e3 \u2696\ufe0f 2\ufe0f\u20e3 \ud83d\udd8a).</p> <p>&amp; \ud83d\udce4 \ud83d\udcda \ud83c\udf0c \ud83e\udd1a \u2139 \ud83d\udc81\u200d\u2642\ufe0f.</p>"},{"location":"help-readyapi/#_1","title":"\ud83d\udc71\ud83d\udcd4 \ud83d\udcf0","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udc71\ud83d\udcd4 (\ud83d\udc0c) ReadyAPI &amp; \ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udcf0 \ud83d\udea7 \u2139 \ud83d\udd03:</p> <ul> <li>\ud83d\udcf0 \ud83d\udd03 ReadyAPI &amp; \ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc76</li> <li>\ud83e\uddae \ud83d\udc76</li> <li>\u2692 \ud83d\udc76</li> <li>\ud83d\udc94 \ud83d\udd00 \ud83d\udc76</li> <li>\ud83d\udc81\u200d\u2642 &amp; \ud83c\udfb1 \ud83d\udc76</li> </ul>"},{"location":"help-readyapi/#readyapi","title":"\u23e9 ReadyAPI \ud83d\udd1b \ud83d\udc71\ud83d\udcd4","text":"<p>\u23e9 \ud83d\udc36 Readyapi \ud83d\udd1b \ud83d\udc71\ud83d\udcd4 \ud83e\udd1a \ud83d\udcf0 \ud83d\udcf0 \ud83d\udd03 ReadyAPI. \ud83d\udc76</p>"},{"location":"help-readyapi/#readyapi_1","title":"\u2734 ReadyAPI \ud83d\udcc2","text":"<p>\ud83d\udc46 \ud83d\udcaa \"\u2734\" ReadyAPI \ud83d\udcc2 (\ud83d\udd8a \u2734 \ud83d\udd3c \ud83d\udd1d \u25b6\ufe0f\ufe0f): https://github.com/readyapi/readyapi. \ud83d\udc76 \ud83d\udc76</p> <p>\u274e \u2734, \ud83c\udf8f \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd1c \ud83d\udcaa \ud83d\udd0e \u26ab\ufe0f \ud83c\udf05 \ud83d\udcaa &amp; \ud83d\udc40 \ud83d\udc48 \u26ab\ufe0f \u2714\ufe0f \u23ea \u26a0 \ud83c\udf8f.</p>"},{"location":"help-readyapi/#_2","title":"\u231a \ud83d\udcc2 \ud83d\uddc3 \ud83d\ude80","text":"<p>\ud83d\udc46 \ud83d\udcaa \"\u231a\" ReadyAPI \ud83d\udcc2 (\ud83d\udd8a \"\u231a\" \ud83d\udd3c \ud83d\udd1d \u25b6\ufe0f\ufe0f): https://github.com/readyapi/readyapi. \ud83d\udc76</p> <p>\ud83d\udce4 \ud83d\udc46 \ud83d\udcaa \ud83d\udd8a \"\ud83d\ude80 \ud83d\udd74\".</p> <p>\ud83d\udd28 \u26ab\ufe0f, \ud83d\udc46 \ud83d\udd1c \ud83d\udce8 \ud83d\udce8 (\ud83d\udc46 \ud83d\udce7) \ud83d\udd50\u2754 \ud83d\udce4 \ud83c\udd95 \ud83d\ude80 (\ud83c\udd95 \u23ec) ReadyAPI \u23ee\ufe0f \ud83d\udc1b \ud83d\udd27 &amp; \ud83c\udd95 \u2692.</p>"},{"location":"help-readyapi/#_3","title":"\ud83d\udd17 \u23ee\ufe0f \ud83d\udcd5","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udd17 \u23ee\ufe0f \ud83d\udc64 (\ud83c\uddf9\ud83c\udde6 \ud83c\udde9\ud83c\uddec / <code>khulnasoft</code>), \ud83d\udcd5.</p> <p>\ud83d\udc46 \ud83d\udcaa:</p> <ul> <li>\u23e9 \ud83d\udc64 \ud83d\udd1b \ud83d\udcc2.<ul> <li>\ud83d\udc40 \ud83c\udf8f \ud83d\udcc2 \u2139 \ud83c\udfd7 \ud83d\udc64 \u2714\ufe0f \u270d \ud83d\udc48 \ud83d\udcaa \u2139 \ud83d\udc46.</li> <li>\u23e9 \ud83d\udc64 \ud83d\udc40 \ud83d\udd50\u2754 \ud83d\udc64 \u270d \ud83c\udd95 \ud83d\udcc2 \u2139 \ud83c\udfd7.</li> </ul> </li> <li>\u23e9 \ud83d\udc64 \ud83d\udd1b \ud83d\udc71\ud83d\udcd4 \u2696\ufe0f \u2620.<ul> <li>\ud83d\udcac \ud83d\udc64 \u2754 \ud83d\udc46 \u2699\ufe0f ReadyAPI (\ud83d\udc64 \ud83d\udc8c \ud83d\udc42 \ud83d\udc48).</li> <li>\ud83d\udc42 \ud83d\udd50\u2754 \ud83d\udc64 \u2692 \ud83c\udf89 \u2696\ufe0f \ud83d\ude80 \ud83c\udd95 \ud83e\uddf0.</li> <li>\ud83d\udc46 \ud83d\udcaa \u23e9 \ud83d\udc36 Readyapi \ud83d\udd1b \ud83d\udc71\ud83d\udcd4 (\ud83c\udf8f \ud83c\udfe7).</li> </ul> </li> <li>\ud83d\udd17 \u23ee\ufe0f \ud83d\udc64 \ud83d\udd1b \ud83d\udc71\ud83d\udcd4.<ul> <li>\ud83d\udc42 \ud83d\udd50\u2754 \ud83d\udc64 \u2692 \ud83c\udf89 \u2696\ufe0f \ud83d\ude80 \ud83c\udd95 \ud83e\uddf0 (\ud83d\udc50 \ud83d\udc64 \u2699\ufe0f \ud83d\udc71\ud83d\udcd4 \ud83c\udf16 \ud83d\udece \ud83e\udd37 \u2642).</li> </ul> </li> <li>\u270d \u26ab\ufe0f\u2754 \ud83d\udc64 \u270d (\u2696\ufe0f \u23e9 \ud83d\udc64) \ud83d\udd1b \ud83c\uddf8\ud83c\uddf2. \u2696\ufe0f \ud83d\udd09.<ul> <li>\u270d \ud83c\udf8f \ud83d\udcad, \ud83d\udcc4, &amp; \u270d \ud83d\udd03 \ud83e\uddf0 \ud83d\udc64 \u2714\ufe0f \u270d.</li> <li>\u23e9 \ud83d\udc64 \u270d \ud83d\udd50\u2754 \ud83d\udc64 \u270d \ud83d\udd73 \ud83c\udd95.</li> </ul> </li> </ul>"},{"location":"help-readyapi/#readyapi_2","title":"\ud83d\udc71\ud83d\udcd4 \ud83d\udd03 ReadyAPI","text":"<p>\ud83d\udc71\ud83d\udcd4 \ud83d\udd03 ReadyAPI &amp; \u27a1\ufe0f \ud83d\udc64 &amp; \ud83c\udf8f \ud83d\udcad \u26ab\ufe0f\u2754 \ud83d\udc46 \ud83d\udc96 \u26ab\ufe0f. \ud83d\udc76</p> <p>\ud83d\udc64 \ud83d\udc8c \ud83d\udc42 \ud83d\udd03 \u2754 ReadyAPI \ud83d\udc86\u200d\u2642 \u2699\ufe0f, \u26ab\ufe0f\u2754 \ud83d\udc46 \u2714\ufe0f \ud83d\udc96 \u26ab\ufe0f, \u2754 \ud83c\udfd7/\ud83c\udfe2 \ud83d\udc46 \u2699\ufe0f \u26ab\ufe0f, \u2652\ufe0f.</p>"},{"location":"help-readyapi/#readyapi_3","title":"\ud83d\uddf3 ReadyAPI","text":"<ul> <li>\ud83d\uddf3 ReadyAPI \ud83d\udcd0.</li> <li>\ud83d\uddf3 ReadyAPI \ud83d\udcf1.</li> <li>\ud83d\udcac \ud83d\udc46 \u2699\ufe0f ReadyAPI \ud83d\udd1b \u2139.</li> </ul>"},{"location":"help-readyapi/#i","title":"\u2139 \ud83c\udf8f \u23ee\ufe0f \u2754 \ud83d\udcc2","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udd04 &amp; \u2139 \ud83c\udf8f \u23ee\ufe0f \ud83d\udc6b \u2754:</p> <ul> <li>\ud83d\udcc2 \ud83d\udcac</li> <li>\ud83d\udcc2 \u2754</li> </ul> <p>\ud83d\udcda \ud83d\udcbc \ud83d\udc46 5\ufe0f\u20e3\ud83d\udcc6 \u23ea \ud83d\udcad \u2754 \ud83d\udcda \u2754. \ud83d\udc76</p> <p>\ud83d\udea5 \ud83d\udc46 \ud83e\udd1d \ud83d\udcda \ud83d\udc6b\ud83d\udc6b \u23ee\ufe0f \ud83d\udc6b \u2754, \ud83d\udc46 \ud83d\udd1c \u25b6\ufe0f\ufe0f \ud83d\udec2 ReadyAPI \ud83d\udd74. \ud83d\udc76</p> <p>\ud83d\udcad, \ud83c\udfc6 \u26a0 \u261d: \ud83d\udd04 \ud83d\ude07. \ud83d\udc6b\ud83d\udc6b \ud83d\udc5f \u23ee\ufe0f \ud83d\udc6b \ud83d\ude29 &amp; \ud83d\udcda \ud83d\udcbc \ud83d\udeab \ud83d\udcad \ud83c\udfc6 \ud83c\udf0c, \u270b\ufe0f \ud83d\udd04 \ud83c\udfc6 \ud83d\udc46 \ud83d\udcaa \ud83d\ude07. \ud83d\udc76</p> <p>\ud83d\udcad ReadyAPI \ud83d\udc6a \ud83d\ude07 &amp; \ud83d\udc4d. \ud83c\udf8f \ud83d\udd70, \ud83d\udeab \ud83d\udeab \ud83c\udfad \u2696\ufe0f \ud83d\ude1b \ud83c\udfad \u2935 \ud83c\udf8f. \ud83d\udc65 \u2714\ufe0f \u270a \ud83d\udc85 \ud83d\udd20 \ud83c\udf8f.</p> <p>\ud83d\udce5 \u2754 \u2139 \ud83c\udf8f \u23ee\ufe0f \u2754 (\ud83d\udcac \u2696\ufe0f \u2754):</p>"},{"location":"help-readyapi/#_4","title":"\ud83e\udd14 \u2754","text":"<ul> <li> <p>\u2705 \ud83d\udea5 \ud83d\udc46 \ud83d\udcaa \ud83e\udd14 \u26ab\ufe0f\u2754 \ud83c\udfaf &amp; \u2699\ufe0f \ud83d\udcbc \ud83d\udc68\u200d\ud83d\udcbc \ud83d\udcac.</p> </li> <li> <p>\u2934\ufe0f \u2705 \ud83d\udea5 \u2754 (\u2b55 \ud83d\udc6a \u2754) \ud83c\udd91.</p> </li> <li> <p>\ud83d\udcda \ud83d\udcbc \u2754 \ud83d\udcad \ud83d\udd03 \ud83d\udc7d \u2697 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc69\u200d\ud83d\udcbb, \u270b\ufe0f \ud83d\udce4 \ud83d\udcaa \ud83d\udc4d 1\ufe0f\u20e3. \ud83d\udea5 \ud83d\udc46 \ud83d\udcaa \ud83e\udd14 \u26a0 &amp; \u2699\ufe0f \ud83d\udcbc \ud83d\udc4d, \ud83d\udc46 \ud83d\udcaa \ud83d\udcaa \ud83e\udd14 \ud83d\udc4d \ud83c\udf9b \u2697.</p> </li> <li> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udcaa \ud83d\udeab \ud83e\udd14 \u2754, \ud83d\udcad \ud83c\udf16 \u2139.</p> </li> </ul>"},{"location":"help-readyapi/#_5","title":"\ud83d\udd2c \u26a0","text":"<p>\ud83c\udf05 \ud83d\udcbc &amp; \ud83c\udfc6 \u2754 \ud83d\udce4 \ud83d\udd73 \ud83d\udd17 \ud83d\udc68\u200d\ud83d\udcbc \u23ee\ufe0f \ud83d\udcdf.</p> <p>\ud83d\udcda \ud83d\udcbc \ud83d\udc6b \ud83d\udd1c \ud83d\udd74 \ud83d\udcc1 \ud83e\uddec \ud83d\udcdf, \u270b\ufe0f \ud83d\udc48 \ud83d\udeab \ud83e\udd43 \ud83d\udd2c \u26a0.</p> <ul> <li> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udcad \ud83d\udc6b \ud83d\ude9a \u2b50, \ud83d\udd2c, \ud83d\uddbc, \ud83d\udc48 \ud83d\udc46 \ud83d\udcaa \ud83d\udcc1-\ud83d\udccb &amp; \ud83c\udfc3 \ud83c\udf10 \ud83d\udc40 \ud83c\udf8f \u274c \u2696\ufe0f \ud83c\udfad \ud83d\udc6b \ud83d\udc40, \u2696\ufe0f \ud83e\udd14 \ud83d\udc6b \u2699\ufe0f \ud83d\udcbc \ud83d\udc4d.</p> </li> <li> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\ude1f \ud83d\udc81\u200d\u2642\ufe0f \ud83d\udc4d, \ud83d\udc46 \ud83d\udcaa \ud83d\udd04 \u270d \ud83d\uddbc \ud83d\udc96 \ud83d\udc48 \ud83d\udc46, \ud83e\udde2 \ud83d\udd1b \ud83d\udcdb \u26a0. \u2714\ufe0f \ud83e\udd2f \ud83d\udc48 \ud83d\udc49 \ud83d\udcaa \u270a \ud83d\udcda \ud83d\udd70 &amp; \u26ab\ufe0f \ud83d\udcaa \ud83d\udc7b \ud83d\udcad \ud83d\udc6b \u270d \u26a0 \ud83e\udd47.</p> </li> </ul>"},{"location":"help-readyapi/#_6","title":"\ud83e\udd14 \u2697","text":"<ul> <li> <p>\u23ee\ufe0f \ud83d\udc86\u200d\u2642 \ud83d\udcaa \ud83e\udd14 \u2754, \ud83d\udc46 \ud83d\udcaa \ud83e\udd1d \ud83d\udc6b \ud83d\udcaa \u2754.</p> </li> <li> <p>\ud83d\udcda \ud83d\udcbc, \u26ab\ufe0f \ud83d\udc4d \ud83e\udd14 \ud83d\udc6b \ud83d\udcc8 \u26a0 \u2696\ufe0f \u2699\ufe0f \ud83d\udcbc, \u21a9\ufe0f \ud83d\udce4 5\ufe0f\u20e3\ud83d\udcc6 \ud83d\udc4d \ud83c\udf0c \u274e \u26ab\ufe0f \ud83c\udf18 \u26ab\ufe0f\u2754 \ud83d\udc6b \ud83d\udd04.</p> </li> </ul>"},{"location":"help-readyapi/#_7","title":"\ud83d\udcad \ud83d\udd10","text":"<p>\ud83d\udea5 \ud83d\udc6b \ud83d\udce8, \ud83d\udce4 \u2195 \ud83e\udd1e \ud83d\udc46 \ud83d\udd1c \u2714\ufe0f \u274e \ud83d\udc6b \u26a0, \u3297, \ud83d\udc46 \ud83d\udc82\u2757 \ud83e\uddb8</p> <ul> <li> <p>\ud83d\udd1c, \ud83d\udea5 \ud83d\udc48 \u274e \ud83d\udc6b \u26a0, \ud83d\udc46 \ud83d\udcaa \ud83d\udcad \ud83d\udc6b:</p> <ul> <li>\ud83d\udcc2 \ud83d\udcac: \u2122 \ud83c\udfe4 \u2754.</li> <li>\ud83d\udcc2 \u2754: \ud83d\udd10 \u2754**.</li> </ul> </li> </ul>"},{"location":"help-readyapi/#_8","title":"\u231a \ud83d\udcc2 \ud83d\uddc3","text":"<p>\ud83d\udc46 \ud83d\udcaa \"\u231a\" ReadyAPI \ud83d\udcc2 (\ud83d\udd8a \"\u231a\" \ud83d\udd3c \ud83d\udd1d \u25b6\ufe0f\ufe0f): https://github.com/readyapi/readyapi. \ud83d\udc76</p> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udd8a \"\ud83d\udc40\" \u21a9\ufe0f \"\ud83d\ude80 \ud83d\udd74\" \ud83d\udc46 \ud83d\udd1c \ud83d\udce8 \ud83d\udce8 \ud83d\udd50\u2754 \ud83d\udc71 \u270d \ud83c\udd95 \u2754 \u2696\ufe0f \u2754. \ud83d\udc46 \ud83d\udcaa \u2714 \ud83d\udc48 \ud83d\udc46 \ud83d\udd74 \ud83d\udc9a \ud83d\udea8 \ud83d\udd03 \ud83c\udd95 \u2754, \u2696\ufe0f \ud83d\udcac, \u2696\ufe0f \ud83c\udfb8, \u2652\ufe0f.</p> <p>\u2934\ufe0f \ud83d\udc46 \ud83d\udcaa \ud83d\udd04 &amp; \u2139 \ud83d\udc6b \u274e \ud83d\udc48 \u2754.</p>"},{"location":"help-readyapi/#_9","title":"\ud83d\udcad \u2754","text":"<p>\ud83d\udc46 \ud83d\udcaa \u270d \ud83c\udd95 \u2754 \ud83d\udcc2 \ud83d\uddc3, \ud83d\uddbc:</p> <ul> <li>\ud83d\udcad \u2754 \u2696\ufe0f \ud83d\udcad \ud83d\udd03 \u26a0.</li> <li>\ud83e\udd14 \ud83c\udd95 \u2692.</li> </ul> <p>\ud83d\uddd2: \ud83d\udea5 \ud83d\udc46 \u26ab\ufe0f, \u2934\ufe0f \ud83d\udc64 \ud83d\udd1c \ud83d\udcad \ud83d\udc46 \u2139 \ud83c\udf8f. \ud83d\udc76</p>"},{"location":"help-readyapi/#_10","title":"\ud83d\udcc4 \ud83d\udeb2 \ud83d\udce8","text":"<p>\ud83d\udc46 \ud83d\udcaa \u2139 \ud83d\udc64 \ud83d\udcc4 \ud83d\udeb2 \ud83d\udce8 \u26aa\ufe0f\u27a1\ufe0f \ud83c\udf8f.</p> <p>\ud83d\udd04, \ud83d\ude4f \ud83d\udd04 \ud83d\udc46 \ud83c\udfc6 \ud83d\ude07. \ud83d\udc76</p> <p>\ud83d\udce5 \u26ab\ufe0f\u2754 \u2714\ufe0f \ud83e\udd2f &amp; \u2754 \ud83d\udcc4 \ud83d\udeb2 \ud83d\udce8:</p>"},{"location":"help-readyapi/#_11","title":"\ud83e\udd14 \u26a0","text":"<ul> <li> <p>\ud83e\udd47, \u2692 \ud83d\udcad \ud83d\udc46 \ud83e\udd14 \u26a0 \ud83d\udc48 \ud83d\udeb2 \ud83d\udce8 \ud83d\udd04 \u274e. \u26ab\ufe0f \ud83d\udcaa \u2714\ufe0f \ud83d\udccf \ud83d\udcac \ud83d\udcc2 \ud83d\udcac \u2696\ufe0f \u2754.</p> </li> <li> <p>\ud83d\udce4 \ud83d\udc4d \ud83e\udd1e \ud83d\udc48 \ud83d\udeb2 \ud83d\udce8 \ud83d\udeab \ud83e\udd19 \ud83d\udcaa \u21a9\ufe0f \u26a0 \ud83d\udcaa \u274e \ud83c\udf8f \ud83c\udf0c. \u2934\ufe0f \ud83d\udc46 \ud83d\udcaa \ud83e\udd14 \u2696\ufe0f \ud83d\udcad \ud83d\udd03 \ud83d\udc48.</p> </li> </ul>"},{"location":"help-readyapi/#_12","title":"\ud83d\udeab \ud83d\ude1f \ud83d\udd03 \ud83d\udc57","text":"<ul> <li> <p>\ud83d\udeab \ud83d\ude1f \ud83d\udc81\u200d\u2642\ufe0f \ud83c\udf05 \ud83d\udd03 \ud83d\udc5c \ud83d\udc96 \ud83d\udc95 \ud83d\udce7 \ud83d\udc57, \ud83d\udc64 \ud83d\udd1c \ud83e\udd6c &amp; \ud83d\udd17 \ud83d\udec3 \ud83d\udc95 \u274e.</p> </li> <li> <p>\ud83d\udeab \ud83d\ude1f \ud83d\udd03 \ud83d\udc57 \ud83d\udeab, \ud83d\udce4 \u23ea \ud83c\udfe7 \ud83e\uddf0 \u2705 \ud83d\udc48.</p> </li> </ul> <p>&amp; \ud83d\udea5 \ud83d\udce4 \ud83d\ude46 \ud83c\udf8f \ud83d\udc57 \u2696\ufe0f \u2696 \ud83d\udcaa, \ud83d\udc64 \ud83d\udd1c \ud83d\udcad \ud83d\udd17 \ud83d\udc48, \u2696\ufe0f \ud83d\udc64 \ud83d\udd1c \ud83d\udeae \ud83d\udc95 \ud83d\udd1b \ud83d\udd1d \u23ee\ufe0f \ud83d\udcaa \ud83d\udd00.</p>"},{"location":"help-readyapi/#_13","title":"\u2705 \ud83d\udcdf","text":"<ul> <li> <p>\u2705 &amp; \u270d \ud83d\udcdf, \ud83d\udc40 \ud83d\udea5 \u26ab\ufe0f \u2692 \ud83d\udd11, \ud83c\udfc3 \u26ab\ufe0f \ud83c\udf10 &amp; \ud83d\udc40 \ud83d\udea5 \u26ab\ufe0f \ud83e\udd19 \u274e \u26a0.</p> </li> <li> <p>\u2934\ufe0f \ud83c\udfe4 \ud83d\udcac \ud83d\udc48 \ud83d\udc46 \ud83d\udc48, \ud83d\udc48 \u2754 \ud83d\udc64 \ud83d\udd1c \ud83d\udcad \ud83d\udc46 \ud83e\udd19 \u2705 \u26ab\ufe0f.</p> </li> </ul> <p>Info</p> <p>\ud83d\udc50, \ud83d\udc64 \ud83d\udcaa \ud83d\udeab \ud83c\udfaf \ud83d\udc99 \ud83c\udfb8 \ud83d\udc48 \u2714\ufe0f \ud83d\udcda \u2714.</p> <p>\ud83d\udcda \ud83d\udd70 \u26ab\ufe0f \u2714\ufe0f \ud83d\udd28 \ud83d\udc48 \ud83d\udce4 \ud83c\udfb8 \u23ee\ufe0f 3\ufe0f\u20e3, 5\ufe0f\u20e3 \u2696\ufe0f \ud83c\udf05 \u2714, \ud83c\udfb2 \u21a9\ufe0f \ud83d\udcdb \ud83d\ude0c, \u270b\ufe0f \ud83d\udd50\u2754 \ud83d\udc64 \u2705 \ud83c\udfb8, \ud83d\udc6b \ud83e\udd19 \ud83d\udc94, \u2714\ufe0f \ud83d\udc1b, \u2696\ufe0f \ud83d\udeab \u274e \u26a0 \ud83d\udc6b \ud83d\udec4 \u274e. \ud83d\udc76</p> <p>, \u26ab\ufe0f \ud83e\udd19 \u26a0 \ud83d\udc48 \ud83d\udc46 \ud83e\udd19 \u270d &amp; \ud83c\udfc3 \ud83d\udcdf, &amp; \u27a1\ufe0f \ud83d\udc64 \ud83d\udcad \ud83c\udfe4 \ud83d\udc48 \ud83d\udc46. \ud83d\udc76</p> <ul> <li>\ud83d\udea5 \ud83c\uddf5\ud83c\uddf7 \ud83d\udcaa \ud83d\udcc9 \ud83c\udf0c, \ud83d\udc46 \ud83d\udcaa \ud83d\udcad \ud83d\udc48, \u270b\ufe0f \ud83d\udce4 \ud83d\ude45\u200d\u2642 \ud83d\udcaa \ud83d\udc81\u200d\u2642\ufe0f \ud83d\ude1f, \ud83d\udce4 5\ufe0f\u20e3\ud83d\udcc6 \ud83d\udcda \ud83e\udd14 \u261d \ud83c\udf91 (&amp; \ud83d\udc64 \ud83d\udd1c \u2714\ufe0f \ud83d\udc47 \ud83d\udc4d \ud83d\udc4d \ud83d\udc76), \u26ab\ufe0f \ud83d\udc7b \ud83d\udea5 \ud83d\udc46 \ud83d\udcaa \ud83c\udfaf \ud83d\udd1b \u269b \ud83d\udc5c.</li> </ul>"},{"location":"help-readyapi/#_14","title":"\ud83d\udcaf","text":"<ul> <li> <p>\u2139 \ud83d\udc64 \u2705 \ud83d\udc48 \ud83c\uddf5\ud83c\uddf7 \u2714\ufe0f \ud83d\udcaf.</p> </li> <li> <p>\u2705 \ud83d\udc48 \ud83d\udcaf \u274c \u23ed \ud83c\uddf5\ud83c\uddf7. \ud83d\udc76</p> </li> <li> <p>\u2934\ufe0f \u2705 \ud83d\udc48 \ud83d\udcaf \ud83d\udeb6\u200d\u2640\ufe0f \u23ee\ufe0f \ud83c\uddf5\ud83c\uddf7. \ud83d\udc76</p> </li> <li> <p>\ud83d\udcda \ud83c\udfb8 \ud83d\udeab \u2714\ufe0f \ud83d\udcaf, \ud83d\udc46 \ud83d\udcaa \ud83c\udf97 \ud83d\udc6b \ud83d\udeae \ud83d\udcaf, \u2696\ufe0f \ud83d\udc46 \ud83d\udcaa \ud83e\udd14 \ud83d\udcaf \ud83d\udc46. \ud83d\udc48 1\ufe0f\u20e3 \ud83d\udc5c \ud83d\udc48 \ud83c\udf74 \ud83c\udf05 \ud83d\udd70 &amp; \ud83d\udc46 \ud83d\udcaa \u2139 \ud83d\udcda \u23ee\ufe0f \ud83d\udc48.</p> </li> <li> <p>\u2934\ufe0f \ud83c\udfe4 \u26ab\ufe0f\u2754 \ud83d\udc46 \ud83d\udd04, \ud83d\udc48 \ud83c\udf0c \ud83d\udc64 \ud83d\udd1c \ud83d\udcad \ud83d\udc48 \ud83d\udc46 \u2705 \u26ab\ufe0f. \ud83d\udc76</p> </li> </ul>"},{"location":"help-readyapi/#_15","title":"\u270d \ud83d\udeb2 \ud83d\udce8","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udcc9 \u2139 \ud83d\udcdf \u23ee\ufe0f \ud83d\udeb2 \ud83d\udce8, \ud83d\uddbc:</p> <ul> <li>\ud83d\udd27 \ud83e\udd2d \ud83d\udc46 \ud83d\udd0e \ud83d\udd1b \ud83e\uddfe.</li> <li>\ud83d\udcb0 \ud83d\udcc4, \ud83d\udcf9, \u2696\ufe0f \ud83d\udcfb \ud83d\udc46 \u270d \u2696\ufe0f \ud83d\udd0e \ud83d\udd03 ReadyAPI \u270d \ud83d\udc49 \ud83d\udcc1.<ul> <li>\u2692 \ud83d\udcad \ud83d\udc46 \ud83d\udeae \ud83d\udc46 \ud83d\udd17 \u25b6\ufe0f \ud83d\udd17 \ud83d\udcc4.</li> </ul> </li> <li>\u2139 \ud83d\udcac \ud83e\uddfe \ud83d\udc46 \ud83c\uddea\ud83c\uddf8.<ul> <li>\ud83d\udc46 \ud83d\udcaa \u2139 \ud83d\udcc4 \u270d \u270d \ud83c\udf8f.</li> </ul> </li> <li>\ud83d\udee0\ufe0f \ud83c\udd95 \ud83e\uddfe \ud83d\udcc4.</li> <li>\ud83d\udd27 \u267b \u2754/\ud83d\udc1b.<ul> <li>\u2692 \ud83d\udcad \ud83d\udeae \ud83d\udcaf.</li> </ul> </li> <li>\ud83d\udeae \ud83c\udd95 \u2692.<ul> <li>\u2692 \ud83d\udcad \ud83d\udeae \ud83d\udcaf.</li> <li>\u2692 \ud83d\udcad \ud83d\udeae \ud83e\uddfe \ud83d\udea5 \u26ab\ufe0f \ud83d\udd17.</li> </ul> </li> </ul>"},{"location":"help-readyapi/#i-readyapi","title":"\u2139 \ud83d\udea7 ReadyAPI","text":"<p>\u2139 \ud83d\udc64 \ud83d\udea7 ReadyAPI\u2757 \ud83d\udc76</p> <p>\ud83d\udce4 \ud83d\udcda \ud83d\udc77, &amp; \ud83c\udfc6 \u26ab\ufe0f, \ud83d\udc46 \ud83d\udcaa \u26ab\ufe0f.</p> <p>\ud83d\udc51 \ud83d\udccb \ud83d\udc48 \ud83d\udc46 \ud83d\udcaa \u25b6\ufe0f\ufe0f \ud83d\udd1c:</p> <ul> <li>\u2139 \ud83c\udf8f \u23ee\ufe0f \u2754 \ud83d\udcc2 (\ud83d\udc40 \ud83d\udcc4 \ud83d\udd1b).</li> <li>\ud83d\udcc4 \ud83d\udeb2 \ud83d\udce8 (\ud83d\udc40 \ud83d\udcc4 \ud83d\udd1b).</li> </ul> <p>\ud83d\udc48 2\ufe0f\u20e3 \ud83d\udccb \u26ab\ufe0f\u2754 \ud83c\udf74 \ud83d\udd70 \ud83c\udfc6. \ud83d\udc48 \ud83d\udc51 \ud83d\udc77 \ud83c\udfc6 ReadyAPI.</p> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udcaa \u2139 \ud83d\udc64 \u23ee\ufe0f \ud83d\udc48, \ud83d\udc46 \ud83e\udd1d \ud83d\udc64 \ud83d\udea7 ReadyAPI &amp; \u2692 \ud83d\udcad \u26ab\ufe0f \ud83d\udea7 \ud83d\udee0\ufe0f \u23e9 &amp; \ud83d\udc7b. \ud83d\udc76</p>"},{"location":"help-readyapi/#_16","title":"\ud83d\uded1 \ud83d\udcac","text":"<p>\ud83d\uded1 \ud83d\udc76 \ud83d\ude27 \ud83d\udcac \ud83d\udcbd \ud83d\udc76 &amp; \ud83e\udd19 \ud83d\udc45 \u23ee\ufe0f \ud83c\udf8f ReadyAPI \ud83d\udc6a.</p> <p>Tip</p> <p>\u2754, \ud83d\udcad \ud83d\udc6b \ud83d\udcc2 \ud83d\udcac, \ud83d\udce4 \ud83c\udf05 \ud83d\udc4d \ud83e\udd1e \ud83d\udc46 \ud83d\udd1c \ud83d\udce8 \u2139 ReadyAPI \ud83d\udd74.</p> <p>\u2699\ufe0f \ud83d\udcac \ud83d\udd74 \ud83c\udf8f \ud83c\udfe2 \ud83d\udcac.</p>"},{"location":"help-readyapi/#_17","title":"\ud83d\udeab \u2699\ufe0f \ud83d\udcac \u2754","text":"<p>\u2714\ufe0f \ud83e\udd2f \ud83d\udc48 \ud83d\udcac \u2714 \ud83c\udf05 \"\ud83c\udd93 \ud83d\udcac\", \u26ab\ufe0f \u23e9 \ud83d\udcad \u2754 \ud83d\udc48 \ud83d\udc81\u200d\u2642\ufe0f \ud83c\udfe2 &amp; \ud83c\udf05 \u26a0 \u2754,, \ud83d\udc46 \ud83d\udcaa \ud83d\udeab \ud83d\udce8 \u2754.</p> <p>\ud83d\udcc2, \ud83d\udcc4 \ud83d\udd1c \ud83e\uddae \ud83d\udc46 \u270d \u25b6\ufe0f\ufe0f \u2754 \ud83d\udc48 \ud83d\udc46 \ud83d\udcaa \ud83c\udf16 \ud83d\udcaa \ud83e\udd1a \ud83d\udc4d \u2754, \u2696\ufe0f \u274e \u26a0 \ud83d\udc46 \u23ed \ud83d\udcac. &amp; \ud83d\udcc2 \ud83d\udc64 \ud83d\udcaa \u2692 \ud83d\udcad \ud83d\udc64 \ud83d\udd67 \u2754 \ud83c\udf10, \ud83d\udea5 \u26ab\ufe0f \u270a \ud83d\udd70. \ud83d\udc64 \ud83d\udcaa \ud83d\udeab \ud83e\udd19 \ud83d\udc48 \u23ee\ufe0f \ud83d\udcac \u2699\ufe0f. \ud83d\udc76</p> <p>\ud83d\udcac \ud83d\udcac \u2699\ufe0f \ud83d\udeab \ud83d\udcaa \ud83d\udcc7 \ud83d\udcc2, \u2754 &amp; \u2754 5\ufe0f\u20e3\ud83d\udcc6 \ud83e\udd1a \ud83d\udcb8 \ud83d\udcac. &amp; \ud83d\udd74 \ud83d\udd50 \ud83d\udcc2 \ud83d\udcaf \u25b6\ufe0f\ufe0f ReadyAPI \ud83d\udd74, \ud83d\udc46 \ud83d\udd1c \ud83c\udf05 \ud83c\udfb2 \ud83d\udce8 \ud83c\udf05 \ud83d\ude4b \ud83d\udcc2.</p> <p>\ud83d\udd1b \ud83c\udf8f \ud83d\ude84, \ud83d\udce4 \ud83d\udcaf \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udcac \u2699\ufe0f, \ud83d\udce4 \u2195 \ud83e\udd1e \ud83d\udc46 \ud83d\udd1c \ud83d\udd0e \ud83d\udc71 \ud83d\udcac \ud83d\udce4, \ud83c\udf16 \ud83c\udf10 \ud83d\udd70. \ud83d\udc76</p>"},{"location":"help-readyapi/#_18","title":"\ud83d\udcb0 \ud83d\udcd5","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udcb0 \ud83d\udc15\u200d\ud83e\uddba \ud83d\udcd5 (\ud83d\udc64) \ud83d\udd18 \ud83d\udcc2 \ud83d\udcb0.</p> <p>\ud83d\udce4 \ud83d\udc46 \ud83d\udcaa \ud83d\udecd \ud83d\udc64 \u2615 \ud83d\udc76 \ud83d\udc76 \ud83d\udcac \ud83d\udc4f. \ud83d\udc76</p> <p>&amp; \ud83d\udc46 \ud83d\udcaa \u25b6\ufe0f\ufe0f \ud83e\udd471st \u2696\ufe0f \ud83c\udf1f \ud83d\udcb0 ReadyAPI. \ud83d\udc76 \ud83d\udc76</p>"},{"location":"help-readyapi/#readyapi_4","title":"\ud83d\udcb0 \ud83e\uddf0 \ud83d\udc48 \ud83c\udfcb\ufe0f ReadyAPI","text":"<p>\ud83d\udc46 \u2714\ufe0f \ud83d\udc40 \ud83e\uddfe, ReadyAPI \ud83e\uddcd \ud83d\udd1b \u231a \ud83d\udc18, \ud83d\udc83 &amp; Pydantic.</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udcb0:</p> <ul> <li>\u2721 \ud83c\udf4f (Pydantic)</li> <li>\ud83d\udddc (\ud83d\udc83, Uvicorn)</li> </ul> <p>\ud83d\udc4f \u2757 \ud83d\udc76</p>"},{"location":"history-design-future/","title":"\ud83d\udcd6, \ud83d\udd27 &amp; \ud83d\udd2e","text":"<p>\ud83d\udd70 \ud83c\udfc1,  ReadyAPI \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udcad:</p> <p>&gt; \u26ab\ufe0f\u2754 \ud83d\udcd6 \ud83d\udc49 \ud83c\udfd7 \u2753 \u26ab\ufe0f \ud83d\ude11 \u2714\ufe0f \ud83d\udc5f \u26aa\ufe0f\u27a1\ufe0f \ud83d\udd73 \ud83d\udc4c \ud83d\udc69\u200d\u2764\u200d\ud83d\udc68 \ud83d\uddd3\ufe0f [...]</p> <p>\ud83d\udce5 \ud83d\udc25 \ud83c\udf56 \ud83d\udc48 \ud83d\udcd6.</p>"},{"location":"history-design-future/#_2","title":"\ud83c\udf9b","text":"<p>\ud83d\udc64 \u2714\ufe0f \ud83c\udfd7 \ud83d\udd17 \u23ee\ufe0f \ud83c\udfd7 \ud83d\udcc4 \ud83d\udcda 1\ufe0f\u20e32\ufe0f\u20e3\ud83d\uddd3\ufe0f (\ud83c\udfb0 \ud83c\udfeb, \ud83d\udcce \u2699\ufe0f, \ud83d\udd01 \ud83d\udc68\u200d\ud83c\udfed, \u2601 \ud83d\udcbd, \u2652\ufe0f), \u2198\ufe0f \ud83d\udcda \ud83c\udfc9 \ud83d\udc69\u200d\ud83d\udcbb.</p> <p>\ud83c\udf55 \ud83d\udc48, \ud83d\udc64 \ud83d\udcaa \ud83d\udd2c, \ud83d\udcaf &amp; \u2699\ufe0f \ud83d\udcda \ud83c\udf9b.</p> <p>\ud83d\udcd6 ReadyAPI \ud83d\udc51 \ud83c\udf55 \ud83d\udcd6 \ud83d\udeae \u23ea.</p> <p>\ud83d\ude46\u200d\u2640 \ud83d\udcc4 \ud83c\udf9b:</p> <p>ReadyAPI \ud83d\udeab\ud83d\udd1c \ud83d\udd00 \ud83d\udea5 \ud83d\udeab \u23ee\ufe0f \ud83d\udc77 \ud83c\udf8f.</p> <p>\ud83d\udce4 \u2714\ufe0f \ud83d\udcda \ud83e\uddf0 \u270d \u23ed \ud83d\udc48 \u2714\ufe0f \u2139 \ud83d\ude2e \ud83d\udeae \ud83c\udfd7.</p> <p>\ud83d\udc64 \u2714\ufe0f \u274e \ud83c\udfd7 \ud83c\udd95 \ud83d\udee0\ufe0f \ud83d\udcda 1\ufe0f\u20e32\ufe0f\u20e3\ud83d\uddd3\ufe0f. \ud83e\udd47 \ud83d\udc64 \ud83d\udd04 \u274e \ud83c\udf10 \u2692 \ud83d\udcd4 ReadyAPI \u2699\ufe0f \ud83d\udcda \ud83c\udf8f \ud83d\udee0\ufe0f, \ud83d\udd0c-\ud83d\udd0c, &amp; \ud83e\uddf0.</p> <p>\u270b\ufe0f \u261d, \ud83d\udce4 \ud83d\ude45\u200d\u2642 \ud83c\udf8f \ud83c\udf9b \ud83c\udf18 \ud83c\udfd7 \ud83d\udd73 \ud83d\udc48 \ud83d\ude9a \ud83c\udf10 \ud83d\udc6b \u2692, \u270a \ud83c\udfc6 \ud83d\udcad \u26aa\ufe0f\u27a1\ufe0f \u23ee\ufe0f \ud83e\uddf0, &amp; \ud83c\udf00 \ud83d\udc6b \ud83c\udfc6 \ud83c\udf0c \ud83d\udcaa, \u2699\ufe0f \ud83c\uddea\ud83c\uddf8 \u2692 \ud83d\udc48 \u2796\ud83d\udeab \ud83d\udcaa \u23ed (\ud83d\udc0d 3\ufe0f\u20e3.6\ufe0f\u20e3 \u2795 \ud83c\udd8e \ud83d\udd11).</p>"},{"location":"history-design-future/#_3","title":"\ud83d\udd2c","text":"<p>\u2699\ufe0f \ud83c\udf10 \u23ee\ufe0f \ud83c\udf9b \ud83d\udc64 \u2714\ufe0f \ud83e\udd1e \ud83d\udca1 \u26aa\ufe0f\u27a1\ufe0f \ud83c\udf10 \ud83d\udc6b, \u270a \ud83d\udcad, &amp; \ud83c\udf00 \ud83d\udc6b \ud83c\udfc6 \ud83c\udf0c \ud83d\udc64 \ud83d\udcaa \ud83d\udd0e \ud83d\udc64 &amp; \ud83c\udfc9 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udc64 \u2714\ufe0f \ud83d\udc77 \u23ee\ufe0f.</p> <p>\ud83d\uddbc, \u26ab\ufe0f \ud83c\udd91 \ud83d\udc48 \ud83c\udfb2 \u26ab\ufe0f \ud83d\udd1c \u2693\ufe0f \ud83d\udd1b \ud83d\udc29 \ud83d\udc0d \ud83c\udd8e \ud83d\udd11.</p> <p>, \ud83c\udfc6 \ud83c\udfaf \u2699\ufe0f \u23ea \u267b \ud83d\udc29.</p> <p>, \u23ed \u25b6\ufe0f \ud83d\udcdf ReadyAPI, \ud83d\udc64 \ud83d\udcb8 \ud83d\udcda \ud83d\uddd3\ufe0f \ud83c\udf93 \ud83d\udd0c \ud83d\uddc4, \ud83c\udfbb \ud83d\udd17, Oauth2\ufe0f\u20e3, \u2652\ufe0f. \ud83c\udfaf \ud83d\udc6b \ud83d\udc9b, \ud83d\udd00, &amp; \ud83d\udd3a.</p>"},{"location":"history-design-future/#_4","title":"\ud83d\udd27","text":"<p>\u2934\ufe0f \ud83d\udc64 \ud83d\udcb8 \ud83d\udd70 \ud83d\udd27 \ud83d\udc69\u200d\ud83d\udcbb \"\ud83d\udee0\ufe0f\" \ud83d\udc64 \ud83d\udc9a \u2714\ufe0f \ud83d\udc69\u200d\ud83d\udcbb (\ud83d\udc69\u200d\ud83d\udcbb \u2699\ufe0f ReadyAPI).</p> <p>\ud83d\udc64 \ud83d\udcaf \ud83d\udcda \ud83d\udcad \ud83c\udfc6 \ud83c\udf1f \ud83d\udc0d \ud83d\udc68\u200d\ud83c\udfa8: \ud83d\uddd2, \ud83c\udd9a \ud83d\udcdf, \ud83c\udfa0 \ud83e\udde2 \ud83d\udc68\u200d\ud83c\udfa8.</p> <p>\ud83c\udfc1 \ud83d\udc0d \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd2c, \ud83d\udc48 \ud83d\udcd4 \ud83d\udd03 8\ufe0f\u20e30\ufe0f\u20e3 \ud83d\udcaf \ud83d\udc69\u200d\ud83d\udcbb.</p> <p>\u26ab\ufe0f \u26d3 \ud83d\udc48 ReadyAPI \ud83c\udfaf \ud83d\udcaf \u23ee\ufe0f \ud83d\udc68\u200d\ud83c\udfa8 \u2699\ufe0f 8\ufe0f\u20e30\ufe0f\u20e3 \ud83d\udcaf \ud83d\udc0d \ud83d\udc69\u200d\ud83d\udcbb. &amp; \ud83c\udfc6 \ud83c\udf8f \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\ude11 \ud83d\udc77 \u27a1, \ud83c\udf10 \ud83d\udeae \ud83d\udcb0 \ud83d\udd1c \ud83d\udc77 \ud83c\udf16 \ud83c\udf10 \ud83d\udc68\u200d\ud83c\udfa8.</p> <p>\ud83d\udc48 \ud83c\udf0c \ud83d\udc64 \ud83d\udcaa \ud83d\udd0e \ud83c\udfc6 \ud83c\udf0c \ud83d\udcc9 \ud83d\udcdf \u274e \ud83c\udf05 \ud83d\udcaa, \u2714\ufe0f \ud83d\udee0\ufe0f \ud83c\udf10, \ud83c\udd8e &amp; \u274c \u2705, \u2652\ufe0f.</p> <p>\ud83c\udf10 \ud83c\udf0c \ud83d\udc48 \ud83d\ude9a \ud83c\udfc6 \ud83d\udee0\ufe0f \ud83d\udca1 \ud83c\udf10 \ud83d\udc69\u200d\ud83d\udcbb.</p>"},{"location":"history-design-future/#_5","title":"\ud83d\udcc4","text":"<p>\u23ee\ufe0f \ud83d\udd2c \ud83d\udcda \ud83c\udf9b, \ud83d\udc64 \ud83d\udcad \ud83d\udc48 \ud83d\udc64 \ud83d\udd1c \u2699\ufe0f Pydantic \ud83d\udeae \ud83d\udcc8.</p> <p>\u2934\ufe0f \ud83d\udc64 \ud83d\udcc9 \u26ab\ufe0f, \u2692 \u26ab\ufe0f \ud83c\udf55 \ud83d\udee0\ufe0f \u23ee\ufe0f \ud83c\udfbb \ud83d\udd17, \ud83d\udc15\u200d\ud83e\uddba \ud83c\udf8f \ud83c\udf0c \ud83d\udd2c \u269b \ud83d\udcc4, &amp; \ud83d\udcc9 \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udc15\u200d\ud83e\uddba (\ud83c\udd8e \u2705, \u270d) \u2693\ufe0f \ud83d\udd1b \ud83d\udcaf \ud83d\udcda \ud83d\udc68\u200d\ud83c\udfa8.</p> <p>\u23ee\ufe0f \ud83d\udee0\ufe0f, \ud83d\udc64 \ud83d\udcc9 \ud83d\udc83, \ud83c\udf8f \ud83d\udd11 \ud83d\udcc4.</p>"},{"location":"history-design-future/#_6","title":"\ud83d\udee0\ufe0f","text":"<p>\ud83d\udd70 \ud83d\udc64 \u25b6\ufe0f \ud83c\udfd7 ReadyAPI \u26ab\ufe0f, \ud83c\udfc6 \ud83c\udf56 \u23ea \ud83e\udd49, \ud83d\udd27 \ud83d\udd2c, \ud83d\udcc4 &amp; \ud83e\uddf0 \ud83d\udd1c, &amp; \ud83d\udca1 \ud83d\udd03 \ud83d\udc29 &amp; \ud83d\udd27 \ud83c\udd91 &amp; \ud83c\udf4b.</p>"},{"location":"history-design-future/#_7","title":"\ud83d\udd2e","text":"<p>\ud83d\udc49 \u261d, \u26ab\ufe0f \u23ea \ud83c\udd91 \ud83d\udc48 ReadyAPI \u23ee\ufe0f \ud83d\udeae \ud83d\udcad \u2796 \u26a0 \ud83d\udcda \ud83d\udc6b\ud83d\udc6b.</p> <p>\u26ab\ufe0f \ud83d\udc86\u200d\u2642 \ud83d\udc50 \ud83e\udd2d \u23ee\ufe0f \ud83c\udf9b \u2663 \ud83d\udcda \u2699\ufe0f \ud83d\udcbc \ud83d\udc4d.</p> <p>\ud83d\udcda \ud83d\udc69\u200d\ud83d\udcbb &amp; \ud83c\udfc9 \u23ea \ud83e\ude80 \ud83d\udd1b ReadyAPI \ud83d\udc6b \ud83c\udfd7 (\ud83d\udd0c \ud83d\udc64 &amp; \ud83d\udc47 \ud83c\udfc9).</p> <p>\u270b\ufe0f, \ud83d\udce4 \ud83d\udcda \ud83d\udcc8 &amp; \u2692 \ud83d\udc5f.</p> <p>ReadyAPI \u2714\ufe0f \ud83d\udc51 \ud83d\udd2e \u2934\ufe0f.</p> <p>&amp; \ud83d\udc46 \u2139 \ud83d\udcc9 \ud83d\udc4d.</p>"},{"location":"project-generation/","title":"\ud83c\udfd7 \u26a1 - \ud83d\udcc4","text":"<p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83c\udfd7 \ud83d\ude82 \ud83e\udd1a \u25b6\ufe0f, \u26ab\ufe0f \ud83d\udd0c \ud83d\udcda \u25b6\ufe0f \u2692 \ud83c\udd99, \ud83d\udc82\u200d\u2642, \ud83d\udcbd &amp; \ud83d\udee0\ufe0f \ud83d\udd17 \u23ea \u231b \ud83d\udc46.</p> <p>\ud83c\udfd7 \ud83d\ude82 \ud83d\udd1c \ud83d\udd67 \u2714\ufe0f \ud83d\udcf6 \ud83d\ude43 \ud83d\udda5 \ud83d\udc48 \ud83d\udc46 \ud83d\udd1c \u2139 &amp; \ud83d\udee0\ufe0f \ud83d\udc46 \ud83d\udc4d \ud83d\udcaa, \u270b\ufe0f \u26ab\ufe0f \ud83d\udcaa \ud83d\udc4d \u25b6\ufe0f \u261d \ud83d\udc46 \ud83c\udfd7.</p>"},{"location":"project-generation/#readyapi","title":"\ud83c\udf15 \ud83d\udcda ReadyAPI \u2733","text":"<p>\ud83d\udcc2: https://github.com/khulnasoft/full-stack-readyapi-postgresql</p>"},{"location":"project-generation/#readyapi-","title":"\ud83c\udf15 \ud83d\udcda ReadyAPI \u2733 - \u2692","text":"<ul> <li>\ud83c\udf15 \u2601 \ud83d\udee0\ufe0f (\u2601 \ud83e\udde2).</li> <li>\u2601 \ud83d\udc1d \ud83d\udcf3 \ud83d\udee0\ufe0f.</li> <li>\u2601 \u270d \ud83d\udee0\ufe0f &amp; \ud83d\udee0\ufe0f \ud83c\udde7\ud83c\uddff \ud83d\udee0\ufe0f.</li> <li>\ud83c\udfed \ud83d\udd1c \ud83d\udc0d \ud83d\udd78 \ud83d\udcbd \u2699\ufe0f Uvicorn &amp; \ud83d\udc01.</li> <li>\ud83d\udc0d ReadyAPI \ud83d\udc69\u200d\ud83d\udcbb:<ul> <li>\u23e9: \ud83d\udcf6 \u2195 \ud83c\udfad, \ud83d\udd1b \ud83c\uddf7\ud83c\uddea \u23ee\ufe0f \u2733 &amp; \ud83d\udeb6 (\ud83d\udc4f \ud83d\udc83 &amp; Pydantic).</li> <li>\ud83c\udfcb\ufe0f: \ud83d\udc51 \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udc15\u200d\ud83e\uddba. \ud83d\udee0\ufe0f \ud83c\udf10. \ud83c\udf18 \ud83d\udd70 \ud83d\udee0\ufe0f.</li> <li>\u23e9: \ud83d\udd27 \u23e9 \u2699\ufe0f &amp; \ud83d\udca1. \ud83c\udf18 \ud83d\udd70 \ud83d\udc42 \ud83e\ude7a.</li> <li>\ud83d\udccf: \ud83d\udcc9 \ud83d\udcdf \u274e. \ud83d\udc97 \u2692 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udd20 \ud83d\udd22 \ud83d\udcc4.</li> <li>\ud83c\udfcb\ufe0f: \ud83e\udd1a \ud83c\udfed-\ud83d\udd1c \ud83d\udcdf. \u23ee\ufe0f \ud83c\udfe7 \ud83c\udf93 \ud83e\uddfe.</li> <li>\ud83d\udc29-\u2693\ufe0f: \u2693\ufe0f \ud83d\udd1b (&amp; \ud83c\udf55 \ud83d\udd17 \u23ee\ufe0f) \ud83d\udcc2 \ud83d\udc29 \ud83d\udd17: \ud83d\uddc4 &amp; \ud83c\udfbb \ud83d\udd17.</li> <li>\ud83d\udcda \ud83c\udf8f \u2692 \ud83d\udd0c \ud83c\udfe7 \ud83d\udd2c, \ud83d\udee0\ufe0f, \ud83c\udf93 \ud83e\uddfe, \ud83e\udd1d \u23ee\ufe0f Oauth2\ufe0f\u20e3 \ud83e\udd59 \ud83e\udd1d, \u2652\ufe0f.</li> </ul> </li> <li>\ud83d\udd10 \ud83d\udd10 \ud83d\udd01 \ud83d\udd22.</li> <li>\ud83e\udd59 \ud83e\udd1d \ud83e\udd1d.</li> <li>\ud83c\uddf8\ud83c\uddf2 \ud83c\udff7 (\ud83d\udd2c \ud83c\udffa \u2194, \ud83d\udc6b \ud83d\udcaa \u2699\ufe0f \u23ee\ufe0f \ud83e\udd52 \ud83d\udc68\u200d\ud83c\udfed \ud83d\udd17).</li> <li>\ud83d\udd30 \u25b6\ufe0f \ud83c\udff7 \ud83d\udc69\u200d\ud83d\udcbb (\ud83d\udd00 &amp; \u274e \ud83d\udc46 \ud83d\udcaa).</li> <li>\u2697 \ud83d\udee0\ufe0f.</li> <li>\u269c (\u2716\ufe0f \ud83c\udde8\ud83c\uddf3 \u2139 \ud83e\udd1d).</li> <li>\ud83e\udd52 \ud83d\udc68\u200d\ud83c\udfed \ud83d\udc48 \ud83d\udcaa \ud83d\uddc4 &amp; \u2699\ufe0f \ud83c\udff7 &amp; \ud83d\udcdf \u26aa\ufe0f\u27a1\ufe0f \ud83c\udf82 \ud83d\udc69\u200d\ud83d\udcbb \ud83c\udf55.</li> <li>\ud83c\udf82 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udcaf \u2693\ufe0f \ud83d\udd1b \u2733, \ud83d\udee0\ufe0f \u23ee\ufe0f \u2601, \ud83d\udc46 \ud83d\udcaa \ud83d\udcaf \ud83c\udf15 \ud83d\udee0\ufe0f \ud83d\udd17, \ud83d\udd2c \ud83d\udd1b \ud83d\udcbd. \u26ab\ufe0f \ud83c\udfc3 \u2601, \u26ab\ufe0f \ud83d\udcaa \ud83c\udfd7 \ud83c\udd95 \ud83d\udcbd \ud83c\udfea \u26aa\ufe0f\u27a1\ufe0f \ud83d\udd8c \ud83d\udd20 \ud83d\udd70 (\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \u2733, \u2733, \u2733, \u2696\ufe0f \u26ab\ufe0f\u2754 \ud83d\udc46 \ud83d\udc9a, &amp; \ud83d\udcaf \ud83d\udc48 \ud83d\udee0\ufe0f \ud83d\udc77).</li> <li>\u23e9 \ud83d\udc0d \ud83d\udee0\ufe0f \u23ee\ufe0f \ud83d\udcc2 \ud83d\udcbe \ud83d\udef0 \u2696\ufe0f-\u2601 \ud83d\udee0\ufe0f \u23ee\ufe0f \u2194 \ud83d\udc96 \u269b \u2697 \u2696\ufe0f \ud83c\udf99 \ud83c\udf99 \ud83d\udcdf \ud83d\udcc2.</li> <li>\ud83c\udfa6 \ud83d\udd78:<ul> <li>\ud83c\udfd7 \u23ee\ufe0f \ud83c\udfa6 \u2733.</li> <li>\ud83e\udd59 \ud83e\udd1d \ud83d\ude9a.</li> <li>\ud83d\udcb3 \ud83c\udf91.</li> <li>\u23ee\ufe0f \ud83d\udcb3, \ud83d\udc51 \ud83d\udd79 \ud83c\udf91.</li> <li>\ud83d\udc51 \ud83d\udd79 \u23ee\ufe0f \ud83d\udc69\u200d\ud83d\udcbb \ud83c\udfd7 &amp; \ud83d\udcd5.</li> <li>\ud83d\udc64 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udcd5.</li> <li>\ud83c\uddf7\ud83c\uddea.</li> <li>\ud83c\udfa6-\ud83d\udcfb.</li> <li>Vuetify \ud83c\udf39 \ud83e\uddfd \ud83d\udd27 \ud83e\uddb2.</li> <li>\ud83d\udcd5.</li> <li>\u2601 \ud83d\udcbd \u2693\ufe0f \ud83d\udd1b \ud83d\udc4c (\ud83d\udcf6 \ud83e\udd3e \ud83c\udf86 \u23ee\ufe0f \ud83c\udfa6-\ud83d\udcfb).</li> <li>\u2601 \ud83d\udc41-\u25b6\ufe0f \ud83c\udfd7, \ud83d\udc46 \ud83d\udeab \ud83d\udcaa \ud83d\udd8a \u2696\ufe0f \ud83d\udc95 \u270d \ud83d\udcdf.</li> <li>\ud83d\udd78 \ud83d\udcaf \ud83c\udfc3 \ud83c\udfd7 \ud83d\udd70 (\ud83d\udcaa \ud83d\udd15 \ud83d\udc81\u200d\u2642\ufe0f).</li> <li>\u2692 \ud83d\udd27 \ud83d\udcaa, \u26ab\ufe0f \ud83d\udc77 \ud83d\udc45 \ud83d\udce6, \u270b\ufe0f \ud83d\udc46 \ud83d\udcaa \ud83c\udfe4-\ud83c\udfd7 \u23ee\ufe0f \ud83c\udfa6 \u2733 \u2696\ufe0f \u270d \u26ab\ufe0f \ud83d\udc46 \ud83d\udcaa, &amp; \ud83c\udfe4-\u2699\ufe0f \u26ab\ufe0f\u2754 \ud83d\udc46 \ud83d\udc9a.</li> </ul> </li> <li>** *\ufe0f\u20e3 ** \u2733 \ud83d\udcbd, \ud83d\udc46 \ud83d\udcaa \ud83d\udd00 \u26ab\ufe0f \u2699\ufe0f \ud83d\udcc1 &amp; \u2733 \ud83d\udcaa.</li> <li>\ud83e\udd40 \ud83e\udd52 \ud83d\udc68\u200d\ud83c\udfed \u2696.</li> <li>\ud83d\udcd0 \u2696 \ud83d\udd96 \ud83d\udd78 &amp; \ud83d\udc69\u200d\ud83d\udcbb \u23ee\ufe0f Traefik, \ud83d\udc46 \ud83d\udcaa \u2714\ufe0f \ud83d\udc6f\u200d\u2642\ufe0f \ud83d\udd3d \ud83c\udf8f \ud83c\udd94, \ud83d\udc7d \u27a1, \u270b\ufe0f \ud83c\udf66 \ud83c\udf8f \ud83d\udce6.</li> <li>Traefik \ud83d\udee0\ufe0f, \u2705 \u27a1\ufe0f \ud83d\udddc \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udcc4 \ud83c\udfe7 \u26a1.</li> <li>\u2733 \ud83c\udd91 (\ud83d\udd01 \ud83d\udee0\ufe0f), \ud83d\udd0c \ud83d\udd78 &amp; \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd2c.</li> </ul>"},{"location":"project-generation/#readyapi_1","title":"\ud83c\udf15 \ud83d\udcda ReadyAPI \ud83d\uddc4","text":"<p>\ud83d\udcc2: https://github.com/khulnasoft/full-stack-readyapi-couchbase</p> <p>\ud83d\udc76 \ud83d\udc76 \u26a0 \ud83d\udc76 \ud83d\udc76</p> <p>\ud83d\udea5 \ud83d\udc46 \u25b6\ufe0f \ud83c\udd95 \ud83c\udfd7 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udd8c, \u2705 \ud83c\udf9b \ud83d\udce5.</p> <p>\ud83d\uddbc, \ud83c\udfd7 \ud83d\ude82 \ud83c\udf15 \ud83d\udcda ReadyAPI \u2733 \ud83d\udcaa \ud83d\udc4d \ud83c\udf9b, \u26ab\ufe0f \ud83c\udfaf \ud83d\udea7 &amp; \u2699\ufe0f. &amp; \u26ab\ufe0f \ud83d\udd0c \ud83c\udf10 \ud83c\udd95 \u2692 &amp; \ud83d\udcc8.</p> <p>\ud83d\udc46 \ud83c\udd93 \u2699\ufe0f \ud83d\uddc4-\u2693\ufe0f \ud83d\ude82 \ud83d\udea5 \ud83d\udc46 \ud83d\udc9a, \u26ab\ufe0f \ud83d\udd1c \ud83c\udfb2 \ud83d\udc77 \ud83d\udc4c, &amp; \ud83d\udea5 \ud83d\udc46 \u23ea \u2714\ufe0f \ud83c\udfd7 \ud83c\udfd7 \u23ee\ufe0f \u26ab\ufe0f \ud83d\udc48 \ud83d\udc4c \ud83d\udc4d (&amp; \ud83d\udc46 \ud83c\udfb2 \u23ea \u2139 \u26ab\ufe0f \u2663 \ud83d\udc46 \ud83d\udcaa).</p> <p>\ud83d\udc46 \ud83d\udcaa \u270d \ud83c\udf05 \ud83d\udd03 \u26ab\ufe0f \ud83e\ude7a \ud83c\udfe6.</p>"},{"location":"project-generation/#readyapi_2","title":"\ud83c\udf15 \ud83d\udcda ReadyAPI \u2733","text":"<p>...\ud83d\udcaa \ud83d\udc5f \u23ea, \u2693\ufe0f \ud83d\udd1b \ud83d\udc47 \ud83d\udd70 \ud83d\ude9a &amp; \ud83c\udf8f \u2696. \ud83d\udc76 \ud83d\udc76</p>"},{"location":"project-generation/#readyapi_3","title":"\ud83c\udfb0 \ud83c\udfeb \ud83c\udff7 \u23ee\ufe0f \ud83c\udf08 &amp; ReadyAPI","text":"<p>\ud83d\udcc2: https://github.com/microsoft/cookiecutter-spacy-readyapi</p>"},{"location":"project-generation/#readyapi-_1","title":"\ud83c\udfb0 \ud83c\udfeb \ud83c\udff7 \u23ee\ufe0f \ud83c\udf08 &amp; ReadyAPI - \u2692","text":"<ul> <li>\ud83c\udf08 \ud83d\udd5c \ud83c\udff7 \ud83d\udee0\ufe0f.</li> <li>\u2601 \ud83e\udde0 \ud83d\udd0e \ud83d\udce8 \ud83d\udcc1 \ud83c\udfd7.</li> <li>\ud83c\udfed \ud83d\udd1c \ud83d\udc0d \ud83d\udd78 \ud83d\udcbd \u2699\ufe0f Uvicorn &amp; \ud83d\udc01.</li> <li>\u2601 \ud83d\udc69\u200d\ud83d\udcbb Kubernetes (\ud83e\uddb2) \ud83c\udd91/\ud83d\udcbf \ud83d\udee0\ufe0f \ud83c\udfd7.</li> <li>\ud83e\udd38\u200d\u2642 \ud83d\udcaa \u2692 1\ufe0f\u20e3 \ud83c\udf08 \ud83c\udfd7 \ud83c\uddea\ud83c\uddf8 \u23ee\ufe0f \ud83c\udfd7 \ud83d\udda5.</li> <li>\ud83d\udcaa \ud83c\udfe7 \ud83c\udf8f \ud83c\udff7 \ud83d\udee0\ufe0f (Pytorch, \ud83c\uddf8\ud83c\uddf2), \ud83d\udeab \ud83c\udf08.</li> </ul>"},{"location":"python-types/","title":"\ud83d\udc0d \ud83c\udd8e \ud83c\udfb6","text":"<p>\ud83d\udc0d \u2714\ufe0f \ud83d\udc15\u200d\ud83e\uddba \ud83d\udce6 \"\ud83c\udd8e \ud83d\udd11\".</p> <p>\ud83d\udc6b \"\ud83c\udd8e \ud83d\udd11\" \ud83c\udf81 \u2755 \ud83d\udc48 \u2714 \ud83d\udce3 \ud83c\udd8e \ud83d\udd22.</p> <p>\ud83d\udce3 \ud83c\udd8e \ud83d\udc46 \ud83d\udd22, \ud83d\udc68\u200d\ud83c\udfa8 &amp; \ud83e\uddf0 \ud83d\udcaa \ud83e\udd1d \ud83d\udc46 \ud83d\udc4d \ud83d\udc15\u200d\ud83e\uddba.</p> <p>\ud83d\udc49 \u23e9 \ud83d\udd30 / \u2197\ufe0f \ud83d\udd03 \ud83d\udc0d \ud83c\udd8e \ud83d\udd11. \u26ab\ufe0f \ud83d\udcd4 \ud83d\udd74 \ud83d\udcaf \ud83d\udcaa \u2699\ufe0f \ud83d\udc6b \u23ee\ufe0f ReadyAPI... \u2754 \ud83e\udd19 \ud83d\udcf6 \ud83d\udc25.</p> <p>ReadyAPI \ud83c\udf10 \u2693\ufe0f \ud83d\udd1b \ud83d\udc6b \ud83c\udd8e \ud83d\udd11, \ud83d\udc6b \ud83e\udd1d \u26ab\ufe0f \ud83d\udcda \ud83d\udcc8 &amp; \ud83d\udcb0.</p> <p>\u270b\ufe0f \ud83d\udea5 \ud83d\udc46 \ud83d\ude45 \u2699\ufe0f ReadyAPI, \ud83d\udc46 \ud83d\udd1c \ud83d\udcb0 \u26aa\ufe0f\u27a1\ufe0f \ud83c\udfeb \ud83c\udf56 \ud83d\udd03 \ud83d\udc6b.</p> <p>Note</p> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udc0d \ud83d\udd74, &amp; \ud83d\udc46 \u23ea \ud83d\udcad \ud83c\udf10 \ud83d\udd03 \ud83c\udd8e \ud83d\udd11, \ud83d\udeb6 \u23ed \ud83d\udcc3.</p>"},{"location":"python-types/#_2","title":"\ud83c\udfaf","text":"<p>\u27a1\ufe0f \u25b6\ufe0f \u23ee\ufe0f \ud83d\ude45 \ud83d\uddbc:</p> <pre><code>def get_full_name(first_name, last_name):\n    full_name = first_name.title() + \" \" + last_name.title()\n    return full_name\n\n\nprint(get_full_name(\"john\", \"doe\"))\n</code></pre> <p>\ud83e\udd19 \ud83d\udc49 \ud83d\udccb \ud83d\udd22:</p> <pre><code>John Doe\n</code></pre> <p>\ud83d\udd22 \ud83d\udd28 \ud83d\udcc4:</p> <ul> <li>\u270a <code>first_name</code> &amp; <code>last_name</code>.</li> <li>\ud83d\udddc \ud83e\udd47 \ud83d\udd24 \ud83d\udd20 1\ufe0f\u20e3 \u2196 \ud83d\udcbc \u23ee\ufe0f <code>title()</code>.</li> <li>\ud83d\udd22 \ud83d\udc6b \u23ee\ufe0f \ud83d\ude80 \ud83d\udd95.</li> </ul> <pre><code>def get_full_name(first_name, last_name):\n    full_name = first_name.title() + \" \" + last_name.title()\n    return full_name\n\n\nprint(get_full_name(\"john\", \"doe\"))\n</code></pre>"},{"location":"python-types/#_3","title":"\u270d \u26ab\ufe0f","text":"<p>\u26ab\ufe0f \ud83d\udcf6 \ud83d\ude45 \ud83d\udccb.</p> <p>\u270b\ufe0f \ud83d\udd1c \ud83c\udf08 \ud83d\udc48 \ud83d\udc46 \u270d \u26ab\ufe0f \u26aa\ufe0f\u27a1\ufe0f \ud83d\udd8c.</p> <p>\u261d \ud83d\udc46 \ud83d\udd1c \u2714\ufe0f \u25b6\ufe0f \ud83d\udd11 \ud83d\udd22, \ud83d\udc46 \u2714\ufe0f \ud83d\udd22 \ud83d\udd1c...</p> <p>\u270b\ufe0f \u2934\ufe0f \ud83d\udc46 \u2714\ufe0f \ud83e\udd19 \"\ud83d\udc48 \ud83d\udc69\u200d\ud83d\udd2c \ud83d\udc48 \ud83d\udddc \ud83e\udd47 \ud83d\udd24 \u2196 \ud83d\udcbc\".</p> <p>\u26ab\ufe0f <code>upper</code>\u2753 \u26ab\ufe0f <code>uppercase</code>\u2753 <code>first_uppercase</code>\u2753 <code>capitalize</code>\u2753</p> <p>\u2934\ufe0f, \ud83d\udc46 \ud83d\udd04 \u23ee\ufe0f \ud83d\udddd \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc66, \ud83d\udc68\u200d\ud83c\udfa8 \u270d.</p> <p>\ud83d\udc46 \ud83c\udd8e \ud83e\udd47 \ud83d\udd22 \ud83d\udd22, <code>first_name</code>, \u2934\ufe0f \u2763 (<code>.</code>) &amp; \u2934\ufe0f \ud83c\udfaf <code>Ctrl+Space</code> \u23f2 \ud83d\udee0\ufe0f.</p> <p>\u270b\ufe0f, \ud83d\ude1e, \ud83d\udc46 \ud83e\udd1a \ud83d\udd73 \u26a0:</p> <p></p>"},{"location":"python-types/#_4","title":"\ud83d\udeae \ud83c\udd8e","text":"<p>\u27a1\ufe0f \ud83d\udd00 \ud83d\udc41 \u23f8 \u26aa\ufe0f\u27a1\ufe0f \u23ee\ufe0f \u23ec.</p> <p>\ud83d\udc65 \ud83d\udd1c \ud83d\udd00 \u26ab\ufe0f\u2754 \ud83d\udc49 \ud83e\uddec, \ud83d\udd22 \ud83d\udd22, \u26aa\ufe0f\u27a1\ufe0f:</p> <pre><code>    first_name, last_name\n</code></pre> <p>:</p> <pre><code>    first_name: str, last_name: str\n</code></pre> <p>\ud83d\udc48 \u26ab\ufe0f.</p> <p>\ud83d\udc48 \"\ud83c\udd8e \ud83d\udd11\":</p> <pre><code>def get_full_name(first_name: str, last_name: str):\n    full_name = first_name.title() + \" \" + last_name.title()\n    return full_name\n\n\nprint(get_full_name(\"john\", \"doe\"))\n</code></pre> <p>\ud83d\udc48 \ud83d\udeab \ud83c\udf8f \ud83d\udce3 \ud83d\udd22 \ud83d\udcb2 \ud83d\udc96 \ud83d\udd1c \u23ee\ufe0f:</p> <pre><code>    first_name=\"john\", last_name=\"doe\"\n</code></pre> <p>\u26ab\ufe0f \ud83c\udf8f \ud83d\udc5c.</p> <p>\ud83d\udc65 \u2699\ufe0f \u2764 (<code>:</code>), \ud83d\udeab \ud83c\udf13 (<code>=</code>).</p> <p>&amp; \u274e \ud83c\udd8e \ud83d\udd11 \ud83d\udece \ud83d\udeab \ud83d\udd00 \u26ab\ufe0f\u2754 \ud83d\udd28 \u26aa\ufe0f\u27a1\ufe0f \u26ab\ufe0f\u2754 \ud83d\udd1c \ud83d\udd28 \ud83c\udf75 \ud83d\udc6b.</p> <p>\u270b\ufe0f \ud83d\udd1c, \ud83c\udf08 \ud83d\udc46 \ud83d\udd04 \ud83d\udd95 \ud83c\udfd7 \ud83d\udc48 \ud83d\udd22, \u270b\ufe0f \u23ee\ufe0f \ud83c\udd8e \ud83d\udd11.</p> <p>\ud83c\udf8f \u261d, \ud83d\udc46 \ud83d\udd04 \u23f2 \ud83d\udccb \u23ee\ufe0f <code>Ctrl+Space</code> &amp; \ud83d\udc46 \ud83d\udc40:</p> <p></p> <p>\u23ee\ufe0f \ud83d\udc48, \ud83d\udc46 \ud83d\udcaa \ud83d\udcdc, \ud83d\udc40 \ud83c\udf9b, \u23ed \ud83d\udc46 \ud83d\udd0e 1\ufe0f\u20e3 \ud83d\udc48 \"\ud83d\udc8d \ud83d\udd14\":</p> <p></p>"},{"location":"python-types/#_5","title":"\ud83c\udf05 \ud83c\udfaf","text":"<p>\u2705 \ud83d\udc49 \ud83d\udd22, \u26ab\ufe0f \u23ea \u2714\ufe0f \ud83c\udd8e \ud83d\udd11:</p> <pre><code>def get_name_with_age(name: str, age: int):\n    name_with_age = name + \" is this old: \" + age\n    return name_with_age\n</code></pre> <p>\u21a9\ufe0f \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udcad \ud83c\udd8e \ud83d\udd22, \ud83d\udc46 \ud83d\udeab \ud83d\udd74 \ud83e\udd1a \ud83d\udee0\ufe0f, \ud83d\udc46 \ud83e\udd1a \u274c \u2705:</p> <p></p> <p>\ud83d\udd1c \ud83d\udc46 \ud83d\udcad \ud83d\udc48 \ud83d\udc46 \u2714\ufe0f \ud83d\udd27 \u26ab\ufe0f, \ud83d\udddc <code>age</code> \ud83c\udfbb \u23ee\ufe0f <code>str(age)</code>:</p> <pre><code>def get_name_with_age(name: str, age: int):\n    name_with_age = name + \" is this old: \" + str(age)\n    return name_with_age\n</code></pre>"},{"location":"python-types/#_6","title":"\ud83d\udce3 \ud83c\udd8e","text":"<p>\ud83d\udc46 \ud83d\udc40 \ud83d\udc51 \ud83e\udd49 \ud83d\udce3 \ud83c\udd8e \ud83d\udd11. \ud83d\udd22 \ud83d\udd22.</p> <p>\ud83d\udc49 \ud83d\udc51 \ud83e\udd49 \ud83d\udc46 \ud83d\udd1c \u2699\ufe0f \ud83d\udc6b \u23ee\ufe0f ReadyAPI.</p>"},{"location":"python-types/#_7","title":"\ud83d\ude45 \ud83c\udd8e","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83c\udf10 \ud83d\udc29 \ud83d\udc0d \ud83c\udd8e, \ud83d\udeab \ud83d\udd74 <code>str</code>.</p> <p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f, \ud83d\uddbc:</p> <ul> <li><code>int</code></li> <li><code>float</code></li> <li><code>bool</code></li> <li><code>bytes</code></li> </ul> <pre><code>def get_items(item_a: str, item_b: int, item_c: float, item_d: bool, item_e: bytes):\n    return item_a, item_b, item_c, item_d, item_d, item_e\n</code></pre>"},{"location":"python-types/#_8","title":"\ud83d\udc8a \ud83c\udd8e \u23ee\ufe0f \ud83c\udd8e \ud83d\udd22","text":"<p>\ud83d\udce4 \ud83d\udcca \ud83d\udcca \ud83d\udc48 \ud83d\udcaa \ud83d\udd0c \ud83c\udf8f \ud83d\udcb2, \ud83d\udc96 <code>dict</code>, <code>list</code>, <code>set</code> &amp; <code>tuple</code>. &amp; \ud83d\udd17 \ud83d\udcb2 \ud83d\udcaa \u2714\ufe0f \ud83d\udc6b \ud83d\udc4d \ud83c\udd8e \ud83d\udc81\u200d\u2642\ufe0f.</p> <p>\ud83d\udc49 \ud83c\udd8e \ud83d\udc48 \u2714\ufe0f \ud83d\udd17 \ud83c\udd8e \ud83e\udd19 \"\ud83d\udc8a\" \ud83c\udd8e. &amp; \u26ab\ufe0f \ud83d\udcaa \ud83d\udce3 \ud83d\udc6b, \u23ee\ufe0f \ud83d\udc6b \ud83d\udd17 \ud83c\udd8e.</p> <p>\ud83d\udce3 \ud83d\udc48 \ud83c\udd8e &amp; \ud83d\udd17 \ud83c\udd8e, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83d\udc29 \ud83d\udc0d \ud83d\udd79 <code>typing</code>. \u26ab\ufe0f \ud83d\udd00 \ud83c\udfaf \ud83d\udc15\u200d\ud83e\uddba \ud83d\udc6b \ud83c\udd8e \ud83d\udd11.</p>"},{"location":"python-types/#_9","title":"\ud83c\udd95 \u23ec \ud83d\udc0d","text":"<p>\u2755 \u2699\ufe0f <code>typing</code> \ud83d\udd17 \u23ee\ufe0f \ud83c\udf10 \u23ec, \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc0d 3\ufe0f\u20e3.6\ufe0f\u20e3 \u23ea \ud83d\udd50, \u2705 \ud83d\udc0d 3\ufe0f\u20e3.9\ufe0f\u20e3, \ud83d\udc0d 3\ufe0f\u20e3.1\ufe0f\u20e30\ufe0f\u20e3, \u2652\ufe0f.</p> <p>\ud83d\udc0d \ud83c\udfe7, \ud83c\udd95 \u23ec \ud83d\udc5f \u23ee\ufe0f \ud83d\udcc9 \ud83d\udc15\u200d\ud83e\uddba \ud83d\udc49 \ud83c\udd8e \u270d &amp; \ud83d\udcda \ud83d\udcbc \ud83d\udc46 \ud83c\udfc6 \ud83d\udeab \ud83d\udcaa \ud83d\uddc4 &amp; \u2699\ufe0f <code>typing</code> \ud83d\udd79 \ud83d\udce3 \ud83c\udd8e \u270d.</p> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udcaa \u2692 \ud83c\udf16 \u23ee\ufe0f \u23ec \ud83d\udc0d \ud83d\udc46 \ud83c\udfd7, \ud83d\udc46 \ud83d\udd1c \ud83d\udcaa \u270a \ud83d\udcc8 \ud83d\udc48 \u2795 \ud83e\udd81. \ud83d\udc40 \ud83d\uddbc \ud83d\udd1b.</p>"},{"location":"python-types/#_10","title":"\ud83d\udcc7","text":"<p>\ud83d\uddbc, \u27a1\ufe0f \ud83d\udd2c \ud83d\udd22 <code>list</code> <code>str</code>.</p> \ud83d\udc0d 3\ufe0f\u20e3.6\ufe0f\u20e3 &amp; \ud83d\udd1b\ud83d\udc0d 3\ufe0f\u20e3.9\ufe0f\u20e3 &amp; \ud83d\udd1b <p>\u26aa\ufe0f\u27a1\ufe0f <code>typing</code>, \ud83d\uddc4 <code>List</code> (\u23ee\ufe0f \ud83d\udd20 <code>L</code>):</p> <pre><code>from typing import List\n\n\ndef process_items(items: List[str]):\n    for item in items:\n        print(item)\n</code></pre> <p>\ud83d\udce3 \ud83d\udd22, \u23ee\ufe0f \ud83c\udf8f \u2764 (<code>:</code>) \u2755.</p> <p>\ud83c\udd8e, \ud83d\udeae <code>List</code> \ud83d\udc48 \ud83d\udc46 \ud83d\uddc4 \u26aa\ufe0f\u27a1\ufe0f <code>typing</code>.</p> <p>\ud83d\udcc7 \ud83c\udd8e \ud83d\udc48 \ud83d\udd0c \ud83d\udd17 \ud83c\udd8e, \ud83d\udc46 \ud83d\udeae \ud83d\udc6b \u2b1c \ud83d\udddc:</p> <pre><code>from typing import List\n\n\ndef process_items(items: List[str]):\n    for item in items:\n        print(item)\n</code></pre> <p>\ud83d\udce3 \ud83d\udd22, \u23ee\ufe0f \ud83c\udf8f \u2764 (<code>:</code>) \u2755.</p> <p>\ud83c\udd8e, \ud83d\udeae <code>list</code>.</p> <p>\ud83d\udcc7 \ud83c\udd8e \ud83d\udc48 \ud83d\udd0c \ud83d\udd17 \ud83c\udd8e, \ud83d\udc46 \ud83d\udeae \ud83d\udc6b \u2b1c \ud83d\udddc:</p> <pre><code>def process_items(items: list[str]):\n    for item in items:\n        print(item)\n</code></pre> <p>Info</p> <p>\ud83d\udc48 \ud83d\udd17 \ud83c\udd8e \u2b1c \ud83d\udddc \ud83e\udd19 \"\ud83c\udd8e \ud83d\udd22\".</p> <p>\ud83d\udc49 \ud83d\udcbc, <code>str</code> \ud83c\udd8e \ud83d\udd22 \ud83d\udeb6\u200d\u2640\ufe0f <code>List</code> (\u2696\ufe0f <code>list</code> \ud83d\udc0d 3\ufe0f\u20e3.9\ufe0f\u20e3 &amp; \ud83d\udd1b).</p> <p>\ud83d\udc48 \u26d3: \"\ud83d\udd22 <code>items</code> <code>list</code>, &amp; \ud83d\udd20 \ud83c\udfec \ud83d\udc49 \ud83d\udcc7 <code>str</code>\".</p> <p>Tip</p> <p>\ud83d\udea5 \ud83d\udc46 \u2699\ufe0f \ud83d\udc0d 3\ufe0f\u20e3.9\ufe0f\u20e3 \u2696\ufe0f \ud83d\udd1b, \ud83d\udc46 \ud83d\udeab \u2714\ufe0f \ud83d\uddc4 <code>List</code> \u26aa\ufe0f\u27a1\ufe0f <code>typing</code>, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83c\udf8f \ud83e\udd54 <code>list</code> \ud83c\udd8e \u21a9\ufe0f.</p> <p>\ud83d\udd28 \ud83d\udc48, \ud83d\udc46 \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udcaa \ud83d\ude9a \ud83d\udc15\u200d\ud83e\uddba \u23ea \ud83c\udfed \ud83c\udfec \u26aa\ufe0f\u27a1\ufe0f \ud83d\udcc7:</p> <p></p> <p>\ud83c\udf75 \ud83c\udd8e, \ud83d\udc48 \ud83c\udf16 \ud83d\udcaa \ud83c\udfc6.</p> <p>\ud83d\udc40 \ud83d\udc48 \ud83d\udd22 <code>item</code> 1\ufe0f\u20e3 \ud83d\udd23 \ud83d\udcc7 <code>items</code>.</p> <p>&amp; , \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udcad \u26ab\ufe0f <code>str</code>, &amp; \ud83d\ude9a \ud83d\udc15\u200d\ud83e\uddba \ud83d\udc48.</p>"},{"location":"python-types/#_11","title":"\ud83d\udd22 &amp; \u2692","text":"<p>\ud83d\udc46 \ud83d\udd1c \ud83c\udf8f \ud83d\udce3 <code>tuple</code>\u24c2 &amp; <code>set</code>\u24c2:</p> \ud83d\udc0d 3\ufe0f\u20e3.6\ufe0f\u20e3 &amp; \ud83d\udd1b\ud83d\udc0d 3\ufe0f\u20e3.9\ufe0f\u20e3 &amp; \ud83d\udd1b <pre><code>from typing import Set, Tuple\n\n\ndef process_items(items_t: Tuple[int, int, str], items_s: Set[bytes]):\n    return items_t, items_s\n</code></pre> <pre><code>def process_items(items_t: tuple[int, int, str], items_s: set[bytes]):\n    return items_t, items_s\n</code></pre> <p>\ud83d\udc49 \u26d3:</p> <ul> <li>\ud83d\udd22 <code>items_t</code> <code>tuple</code> \u23ee\ufe0f 3\ufe0f\u20e3 \ud83c\udfec, <code>int</code>, \u27951\ufe0f\u20e3 <code>int</code>, &amp; <code>str</code>.</li> <li>\ud83d\udd22 <code>items_s</code> <code>set</code>, &amp; \ud83d\udd20 \ud83d\udeae \ud83c\udfec \ud83c\udd8e <code>bytes</code>.</li> </ul>"},{"location":"python-types/#_12","title":"#\ufe0f\u20e3","text":"<p>\ud83d\udd2c <code>dict</code>, \ud83d\udc46 \ud83d\udeb6\u200d\u2640\ufe0f 2\ufe0f\u20e3 \ud83c\udd8e \ud83d\udd22, \ud83c\udf8f \u2755.</p> <p>\ud83e\udd47 \ud83c\udd8e \ud83d\udd22 \ud83d\udd11 <code>dict</code>.</p> <p>\ud83e\udd48 \ud83c\udd8e \ud83d\udd22 \ud83d\udcb2 <code>dict</code>:</p> \ud83d\udc0d 3\ufe0f\u20e3.6\ufe0f\u20e3 &amp; \ud83d\udd1b\ud83d\udc0d 3\ufe0f\u20e3.9\ufe0f\u20e3 &amp; \ud83d\udd1b <pre><code>from typing import Dict\n\n\ndef process_items(prices: Dict[str, float]):\n    for item_name, item_price in prices.items():\n        print(item_name)\n        print(item_price)\n</code></pre> <pre><code>def process_items(prices: dict[str, float]):\n    for item_name, item_price in prices.items():\n        print(item_name)\n        print(item_price)\n</code></pre> <p>\ud83d\udc49 \u26d3:</p> <ul> <li>\ud83d\udd22 <code>prices</code> <code>dict</code>:<ul> <li>\ud83d\udd11 \ud83d\udc49 <code>dict</code> \ud83c\udd8e <code>str</code> (\u27a1\ufe0f \ud83d\udcac, \ud83d\udcdb \ud83d\udd20 \ud83c\udfec).</li> <li>\ud83d\udcb2 \ud83d\udc49 <code>dict</code> \ud83c\udd8e <code>float</code> (\u27a1\ufe0f \ud83d\udcac, \ud83d\udd16 \ud83d\udd20 \ud83c\udfec).</li> </ul> </li> </ul>"},{"location":"python-types/#_13","title":"\ud83c\uddea\ud83c\uddfa","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83d\udc48 \ud83d\udd22 \ud83d\udcaa \ud83d\ude46 \ud83d\udcda \ud83c\udd8e, \ud83d\uddbc, <code>int</code> \u2696\ufe0f <code>str</code>.</p> <p>\ud83d\udc0d 3\ufe0f\u20e3.6\ufe0f\u20e3 &amp; \ud83d\udd1b (\u2705 \ud83d\udc0d 3\ufe0f\u20e3.1\ufe0f\u20e30\ufe0f\u20e3) \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>Union</code> \ud83c\udd8e \u26aa\ufe0f\u27a1\ufe0f <code>typing</code> &amp; \ud83d\udeae \ud83d\udd18 \u2b1c \ud83d\udddc \ud83d\udcaa \ud83c\udd8e \ud83d\udeab.</p> <p>\ud83d\udc0d 3\ufe0f\u20e3.1\ufe0f\u20e30\ufe0f\u20e3 \ud83d\udce4 \ud83c\udf9b \u2755 \ud83c\udf10\u2754 \ud83d\udc46 \ud83d\udcaa \ud83d\udeae \ud83d\udcaa \ud83c\udd8e \ud83d\udc7d \u23f8 \u23f8 (<code>|</code>).</p> \ud83d\udc0d 3\ufe0f\u20e3.6\ufe0f\u20e3 &amp; \ud83d\udd1b\ud83d\udc0d 3\ufe0f\u20e3.1\ufe0f\u20e30\ufe0f\u20e3 &amp; \ud83d\udd1b <pre><code>from typing import Union\n\n\ndef process_item(item: Union[int, str]):\n    print(item)\n</code></pre> <pre><code>def process_item(item: int | str):\n    print(item)\n</code></pre> <p>\ud83d\udc6f\u200d\u2642\ufe0f \ud83d\udcbc \ud83d\udc49 \u26d3 \ud83d\udc48 <code>item</code> \ud83d\udcaa <code>int</code> \u2696\ufe0f <code>str</code>.</p>"},{"location":"python-types/#none","title":"\ud83c\udfb2 <code>None</code>","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83d\udc48 \ud83d\udcb2 \ud83d\udcaa \u2714\ufe0f \ud83c\udd8e, \ud83d\udc96 <code>str</code>, \u270b\ufe0f \ud83d\udc48 \u26ab\ufe0f \ud83d\udcaa <code>None</code>.</p> <p>\ud83d\udc0d 3\ufe0f\u20e3.6\ufe0f\u20e3 &amp; \ud83d\udd1b (\u2705 \ud83d\udc0d 3\ufe0f\u20e3.1\ufe0f\u20e30\ufe0f\u20e3) \ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \u26ab\ufe0f \ud83c\udfed &amp; \u2699\ufe0f <code>Optional</code> \u26aa\ufe0f\u27a1\ufe0f <code>typing</code> \ud83d\udd79.</p> <pre><code>from typing import Optional\n\n\ndef say_hi(name: Optional[str] = None):\n    if name is not None:\n        print(f\"Hey {name}!\")\n    else:\n        print(\"Hello World\")\n</code></pre> <p>\u2699\ufe0f <code>Optional[str]</code> \u21a9\ufe0f <code>str</code> \ud83d\udd1c \u27a1\ufe0f \ud83d\udc68\u200d\ud83c\udfa8 \u2139 \ud83d\udc46 \ud83d\udd0d \u274c \ud83c\udf10\u2754 \ud83d\udc46 \ud83d\udcaa \ud83e\udd14 \ud83d\udc48 \ud83d\udcb2 \ud83d\udd67 <code>str</code>, \ud83d\udd50\u2754 \u26ab\ufe0f \ud83d\udcaa \ud83e\udd19 <code>None</code> \ud83d\udc81\u200d\u2642\ufe0f.</p> <p><code>Optional[Something]</code> \ud83e\udd19 \u2328 <code>Union[Something, None]</code>, \ud83d\udc6b \ud83c\udf13.</p> <p>\ud83d\udc49 \u26d3 \ud83d\udc48 \ud83d\udc0d 3\ufe0f\u20e3.1\ufe0f\u20e30\ufe0f\u20e3, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>Something | None</code>:</p> \ud83d\udc0d 3\ufe0f\u20e3.6\ufe0f\u20e3 &amp; \ud83d\udd1b\ud83d\udc0d 3\ufe0f\u20e3.6\ufe0f\u20e3 &amp; \ud83d\udd1b - \ud83c\udf9b\ud83d\udc0d 3\ufe0f\u20e3.1\ufe0f\u20e30\ufe0f\u20e3 &amp; \ud83d\udd1b <pre><code>from typing import Optional\n\n\ndef say_hi(name: Optional[str] = None):\n    if name is not None:\n        print(f\"Hey {name}!\")\n    else:\n        print(\"Hello World\")\n</code></pre> <pre><code>from typing import Union\n\n\ndef say_hi(name: Union[str, None] = None):\n    if name is not None:\n        print(f\"Hey {name}!\")\n    else:\n        print(\"Hello World\")\n</code></pre> <pre><code>def say_hi(name: str | None = None):\n    if name is not None:\n        print(f\"Hey {name}!\")\n    else:\n        print(\"Hello World\")\n</code></pre>"},{"location":"python-types/#union-optional","title":"\u2699\ufe0f <code>Union</code> \u2696\ufe0f <code>Optional</code>","text":"<p>\ud83d\udea5 \ud83d\udc46 \u2699\ufe0f \ud83d\udc0d \u23ec \ud83d\udd1b 3\ufe0f\u20e3.1\ufe0f\u20e30\ufe0f\u20e3, \ud83d\udce5 \ud83d\udc81\u200d\u2642 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc47 \ud83d\udcf6 \ud83e\udd14 \u261d \ud83c\udf91:</p> <ul> <li>\ud83d\udc76 \u274e \u2699\ufe0f <code>Optional[SomeType]</code></li> <li>\u21a9\ufe0f \ud83d\udc76 \u2699\ufe0f <code>Union[SomeType, None]</code> \ud83d\udc76.</li> </ul> <p>\ud83d\udc6f\u200d\u2642\ufe0f \ud83c\udf13 &amp; \ud83d\udd18 \ud83d\udc6b \ud83c\udf8f, \u270b\ufe0f \ud83d\udc64 \ud83d\udd1c \ud83d\udc4d <code>Union</code> \u21a9\ufe0f <code>Optional</code> \u21a9\ufe0f \ud83d\udd24 \"\ud83d\udce6\" \ud83d\udd1c \ud83d\ude11 \ud83d\udd11 \ud83d\udc48 \ud83d\udcb2 \ud83d\udce6, &amp; \u26ab\ufe0f \ud83e\udd19 \u26d3 \"\u26ab\ufe0f \ud83d\udcaa <code>None</code>\", \ud83d\udea5 \u26ab\ufe0f \ud83d\udeab \ud83d\udce6 &amp; \u2714.</p> <p>\ud83d\udc64 \ud83d\udcad <code>Union[SomeType, None]</code> \ud83c\udf16 \ud83d\udd11 \ud83d\udd03 \u26ab\ufe0f\u2754 \u26ab\ufe0f \u26d3.</p> <p>\u26ab\ufe0f \ud83d\udd03 \ud83d\udd24 &amp; \ud83d\udcdb. \u270b\ufe0f \ud83d\udc48 \ud83d\udd24 \ud83d\udcaa \ud83d\udcc9 \u2754 \ud83d\udc46 &amp; \ud83d\udc46 \ud83e\udd3d\u200d\u2642 \ud83d\udcad \ud83d\udd03 \ud83d\udcdf.</p> <p>\ud83d\uddbc, \u27a1\ufe0f \u270a \ud83d\udc49 \ud83d\udd22:</p> <pre><code>from typing import Optional\n\n\ndef say_hi(name: Optional[str]):\n    print(f\"Hey {name}!\")\n</code></pre> <p>\ud83d\udd22 <code>name</code> \ud83d\udd2c <code>Optional[str]</code>, \u270b\ufe0f \u26ab\ufe0f \ud83d\udeab \ud83d\udce6, \ud83d\udc46 \ud83d\udeab\ud83d\udd1c \ud83e\udd19 \ud83d\udd22 \ud83c\udf75 \ud83d\udd22:</p> <pre><code>say_hi()  # Oh, no, this throws an error! \ud83d\ude31\n</code></pre> <p><code>name</code> \ud83d\udd22 \u2714 (\ud83d\udeab \ud83d\udce6) \u21a9\ufe0f \u26ab\ufe0f \ud83d\udeab \u2714\ufe0f \ud83d\udd22 \ud83d\udcb2. , <code>name</code> \ud83d\udeab <code>None</code> \ud83d\udcb2:</p> <pre><code>say_hi(name=None)  # This works, None is valid \ud83c\udf89\n</code></pre> <p>\ud83d\udc4d \ud83d\udcf0, \ud83d\udd50 \ud83d\udc46 \ud83d\udd1b \ud83d\udc0d 3\ufe0f\u20e3.1\ufe0f\u20e30\ufe0f\u20e3 \ud83d\udc46 \ud83c\udfc6 \ud83d\udeab \u2714\ufe0f \ud83d\ude1f \ud83d\udd03 \ud83d\udc48, \ud83d\udc46 \ud83d\udd1c \ud83d\udcaa \ud83c\udfaf \u2699\ufe0f <code>|</code> \ud83d\udd2c \ud83c\uddea\ud83c\uddfa \ud83c\udd8e:</p> <pre><code>def say_hi(name: str | None):\n    print(f\"Hey {name}!\")\n</code></pre> <p>&amp; \u2934\ufe0f \ud83d\udc46 \ud83c\udfc6 \ud83d\udeab \u2714\ufe0f \ud83d\ude1f \ud83d\udd03 \ud83d\udcdb \ud83d\udc96 <code>Optional</code> &amp; <code>Union</code>. \ud83d\udc76</p>"},{"location":"python-types/#_14","title":"\ud83d\udc8a \ud83c\udd8e","text":"<p>\ud83d\udc49 \ud83c\udd8e \ud83d\udc48 \u270a \ud83c\udd8e \ud83d\udd22 \u2b1c \ud83d\udddc \ud83e\udd19 \ud83d\udc8a \ud83c\udd8e \u2696\ufe0f \ud83d\udc8a, \ud83d\uddbc:</p> \ud83d\udc0d 3\ufe0f\u20e3.6\ufe0f\u20e3 &amp; \ud83d\udd1b\ud83d\udc0d 3\ufe0f\u20e3.9\ufe0f\u20e3 &amp; \ud83d\udd1b\ud83d\udc0d 3\ufe0f\u20e3.1\ufe0f\u20e30\ufe0f\u20e3 &amp; \ud83d\udd1b <ul> <li><code>List</code></li> <li><code>Tuple</code></li> <li><code>Set</code></li> <li><code>Dict</code></li> <li><code>Union</code></li> <li><code>Optional</code></li> <li>...&amp; \ud83c\udf8f.</li> </ul> <p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83c\udf8f \ud83d\udcbd \ud83c\udd8e \ud83d\udc8a (\u23ee\ufe0f \u2b1c \ud83d\udddc &amp; \ud83c\udd8e \ud83d\udd18):</p> <ul> <li><code>list</code></li> <li><code>tuple</code></li> <li><code>set</code></li> <li><code>dict</code></li> </ul> <p>&amp; \ud83c\udf8f \u23ee\ufe0f \ud83d\udc0d 3\ufe0f\u20e3.6\ufe0f\u20e3, \u26aa\ufe0f\u27a1\ufe0f <code>typing</code> \ud83d\udd79:</p> <ul> <li><code>Union</code></li> <li><code>Optional</code></li> <li>...&amp; \ud83c\udf8f.</li> </ul> <p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83c\udf8f \ud83d\udcbd \ud83c\udd8e \ud83d\udc8a (\u23ee\ufe0f \u2b1c \ud83d\udddc &amp; \ud83c\udd8e \ud83d\udd18):</p> <ul> <li><code>list</code></li> <li><code>tuple</code></li> <li><code>set</code></li> <li><code>dict</code></li> </ul> <p>&amp; \ud83c\udf8f \u23ee\ufe0f \ud83d\udc0d 3\ufe0f\u20e3.6\ufe0f\u20e3, \u26aa\ufe0f\u27a1\ufe0f <code>typing</code> \ud83d\udd79:</p> <ul> <li><code>Union</code></li> <li><code>Optional</code> (\ud83c\udf8f \u23ee\ufe0f \ud83d\udc0d 3\ufe0f\u20e3.6\ufe0f\u20e3)</li> <li>...&amp; \ud83c\udf8f.</li> </ul> <p>\ud83d\udc0d 3\ufe0f\u20e3.1\ufe0f\u20e30\ufe0f\u20e3, \ud83c\udf9b \u2699\ufe0f \ud83d\udc8a <code>Union</code> &amp; <code>Optional</code>, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \u23f8 \u23f8 (<code>|</code>) \ud83d\udce3 \ud83c\uddea\ud83c\uddfa \ud83c\udd8e.</p>"},{"location":"python-types/#_15","title":"\ud83c\udf93 \ud83c\udd8e","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83c\udf93 \ud83c\udd8e \ud83d\udd22.</p> <p>\u27a1\ufe0f \ud83d\udcac \ud83d\udc46 \u2714\ufe0f \ud83c\udf93 <code>Person</code>, \u23ee\ufe0f \ud83d\udcdb:</p> <pre><code>class Person:\n    def __init__(self, name: str):\n        self.name = name\n\n\ndef get_person_name(one_person: Person):\n    return one_person.name\n</code></pre> <p>\u2934\ufe0f \ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83d\udd22 \ud83c\udd8e <code>Person</code>:</p> <pre><code>class Person:\n    def __init__(self, name: str):\n        self.name = name\n\n\ndef get_person_name(one_person: Person):\n    return one_person.name\n</code></pre> <p>&amp; \u2934\ufe0f, \ud83d\udd04, \ud83d\udc46 \ud83e\udd1a \ud83c\udf10 \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udc15\u200d\ud83e\uddba:</p> <p></p>"},{"location":"python-types/#pydantic","title":"Pydantic \ud83c\udff7","text":"<p>Pydantic \ud83d\udc0d \ud83d\uddc3 \ud83c\udfad \ud83d\udcca \ud83d\udd2c.</p> <p>\ud83d\udc46 \ud83d\udce3 \"\ud83d\udca0\" \ud83d\udcbd \ud83c\udf93 \u23ee\ufe0f \ud83d\udd22.</p> <p>&amp; \ud83d\udd20 \ud83d\udd22 \u2714\ufe0f \ud83c\udd8e.</p> <p>\u2934\ufe0f \ud83d\udc46 \u270d \ud83d\udc50 \ud83d\udc48 \ud83c\udf93 \u23ee\ufe0f \ud83d\udcb2 &amp; \u26ab\ufe0f \ud83d\udd1c \u2714 \ud83d\udcb2, \ud83d\udddc \ud83d\udc6b \u2611 \ud83c\udd8e (\ud83d\udea5 \ud83d\udc48 \ud83d\udcbc) &amp; \ud83e\udd1d \ud83d\udc46 \ud83c\udf9a \u23ee\ufe0f \ud83c\udf10 \ud83d\udcbd.</p> <p>&amp; \ud83d\udc46 \ud83e\udd1a \ud83c\udf10 \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udc15\u200d\ud83e\uddba \u23ee\ufe0f \ud83d\udc48 \ud83d\udcc9 \ud83c\udf9a.</p> <p>\ud83d\uddbc \u26aa\ufe0f\u27a1\ufe0f \ud83d\udec2 Pydantic \ud83e\ude7a:</p> \ud83d\udc0d 3\ufe0f\u20e3.6\ufe0f\u20e3 &amp; \ud83d\udd1b\ud83d\udc0d 3\ufe0f\u20e3.9\ufe0f\u20e3 &amp; \ud83d\udd1b\ud83d\udc0d 3\ufe0f\u20e3.1\ufe0f\u20e30\ufe0f\u20e3 &amp; \ud83d\udd1b <pre><code>from datetime import datetime\nfrom typing import List, Union\n\nfrom pydantic import BaseModel\n\n\nclass User(BaseModel):\n    id: int\n    name: str = \"John Doe\"\n    signup_ts: Union[datetime, None] = None\n    friends: List[int] = []\n\n\nexternal_data = {\n    \"id\": \"123\",\n    \"signup_ts\": \"2017-06-01 12:22\",\n    \"friends\": [1, \"2\", b\"3\"],\n}\nuser = User(**external_data)\nprint(user)\n# &gt; User id=123 name='John Doe' signup_ts=datetime.datetime(2017, 6, 1, 12, 22) friends=[1, 2, 3]\nprint(user.id)\n# &gt; 123\n</code></pre> <pre><code>from datetime import datetime\nfrom typing import Union\n\nfrom pydantic import BaseModel\n\n\nclass User(BaseModel):\n    id: int\n    name: str = \"John Doe\"\n    signup_ts: Union[datetime, None] = None\n    friends: list[int] = []\n\n\nexternal_data = {\n    \"id\": \"123\",\n    \"signup_ts\": \"2017-06-01 12:22\",\n    \"friends\": [1, \"2\", b\"3\"],\n}\nuser = User(**external_data)\nprint(user)\n# &gt; User id=123 name='John Doe' signup_ts=datetime.datetime(2017, 6, 1, 12, 22) friends=[1, 2, 3]\nprint(user.id)\n# &gt; 123\n</code></pre> <pre><code>from datetime import datetime\n\nfrom pydantic import BaseModel\n\n\nclass User(BaseModel):\n    id: int\n    name: str = \"John Doe\"\n    signup_ts: datetime | None = None\n    friends: list[int] = []\n\n\nexternal_data = {\n    \"id\": \"123\",\n    \"signup_ts\": \"2017-06-01 12:22\",\n    \"friends\": [1, \"2\", b\"3\"],\n}\nuser = User(**external_data)\nprint(user)\n# &gt; User id=123 name='John Doe' signup_ts=datetime.datetime(2017, 6, 1, 12, 22) friends=[1, 2, 3]\nprint(user.id)\n# &gt; 123\n</code></pre> <p>Info</p> <p>\ud83d\udca1 \ud83c\udf16 \ud83d\udd03 Pydantic, \u2705 \ud83d\udeae \ud83e\ude7a.</p> <p>ReadyAPI \ud83c\udf10 \u2693\ufe0f \ud83d\udd1b Pydantic.</p> <p>\ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \ud83d\udcda \ud83c\udf05 \ud83c\udf10 \ud83d\udc49 \ud83d\udca1 \ud83d\udd30 - \ud83d\udc69\u200d\ud83d\udcbb \ud83e\uddae.</p> <p>Tip</p> <p>Pydantic \u2714\ufe0f \ud83c\udf81 \ud83c\udfad \ud83d\udd50\u2754 \ud83d\udc46 \u2699\ufe0f <code>Optional</code> \u2696\ufe0f <code>Union[Something, None]</code> \ud83c\udf75 \ud83d\udd22 \ud83d\udcb2, \ud83d\udc46 \ud83d\udcaa \u270d \ud83c\udf05 \ud83d\udd03 \u26ab\ufe0f Pydantic \ud83e\ude7a \ud83d\udd03 \u2714 \ud83d\udce6 \ud83c\udfd1.</p>"},{"location":"python-types/#readyapi","title":"\ud83c\udd8e \ud83d\udd11 ReadyAPI","text":"<p>ReadyAPI \u270a \ud83d\udcc8 \ud83d\udc6b \ud83c\udd8e \ud83d\udd11 \ud83d\udcda \ud83d\udc5c.</p> <p>\u23ee\ufe0f ReadyAPI \ud83d\udc46 \ud83d\udce3 \ud83d\udd22 \u23ee\ufe0f \ud83c\udd8e \ud83d\udd11 &amp; \ud83d\udc46 \ud83e\udd1a:</p> <ul> <li>\ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udc15\u200d\ud83e\uddba.</li> <li>\ud83c\udd8e \u2705.</li> </ul> <p>...and ReadyAPI uses the same declarations :</p> <ul> <li>\ud83d\udd2c \ud83d\udcc4: \u26aa\ufe0f\u27a1\ufe0f \ud83d\udce8 \u27a1 \ud83d\udd22, \ud83d\udd22 \ud83d\udd22, \ud83c\udf9a, \ud83d\udcaa, \ud83d\udd17, \u2652\ufe0f.</li> <li>\ud83d\udddc \ud83d\udcbd: \u26aa\ufe0f\u27a1\ufe0f \ud83d\udce8 \ud83d\ude9a \ud83c\udd8e.</li> <li>\u2714 \ud83d\udcbd: \ud83d\udc5f \u26aa\ufe0f\u27a1\ufe0f \ud83d\udd20 \ud83d\udce8:<ul> <li>\ud83c\udfed \ud83c\udfe7 \u274c \ud83d\udce8 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd50\u2754 \ud83d\udcca \u274c.</li> </ul> </li> <li>\ud83d\udcc4 \ud83d\udee0\ufe0f \u2699\ufe0f \ud83d\uddc4:<ul> <li>\u2754 \u2934\ufe0f \u2699\ufe0f \ud83c\udfe7 \ud83c\udf93 \ud83e\uddfe \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd22.</li> </ul> </li> </ul> <p>\ud83d\udc49 5\ufe0f\u20e3\ud83d\udcc6 \ud83c\udf10 \ud83d\udd0a \ud83d\udcdd. \ud83d\udeab \ud83d\ude1f. \ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \ud83c\udf10 \ud83d\udc49 \ud83c\udfaf \ud83d\udd30 - \ud83d\udc69\u200d\ud83d\udcbb \ud83e\uddae.</p> <p>\u26a0 \ud83d\udc5c \ud83d\udc48 \u2699\ufe0f \ud83d\udc29 \ud83d\udc0d \ud83c\udd8e, \ud83d\udc41 \ud83e\udd49 (\u21a9\ufe0f \u274e \ud83c\udf16 \ud83c\udf93, \ud83d\udc68\u200d\ud83c\udfa8, \u2652\ufe0f), ReadyAPI \ud83d\udd1c \ud83d\udcda \ud83d\udc77 \ud83d\udc46.</p> <p>Info</p> <p>\ud83d\udea5 \ud83d\udc46 \u23ea \ud83d\udeb6 \ud83d\udd18 \ud83c\udf10 \ud83d\udd30 &amp; \ud83d\udc5f \ud83d\udd19 \ud83d\udc40 \ud83c\udf05 \ud83d\udd03 \ud83c\udd8e, \ud83d\udc4d \u2139  \"\ud83c\udfae \ud83c\udfbc\" \u26aa\ufe0f\u27a1\ufe0f <code>mypy</code>.</p>"},{"location":"advanced/","title":"\ud83c\udfe7 \ud83d\udc69\u200d\ud83d\udcbb \ud83e\uddae","text":""},{"location":"advanced/#_2","title":"\ud83c\udf16 \u2692","text":"<p>\ud83d\udc51 \ud83d\udd30 - \ud83d\udc69\u200d\ud83d\udcbb \ud83e\uddae \ud83d\udd1c \ud83e\udd43 \ud83e\udd1d \ud83d\udc46 \ud83c\udfab \ud83d\udd18 \ud83c\udf10 \ud83d\udc51 \u2692 ReadyAPI.</p> <p>\u23ed \ud83d\udcc4 \ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \ud83c\udf8f \ud83c\udf9b, \ud83d\udcf3, &amp; \ud83c\udf16 \u2692.</p> <p>Tip</p> <p>\u23ed \ud83d\udcc4 \ud83d\udeab \ud83c\udfaf \"\ud83c\udfe7\".</p> <p>&amp; \u26ab\ufe0f \ud83d\udcaa \ud83d\udc48 \ud83d\udc46 \u2699\ufe0f \ud83d\udcbc, \u2697 1\ufe0f\u20e3 \ud83d\udc6b.</p>"},{"location":"advanced/#_3","title":"\u270d \ud83d\udd30 \ud83e\udd47","text":"<p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83c\udfc6 \u2692 ReadyAPI \u23ee\ufe0f \ud83d\udca1 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc51 \ud83d\udd30 - \ud83d\udc69\u200d\ud83d\udcbb \ud83e\uddae.</p> <p>&amp; \u23ed \ud83d\udcc4 \ud83e\udd14 \ud83d\udc46 \u23ea \u270d \u26ab\ufe0f, &amp; \ud83e\udd14 \ud83d\udc48 \ud83d\udc46 \ud83d\udcad \ud83d\udc48 \ud83d\udc51 \ud83d\udcad.</p>"},{"location":"advanced/#_4","title":"\ud83c\udfce.\ud83c\udd7e \u2197\ufe0f","text":"<p>\ud83d\udea5 \ud83d\udc46 \ud83d\udd1c \ud83d\udc96 \u270a \ud83c\udfe7-\ud83d\udd30 \u2197\ufe0f \ud83d\udd17 \ud83d\udc49 \ud83d\udcc4 \ud83e\ude7a, \ud83d\udc46 \ud83d\udcaa \ud83d\udc9a \u2705: \ud83d\udcaf-\ud83d\udcbe \ud83d\udee0\ufe0f \u23ee\ufe0f ReadyAPI &amp; \u2601 \ud83c\udfce.\ud83c\udd7e.</p> <p>\ud83d\udc6b \u23f3 \ud83e\ude78 1\ufe0f\u20e30\ufe0f\u20e3 \ud83d\udcaf \ud83c\udf10 \ud83d\udcb0 \ud83d\udee0\ufe0f ReadyAPI. \ud83d\udc76 \ud83d\udc76</p>"},{"location":"advanced/additional-responses/","title":"\ud83c\udf16 \ud83d\udce8 \ud83d\uddc4","text":"<p>Warning</p> <p>\ud83d\udc49 \ud83d\udc4d \ud83c\udfe7 \u2754.</p> <p>\ud83d\udea5 \ud83d\udc46 \u25b6\ufe0f \u23ee\ufe0f ReadyAPI, \ud83d\udc46 \ud83d\udcaa \ud83d\udeab \ud83d\udcaa \ud83d\udc49.</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83c\udf16 \ud83d\udce8, \u23ee\ufe0f \ud83c\udf16 \ud83d\udc54 \ud83d\udcdf, \ud83d\udd09 \ud83c\udd8e, \ud83d\udcdb, \u2652\ufe0f.</p> <p>\ud83d\udc48 \ud83c\udf16 \ud83d\udce8 \ud83d\udd1c \ud83d\udd0c \ud83d\uddc4 \ud83d\udd17, \ud83d\udc6b \ud83d\udd1c \ud83d\ude11 \ud83d\udee0\ufe0f \ud83e\ude7a.</p> <p>\u270b\ufe0f \ud83d\udc48 \ud83c\udf16 \ud83d\udce8 \ud83d\udc46 \u2714\ufe0f \u2692 \ud83d\udcad \ud83d\udc46 \ud83d\udce8 <code>Response</code> \ud83d\udc96 <code>JSONResponse</code> \ud83d\udd17, \u23ee\ufe0f \ud83d\udc46 \ud83d\udc54 \ud83d\udcdf &amp; \ud83c\udf9a.</p>"},{"location":"advanced/additional-responses/#model","title":"\ud83c\udf16 \ud83d\udce8 \u23ee\ufe0f <code>model</code>","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udeb6\u200d\u2640\ufe0f \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udd22 <code>responses</code>.</p> <p>\u26ab\ufe0f \ud83d\udce8 <code>dict</code>, \ud83d\udd11 \ud83d\udc54 \ud83d\udcdf \ud83d\udd20 \ud83d\udce8, \ud83d\udc96 <code>200</code>, &amp; \ud83d\udcb2 \ud83c\udf8f <code>dict</code>\u24c2 \u23ee\ufe0f \u2139 \ud83d\udd20 \ud83d\udc6b.</p> <p>\ud83d\udd20 \ud83d\udc48 \ud83d\udce8 <code>dict</code>\u24c2 \ud83d\udcaa \u2714\ufe0f \ud83d\udd11 <code>model</code>, \u2697 Pydantic \ud83c\udff7, \ud83d\udc96 <code>response_model</code>.</p> <p>ReadyAPI \ud83d\udd1c \u270a \ud83d\udc48 \ud83c\udff7, \ud83c\udfd7 \ud83d\udeae \ud83c\udfbb \ud83d\udd17 &amp; \ud83d\udd0c \u26ab\ufe0f \u2611 \ud83e\udd49 \ud83d\uddc4.</p> <p>\ud83d\uddbc, \ud83d\udce3 \u27951\ufe0f\u20e3 \ud83d\udce8 \u23ee\ufe0f \ud83d\udc54 \ud83d\udcdf <code>404</code> &amp; Pydantic \ud83c\udff7 <code>Message</code>, \ud83d\udc46 \ud83d\udcaa \u270d:</p> Python 3.8+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.responses import JSONResponse\n\n\nclass Item(BaseModel):\n    id: str\n    value: str\n\n\nclass Message(BaseModel):\n    message: str\n\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\", response_model=Item, responses={404: {\"model\": Message}})\nasync def read_item(item_id: str):\n    if item_id == \"foo\":\n        return {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n    return JSONResponse(status_code=404, content={\"message\": \"Item not found\"})\n</code></pre> <p>Note</p> <p>\u2714\ufe0f \ud83e\udd2f \ud83d\udc48 \ud83d\udc46 \u2714\ufe0f \ud83d\udce8 <code>JSONResponse</code> \ud83d\udd17.</p> <p>Info</p> <p><code>model</code> \ud83d\udd11 \ud83d\udeab \ud83c\udf55 \ud83d\uddc4.</p> <p>ReadyAPI \ud83d\udd1c \u270a Pydantic \ud83c\udff7 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udce4, \ud83c\udfd7 <code>JSON Schema</code>, &amp; \ud83d\udeae \u26ab\ufe0f \u2611 \ud83e\udd49.</p> <p>\u2611 \ud83e\udd49:</p> <ul> <li>\ud83d\udd11 <code>content</code>, \ud83d\udc48 \u2714\ufe0f \ud83d\udcb2 \u27951\ufe0f\u20e3 \ud83c\udfbb \ud83c\udf9a (<code>dict</code>) \ud83d\udc48 \ud83d\udd0c:<ul> <li>\ud83d\udd11 \u23ee\ufe0f \ud83d\udcfb \ud83c\udd8e, \u2705 <code>application/json</code>, \ud83d\udc48 \ud83d\udd0c \ud83d\udcb2 \u27951\ufe0f\u20e3 \ud83c\udfbb \ud83c\udf9a, \ud83d\udc48 \ud83d\udd0c:<ul> <li>\ud83d\udd11 <code>schema</code>, \ud83d\udc48 \u2714\ufe0f \ud83d\udcb2 \ud83c\udfbb \ud83d\udd17 \u26aa\ufe0f\u27a1\ufe0f \ud83c\udff7, \ud83d\udce5 \u2611 \ud83e\udd49.<ul> <li>ReadyAPI \ud83d\udeae \ud83d\udd17 \ud83d\udce5 \ud83c\udf10 \ud83c\udfbb \ud83d\udd17 \u27951\ufe0f\u20e3 \ud83e\udd49 \ud83d\udc46 \ud83d\uddc4 \u21a9\ufe0f \u2705 \u26ab\ufe0f \ud83d\udd17. \ud83d\udc49 \ud83c\udf0c, \ud83c\udf8f \ud83c\ude38 &amp; \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udcaa \u2699\ufe0f \ud83d\udc48 \ud83c\udfbb \ud83d\udd17 \ud83d\udd17, \ud83d\ude9a \ud83d\udc7b \ud83d\udcdf \u26a1 \ud83e\uddf0, \u2652\ufe0f.</li> </ul> </li> </ul> </li> </ul> </li> </ul> <p>\ud83c\udfd7 \ud83d\udce8 \ud83d\uddc4 \ud83d\udc49 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd1c:</p> <pre><code>{\n    \"responses\": {\n        \"404\": {\n            \"description\": \"Additional Response\",\n            \"content\": {\n                \"application/json\": {\n                    \"schema\": {\n                        \"$ref\": \"#/components/schemas/Message\"\n                    }\n                }\n            }\n        },\n        \"200\": {\n            \"description\": \"Successful Response\",\n            \"content\": {\n                \"application/json\": {\n                    \"schema\": {\n                        \"$ref\": \"#/components/schemas/Item\"\n                    }\n                }\n            }\n        },\n        \"422\": {\n            \"description\": \"Validation Error\",\n            \"content\": {\n                \"application/json\": {\n                    \"schema\": {\n                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre> <p>\ud83d\udd17 \ud83d\udd17 \u27951\ufe0f\u20e3 \ud83e\udd49 \ud83d\udd18 \ud83d\uddc4 \ud83d\udd17:</p> <pre><code>{\n    \"components\": {\n        \"schemas\": {\n            \"Message\": {\n                \"title\": \"Message\",\n                \"required\": [\n                    \"message\"\n                ],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"message\": {\n                        \"title\": \"Message\",\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"Item\": {\n                \"title\": \"Item\",\n                \"required\": [\n                    \"id\",\n                    \"value\"\n                ],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"title\": \"Id\",\n                        \"type\": \"string\"\n                    },\n                    \"value\": {\n                        \"title\": \"Value\",\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"ValidationError\": {\n                \"title\": \"ValidationError\",\n                \"required\": [\n                    \"loc\",\n                    \"msg\",\n                    \"type\"\n                ],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"loc\": {\n                        \"title\": \"Location\",\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"msg\": {\n                        \"title\": \"Message\",\n                        \"type\": \"string\"\n                    },\n                    \"type\": {\n                        \"title\": \"Error Type\",\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"HTTPValidationError\": {\n                \"title\": \"HTTPValidationError\",\n                \"type\": \"object\",\n                \"properties\": {\n                    \"detail\": {\n                        \"title\": \"Detail\",\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#/components/schemas/ValidationError\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"advanced/additional-responses/#_2","title":"\ud83c\udf16 \ud83d\udd09 \ud83c\udd8e \ud83d\udc51 \ud83d\udce8","text":"<p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83d\udc49 \ud83c\udf8f <code>responses</code> \ud83d\udd22 \ud83d\udeae \ud83c\udf8f \ud83d\udd09 \ud83c\udd8e \ud83c\udf8f \ud83d\udc51 \ud83d\udce8.</p> <p>\ud83d\uddbc, \ud83d\udc46 \ud83d\udcaa \ud83d\udeae \ud83c\udf16 \ud83d\udcfb \ud83c\udd8e <code>image/png</code>, \ud83d\udce3 \ud83d\udc48 \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f \ud83d\udcaa \ud83d\udce8 \ud83c\udfbb \ud83c\udf9a (\u23ee\ufe0f \ud83d\udcfb \ud83c\udd8e <code>application/json</code>) \u2696\ufe0f \ud83c\udde9\ud83c\uddf4 \ud83d\uddbc:</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.responses import FileResponse\n\n\nclass Item(BaseModel):\n    id: str\n    value: str\n\n\napp = ReadyAPI()\n\n\n@app.get(\n    \"/items/{item_id}\",\n    response_model=Item,\n    responses={\n        200: {\n            \"content\": {\"image/png\": {}},\n            \"description\": \"Return the JSON item or an image.\",\n        }\n    },\n)\nasync def read_item(item_id: str, img: Union[bool, None] = None):\n    if img:\n        return FileResponse(\"image.png\", media_type=\"image/png\")\n    else:\n        return {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n</code></pre> <p>Note</p> <p>\ud83d\udc40 \ud83d\udc48 \ud83d\udc46 \u2714\ufe0f \ud83d\udce8 \ud83d\uddbc \u2699\ufe0f <code>FileResponse</code> \ud83d\udd17.</p> <p>Info</p> <p>\ud83d\udea5 \ud83d\udc46 \u2714 \ud83c\udf8f \ud83d\udcfb \ud83c\udd8e \ud83c\udfaf \ud83d\udc46 <code>responses</code> \ud83d\udd22, ReadyAPI \ud83d\udd1c \ud83e\udd14 \ud83d\udce8 \u2714\ufe0f \ud83c\udf8f \ud83d\udcfb \ud83c\udd8e \ud83d\udc51 \ud83d\udce8 \ud83c\udf93 (\ud83d\udd22 <code>application/json</code>).</p> <p>\u270b\ufe0f \ud83d\udea5 \ud83d\udc46 \u2714\ufe0f \u2714 \ud83d\udec3 \ud83d\udce8 \ud83c\udf93 \u23ee\ufe0f <code>None</code> \ud83d\udeae \ud83d\udcfb \ud83c\udd8e, ReadyAPI \ud83d\udd1c \u2699\ufe0f <code>application/json</code> \ud83d\ude46 \ud83c\udf16 \ud83d\udce8 \ud83d\udc48 \u2714\ufe0f \ud83d\udc68\u200d\ud83d\udcbc \ud83c\udff7.</p>"},{"location":"advanced/additional-responses/#i","title":"\ud83c\udf00 \u2139","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83c\udf00 \ud83d\udce8 \u2139 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc97 \ud83e\udd49, \ud83d\udd0c <code>response_model</code>, <code>status_code</code>, &amp; <code>responses</code> \ud83d\udd22.</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udce3 <code>response_model</code>, \u2699\ufe0f \ud83d\udd22 \ud83d\udc54 \ud83d\udcdf <code>200</code> (\u2696\ufe0f \ud83d\udec3 1\ufe0f\u20e3 \ud83d\udea5 \ud83d\udc46 \ud83d\udcaa), &amp; \u2934\ufe0f \ud83d\udce3 \ud83c\udf16 \u2139 \ud83d\udc48 \ud83c\udf8f \ud83d\udce8 <code>responses</code>, \ud83d\udd17 \ud83d\uddc4 \ud83d\udd17.</p> <p>ReadyAPI \ud83d\udd1c \ud83d\udea7 \ud83c\udf16 \u2139 \u26aa\ufe0f\u27a1\ufe0f <code>responses</code>, &amp; \ud83c\udf00 \u26ab\ufe0f \u23ee\ufe0f \ud83c\udfbb \ud83d\udd17 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc46 \ud83c\udff7.</p> <p>\ud83d\uddbc, \ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83d\udce8 \u23ee\ufe0f \ud83d\udc54 \ud83d\udcdf <code>404</code> \ud83d\udc48 \u2699\ufe0f Pydantic \ud83c\udff7 &amp; \u2714\ufe0f \ud83d\udec3 <code>description</code>.</p> <p>&amp; \ud83d\udce8 \u23ee\ufe0f \ud83d\udc54 \ud83d\udcdf <code>200</code> \ud83d\udc48 \u2699\ufe0f \ud83d\udc46 <code>response_model</code>, \u270b\ufe0f \ud83d\udd0c \ud83d\udec3 <code>example</code>:</p> Python 3.8+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.responses import JSONResponse\n\n\nclass Item(BaseModel):\n    id: str\n    value: str\n\n\nclass Message(BaseModel):\n    message: str\n\n\napp = ReadyAPI()\n\n\n@app.get(\n    \"/items/{item_id}\",\n    response_model=Item,\n    responses={\n        404: {\"model\": Message, \"description\": \"The item was not found\"},\n        200: {\n            \"description\": \"Item requested by ID\",\n            \"content\": {\n                \"application/json\": {\n                    \"example\": {\"id\": \"bar\", \"value\": \"The bar tenders\"}\n                }\n            },\n        },\n    },\n)\nasync def read_item(item_id: str):\n    if item_id == \"foo\":\n        return {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n    else:\n        return JSONResponse(status_code=404, content={\"message\": \"Item not found\"})\n</code></pre> <p>\u26ab\ufe0f \ud83d\udd1c \ud83c\udf10 \ud83c\udf00 &amp; \ud83d\udd0c \ud83d\udc46 \ud83d\uddc4, &amp; \ud83c\udfa6 \ud83d\udee0\ufe0f \ud83e\ude7a:</p> <p></p>"},{"location":"advanced/additional-responses/#_3","title":"\ud83c\udf00 \ud83d\udd22 \ud83d\udce8 &amp; \ud83d\udec3 \ud83d\udd50","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udc9a \u2714\ufe0f \ud83d\udd01 \ud83d\udce8 \ud83d\udc48 \u2714 \ud83d\udcda \u27a1 \ud83d\udee0\ufe0f, \u270b\ufe0f \ud83d\udc46 \ud83d\udc9a \ud83c\udf00 \ud83d\udc6b \u23ee\ufe0f \ud83d\udec3 \ud83d\udce8 \ud83d\udc9a \ud83d\udd20 \u27a1 \ud83d\udee0\ufe0f.</p> <p>\ud83d\udcda \ud83d\udcbc, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83d\udc0d \u2692 \"\ud83c\udfd7\" <code>dict</code> \u23ee\ufe0f <code>**dict_to_unpack</code>:</p> <pre><code>old_dict = {\n    \"old key\": \"old value\",\n    \"second old key\": \"second old value\",\n}\nnew_dict = {**old_dict, \"new key\": \"new value\"}\n</code></pre> <p>\ud83d\udce5, <code>new_dict</code> \ud83d\udd1c \ud83d\udd0c \ud83c\udf10 \ud83d\udd11-\ud83d\udcb2 \ud83d\udc6b \u26aa\ufe0f\u27a1\ufe0f <code>old_dict</code> \u2795 \ud83c\udd95 \ud83d\udd11-\ud83d\udcb2 \ud83d\udc6b:</p> <pre><code>{\n    \"old key\": \"old value\",\n    \"second old key\": \"second old value\",\n    \"new key\": \"new value\",\n}\n</code></pre> <p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83d\udc48 \u2692 \ud83c\udfe4-\u2699\ufe0f \ud83d\udd22 \ud83d\udce8 \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f &amp; \ud83c\udf00 \ud83d\udc6b \u23ee\ufe0f \ud83c\udf16 \ud83d\udec3 \ud83d\udd50.</p> <p>\ud83d\uddbc:</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.responses import FileResponse\n\n\nclass Item(BaseModel):\n    id: str\n    value: str\n\n\nresponses = {\n    404: {\"description\": \"Item not found\"},\n    302: {\"description\": \"The item was moved\"},\n    403: {\"description\": \"Not enough privileges\"},\n}\n\n\napp = ReadyAPI()\n\n\n@app.get(\n    \"/items/{item_id}\",\n    response_model=Item,\n    responses={**responses, 200: {\"content\": {\"image/png\": {}}}},\n)\nasync def read_item(item_id: str, img: Union[bool, None] = None):\n    if img:\n        return FileResponse(\"image.png\", media_type=\"image/png\")\n    else:\n        return {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n</code></pre>"},{"location":"advanced/additional-responses/#i_1","title":"\ud83c\udf16 \u2139 \ud83d\udd03 \ud83d\uddc4 \ud83d\udce8","text":"<p>\ud83d\udc40 \u26ab\ufe0f\u2754 \u26ab\ufe0f\u2754 \ud83d\udc46 \ud83d\udcaa \ud83d\udd0c \ud83d\udce8, \ud83d\udc46 \ud83d\udcaa \u2705 \ud83d\udc49 \ud83d\udcc4 \ud83d\uddc4 \ud83d\udd27:</p> <ul> <li>\ud83d\uddc4 \ud83d\udce8 \ud83c\udf9a, \u26ab\ufe0f \ud83d\udd0c <code>Response Object</code>.</li> <li>\ud83d\uddc4 \ud83d\udce8 \ud83c\udf9a, \ud83d\udc46 \ud83d\udcaa \ud83d\udd0c \ud83d\udd73 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc49 \ud83d\udd17 \ud83d\udd20 \ud83d\udce8 \ud83d\udd18 \ud83d\udc46 <code>responses</code> \ud83d\udd22. \u2705 <code>description</code>, <code>headers</code>, <code>content</code> (\ud83d\udd18 \ud83d\udc49 \ud83d\udc48 \ud83d\udc46 \ud83d\udce3 \ud83c\udf8f \ud83d\udd09 \ud83c\udd8e &amp; \ud83c\udfbb \ud83d\udd17), &amp; <code>links</code>.</li> </ul>"},{"location":"advanced/additional-status-codes/","title":"\ud83c\udf16 \ud83d\udc54 \ud83d\udcdf","text":"<p>\ud83d\udd22, ReadyAPI \ud83d\udd1c \ud83d\udce8 \ud83d\udce8 \u2699\ufe0f <code>JSONResponse</code>, \ud83d\udeae \ud83c\udf9a \ud83d\udc46 \ud83d\udce8 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd18 \ud83d\udc48 <code>JSONResponse</code>.</p> <p>\u26ab\ufe0f \ud83d\udd1c \u2699\ufe0f \ud83d\udd22 \ud83d\udc54 \ud83d\udcdf \u2696\ufe0f 1\ufe0f\u20e3 \ud83d\udc46 \u2692 \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f.</p>"},{"location":"advanced/additional-status-codes/#_2","title":"\ud83c\udf16 \ud83d\udc54 \ud83d\udcdf","text":"<p>\ud83d\udea5 \ud83d\udc46 \ud83d\udc9a \ud83d\udce8 \ud83c\udf16 \ud83d\udc54 \ud83d\udcdf \u2196\ufe0f \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc51 1\ufe0f\u20e3, \ud83d\udc46 \ud83d\udcaa \ud83d\udc48 \ud83d\udeec <code>Response</code> \ud83d\udd17, \ud83d\udc96 <code>JSONResponse</code>, &amp; \u2692 \ud83c\udf16 \ud83d\udc54 \ud83d\udcdf \ud83d\udd17.</p> <p>\ud83d\uddbc, \u27a1\ufe0f \ud83d\udcac \ud83d\udc48 \ud83d\udc46 \ud83d\udc9a \u2714\ufe0f \u27a1 \ud83d\udee0\ufe0f \ud83d\udc48 \u2714 \u2139 \ud83c\udfec, &amp; \ud83d\udce8 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udc54 \ud83d\udcdf 2\ufe0f\u20e30\ufe0f\u20e30\ufe0f\u20e3 \"\ud83d\udc4c\" \ud83d\udd50\u2754 \ud83c\udfc6.</p> <p>\u270b\ufe0f \ud83d\udc46 \ud83d\udc9a \u26ab\ufe0f \ud83d\udeab \ud83c\udd95 \ud83c\udfec. &amp; \ud83d\udd50\u2754 \ud83c\udfec \ud83d\udeab \ud83d\udd00 \u23ed, \u26ab\ufe0f \u270d \ud83d\udc6b, &amp; \ud83d\udce8 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udc54 \ud83d\udcdf 2\ufe0f\u20e30\ufe0f\u20e31\ufe0f\u20e3 \"\u270d\".</p> <p>\ud83c\udfc6 \ud83d\udc48, \ud83d\uddc4 <code>JSONResponse</code>, &amp; \ud83d\udce8 \ud83d\udc46 \ud83c\udf9a \ud83d\udce4 \ud83d\udd17, \u2692 <code>status_code</code> \ud83d\udc48 \ud83d\udc46 \ud83d\udc9a:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom readyapi import Body, ReadyAPI, status\nfrom readyapi.responses import JSONResponse\n\napp = ReadyAPI()\n\nitems = {\"foo\": {\"name\": \"Fighters\", \"size\": 6}, \"bar\": {\"name\": \"Tenders\", \"size\": 3}}\n\n\n@app.put(\"/items/{item_id}\")\nasync def upsert_item(\n    item_id: str,\n    name: Union[str, None] = Body(default=None),\n    size: Union[int, None] = Body(default=None),\n):\n    if item_id in items:\n        item = items[item_id]\n        item[\"name\"] = name\n        item[\"size\"] = size\n        return item\n    else:\n        item = {\"name\": name, \"size\": size}\n        items[item_id] = item\n        return JSONResponse(status_code=status.HTTP_201_CREATED, content=item)\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Body, ReadyAPI, status\nfrom readyapi.responses import JSONResponse\n\napp = ReadyAPI()\n\nitems = {\"foo\": {\"name\": \"Fighters\", \"size\": 6}, \"bar\": {\"name\": \"Tenders\", \"size\": 3}}\n\n\n@app.put(\"/items/{item_id}\")\nasync def upsert_item(\n    item_id: str,\n    name: Annotated[str | None, Body()] = None,\n    size: Annotated[int | None, Body()] = None,\n):\n    if item_id in items:\n        item = items[item_id]\n        item[\"name\"] = name\n        item[\"size\"] = size\n        return item\n    else:\n        item = {\"name\": name, \"size\": size}\n        items[item_id] = item\n        return JSONResponse(status_code=status.HTTP_201_CREATED, content=item)\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Body, ReadyAPI, status\nfrom readyapi.responses import JSONResponse\n\napp = ReadyAPI()\n\nitems = {\"foo\": {\"name\": \"Fighters\", \"size\": 6}, \"bar\": {\"name\": \"Tenders\", \"size\": 3}}\n\n\n@app.put(\"/items/{item_id}\")\nasync def upsert_item(\n    item_id: str,\n    name: Annotated[Union[str, None], Body()] = None,\n    size: Annotated[Union[int, None], Body()] = None,\n):\n    if item_id in items:\n        item = items[item_id]\n        item[\"name\"] = name\n        item[\"size\"] = size\n        return item\n    else:\n        item = {\"name\": name, \"size\": size}\n        items[item_id] = item\n        return JSONResponse(status_code=status.HTTP_201_CREATED, content=item)\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Body, ReadyAPI, status\nfrom readyapi.responses import JSONResponse\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\nitems = {\"foo\": {\"name\": \"Fighters\", \"size\": 6}, \"bar\": {\"name\": \"Tenders\", \"size\": 3}}\n\n\n@app.put(\"/items/{item_id}\")\nasync def upsert_item(\n    item_id: str,\n    name: Annotated[Union[str, None], Body()] = None,\n    size: Annotated[Union[int, None], Body()] = None,\n):\n    if item_id in items:\n        item = items[item_id]\n        item[\"name\"] = name\n        item[\"size\"] = size\n        return item\n    else:\n        item = {\"name\": name, \"size\": size}\n        items[item_id] = item\n        return JSONResponse(status_code=status.HTTP_201_CREATED, content=item)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Body, ReadyAPI, status\nfrom readyapi.responses import JSONResponse\n\napp = ReadyAPI()\n\nitems = {\"foo\": {\"name\": \"Fighters\", \"size\": 6}, \"bar\": {\"name\": \"Tenders\", \"size\": 3}}\n\n\n@app.put(\"/items/{item_id}\")\nasync def upsert_item(\n    item_id: str,\n    name: str | None = Body(default=None),\n    size: int | None = Body(default=None),\n):\n    if item_id in items:\n        item = items[item_id]\n        item[\"name\"] = name\n        item[\"size\"] = size\n        return item\n    else:\n        item = {\"name\": name, \"size\": size}\n        items[item_id] = item\n        return JSONResponse(status_code=status.HTTP_201_CREATED, content=item)\n</code></pre> <p>Warning</p> <p>\ud83d\udd50\u2754 \ud83d\udc46 \ud83d\udce8 <code>Response</code> \ud83d\udd17, \ud83d\udc96 \ud83d\uddbc \ud83d\udd1b, \u26ab\ufe0f \ud83d\udd1c \ud83d\udce8 \ud83d\udd17.</p> <p>\u26ab\ufe0f \ud83c\udfc6 \ud83d\udeab \ud83c\udfbb \u23ee\ufe0f \ud83c\udff7, \u2652\ufe0f.</p> <p>\u2692 \ud83d\udcad \u26ab\ufe0f \u2714\ufe0f \ud83d\udcca \ud83d\udc46 \ud83d\udc9a \u26ab\ufe0f \u2714\ufe0f, &amp; \ud83d\udc48 \ud83d\udcb2 \u2611 \ud83c\udfbb (\ud83d\udea5 \ud83d\udc46 \u2699\ufe0f <code>JSONResponse</code>).</p> <p>\ud83d\udce1 \u2139</p> <p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>from starlette.responses import JSONResponse</code>.</p> <p>ReadyAPI \ud83d\ude9a \ud83c\udf8f <code>starlette.responses</code> <code>readyapi.responses</code> \ud83c\udfea \ud83d\udc46, \ud83d\udc69\u200d\ud83d\udcbb. \u270b\ufe0f \ud83c\udf05 \ud83d\udcaa \ud83d\udce8 \ud83d\udc5f \ud83d\udd17 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc83. \ud83c\udf8f \u23ee\ufe0f <code>status</code>.</p>"},{"location":"advanced/additional-status-codes/#_3","title":"\ud83d\uddc4 &amp; \ud83d\udee0\ufe0f \ud83e\ude7a","text":"<p>\ud83d\udea5 \ud83d\udc46 \ud83d\udce8 \ud83c\udf16 \ud83d\udc54 \ud83d\udcdf &amp; \ud83d\udce8 \ud83d\udd17, \ud83d\udc6b \ud83c\udfc6 \ud83d\udeab \ud83d\udd0c \ud83d\uddc4 \ud83d\udd17 (\ud83d\udee0\ufe0f \ud83e\ude7a), \u21a9\ufe0f ReadyAPI \ud83d\udeab \u2714\ufe0f \ud83c\udf0c \ud83d\udcad \u23ea \u26ab\ufe0f\u2754 \ud83d\udc46 \ud83d\udeb6 \ud83d\udce8.</p> <p>\u270b\ufe0f \ud83d\udc46 \ud83d\udcaa \ud83d\udcc4 \ud83d\udc48 \ud83d\udc46 \ud83d\udcdf, \u2699\ufe0f: \ud83c\udf16 \ud83d\udce8.</p>"},{"location":"advanced/advanced-dependencies/","title":"\ud83c\udfe7 \ud83d\udd17","text":""},{"location":"advanced/advanced-dependencies/#_2","title":"\ud83d\udd17 \ud83d\udd17","text":"<p>\ud83c\udf10 \ud83d\udd17 \ud83d\udc65 \u2714\ufe0f \ud83d\udc40 \ud83d\udd27 \ud83d\udd22 \u2696\ufe0f \ud83c\udf93.</p> <p>\u270b\ufe0f \ud83d\udce4 \ud83d\udcaa \ud83d\udcbc \ud83c\udf10\u2754 \ud83d\udc46 \ud83d\udc9a \ud83d\udcaa \u2692 \ud83d\udd22 \ud83d\udd1b \ud83d\udd17, \ud83c\udf75 \u2714\ufe0f \ud83d\udce3 \ud83d\udcda \ud83c\udf8f \ud83d\udd22 \u2696\ufe0f \ud83c\udf93.</p> <p>\u27a1\ufe0f \ud83c\udf08 \ud83d\udc48 \ud83d\udc65 \ud83d\udc9a \u2714\ufe0f \ud83d\udd17 \ud83d\udc48 \u2705 \ud83d\udea5 \ud83d\udd22 \ud83d\udd22 <code>q</code> \ud83d\udd0c \ud83d\udd27 \ud83c\udf9a.</p> <p>\u270b\ufe0f \ud83d\udc65 \ud83d\udc9a \ud83d\udcaa \ud83d\udd17 \ud83d\udc48 \ud83d\udd27 \ud83c\udf9a.</p>"},{"location":"advanced/advanced-dependencies/#_3","title":"\"\ud83c\udde7\ud83c\uddf2\" \ud83d\udc50","text":"<p>\ud83d\udc0d \ud83d\udce4 \ud83c\udf0c \u2692 \ud83d\udc50 \ud83c\udf93 \"\ud83c\udde7\ud83c\uddf2\".</p> <p>\ud83d\udeab \ud83c\udf93 \u26ab\ufe0f (\u2754 \u23ea \ud83c\udde7\ud83c\uddf2), \u270b\ufe0f \ud83d\udc50 \ud83d\udc48 \ud83c\udf93.</p> <p>\ud83d\udc48, \ud83d\udc65 \ud83d\udce3 \ud83d\udc69\u200d\ud83d\udd2c <code>__call__</code>:</p> Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: bool = Depends(checker)):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> <pre><code>from readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> <p>\ud83d\udc49 \ud83d\udcbc, \ud83d\udc49 <code>__call__</code> \u26ab\ufe0f\u2754 ReadyAPI \ud83d\udd1c \u2699\ufe0f \u2705 \ud83c\udf16 \ud83d\udd22 &amp; \ud83c\udfa7-\ud83d\udd17, &amp; \ud83d\udc49 \u26ab\ufe0f\u2754 \ud83d\udd1c \ud83e\udd19 \ud83d\udeb6\u200d\u2640\ufe0f \ud83d\udcb2 \ud83d\udd22 \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22 \u23ea.</p>"},{"location":"advanced/advanced-dependencies/#_4","title":"\ud83d\udd17 \ud83d\udc50","text":"<p>&amp; \ud83d\udd1c, \ud83d\udc65 \ud83d\udcaa \u2699\ufe0f <code>__init__</code> \ud83d\udce3 \ud83d\udd22 \ud83d\udc50 \ud83d\udc48 \ud83d\udc65 \ud83d\udcaa \u2699\ufe0f \"\ud83d\udd17\" \ud83d\udd17:</p> Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: bool = Depends(checker)):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> <pre><code>from readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> <p>\ud83d\udc49 \ud83d\udcbc, ReadyAPI \ud83c\udfc6 \ud83d\udeab \u23f1 \ud83d\udc46 \u2696\ufe0f \ud83d\udc85 \ud83d\udd03 <code>__init__</code>, \ud83d\udc65 \ud83d\udd1c \u2699\ufe0f \u26ab\ufe0f \ud83d\udd17 \ud83d\udc46 \ud83d\udcdf.</p>"},{"location":"advanced/advanced-dependencies/#_5","title":"\u270d \ud83d\udc50","text":"<p>\ud83d\udc65 \ud83d\udcaa \u270d \ud83d\udc50 \ud83d\udc49 \ud83c\udf93 \u23ee\ufe0f:</p> Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: bool = Depends(checker)):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> <pre><code>from readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> <p>&amp; \ud83d\udc48 \ud83c\udf0c \ud83d\udc65 \ud83d\udcaa \"\ud83d\udd17\" \ud83d\udc46 \ud83d\udd17, \ud83d\udc48 \ud83d\udd1c \u2714\ufe0f <code>\"bar\"</code> \ud83d\udd18 \u26ab\ufe0f, \ud83d\udd22 <code>checker.fixed_content</code>.</p>"},{"location":"advanced/advanced-dependencies/#_6","title":"\u2699\ufe0f \ud83d\udc50 \ud83d\udd17","text":"<p>\u2934\ufe0f, \ud83d\udc65 \ud83d\udcaa \u2699\ufe0f \ud83d\udc49 <code>checker</code> <code>Depends(checker)</code>, \u21a9\ufe0f <code>Depends(FixedContentQueryChecker)</code>, \u21a9\ufe0f \ud83d\udd17 \ud83d\udc50, <code>checker</code>, \ud83d\udeab \ud83c\udf93 \u26ab\ufe0f.</p> <p>&amp; \ud83d\udd50\u2754 \u274e \ud83d\udd17, ReadyAPI \ud83d\udd1c \ud83e\udd19 \ud83d\udc49 <code>checker</code> \ud83d\udc96:</p> <pre><code>checker(q=\"somequery\")\n</code></pre> <p>...&amp; \ud83d\udeb6\u200d\u2640\ufe0f \u26ab\ufe0f\u2754 \ud83d\udc48 \ud83d\udce8 \ud83d\udcb2 \ud83d\udd17 \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22 \ud83d\udd22 <code>fixed_content_included</code>:</p> Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: bool = Depends(checker)):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> <pre><code>from readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content\n\n    def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False\n\n\nchecker = FixedContentQueryChecker(\"bar\")\n\n\n@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):\n    return {\"fixed_content_in_query\": fixed_content_included}\n</code></pre> <p>Tip</p> <p>\ud83c\udf10 \ud83d\udc49 \ud83d\udcaa \ud83d\ude11 \ud83c\udfad. &amp; \u26ab\ufe0f \ud83d\udcaa \ud83d\udeab \ud83d\udcf6 \ud83c\udd91 \u2754 \u26ab\ufe0f \u26a0.</p> <p>\ud83d\udc6b \ud83d\uddbc \ud83d\ude2b \ud83d\ude45, \u270b\ufe0f \ud83c\udfa6 \u2754 \u26ab\ufe0f \ud83c\udf10 \ud83d\udc77.</p> <p>\ud83d\udcc3 \ud83d\udd03 \ud83d\udc82\u200d\u2642, \ud83d\udce4 \ud83d\ude99 \ud83d\udd22 \ud83d\udc48 \ud83d\udee0\ufe0f \ud83d\udc49 \ud83c\udf8f \ud83c\udf0c.</p> <p>\ud83d\udea5 \ud83d\udc46 \ud83e\udd14 \ud83c\udf10 \ud83d\udc49, \ud83d\udc46 \u23ea \ud83d\udcad \u2754 \ud83d\udc48 \ud83d\ude99 \ud83e\uddf0 \ud83d\udc82\u200d\u2642 \ud83d\udc77 \ud83d\udd18.</p>"},{"location":"advanced/async-tests/","title":"\ud83d\udd01 \ud83d\udcaf","text":"<p>\ud83d\udc46 \u2714\ufe0f \u23ea \ud83d\udc40 \u2754 \ud83d\udcaf \ud83d\udc46 ReadyAPI \ud83c\ude38 \u2699\ufe0f \ud83d\ude9a <code>TestClient</code>. \ud83c\udd99 \ud83d\udd1c, \ud83d\udc46 \u2714\ufe0f \ud83d\udd74 \ud83d\udc40 \u2754 \u270d \ud83d\udd01 \ud83d\udcaf, \ud83c\udf75 \u2699\ufe0f <code>async</code> \ud83d\udd22.</p> <p>\u2796 \ud83d\udcaa \u2699\ufe0f \ud83d\udd01 \ud83d\udd22 \ud83d\udc46 \ud83d\udcaf \ud83d\udcaa \u26a0, \ud83d\uddbc, \ud83d\udd50\u2754 \ud83d\udc46 \ud83d\udd2c \ud83d\udc46 \ud83d\udcbd \ud83d\udd01. \ud83c\udf08 \ud83d\udc46 \ud83d\udc9a \ud83d\udcaf \ud83d\udce8 \ud83d\udce8 \ud83d\udc46 ReadyAPI \ud83c\ude38 &amp; \u2934\ufe0f \u2714 \ud83d\udc48 \ud83d\udc46 \ud83d\udc69\u200d\ud83d\udcbb \u23ea \u270d \u2611 \ud83d\udcbd \ud83d\udcbd, \u23ea \u2699\ufe0f \ud83d\udd01 \ud83d\udcbd \ud83d\uddc3.</p> <p>\u27a1\ufe0f \ud83d\udc40 \u2754 \ud83d\udc65 \ud83d\udcaa \u2692 \ud83d\udc48 \ud83d\udc77.</p>"},{"location":"advanced/async-tests/#pytestmarkanyio","title":"pytest.mark.anyio","text":"<p>\ud83d\udea5 \ud83d\udc65 \ud83d\udc9a \ud83e\udd19 \ud83d\udd01 \ud83d\udd22 \ud83d\udc46 \ud83d\udcaf, \ud83d\udc46 \ud83d\udcaf \ud83d\udd22 \u2714\ufe0f \ud83d\udd01. AnyIO \ud83d\ude9a \ud83d\udc4c \ud83d\udcc1 \ud83d\udc49, \ud83d\udc48 \u2714 \ud83d\udc65 \u2714 \ud83d\udc48 \ud83d\udcaf \ud83d\udd22 \ud83e\udd19 \ud83d\udd01.</p>"},{"location":"advanced/async-tests/#_2","title":"\ud83c\uddf8\ud83c\uddf2","text":"<p>\ud83d\udea5 \ud83d\udc46 ReadyAPI \ud83c\ude38 \u2699\ufe0f \ud83d\ude10 <code>def</code> \ud83d\udd22 \u21a9\ufe0f <code>async def</code>, \u26ab\ufe0f <code>async</code> \ud83c\ude38 \ud83d\udd18.</p> <p><code>TestClient</code> \ud83d\udd28 \ud83c\udfb1 \ud83d\udd18 \ud83e\udd19 \ud83d\udd01 ReadyAPI \ud83c\ude38 \ud83d\udc46 \ud83d\ude10 <code>def</code> \ud83d\udcaf \ud83d\udd22, \u2699\ufe0f \ud83d\udc29 \u2733. \u270b\ufe0f \ud83d\udc48 \ud83c\udfb1 \ud83d\udeab \ud83d\udc77 \ud83d\udeab\ud83d\udd1c \ud83d\udd50\u2754 \ud83d\udc65 \u2699\ufe0f \u26ab\ufe0f \ud83d\udd18 \ud83d\udd01 \ud83d\udd22. \ud83c\udfc3 \ud83d\udc46 \ud83d\udcaf \ud83d\udd01, \ud83d\udc65 \ud83d\udcaa \ud83d\ude45\u200d\u2642 \ud83d\udccf \u2699\ufe0f <code>TestClient</code> \ud83d\udd18 \ud83d\udc46 \ud83d\udcaf \ud83d\udd22.</p> <p><code>TestClient</code> \u2693\ufe0f \ud83d\udd1b \ud83c\uddf8\ud83c\uddf2, &amp; \u21a9\ufe0f, \ud83d\udc65 \ud83d\udcaa \u2699\ufe0f \u26ab\ufe0f \ud83d\udd17 \ud83d\udcaf \ud83d\udee0\ufe0f.</p>"},{"location":"advanced/async-tests/#_3","title":"\ud83d\uddbc","text":"<p>\ud83d\ude45 \ud83d\uddbc, \u27a1\ufe0f \ud83e\udd14 \ud83d\udcc1 \ud83d\udcca \ud83c\udf8f 1\ufe0f\u20e3 \ud83d\udd2c \ud83e\udd8f \ud83c\ude38 &amp; \ud83d\udd2c:</p> <pre><code>.\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 test_main.py\n</code></pre> <p>\ud83d\udcc1 <code>main.py</code> \ud83d\udd1c \u2714\ufe0f:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Tomato\"}\n</code></pre> <p>\ud83d\udcc1 <code>test_main.py</code> \ud83d\udd1c \u2714\ufe0f \ud83d\udcaf <code>main.py</code>, \u26ab\ufe0f \ud83d\udcaa \ud83d\udc40 \ud83d\udc96 \ud83d\udc49 \ud83d\udd1c:</p> Python 3.8+ <pre><code>import pytest\nfrom httpx import ASGITransport, AsyncClient\n\nfrom .main import app\n\n\n@pytest.mark.anyio\nasync def test_root():\n    async with AsyncClient(\n        transport=ASGITransport(app=app), base_url=\"http://test\"\n    ) as ac:\n        response = await ac.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"Tomato\"}\n</code></pre>"},{"location":"advanced/async-tests/#_4","title":"\ud83c\udfc3 \u26ab\ufe0f","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83c\udfc3 \ud83d\udc46 \ud83d\udcaf \ud83d\udc0c \ud83d\udce8:</p> <pre><code>$ pytest\n\n---&gt; 100%\n</code></pre>"},{"location":"advanced/async-tests/#i","title":"\u2139","text":"<p>\ud83d\udcd1 <code>@pytest.mark.anyio</code> \ud83d\udcac \u2733 \ud83d\udc48 \ud83d\udc49 \ud83d\udcaf \ud83d\udd22 \ud83d\udd1c \ud83e\udd19 \ud83d\udd01:</p> Python 3.8+ <pre><code>import pytest\nfrom httpx import ASGITransport, AsyncClient\n\nfrom .main import app\n\n\n@pytest.mark.anyio\nasync def test_root():\n    async with AsyncClient(\n        transport=ASGITransport(app=app), base_url=\"http://test\"\n    ) as ac:\n        response = await ac.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"Tomato\"}\n</code></pre> <p>Tip</p> <p>\ud83d\uddd2 \ud83d\udc48 \ud83d\udcaf \ud83d\udd22 \ud83d\udd1c <code>async def</code> \u21a9\ufe0f <code>def</code> \u23ed \ud83d\udd50\u2754 \u2699\ufe0f <code>TestClient</code>.</p> <p>\u2934\ufe0f \ud83d\udc65 \ud83d\udcaa \u270d <code>AsyncClient</code> \u23ee\ufe0f \ud83d\udcf1, &amp; \ud83d\udce8 \ud83d\udd01 \ud83d\udce8 \u26ab\ufe0f, \u2699\ufe0f <code>await</code>.</p> Python 3.8+ <pre><code>import pytest\nfrom httpx import ASGITransport, AsyncClient\n\nfrom .main import app\n\n\n@pytest.mark.anyio\nasync def test_root():\n    async with AsyncClient(\n        transport=ASGITransport(app=app), base_url=\"http://test\"\n    ) as ac:\n        response = await ac.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"Tomato\"}\n</code></pre> <p>\ud83d\udc49 \ud83c\udf13:</p> <pre><code>response = client.get('/')\n</code></pre> <p>...\ud83d\udc48 \ud83d\udc65 \u2699\ufe0f \u2692 \ud83d\udc46 \ud83d\udce8 \u23ee\ufe0f <code>TestClient</code>.</p> <p>Tip</p> <p>\ud83d\uddd2 \ud83d\udc48 \ud83d\udc65 \u2699\ufe0f \ud83d\udd01/\u231b \u23ee\ufe0f \ud83c\udd95 <code>AsyncClient</code> - \ud83d\udce8 \ud83d\udd01.</p>"},{"location":"advanced/async-tests/#_5","title":"\ud83c\udf8f \ud83d\udd01 \ud83d\udd22 \ud83e\udd19","text":"<p>\ud83d\udd2c \ud83d\udd22 \ud83d\udd1c \ud83d\udd01, \ud83d\udc46 \ud83d\udcaa \ud83d\udd1c \ud83e\udd19 (&amp; <code>await</code>) \ud83c\udf8f <code>async</code> \ud83d\udd22 \u2196\ufe0f \u26aa\ufe0f\u27a1\ufe0f \ud83d\udce8 \ud83d\udce8 \ud83d\udc46 ReadyAPI \ud83c\ude38 \ud83d\udc46 \ud83d\udcaf, \u26ab\ufe0f\u2754 \ud83d\udc46 \ud83d\udd1c \ud83e\udd19 \ud83d\udc6b \ud83d\ude46 \ud83d\ude46 \ud83d\udc46 \ud83d\udcdf.</p> <p>Tip</p> <p>\ud83d\udea5 \ud83d\udc46 \u2694 <code>RuntimeError: Task attached to a different loop</code> \ud83d\udd50\u2754 \ud83d\udee0\ufe0f \ud83d\udd01 \ud83d\udd22 \ud83e\udd19 \ud83d\udc46 \ud83d\udcaf (\u2705 \ud83d\udd50\u2754 \u2699\ufe0f \u2733 MotorClient) \ud83d\udcad \ud83d\udd17 \ud83c\udf9a \ud83d\udc48 \ud83d\udcaa \ud83c\udf89 \u27b0 \ud83d\udd74 \ud83c\udfde \ud83d\udd01 \ud83d\udd22, \u2705 <code>'@app.on_event(\"startup\")</code> \u23f2.</p>"},{"location":"advanced/behind-a-proxy/","title":"\u26c5 \ud83d\uddf3","text":"<p>\u26a0, \ud83d\udc46 5\ufe0f\u20e3\ud83d\udcc6 \ud83d\udcaa \u2699\ufe0f \ud83d\uddf3 \ud83d\udcbd \ud83d\udc96 Traefik \u2696\ufe0f \ud83d\udc4c \u23ee\ufe0f \ud83d\udcf3 \ud83d\udc48 \ud83d\udeae \u2795 \u27a1 \ud83d\udd21 \ud83d\udc48 \ud83d\udeab \ud83d\udc40 \ud83d\udc46 \ud83c\ude38.</p> <p>\ud83d\udc6b \ud83d\udcbc \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>root_path</code> \ud83d\udd17 \ud83d\udc46 \ud83c\ude38.</p> <p><code>root_path</code> \ud83d\udee0\ufe0f \ud83d\ude9a \ud83d\udd2b \ud83d\udd27 (\ud83d\udc48 ReadyAPI \ud83c\udfd7 \ud83d\udd1b, \ud83d\udd18 \ud83d\udc83).</p> <p><code>root_path</code> \u2699\ufe0f \ud83c\udf75 \ud83d\udc6b \ud83c\udfaf \ud83d\udcbc.</p> <p>&amp; \u26ab\ufe0f \u2699\ufe0f \ud83d\udd18 \ud83d\udd50\u2754 \ud83d\udddc \ud83c\udfa7-\ud83c\ude38.</p>"},{"location":"advanced/behind-a-proxy/#_2","title":"\ud83d\uddf3 \u23ee\ufe0f \ud83c\udf9e \u27a1 \ud83d\udd21","text":"<p>\u2714\ufe0f \ud83d\uddf3 \u23ee\ufe0f \ud83c\udf9e \u27a1 \ud83d\udd21, \ud83d\udc49 \ud83d\udcbc, \u26d3 \ud83d\udc48 \ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \u27a1 <code>/app</code> \ud83d\udc46 \ud83d\udcdf, \u270b\ufe0f \u2934\ufe0f, \ud83d\udc46 \ud83d\udeae \ud83e\uddfd \ud83d\udd1b \ud83d\udd1d (\ud83d\uddf3) \ud83d\udc48 \ud83d\udd1c \ud83d\udeae \ud83d\udc46 ReadyAPI \ud83c\ude38 \ud83d\udd3d \u27a1 \ud83d\udc96 <code>/api/v1</code>.</p> <p>\ud83d\udc49 \ud83d\udcbc, \u23ee\ufe0f \u27a1 <code>/app</code> \ud83d\udd1c \ud83e\udd19 \ud83c\udf66 <code>/api/v1/app</code>.</p> <p>\u270b\ufe0f \ud83c\udf10 \ud83d\udc46 \ud83d\udcdf \u270d \ud83e\udd14 \ud83d\udce4 <code>/app</code>.</p> <p>&amp; \ud83d\uddf3 \ud83d\udd1c \"\u274e\" \u27a1 \ud83d\udd21 \ud83d\udd1b \u2708 \u23ed \ud83d\udcf6 \ud83d\udce8 Uvicorn, \ud83d\udea7 \ud83d\udc46 \ud83c\ude38 \ud83e\udd14 \ud83d\udc48 \u26ab\ufe0f \ud83c\udf66 <code>/app</code>, \ud83d\udc48 \ud83d\udc46 \ud83d\udeab \u2714\ufe0f \u2139 \ud83c\udf10 \ud83d\udc46 \ud83d\udcdf \ud83d\udd0c \ud83d\udd21 <code>/api/v1</code>.</p> <p>\ud83c\udd99 \ud83d\udce5, \ud83c\udf10 \ud83d\udd1c \ud83d\udc77 \ud83d\udece.</p> <p>\u270b\ufe0f \u2934\ufe0f, \ud83d\udd50\u2754 \ud83d\udc46 \ud83d\udcc2 \ud83d\udee0\ufe0f \ud83e\ude7a \ud83c\udf9a (\ud83d\udd78), \u26ab\ufe0f \ud83d\udd1c \u231b \ud83e\udd1a \ud83d\uddc4 \ud83d\udd17 <code>/openapi.json</code>, \u21a9\ufe0f <code>/api/v1/openapi.json</code>.</p> <p>, \ud83d\udd78 (\ud83d\udc48 \ud83c\udfc3 \ud83d\udda5) \ud83d\udd1c \ud83d\udd04 \ud83c\udfc6 <code>/openapi.json</code> &amp; \ud83d\udeab\ud83d\udd1c \ud83d\udcaa \ud83e\udd1a \ud83d\uddc4 \ud83d\udd17.</p> <p>\u21a9\ufe0f \ud83d\udc65 \u2714\ufe0f \ud83d\uddf3 \u23ee\ufe0f \u27a1 \ud83d\udd21 <code>/api/v1</code> \ud83d\udc46 \ud83d\udcf1, \ud83d\udd78 \ud83d\udcaa \u2615 \ud83d\uddc4 \ud83d\udd17 <code>/api/v1/openapi.json</code>.</p> <pre><code>graph LR\n\nbrowser(\"Browser\")\nproxy[\"Proxy on http://0.0.0.0:9999/api/v1/app\"]\nserver[\"Server on http://127.0.0.1:8000/app\"]\n\nbrowser --&gt; proxy\nproxy --&gt; server</code></pre> <p>Tip</p> <p>\ud83d\udce2 <code>0.0.0.0</code> \ud83d\udece \u2699\ufe0f \u26d3 \ud83d\udc48 \ud83d\udccb \ud83d\udc42 \ud83d\udd1b \ud83c\udf10 \ud83d\udce2 \ud83d\udcaa \ud83d\udc48 \ud83c\udfb0/\ud83d\udcbd.</p> <p>\ud83e\ude7a \ud83c\udf9a \ud83d\udd1c \ud83d\udcaa \ud83d\uddc4 \ud83d\udd17 \ud83d\udce3 \ud83d\udc48 \ud83d\udc49 \ud83d\udee0\ufe0f <code>server</code> \ud83d\udd0e <code>/api/v1</code> (\u26c5 \ud83d\uddf3). \ud83d\uddbc:</p> <pre><code>{\n    \"openapi\": \"3.0.2\",\n    // More stuff here\n    \"servers\": [\n        {\n            \"url\": \"/api/v1\"\n        }\n    ],\n    \"paths\": {\n            // More stuff here\n    }\n}\n</code></pre> <p>\ud83d\udc49 \ud83d\uddbc, \"\ud83d\uddf3\" \ud83d\udcaa \ud83d\udd73 \ud83d\udc96 Traefik. &amp; \ud83d\udcbd \ud83d\udd1c \ud83d\udd73 \ud83d\udc96 Uvicorn, \ud83c\udfc3\u200d\u2642 \ud83d\udc46 ReadyAPI \ud83c\ude38.</p>"},{"location":"advanced/behind-a-proxy/#root_path","title":"\ud83d\ude9a <code>root_path</code>","text":"<p>\ud83c\udfc6 \ud83d\udc49, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83d\udccb \u23f8 \ud83c\udf9b <code>--root-path</code> \ud83d\udc96:</p> <pre><code>$ uvicorn main:app --root-path /api/v1\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>\ud83d\udea5 \ud83d\udc46 \u2699\ufe0f Hypercorn, \u26ab\ufe0f \u2714\ufe0f \ud83c\udf9b <code>--root-path</code>.</p> <p>\ud83d\udce1 \u2139</p> <p>\ud83d\udd2b \ud83d\udd27 \ud83d\udd2c <code>root_path</code> \ud83d\udc49 \u2699\ufe0f \ud83d\udcbc.</p> <p>&amp; <code>--root-path</code> \ud83d\udccb \u23f8 \ud83c\udf9b \ud83d\ude9a \ud83d\udc48 <code>root_path</code>.</p>"},{"location":"advanced/behind-a-proxy/#root_path_1","title":"\u2705 \u23ee\ufe0f <code>root_path</code>","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83e\udd1a \u23ee\ufe0f <code>root_path</code> \u2699\ufe0f \ud83d\udc46 \ud83c\ude38 \ud83d\udd20 \ud83d\udce8, \u26ab\ufe0f \ud83c\udf55 <code>scope</code> \ud83d\udcd6 (\ud83d\udc48 \ud83c\udf55 \ud83d\udd2b \ud83d\udd0c).</p> <p>\ud83d\udce5 \ud83d\udc65 \u2705 \u26ab\ufe0f \ud83d\udce7 \ud83c\udfa6 \ud83c\udfaf.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Request\n\napp = ReadyAPI()\n\n\n@app.get(\"/app\")\ndef read_main(request: Request):\n    return {\"message\": \"Hello World\", \"root_path\": request.scope.get(\"root_path\")}\n</code></pre> <p>\u2934\ufe0f, \ud83d\udea5 \ud83d\udc46 \u25b6\ufe0f Uvicorn \u23ee\ufe0f:</p> <pre><code>$ uvicorn main:app --root-path /api/v1\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>\ud83d\udce8 \ud83d\udd1c \ud83d\udd73 \ud83d\udc96:</p> <pre><code>{\n    \"message\": \"Hello World\",\n    \"root_path\": \"/api/v1\"\n}\n</code></pre>"},{"location":"advanced/behind-a-proxy/#root_path-readyapi","title":"\u2692 <code>root_path</code> ReadyAPI \ud83d\udcf1","text":"<p>\ud83d\udc50, \ud83d\udea5 \ud83d\udc46 \ud83d\udeab \u2714\ufe0f \ud83c\udf0c \ud83d\ude9a \ud83d\udccb \u23f8 \ud83c\udf9b \ud83d\udc96 <code>--root-path</code> \u2696\ufe0f \ud83c\udf13, \ud83d\udc46 \ud83d\udcaa \u2692 <code>root_path</code> \ud83d\udd22 \ud83d\udd50\u2754 \ud83c\udfd7 \ud83d\udc46 ReadyAPI \ud83d\udcf1:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Request\n\napp = ReadyAPI(root_path=\"/api/v1\")\n\n\n@app.get(\"/app\")\ndef read_main(request: Request):\n    return {\"message\": \"Hello World\", \"root_path\": request.scope.get(\"root_path\")}\n</code></pre> <p>\ud83d\udeb6\u200d\u2640\ufe0f <code>root_path</code> <code>ReadyAPI</code> \ud83d\udd1c \ud83c\udf13 \ud83d\udeb6\u200d\u2640\ufe0f <code>--root-path</code> \ud83d\udccb \u23f8 \ud83c\udf9b Uvicorn \u2696\ufe0f Hypercorn.</p>"},{"location":"advanced/behind-a-proxy/#root_path_2","title":"\ud83d\udd03 <code>root_path</code>","text":"<p>\u2714\ufe0f \ud83e\udd2f \ud83d\udc48 \ud83d\udcbd (Uvicorn) \ud83c\udfc6 \ud83d\udeab \u2699\ufe0f \ud83d\udc48 <code>root_path</code> \ud83d\udd73 \ud83d\ude46 \ud83c\udf18 \ud83d\udeb6\u200d\u2640\ufe0f \u26ab\ufe0f \ud83d\udcf1.</p> <p>\u270b\ufe0f \ud83d\udea5 \ud83d\udc46 \ud83d\udeb6 \u23ee\ufe0f \ud83d\udc46 \ud83d\udda5 http://127.0.0.1:8000/app \ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \ud83d\ude10 \ud83d\udce8:</p> <pre><code>{\n    \"message\": \"Hello World\",\n    \"root_path\": \"/api/v1\"\n}\n</code></pre> <p>, \u26ab\ufe0f \ud83c\udfc6 \ud83d\udeab \u231b \ud83d\udd10 <code>http://127.0.0.1:8000/api/v1/app</code>.</p> <p>Uvicorn \ud83d\udd1c \u231b \ud83d\uddf3 \ud83d\udd10 Uvicorn <code>http://127.0.0.1:8000/app</code>, &amp; \u2934\ufe0f \u26ab\ufe0f \ud83d\udd1c \ud83d\uddf3 \ud83c\udfaf \ud83d\udeae \u2795 <code>/api/v1</code> \ud83d\udd21 \ud83d\udd1b \ud83d\udd1d.</p>"},{"location":"advanced/behind-a-proxy/#_3","title":"\ud83d\udd03 \ud83d\uddf3 \u23ee\ufe0f \ud83c\udf9e \u27a1 \ud83d\udd21","text":"<p>\u2714\ufe0f \ud83e\udd2f \ud83d\udc48 \ud83d\uddf3 \u23ee\ufe0f \ud83c\udf9e \u27a1 \ud83d\udd21 \ud83d\udd74 1\ufe0f\u20e3 \ud83c\udf0c \ud83d\udd17 \u26ab\ufe0f.</p> <p>\ud83c\udfb2 \ud83d\udcda \ud83d\udcbc \ud83d\udd22 \ud83d\udd1c \ud83d\udc48 \ud83d\uddf3 \ud83d\udeab \u2714\ufe0f \ud83c\udfda \u27a1 \ud83d\udd21.</p> <p>\ud83d\udcbc \ud83d\udc96 \ud83d\udc48 (\ud83c\udf75 \ud83c\udf9e \u27a1 \ud83d\udd21), \ud83d\uddf3 \ud83d\udd1c \ud83d\udc42 \ud83d\udd1b \ud83d\udd73 \ud83d\udc96 <code>https://myawesomeapp.com</code>, &amp; \u2934\ufe0f \ud83d\udea5 \ud83d\udda5 \ud83d\udeb6 <code>https://myawesomeapp.com/api/v1/app</code> &amp; \ud83d\udc46 \ud83d\udcbd (\u2705 Uvicorn) \ud83d\udc42 \ud83d\udd1b <code>http://127.0.0.1:8000</code> \ud83d\uddf3 (\ud83c\udf75 \ud83c\udf9e \u27a1 \ud83d\udd21) \ud83d\udd1c \ud83d\udd10 Uvicorn \ud83c\udf8f \u27a1: <code>http://127.0.0.1:8000/api/v1/app</code>.</p>"},{"location":"advanced/behind-a-proxy/#traefik","title":"\ud83d\udd2c \ud83c\udf10 \u23ee\ufe0f Traefik","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udcaa \ud83c\udfc3 \ud83e\udd7c \ud83c\udf10 \u23ee\ufe0f \ud83c\udf9e \u27a1 \ud83d\udd21 \u2699\ufe0f Traefik.</p> <p>\u23ec Traefik, \u26ab\ufe0f \ud83d\udc41 \ud83d\udcb1, \ud83d\udc46 \ud83d\udcaa \u2697 \ud83d\udddc \ud83d\udcc1 &amp; \ud83c\udfc3 \u26ab\ufe0f \ud83d\udd17 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udcf6.</p> <p>\u2934\ufe0f \u270d \ud83d\udcc1 <code>traefik.toml</code> \u23ee\ufe0f:</p> <pre><code>[entryPoints]\n  [entryPoints.http]\n    address = \":9999\"\n\n[providers]\n  [providers.file]\n    filename = \"routes.toml\"\n</code></pre> <p>\ud83d\udc49 \ud83d\udcac Traefik \ud83d\udc42 \ud83d\udd1b \u26f4 9\ufe0f\u20e39\ufe0f\u20e39\ufe0f\u20e39\ufe0f\u20e3 &amp; \u2699\ufe0f \u27951\ufe0f\u20e3 \ud83d\udcc1 <code>routes.toml</code>.</p> <p>Tip</p> <p>\ud83d\udc65 \u2699\ufe0f \u26f4 9\ufe0f\u20e39\ufe0f\u20e39\ufe0f\u20e39\ufe0f\u20e3 \u21a9\ufe0f \ud83d\udc29 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \u26f4 8\ufe0f\u20e30\ufe0f\u20e3 \ud83d\udc48 \ud83d\udc46 \ud83d\udeab \u2714\ufe0f \ud83c\udfc3 \u26ab\ufe0f \u23ee\ufe0f \ud83d\udce1 (<code>sudo</code>) \ud83d\ude0c.</p> <p>\ud83d\udd1c \u270d \ud83d\udc48 \ud83c\udf8f \ud83d\udcc1 <code>routes.toml</code>:</p> <pre><code>[http]\n  [http.middlewares]\n\n    [http.middlewares.api-stripprefix.stripPrefix]\n      prefixes = [\"/api/v1\"]\n\n  [http.routers]\n\n    [http.routers.app-http]\n      entryPoints = [\"http\"]\n      service = \"app\"\n      rule = \"PathPrefix(`/api/v1`)\"\n      middlewares = [\"api-stripprefix\"]\n\n  [http.services]\n\n    [http.services.app]\n      [http.services.app.loadBalancer]\n        [[http.services.app.loadBalancer.servers]]\n          url = \"http://127.0.0.1:8000\"\n</code></pre> <p>\ud83d\udc49 \ud83d\udcc1 \ud83d\udd17 Traefik \u2699\ufe0f \u27a1 \ud83d\udd21 <code>/api/v1</code>.</p> <p>&amp; \u2934\ufe0f \u26ab\ufe0f \ud83d\udd1c \u274e \ud83d\udeae \ud83d\udce8 \ud83d\udc46 Uvicorn \ud83c\udfc3\u200d\u2642 \ud83d\udd1b <code>http://127.0.0.1:8000</code>.</p> <p>\ud83d\udd1c \u25b6\ufe0f Traefik:</p> <pre><code>$ ./traefik --configFile=traefik.toml\n\nINFO[0000] Configuration loaded from file: /home/user/awesomeapi/traefik.toml\n</code></pre> <p>&amp; \ud83d\udd1c \u25b6\ufe0f \ud83d\udc46 \ud83d\udcf1 \u23ee\ufe0f Uvicorn, \u2699\ufe0f <code>--root-path</code> \ud83c\udf9b:</p> <pre><code>$ uvicorn main:app --root-path /api/v1\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre>"},{"location":"advanced/behind-a-proxy/#_4","title":"\u2705 \ud83d\udce8","text":"<p>\ud83d\udd1c, \ud83d\udea5 \ud83d\udc46 \ud83d\udeb6 \ud83d\udcdb \u23ee\ufe0f \u26f4 Uvicorn: http://127.0.0.1:8000/app, \ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \ud83d\ude10 \ud83d\udce8:</p> <pre><code>{\n    \"message\": \"Hello World\",\n    \"root_path\": \"/api/v1\"\n}\n</code></pre> <p>Tip</p> <p>\ud83d\udc40 \ud83d\udc48 \u270b\ufe0f \ud83d\udc46 \ud83d\udd10 \u26ab\ufe0f <code>http://127.0.0.1:8000/app</code> \u26ab\ufe0f \ud83c\udfa6 <code>root_path</code> <code>/api/v1</code>, \u270a \u26aa\ufe0f\u27a1\ufe0f \ud83c\udf9b <code>--root-path</code>.</p> <p>&amp; \ud83d\udd1c \ud83d\udcc2 \ud83d\udcdb \u23ee\ufe0f \u26f4 Traefik, \u2705 \u27a1 \ud83d\udd21: http://127.0.0.1:9999/api/v1/app.</p> <p>\ud83d\udc65 \ud83e\udd1a \ud83c\udf8f \ud83d\udce8:</p> <pre><code>{\n    \"message\": \"Hello World\",\n    \"root_path\": \"/api/v1\"\n}\n</code></pre> <p>\u270b\ufe0f \ud83d\udc49 \ud83d\udd70 \ud83d\udcdb \u23ee\ufe0f \ud83d\udd21 \u27a1 \ud83d\ude9a \ud83d\uddf3: <code>/api/v1</code>.</p> <p>\u2197\ufe0f, \ud83d\udcad \ud83d\udce5 \ud83d\udc48 \ud83d\udc71 \ud83d\udd1c \ud83d\udd10 \ud83d\udcf1 \ud83d\udd18 \ud83d\uddf3, \u23ec \u23ee\ufe0f \u27a1 \ud83d\udd21 <code>/app/v1</code> \"\u2611\" 1\ufe0f\u20e3.</p> <p>&amp; \u23ec \ud83c\udf75 \u27a1 \ud83d\udd21 (<code>http://127.0.0.1:8000/app</code>), \ud83d\ude9a Uvicorn \ud83d\udd17, \ud83d\udd1c \ud83c\udfaf \ud83d\uddf3 (Traefik) \ud83d\udd10 \u26ab\ufe0f.</p> <p>\ud83d\udc48 \ud83c\udfa6 \u2754 \ud83d\uddf3 (Traefik) \u2699\ufe0f \u27a1 \ud83d\udd21 &amp; \u2754 \ud83d\udcbd (Uvicorn) \u2699\ufe0f <code>root_path</code> \u26aa\ufe0f\u27a1\ufe0f \ud83c\udf9b <code>--root-path</code>.</p>"},{"location":"advanced/behind-a-proxy/#_5","title":"\u2705 \ud83e\ude7a \ud83c\udf9a","text":"<p>\u270b\ufe0f \ud83d\udce5 \ud83c\udf8a \ud83c\udf55. \ud83d\udc76</p> <p>\"\ud83d\udec2\" \ud83c\udf0c \ud83d\udd10 \ud83d\udcf1 \ud83d\udd1c \ud83d\udd18 \ud83d\uddf3 \u23ee\ufe0f \u27a1 \ud83d\udd21 \ud83d\udc48 \ud83d\udc65 \ud83d\udd2c. , \ud83d\udc65 \ud83d\udd1c \u231b, \ud83d\udea5 \ud83d\udc46 \ud83d\udd04 \ud83e\ude7a \ud83c\udf9a \ud83c\udf66 Uvicorn \ud83d\udd17, \ud83c\udf75 \u27a1 \ud83d\udd21 \ud83d\udcdb, \u26ab\ufe0f \ud83c\udfc6 \ud83d\udeab \ud83d\udc77, \u21a9\ufe0f \u26ab\ufe0f \u231b \ud83d\udd10 \ud83d\udd18 \ud83d\uddf3.</p> <p>\ud83d\udc46 \ud83d\udcaa \u2705 \u26ab\ufe0f http://127.0.0.1:8000/docs:</p> <p></p> <p>\u270b\ufe0f \ud83d\udea5 \ud83d\udc65 \ud83d\udd10 \ud83e\ude7a \ud83c\udf9a \"\ud83d\udec2\" \ud83d\udcdb \u2699\ufe0f \ud83d\uddf3 \u23ee\ufe0f \u26f4 <code>9999</code>, <code>/api/v1/docs</code>, \u26ab\ufe0f \ud83d\udc77 \u2611 \u2757 \ud83d\udc76</p> <p>\ud83d\udc46 \ud83d\udcaa \u2705 \u26ab\ufe0f http://127.0.0.1:9999/api/v1/docs:</p> <p></p> <p>\u25b6\ufe0f\ufe0f \ud83d\udc65 \ud83d\udc9a \u26ab\ufe0f. \ud83d\udc76 \ud83d\udc76</p> <p>\ud83d\udc49 \u21a9\ufe0f ReadyAPI \u2699\ufe0f \ud83d\udc49 <code>root_path</code> \u270d \ud83d\udd22 <code>server</code> \ud83d\uddc4 \u23ee\ufe0f \ud83d\udcdb \ud83d\ude9a <code>root_path</code>.</p>"},{"location":"advanced/behind-a-proxy/#_6","title":"\ud83c\udf16 \ud83d\udcbd","text":"<p>Warning</p> <p>\ud83d\udc49 \ud83c\udf05 \ud83c\udfe7 \u2699\ufe0f \ud83d\udcbc. \ud83d\udcad \ud83c\udd93 \ud83d\udeb6 \u26ab\ufe0f.</p> <p>\ud83d\udd22, ReadyAPI \ud83d\udd1c \u270d <code>server</code> \ud83d\uddc4 \ud83d\udd17 \u23ee\ufe0f \ud83d\udcdb <code>root_path</code>.</p> <p>\u270b\ufe0f \ud83d\udc46 \ud83d\udcaa \ud83d\ude9a \ud83c\udf8f \ud83c\udf9b <code>servers</code>, \ud83d\uddbc \ud83d\udea5 \ud83d\udc46 \ud83d\udc9a \ud83c\udf8f \ud83e\ude7a \ud83c\udf9a \ud83d\udd17 \u23ee\ufe0f \ud83c\udfd7 &amp; \ud83c\udfed \ud83c\udf10.</p> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udeb6\u200d\u2640\ufe0f \ud83d\udec3 \ud83d\udcc7 <code>servers</code> &amp; \ud83d\udce4 <code>root_path</code> (\u21a9\ufe0f \ud83d\udc46 \ud83d\udee0\ufe0f \ud83d\udc68\u200d\u2764\u200d\ud83d\udc68 \u26c5 \ud83d\uddf3), ReadyAPI \ud83d\udd1c \ud83d\udce9 \"\ud83d\udcbd\" \u23ee\ufe0f \ud83d\udc49 <code>root_path</code> \u25b6\ufe0f \ud83d\udcc7.</p> <p>\ud83d\uddbc:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Request\n\napp = ReadyAPI(\n    servers=[\n        {\"url\": \"https://stag.example.com\", \"description\": \"Staging environment\"},\n        {\"url\": \"https://prod.example.com\", \"description\": \"Production environment\"},\n    ],\n    root_path=\"/api/v1\",\n)\n\n\n@app.get(\"/app\")\ndef read_main(request: Request):\n    return {\"message\": \"Hello World\", \"root_path\": request.scope.get(\"root_path\")}\n</code></pre> <p>\ud83d\udd1c \ud83c\udfd7 \ud83d\uddc4 \ud83d\udd17 \ud83d\udc96:</p> <pre><code>{\n    \"openapi\": \"3.0.2\",\n    // More stuff here\n    \"servers\": [\n        {\n            \"url\": \"/api/v1\"\n        },\n        {\n            \"url\": \"https://stag.example.com\",\n            \"description\": \"Staging environment\"\n        },\n        {\n            \"url\": \"https://prod.example.com\",\n            \"description\": \"Production environment\"\n        }\n    ],\n    \"paths\": {\n            // More stuff here\n    }\n}\n</code></pre> <p>Tip</p> <p>\ud83d\udc40 \ud83d\ude98-\ud83c\udfd7 \ud83d\udcbd \u23ee\ufe0f <code>url</code> \ud83d\udcb2 <code>/api/v1</code>, \u270a \u26aa\ufe0f\u27a1\ufe0f <code>root_path</code>.</p> <p>\ud83e\ude7a \ud83c\udf9a http://127.0.0.1:9999/api/v1/docs \u26ab\ufe0f \ud83d\udd1c \ud83d\udc40 \ud83d\udc96:</p> <p></p> <p>Tip</p> <p>\ud83e\ude7a \ud83c\udf9a \ud83d\udd1c \ud83d\udd17 \u23ee\ufe0f \ud83d\udcbd \ud83d\udc48 \ud83d\udc46 \ud83d\udd8a.</p>"},{"location":"advanced/behind-a-proxy/#root_path_3","title":"\u274e \ud83c\udfe7 \ud83d\udcbd \u26aa\ufe0f\u27a1\ufe0f <code>root_path</code>","text":"<p>\ud83d\udea5 \ud83d\udc46 \ud83d\udeab \ud83d\udc9a ReadyAPI \ud83d\udd0c \ud83c\udfe7 \ud83d\udcbd \u2699\ufe0f <code>root_path</code>, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83d\udd22 <code>root_path_in_servers=False</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Request\n\napp = ReadyAPI(\n    servers=[\n        {\"url\": \"https://stag.example.com\", \"description\": \"Staging environment\"},\n        {\"url\": \"https://prod.example.com\", \"description\": \"Production environment\"},\n    ],\n    root_path=\"/api/v1\",\n    root_path_in_servers=False,\n)\n\n\n@app.get(\"/app\")\ndef read_main(request: Request):\n    return {\"message\": \"Hello World\", \"root_path\": request.scope.get(\"root_path\")}\n</code></pre> <p>&amp; \u2934\ufe0f \u26ab\ufe0f \ud83c\udfc6 \ud83d\udeab \ud83d\udd0c \u26ab\ufe0f \ud83d\uddc4 \ud83d\udd17.</p>"},{"location":"advanced/behind-a-proxy/#-","title":"\ud83d\udddc \ud83c\udfa7-\ud83c\ude38","text":"<p>\ud83d\udea5 \ud83d\udc46 \ud83d\udcaa \ud83d\uddfb \ud83c\udfa7-\ud83c\ude38 (\ud83d\udd2c \ud83c\udfa7 \ud83c\ude38 - \ud83d\uddfb) \u23ea \u2699\ufe0f \ud83d\uddf3 \u23ee\ufe0f <code>root_path</code>, \ud83d\udc46 \ud83d\udcaa \u26ab\ufe0f \ud83d\udece, \ud83d\udc46 \ud83d\udd1c \u231b.</p> <p>ReadyAPI \ud83d\udd1c \ud83d\udd18 \u2699\ufe0f <code>root_path</code> \ud83c\udf86, \u26ab\ufe0f \ud83d\udd1c \ud83d\udc77. \ud83d\udc76</p>"},{"location":"advanced/custom-response/","title":"\ud83d\udec3 \ud83d\udce8 - \ud83d\udd78, \ud83c\udf8f, \ud83d\udcc1, \ud83c\udf8f","text":"<p>\ud83d\udd22, ReadyAPI \ud83d\udd1c \ud83d\udce8 \ud83d\udce8 \u2699\ufe0f <code>JSONResponse</code>.</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udd10 \u26ab\ufe0f \ud83d\udeec <code>Response</code> \ud83d\udd17 \ud83d\udc40 \ud83d\udce8 \ud83d\udce8 \ud83d\udd17.</p> <p>\u270b\ufe0f \ud83d\udea5 \ud83d\udc46 \ud83d\udce8 <code>Response</code> \ud83d\udd17, \ud83d\udcca \ud83c\udfc6 \ud83d\udeab \ud83d\udd01 \ud83d\udddc, &amp; \ud83e\uddfe \ud83c\udfc6 \ud83d\udeab \ud83d\udd01 \ud83c\udfd7 (\ud83d\uddbc, \ud83d\udd0c \ud83c\udfaf \"\ud83d\udcfb \ud83c\udd8e\", \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83c\udf9a <code>Content-Type</code> \ud83c\udf55 \ud83c\udfd7 \ud83d\uddc4).</p> <p>\u270b\ufe0f \ud83d\udc46 \ud83d\udcaa \ud83d\udce3 <code>Response</code> \ud83d\udc48 \ud83d\udc46 \ud83d\udc9a \u2699\ufe0f, \u27a1 \ud83d\udee0\ufe0f \ud83d\udc68\u200d\ud83c\udfa8.</p> <p>\ud83c\udf9a \ud83d\udc48 \ud83d\udc46 \ud83d\udce8 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22 \ud83d\udd1c \ud83d\udeae \ud83d\udd18 \ud83d\udc48 <code>Response</code>.</p> <p>&amp; \ud83d\udea5 \ud83d\udc48 <code>Response</code> \u2714\ufe0f \ud83c\udfbb \ud83d\udcfb \ud83c\udd8e (<code>application/json</code>), \ud83d\udc96 \ud83d\udcbc \u23ee\ufe0f <code>JSONResponse</code> &amp; <code>UJSONResponse</code>, \ud83d\udcbd \ud83d\udc46 \ud83d\udce8 \ud83d\udd1c \ud83d\udd01 \ud83d\udddc (&amp; \u26fd) \u23ee\ufe0f \ud83d\ude46 Pydantic <code>response_model</code> \ud83d\udc48 \ud83d\udc46 \ud83d\udce3 \u27a1 \ud83d\udee0\ufe0f \ud83d\udc68\u200d\ud83c\udfa8.</p> <p>Note</p> <p>\ud83d\udea5 \ud83d\udc46 \u2699\ufe0f \ud83d\udce8 \ud83c\udf93 \u23ee\ufe0f \ud83d\ude45\u200d\u2642 \ud83d\udcfb \ud83c\udd8e, ReadyAPI \ud83d\udd1c \u231b \ud83d\udc46 \ud83d\udce8 \u2714\ufe0f \ud83d\ude45\u200d\u2642 \ud83c\udf9a, \u26ab\ufe0f \ud83d\udd1c \ud83d\udeab \ud83d\udcc4 \ud83d\udce8 \ud83d\udcc1 \ud83d\udeae \ud83c\udfd7 \ud83d\uddc4 \ud83e\ude7a.</p>"},{"location":"advanced/custom-response/#orjsonresponse","title":"\u2699\ufe0f <code>ORJSONResponse</code>","text":"<p>\ud83d\uddbc, \ud83d\udea5 \ud83d\udc46 \u270a \ud83c\udfad, \ud83d\udc46 \ud83d\udcaa \u274e &amp; \u2699\ufe0f <code>orjson</code> &amp; \u2692 \ud83d\udce8 <code>ORJSONResponse</code>.</p> <p>\ud83d\uddc4 <code>Response</code> \ud83c\udf93 (\ud83c\udfa7-\ud83c\udf93) \ud83d\udc46 \ud83d\udc9a \u2699\ufe0f &amp; \ud83d\udce3 \u26ab\ufe0f \u27a1 \ud83d\udee0\ufe0f \ud83d\udc68\u200d\ud83c\udfa8.</p> <p>\u2b55 \ud83d\udce8, \ud83d\udce8 <code>Response</code> \ud83d\udd17 \ud83c\udf05 \u23e9 \ud83c\udf18 \ud83d\udeec \ud83d\udcd6.</p> <p>\ud83d\udc49 \u21a9\ufe0f \ud83d\udd22, ReadyAPI \ud83d\udd1c \u2714 \ud83d\udd20 \ud83c\udfec \ud83d\udd18 &amp; \u2692 \ud83d\udcad \u26ab\ufe0f \ud83c\udfbb \u23ee\ufe0f \ud83c\udfbb, \u2699\ufe0f \ud83c\udf8f \ud83c\udfbb \ud83d\udd17 \ud83d\udd22 \ud83d\udd2c \ud83d\udd30. \ud83d\udc49 \u26ab\ufe0f\u2754 \u2714 \ud83d\udc46 \ud83d\udce8 \u274c \ud83c\udf9a, \ud83d\uddbc \ud83d\udcbd \ud83c\udff7.</p> <p>\u270b\ufe0f \ud83d\udea5 \ud83d\udc46 \ud83c\udfaf \ud83d\udc48 \ud83c\udf9a \ud83d\udc48 \ud83d\udc46 \ud83d\udeec \ud83c\udfbb \u23ee\ufe0f \ud83c\udfbb, \ud83d\udc46 \ud83d\udcaa \ud83d\udeb6\u200d\u2640\ufe0f \u26ab\ufe0f \ud83d\udd17 \ud83d\udce8 \ud83c\udf93 &amp; \u274e \u2795 \ud83c\udf25 \ud83d\udc48 ReadyAPI \ud83d\udd1c \u2714\ufe0f \ud83d\udeb6\u200d\u2640\ufe0f \ud83d\udc46 \ud83d\udce8 \ud83c\udf9a \ud83d\udd18 <code>jsonable_encoder</code> \u23ed \ud83d\udeb6\u200d\u2640\ufe0f \u26ab\ufe0f \ud83d\udce8 \ud83c\udf93.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import ORJSONResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\", response_class=ORJSONResponse)\nasync def read_items():\n    return ORJSONResponse([{\"item_id\": \"Foo\"}])\n</code></pre> <p>Info</p> <p>\ud83d\udd22 <code>response_class</code> \ud83d\udd1c \u2699\ufe0f \ud83d\udd2c \"\ud83d\udcfb \ud83c\udd8e\" \ud83d\udce8.</p> <p>\ud83d\udc49 \ud83d\udcbc, \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83c\udf9a <code>Content-Type</code> \ud83d\udd1c \u2692 <code>application/json</code>.</p> <p>&amp; \u26ab\ufe0f \ud83d\udd1c \ud83d\udcc4 \u2705 \ud83d\uddc4.</p> <p>Tip</p> <p><code>ORJSONResponse</code> \u23f3 \ud83d\udd74 \ud83d\udcaa ReadyAPI, \ud83d\udeab \ud83d\udc83.</p>"},{"location":"advanced/custom-response/#_1","title":"\ud83d\udd78 \ud83d\udce8","text":"<p>\ud83d\udce8 \ud83d\udce8 \u23ee\ufe0f \ud83d\udd78 \ud83d\udd17 \u26aa\ufe0f\u27a1\ufe0f ReadyAPI, \u2699\ufe0f <code>HTMLResponse</code>.</p> <ul> <li>\ud83d\uddc4 <code>HTMLResponse</code>.</li> <li>\ud83d\udeb6\u200d\u2640\ufe0f <code>HTMLResponse</code> \ud83d\udd22 <code>response_class</code> \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f \ud83d\udc68\u200d\ud83c\udfa8.</li> </ul> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\", response_class=HTMLResponse)\nasync def read_items():\n    return \"\"\"\n    &lt;html&gt;\n        &lt;head&gt;\n            &lt;title&gt;Some HTML in here&lt;/title&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n            &lt;h1&gt;Look ma! HTML!&lt;/h1&gt;\n        &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\"\n</code></pre> <p>Info</p> <p>\ud83d\udd22 <code>response_class</code> \ud83d\udd1c \u2699\ufe0f \ud83d\udd2c \"\ud83d\udcfb \ud83c\udd8e\" \ud83d\udce8.</p> <p>\ud83d\udc49 \ud83d\udcbc, \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83c\udf9a <code>Content-Type</code> \ud83d\udd1c \u2692 <code>text/html</code>.</p> <p>&amp; \u26ab\ufe0f \ud83d\udd1c \ud83d\udcc4 \u2705 \ud83d\uddc4.</p>"},{"location":"advanced/custom-response/#response","title":"\ud83d\udce8 <code>Response</code>","text":"<p>\ud83d\udc40 \ud83d\udce8 \ud83d\udce8 \ud83d\udd17, \ud83d\udc46 \ud83d\udcaa \ud83d\udd10 \ud83d\udce8 \ud83d\udd17 \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f, \ud83d\udeec \u26ab\ufe0f.</p> <p>\ud83c\udf8f \ud83d\uddbc \u26aa\ufe0f\u27a1\ufe0f \ud83d\udd1b, \ud83d\udeec <code>HTMLResponse</code>, \ud83d\udcaa \ud83d\udc40 \ud83d\udc96:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    html_content = \"\"\"\n    &lt;html&gt;\n        &lt;head&gt;\n            &lt;title&gt;Some HTML in here&lt;/title&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n            &lt;h1&gt;Look ma! HTML!&lt;/h1&gt;\n        &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\"\n    return HTMLResponse(content=html_content, status_code=200)\n</code></pre> <p>Warning</p> <p><code>Response</code> \ud83d\udce8 \ud83d\udd17 \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22 \ud83c\udfc6 \ud83d\udeab \ud83d\udcc4 \ud83d\uddc4 (\ud83d\uddbc, <code>Content-Type</code> \ud83c\udfc6 \ud83d\udeab \ud83d\udcc4) &amp; \ud83c\udfc6 \ud83d\udeab \u2b50 \ud83c\udfe7 \ud83c\udf93 \ud83e\ude7a.</p> <p>Info</p> <p>\u2197\ufe0f, \u2611 <code>Content-Type</code> \ud83c\udf9a, \ud83d\udc54 \ud83d\udcdf, \u2652\ufe0f, \ud83d\udd1c \ud83d\udc5f \u26aa\ufe0f\u27a1\ufe0f <code>Response</code> \ud83c\udf9a \ud83d\udc46 \ud83d\udce8.</p>"},{"location":"advanced/custom-response/#response_1","title":"\ud83d\udcc4 \ud83d\uddc4 &amp; \ud83d\udd10 <code>Response</code>","text":"<p>\ud83d\udea5 \ud83d\udc46 \ud83d\udc9a \ud83d\udd10 \ud83d\udce8 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udd18 \ud83d\udd22 \u270b\ufe0f \ud83c\udf8f \ud83d\udd70 \ud83d\udcc4 \"\ud83d\udcfb \ud83c\udd8e\" \ud83d\uddc4, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>response_class</code> \ud83d\udd22 &amp; \ud83d\udce8 <code>Response</code> \ud83c\udf9a.</p> <p><code>response_class</code> \ud83d\udd1c \u2934\ufe0f \u2699\ufe0f \ud83d\udd74 \ud83d\udcc4 \ud83d\uddc4 \u27a1 \ud83d\udee0\ufe0f, \u270b\ufe0f \ud83d\udc46 <code>Response</code> \ud83d\udd1c \u2699\ufe0f.</p>"},{"location":"advanced/custom-response/#htmlresponse","title":"\ud83d\udce8 <code>HTMLResponse</code> \ud83d\udd17","text":"<p>\ud83d\uddbc, \u26ab\ufe0f \ud83d\udcaa \ud83d\udd73 \ud83d\udc96:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\ndef generate_html_response():\n    html_content = \"\"\"\n    &lt;html&gt;\n        &lt;head&gt;\n            &lt;title&gt;Some HTML in here&lt;/title&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n            &lt;h1&gt;Look ma! HTML!&lt;/h1&gt;\n        &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\"\n    return HTMLResponse(content=html_content, status_code=200)\n\n\n@app.get(\"/items/\", response_class=HTMLResponse)\nasync def read_items():\n    return generate_html_response()\n</code></pre> <p>\ud83d\udc49 \ud83d\uddbc, \ud83d\udd22 <code>generate_html_response()</code> \u23ea \ud83c\udfd7 &amp; \ud83d\udce8 <code>Response</code> \u21a9\ufe0f \ud83d\udeec \ud83d\udd78 <code>str</code>.</p> <p>\ud83d\udeec \ud83c\udfc1 \ud83e\udd19 <code>generate_html_response()</code>, \ud83d\udc46 \u23ea \ud83d\udeec <code>Response</code> \ud83d\udc48 \ud83d\udd1c \ud83d\udd10 \ud83d\udd22 ReadyAPI \ud83c\udfad.</p> <p>\u270b\ufe0f \ud83d\udc46 \ud83d\udeb6\u200d\u2640\ufe0f <code>HTMLResponse</code> <code>response_class</code> \ud83d\udc81\u200d\u2642\ufe0f, ReadyAPI \ud83d\udd1c \ud83d\udcad \u2754 \ud83d\udcc4 \u26ab\ufe0f \ud83d\uddc4 &amp; \ud83c\udf93 \ud83e\ude7a \ud83d\udd78 \u23ee\ufe0f <code>text/html</code>:</p> <p></p>"},{"location":"advanced/custom-response/#_2","title":"\ud83d\udcaa \ud83d\udce8","text":"<p>\ud83d\udce5 \ud83d\udcaa \ud83d\udce8.</p> <p>\u2714\ufe0f \ud83e\udd2f \ud83d\udc48 \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>Response</code> \ud83d\udce8 \ud83d\udd73 \ud83d\ude46, \u2696\ufe0f \u270d \ud83d\udec3 \ud83c\udfa7-\ud83c\udf93.</p> <p>\ud83d\udce1 \u2139</p> <p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>from starlette.responses import HTMLResponse</code>.</p> <p>ReadyAPI \ud83d\ude9a \ud83c\udf8f <code>starlette.responses</code> <code>readyapi.responses</code> \ud83c\udfea \ud83d\udc46, \ud83d\udc69\u200d\ud83d\udcbb. \u270b\ufe0f \ud83c\udf05 \ud83d\udcaa \ud83d\udce8 \ud83d\udc5f \ud83d\udd17 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc83.</p>"},{"location":"advanced/custom-response/#response_2","title":"<code>Response</code>","text":"<p>\ud83d\udc51 <code>Response</code> \ud83c\udf93, \ud83c\udf10 \ud83c\udf8f \ud83d\udce8 \ud83d\ude16 \u26aa\ufe0f\u27a1\ufe0f \u26ab\ufe0f.</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udce8 \u26ab\ufe0f \ud83d\udd17.</p> <p>\u26ab\ufe0f \ud83d\udeab \ud83d\udcc4 \ud83d\udd22:</p> <ul> <li><code>content</code> - <code>str</code> \u2696\ufe0f <code>bytes</code>.</li> <li><code>status_code</code> - <code>int</code> \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udc54 \ud83d\udcdf.</li> <li><code>headers</code> - <code>dict</code> \ud83c\udfbb.</li> <li><code>media_type</code> - <code>str</code> \ud83e\udd1d \ud83d\udcfb \ud83c\udd8e. \ud83e\udd36 \u24c2. <code>\"text/html\"</code>.</li> </ul> <p>ReadyAPI (\ud83e\udd19 \ud83d\udc83) \ud83d\udd1c \ud83d\udd01 \ud83d\udd0c \ud83c\udf9a-\ud83d\udcd0 \ud83c\udf9a. \u26ab\ufe0f \ud83d\udd1c \ud83d\udd0c \ud83c\udf9a-\ud83c\udd8e \ud83c\udf9a, \u2693\ufe0f \ud83d\udd1b = &amp; \ud83d\udd01 = \u270d \ud83c\udd8e.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Response\n\napp = ReadyAPI()\n\n\n@app.get(\"/legacy/\")\ndef get_legacy_data():\n    data = \"\"\"&lt;?xml version=\"1.0\"?&gt;\n    &lt;shampoo&gt;\n    &lt;Header&gt;\n        Apply shampoo here.\n    &lt;/Header&gt;\n    &lt;Body&gt;\n        You'll have to use soap here.\n    &lt;/Body&gt;\n    &lt;/shampoo&gt;\n    \"\"\"\n    return Response(content=data, media_type=\"application/xml\")\n</code></pre>"},{"location":"advanced/custom-response/#htmlresponse_1","title":"<code>HTMLResponse</code>","text":"<p>\u270a \u270d \u2696\ufe0f \ud83d\udd22 &amp; \ud83d\udce8 \ud83d\udd78 \ud83d\udce8, \ud83d\udc46 \u270d \ud83d\udd1b.</p>"},{"location":"advanced/custom-response/#plaintextresponse","title":"<code>PlainTextResponse</code>","text":"<p>\u270a \u270d \u2696\ufe0f \ud83d\udd22 &amp; \ud83d\udce8 \u2705 \u270d \ud83d\udce8.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import PlainTextResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/\", response_class=PlainTextResponse)\nasync def main():\n    return \"Hello World\"\n</code></pre>"},{"location":"advanced/custom-response/#jsonresponse","title":"<code>JSONResponse</code>","text":"<p>\u270a \ud83d\udcbd &amp; \ud83d\udce8 <code>application/json</code> \ud83d\udddc \ud83d\udce8.</p> <p>\ud83d\udc49 \ud83d\udd22 \ud83d\udce8 \u2699\ufe0f ReadyAPI, \ud83d\udc46 \u270d \ud83d\udd1b.</p>"},{"location":"advanced/custom-response/#orjsonresponse_1","title":"<code>ORJSONResponse</code>","text":"<p>\u23e9 \ud83c\udf9b \ud83c\udfbb \ud83d\udce8 \u2699\ufe0f <code>orjson</code>, \ud83d\udc46 \u270d \ud83d\udd1b.</p>"},{"location":"advanced/custom-response/#ujsonresponse","title":"<code>UJSONResponse</code>","text":"<p>\ud83c\udf9b \ud83c\udfbb \ud83d\udce8 \u2699\ufe0f <code>ujson</code>.</p> <p>Warning</p> <p><code>ujson</code> \ud83c\udf18 \ud83d\udc9b \ud83c\udf18 \ud83d\udc0d \ud83c\udfd7-\ud83d\udee0\ufe0f \u2754 \u26ab\ufe0f \ud83c\udf75 \ud83d\udcd0-\ud83d\udcbc.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import UJSONResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\", response_class=UJSONResponse)\nasync def read_items():\n    return [{\"item_id\": \"Foo\"}]\n</code></pre> <p>Tip</p> <p>\u26ab\ufe0f \ud83d\udcaa \ud83d\udc48 <code>ORJSONResponse</code> \ud83d\udcaa \u23e9 \ud83c\udf9b.</p>"},{"location":"advanced/custom-response/#redirectresponse","title":"<code>RedirectResponse</code>","text":"<p>\ud83d\udce8 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \u274e. \u2699\ufe0f 3\ufe0f\u20e30\ufe0f\u20e37\ufe0f\u20e3 \ud83d\udc54 \ud83d\udcdf (\ud83c\udf55 \u274e) \ud83d\udd22.</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udce8 <code>RedirectResponse</code> \ud83d\udd17:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import RedirectResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/cligenius\")\nasync def redirect_cligenius():\n    return RedirectResponse(\"https://cligenius.khulnasoft.com\")\n</code></pre> <p>\u2696\ufe0f \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \u26ab\ufe0f <code>response_class</code> \ud83d\udd22:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import RedirectResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/readyapi\", response_class=RedirectResponse)\nasync def redirect_readyapi():\n    return \"https://readyapi.github.io\"\n</code></pre> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udc48, \u2934\ufe0f \ud83d\udc46 \ud83d\udcaa \ud83d\udce8 \ud83d\udcdb \ud83d\udd17 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22.</p> <p>\ud83d\udc49 \ud83d\udcbc, <code>status_code</code> \u2699\ufe0f \ud83d\udd1c \ud83d\udd22 1\ufe0f\u20e3 <code>RedirectResponse</code>, \u2754 <code>307</code>.</p> <p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>status_code</code> \ud83d\udd22 \ud83c\udf00 \u23ee\ufe0f <code>response_class</code> \ud83d\udd22:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import RedirectResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/pydantic\", response_class=RedirectResponse, status_code=302)\nasync def redirect_pydantic():\n    return \"https://docs.pydantic.dev/\"\n</code></pre>"},{"location":"advanced/custom-response/#streamingresponse","title":"<code>StreamingResponse</code>","text":"<p>\u270a \ud83d\udd01 \ud83d\ude82 \u2696\ufe0f \ud83d\ude10 \ud83d\ude82/\ud83c\udfbb &amp; \ud83c\udf8f \ud83d\udce8 \ud83d\udcaa.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import StreamingResponse\n\napp = ReadyAPI()\n\n\nasync def fake_video_streamer():\n    for i in range(10):\n        yield b\"some fake video bytes\"\n\n\n@app.get(\"/\")\nasync def main():\n    return StreamingResponse(fake_video_streamer())\n</code></pre>"},{"location":"advanced/custom-response/#streamingresponse-","title":"\u2699\ufe0f <code>StreamingResponse</code> \u23ee\ufe0f \ud83d\udcc1-\ud83d\udc96 \ud83c\udf9a","text":"<p>\ud83d\udea5 \ud83d\udc46 \u2714\ufe0f \ud83d\udcc1-\ud83d\udc96 \ud83c\udf9a (\u2705 \ud83c\udf9a \ud83d\udce8 <code>open()</code>), \ud83d\udc46 \ud83d\udcaa \u270d \ud83d\ude82 \ud83d\udd22 \ud83d\udd01 \ud83e\udd2d \ud83d\udc48 \ud83d\udcc1-\ud83d\udc96 \ud83c\udf9a.</p> <p>\ud83d\udc48 \ud83c\udf0c, \ud83d\udc46 \ud83d\udeab \u2714\ufe0f \u270d \u26ab\ufe0f \ud83c\udf10 \ud83e\udd47 \ud83d\udcbe, &amp; \ud83d\udc46 \ud83d\udcaa \ud83d\udeb6\u200d\u2640\ufe0f \ud83d\udc48 \ud83d\ude82 \ud83d\udd22 <code>StreamingResponse</code>, &amp; \ud83d\udce8 \u26ab\ufe0f.</p> <p>\ud83d\udc49 \ud83d\udd0c \ud83d\udcda \ud83d\uddc3 \ud83d\udd17 \u23ee\ufe0f \u2601 \ud83d\udcbe, \ud83d\udcf9 \ud83c\udfed, &amp; \ud83c\udf8f.</p> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import StreamingResponse\n\nsome_file_path = \"large-video-file.mp4\"\napp = ReadyAPI()\n\n\n@app.get(\"/\")\ndef main():\n    def iterfile():  # (1)\n        with open(some_file_path, mode=\"rb\") as file_like:  # (2)\n            yield from file_like  # (3)\n\n    return StreamingResponse(iterfile(), media_type=\"video/mp4\")\n</code></pre> <p>1\ufe0f\u20e3. \ud83d\udc49 \ud83d\ude82 \ud83d\udd22. \u26ab\ufe0f \"\ud83d\ude82 \ud83d\udd22\" \u21a9\ufe0f \u26ab\ufe0f \ud83d\udd0c <code>yield</code> \ud83d\udcc4 \ud83d\udd18. 2\ufe0f\u20e3. \u2699\ufe0f <code>with</code> \ud83c\udf6b, \ud83d\udc65 \u2692 \ud83d\udcad \ud83d\udc48 \ud83d\udcc1-\ud83d\udc96 \ud83c\udf9a \ud83d\udcea \u23ee\ufe0f \ud83d\ude82 \ud83d\udd22 \ud83d\udd28. , \u23ee\ufe0f \u26ab\ufe0f \ud83c\udfc1 \ud83d\udce8 \ud83d\udce8. 3\ufe0f\u20e3. \ud83d\udc49 <code>yield from</code> \ud83d\udcac \ud83d\udd22 \ud83d\udd01 \ud83e\udd2d \ud83d\udc48 \ud83d\udc5c \ud83c\udf1f <code>file_like</code>. &amp; \u2934\ufe0f, \ud83d\udd20 \ud83c\udf55 \ud83d\udd01, \ud83c\udf3e \ud83d\udc48 \ud83c\udf55 \ud83d\udc5f \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc49 \ud83d\ude82 \ud83d\udd22.</p> <pre><code>, \u26ab\ufe0f \ud83d\ude82 \ud83d\udd22 \ud83d\udc48 \ud83d\udce8 \"\ud83c\udfed\" \ud83d\udc77 \ud83d\udd73 \ud83d\ude46 \ud83d\udd18.\n\n\ud83d\udd28 \u26ab\ufe0f \ud83d\udc49 \ud83c\udf0c, \ud83d\udc65 \ud83d\udcaa \ud83d\udeae \u26ab\ufe0f `with` \ud83c\udf6b, &amp;amp; \ud83d\udc48 \ud83c\udf0c, \ud83d\ude9a \ud83d\udc48 \u26ab\ufe0f \ud83d\udcea \u23ee\ufe0f \ud83c\udfc1.\n</code></pre> <p>Tip</p> <p>\ud83d\udc40 \ud83d\udc48 \ud83d\udce5 \ud83d\udc65 \u2699\ufe0f \ud83d\udc29 <code>open()</code> \ud83d\udc48 \ud83d\udeab \ud83d\udc15\u200d\ud83e\uddba <code>async</code> &amp; <code>await</code>, \ud83d\udc65 \ud83d\udce3 \u27a1 \ud83d\udee0\ufe0f \u23ee\ufe0f \ud83d\ude10 <code>def</code>.</p>"},{"location":"advanced/custom-response/#fileresponse","title":"<code>FileResponse</code>","text":"<p>\ud83d\udd01 \ud83c\udf8f \ud83d\udcc1 \ud83d\udce8.</p> <p>\u270a \ud83c\udf8f \u2692 \u274c \ud83d\udd17 \ud83c\udf18 \ud83c\udf8f \ud83d\udce8 \ud83c\udd8e:</p> <ul> <li><code>path</code> - \ud83d\udcc1 \ud83d\udcc1 \ud83c\udf8f.</li> <li><code>headers</code> - \ud83d\ude46 \ud83d\udec3 \ud83c\udf9a \ud83d\udd0c, \ud83d\udcd6.</li> <li><code>media_type</code> - \ud83c\udfbb \ud83e\udd1d \ud83d\udcfb \ud83c\udd8e. \ud83d\udea5 \ud83d\udd22, \ud83d\udcc1 \u2696\ufe0f \u27a1 \ud83d\udd1c \u2699\ufe0f \ud83d\udd11 \ud83d\udcfb \ud83c\udd8e.</li> <li><code>filename</code> - \ud83d\udea5 \u2692, \ud83d\udc49 \ud83d\udd1c \ud83d\udd0c \ud83d\udce8 <code>Content-Disposition</code>.</li> </ul> <p>\ud83d\udcc1 \ud83d\udce8 \ud83d\udd1c \ud83d\udd0c \u2611 <code>Content-Length</code>, <code>Last-Modified</code> &amp; <code>ETag</code> \ud83c\udf9a.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import FileResponse\n\nsome_file_path = \"large-video-file.mp4\"\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def main():\n    return FileResponse(some_file_path)\n</code></pre> <p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>response_class</code> \ud83d\udd22:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import FileResponse\n\nsome_file_path = \"large-video-file.mp4\"\napp = ReadyAPI()\n\n\n@app.get(\"/\", response_class=FileResponse)\nasync def main():\n    return some_file_path\n</code></pre> <p>\ud83d\udc49 \ud83d\udcbc, \ud83d\udc46 \ud83d\udcaa \ud83d\udce8 \ud83d\udcc1 \u27a1 \ud83d\udd17 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22.</p>"},{"location":"advanced/custom-response/#_3","title":"\ud83d\udec3 \ud83d\udce8 \ud83c\udf93","text":"<p>\ud83d\udc46 \ud83d\udcaa \u270d \ud83d\udc46 \ud83d\udc4d \ud83d\udec3 \ud83d\udce8 \ud83c\udf93, \ud83d\ude16 \u26aa\ufe0f\u27a1\ufe0f <code>Response</code> &amp; \u2699\ufe0f \u26ab\ufe0f.</p> <p>\ud83d\uddbc, \u27a1\ufe0f \ud83d\udcac \ud83d\udc48 \ud83d\udc46 \ud83d\udc9a \u2699\ufe0f <code>orjson</code>, \u270b\ufe0f \u23ee\ufe0f \ud83d\udec3 \u2692 \ud83d\udeab \u2699\ufe0f \ud83d\udd0c <code>ORJSONResponse</code> \ud83c\udf93.</p> <p>\u27a1\ufe0f \ud83d\udcac \ud83d\udc46 \ud83d\udc9a \u26ab\ufe0f \ud83d\udce8 \ud83d\udd02 &amp; \ud83d\udcc1 \ud83c\udfbb, \ud83d\udc46 \ud83d\udc9a \u2699\ufe0f Orjson \ud83c\udf9b <code>orjson.OPT_INDENT_2</code>.</p> <p>\ud83d\udc46 \ud83d\udcaa \u270d <code>CustomORJSONResponse</code>. \ud83d\udc51 \ud83d\udc5c \ud83d\udc46 \u2714\ufe0f \u270d <code>Response.render(content)</code> \ud83d\udc69\u200d\ud83d\udd2c \ud83d\udc48 \ud83d\udce8 \ud83c\udf9a <code>bytes</code>:</p> Python 3.8+ <pre><code>from typing import Any\n\nimport orjson\nfrom readyapi import ReadyAPI, Response\n\napp = ReadyAPI()\n\n\nclass CustomORJSONResponse(Response):\n    media_type = \"application/json\"\n\n    def render(self, content: Any) -&gt; bytes:\n        assert orjson is not None, \"orjson must be installed\"\n        return orjson.dumps(content, option=orjson.OPT_INDENT_2)\n\n\n@app.get(\"/\", response_class=CustomORJSONResponse)\nasync def main():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>\ud83d\udd1c \u21a9\ufe0f \ud83d\udeec:</p> <pre><code>{\"message\": \"Hello World\"}\n</code></pre> <p>...\ud83d\udc49 \ud83d\udce8 \ud83d\udd1c \ud83d\udce8:</p> <pre><code>{\n  \"message\": \"Hello World\"\n}\n</code></pre> <p>\u2197\ufe0f, \ud83d\udc46 \ud83d\udd1c \ud83c\udfb2 \ud83d\udd0e \ud83c\udf05 \ud83d\udc4d \ud83c\udf0c \u270a \ud83d\udcc8 \ud83d\udc49 \ud83c\udf18 \u2755 \ud83c\udfbb. \ud83d\udc76</p>"},{"location":"advanced/custom-response/#_4","title":"\ud83d\udd22 \ud83d\udce8 \ud83c\udf93","text":"<p>\ud83d\udd50\u2754 \ud83c\udfd7 ReadyAPI \ud83c\udf93 \ud83d\udc50 \u2696\ufe0f <code>APIRouter</code> \ud83d\udc46 \ud83d\udcaa \u2714 \u2754 \ud83d\udce8 \ud83c\udf93 \u2699\ufe0f \ud83d\udd22.</p> <p>\ud83d\udd22 \ud83d\udc48 \ud83d\udd2c \ud83d\udc49 <code>default_response_class</code>.</p> <p>\ud83d\uddbc \ud83d\udd1b, ReadyAPI \ud83d\udd1c \u2699\ufe0f <code>ORJSONResponse</code> \ud83d\udd22, \ud83c\udf10 \u27a1 \ud83d\udee0\ufe0f, \u21a9\ufe0f <code>JSONResponse</code>.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import ORJSONResponse\n\napp = ReadyAPI(default_response_class=ORJSONResponse)\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"item_id\": \"Foo\"}]\n</code></pre> <p>Tip</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udd10 <code>response_class</code> \u27a1 \ud83d\udee0\ufe0f \u23ed.</p>"},{"location":"advanced/custom-response/#_5","title":"\ud83c\udf16 \ud83e\uddfe","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83d\udcfb \ud83c\udd8e &amp; \ud83d\udcda \ud83c\udf8f \u2139 \ud83d\uddc4 \u2699\ufe0f <code>responses</code>: \ud83c\udf16 \ud83d\udce8 \ud83d\uddc4.</p>"},{"location":"advanced/dataclasses/","title":"\u2699\ufe0f \ud83c\udfbb","text":"<p>ReadyAPI \ud83c\udfd7 \ud83d\udd1b \ud83d\udd1d Pydantic, &amp; \ud83d\udc64 \u2714\ufe0f \ud83c\udf0f \ud83d\udc46 \u2754 \u2699\ufe0f Pydantic \ud83c\udff7 \ud83d\udce3 \ud83d\udce8 &amp; \ud83d\udce8.</p> <p>\u270b\ufe0f ReadyAPI \ud83d\udc15\u200d\ud83e\uddba \u2699\ufe0f <code>dataclasses</code> \ud83c\udf8f \ud83c\udf0c:</p> Python 3.8+ <pre><code>from dataclasses import dataclass\nfrom typing import Union\n\nfrom readyapi import ReadyAPI\n\n\n@dataclass\nclass Item:\n    name: str\n    price: float\n    description: Union[str, None] = None\n    tax: Union[float, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n</code></pre> <p>\ud83d\udc49 \ud83d\udc15\u200d\ud83e\uddba \ud83d\udc4f Pydantic, \u26ab\ufe0f \u2714\ufe0f \ud83d\udd17 \ud83d\udc15\u200d\ud83e\uddba <code>dataclasses</code>.</p> <p>, \u23ee\ufe0f \ud83d\udcdf \ud83d\udd1b \ud83d\udc48 \ud83d\udeab \u2699\ufe0f Pydantic \ud83c\udfaf, ReadyAPI \u2699\ufe0f Pydantic \ud83d\udddc \ud83d\udcda \ud83d\udc29 \ud83c\udfbb Pydantic \ud83d\udc4d \ud83c\udf5b \ud83c\udfbb.</p> <p>&amp; \u2197\ufe0f, \u26ab\ufe0f \ud83d\udc15\u200d\ud83e\uddba \ud83c\udf8f:</p> <ul> <li>\ud83d\udcbd \ud83d\udd2c</li> <li>\ud83d\udcbd \ud83d\udee0\ufe0f</li> <li>\ud83d\udcbd \ud83e\uddfe, \u2652\ufe0f.</li> </ul> <p>\ud83d\udc49 \ud83d\udc77 \ud83c\udf8f \ud83c\udf0c \u23ee\ufe0f Pydantic \ud83c\udff7. &amp; \u26ab\ufe0f \ud83e\udd19 \ud83c\udfc6 \ud83c\udf8f \ud83c\udf0c \ud83d\udd18, \u2699\ufe0f Pydantic.</p> <p>Info</p> <p>\u2714\ufe0f \ud83e\udd2f \ud83d\udc48 \ud83c\udfbb \ud83d\udcaa \ud83d\udeab \ud83c\udf10 Pydantic \ud83c\udff7 \ud83d\udcaa.</p> <p>, \ud83d\udc46 5\ufe0f\u20e3\ud83d\udcc6 \ud83d\udcaa \u2699\ufe0f Pydantic \ud83c\udff7.</p> <p>\u270b\ufe0f \ud83d\udea5 \ud83d\udc46 \u2714\ufe0f \ud83d\udcda \ud83c\udfbb \ud83e\udd25 \ud83e\udd2d, \ud83d\udc49 \ud83d\udc4c \ud83c\udfb1 \u2699\ufe0f \ud83d\udc6b \ud83c\udfcb\ufe0f \ud83d\udd78 \ud83d\udee0\ufe0f \u2699\ufe0f ReadyAPI. \ud83d\udc76</p>"},{"location":"advanced/dataclasses/#response_model","title":"\ud83c\udfbb <code>response_model</code>","text":"<p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>dataclasses</code> <code>response_model</code> \ud83d\udd22:</p> Python 3.8+ <pre><code>from dataclasses import dataclass, field\nfrom typing import List, Union\n\nfrom readyapi import ReadyAPI\n\n\n@dataclass\nclass Item:\n    name: str\n    price: float\n    tags: List[str] = field(default_factory=list)\n    description: Union[str, None] = None\n    tax: Union[float, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/next\", response_model=Item)\nasync def read_next_item():\n    return {\n        \"name\": \"Island In The Moon\",\n        \"price\": 12.99,\n        \"description\": \"A place to be playin' and havin' fun\",\n        \"tags\": [\"breater\"],\n    }\n</code></pre> <p>\ud83c\udfbb \ud83d\udd1c \ud83d\udd01 \ud83d\udddc Pydantic \ud83c\udfbb.</p> <p>\ud83d\udc49 \ud83c\udf0c, \ud83d\udeae \ud83d\udd17 \ud83d\udd1c \ud83c\udfa6 \ud83c\udd99 \ud83d\udee0\ufe0f \ud83e\ude7a \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd22:</p> <p></p>"},{"location":"advanced/dataclasses/#_2","title":"\ud83c\udfbb \ud83d\udd01 \ud83d\udcca \ud83d\udcca","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83c\udf00 <code>dataclasses</code> \u23ee\ufe0f \ud83c\udf8f \ud83c\udd8e \u270d \u2692 \ud83d\udc26 \ud83d\udcca \ud83d\udcca.</p> <p>\ud83d\udcbc, \ud83d\udc46 \ud83d\udcaa \u2714\ufe0f \u2699\ufe0f Pydantic \u23ec <code>dataclasses</code>. \ud83d\uddbc, \ud83d\udea5 \ud83d\udc46 \u2714\ufe0f \u274c \u23ee\ufe0f \ud83d\udd01 \ud83c\udfd7 \ud83d\udee0\ufe0f \ud83e\uddfe.</p> <p>\ud83d\udc48 \ud83d\udcbc, \ud83d\udc46 \ud83d\udcaa \ud83c\udfaf \ud83d\udcb1 \ud83d\udc29 <code>dataclasses</code> \u23ee\ufe0f <code>pydantic.dataclasses</code>, \u2754 \ud83d\udca7-\u267b:</p> <pre><code>from dataclasses import field  # (1)\nfrom typing import List, Union\n\nfrom readyapi import ReadyAPI\nfrom pydantic.dataclasses import dataclass  # (2)\n\n\n@dataclass\nclass Item:\n    name: str\n    description: Union[str, None] = None\n\n\n@dataclass\nclass Author:\n    name: str\n    items: List[Item] = field(default_factory=list)  # (3)\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/authors/{author_id}/items/\", response_model=Author)  # (4)\nasync def create_author_items(author_id: str, items: List[Item]):  # (5)\n    return {\"name\": author_id, \"items\": items}  # (6)\n\n\n@app.get(\"/authors/\", response_model=List[Author])  # (7)\ndef get_authors():  # (8)\n    return [  # (9)\n        {\n            \"name\": \"Breaters\",\n            \"items\": [\n                {\n                    \"name\": \"Island In The Moon\",\n                    \"description\": \"A place to be playin' and havin' fun\",\n                },\n                {\"name\": \"Holy Buddies\"},\n            ],\n        },\n        {\n            \"name\": \"System of an Up\",\n            \"items\": [\n                {\n                    \"name\": \"Salt\",\n                    \"description\": \"The kombucha mushroom people's favorite\",\n                },\n                {\"name\": \"Pad Thai\"},\n                {\n                    \"name\": \"Lonely Night\",\n                    \"description\": \"The mostests lonliest nightiest of allest\",\n                },\n            ],\n        },\n    ]\n</code></pre> <p>1\ufe0f\u20e3. \ud83d\udc65 \ud83d\uddc4 <code>field</code> \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc29 <code>dataclasses</code>.</p> <p>2\ufe0f\u20e3. <code>pydantic.dataclasses</code> \ud83d\udca7-\u267b <code>dataclasses</code>.</p> <p>3\ufe0f\u20e3. <code>Author</code> \ud83c\udfbb \ud83d\udd0c \ud83d\udcc7 <code>Item</code> \ud83c\udfbb.</p> <p>4\ufe0f\u20e3. <code>Author</code> \ud83c\udfbb \u2699\ufe0f <code>response_model</code> \ud83d\udd22.</p> <p>5\ufe0f\u20e3. \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83c\udf8f \ud83d\udc29 \ud83c\udd8e \u270d \u23ee\ufe0f \ud83c\udfbb \ud83d\udce8 \ud83d\udcaa.</p> <pre><code>\ud83d\udc49 \ud83d\udcbc, \u26ab\ufe0f \ud83d\udcc7 `Item` \ud83c\udfbb.\n</code></pre> <p>6\ufe0f\u20e3. \ud83d\udce5 \ud83d\udc65 \ud83d\udeec \ud83d\udcd6 \ud83d\udc48 \ud83d\udd0c <code>items</code> \u2754 \ud83d\udcc7 \ud83c\udfbb.</p> <pre><code>ReadyAPI \ud83c\udfaf &lt;abbr title=\"converting the data to a format that can be transmitted\"&gt;\u270d&lt;/abbr&gt; \ud83d\udcbd \ud83c\udfbb.\n</code></pre> <p>7\ufe0f\u20e3. \ud83d\udce5 <code>response_model</code> \u2699\ufe0f \ud83c\udd8e \u270d \ud83d\udcc7 <code>Author</code> \ud83c\udfbb.</p> <pre><code>\ud83d\udd04, \ud83d\udc46 \ud83d\udcaa \ud83c\udf00 `dataclasses` \u23ee\ufe0f \ud83d\udc29 \ud83c\udd8e \u270d.\n</code></pre> <p>8\ufe0f\u20e3. \ud83d\udc40 \ud83d\udc48 \ud83d\udc49 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22 \u2699\ufe0f \ud83e\udd54 <code>def</code> \u21a9\ufe0f <code>async def</code>.</p> <pre><code>\ud83d\udd67, ReadyAPI \ud83d\udc46 \ud83d\udcaa \ud83c\udf00 `def` &amp;amp; `async def` \ud83d\udcaa.\n\n\ud83d\udea5 \ud83d\udc46 \ud83d\udcaa \u2197\ufe0f \ud83d\udd03 \ud83d\udd50\u2754 \u2699\ufe0f \u2754, \u2705 \ud83d\udc45 \ud83d\udcc4 _\"\ud83c\udfc3 \u2753\" _ \ud83e\ude7a \ud83d\udd03 &lt;a href=\"https://readyapi.github.io/async/#in-a-hurry\" target=\"_blank\" class=\"internal-link\"&gt;`async` &amp;amp; `await`&lt;/a&gt;.\n</code></pre> <p>9\ufe0f\u20e3. \ud83d\udc49 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22 \ud83d\udeab \ud83d\udeec \ud83c\udfbb (\ud83d\udc50 \u26ab\ufe0f \ud83d\udcaa), \u270b\ufe0f \ud83d\udcc7 \ud83d\udcd6 \u23ee\ufe0f \ud83d\udd17 \ud83d\udcbd.</p> <pre><code>ReadyAPI \ud83d\udd1c \u2699\ufe0f `response_model` \ud83d\udd22 (\ud83d\udc48 \ud83d\udd0c \ud83c\udfbb) \ud83d\udddc \ud83d\udce8.\n</code></pre> <p>\ud83d\udc46 \ud83d\udcaa \ud83c\udf00 <code>dataclasses</code> \u23ee\ufe0f \ud83c\udf8f \ud83c\udd8e \u270d \ud83d\udcda \ud83c\udf8f \ud83c\udf00 \ud83d\udce8 \ud83c\udfd7 \ud83d\udcca \ud83d\udcca.</p> <p>\u2705-\ud83d\udcdf \u270d \ud83d\udc81\u200d\u2642 \ud83d\udd1b \ud83d\udc40 \ud83c\udf05 \ud83c\udfaf \u2139.</p>"},{"location":"advanced/dataclasses/#_3","title":"\ud83d\udca1 \ud83c\udf05","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83c\udf00 <code>dataclasses</code> \u23ee\ufe0f \ud83c\udf8f Pydantic \ud83c\udff7, \ud83d\ude16 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc6b, \ud83d\udd0c \ud83d\udc6b \ud83d\udc46 \ud83d\udc4d \ud83c\udff7, \u2652\ufe0f.</p> <p>\ud83d\udca1 \ud83c\udf05, \u2705 Pydantic \ud83e\ude7a \ud83d\udd03 \ud83c\udfbb.</p>"},{"location":"advanced/dataclasses/#_4","title":"\u23ec","text":"<p>\ud83d\udc49 \ud83d\udcaa \u21a9\ufe0f ReadyAPI \u23ec <code>0.67.0</code>. \ud83d\udc76</p>"},{"location":"advanced/events/","title":"\ud83d\udd06 \ud83c\udf89","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udd2c \u269b (\ud83d\udcdf) \ud83d\udc48 \ud83d\udd1c \ud83d\udee0\ufe0f \u23ed \ud83c\ude38 \u25b6\ufe0f \ud83c\udd99. \ud83d\udc49 \u26d3 \ud83d\udc48 \ud83d\udc49 \ud83d\udcdf \ud83d\udd1c \ud83d\udee0\ufe0f \ud83d\udd50, \u23ed \ud83c\ude38 \u25b6\ufe0f \ud83d\udce8 \ud83d\udce8.</p> <p>\ud83c\udf8f \ud83c\udf0c, \ud83d\udc46 \ud83d\udcaa \ud83d\udd2c \u269b (\ud83d\udcdf) \ud83d\udc48 \ud83d\udd1c \ud83d\udee0\ufe0f \ud83d\udd50\u2754 \ud83c\ude38 \ud83e\udd2b \ud83d\udd3d. \ud83d\udc49 \ud83d\udcbc, \ud83d\udc49 \ud83d\udcdf \ud83d\udd1c \ud83d\udee0\ufe0f \ud83d\udd50, \u23ee\ufe0f \u2714\ufe0f \ud83c\udf75 \ud83c\udfb2 \ud83d\udcda \ud83d\udce8.</p> <p>\u21a9\ufe0f \ud83d\udc49 \ud83d\udcdf \ud83d\udee0\ufe0f \u23ed \ud83c\ude38 \u25b6\ufe0f \u270a \ud83d\udce8, &amp; \u25b6\ufe0f\ufe0f \u23ee\ufe0f \u26ab\ufe0f \ud83c\udfc1 \ud83d\ude9a \ud83d\udce8, \u26ab\ufe0f \ud83d\udcd4 \ud83c\udf82 \ud83c\ude38 \ud83d\udd06 (\ud83d\udd24 \"\ud83d\udd06\" \ud83d\udd1c \u26a0 \ud83e\udd48 \ud83d\udc76).</p> <p>\ud83d\udc49 \ud83d\udcaa \ud83d\udcf6 \u26a0 \u2692 \ud83c\udd99 \u2139 \ud83d\udc48 \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83c\udf82 \ud83d\udcf1, &amp; \ud83d\udc48 \ud83d\udcb0 \ud83d\udc6a \ud83d\udce8, &amp;/\u2696\ufe0f \ud83d\udc48 \ud83d\udc46 \ud83d\udcaa \ud83e\uddf9 \ud83c\udd99 \u23ee\ufe0f. \ud83d\uddbc, \ud83d\udcbd \ud83d\udd17 \ud83c\udfb1, \u2696\ufe0f \ud83d\ude9a \ud83d\udd17 \ud83c\udfb0 \ud83c\udfeb \ud83c\udff7.</p>"},{"location":"advanced/events/#_2","title":"\u2699\ufe0f \ud83d\udcbc","text":"<p>\u27a1\ufe0f \u25b6\ufe0f \u23ee\ufe0f \ud83d\uddbc \u2699\ufe0f \ud83d\udcbc &amp; \u2934\ufe0f \ud83d\udc40 \u2754 \u274e \u26ab\ufe0f \u23ee\ufe0f \ud83d\udc49.</p> <p>\u27a1\ufe0f \ud83c\udf08 \ud83d\udc48 \ud83d\udc46 \u2714\ufe0f \ud83c\udfb0 \ud83c\udfeb \ud83c\udff7 \ud83d\udc48 \ud83d\udc46 \ud83d\udc9a \u2699\ufe0f \ud83c\udf75 \ud83d\udce8. \ud83d\udc76</p> <p>\ud83c\udf8f \ud83c\udff7 \ud83d\udd17 \ud83d\udc6a \ud83d\udce8,, \u26ab\ufe0f \ud83d\udeab 1\ufe0f\u20e3 \ud83c\udff7 \ud83d\udccd \ud83d\udce8, \u2696\ufe0f 1\ufe0f\u20e3 \ud83d\udccd \ud83d\udc69\u200d\ud83d\udcbb \u2696\ufe0f \ud83d\udd73 \ud83c\udf8f.</p> <p>\u27a1\ufe0f \ud83c\udf08 \ud83d\udc48 \ud83d\ude9a \ud83c\udff7 \ud83d\udcaa \u270a \ud83d\udd70, \u21a9\ufe0f \u26ab\ufe0f \u2714\ufe0f \u270d \ud83d\udcda \ud83d\udcbd \u26aa\ufe0f\u27a1\ufe0f \ud83d\udcbe. \ud83d\udc46 \ud83d\udeab \ud83d\udc9a \u26ab\ufe0f \ud83d\udd20 \ud83d\udce8.</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udcd0 \u26ab\ufe0f \ud83d\udd1d \ud83c\udf9a \ud83d\udd79/\ud83d\udcc1, \u270b\ufe0f \ud83d\udc48 \ud83d\udd1c \u26d3 \ud83d\udc48 \u26ab\ufe0f \ud83d\udd1c \ud83d\udcd0 \ud83c\udff7 \ud83d\udea5 \ud83d\udc46 \ud83c\udfc3\u200d\u2642 \ud83d\ude45 \ud83c\udfe7 \ud83d\udcaf, \u2934\ufe0f \ud83d\udc48 \ud83d\udcaf \ud83d\udd1c \ud83d\udc0c \u21a9\ufe0f \u26ab\ufe0f \ud83d\udd1c \u2714\ufe0f \u231b \ud83c\udff7 \ud83d\udcd0 \u23ed \ud83d\udc86\u200d\u2642 \ud83d\udcaa \ud83c\udfc3 \ud83d\udd2c \ud83c\udf55 \ud83d\udcdf.</p> <p>\ud83d\udc48 \u26ab\ufe0f\u2754 \ud83d\udc65 \ud83d\udd1c \u274e, \u27a1\ufe0f \ud83d\udcd0 \ud83c\udff7 \u23ed \ud83d\udce8 \ud83c\udf75, \u270b\ufe0f \ud83d\udd74 \u25b6\ufe0f\ufe0f \u23ed \ud83c\ude38 \u25b6\ufe0f \ud83d\udce8 \ud83d\udce8, \ud83d\udeab \u23ea \ud83d\udcdf \u2796 \ud83d\udcd0.</p>"},{"location":"advanced/events/#_3","title":"\ud83d\udd06","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udd2c \ud83d\udc49 \ud83d\udd74 &amp; \ud83e\udd2b \u269b \u2699\ufe0f <code>lifespan</code> \ud83d\udd22 <code>ReadyAPI</code> \ud83d\udcf1, &amp; \"\ud83d\udd11 \ud83d\udc68\u200d\ud83d\udcbc\" (\ud83d\udc64 \ud83d\udd1c \ud83c\udfa6 \ud83d\udc46 \u26ab\ufe0f\u2754 \ud83d\udc48 \ud83e\udd48).</p> <p>\u27a1\ufe0f \u25b6\ufe0f \u23ee\ufe0f \ud83d\uddbc &amp; \u2934\ufe0f \ud83d\udc40 \u26ab\ufe0f \u2139.</p> <p>\ud83d\udc65 \u270d \ud83d\udd01 \ud83d\udd22 <code>lifespan()</code> \u23ee\ufe0f <code>yield</code> \ud83d\udc96 \ud83d\udc49:</p> Python 3.8+ <pre><code>from contextlib import asynccontextmanager\n\nfrom readyapi import ReadyAPI\n\n\ndef fake_answer_to_everything_ml_model(x: float):\n    return x * 42\n\n\nml_models = {}\n\n\n@asynccontextmanager\nasync def lifespan(app: ReadyAPI):\n    # Load the ML model\n    ml_models[\"answer_to_everything\"] = fake_answer_to_everything_ml_model\n    yield\n    # Clean up the ML models and release the resources\n    ml_models.clear()\n\n\napp = ReadyAPI(lifespan=lifespan)\n\n\n@app.get(\"/predict\")\nasync def predict(x: float):\n    result = ml_models[\"answer_to_everything\"](x)\n    return {\"result\": result}\n</code></pre> <p>\ud83d\udce5 \ud83d\udc65 \u2696 \ud83d\ude25 \ud83d\udd74 \ud83d\udee0\ufe0f \ud83d\ude9a \ud83c\udff7 \ud83d\udeae (\u274c) \ud83c\udff7 \ud83d\udd22 \ud83d\udcd6 \u23ee\ufe0f \ud83c\udfb0 \ud83c\udfeb \ud83c\udff7 \u23ed <code>yield</code>. \ud83d\udc49 \ud83d\udcdf \ud83d\udd1c \ud83d\udee0\ufe0f \u23ed \ud83c\ude38 \u25b6\ufe0f \u270a \ud83d\udce8, \u23ee\ufe0f \ud83d\udd74.</p> <p>&amp; \u2934\ufe0f, \u25b6\ufe0f\ufe0f \u23ee\ufe0f <code>yield</code>, \ud83d\udc65 \ud83d\ude9a \ud83c\udff7. \ud83d\udc49 \ud83d\udcdf \ud83d\udd1c \ud83d\udee0\ufe0f \u23ee\ufe0f \ud83c\ude38 \ud83c\udfc1 \ud83d\ude9a \ud83d\udce8, \u25b6\ufe0f\ufe0f \u23ed \ud83e\udd2b. \ud83d\udc49 \ud83d\udcaa, \ud83d\uddbc, \ud83d\ude80 \u2139 \ud83d\udc96 \ud83d\udcbe \u2696\ufe0f \ud83d\udcbb.</p> <p>Tip</p> <p><code>shutdown</code> \ud83d\udd1c \ud83d\udd28 \ud83d\udd50\u2754 \ud83d\udc46 \u26d4\ufe0f \ud83c\ude38.</p> <p>\ud83c\udfb2 \ud83d\udc46 \ud83d\udcaa \u25b6\ufe0f \ud83c\udd95 \u23ec, \u2696\ufe0f \ud83d\udc46 \ud83e\udd1a \ud83c\udfa1 \ud83c\udfc3 \u26ab\ufe0f. \ud83e\udd37</p>"},{"location":"advanced/events/#_4","title":"\ud83d\udd06 \ud83d\udd22","text":"<p>\ud83e\udd47 \ud83d\udc5c \ud83d\udc40, \ud83d\udc48 \ud83d\udc65 \u2696 \ud83d\udd01 \ud83d\udd22 \u23ee\ufe0f <code>yield</code>. \ud83d\udc49 \ud83d\udcf6 \ud83c\udf8f \ud83d\udd17 \u23ee\ufe0f <code>yield</code>.</p> Python 3.8+ <pre><code>from contextlib import asynccontextmanager\n\nfrom readyapi import ReadyAPI\n\n\ndef fake_answer_to_everything_ml_model(x: float):\n    return x * 42\n\n\nml_models = {}\n\n\n@asynccontextmanager\nasync def lifespan(app: ReadyAPI):\n    # Load the ML model\n    ml_models[\"answer_to_everything\"] = fake_answer_to_everything_ml_model\n    yield\n    # Clean up the ML models and release the resources\n    ml_models.clear()\n\n\napp = ReadyAPI(lifespan=lifespan)\n\n\n@app.get(\"/predict\")\nasync def predict(x: float):\n    result = ml_models[\"answer_to_everything\"](x)\n    return {\"result\": result}\n</code></pre> <p>\ud83e\udd47 \ud83c\udf55 \ud83d\udd22, \u23ed <code>yield</code>, \ud83d\udd1c \ud83d\udee0\ufe0f \u23ed \ud83c\ude38 \u25b6\ufe0f.</p> <p>&amp; \ud83c\udf55 \u23ee\ufe0f <code>yield</code> \ud83d\udd1c \ud83d\udee0\ufe0f \u23ee\ufe0f \ud83c\ude38 \u2714\ufe0f \ud83c\udfc1.</p>"},{"location":"advanced/events/#_5","title":"\ud83d\udd01 \ud83d\udd11 \ud83d\udc68\u200d\ud83d\udcbc","text":"<p>\ud83d\udea5 \ud83d\udc46 \u2705, \ud83d\udd22 \ud83c\udf80 \u23ee\ufe0f <code>@asynccontextmanager</code>.</p> <p>\ud83d\udc48 \ud83d\udddc \ud83d\udd22 \ud83d\udd18 \ud83d\udd73 \ud83e\udd19 \"\ud83d\udd01 \ud83d\udd11 \ud83d\udc68\u200d\ud83d\udcbc\".</p> Python 3.8+ <pre><code>from contextlib import asynccontextmanager\n\nfrom readyapi import ReadyAPI\n\n\ndef fake_answer_to_everything_ml_model(x: float):\n    return x * 42\n\n\nml_models = {}\n\n\n@asynccontextmanager\nasync def lifespan(app: ReadyAPI):\n    # Load the ML model\n    ml_models[\"answer_to_everything\"] = fake_answer_to_everything_ml_model\n    yield\n    # Clean up the ML models and release the resources\n    ml_models.clear()\n\n\napp = ReadyAPI(lifespan=lifespan)\n\n\n@app.get(\"/predict\")\nasync def predict(x: float):\n    result = ml_models[\"answer_to_everything\"](x)\n    return {\"result\": result}\n</code></pre> <p>\ud83d\udd11 \ud83d\udc68\u200d\ud83d\udcbc \ud83d\udc0d \ud83d\udd73 \ud83d\udc48 \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>with</code> \ud83d\udcc4, \ud83d\uddbc, <code>open()</code> \ud83d\udcaa \u2699\ufe0f \ud83d\udd11 \ud83d\udc68\u200d\ud83d\udcbc:</p> <pre><code>with open(\"file.txt\") as file:\n    file.read()\n</code></pre> <p>\u23ee\ufe0f \u23ec \ud83d\udc0d, \ud83d\udce4 \ud83d\udd01 \ud83d\udd11 \ud83d\udc68\u200d\ud83d\udcbc. \ud83d\udc46 \ud83d\udd1c \u2699\ufe0f \u26ab\ufe0f \u23ee\ufe0f <code>async with</code>:</p> <pre><code>async with lifespan(app):\n    await do_stuff()\n</code></pre> <p>\ud83d\udd50\u2754 \ud83d\udc46 \u270d \ud83d\udd11 \ud83d\udc68\u200d\ud83d\udcbc \u2696\ufe0f \ud83d\udd01 \ud83d\udd11 \ud83d\udc68\u200d\ud83d\udcbc \ud83d\udc96 \ud83d\udd1b, \u26ab\ufe0f\u2754 \u26ab\ufe0f \ud83d\udd28 \ud83d\udc48, \u23ed \ud83d\udeec <code>with</code> \ud83c\udf6b, \u26ab\ufe0f \ud83d\udd1c \ud83d\udee0\ufe0f \ud83d\udcdf \u23ed <code>yield</code>, &amp; \u23ee\ufe0f \u274e <code>with</code> \ud83c\udf6b, \u26ab\ufe0f \ud83d\udd1c \ud83d\udee0\ufe0f \ud83d\udcdf \u23ee\ufe0f <code>yield</code>.</p> <p>\ud83d\udc46 \ud83d\udcdf \ud83d\uddbc \ud83d\udd1b, \ud83d\udc65 \ud83d\udeab \u2699\ufe0f \u26ab\ufe0f \ud83d\udd17, \u270b\ufe0f \ud83d\udc65 \ud83d\udeb6\u200d\u2640\ufe0f \u26ab\ufe0f ReadyAPI \u26ab\ufe0f \u2699\ufe0f \u26ab\ufe0f.</p> <p><code>lifespan</code> \ud83d\udd22 <code>ReadyAPI</code> \ud83d\udcf1 \u270a \ud83d\udd01 \ud83d\udd11 \ud83d\udc68\u200d\ud83d\udcbc, \ud83d\udc65 \ud83d\udcaa \ud83d\udeb6\u200d\u2640\ufe0f \ud83d\udc46 \ud83c\udd95 <code>lifespan</code> \ud83d\udd01 \ud83d\udd11 \ud83d\udc68\u200d\ud83d\udcbc \u26ab\ufe0f.</p> Python 3.8+ <pre><code>from contextlib import asynccontextmanager\n\nfrom readyapi import ReadyAPI\n\n\ndef fake_answer_to_everything_ml_model(x: float):\n    return x * 42\n\n\nml_models = {}\n\n\n@asynccontextmanager\nasync def lifespan(app: ReadyAPI):\n    # Load the ML model\n    ml_models[\"answer_to_everything\"] = fake_answer_to_everything_ml_model\n    yield\n    # Clean up the ML models and release the resources\n    ml_models.clear()\n\n\napp = ReadyAPI(lifespan=lifespan)\n\n\n@app.get(\"/predict\")\nasync def predict(x: float):\n    result = ml_models[\"answer_to_everything\"](x)\n    return {\"result\": result}\n</code></pre>"},{"location":"advanced/events/#_6","title":"\ud83c\udf9b \ud83c\udf89 (\ud83d\ude22)","text":"<p>Warning</p> <p>\ud83d\udc4d \ud83c\udf0c \ud83c\udf75 \ud83d\udd74 &amp; \ud83e\udd2b \u2699\ufe0f <code>lifespan</code> \ud83d\udd22 <code>ReadyAPI</code> \ud83d\udcf1 \ud83d\udd2c \ud83d\udd1b.</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83c\udfb2 \ud83d\udeb6 \ud83d\udc49 \ud83c\udf55.</p> <p>\ud83d\udce4 \ud83c\udf9b \ud83c\udf0c \ud83d\udd2c \ud83d\udc49 \u269b \ud83d\udee0\ufe0f \u23ee\ufe0f \ud83d\udd74 &amp; \u23ee\ufe0f \ud83e\udd2b.</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udd2c \ud83c\udf89 \ud83d\udc15\u200d\ud83e\uddba (\ud83d\udd22) \ud83d\udc48 \ud83d\udcaa \ud83d\udee0\ufe0f \u23ed \ud83c\ude38 \u25b6\ufe0f \ud83c\udd99, \u2696\ufe0f \ud83d\udd50\u2754 \ud83c\ude38 \ud83e\udd2b \ud83d\udd3d.</p> <p>\ud83d\udc6b \ud83d\udd22 \ud83d\udcaa \ud83d\udce3 \u23ee\ufe0f <code>async def</code> \u2696\ufe0f \ud83d\ude10 <code>def</code>.</p>"},{"location":"advanced/events/#startup","title":"<code>startup</code> \ud83c\udf89","text":"<p>\ud83d\udeae \ud83d\udd22 \ud83d\udc48 \ud83d\udd1c \ud83c\udfc3 \u23ed \ud83c\ude38 \u25b6\ufe0f, \ud83d\udce3 \u26ab\ufe0f \u23ee\ufe0f \ud83c\udf89 <code>\"startup\"</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\nitems = {}\n\n\n@app.on_event(\"startup\")\nasync def startup_event():\n    items[\"foo\"] = {\"name\": \"Fighters\"}\n    items[\"bar\"] = {\"name\": \"Tenders\"}\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(item_id: str):\n    return items[item_id]\n</code></pre> <p>\ud83d\udc49 \ud83d\udcbc, <code>startup</code> \ud83c\udf89 \ud83d\udc15\u200d\ud83e\uddba \ud83d\udd22 \ud83d\udd1c \ud83d\udd22 \ud83c\udfec \"\ud83d\udcbd\" ( <code>dict</code>) \u23ee\ufe0f \ud83d\udcb2.</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udeae \ud83c\udf05 \ud83c\udf18 1\ufe0f\u20e3 \ud83c\udf89 \ud83d\udc15\u200d\ud83e\uddba \ud83d\udd22.</p> <p>&amp; \ud83d\udc46 \ud83c\ude38 \ud83c\udfc6 \ud83d\udeab \u25b6\ufe0f \ud83d\udce8 \ud83d\udce8 \u23ed \ud83c\udf10 <code>startup</code> \ud83c\udf89 \ud83d\udc15\u200d\ud83e\uddba \u2714\ufe0f \ud83c\udfc1.</p>"},{"location":"advanced/events/#shutdown","title":"<code>shutdown</code> \ud83c\udf89","text":"<p>\ud83d\udeae \ud83d\udd22 \ud83d\udc48 \ud83d\udd1c \ud83c\udfc3 \ud83d\udd50\u2754 \ud83c\ude38 \ud83e\udd2b \ud83d\udd3d, \ud83d\udce3 \u26ab\ufe0f \u23ee\ufe0f \ud83c\udf89 <code>\"shutdown\"</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.on_event(\"shutdown\")\ndef shutdown_event():\n    with open(\"log.txt\", mode=\"a\") as log:\n        log.write(\"Application shutdown\")\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n</code></pre> <p>\ud83d\udce5, <code>shutdown</code> \ud83c\udf89 \ud83d\udc15\u200d\ud83e\uddba \ud83d\udd22 \ud83d\udd1c \u270d \u270d \u23f8 <code>\"Application shutdown\"</code> \ud83d\udcc1 <code>log.txt</code>.</p> <p>Info</p> <p><code>open()</code> \ud83d\udd22, <code>mode=\"a\"</code> \u26d3 \"\ud83c\udfbb\",, \u23f8 \ud83d\udd1c \ud83d\udeae \u23ee\ufe0f \u26ab\ufe0f\u2754 \ud83d\udd1b \ud83d\udc48 \ud83d\udcc1, \ud83c\udf75 \ud83d\udcc1 \u23ee\ufe0f \ud83c\udf9a.</p> <p>Tip</p> <p>\ud83d\udc40 \ud83d\udc48 \ud83d\udc49 \ud83d\udcbc \ud83d\udc65 \u2699\ufe0f \ud83d\udc29 \ud83d\udc0d <code>open()</code> \ud83d\udd22 \ud83d\udc48 \ud83d\udd17 \u23ee\ufe0f \ud83d\udcc1.</p> <p>, \u26ab\ufe0f \ud83d\udd0c \ud83d\udc64/\ud83c\udd7e (\ud83d\udd22/\ud83d\udd22), \ud83d\udc48 \ud83d\ude9a \"\u231b\" \ud83d\udc5c \u270d \ud83d\udcbe.</p> <p>\u270b\ufe0f <code>open()</code> \ud83d\udeab \u2699\ufe0f <code>async</code> &amp; <code>await</code>.</p> <p>, \ud83d\udc65 \ud83d\udce3 \ud83c\udf89 \ud83d\udc15\u200d\ud83e\uddba \ud83d\udd22 \u23ee\ufe0f \ud83d\udc29 <code>def</code> \u21a9\ufe0f <code>async def</code>.</p> <p>Info</p> <p>\ud83d\udc46 \ud83d\udcaa \u270d \ud83c\udf05 \ud83d\udd03 \ud83d\udc6b \ud83c\udf89 \ud83d\udc15\u200d\ud83e\uddba \ud83d\udc83 \ud83c\udf89' \ud83e\ude7a.</p>"},{"location":"advanced/events/#startup-shutdown","title":"<code>startup</code> &amp; <code>shutdown</code> \ud83d\udc6f\u200d\u2642\ufe0f","text":"<p>\ud83d\udce4 \u2195 \ud83e\udd1e \ud83d\udc48 \u269b \ud83d\udc46 \ud83d\udd74 &amp; \ud83e\udd2b \ud83d\udd17, \ud83d\udc46 \ud83d\udcaa \ud83d\udc9a \u25b6\ufe0f \ud83d\udd73 &amp; \u2934\ufe0f \ud83c\udfc1 \u26ab\ufe0f, \ud83d\udcce \u2139 &amp; \u2934\ufe0f \ud83d\ude80 \u26ab\ufe0f, \u2652\ufe0f.</p> <p>\ud83d\udd28 \ud83d\udc48 \ud83d\udc7d \ud83d\udd22 \ud83d\udc48 \ud83d\udeab \ud83d\udcb0 \u269b \u2696\ufe0f \ud83d\udd22 \ud83d\udc6f\u200d\u2642\ufe0f \ud83c\udf05 \u26a0 \ud83d\udc46 \ud83d\udd1c \ud83d\udcaa \ud83c\udfea \ud83d\udcb2 \ud83c\udf10 \ud83d\udd22 \u2696\ufe0f \ud83c\udf8f \ud83c\udfb1.</p> <p>\u21a9\ufe0f \ud83d\udc48, \u26ab\ufe0f \ud83d\udd1c \ud83d\udc4d \u21a9\ufe0f \u2699\ufe0f <code>lifespan</code> \ud83d\udd2c \ud83d\udd1b.</p>"},{"location":"advanced/events/#i","title":"\ud83d\udce1 \u2139","text":"<p>\ud83d\udce1 \u2139 \ud83d\ude1f \ud83e\udd13. \ud83d\udc76</p> <p>\ud83d\udd18, \ud83d\udd2b \ud83d\udce1 \ud83d\udd27, \ud83d\udc49 \ud83c\udf55 \ud83d\udd06 \ud83d\udee0\ufe0f, &amp; \u26ab\ufe0f \ud83d\udd2c \ud83c\udf89 \ud83e\udd19 <code>startup</code> &amp; <code>shutdown</code>.</p>"},{"location":"advanced/events/#_7","title":"\ud83c\udfa7 \ud83c\ude38","text":"<p>\ud83d\udc76 \u2714\ufe0f \ud83e\udd2f \ud83d\udc48 \ud83d\udc6b \ud83d\udd06 \ud83c\udf89 (\ud83d\udd74 &amp; \ud83e\udd2b) \ud83d\udd1c \ud83d\udd74 \ud83d\udee0\ufe0f \ud83d\udc51 \ud83c\ude38, \ud83d\udeab \ud83c\udfa7 \ud83c\ude38 - \ud83d\uddfb.</p>"},{"location":"advanced/generate-clients/","title":"\ud83c\udfd7 \ud83d\udc69\u200d\ud83d\udcbb","text":"<p>ReadyAPI \u2693\ufe0f \ud83d\udd1b \ud83d\uddc4 \ud83d\udd27, \ud83d\udc46 \ud83e\udd1a \ud83c\udfe7 \ud83d\udd17 \u23ee\ufe0f \ud83d\udcda \ud83e\uddf0, \ud83d\udd0c \ud83c\udfe7 \ud83d\udee0\ufe0f \ud83e\ude7a (\ud83d\ude9a \ud83e\udd81 \ud83c\udf9a).</p> <p>1\ufe0f\u20e3 \ud83c\udfaf \ud83d\udcc8 \ud83d\udc48 \ud83d\udeab \ud83c\udfaf \u2b50 \ud83d\udc48 \ud83d\udc46 \ud83d\udcaa \ud83c\udfd7 \ud83d\udc69\u200d\ud83d\udcbb (\ud83d\udd63 \ud83e\udd19 \ud83d\udcf1 ) \ud83d\udc46 \ud83d\udee0\ufe0f, \ud83d\udcda \ud83c\udf8f \ud83d\udee0\ufe0f \ud83c\uddea\ud83c\uddf8.</p>"},{"location":"advanced/generate-clients/#_2","title":"\ud83d\uddc4 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\ude82","text":"<p>\ud83d\udce4 \ud83d\udcda \ud83e\uddf0 \ud83c\udfd7 \ud83d\udc69\u200d\ud83d\udcbb \u26aa\ufe0f\u27a1\ufe0f \ud83d\uddc4.</p> <p>\u26a0 \ud83e\uddf0 \ud83d\uddc4 \ud83d\ude82.</p> <p>\ud83d\udea5 \ud83d\udc46 \ud83c\udfd7 \ud83d\udd78, \ud83d\udcf6 \ud83d\ude0c \ud83c\udf9b \ud83d\uddc4-\ud83d\udcd5-\ud83c\udde6\ud83c\uddea.</p>"},{"location":"advanced/generate-clients/#_3","title":"\ud83c\udfd7 \ud83d\udcd5 \ud83d\udd78 \ud83d\udc69\u200d\ud83d\udcbb","text":"<p>\u27a1\ufe0f \u25b6\ufe0f \u23ee\ufe0f \ud83d\ude45 ReadyAPI \ud83c\ude38:</p> Python 3.8+ <pre><code>from typing import List\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n\nclass ResponseMessage(BaseModel):\n    message: str\n\n\n@app.post(\"/items/\", response_model=ResponseMessage)\nasync def create_item(item: Item):\n    return {\"message\": \"item received\"}\n\n\n@app.get(\"/items/\", response_model=List[Item])\nasync def get_items():\n    return [\n        {\"name\": \"Plumbus\", \"price\": 3},\n        {\"name\": \"Portal Gun\", \"price\": 9001},\n    ]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n\nclass ResponseMessage(BaseModel):\n    message: str\n\n\n@app.post(\"/items/\", response_model=ResponseMessage)\nasync def create_item(item: Item):\n    return {\"message\": \"item received\"}\n\n\n@app.get(\"/items/\", response_model=list[Item])\nasync def get_items():\n    return [\n        {\"name\": \"Plumbus\", \"price\": 3},\n        {\"name\": \"Portal Gun\", \"price\": 9001},\n    ]\n</code></pre> <p>\ud83d\udc40 \ud83d\udc48 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd2c \ud83c\udff7 \ud83d\udc6b \u2699\ufe0f \ud83d\udce8 \ud83d\ude80 &amp; \ud83d\udce8 \ud83d\ude80, \u2699\ufe0f \ud83c\udff7 <code>Item</code> &amp; <code>ResponseMessage</code>.</p>"},{"location":"advanced/generate-clients/#_4","title":"\ud83d\udee0\ufe0f \ud83e\ude7a","text":"<p>\ud83d\udea5 \ud83d\udc46 \ud83d\udeb6 \ud83d\udee0\ufe0f \ud83e\ude7a, \ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \ud83d\udc48 \u26ab\ufe0f \u2714\ufe0f \ud83d\udd17 \ud83d\udcca \ud83d\udce8 \ud83d\udce8 &amp; \ud83d\udce8 \ud83d\udce8:</p> <p></p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udc40 \ud83d\udc48 \ud83d\udd17 \u21a9\ufe0f \ud83d\udc6b \ud83d\udce3 \u23ee\ufe0f \ud83c\udff7 \ud83d\udcf1.</p> <p>\ud83d\udc48 \u2139 \ud83d\udcaa \ud83d\udcf1 \ud83d\uddc4 \ud83d\udd17, &amp; \u2934\ufe0f \ud83c\udfa6 \ud83d\udee0\ufe0f \ud83e\ude7a (\ud83e\udd81 \ud83c\udf9a).</p> <p>&amp; \ud83d\udc48 \ud83c\udf8f \u2139 \u26aa\ufe0f\u27a1\ufe0f \ud83c\udff7 \ud83d\udc48 \ud83d\udd0c \ud83d\uddc4 \u26ab\ufe0f\u2754 \ud83d\udcaa \u2699\ufe0f \ud83c\udfd7 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udcdf.</p>"},{"location":"advanced/generate-clients/#_5","title":"\ud83c\udfd7 \ud83d\udcd5 \ud83d\udc69\u200d\ud83d\udcbb","text":"<p>\ud83d\udd1c \ud83d\udc48 \ud83d\udc65 \u2714\ufe0f \ud83d\udcf1 \u23ee\ufe0f \ud83c\udff7, \ud83d\udc65 \ud83d\udcaa \ud83c\udfd7 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udcdf \ud83d\udd78.</p>"},{"location":"advanced/generate-clients/#openapi-ts","title":"\u274e <code>openapi-ts</code>","text":"<p>\ud83d\udc46 \ud83d\udcaa \u274e <code>openapi-ts</code> \ud83d\udc46 \ud83d\udd78 \ud83d\udcdf \u23ee\ufe0f:</p> <pre><code>$ npm install @hey-api/openapi-ts --save-dev\n\n---&gt; 100%\n</code></pre>"},{"location":"advanced/generate-clients/#_6","title":"\ud83c\udfd7 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udcdf","text":"<p>\ud83c\udfd7 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udcdf \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83d\udccb \u23f8 \ud83c\ude38 <code>openapi-ts</code> \ud83d\udc48 \ud83d\udd1c \ud83d\udd1c \u274e.</p> <p>\u21a9\ufe0f \u26ab\ufe0f \u274e \ud83c\udde7\ud83c\uddff \ud83c\udfd7, \ud83d\udc46 \ud83c\udfb2 \ud83d\udeab\ud83d\udd1c \ud83d\udcaa \ud83e\udd19 \ud83d\udc48 \ud83d\udccb \ud83d\udd17, \u270b\ufe0f \ud83d\udc46 \ud83d\udd1c \ud83d\udeae \u26ab\ufe0f \ud83d\udd1b \ud83d\udc46 <code>package.json</code> \ud83d\udcc1.</p> <p>\u26ab\ufe0f \ud83d\udcaa \ud83d\udc40 \ud83d\udc96 \ud83d\udc49:</p> <pre><code>{\n  \"name\": \"frontend-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"generate-client\": \"openapi-ts --input http://localhost:8000/openapi.json --output ./src/client --client axios\"\n  },\n  \"author\": \"\",\n  \"license\": \"\",\n  \"devDependencies\": {\n    \"@hey-api/openapi-ts\": \"^0.27.38\",\n    \"typescript\": \"^4.6.2\"\n  }\n}\n</code></pre> <p>\u23ee\ufe0f \u2714\ufe0f \ud83d\udc48 \u2615 <code>generate-client</code> \u270d \ud83d\udce4, \ud83d\udc46 \ud83d\udcaa \ud83c\udfc3 \u26ab\ufe0f \u23ee\ufe0f:</p> <pre><code>$ npm run generate-client\n\nfrontend-app@1.0.0 generate-client /home/user/code/frontend-app\n&gt; openapi-ts --input http://localhost:8000/openapi.json --output ./src/client --client axios\n</code></pre> <p>\ud83d\udc48 \ud83d\udccb \ud83d\udd1c \ud83c\udfd7 \ud83d\udcdf <code>./src/client</code> &amp; \ud83d\udd1c \u2699\ufe0f <code>axios</code> (\ud83d\udd78 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\uddc3) \ud83d\udd18.</p>"},{"location":"advanced/generate-clients/#_7","title":"\ud83d\udd04 \ud83d\udc45 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udcdf","text":"<p>\ud83d\udd1c \ud83d\udc46 \ud83d\udcaa \ud83d\uddc4 &amp; \u2699\ufe0f \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udcdf, \u26ab\ufe0f \ud83d\udcaa \ud83d\udc40 \ud83d\udc96 \ud83d\udc49, \ud83d\udc40 \ud83d\udc48 \ud83d\udc46 \ud83e\udd1a \u270d \ud83d\udc69\u200d\ud83d\udd2c:</p> <p></p> <p>\ud83d\udc46 \ud83d\udd1c \ud83e\udd1a \u270d \ud83d\ude80 \ud83d\udce8:</p> <p></p> <p>Tip</p> <p>\ud83d\udc40 \u270d <code>name</code> &amp; <code>price</code>, \ud83d\udc48 \ud83d\udd2c ReadyAPI \ud83c\ude38, <code>Item</code> \ud83c\udff7.</p> <p>\ud83d\udc46 \ud83d\udd1c \u2714\ufe0f \u23f8 \u274c \ud83d\udcca \ud83d\udc48 \ud83d\udc46 \ud83d\udce8:</p> <p></p> <p>\ud83d\udce8 \ud83c\udf9a \ud83d\udd1c \u2714\ufe0f \u270d:</p> <p></p>"},{"location":"advanced/generate-clients/#readyapi","title":"ReadyAPI \ud83d\udcf1 \u23ee\ufe0f \ud83d\udd16","text":"<p>\ud83d\udcda \ud83d\udcbc \ud83d\udc46 ReadyAPI \ud83d\udcf1 \ud83d\udd1c \ud83e\udd8f, &amp; \ud83d\udc46 \ud83d\udd1c \ud83c\udfb2 \u2699\ufe0f \ud83d\udd16 \ud83c\udf8f \ud83c\udf8f \ud83d\udc6a \u27a1 \ud83d\udee0\ufe0f.</p> <p>\ud83d\uddbc, \ud83d\udc46 \ud83d\udcaa \u2714\ufe0f \ud83d\udcc4 \ud83c\udfec &amp; \u27951\ufe0f\u20e3 \ud83d\udcc4 \ud83d\udc69\u200d\ud83d\udcbb, &amp; \ud83d\udc6b \ud83d\udcaa \ud83d\udc7d \ud83d\udd16:</p> Python 3.8+ <pre><code>from typing import List\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n\nclass ResponseMessage(BaseModel):\n    message: str\n\n\nclass User(BaseModel):\n    username: str\n    email: str\n\n\n@app.post(\"/items/\", response_model=ResponseMessage, tags=[\"items\"])\nasync def create_item(item: Item):\n    return {\"message\": \"Item received\"}\n\n\n@app.get(\"/items/\", response_model=List[Item], tags=[\"items\"])\nasync def get_items():\n    return [\n        {\"name\": \"Plumbus\", \"price\": 3},\n        {\"name\": \"Portal Gun\", \"price\": 9001},\n    ]\n\n\n@app.post(\"/users/\", response_model=ResponseMessage, tags=[\"users\"])\nasync def create_user(user: User):\n    return {\"message\": \"User received\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n\nclass ResponseMessage(BaseModel):\n    message: str\n\n\nclass User(BaseModel):\n    username: str\n    email: str\n\n\n@app.post(\"/items/\", response_model=ResponseMessage, tags=[\"items\"])\nasync def create_item(item: Item):\n    return {\"message\": \"Item received\"}\n\n\n@app.get(\"/items/\", response_model=list[Item], tags=[\"items\"])\nasync def get_items():\n    return [\n        {\"name\": \"Plumbus\", \"price\": 3},\n        {\"name\": \"Portal Gun\", \"price\": 9001},\n    ]\n\n\n@app.post(\"/users/\", response_model=ResponseMessage, tags=[\"users\"])\nasync def create_user(user: User):\n    return {\"message\": \"User received\"}\n</code></pre>"},{"location":"advanced/generate-clients/#_8","title":"\ud83c\udfd7 \ud83d\udcd5 \ud83d\udc69\u200d\ud83d\udcbb \u23ee\ufe0f \ud83d\udd16","text":"<p>\ud83d\udea5 \ud83d\udc46 \ud83c\udfd7 \ud83d\udc69\u200d\ud83d\udcbb ReadyAPI \ud83d\udcf1 \u2699\ufe0f \ud83d\udd16, \u26ab\ufe0f \ud83d\udd1c \ud83d\udece \ud83c\udf8f \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udcdf \u2693\ufe0f \ud83d\udd1b \ud83d\udd16.</p> <p>\ud83d\udc49 \ud83c\udf0c \ud83d\udc46 \ud83d\udd1c \ud83d\udcaa \u2714\ufe0f \ud83d\udc5c \u2714 &amp; \ud83d\udc6a \u2611 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udcdf:</p> <p></p> <p>\ud83d\udc49 \ud83d\udcbc \ud83d\udc46 \u2714\ufe0f:</p> <ul> <li><code>ItemsService</code></li> <li><code>UsersService</code></li> </ul>"},{"location":"advanced/generate-clients/#_9","title":"\ud83d\udc69\u200d\ud83d\udcbb \ud83d\udc69\u200d\ud83d\udd2c \ud83d\udcdb","text":"<p>\u25b6\ufe0f\ufe0f \ud83d\udd1c \ud83c\udfd7 \ud83d\udc69\u200d\ud83d\udd2c \ud83d\udcdb \ud83d\udc96 <code>createItemItemsPost</code> \ud83d\udeab \ud83d\udc40 \ud83d\udcf6 \ud83e\uddf9:</p> <pre><code>ItemsService.createItemItemsPost({name: \"Plumbus\", price: 5})\n</code></pre> <p>...\ud83d\udc48 \u21a9\ufe0f \ud83d\udc69\u200d\ud83d\udcbb \ud83d\ude82 \u2699\ufe0f \ud83d\uddc4 \ud83d\udd17 \ud83d\udee0\ufe0f \ud83c\udd94 \ud83d\udd20 \u27a1 \ud83d\udee0\ufe0f.</p> <p>\ud83d\uddc4 \ud83d\ude9a \ud83d\udc48 \ud83d\udd20 \ud83d\udee0\ufe0f \ud83c\udd94 \ud83d\ude0d \ud83e\udd2d \ud83c\udf10 \u27a1 \ud83d\udee0\ufe0f, ReadyAPI \u2699\ufe0f \ud83d\udd22 \ud83d\udcdb, \u27a1, &amp; \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udc69\u200d\ud83d\udd2c/\ud83d\udee0\ufe0f \ud83c\udfd7 \ud83d\udc48 \ud83d\udee0\ufe0f \ud83c\udd94, \u21a9\ufe0f \ud83d\udc48 \ud83c\udf0c \u26ab\ufe0f \ud83d\udcaa \u2692 \ud83d\udcad \ud83d\udc48 \ud83d\udee0\ufe0f \ud83c\udd94 \ud83d\ude0d.</p> <p>\u270b\ufe0f \ud83d\udc64 \ud83d\udd1c \ud83c\udfa6 \ud83d\udc46 \u2754 \ud83d\udcc9 \ud83d\udc48 \u23ed. \ud83d\udc76</p>"},{"location":"advanced/generate-clients/#_10","title":"\ud83d\udec3 \ud83d\udee0\ufe0f \ud83c\udd94 &amp; \ud83d\udc4d \ud83d\udc69\u200d\ud83d\udd2c \ud83d\udcdb","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udd00 \ud83c\udf0c \ud83d\udc6b \ud83d\udee0\ufe0f \ud83c\udd94 \ud83c\udfd7 \u2692 \ud83d\udc6b \ud83d\ude45 &amp; \u2714\ufe0f \ud83d\ude45 \ud83d\udc69\u200d\ud83d\udd2c \ud83d\udcdb \ud83d\udc69\u200d\ud83d\udcbb.</p> <p>\ud83d\udc49 \ud83d\udcbc \ud83d\udc46 \ud83d\udd1c \u2714\ufe0f \ud83d\ude9a \ud83d\udc48 \ud83d\udd20 \ud83d\udee0\ufe0f \ud83c\udd94 \ud83d\ude0d \ud83c\udf8f \ud83c\udf0c.</p> <p>\ud83d\uddbc, \ud83d\udc46 \ud83d\udcaa \u2692 \ud83d\udcad \ud83d\udc48 \ud83d\udd20 \u27a1 \ud83d\udee0\ufe0f \u2714\ufe0f \ud83d\udd16, &amp; \u2934\ufe0f \ud83c\udfd7 \ud83d\udee0\ufe0f \ud83c\udd94 \u2693\ufe0f \ud83d\udd1b \ud83d\udd16 &amp; \u27a1 \ud83d\udee0\ufe0f \ud83d\udcdb (\ud83d\udd22 \ud83d\udcdb).</p>"},{"location":"advanced/generate-clients/#_11","title":"\ud83d\udec3 \ud83c\udfd7 \ud83d\ude0d \ud83c\udd94 \ud83d\udd22","text":"<p>ReadyAPI \u2699\ufe0f \ud83d\ude0d \ud83c\udd94 \ud83d\udd20 \u27a1 \ud83d\udee0\ufe0f, \u26ab\ufe0f \u2699\ufe0f \ud83d\udee0\ufe0f \ud83c\udd94 &amp; \ud83d\udcdb \ud83d\ude46 \ud83d\udcaa \ud83d\udec3 \ud83c\udff7, \ud83d\udce8 \u2696\ufe0f \ud83d\udce8.</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udec3 \ud83d\udc48 \ud83d\udd22. \u26ab\ufe0f \u270a <code>APIRoute</code> &amp; \ud83d\udd22 \ud83c\udfbb.</p> <p>\ud83d\uddbc, \ud83d\udce5 \u26ab\ufe0f \u2699\ufe0f \ud83e\udd47 \ud83d\udd16 (\ud83d\udc46 \ud83d\udd1c \ud83c\udfb2 \u2714\ufe0f \ud83d\udd74 1\ufe0f\u20e3 \ud83d\udd16) &amp; \u27a1 \ud83d\udee0\ufe0f \ud83d\udcdb (\ud83d\udd22 \ud83d\udcdb).</p> <p>\ud83d\udc46 \ud83d\udcaa \u2934\ufe0f \ud83d\udeb6\u200d\u2640\ufe0f \ud83d\udc48 \ud83d\udec3 \ud83d\udd22 ReadyAPI <code>generate_unique_id_function</code> \ud83d\udd22:</p> Python 3.8+ <pre><code>from typing import List\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.routing import APIRoute\n\n\ndef custom_generate_unique_id(route: APIRoute):\n    return f\"{route.tags[0]}-{route.name}\"\n\n\napp = ReadyAPI(generate_unique_id_function=custom_generate_unique_id)\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n\nclass ResponseMessage(BaseModel):\n    message: str\n\n\nclass User(BaseModel):\n    username: str\n    email: str\n\n\n@app.post(\"/items/\", response_model=ResponseMessage, tags=[\"items\"])\nasync def create_item(item: Item):\n    return {\"message\": \"Item received\"}\n\n\n@app.get(\"/items/\", response_model=List[Item], tags=[\"items\"])\nasync def get_items():\n    return [\n        {\"name\": \"Plumbus\", \"price\": 3},\n        {\"name\": \"Portal Gun\", \"price\": 9001},\n    ]\n\n\n@app.post(\"/users/\", response_model=ResponseMessage, tags=[\"users\"])\nasync def create_user(user: User):\n    return {\"message\": \"User received\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.routing import APIRoute\n\n\ndef custom_generate_unique_id(route: APIRoute):\n    return f\"{route.tags[0]}-{route.name}\"\n\n\napp = ReadyAPI(generate_unique_id_function=custom_generate_unique_id)\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n\nclass ResponseMessage(BaseModel):\n    message: str\n\n\nclass User(BaseModel):\n    username: str\n    email: str\n\n\n@app.post(\"/items/\", response_model=ResponseMessage, tags=[\"items\"])\nasync def create_item(item: Item):\n    return {\"message\": \"Item received\"}\n\n\n@app.get(\"/items/\", response_model=list[Item], tags=[\"items\"])\nasync def get_items():\n    return [\n        {\"name\": \"Plumbus\", \"price\": 3},\n        {\"name\": \"Portal Gun\", \"price\": 9001},\n    ]\n\n\n@app.post(\"/users/\", response_model=ResponseMessage, tags=[\"users\"])\nasync def create_user(user: User):\n    return {\"message\": \"User received\"}\n</code></pre>"},{"location":"advanced/generate-clients/#_12","title":"\ud83c\udfd7 \ud83d\udcd5 \ud83d\udc69\u200d\ud83d\udcbb \u23ee\ufe0f \ud83d\udec3 \ud83d\udee0\ufe0f \ud83c\udd94","text":"<p>\ud83d\udd1c \ud83d\udea5 \ud83d\udc46 \ud83c\udfd7 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd04, \ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \ud83d\udc48 \u26ab\ufe0f \u2714\ufe0f \ud83d\udcc9 \ud83d\udc69\u200d\ud83d\udd2c \ud83d\udcdb:</p> <p></p> <p>\ud83d\udc46 \ud83d\udc40, \ud83d\udc69\u200d\ud83d\udd2c \ud83d\udcdb \ud83d\udd1c \u2714\ufe0f \ud83d\udd16 &amp; \u2934\ufe0f \ud83d\udd22 \ud83d\udcdb, \ud83d\udd1c \ud83d\udc6b \ud83d\udeab \ud83d\udd0c \u2139 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udcdb \u27a1 &amp; \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udee0\ufe0f.</p>"},{"location":"advanced/generate-clients/#_13","title":"\ud83d\udddc \ud83d\uddc4 \ud83d\udd27 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\ude82","text":"<p>\ud83c\udfd7 \ud83d\udcdf \u2714\ufe0f \u274e \u2139.</p> <p>\ud83d\udc65 \u23ea \ud83d\udcad \ud83d\udc48 \ud83d\udc49 \ud83d\udc69\u200d\ud83d\udd2c \ud83d\udd17 \ud83c\udfec \u21a9\ufe0f \ud83d\udc48 \ud83d\udd24 <code>ItemsService</code> (\u270a \u26aa\ufe0f\u27a1\ufe0f \ud83d\udd16), \u270b\ufe0f \ud83d\udc65 \u2714\ufe0f \ud83d\udcdb \ud83d\udd21 \ud83d\udc69\u200d\ud83d\udd2c \ud83d\udcdb \ud83d\udc81\u200d\u2642\ufe0f. \ud83d\udc76</p> <p>\ud83d\udc65 \ud83d\udd1c \ud83c\udfb2 \ud83d\udc9a \ud83d\udea7 \u26ab\ufe0f \ud83d\uddc4 \ud83c\udfe2, \ud83d\udc48 \ud83d\udd1c \ud83d\ude9a \ud83d\udc48 \ud83d\udee0\ufe0f \ud83c\udd94 \ud83d\ude0d.</p> <p>\u270b\ufe0f \ud83c\udfd7 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udc65 \ud83d\udcaa \ud83d\udd00 \ud83d\uddc4 \ud83d\udee0\ufe0f \ud83c\udd94 \u25b6\ufe0f\ufe0f \u23ed \ud83c\udfed \ud83d\udc69\u200d\ud83d\udcbb, \u2692 \ud83d\udc48 \ud83d\udc69\u200d\ud83d\udd2c \ud83d\udcdb \ud83d\udc4c &amp; \ud83e\uddf9.</p> <p>\ud83d\udc65 \ud83d\udcaa \u23ec \ud83d\uddc4 \ud83c\udfbb \ud83d\udcc1 <code>openapi.json</code> &amp; \u2934\ufe0f \ud83d\udc65 \ud83d\udcaa \u274e \ud83d\udc48 \ud83d\udd21 \ud83d\udd16 \u23ee\ufe0f \u270d \ud83d\udc96 \ud83d\udc49:</p> Python 3.8+ <pre><code>import json\nfrom pathlib import Path\n\nfile_path = Path(\"./openapi.json\")\nopenapi_content = json.loads(file_path.read_text())\n\nfor path_data in openapi_content[\"paths\"].values():\n    for operation in path_data.values():\n        tag = operation[\"tags\"][0]\n        operation_id = operation[\"operationId\"]\n        to_remove = f\"{tag}-\"\n        new_operation_id = operation_id[len(to_remove) :]\n        operation[\"operationId\"] = new_operation_id\n\nfile_path.write_text(json.dumps(openapi_content))\n</code></pre> <p>\u23ee\ufe0f \ud83d\udc48, \ud83d\udee0\ufe0f \ud83c\udd94 \ud83d\udd1c \ud83d\udcc1 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc5c \ud83d\udc96 <code>items-get_items</code> <code>get_items</code>, \ud83d\udc48 \ud83c\udf0c \ud83d\udc69\u200d\ud83d\udcbb \ud83d\ude82 \ud83d\udcaa \ud83c\udfd7 \ud83d\ude45 \ud83d\udc69\u200d\ud83d\udd2c \ud83d\udcdb.</p>"},{"location":"advanced/generate-clients/#_14","title":"\ud83c\udfd7 \ud83d\udcd5 \ud83d\udc69\u200d\ud83d\udcbb \u23ee\ufe0f \ud83d\udddc \ud83d\uddc4","text":"<p>\ud83d\udd1c \ud83d\udd1a \ud83c\udfc1 \ud83d\udcc1 <code>openapi.json</code>, \ud83d\udc46 \ud83d\udd1c \ud83d\udd00 <code>package.json</code> \u2699\ufe0f \ud83d\udc48 \ud83c\udde7\ud83c\uddff \ud83d\udcc1, \ud83d\uddbc:</p> <pre><code>{\n  \"name\": \"frontend-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"generate-client\": \"openapi-ts --input ./openapi.json --output ./src/client --client axios\"\n  },\n  \"author\": \"\",\n  \"license\": \"\",\n  \"devDependencies\": {\n    \"@hey-api/openapi-ts\": \"^0.27.38\",\n    \"typescript\": \"^4.6.2\"\n  }\n}\n</code></pre> <p>\u23ee\ufe0f \ud83c\udfed \ud83c\udd95 \ud83d\udc69\u200d\ud83d\udcbb, \ud83d\udc46 \ud83d\udd1c \ud83d\udd1c \u2714\ufe0f \ud83e\uddf9 \ud83d\udc69\u200d\ud83d\udd2c \ud83d\udcdb, \u23ee\ufe0f \ud83c\udf10 \u270d, \u23f8 \u274c, \u2652\ufe0f:</p> <p></p>"},{"location":"advanced/generate-clients/#_15","title":"\ud83d\udcb0","text":"<p>\ud83d\udd50\u2754 \u2699\ufe0f \ud83d\udd01 \ud83c\udfd7 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udc46 \ud83d\udd1c \u270d :</p> <ul> <li>\ud83d\udc69\u200d\ud83d\udd2c.</li> <li>\ud83d\udce8 \ud83d\ude80 \ud83d\udcaa, \ud83d\udd22 \ud83d\udd22, \u2652\ufe0f.</li> <li>\ud83d\udce8 \ud83d\ude80.</li> </ul> <p>\ud83d\udc46 \ud83d\udd1c \u2714\ufe0f \u23f8 \u274c \ud83c\udf10.</p> <p>&amp; \ud83d\udd50\u2754 \ud83d\udc46 \u2139 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udcdf, &amp; \u267b \ud83d\udd78, \u26ab\ufe0f \ud83d\udd1c \u2714\ufe0f \ud83d\ude46 \ud83c\udd95 \u27a1 \ud83d\udee0\ufe0f \ud83d\udcaa \ud83d\udc69\u200d\ud83d\udd2c, \ud83d\udddd \ud83d\udd50 \u274e, &amp; \ud83d\ude46 \ud83c\udf8f \ud83d\udd00 \ud83d\udd1c \ud83c\udfa8 \ud83d\udd1b \ud83c\udfd7 \ud83d\udcdf. \ud83d\udc76</p> <p>\ud83d\udc49 \u26d3 \ud83d\udc48 \ud83d\udea5 \ud83d\udd73 \ud83d\udd00 \u26ab\ufe0f \ud83d\udd1c \ud83c\udfa8 \ud83d\udd1b \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udcdf \ud83d\udd01. &amp; \ud83d\udea5 \ud83d\udc46 \ud83c\udfd7 \ud83d\udc69\u200d\ud83d\udcbb \u26ab\ufe0f \ud83d\udd1c \u274c \ud83d\udc45 \ud83d\udea5 \ud83d\udc46 \u2714\ufe0f \ud83d\ude46 \ud83d\udd16 \ud83d\udcca \u2699\ufe0f.</p> <p>, \ud83d\udc46 \ud83d\udd1c \ud83d\udd0d \ud83d\udcda \u274c \ud83d\udcf6 \u23ea \ud83d\udee0\ufe0f \ud83d\udef5 \u21a9\ufe0f \u2714\ufe0f \u231b \u274c \ud83c\udfa6 \ud83c\udd99 \ud83d\udc46 \ud83c\udfc1 \ud83d\udc69\u200d\ud83d\udcbb \ud83c\udfed &amp; \u2934\ufe0f \ud83d\udd04 \u2139 \ud83c\udf10\u2754 \u26a0. \ud83d\udc76</p>"},{"location":"advanced/middleware/","title":"\ud83c\udfe7 \ud83d\udee0\ufe0f","text":"<p>\ud83d\udc51 \ud83d\udd30 \ud83d\udc46 \u270d \u2754 \ud83d\udeae \ud83d\udec3 \ud83d\udee0\ufe0f \ud83d\udc46 \ud83c\ude38.</p> <p>&amp; \u2934\ufe0f \ud83d\udc46 \u270d \u2754 \ud83c\udf75 \u269c \u23ee\ufe0f <code>CORSMiddleware</code>.</p> <p>\ud83d\udc49 \ud83d\udcc4 \ud83d\udc65 \ud83d\udd1c \ud83d\udc40 \u2754 \u2699\ufe0f \ud83c\udf8f \ud83d\udee0\ufe0f.</p>"},{"location":"advanced/middleware/#_2","title":"\u274e \ud83d\udd2b \ud83d\udee0\ufe0f","text":"<p>ReadyAPI \u2693\ufe0f \ud83d\udd1b \ud83d\udc83 &amp; \ud83d\udee0\ufe0f \ud83d\udd2b \ud83d\udd27, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83d\ude46 \ud83d\udd2b \ud83d\udee0\ufe0f.</p> <p>\ud83d\udee0\ufe0f \ud83d\udeab \u2714\ufe0f \u2692 ReadyAPI \u2696\ufe0f \ud83d\udc83 \ud83d\udc77, \ud83d\udccf \u26ab\ufe0f \u23e9 \ud83d\udd2b \ud83d\udd0c.</p> <p>\ud83c\udfe2, \ud83d\udd2b \ud83d\udee0\ufe0f \ud83c\udf93 \ud83d\udc48 \u231b \ud83d\udce8 \ud83d\udd2b \ud83d\udcf1 \ud83e\udd47 \u274c.</p> <p>, \ud83e\uddfe \ud83e\udd49-\ud83e\udd73 \ud83d\udd2b \ud83d\udee0\ufe0f \ud83d\udc6b \ud83d\udd1c \ud83c\udfb2 \ud83d\udcac \ud83d\udc46 \ud83d\udd73 \ud83d\udc96:</p> <pre><code>from unicorn import UnicornMiddleware\n\napp = SomeASGIApp()\n\nnew_app = UnicornMiddleware(app, some_config=\"rainbow\")\n</code></pre> <p>\u270b\ufe0f ReadyAPI (\ud83e\udd19 \ud83d\udc83) \ud83d\ude9a \ud83d\ude45 \ud83c\udf0c \u26ab\ufe0f \ud83d\udc48 \u2692 \ud83d\udcad \ud83d\udc48 \ud83d\udd17 \ud83d\udee0\ufe0f \ud83c\udf75 \ud83d\udcbd \u274c &amp; \ud83d\udec3 \u26a0 \ud83d\udc15\u200d\ud83e\uddba \ud83d\udc77 \u2611.</p> <p>\ud83d\udc48, \ud83d\udc46 \u2699\ufe0f <code>app.add_middleware()</code> (\ud83d\uddbc \u269c).</p> <pre><code>from readyapi import ReadyAPI\nfrom unicorn import UnicornMiddleware\n\napp = ReadyAPI()\n\napp.add_middleware(UnicornMiddleware, some_config=\"rainbow\")\n</code></pre> <p><code>app.add_middleware()</code> \ud83d\udce8 \ud83d\udee0\ufe0f \ud83c\udf93 \ud83e\udd47 \u274c &amp; \ud83d\ude46 \ud83c\udf16 \u274c \ud83d\udeb6\u200d\u2640\ufe0f \ud83d\udee0\ufe0f.</p>"},{"location":"advanced/middleware/#_3","title":"\ud83d\udee0\ufe0f \ud83d\udee0\ufe0f","text":"<p>ReadyAPI \ud83d\udd0c \ud83d\udcda \ud83d\udee0\ufe0f \u26a0 \u2699\ufe0f \ud83d\udcbc, \ud83d\udc65 \ud83d\udd1c \ud83d\udc40 \u23ed \u2754 \u2699\ufe0f \ud83d\udc6b.</p> <p>\ud83d\udce1 \u2139</p> <p>\u23ed \ud83d\uddbc, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>from starlette.middleware.something import SomethingMiddleware</code>.</p> <p>ReadyAPI \ud83d\ude9a \ud83d\udcda \ud83d\udee0\ufe0f <code>readyapi.middleware</code> \ud83c\udfea \ud83d\udc46, \ud83d\udc69\u200d\ud83d\udcbb. \u270b\ufe0f \ud83c\udf05 \ud83d\udcaa \ud83d\udee0\ufe0f \ud83d\udc5f \ud83d\udd17 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc83.</p>"},{"location":"advanced/middleware/#httpsredirectmiddleware","title":"<code>HTTPSRedirectMiddleware</code>","text":"<p>\ud83d\udee0\ufe0f \ud83d\udc48 \ud83c\udf10 \ud83d\udce8 \ud83d\udce8 \ud83d\udd1c \ud83d\udc6f\u200d\u2642\ufe0f <code>https</code> \u2696\ufe0f <code>wss</code>.</p> <p>\ud83d\ude46 \ud83d\udce8 \ud83d\udce8 <code>http</code> \u2696\ufe0f <code>ws</code> \ud83d\udd1c \u274e \ud83d\udd10 \u2696 \u21a9\ufe0f.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.middleware.httpsredirect import HTTPSRedirectMiddleware\n\napp = ReadyAPI()\n\napp.add_middleware(HTTPSRedirectMiddleware)\n\n\n@app.get(\"/\")\nasync def main():\n    return {\"message\": \"Hello World\"}\n</code></pre>"},{"location":"advanced/middleware/#trustedhostmiddleware","title":"<code>TrustedHostMiddleware</code>","text":"<p>\ud83d\udee0\ufe0f \ud83d\udc48 \ud83c\udf10 \ud83d\udce8 \ud83d\udce8 \u2714\ufe0f \u2611 \u2692 <code>Host</code> \ud83c\udf9a, \u2714 \ud83d\udc82\u200d\u2642 \ud83d\udee1 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83e\udda0 \ud83c\udf9a \ud83d\udc4a.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.middleware.trustedhost import TrustedHostMiddleware\n\napp = ReadyAPI()\n\napp.add_middleware(\n    TrustedHostMiddleware, allowed_hosts=[\"example.com\", \"*.example.com\"]\n)\n\n\n@app.get(\"/\")\nasync def main():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>\ud83d\udcc4 \u274c \ud83d\udc15\u200d\ud83e\uddba:</p> <ul> <li><code>allowed_hosts</code> - \ud83d\udcc7 \ud83c\udd94 \ud83d\udcdb \ud83d\udc48 \ud83d\udd1c \u2714 \ud83d\udcdb. \ud83c\udccf \ud83c\udd94 \u2705 <code>*.example.com</code> \ud83d\udc15\u200d\ud83e\uddba \ud83c\udf80 \ud83d\udcc1. \u2714 \ud83d\ude46 \ud83d\udcdb \ud83d\udc6f\u200d\u2642\ufe0f \u2699\ufe0f <code>allowed_hosts=[\"*\"]</code> \u2696\ufe0f \ud83d\udeab \ud83d\udee0\ufe0f.</li> </ul> <p>\ud83d\udea5 \ud83d\udce8 \ud83d\udce8 \ud83d\udd28 \ud83d\udeab \u2714 \u2611 \u2934\ufe0f <code>400</code> \ud83d\udce8 \ud83d\udd1c \ud83d\udce8.</p>"},{"location":"advanced/middleware/#gzipmiddleware","title":"<code>GZipMiddleware</code>","text":"<p>\ud83c\udf75 \ud83d\udddc \ud83d\udce8 \ud83d\ude46 \ud83d\udce8 \ud83d\udc48 \ud83d\udd0c <code>\"gzip\"</code> <code>Accept-Encoding</code> \ud83c\udf9a.</p> <p>\ud83d\udee0\ufe0f \ud83d\udd1c \ud83c\udf75 \ud83d\udc6f\u200d\u2642\ufe0f \ud83d\udc29 &amp; \ud83c\udfa5 \ud83d\udce8.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.middleware.gzip import GZipMiddleware\n\napp = ReadyAPI()\n\napp.add_middleware(GZipMiddleware, minimum_size=1000, compresslevel=5)\n\n\n@app.get(\"/\")\nasync def main():\n    return \"somebigcontent\"\n</code></pre> <p>\ud83d\udcc4 \u274c \ud83d\udc15\u200d\ud83e\uddba:</p> <ul> <li><code>minimum_size</code> - \ud83d\udeab \ud83d\udddc \ud83d\udce8 \ud83d\udc48 \ud83e\udd2a \ud83c\udf18 \ud83d\udc49 \ud83d\udcaf \ud83d\udcd0 \ud83d\udd22. \ud83d\udd22 <code>500</code>.</li> </ul>"},{"location":"advanced/middleware/#_4","title":"\ud83c\udf8f \ud83d\udee0\ufe0f","text":"<p>\ud83d\udce4 \ud83d\udcda \ud83c\udf8f \ud83d\udd2b \ud83d\udee0\ufe0f.</p> <p>\ud83d\uddbc:</p> <ul> <li>Uvicorn <code>ProxyHeadersMiddleware</code></li> <li>\ud83c\uddf8\ud83c\uddf2</li> </ul> <p>\ud83d\udc40 \ud83c\udf8f \ud83d\udcaa \ud83d\udee0\ufe0f \u2705 \ud83d\udc83 \ud83d\udee0\ufe0f \ud83e\ude7a &amp; \ud83d\udd2b \ud83d\udc4c \ud83d\udcc7.</p>"},{"location":"advanced/openapi-callbacks/","title":"\ud83d\uddc4 \u23f2","text":"<p>\ud83d\udc46 \ud83d\udcaa \u270d \ud83d\udee0\ufe0f \u23ee\ufe0f \u27a1 \ud83d\udee0\ufe0f \ud83d\udc48 \ud83d\udcaa \u23f2 \ud83d\udce8 \ud83d\udd22 \ud83d\udee0\ufe0f \u270d \ud83d\udc71 \ud83d\ude46 (\ud83c\udfb2 \ud83c\udf8f \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udc48 \ud83d\udd1c \u2699\ufe0f \ud83d\udc46 \ud83d\udee0\ufe0f).</p> <p>\ud83d\udee0\ufe0f \ud83d\udc48 \ud83d\udd28 \ud83d\udd50\u2754 \ud83d\udc46 \ud83d\udee0\ufe0f \ud83d\udcf1 \ud83e\udd19 \ud83d\udd22 \ud83d\udee0\ufe0f \ud83d\udcdb \"\u23f2\". \u21a9\ufe0f \ud83d\udda5 \ud83d\udc48 \ud83d\udd22 \ud83d\udc69\u200d\ud83d\udcbb \u270d \ud83d\udce8 \ud83d\udce8 \ud83d\udc46 \ud83d\udee0\ufe0f &amp; \u2934\ufe0f \ud83d\udc46 \ud83d\udee0\ufe0f \ud83e\udd19 \ud83d\udd19, \ud83d\udce8 \ud83d\udce8 \ud83d\udd22 \ud83d\udee0\ufe0f (\ud83d\udc48 \ud83c\udfb2 \u270d \ud83c\udf8f \ud83d\udc69\u200d\ud83d\udcbb).</p> <p>\ud83d\udc49 \ud83d\udcbc, \ud83d\udc46 \ud83d\udcaa \ud83d\udc9a \ud83d\udcc4 \u2754 \ud83d\udc48 \ud83d\udd22 \ud83d\udee0\ufe0f \ud83d\udd1c \ud83d\udc40 \ud83d\udc96. \u26ab\ufe0f\u2754 \u27a1 \ud83d\udee0\ufe0f \u26ab\ufe0f \ud83d\udd1c \u2714\ufe0f, \u26ab\ufe0f\u2754 \ud83d\udcaa \u26ab\ufe0f \ud83d\udd1c \u231b, \u26ab\ufe0f\u2754 \ud83d\udce8 \u26ab\ufe0f \ud83d\udd1c \ud83d\udce8, \u2652\ufe0f.</p>"},{"location":"advanced/openapi-callbacks/#_2","title":"\ud83d\udcf1 \u23ee\ufe0f \u23f2","text":"<p>\u27a1\ufe0f \ud83d\udc40 \ud83c\udf10 \ud83d\udc49 \u23ee\ufe0f \ud83d\uddbc.</p> <p>\ud83c\udf08 \ud83d\udc46 \ud83d\udee0\ufe0f \ud83d\udcf1 \ud83d\udc48 \u2714 \ud83c\udfd7 \ud83e\uddfe.</p> <p>\ud83d\udc49 \ud83e\uddfe \ud83d\udd1c \u2714\ufe0f <code>id</code>, <code>title</code> (\ud83d\udce6), <code>customer</code>, &amp; <code>total</code>.</p> <p>\ud83d\udc69\u200d\ud83d\udcbb \ud83d\udc46 \ud83d\udee0\ufe0f (\ud83d\udd22 \ud83d\udc69\u200d\ud83d\udcbb) \ud83d\udd1c \u270d \ud83e\uddfe \ud83d\udc46 \ud83d\udee0\ufe0f \u23ee\ufe0f \ud83c\udfe4 \ud83d\udce8.</p> <p>\u2934\ufe0f \ud83d\udc46 \ud83d\udee0\ufe0f \ud83d\udd1c (\u27a1\ufe0f \ud83c\udf08):</p> <ul> <li>\ud83d\udce8 \ud83e\uddfe \ud83d\udd74 \ud83d\udd22 \ud83d\udc69\u200d\ud83d\udcbb.</li> <li>\ud83d\udcc8 \ud83d\udcb8.</li> <li>\ud83d\udce8 \ud83d\udce8 \ud83d\udd19 \ud83d\udee0\ufe0f \ud83d\udc69\u200d\ud83d\udcbb (\ud83d\udd22 \ud83d\udc69\u200d\ud83d\udcbb).<ul> <li>\ud83d\udc49 \ud83d\udd1c \ud83d\udd28 \ud83d\udce8 \ud83c\udfe4 \ud83d\udce8 (\u26aa\ufe0f\u27a1\ufe0f \ud83d\udc46 \ud83d\udee0\ufe0f) \ud83d\udd22 \ud83d\udee0\ufe0f \ud83d\ude9a \ud83d\udc48 \ud83d\udd22 \ud83d\udc69\u200d\ud83d\udcbb (\ud83d\udc49 \"\u23f2\").</li> </ul> </li> </ul>"},{"location":"advanced/openapi-callbacks/#readyapi","title":"\ud83d\ude10 ReadyAPI \ud83d\udcf1","text":"<p>\u27a1\ufe0f \ud83e\udd47 \ud83d\udc40 \u2754 \ud83d\ude10 \ud83d\udee0\ufe0f \ud83d\udcf1 \ud83d\udd1c \ud83d\udc40 \ud83d\udc96 \u23ed \u274e \u23f2.</p> <p>\u26ab\ufe0f \ud83d\udd1c \u2714\ufe0f \u27a1 \ud83d\udee0\ufe0f \ud83d\udc48 \ud83d\udd1c \ud83d\udce8 <code>Invoice</code> \ud83d\udcaa, &amp; \ud83d\udd22 \ud83d\udd22 <code>callback_url</code> \ud83d\udc48 \ud83d\udd1c \ud83d\udd0c \ud83d\udcdb \u23f2.</p> <p>\ud83d\udc49 \ud83c\udf55 \ud83d\udcf6 \ud83d\ude10, \ud83c\udf05 \ud83d\udcdf \ud83c\udfb2 \u23ea \ud83d\ude30 \ud83d\udc46:</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import APIRouter, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Invoice(BaseModel):\n    id: str\n    title: Union[str, None] = None\n    customer: str\n    total: float\n\n\nclass InvoiceEvent(BaseModel):\n    description: str\n    paid: bool\n\n\nclass InvoiceEventReceived(BaseModel):\n    ok: bool\n\n\ninvoices_callback_router = APIRouter()\n\n\n@invoices_callback_router.post(\n    \"{$callback_url}/invoices/{$request.body.id}\", response_model=InvoiceEventReceived\n)\ndef invoice_notification(body: InvoiceEvent):\n    pass\n\n\n@app.post(\"/invoices/\", callbacks=invoices_callback_router.routes)\ndef create_invoice(invoice: Invoice, callback_url: Union[HttpUrl, None] = None):\n    \"\"\"\n    Create an invoice.\n\n    This will (let's imagine) let the API user (some external developer) create an\n    invoice.\n\n    And this path operation will:\n\n    * Send the invoice to the client.\n    * Collect the money from the client.\n    * Send a notification back to the API user (the external developer), as a callback.\n        * At this point is that the API will somehow send a POST request to the\n            external API with the notification of the invoice event\n            (e.g. \"payment successful\").\n    \"\"\"\n    # Send the invoice, collect the money, send the notification (the callback)\n    return {\"msg\": \"Invoice received\"}\n</code></pre> <p>Tip</p> <p><code>callback_url</code> \ud83d\udd22 \ud83d\udd22 \u2699\ufe0f Pydantic \ud83d\udcdb \ud83c\udd8e.</p> <p>\ud83d\udd74 \ud83c\udd95 \ud83d\udc5c <code>callbacks=messages_callback_router.routes</code> \u274c \u27a1 \ud83d\udee0\ufe0f \ud83d\udc68\u200d\ud83c\udfa8. \ud83d\udc65 \ud83d\udd1c \ud83d\udc40 \u26ab\ufe0f\u2754 \ud83d\udc48 \u23ed.</p>"},{"location":"advanced/openapi-callbacks/#_3","title":"\ud83d\udd2c \u23f2","text":"<p>\u2611 \u23f2 \ud83d\udcdf \ud83d\udd1c \ud83e\ude80 \ud83d\ude47 \ud83d\udd1b \ud83d\udc46 \ud83d\udc4d \ud83d\udee0\ufe0f \ud83d\udcf1.</p> <p>&amp; \u26ab\ufe0f \ud83d\udd1c \ud83c\udfb2 \ud83e\ude80 \ud83d\udcda \u26aa\ufe0f\u27a1\ufe0f 1\ufe0f\u20e3 \ud83d\udcf1 \u23ed.</p> <p>\u26ab\ufe0f \ud83d\udcaa 1\ufe0f\u20e3 \u2696\ufe0f 2\ufe0f\u20e3 \u23f8 \ud83d\udcdf, \ud83d\udc96:</p> <pre><code>callback_url = \"https://example.com/api/v1/invoices/events/\"\nhttpx.post(callback_url, json={\"description\": \"Invoice paid\", \"paid\": True})\n</code></pre> <p>\u270b\ufe0f \ud83c\udfb2 \ud83c\udfc6 \u26a0 \ud83c\udf55 \u23f2 \u2692 \ud83d\udcad \ud83d\udc48 \ud83d\udc46 \ud83d\udee0\ufe0f \ud83d\udc69\u200d\ud83d\udcbb (\ud83d\udd22 \ud83d\udc69\u200d\ud83d\udcbb) \ud83d\udee0\ufe0f \ud83d\udd22 \ud83d\udee0\ufe0f \u2611, \ud83d\udec4 \ud83d\udcbd \ud83d\udc48 \ud83d\udc46 \ud83d\udee0\ufe0f \ud83d\udd1c \ud83d\udce8 \ud83d\udce8 \ud83d\udcaa \u23f2, \u2652\ufe0f.</p> <p>, \u26ab\ufe0f\u2754 \ud83d\udc65 \ud83d\udd1c \u23ed \ud83d\udeae \ud83d\udcdf \ud83d\udcc4 \u2754 \ud83d\udc48 \ud83d\udd22 \ud83d\udee0\ufe0f \ud83d\udd1c \ud83d\udc40 \ud83d\udc96 \ud83d\udce8 \u23f2 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc46 \ud83d\udee0\ufe0f.</p> <p>\ud83d\udc48 \ud83e\uddfe \ud83d\udd1c \ud83c\udfa6 \ud83c\udd99 \ud83e\udd81 \ud83c\udf9a <code>/docs</code> \ud83d\udc46 \ud83d\udee0\ufe0f, &amp; \u26ab\ufe0f \ud83d\udd1c \u27a1\ufe0f \ud83d\udd22 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udcad \u2754 \ud83c\udfd7 \ud83d\udd22 \ud83d\udee0\ufe0f.</p> <p>\ud83d\udc49 \ud83d\uddbc \ud83d\udeab \ud83d\udee0\ufe0f \u23f2 \u26ab\ufe0f (\ud83d\udc48 \ud83d\udcaa \u23f8 \ud83d\udcdf), \ud83d\udd74 \ud83e\uddfe \ud83c\udf55.</p> <p>Tip</p> <p>\u2611 \u23f2 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udce8.</p> <p>\ud83d\udd50\u2754 \ud83d\udee0\ufe0f \u23f2 \ud83d\udc46, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83d\udd73 \ud83d\udc96 \ud83c\uddf8\ud83c\uddf2 \u2696\ufe0f \ud83d\udce8.</p>"},{"location":"advanced/openapi-callbacks/#_4","title":"\u270d \u23f2 \ud83e\uddfe \ud83d\udcdf","text":"<p>\ud83d\udc49 \ud83d\udcdf \ud83c\udfc6 \ud83d\udeab \ud83d\udee0\ufe0f \ud83d\udc46 \ud83d\udcf1, \ud83d\udc65 \ud83d\udd74 \ud83d\udcaa \u26ab\ufe0f \ud83d\udcc4 \u2754 \ud83d\udc48 \ud83d\udd22 \ud83d\udee0\ufe0f \ud83d\udd1c \ud83d\udc40 \ud83d\udc96.</p> <p>\u270b\ufe0f, \ud83d\udc46 \u23ea \ud83d\udcad \u2754 \ud83d\udcaa \u270d \ud83c\udfe7 \ud83e\uddfe \ud83d\udee0\ufe0f \u23ee\ufe0f ReadyAPI.</p> <p>\ud83d\udc65 \ud83d\udd1c \u2699\ufe0f \ud83d\udc48 \ud83c\udf8f \ud83d\udca1 \ud83d\udcc4 \u2754 \ud83d\udd22 \ud83d\udee0\ufe0f \ud83d\udd1c \ud83d\udc40 \ud83d\udc96... \ud83c\udfd7 \u27a1 \ud83d\udee0\ufe0f(\u24c2) \ud83d\udc48 \ud83d\udd22 \ud83d\udee0\ufe0f \ud83d\udd1c \ud83d\udee0\ufe0f (\ud83d\udd50 \ud83d\udc46 \ud83d\udee0\ufe0f \ud83d\udd1c \ud83e\udd19).</p> <p>Tip</p> <p>\ud83d\udd50\u2754 \u270d \ud83d\udcdf \ud83d\udcc4 \u23f2, \u26ab\ufe0f \ud83d\udcaa \u26a0 \ud83c\udf08 \ud83d\udc48 \ud83d\udc46 \ud83d\udc48 \ud83d\udd22 \ud83d\udc69\u200d\ud83d\udcbb. &amp; \ud83d\udc48 \ud83d\udc46 \u23f3 \ud83d\udee0\ufe0f \ud83d\udd22 \ud83d\udee0\ufe0f, \ud83d\udeab \ud83d\udc46 \ud83d\udee0\ufe0f.</p> <p>\ud83c\udf55 \ud83d\udee0\ufe0f \ud83d\udc49 \u261d \ud83c\udf91 ( \ud83d\udd22 \ud83d\udc69\u200d\ud83d\udcbb) \ud83d\udcaa \u2139 \ud83d\udc46 \ud83d\udcad \ud83d\udc96 \u26ab\ufe0f \ud83c\udf05 \u2b50 \ud83c\udf10\u2754 \ud83d\udeae \ud83d\udd22, Pydantic \ud83c\udff7 \ud83d\udcaa, \ud83d\udce8, \u2652\ufe0f. \ud83d\udc48 \ud83d\udd22 \ud83d\udee0\ufe0f.</p>"},{"location":"advanced/openapi-callbacks/#apirouter","title":"\u270d \u23f2 <code>APIRouter</code>","text":"<p>\ud83e\udd47 \u270d \ud83c\udd95 <code>APIRouter</code> \ud83d\udc48 \ud83d\udd1c \ud83d\udd0c 1\ufe0f\u20e3 \u2696\ufe0f \ud83c\udf05 \u23f2.</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import APIRouter, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Invoice(BaseModel):\n    id: str\n    title: Union[str, None] = None\n    customer: str\n    total: float\n\n\nclass InvoiceEvent(BaseModel):\n    description: str\n    paid: bool\n\n\nclass InvoiceEventReceived(BaseModel):\n    ok: bool\n\n\ninvoices_callback_router = APIRouter()\n\n\n@invoices_callback_router.post(\n    \"{$callback_url}/invoices/{$request.body.id}\", response_model=InvoiceEventReceived\n)\ndef invoice_notification(body: InvoiceEvent):\n    pass\n\n\n@app.post(\"/invoices/\", callbacks=invoices_callback_router.routes)\ndef create_invoice(invoice: Invoice, callback_url: Union[HttpUrl, None] = None):\n    \"\"\"\n    Create an invoice.\n\n    This will (let's imagine) let the API user (some external developer) create an\n    invoice.\n\n    And this path operation will:\n\n    * Send the invoice to the client.\n    * Collect the money from the client.\n    * Send a notification back to the API user (the external developer), as a callback.\n        * At this point is that the API will somehow send a POST request to the\n            external API with the notification of the invoice event\n            (e.g. \"payment successful\").\n    \"\"\"\n    # Send the invoice, collect the money, send the notification (the callback)\n    return {\"msg\": \"Invoice received\"}\n</code></pre>"},{"location":"advanced/openapi-callbacks/#_5","title":"\u270d \u23f2 \u27a1 \ud83d\udee0\ufe0f","text":"<p>\u270d \u23f2 \u27a1 \ud83d\udee0\ufe0f \u2699\ufe0f \ud83c\udf8f <code>APIRouter</code> \ud83d\udc46 \u270d \ud83d\udd1b.</p> <p>\u26ab\ufe0f \ud83d\udd1c \ud83d\udc40 \ud83d\udc96 \ud83d\ude10 ReadyAPI \u27a1 \ud83d\udee0\ufe0f:</p> <ul> <li>\u26ab\ufe0f \ud83d\udd1c \ud83c\udfb2 \u2714\ufe0f \ud83d\udcc4 \ud83d\udcaa \u26ab\ufe0f \ud83d\udd1c \ud83d\udce8, \u2705 <code>body: InvoiceEvent</code>.</li> <li>&amp; \u26ab\ufe0f \ud83d\udcaa \u2714\ufe0f \ud83d\udcc4 \ud83d\udce8 \u26ab\ufe0f \ud83d\udd1c \ud83d\udce8, \u2705 <code>response_model=InvoiceEventReceived</code>.</li> </ul> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import APIRouter, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Invoice(BaseModel):\n    id: str\n    title: Union[str, None] = None\n    customer: str\n    total: float\n\n\nclass InvoiceEvent(BaseModel):\n    description: str\n    paid: bool\n\n\nclass InvoiceEventReceived(BaseModel):\n    ok: bool\n\n\ninvoices_callback_router = APIRouter()\n\n\n@invoices_callback_router.post(\n    \"{$callback_url}/invoices/{$request.body.id}\", response_model=InvoiceEventReceived\n)\ndef invoice_notification(body: InvoiceEvent):\n    pass\n\n\n@app.post(\"/invoices/\", callbacks=invoices_callback_router.routes)\ndef create_invoice(invoice: Invoice, callback_url: Union[HttpUrl, None] = None):\n    \"\"\"\n    Create an invoice.\n\n    This will (let's imagine) let the API user (some external developer) create an\n    invoice.\n\n    And this path operation will:\n\n    * Send the invoice to the client.\n    * Collect the money from the client.\n    * Send a notification back to the API user (the external developer), as a callback.\n        * At this point is that the API will somehow send a POST request to the\n            external API with the notification of the invoice event\n            (e.g. \"payment successful\").\n    \"\"\"\n    # Send the invoice, collect the money, send the notification (the callback)\n    return {\"msg\": \"Invoice received\"}\n</code></pre> <p>\ud83d\udce4 2\ufe0f\u20e3 \ud83d\udc51 \ud83d\udd3a \u26aa\ufe0f\u27a1\ufe0f \ud83d\ude10 \u27a1 \ud83d\udee0\ufe0f:</p> <ul> <li>\u26ab\ufe0f \ud83d\udeab \ud83d\udcaa \u2714\ufe0f \ud83d\ude46 \u2611 \ud83d\udcdf, \u21a9\ufe0f \ud83d\udc46 \ud83d\udcf1 \ud83d\udd1c \ud83d\ude45 \ud83e\udd19 \ud83d\udc49 \ud83d\udcdf. \u26ab\ufe0f \ud83d\udd74 \u2699\ufe0f \ud83d\udcc4 \ud83d\udd22 \ud83d\udee0\ufe0f. , \ud83d\udd22 \ud83d\udcaa \u2714\ufe0f <code>pass</code>.</li> <li>\u27a1 \ud83d\udcaa \ud83d\udd0c \ud83d\uddc4 3\ufe0f\u20e3 \ud83e\uddec (\ud83d\udc40 \ud83c\udf16 \ud83d\udd1b) \ud83c\udf10\u2754 \u26ab\ufe0f \ud83d\udcaa \u2699\ufe0f \ud83d\udd22 \u23ee\ufe0f \ud83d\udd22 &amp; \ud83c\udf55 \u23ee\ufe0f \ud83d\udce8 \ud83d\udce8 \ud83d\udc46 \ud83d\udee0\ufe0f.</li> </ul>"},{"location":"advanced/openapi-callbacks/#_6","title":"\u23f2 \u27a1 \ud83e\uddec","text":"<p>\u23f2 \u27a1 \ud83d\udcaa \u2714\ufe0f \ud83d\uddc4 3\ufe0f\u20e3 \ud83e\uddec \ud83d\udc48 \ud83d\udcaa \ud83d\udd0c \ud83c\udf55 \u23ee\ufe0f \ud83d\udce8 \ud83d\udce8 \ud83d\udc46 \ud83d\udee0\ufe0f.</p> <p>\ud83d\udc49 \ud83d\udcbc, \u26ab\ufe0f <code>str</code>:</p> <pre><code>\"{$callback_url}/invoices/{$request.body.id}\"\n</code></pre> <p>, \ud83d\udea5 \ud83d\udc46 \ud83d\udee0\ufe0f \ud83d\udc69\u200d\ud83d\udcbb (\ud83d\udd22 \ud83d\udc69\u200d\ud83d\udcbb) \ud83d\udce8 \ud83d\udce8 \ud83d\udc46 \ud83d\udee0\ufe0f :</p> <pre><code>https://yourapi.com/invoices/?callback_url=https://www.external.org/events\n</code></pre> <p>\u23ee\ufe0f \ud83c\udfbb \ud83d\udcaa:</p> <pre><code>{\n    \"id\": \"2expen51ve\",\n    \"customer\": \"Mr. Richie Rich\",\n    \"total\": \"9999\"\n}\n</code></pre> <p>\u2934\ufe0f \ud83d\udc46 \ud83d\udee0\ufe0f \ud83d\udd1c \ud83d\udee0\ufe0f \ud83e\uddfe, &amp; \u261d \u23ea, \ud83d\udce8 \u23f2 \ud83d\udce8 <code>callback_url</code> ( \ud83d\udd22 \ud83d\udee0\ufe0f):</p> <pre><code>https://www.external.org/events/invoices/2expen51ve\n</code></pre> <p>\u23ee\ufe0f \ud83c\udfbb \ud83d\udcaa \u2697 \ud83d\udd73 \ud83d\udc96:</p> <pre><code>{\n    \"description\": \"Payment celebration\",\n    \"paid\": true\n}\n</code></pre> <p>&amp; \u26ab\ufe0f \ud83d\udd1c \u231b \ud83d\udce8 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc48 \ud83d\udd22 \ud83d\udee0\ufe0f \u23ee\ufe0f \ud83c\udfbb \ud83d\udcaa \ud83d\udc96:</p> <pre><code>{\n    \"ok\": true\n}\n</code></pre> <p>Tip</p> <p>\ud83d\udc40 \u2754 \u23f2 \ud83d\udcdb \u2699\ufe0f \ud83d\udd0c \ud83d\udcdb \ud83d\udce8 \ud83d\udd22 \ud83d\udd22 <code>callback_url</code> (<code>https://www.external.org/events</code>) &amp; \ud83e\uddfe <code>id</code> \u26aa\ufe0f\u27a1\ufe0f \ud83d\udd18 \ud83c\udfbb \ud83d\udcaa (<code>2expen51ve</code>).</p>"},{"location":"advanced/openapi-callbacks/#_7","title":"\ud83d\udeae \u23f2 \ud83d\udcfb","text":"<p>\ud83d\udc49 \u261d \ud83d\udc46 \u2714\ufe0f \u23f2 \u27a1 \ud83d\udee0\ufe0f(\u24c2) \ud83d\udcaa (1\ufe0f\u20e3(\u24c2) \ud83d\udc48 \ud83d\udd22 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd1c \ud83d\udee0\ufe0f \ud83d\udd22 \ud83d\udee0\ufe0f) \u23f2 \ud83d\udcfb \ud83d\udc46 \u270d \ud83d\udd1b.</p> <p>\ud83d\udd1c \u2699\ufe0f \ud83d\udd22 <code>callbacks</code> \ud83d\udc46 \ud83d\udee0\ufe0f \u27a1 \ud83d\udee0\ufe0f \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udeb6\u200d\u2640\ufe0f \ud83d\udd22 <code>.routes</code> (\ud83d\udc48 \ud83e\udd19 <code>list</code> \ud83d\udee3/\u27a1 \ud83d\udee0\ufe0f) \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc48 \u23f2 \ud83d\udcfb:</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import APIRouter, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Invoice(BaseModel):\n    id: str\n    title: Union[str, None] = None\n    customer: str\n    total: float\n\n\nclass InvoiceEvent(BaseModel):\n    description: str\n    paid: bool\n\n\nclass InvoiceEventReceived(BaseModel):\n    ok: bool\n\n\ninvoices_callback_router = APIRouter()\n\n\n@invoices_callback_router.post(\n    \"{$callback_url}/invoices/{$request.body.id}\", response_model=InvoiceEventReceived\n)\ndef invoice_notification(body: InvoiceEvent):\n    pass\n\n\n@app.post(\"/invoices/\", callbacks=invoices_callback_router.routes)\ndef create_invoice(invoice: Invoice, callback_url: Union[HttpUrl, None] = None):\n    \"\"\"\n    Create an invoice.\n\n    This will (let's imagine) let the API user (some external developer) create an\n    invoice.\n\n    And this path operation will:\n\n    * Send the invoice to the client.\n    * Collect the money from the client.\n    * Send a notification back to the API user (the external developer), as a callback.\n        * At this point is that the API will somehow send a POST request to the\n            external API with the notification of the invoice event\n            (e.g. \"payment successful\").\n    \"\"\"\n    # Send the invoice, collect the money, send the notification (the callback)\n    return {\"msg\": \"Invoice received\"}\n</code></pre> <p>Tip</p> <p>\ud83d\udc40 \ud83d\udc48 \ud83d\udc46 \ud83d\udeab \ud83d\udeb6\u200d\u2640\ufe0f \ud83d\udcfb \u26ab\ufe0f (<code>invoices_callback_router</code>) <code>callback=</code>, \u270b\ufe0f \ud83d\udd22 <code>.routes</code>, <code>invoices_callback_router.routes</code>.</p>"},{"location":"advanced/openapi-callbacks/#_8","title":"\u2705 \ud83e\ude7a","text":"<p>\ud83d\udd1c \ud83d\udc46 \ud83d\udcaa \u25b6\ufe0f \ud83d\udc46 \ud83d\udcf1 \u23ee\ufe0f Uvicorn &amp; \ud83d\udeb6 http://127.0.0.1:8000/docs.</p> <p>\ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \ud83d\udc46 \ud83e\ude7a \u2705 \"\u23f2\" \ud83d\udcc4 \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f \ud83d\udc48 \ud83c\udfa6 \u2754 \ud83d\udd22 \ud83d\udee0\ufe0f \ud83d\udd1c \ud83d\udc40 \ud83d\udc96:</p> <p></p>"},{"location":"advanced/path-operation-advanced-configuration/","title":"\u27a1 \ud83d\udee0\ufe0f \ud83c\udfe7 \ud83d\udcf3","text":""},{"location":"advanced/path-operation-advanced-configuration/#_2","title":"\ud83d\uddc4 {","text":"<p>Warning</p> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udeab \"\ud83d\udd74\" \ud83d\uddc4, \ud83d\udc46 \ud83c\udfb2 \ud83d\udeab \ud83d\udcaa \ud83d\udc49.</p> <p>\ud83d\udc46 \ud83d\udcaa \u2692 \ud83d\uddc4 <code>operationId</code> \u2699\ufe0f \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f \u23ee\ufe0f \ud83d\udd22 <code>operation_id</code>.</p> <p>\ud83d\udc46 \ud83d\udd1c \u2714\ufe0f \u2692 \ud83d\udcad \ud83d\udc48 \u26ab\ufe0f \ud83d\ude0d \ud83d\udd20 \ud83d\udee0\ufe0f.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\", operation_id=\"some_specific_id_you_define\")\nasync def read_items():\n    return [{\"item_id\": \"Foo\"}]\n</code></pre>"},{"location":"advanced/path-operation-advanced-configuration/#_3","title":"\u2699\ufe0f \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22 \ud83d\udcdb {","text":"<p>\ud83d\udea5 \ud83d\udc46 \ud83d\udc9a \u2699\ufe0f \ud83d\udc46 \ud83d\udd17' \ud83d\udd22 \ud83d\udcdb <code>operationId</code>\u24c2, \ud83d\udc46 \ud83d\udcaa \ud83d\udd01 \ud83e\udd2d \ud83c\udf10 \ud83d\udc6b &amp; \ud83d\udd10 \ud83d\udd20 \u27a1 \ud83d\udee0\ufe0f <code>operation_id</code> \u2699\ufe0f \ud83d\udc6b <code>APIRoute.name</code>.</p> <p>\ud83d\udc46 \ud83d\udd1c \u26ab\ufe0f \u23ee\ufe0f \u274e \ud83c\udf10 \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.routing import APIRoute\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"item_id\": \"Foo\"}]\n\n\ndef use_route_names_as_operation_ids(app: ReadyAPI) -&gt; None:\n    \"\"\"\n    Simplify operation IDs so that generated API clients have simpler function\n    names.\n\n    Should be called only after all routes have been added.\n    \"\"\"\n    for route in app.routes:\n        if isinstance(route, APIRoute):\n            route.operation_id = route.name  # in this case, 'read_items'\n\n\nuse_route_names_as_operation_ids(app)\n</code></pre> <p>Tip</p> <p>\ud83d\udea5 \ud83d\udc46 \u274e \ud83e\udd19 <code>app.openapi()</code>, \ud83d\udc46 \ud83d\udd1c \u2139 <code>operationId</code>\u24c2 \u23ed \ud83d\udc48.</p> <p>Warning</p> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udc49, \ud83d\udc46 \u2714\ufe0f \u2692 \ud83d\udcad \ud83d\udd20 1\ufe0f\u20e3 \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22 \u2714\ufe0f \ud83d\ude0d \ud83d\udcdb.</p> <p>\ud83d\udea5 \ud83d\udc6b \ud83c\udf8f \ud83d\udd79 (\ud83d\udc0d \ud83d\udcc1).</p>"},{"location":"advanced/path-operation-advanced-configuration/#_4","title":"\ud83d\udeab \u26aa\ufe0f\u27a1\ufe0f \ud83d\uddc4","text":"<p>\ud83d\udeab \u27a1 \ud83d\udee0\ufe0f \u26aa\ufe0f\u27a1\ufe0f \ud83c\udfd7 \ud83d\uddc4 \ud83d\udd17 (&amp; \u27a1\ufe0f, \u26aa\ufe0f\u27a1\ufe0f \ud83c\udfe7 \ud83e\uddfe \u2699\ufe0f), \u2699\ufe0f \ud83d\udd22 <code>include_in_schema</code> &amp; \u2692 \u26ab\ufe0f <code>False</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\", include_in_schema=False)\nasync def read_items():\n    return [{\"item_id\": \"Foo\"}]\n</code></pre>"},{"location":"advanced/path-operation-advanced-configuration/#_5","title":"\ud83c\udfe7 \ud83d\udcdb \u26aa\ufe0f\u27a1\ufe0f #\ufe0f\u20e3","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udcc9 \u23f8 \u2699\ufe0f \u26aa\ufe0f\u27a1\ufe0f #\ufe0f\u20e3 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22 \ud83d\uddc4.</p> <p>\u274e <code>\\f</code> (\ud83d\ude16 \"\ud83d\udce8 \ud83c\udf7c\" \ud83e\uddb9) \ud83e\udd15 ReadyAPI \ud83d\udd01 \ud83d\udd22 \u2699\ufe0f \ud83d\uddc4 \ud83d\udc49 \u261d.</p> <p>\u26ab\ufe0f \ud83c\udfc6 \ud83d\udeab \ud83c\udfa6 \ud83c\udd99 \ud83e\uddfe, \u270b\ufe0f \ud83c\udf8f \ud83e\uddf0 (\u2705 \ud83d\udc09) \ud83d\udd1c \ud83d\udcaa \u2699\ufe0f \ud83c\udf82.</p> Python 3.8+ <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, summary=\"Create an item\")\nasync def create_item(item: Item):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \\f\n    :param item: User input.\n    \"\"\"\n    return item\n</code></pre>"},{"location":"advanced/path-operation-advanced-configuration/#_6","title":"\ud83c\udf16 \ud83d\udce8","text":"<p>\ud83d\udc46 \ud83c\udfb2 \u2714\ufe0f \ud83d\udc40 \u2754 \ud83d\udce3 <code>response_model</code> &amp; <code>status_code</code> \u27a1 \ud83d\udee0\ufe0f.</p> <p>\ud83d\udc48 \ud83d\udd2c \ud83d\uddc3 \ud83d\udd03 \ud83d\udc51 \ud83d\udce8 \u27a1 \ud83d\udee0\ufe0f.</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83c\udf16 \ud83d\udce8 \u23ee\ufe0f \ud83d\udc6b \ud83c\udff7, \ud83d\udc54 \ud83d\udcdf, \u2652\ufe0f.</p> <p>\ud83d\udce4 \ud83c\udf82 \ud83d\udcc3 \ud83d\udce5 \ud83e\uddfe \ud83d\udd03 \u26ab\ufe0f, \ud83d\udc46 \ud83d\udcaa \u270d \u26ab\ufe0f \ud83c\udf16 \ud83d\udce8 \ud83d\uddc4.</p>"},{"location":"advanced/path-operation-advanced-configuration/#_7","title":"\ud83d\uddc4 \u2795","text":"<p>\ud83d\udd50\u2754 \ud83d\udc46 \ud83d\udce3 \u27a1 \ud83d\udee0\ufe0f \ud83d\udc46 \ud83c\ude38, ReadyAPI \ud83d\udd01 \ud83c\udfd7 \ud83d\udd17 \ud83d\uddc3 \ud83d\udd03 \ud83d\udc48 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd0c \ud83d\uddc4 \ud83d\udd17.</p> <p>\ud83d\udce1 \u2139</p> <p>\ud83d\uddc4 \ud83d\udd27 \u26ab\ufe0f \ud83e\udd19 \ud83d\udee0\ufe0f \ud83c\udf9a.</p> <p>\u26ab\ufe0f \u2714\ufe0f \ud83c\udf10 \u2139 \ud83d\udd03 \u27a1 \ud83d\udee0\ufe0f &amp; \u2699\ufe0f \ud83c\udfd7 \ud83c\udfe7 \ud83e\uddfe.</p> <p>\u26ab\ufe0f \ud83d\udd0c <code>tags</code>, <code>parameters</code>, <code>requestBody</code>, <code>responses</code>, \u2652\ufe0f.</p> <p>\ud83d\udc49 \u27a1 \ud83d\udee0\ufe0f-\ud83c\udfaf \ud83d\uddc4 \ud83d\udd17 \ud83d\udece \ud83c\udfd7 \ud83d\udd01 ReadyAPI, \u270b\ufe0f \ud83d\udc46 \ud83d\udcaa \u2194 \u26ab\ufe0f.</p> <p>Tip</p> <p>\ud83d\udc49 \ud83d\udd05 \ud83c\udf9a \u2194 \u261d.</p> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udd74 \ud83d\udcaa \ud83d\udce3 \ud83c\udf16 \ud83d\udce8, \ud83c\udf05 \ud83c\udfea \ud83c\udf0c \u26ab\ufe0f \u23ee\ufe0f \ud83c\udf16 \ud83d\udce8 \ud83d\uddc4.</p> <p>\ud83d\udc46 \ud83d\udcaa \u2194 \ud83d\uddc4 \ud83d\udd17 \u27a1 \ud83d\udee0\ufe0f \u2699\ufe0f \ud83d\udd22 <code>openapi_extra</code>.</p>"},{"location":"advanced/path-operation-advanced-configuration/#_8","title":"\ud83d\uddc4 \u2194","text":"<p>\ud83d\udc49 <code>openapi_extra</code> \ud83d\udcaa \ud83d\udc4d, \ud83d\uddbc, \ud83d\udce3 \ud83d\uddc4 \u2194:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\", openapi_extra={\"x-aperture-labs-portal\": \"blue\"})\nasync def read_items():\n    return [{\"item_id\": \"portal-gun\"}]\n</code></pre> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udcc2 \ud83c\udfe7 \ud83d\udee0\ufe0f \ud83e\ude7a, \ud83d\udc46 \u2194 \ud83d\udd1c \ud83c\udfa6 \ud83c\udd99 \ud83d\udd1d \ud83c\udfaf \u27a1 \ud83d\udee0\ufe0f.</p> <p></p> <p>&amp; \ud83d\udea5 \ud83d\udc46 \ud83d\udc40 \ud83d\udcc9 \ud83d\uddc4 ( <code>/openapi.json</code> \ud83d\udc46 \ud83d\udee0\ufe0f), \ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \ud83d\udc46 \u2194 \ud83c\udf55 \ud83c\udfaf \u27a1 \ud83d\udee0\ufe0f \ud83d\udc81\u200d\u2642\ufe0f:</p> <pre><code>{\n    \"openapi\": \"3.0.2\",\n    \"info\": {\n        \"title\": \"ReadyAPI\",\n        \"version\": \"0.1.0\"\n    },\n    \"paths\": {\n        \"/items/\": {\n            \"get\": {\n                \"summary\": \"Read Items\",\n                \"operationId\": \"read_items_items__get\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Successful Response\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {}\n                            }\n                        }\n                    }\n                },\n                \"x-aperture-labs-portal\": \"blue\"\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"advanced/path-operation-advanced-configuration/#_9","title":"\ud83d\udec3 \ud83d\uddc4 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd17","text":"<p>\ud83d\udcd6 <code>openapi_extra</code> \ud83d\udd1c \ud83d\ude47 \ud83d\udd17 \u23ee\ufe0f \ud83d\udd01 \ud83c\udfd7 \ud83d\uddc4 \ud83d\udd17 \u27a1 \ud83d\udee0\ufe0f.</p> <p>, \ud83d\udc46 \ud83d\udcaa \ud83d\udeae \ud83c\udf16 \ud83d\udcbd \ud83d\udd01 \ud83c\udfd7 \ud83d\udd17.</p> <p>\ud83d\uddbc, \ud83d\udc46 \ud83d\udcaa \ud83d\udcad \u270d &amp; \u2714 \ud83d\udce8 \u23ee\ufe0f \ud83d\udc46 \ud83d\udc4d \ud83d\udcdf, \ud83c\udf75 \u2699\ufe0f \ud83c\udfe7 \u2692 ReadyAPI \u23ee\ufe0f Pydantic, \u270b\ufe0f \ud83d\udc46 \ud83d\udcaa \ud83d\udc9a \ud83d\udd2c \ud83d\udce8 \ud83d\uddc4 \ud83d\udd17.</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udc48 \u23ee\ufe0f <code>openapi_extra</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Request\n\napp = ReadyAPI()\n\n\ndef magic_data_reader(raw_body: bytes):\n    return {\n        \"size\": len(raw_body),\n        \"content\": {\n            \"name\": \"Maaaagic\",\n            \"price\": 42,\n            \"description\": \"Just kiddin', no magic here. \u2728\",\n        },\n    }\n\n\n@app.post(\n    \"/items/\",\n    openapi_extra={\n        \"requestBody\": {\n            \"content\": {\n                \"application/json\": {\n                    \"schema\": {\n                        \"required\": [\"name\", \"price\"],\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"name\": {\"type\": \"string\"},\n                            \"price\": {\"type\": \"number\"},\n                            \"description\": {\"type\": \"string\"},\n                        },\n                    }\n                }\n            },\n            \"required\": True,\n        },\n    },\n)\nasync def create_item(request: Request):\n    raw_body = await request.body()\n    data = magic_data_reader(raw_body)\n    return data\n</code></pre> <p>\ud83d\udc49 \ud83d\uddbc, \ud83d\udc65 \ud83d\udeab \ud83d\udce3 \ud83d\ude46 Pydantic \ud83c\udff7. \ud83d\udc50, \ud83d\udce8 \ud83d\udcaa \ud83d\udeab \ud83c\udfbb \ud83c\udfbb, \u26ab\ufe0f \u270d \ud83d\udd17 <code>bytes</code>, &amp; \ud83d\udd22 <code>magic_data_reader()</code> \ud83d\udd1c \ud83c\ude1a \ud83c\udfbb \u26ab\ufe0f \ud83c\udf0c.</p> <p>\ud83d\udc50, \ud83d\udc65 \ud83d\udcaa \ud83d\udce3 \ud83d\udcc8 \ud83d\udd17 \ud83d\udce8 \ud83d\udcaa.</p>"},{"location":"advanced/path-operation-advanced-configuration/#_10","title":"\ud83d\udec3 \ud83d\uddc4 \ud83c\udf9a \ud83c\udd8e","text":"<p>\u2699\ufe0f \ud83d\udc49 \ud83c\udf8f \ud83c\udfb1, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f Pydantic \ud83c\udff7 \ud83d\udd2c \ud83c\udfbb \ud83d\udd17 \ud83d\udc48 \u2934\ufe0f \ud83d\udd0c \ud83d\udec3 \ud83d\uddc4 \ud83d\udd17 \ud83d\udcc4 \u27a1 \ud83d\udee0\ufe0f.</p> <p>&amp; \ud83d\udc46 \ud83d\udcaa \ud83d\udc49 \ud83d\udea5 \ud83d\udcbd \ud83c\udd8e \ud83d\udce8 \ud83d\udeab \ud83c\udfbb.</p> <p>\ud83d\uddbc, \ud83d\udc49 \ud83c\ude38 \ud83d\udc65 \ud83d\udeab \u2699\ufe0f ReadyAPI \ud83d\udee0\ufe0f \ud83d\udee0\ufe0f \u2697 \ud83c\udfbb \ud83d\udd17 \u26aa\ufe0f\u27a1\ufe0f Pydantic \ud83c\udff7 \ud83d\udeab \ud83c\udfe7 \ud83d\udd2c \ud83c\udfbb. \ud83d\udc50, \ud83d\udc65 \ud83d\udce3 \ud83d\udce8 \ud83c\udf9a \ud83c\udd8e \ud83d\udcc1, \ud83d\udeab \ud83c\udfbb:</p> Python 3.8+ <pre><code>from typing import List\n\nimport yaml\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import HTTPException, ReadyAPI, Request\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    tags: List[str]\n\n\n@app.post(\n    \"/items/\",\n    openapi_extra={\n        \"requestBody\": {\n            \"content\": {\"application/x-yaml\": {\"schema\": Item.model_json_schema()}},\n            \"required\": True,\n        },\n    },\n)\nasync def create_item(request: Request):\n    raw_body = await request.body()\n    try:\n        data = yaml.safe_load(raw_body)\n    except yaml.YAMLError:\n        raise HTTPException(status_code=422, detail=\"Invalid YAML\")\n    try:\n        item = Item.model_validate(data)\n    except ValidationError as e:\n        raise HTTPException(status_code=422, detail=e.errors(include_url=False))\n    return item\n</code></pre> <p>\ud83d\udc50, \ud83d\udc50 \ud83d\udc65 \ud83d\udeab \u2699\ufe0f \ud83d\udd22 \ud83d\udee0\ufe0f \ud83d\udee0\ufe0f, \ud83d\udc65 \u2699\ufe0f Pydantic \ud83c\udff7 \u274e \ud83c\udfd7 \ud83c\udfbb \ud83d\udd17 \ud83d\udcbd \ud83d\udc48 \ud83d\udc65 \ud83d\udc9a \ud83d\udce8 \ud83d\udcc1.</p> <p>\u2934\ufe0f \ud83d\udc65 \u2699\ufe0f \ud83d\udce8 \ud83d\udd17, &amp; \u2697 \ud83d\udcaa <code>bytes</code>. \ud83d\udc49 \u26d3 \ud83d\udc48 ReadyAPI \ud83c\udfc6 \ud83d\udeab \ud83d\udd04 \ud83c\udfbb \ud83d\udce8 \ud83d\ude80 \ud83c\udfbb.</p> <p>&amp; \u2934\ufe0f \ud83d\udc46 \ud83d\udcdf, \ud83d\udc65 \ud83c\udfbb \ud83d\udc48 \ud83d\udcc1 \ud83c\udf9a \ud83d\udd17, &amp; \u2934\ufe0f \ud83d\udc65 \ud83d\udd04 \u2699\ufe0f \ud83c\udf8f Pydantic \ud83c\udff7 \u2714 \ud83d\udcc1 \ud83c\udf9a:</p> Python 3.8+ <pre><code>from typing import List\n\nimport yaml\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import HTTPException, ReadyAPI, Request\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    tags: List[str]\n\n\n@app.post(\n    \"/items/\",\n    openapi_extra={\n        \"requestBody\": {\n            \"content\": {\"application/x-yaml\": {\"schema\": Item.model_json_schema()}},\n            \"required\": True,\n        },\n    },\n)\nasync def create_item(request: Request):\n    raw_body = await request.body()\n    try:\n        data = yaml.safe_load(raw_body)\n    except yaml.YAMLError:\n        raise HTTPException(status_code=422, detail=\"Invalid YAML\")\n    try:\n        item = Item.model_validate(data)\n    except ValidationError as e:\n        raise HTTPException(status_code=422, detail=e.errors(include_url=False))\n    return item\n</code></pre> <p>Tip</p> <p>\ud83d\udce5 \ud83d\udc65 \ud83c\udfe4-\u2699\ufe0f \ud83c\udf8f Pydantic \ud83c\udff7.</p> <p>\u270b\ufe0f \ud83c\udf8f \ud83c\udf0c, \ud83d\udc65 \ud83d\udcaa \u2714\ufe0f \u2714 \u26ab\ufe0f \ud83c\udf8f \ud83c\udf0c.</p>"},{"location":"advanced/response-change-status-code/","title":"\ud83d\udce8 - \ud83d\udd00 \ud83d\udc54 \ud83d\udcdf","text":"<p>\ud83d\udc46 \ud83c\udfb2 \u270d \u23ed \ud83d\udc48 \ud83d\udc46 \ud83d\udcaa \u2692 \ud83d\udd22 \ud83d\udce8 \ud83d\udc54 \ud83d\udcdf.</p> <p>\u270b\ufe0f \ud83d\udcbc \ud83d\udc46 \ud83d\udcaa \ud83d\udce8 \ud83c\udf8f \ud83d\udc54 \ud83d\udcdf \ud83c\udf18 \ud83d\udd22.</p>"},{"location":"advanced/response-change-status-code/#_1","title":"\u2699\ufe0f \ud83d\udcbc","text":"<p>\ud83d\uddbc, \ud83c\udf08 \ud83d\udc48 \ud83d\udc46 \ud83d\udc9a \ud83d\udce8 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udc54 \ud83d\udcdf \"\ud83d\udc4c\" <code>200</code> \ud83d\udd22.</p> <p>\u270b\ufe0f \ud83d\udea5 \ud83d\udcbd \ud83d\udeab \ud83d\udd00, \ud83d\udc46 \ud83d\udc9a \u270d \u26ab\ufe0f, &amp; \ud83d\udce8 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udc54 \ud83d\udcdf \"\u270d\" <code>201</code>.</p> <p>\u270b\ufe0f \ud83d\udc46 \ud83d\udc9a \ud83d\udcaa \u26fd &amp; \ud83d\udddc \ud83d\udcbd \ud83d\udc46 \ud83d\udce8 \u23ee\ufe0f <code>response_model</code>.</p> <p>\ud83d\udcda \ud83d\udcbc, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>Response</code> \ud83d\udd22.</p>"},{"location":"advanced/response-change-status-code/#response","title":"\u2699\ufe0f <code>Response</code> \ud83d\udd22","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83d\udd22 \ud83c\udd8e <code>Response</code> \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22 (\ud83d\udc46 \ud83d\udcaa \ud83c\udf6a &amp; \ud83c\udf9a).</p> <p>&amp; \u2934\ufe0f \ud83d\udc46 \ud83d\udcaa \u2692 <code>status_code</code> \ud83d\udc48 \ud83d\udd00 \ud83d\udce8 \ud83c\udf9a.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Response, status\n\napp = ReadyAPI()\n\ntasks = {\"foo\": \"Listen to the Bar Fighters\"}\n\n\n@app.put(\"/get-or-create-task/{task_id}\", status_code=200)\ndef get_or_create_task(task_id: str, response: Response):\n    if task_id not in tasks:\n        tasks[task_id] = \"This didn't exist before\"\n        response.status_code = status.HTTP_201_CREATED\n    return tasks[task_id]\n</code></pre> <p>&amp; \u2934\ufe0f \ud83d\udc46 \ud83d\udcaa \ud83d\udce8 \ud83d\ude46 \ud83c\udf9a \ud83d\udc46 \ud83d\udcaa, \ud83d\udc46 \ud83d\udece \ud83d\udd1c ( <code>dict</code>, \ud83d\udcbd \ud83c\udff7, \u2652\ufe0f).</p> <p>&amp; \ud83d\udea5 \ud83d\udc46 \ud83d\udce3 <code>response_model</code>, \u26ab\ufe0f \ud83d\udd1c \u2699\ufe0f \u26fd &amp; \ud83d\udddc \ud83c\udf9a \ud83d\udc46 \ud83d\udce8.</p> <p>ReadyAPI \ud83d\udd1c \u2699\ufe0f \ud83d\udc48 \ud83d\udd00 \ud83d\udce8 \u2697 \ud83d\udc54 \ud83d\udcdf (\ud83c\udf6a &amp; \ud83c\udf9a), &amp; \ud83d\udd1c \ud83d\udeae \ud83d\udc6b \ud83c\udfc1 \ud83d\udce8 \ud83d\udc48 \ud83d\udd0c \ud83d\udcb2 \ud83d\udc46 \ud83d\udce8, \u26fd \ud83d\ude46 <code>response_model</code>.</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udce3 <code>Response</code> \ud83d\udd22 \ud83d\udd17, &amp; \u2692 \ud83d\udc54 \ud83d\udcdf \ud83d\udc6b. \u270b\ufe0f \u2714\ufe0f \ud83e\udd2f \ud83d\udc48 \ud83c\udfc1 1\ufe0f\u20e3 \u2692 \ud83d\udd1c \ud83c\udfc6.</p>"},{"location":"advanced/response-cookies/","title":"\ud83d\udce8 \ud83c\udf6a","text":""},{"location":"advanced/response-cookies/#response","title":"\u2699\ufe0f <code>Response</code> \ud83d\udd22","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83d\udd22 \ud83c\udd8e <code>Response</code> \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22.</p> <p>&amp; \u2934\ufe0f \ud83d\udc46 \ud83d\udcaa \u2692 \ud83c\udf6a \ud83d\udc48 \ud83d\udd00 \ud83d\udce8 \ud83c\udf9a.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Response\n\napp = ReadyAPI()\n\n\n@app.post(\"/cookie-and-object/\")\ndef create_cookie(response: Response):\n    response.set_cookie(key=\"fakesession\", value=\"fake-cookie-session-value\")\n    return {\"message\": \"Come to the dark side, we have cookies\"}\n</code></pre> <p>&amp; \u2934\ufe0f \ud83d\udc46 \ud83d\udcaa \ud83d\udce8 \ud83d\ude46 \ud83c\udf9a \ud83d\udc46 \ud83d\udcaa, \ud83d\udc46 \ud83d\udece \ud83d\udd1c ( <code>dict</code>, \ud83d\udcbd \ud83c\udff7, \u2652\ufe0f).</p> <p>&amp; \ud83d\udea5 \ud83d\udc46 \ud83d\udce3 <code>response_model</code>, \u26ab\ufe0f \ud83d\udd1c \u2699\ufe0f \u26fd &amp; \ud83d\udddc \ud83c\udf9a \ud83d\udc46 \ud83d\udce8.</p> <p>ReadyAPI \ud83d\udd1c \u2699\ufe0f \ud83d\udc48 \ud83d\udd00 \ud83d\udce8 \u2697 \ud83c\udf6a (\ud83c\udf9a &amp; \ud83d\udc54 \ud83d\udcdf), &amp; \ud83d\udd1c \ud83d\udeae \ud83d\udc6b \ud83c\udfc1 \ud83d\udce8 \ud83d\udc48 \ud83d\udd0c \ud83d\udcb2 \ud83d\udc46 \ud83d\udce8, \u26fd \ud83d\ude46 <code>response_model</code>.</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udce3 <code>Response</code> \ud83d\udd22 \ud83d\udd17, &amp; \u2692 \ud83c\udf6a (&amp; \ud83c\udf9a) \ud83d\udc6b.</p>"},{"location":"advanced/response-cookies/#response_1","title":"\ud83d\udce8 <code>Response</code> \ud83d\udd17","text":"<p>\ud83d\udc46 \ud83d\udcaa \u270d \ud83c\udf6a \ud83d\udd50\u2754 \ud83d\udeec <code>Response</code> \ud83d\udd17 \ud83d\udc46 \ud83d\udcdf.</p> <p>\ud83d\udc48, \ud83d\udc46 \ud83d\udcaa \u270d \ud83d\udce8 \ud83d\udd2c \ud83d\udce8 \ud83d\udce8 \ud83d\udd17.</p> <p>\u2934\ufe0f \u2692 \ud83c\udf6a \u26ab\ufe0f, &amp; \u2934\ufe0f \ud83d\udce8 \u26ab\ufe0f:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import JSONResponse\n\napp = ReadyAPI()\n\n\n@app.post(\"/cookie/\")\ndef create_cookie():\n    content = {\"message\": \"Come to the dark side, we have cookies\"}\n    response = JSONResponse(content=content)\n    response.set_cookie(key=\"fakesession\", value=\"fake-cookie-session-value\")\n    return response\n</code></pre> <p>Tip</p> <p>\u2714\ufe0f \ud83e\udd2f \ud83d\udc48 \ud83d\udea5 \ud83d\udc46 \ud83d\udce8 \ud83d\udce8 \ud83d\udd17 \u21a9\ufe0f \u2699\ufe0f <code>Response</code> \ud83d\udd22, ReadyAPI \ud83d\udd1c \ud83d\udce8 \u26ab\ufe0f \ud83d\udd17.</p> <p>, \ud83d\udc46 \ud83d\udd1c \u2714\ufe0f \u2692 \ud83d\udcad \ud83d\udc46 \ud83d\udcbd \u2611 \ud83c\udd8e. \ud83e\udd36 \u24c2. \u26ab\ufe0f \ud83d\udd17 \u23ee\ufe0f \ud83c\udfbb, \ud83d\udea5 \ud83d\udc46 \ud83d\udeec <code>JSONResponse</code>.</p> <p>&amp; \ud83d\udc48 \ud83d\udc46 \ud83d\udeab \ud83d\udce8 \ud83d\ude46 \ud83d\udcca \ud83d\udc48 \ud83d\udd1c \u2714\ufe0f \u26fd <code>response_model</code>.</p>"},{"location":"advanced/response-cookies/#i","title":"\ud83c\udf05 \u2139","text":"<p>\ud83d\udce1 \u2139</p> <p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>from starlette.responses import Response</code> \u2696\ufe0f <code>from starlette.responses import JSONResponse</code>.</p> <p>ReadyAPI \ud83d\ude9a \ud83c\udf8f <code>starlette.responses</code> <code>readyapi.responses</code> \ud83c\udfea \ud83d\udc46, \ud83d\udc69\u200d\ud83d\udcbb. \u270b\ufe0f \ud83c\udf05 \ud83d\udcaa \ud83d\udce8 \ud83d\udc5f \ud83d\udd17 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc83.</p> <p>&amp; <code>Response</code> \ud83d\udcaa \u2699\ufe0f \ud83d\udece \u2692 \ud83c\udf9a &amp; \ud83c\udf6a, ReadyAPI \ud83d\ude9a \u26ab\ufe0f <code>readyapi.Response</code>.</p> <p>\ud83d\udc40 \ud83c\udf10 \ud83d\udcaa \ud83d\udd22 &amp; \ud83c\udf9b, \u2705 \ud83e\uddfe \ud83d\udc83.</p>"},{"location":"advanced/response-directly/","title":"\ud83d\udce8 \ud83d\udce8 \ud83d\udd17","text":"<p>\ud83d\udd50\u2754 \ud83d\udc46 \u270d ReadyAPI \u27a1 \ud83d\udee0\ufe0f \ud83d\udc46 \ud83d\udcaa \ud83d\udece \ud83d\udce8 \ud83d\ude46 \ud83d\udcca \u26aa\ufe0f\u27a1\ufe0f \u26ab\ufe0f: <code>dict</code>, <code>list</code>, Pydantic \ud83c\udff7, \ud83d\udcbd \ud83c\udff7, \u2652\ufe0f.</p> <p>\ud83d\udd22, ReadyAPI \ud83d\udd1c \ud83d\udd01 \ud83d\udddc \ud83d\udc48 \ud83d\udce8 \ud83d\udcb2 \ud83c\udfbb \u2699\ufe0f <code>jsonable_encoder</code> \ud83d\udd2c \ud83c\udfbb \ud83d\udd17 \ud83d\udd22.</p> <p>\u2934\ufe0f, \u26c5 \ud83c\udf91, \u26ab\ufe0f \ud83d\udd1c \ud83d\udeae \ud83d\udc48 \ud83c\udfbb-\ud83d\udd17 \ud83d\udcbd (\u2705 <code>dict</code>) \ud83d\udd18 <code>JSONResponse</code> \ud83d\udc48 \ud83d\udd1c \u2699\ufe0f \ud83d\udce8 \ud83d\udce8 \ud83d\udc69\u200d\ud83d\udcbb.</p> <p>\u270b\ufe0f \ud83d\udc46 \ud83d\udcaa \ud83d\udce8 <code>JSONResponse</code> \ud83d\udd17 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f.</p> <p>\u26ab\ufe0f \ud83d\udcaa \u26a0, \ud83d\uddbc, \ud83d\udce8 \ud83d\udec3 \ud83c\udf9a \u2696\ufe0f \ud83c\udf6a.</p>"},{"location":"advanced/response-directly/#response","title":"\ud83d\udce8 <code>Response</code>","text":"<p>\ud83d\udc50, \ud83d\udc46 \ud83d\udcaa \ud83d\udce8 \ud83d\ude46 <code>Response</code> \u2696\ufe0f \ud83d\ude46 \ud83c\udfa7-\ud83c\udf93 \u26ab\ufe0f.</p> <p>Tip</p> <p><code>JSONResponse</code> \u26ab\ufe0f \ud83c\udfa7-\ud83c\udf93 <code>Response</code>.</p> <p>&amp; \ud83d\udd50\u2754 \ud83d\udc46 \ud83d\udce8 <code>Response</code>, ReadyAPI \ud83d\udd1c \ud83d\udeb6\u200d\u2640\ufe0f \u26ab\ufe0f \ud83d\udd17.</p> <p>\u26ab\ufe0f \ud83c\udfc6 \ud83d\udeab \ud83d\ude46 \ud83d\udcbd \ud83d\udee0\ufe0f \u23ee\ufe0f Pydantic \ud83c\udff7, \u26ab\ufe0f \ud83c\udfc6 \ud83d\udeab \ud83d\udddc \ud83c\udf9a \ud83d\ude46 \ud83c\udd8e, \u2652\ufe0f.</p> <p>\ud83d\udc49 \ud83e\udd1d \ud83d\udc46 \ud83d\udcda \ud83d\udcaa. \ud83d\udc46 \ud83d\udcaa \ud83d\udce8 \ud83d\ude46 \ud83d\udcca \ud83c\udd8e, \ud83d\udd10 \ud83d\ude46 \ud83d\udcbd \ud83d\udcc4 \u2696\ufe0f \ud83d\udd2c, \u2652\ufe0f.</p>"},{"location":"advanced/response-directly/#jsonable_encoder-response","title":"\u2699\ufe0f <code>jsonable_encoder</code> <code>Response</code>","text":"<p>\u21a9\ufe0f ReadyAPI \ud83d\udeab \ud83d\ude46 \ud83d\udd00 <code>Response</code> \ud83d\udc46 \ud83d\udce8, \ud83d\udc46 \u2714\ufe0f \u2692 \ud83d\udcad \u26ab\ufe0f \ud83c\udf9a \ud83d\udd1c \u26ab\ufe0f.</p> <p>\ud83d\uddbc, \ud83d\udc46 \ud83d\udeab\ud83d\udd1c \ud83d\udeae Pydantic \ud83c\udff7 <code>JSONResponse</code> \ud83c\udf75 \ud83e\udd47 \ud83c\udfed \u26ab\ufe0f <code>dict</code> \u23ee\ufe0f \ud83c\udf10 \ud83d\udcca \ud83c\udd8e (\ud83d\udc96 <code>datetime</code>, <code>UUID</code>, \u2652\ufe0f) \ud83d\udddc \ud83c\udfbb-\ud83d\udd17 \ud83c\udd8e.</p> <p>\ud83d\udcda \ud83d\udcbc, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>jsonable_encoder</code> \ud83d\udddc \ud83d\udc46 \ud83d\udcca \u23ed \ud83d\udeb6\u200d\u2640\ufe0f \u26ab\ufe0f \ud83d\udce8:</p> Python 3.8+ <pre><code>from datetime import datetime\nfrom typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\nfrom readyapi.responses import JSONResponse\n\n\nclass Item(BaseModel):\n    title: str\n    timestamp: datetime\n    description: Union[str, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{id}\")\ndef update_item(id: str, item: Item):\n    json_compatible_item_data = jsonable_encoder(item)\n    return JSONResponse(content=json_compatible_item_data)\n</code></pre> <p>\ud83d\udce1 \u2139</p> <p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>from starlette.responses import JSONResponse</code>.</p> <p>ReadyAPI \ud83d\ude9a \ud83c\udf8f <code>starlette.responses</code> <code>readyapi.responses</code> \ud83c\udfea \ud83d\udc46, \ud83d\udc69\u200d\ud83d\udcbb. \u270b\ufe0f \ud83c\udf05 \ud83d\udcaa \ud83d\udce8 \ud83d\udc5f \ud83d\udd17 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc83.</p>"},{"location":"advanced/response-directly/#response_1","title":"\ud83d\udeec \ud83d\udec3 <code>Response</code>","text":"<p>\ud83d\uddbc \ud83d\udd1b \ud83c\udfa6 \ud83c\udf10 \ud83c\udf55 \ud83d\udc46 \ud83d\udcaa, \u270b\ufe0f \u26ab\ufe0f \ud83d\udeab \ud83d\udcf6 \u26a0, \ud83d\udc46 \ud83d\udcaa \u2714\ufe0f \ud83d\udce8 <code>item</code> \ud83d\udd17, &amp; ReadyAPI \ud83d\udd1c \ud83d\udeae \u26ab\ufe0f <code>JSONResponse</code> \ud83d\udc46, \ud83c\udfed \u26ab\ufe0f <code>dict</code>, \u2652\ufe0f. \ud83c\udf10 \ud83d\udc48 \ud83d\udd22.</p> <p>\ud83d\udd1c, \u27a1\ufe0f \ud83d\udc40 \u2754 \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83d\udc48 \ud83d\udce8 \ud83d\udec3 \ud83d\udce8.</p> <p>\u27a1\ufe0f \ud83d\udcac \ud83d\udc48 \ud83d\udc46 \ud83d\udc9a \ud83d\udce8 \ud83d\udcc2 \ud83d\udce8.</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udeae \ud83d\udc46 \ud83d\udcc2 \ud83c\udf9a \ud83c\udfbb, \ud83d\udeae \u26ab\ufe0f <code>Response</code>, &amp; \ud83d\udce8 \u26ab\ufe0f:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Response\n\napp = ReadyAPI()\n\n\n@app.get(\"/legacy/\")\ndef get_legacy_data():\n    data = \"\"\"&lt;?xml version=\"1.0\"?&gt;\n    &lt;shampoo&gt;\n    &lt;Header&gt;\n        Apply shampoo here.\n    &lt;/Header&gt;\n    &lt;Body&gt;\n        You'll have to use soap here.\n    &lt;/Body&gt;\n    &lt;/shampoo&gt;\n    \"\"\"\n    return Response(content=data, media_type=\"application/xml\")\n</code></pre>"},{"location":"advanced/response-directly/#_2","title":"\ud83d\uddd2","text":"<p>\ud83d\udd50\u2754 \ud83d\udc46 \ud83d\udce8 <code>Response</code> \ud83d\udd17 \ud83d\udeae \ud83d\udcca \ud83d\udeab \u2714, \ud83d\udddc (\ud83c\udfbb), \ud83d\udeab \ud83d\udcc4 \ud83d\udd01.</p> <p>\u270b\ufe0f \ud83d\udc46 \ud83d\udcaa \ud83d\udcc4 \u26ab\ufe0f \ud83d\udd2c \ud83c\udf16 \ud83d\udce8 \ud83d\uddc4.</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udc40 \u23ea \ud83d\udcc4 \u2754 \u2699\ufe0f/\ud83d\udce3 \ud83d\udc49 \ud83d\udec3 <code>Response</code>\u24c2 \u23ea \u2714\ufe0f \ud83c\udfe7 \ud83d\udcbd \ud83d\udee0\ufe0f, \ud83e\uddfe, \u2652\ufe0f.</p>"},{"location":"advanced/response-headers/","title":"\ud83d\udce8 \ud83c\udf9a","text":""},{"location":"advanced/response-headers/#response","title":"\u2699\ufe0f <code>Response</code> \ud83d\udd22","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83d\udd22 \ud83c\udd8e <code>Response</code> \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22 (\ud83d\udc46 \ud83d\udcaa \ud83c\udf6a).</p> <p>&amp; \u2934\ufe0f \ud83d\udc46 \ud83d\udcaa \u2692 \ud83c\udf9a \ud83d\udc48 \ud83d\udd00 \ud83d\udce8 \ud83c\udf9a.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Response\n\napp = ReadyAPI()\n\n\n@app.get(\"/headers-and-object/\")\ndef get_headers(response: Response):\n    response.headers[\"X-Cat-Dog\"] = \"alone in the world\"\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>&amp; \u2934\ufe0f \ud83d\udc46 \ud83d\udcaa \ud83d\udce8 \ud83d\ude46 \ud83c\udf9a \ud83d\udc46 \ud83d\udcaa, \ud83d\udc46 \ud83d\udece \ud83d\udd1c ( <code>dict</code>, \ud83d\udcbd \ud83c\udff7, \u2652\ufe0f).</p> <p>&amp; \ud83d\udea5 \ud83d\udc46 \ud83d\udce3 <code>response_model</code>, \u26ab\ufe0f \ud83d\udd1c \u2699\ufe0f \u26fd &amp; \ud83d\udddc \ud83c\udf9a \ud83d\udc46 \ud83d\udce8.</p> <p>ReadyAPI \ud83d\udd1c \u2699\ufe0f \ud83d\udc48 \ud83d\udd00 \ud83d\udce8 \u2697 \ud83c\udf9a (\ud83c\udf6a &amp; \ud83d\udc54 \ud83d\udcdf), &amp; \ud83d\udd1c \ud83d\udeae \ud83d\udc6b \ud83c\udfc1 \ud83d\udce8 \ud83d\udc48 \ud83d\udd0c \ud83d\udcb2 \ud83d\udc46 \ud83d\udce8, \u26fd \ud83d\ude46 <code>response_model</code>.</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udce3 <code>Response</code> \ud83d\udd22 \ud83d\udd17, &amp; \u2692 \ud83c\udf9a (&amp; \ud83c\udf6a) \ud83d\udc6b.</p>"},{"location":"advanced/response-headers/#response_1","title":"\ud83d\udce8 <code>Response</code> \ud83d\udd17","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udeae \ud83c\udf9a \ud83d\udd50\u2754 \ud83d\udc46 \ud83d\udce8 <code>Response</code> \ud83d\udd17.</p> <p>\u270d \ud83d\udce8 \ud83d\udd2c \ud83d\udce8 \ud83d\udce8 \ud83d\udd17 &amp; \ud83d\udeb6\u200d\u2640\ufe0f \ud83c\udf9a \ud83c\udf16 \ud83d\udd22:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import JSONResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/headers/\")\ndef get_headers():\n    content = {\"message\": \"Hello World\"}\n    headers = {\"X-Cat-Dog\": \"alone in the world\", \"Content-Language\": \"en-US\"}\n    return JSONResponse(content=content, headers=headers)\n</code></pre> <p>\ud83d\udce1 \u2139</p> <p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>from starlette.responses import Response</code> \u2696\ufe0f <code>from starlette.responses import JSONResponse</code>.</p> <p>ReadyAPI \ud83d\ude9a \ud83c\udf8f <code>starlette.responses</code> <code>readyapi.responses</code> \ud83c\udfea \ud83d\udc46, \ud83d\udc69\u200d\ud83d\udcbb. \u270b\ufe0f \ud83c\udf05 \ud83d\udcaa \ud83d\udce8 \ud83d\udc5f \ud83d\udd17 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc83.</p> <p>&amp; <code>Response</code> \ud83d\udcaa \u2699\ufe0f \ud83d\udece \u2692 \ud83c\udf9a &amp; \ud83c\udf6a, ReadyAPI \ud83d\ude9a \u26ab\ufe0f <code>readyapi.Response</code>.</p>"},{"location":"advanced/response-headers/#_2","title":"\ud83d\udec3 \ud83c\udf9a","text":"<p>\u2714\ufe0f \ud83e\udd2f \ud83d\udc48 \ud83d\udec3 \u00a9 \ud83c\udf9a \ud83d\udcaa \ud83d\udeae \u2699\ufe0f '\u2716-' \ud83d\udd21.</p> <p>\u270b\ufe0f \ud83d\udea5 \ud83d\udc46 \u2714\ufe0f \ud83d\udec3 \ud83c\udf9a \ud83d\udc48 \ud83d\udc46 \ud83d\udc9a \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udda5 \ud83d\udcaa \ud83d\udc40, \ud83d\udc46 \ud83d\udcaa \ud83d\udeae \ud83d\udc6b \ud83d\udc46 \u269c \ud83d\udcf3 (\u270d \ud83c\udf05 \u269c (\u2716\ufe0f-\ud83c\udde8\ud83c\uddf3 \u2139 \ud83e\udd1d)), \u2699\ufe0f \ud83d\udd22 <code>expose_headers</code> \ud83d\udcc4 \ud83d\udc83 \u269c \ud83e\ude7a.</p>"},{"location":"advanced/settings/","title":"\u2692 &amp; \ud83c\udf10 \ud83d\udd22","text":"<p>\ud83d\udcda \ud83d\udcbc \ud83d\udc46 \ud83c\ude38 \ud83d\udcaa \ud83d\udcaa \ud83d\udd22 \u2692 \u2696\ufe0f \ud83d\udcf3, \ud83d\uddbc \u3299 \ud83d\udd11, \ud83d\udcbd \ud83c\udf93, \ud83c\udf93 \ud83d\udce7 \ud83d\udc15\u200d\ud83e\uddba, \u2652\ufe0f.</p> <p>\ud83c\udfc6 \ud83d\udc6b \u2692 \ud83d\udd22 (\ud83d\udcaa \ud83d\udd00), \ud83d\udc96 \ud83d\udcbd \ud83d\udcdb. &amp; \ud83d\udcda \ud83d\udcaa \ud83d\udebf, \ud83d\udc96 \u3299.</p> <p>\ud83d\udc49 \ud83e\udd14 \u26ab\ufe0f \u26a0 \ud83d\ude9a \ud83d\udc6b \ud83c\udf10 \ud83d\udd22 \ud83d\udc48 \u270d \ud83c\ude38.</p>"},{"location":"advanced/settings/#_2","title":"\ud83c\udf10 \ud83d\udd22","text":"<p>Tip</p> <p>\ud83d\udea5 \ud83d\udc46 \u23ea \ud83d\udcad \u26ab\ufe0f\u2754 \"\ud83c\udf10 \ud83d\udd22\" &amp; \u2754 \u2699\ufe0f \ud83d\udc6b, \ud83d\udcad \ud83c\udd93 \ud83d\udeb6 \u23ed \ud83d\udcc4 \ud83d\udd1b.</p> <p>\ud83c\udf10 \ud83d\udd22 (\ud83d\udcad \"\ud83c\udde8\ud83c\uddfb {\") \ud83d\udd22 \ud83d\udc48 \ud83d\udd96 \ud83c\udfde \ud83d\udc0d \ud83d\udcdf, \ud83c\udfc3\u200d\u2642 \u2699\ufe0f, &amp; \ud83d\udcaa \u270d \ud83d\udc46 \ud83d\udc0d \ud83d\udcdf (\u2696\ufe0f \ud83c\udf8f \ud83d\udccb \ud83d\udc4d).</p> <p>\ud83d\udc46 \ud83d\udcaa \u270d &amp; \u2699\ufe0f \ud83c\udf10 \ud83d\udd22 \ud83d\udc1a, \ud83c\udf75 \ud83d\udc86\u200d\u2642 \ud83d\udc0d:</p> \ud83d\udcbe, \ud83c\uddf8\ud83c\uddfb, \ud83d\udeaa \ud83c\udf89\ud83d\udeaa \ud83d\udccb <pre><code>// You could create an env var MY_NAME with\n$ export MY_NAME=\"Wade Wilson\"\n\n// Then you could use it with other programs, like\n$ echo \"Hello $MY_NAME\"\n\nHello Wade Wilson\n</code></pre> <pre><code>// Create an env var MY_NAME\n$ $Env:MY_NAME = \"Wade Wilson\"\n\n// Use it with other programs, like\n$ echo \"Hello $Env:MY_NAME\"\n\nHello Wade Wilson\n</code></pre>"},{"location":"advanced/settings/#_3","title":"\u270d \ud83c\udde8\ud83c\uddfb {\ud83d\udc0d","text":"<p>\ud83d\udc46 \ud83d\udcaa \u270d \ud83c\udf10 \ud83d\udd22 \ud83c\udfde \ud83d\udc0d, \ud83d\udcf6 (\u2696\ufe0f \u23ee\ufe0f \ud83d\ude46 \ud83c\udf8f \ud83d\udc69\u200d\ud83d\udd2c), &amp; \u2934\ufe0f \u270d \ud83d\udc6b \ud83d\udc0d.</p> <p>\ud83d\uddbc \ud83d\udc46 \ud83d\udcaa \u2714\ufe0f \ud83d\udcc1 <code>main.py</code> \u23ee\ufe0f:</p> <pre><code>import os\n\nname = os.getenv(\"MY_NAME\", \"World\")\nprint(f\"Hello {name} from Python\")\n</code></pre> <p>Tip</p> <p>\ud83e\udd48 \u274c <code>os.getenv()</code> \ud83d\udd22 \ud83d\udcb2 \ud83d\udce8.</p> <p>\ud83d\udea5 \ud83d\udeab \ud83d\ude9a, \u26ab\ufe0f <code>None</code> \ud83d\udd22, \ud83d\udce5 \ud83d\udc65 \ud83d\ude9a <code>\"World\"</code> \ud83d\udd22 \ud83d\udcb2 \u2699\ufe0f.</p> <p>\u2934\ufe0f \ud83d\udc46 \ud83d\udcaa \ud83e\udd19 \ud83d\udc48 \ud83d\udc0d \ud83d\udccb:</p> <pre><code>// Here we don't set the env var yet\n$ python main.py\n\n// As we didn't set the env var, we get the default value\n\nHello World from Python\n\n// But if we create an environment variable first\n$ export MY_NAME=\"Wade Wilson\"\n\n// And then call the program again\n$ python main.py\n\n// Now it can read the environment variable\n\nHello Wade Wilson from Python\n</code></pre> <p>\ud83c\udf10 \ud83d\udd22 \ud83d\udcaa \u2692 \ud83c\udfde \ud83d\udcdf, \u270b\ufe0f \ud83d\udcaa \u270d \ud83d\udcdf, &amp; \ud83d\udeab \u2714\ufe0f \ud83c\udfea (\ud83d\udc95 <code>git</code>) \u23ee\ufe0f \ud83c\udf82 \ud83d\udcc1, \u26ab\ufe0f \u26a0 \u2699\ufe0f \ud83d\udc6b \ud83d\udcf3 \u2696\ufe0f \u2692.</p> <p>\ud83d\udc46 \ud83d\udcaa \u270d \ud83c\udf10 \ud83d\udd22 \ud83d\udd74 \ud83c\udfaf \ud83d\udccb \ud83d\udc7c, \ud83d\udc48 \ud83d\udd74 \ud83d\udcaa \ud83d\udc48 \ud83d\udccb, &amp; \ud83d\udd74 \ud83d\udeae \ud83d\udcd0.</p> <p>\ud83d\udc48, \u270d \u26ab\ufe0f \u25b6\ufe0f\ufe0f \u23ed \ud83d\udccb \u26ab\ufe0f, \ud83d\udd1b \ud83c\udf8f \u23f8:</p> <pre><code>// Create an env var MY_NAME in line for this program call\n$ MY_NAME=\"Wade Wilson\" python main.py\n\n// Now it can read the environment variable\n\nHello Wade Wilson from Python\n\n// The env var no longer exists afterwards\n$ python main.py\n\nHello World from Python\n</code></pre> <p>Tip</p> <p>\ud83d\udc46 \ud83d\udcaa \u270d \ud83c\udf05 \ud83d\udd03 \u26ab\ufe0f 1\ufe0f\u20e32\ufe0f\u20e3-\u2696 \ud83d\udcf1: \ud83d\udcc1.</p>"},{"location":"advanced/settings/#_4","title":"\ud83c\udd8e &amp; \ud83d\udd2c","text":"<p>\ud83d\udc6b \ud83c\udf10 \ud83d\udd22 \ud83d\udcaa \ud83d\udd74 \ud83c\udf75 \u270d \ud83c\udfbb, \ud83d\udc6b \ud83d\udd22 \ud83d\udc0d &amp; \u2714\ufe0f \ud83d\udd17 \u23ee\ufe0f \ud83c\udf8f \ud83d\udccb &amp; \ud83c\udf82 \u2699\ufe0f (&amp; \u23ee\ufe0f \ud83c\udf8f \ud83c\udfc3\u200d\u2642 \u2699\ufe0f, \ud83d\udcbe, \ud83d\udeaa, \ud83c\uddf8\ud83c\uddfb).</p> <p>\ud83d\udc48 \u26d3 \ud83d\udc48 \ud83d\ude46 \ud83d\udcb2 \u270d \ud83d\udc0d \u26aa\ufe0f\u27a1\ufe0f \ud83c\udf10 \ud83d\udd22 \ud83d\udd1c <code>str</code>, &amp; \ud83d\ude46 \ud83d\udee0\ufe0f \ud83c\udf8f \ud83c\udd8e \u2696\ufe0f \ud83d\udd2c \u2714\ufe0f \ud83d\udd28 \ud83d\udcdf.</p>"},{"location":"advanced/settings/#pydantic-settings","title":"Pydantic <code>Settings</code>","text":"<p>\ud83d\udc50, Pydantic \ud83d\ude9a \ud83d\udc51 \ud83d\ude99 \ud83c\udf75 \ud83d\udc6b \u2692 \ud83d\udc5f \u26aa\ufe0f\u27a1\ufe0f \ud83c\udf10 \ud83d\udd22 \u23ee\ufe0f Pydantic: \u2692 \ud83e\uddfe.</p>"},{"location":"advanced/settings/#settings","title":"\u270d <code>Settings</code> \ud83c\udf9a","text":"<p>\ud83d\uddc4 <code>BaseSettings</code> \u26aa\ufe0f\u27a1\ufe0f Pydantic &amp; \u270d \ud83c\udfa7-\ud83c\udf93, \ud83d\udcf6 \ud83c\udf05 \ud83d\udc96 \u23ee\ufe0f Pydantic \ud83c\udff7.</p> <p>\ud83c\udf8f \ud83c\udf0c \u23ee\ufe0f Pydantic \ud83c\udff7, \ud83d\udc46 \ud83d\udce3 \ud83c\udf93 \ud83d\udd22 \u23ee\ufe0f \ud83c\udd8e \u270d, &amp; \ud83c\udfb2 \ud83d\udd22 \ud83d\udcb2.</p> <p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83c\udf10 \ud83c\udf8f \ud83d\udd2c \u2692 &amp; \ud83e\uddf0 \ud83d\udc46 \u2699\ufe0f Pydantic \ud83c\udff7, \ud83d\udc96 \ud83c\udf8f \ud83d\udcca \ud83c\udd8e &amp; \ud83c\udf16 \ud83d\udd2c \u23ee\ufe0f <code>Field()</code>.</p> Python 3.8+ <pre><code>from pydantic_settings import BaseSettings\nfrom readyapi import ReadyAPI\n\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n\n\nsettings = Settings()\napp = ReadyAPI()\n\n\n@app.get(\"/info\")\nasync def info():\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }\n</code></pre> <p>Tip</p> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udc9a \ud83d\udd73 \u23e9 \ud83d\udcc1 &amp; \ud83d\udccb, \ud83d\udeab \u2699\ufe0f \ud83d\udc49 \ud83d\uddbc, \u2699\ufe0f \ud83c\udfc1 1\ufe0f\u20e3 \ud83d\udd1b.</p> <p>\u2934\ufe0f, \ud83d\udd50\u2754 \ud83d\udc46 \u270d \ud83d\udc50 \ud83d\udc48 <code>Settings</code> \ud83c\udf93 (\ud83d\udc49 \ud83d\udcbc, <code>settings</code> \ud83c\udf9a), Pydantic \ud83d\udd1c \u270d \ud83c\udf10 \ud83d\udd22 \ud83d\udcbc-\ud83d\ude1b \ud83c\udf0c,, \u2196-\ud83d\udcbc \ud83d\udd22 <code>APP_NAME</code> \ud83d\udd1c \u270d \ud83d\udd22 <code>app_name</code>.</p> <p>\u23ed \u26ab\ufe0f \ud83d\udd1c \ud83d\udddc &amp; \u2714 \ud83d\udcbd. , \ud83d\udd50\u2754 \ud83d\udc46 \u2699\ufe0f \ud83d\udc48 <code>settings</code> \ud83c\udf9a, \ud83d\udc46 \ud83d\udd1c \u2714\ufe0f \ud83d\udcca \ud83c\udd8e \ud83d\udc46 \ud83d\udce3 (\u2705 <code>items_per_user</code> \ud83d\udd1c <code>int</code>).</p>"},{"location":"advanced/settings/#settings_1","title":"\u2699\ufe0f <code>settings</code>","text":"<p>\u2934\ufe0f \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83c\udd95 <code>settings</code> \ud83c\udf9a \ud83d\udc46 \ud83c\ude38:</p> Python 3.8+ <pre><code>from pydantic_settings import BaseSettings\nfrom readyapi import ReadyAPI\n\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n\n\nsettings = Settings()\napp = ReadyAPI()\n\n\n@app.get(\"/info\")\nasync def info():\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }\n</code></pre>"},{"location":"advanced/settings/#_5","title":"\ud83c\udfc3 \ud83d\udcbd","text":"<p>\u23ed, \ud83d\udc46 \ud83d\udd1c \ud83c\udfc3 \ud83d\udcbd \ud83d\udeb6\u200d\u2640\ufe0f \ud83d\udcf3 \ud83c\udf10 \ud83d\udd22, \ud83d\uddbc \ud83d\udc46 \ud83d\udcaa \u2692 <code>ADMIN_EMAIL</code> &amp; <code>APP_NAME</code> \u23ee\ufe0f:</p> <pre><code>$ ADMIN_EMAIL=\"deadpool@example.com\" APP_NAME=\"ChimichangApp\" uvicorn main:app\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>Tip</p> <p>\u2692 \ud83d\udc97 \ud83c\udde8\ud83c\uddfb {\ud83d\udc41 \ud83d\udccb \ud83c\udf8f \ud83d\udc6b \u23ee\ufe0f \ud83d\ude80, &amp; \ud83d\udeae \ud83d\udc6b \ud83c\udf10 \u23ed \ud83d\udccb.</p> <p>&amp; \u2934\ufe0f <code>admin_email</code> \u2692 \ud83d\udd1c \u2692 <code>\"deadpool@example.com\"</code>.</p> <p><code>app_name</code> \ud83d\udd1c <code>\"ChimichangApp\"</code>.</p> <p>&amp; <code>items_per_user</code> \ud83d\udd1c \ud83d\udea7 \ud83d\udeae \ud83d\udd22 \ud83d\udcb2 <code>50</code>.</p>"},{"location":"advanced/settings/#1","title":"\u2692 \u27951\ufe0f\u20e3 \ud83d\udd79","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udeae \ud83d\udc48 \u2692 \u27951\ufe0f\u20e3 \ud83d\udd79 \ud83d\udcc1 \ud83d\udc46 \ud83d\udc40 \ud83e\udd8f \ud83c\ude38 - \ud83d\udc97 \ud83d\udcc1.</p> <p>\ud83d\uddbc, \ud83d\udc46 \ud83d\udcaa \u2714\ufe0f \ud83d\udcc1 <code>config.py</code> \u23ee\ufe0f:</p> Python 3.8+ <pre><code>from pydantic_settings import BaseSettings\n\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n\n\nsettings = Settings()\n</code></pre> <p>&amp; \u2934\ufe0f \u2699\ufe0f \u26ab\ufe0f \ud83d\udcc1 <code>main.py</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\nfrom .config import settings\n\napp = ReadyAPI()\n\n\n@app.get(\"/info\")\nasync def info():\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }\n</code></pre> <p>Tip</p> <p>\ud83d\udc46 \ud83d\udd1c \ud83d\udcaa \ud83d\udcc1 <code>__init__.py</code> \ud83d\udc46 \ud83d\udc40 \ud83d\udd1b \ud83e\udd8f \ud83c\ude38 - \ud83d\udc97 \ud83d\udcc1.</p>"},{"location":"advanced/settings/#_6","title":"\u2692 \ud83d\udd17","text":"<p>\ud83c\udf7e \u26ab\ufe0f 5\ufe0f\u20e3\ud83d\udcc6 \u26a0 \ud83d\ude9a \u2692 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udd17, \u21a9\ufe0f \u2714\ufe0f \ud83c\udf10 \ud83c\udf9a \u23ee\ufe0f <code>settings</code> \ud83d\udc48 \u2699\ufe0f \ud83c\udf10.</p> <p>\ud83d\udc49 \ud83d\udcaa \u2734\ufe0f \u26a0 \u23ee\ufe0f \ud83d\udd2c, \u26ab\ufe0f \ud83d\udcf6 \u23e9 \ud83d\udd10 \ud83d\udd17 \u23ee\ufe0f \ud83d\udc46 \ud83d\udc4d \ud83d\udec3 \u2692.</p>"},{"location":"advanced/settings/#_7","title":"\ud83d\udcc1 \ud83d\udcc1","text":"<p>\ud83d\udc5f \u26aa\ufe0f\u27a1\ufe0f \u23ee\ufe0f \ud83d\uddbc, \ud83d\udc46 <code>config.py</code> \ud83d\udcc1 \ud83d\udcaa \ud83d\udc40 \ud83d\udc96:</p> Python 3.8+ <pre><code>from pydantic_settings import BaseSettings\n\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n</code></pre> <p>\ud83d\udc40 \ud83d\udc48 \ud83d\udd1c \ud83d\udc65 \ud83d\udeab \u270d \ud83d\udd22 \ud83d\udc50 <code>settings = Settings()</code>.</p>"},{"location":"advanced/settings/#_8","title":"\ud83d\udc51 \ud83d\udcf1 \ud83d\udcc1","text":"<p>\ud83d\udd1c \ud83d\udc65 \u270d \ud83d\udd17 \ud83d\udc48 \ud83d\udce8 \ud83c\udd95 <code>config.Settings()</code>.</p> Python 3.8+ <pre><code>from functools import lru_cache\n\nfrom readyapi import Depends, ReadyAPI\n\nfrom .config import Settings\n\napp = ReadyAPI()\n\n\n@lru_cache\ndef get_settings():\n    return Settings()\n\n\n@app.get(\"/info\")\nasync def info(settings: Settings = Depends(get_settings)):\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }\n</code></pre> <p>Tip</p> <p>\ud83d\udc65 \ud83d\udd1c \ud83d\udd2c <code>@lru_cache</code> \ud83c\udf56.</p> <p>\ud83d\udd1c \ud83d\udc46 \ud83d\udcaa \ud83e\udd14 <code>get_settings()</code> \ud83d\ude10 \ud83d\udd22.</p> <p>&amp; \u2934\ufe0f \ud83d\udc65 \ud83d\udcaa \ud83d\ude9a \u26ab\ufe0f \u26aa\ufe0f\u27a1\ufe0f \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22 \ud83d\udd17 &amp; \u2699\ufe0f \u26ab\ufe0f \ud83d\ude46 \ud83d\udc65 \ud83d\udcaa \u26ab\ufe0f.</p> Python 3.8+ <pre><code>from functools import lru_cache\n\nfrom readyapi import Depends, ReadyAPI\n\nfrom .config import Settings\n\napp = ReadyAPI()\n\n\n@lru_cache\ndef get_settings():\n    return Settings()\n\n\n@app.get(\"/info\")\nasync def info(settings: Settings = Depends(get_settings)):\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }\n</code></pre>"},{"location":"advanced/settings/#_9","title":"\u2692 &amp; \ud83d\udd2c","text":"<p>\u2934\ufe0f \u26ab\ufe0f \ud83d\udd1c \ud83d\udcf6 \u23e9 \ud83d\ude9a \ud83c\udf8f \u2692 \ud83c\udf9a \u23ee\ufe0f \ud83d\udd2c \ud83c\udfd7 \ud83d\udd17 \ud83d\udd10 <code>get_settings</code>:</p> Python 3.8+ <pre><code>from readyapi.testclient import TestClient\n\nfrom .config import Settings\nfrom .main import app, get_settings\n\nclient = TestClient(app)\n\n\ndef get_settings_override():\n    return Settings(admin_email=\"testing_admin@example.com\")\n\n\napp.dependency_overrides[get_settings] = get_settings_override\n\n\ndef test_app():\n    response = client.get(\"/info\")\n    data = response.json()\n    assert data == {\n        \"app_name\": \"Awesome API\",\n        \"admin_email\": \"testing_admin@example.com\",\n        \"items_per_user\": 50,\n    }\n</code></pre> <p>\ud83d\udd17 \ud83d\udd10 \ud83d\udc65 \u2692 \ud83c\udd95 \ud83d\udcb2 <code>admin_email</code> \ud83d\udd50\u2754 \ud83c\udfd7 \ud83c\udd95 <code>Settings</code> \ud83c\udf9a, &amp; \u2934\ufe0f \ud83d\udc65 \ud83d\udce8 \ud83d\udc48 \ud83c\udd95 \ud83c\udf9a.</p> <p>\u2934\ufe0f \ud83d\udc65 \ud83d\udcaa \ud83d\udcaf \ud83d\udc48 \u26ab\ufe0f \u2699\ufe0f.</p>"},{"location":"advanced/settings/#env","title":"\ud83d\udc42 <code>.env</code> \ud83d\udcc1","text":"<p>\ud83d\udea5 \ud83d\udc46 \u2714\ufe0f \ud83d\udcda \u2692 \ud83d\udc48 \ud83c\udfb2 \ud83d\udd00 \ud83d\udcda, \ud83c\udfb2 \ud83c\udf8f \ud83c\udf10, \u26ab\ufe0f 5\ufe0f\u20e3\ud83d\udcc6 \u26a0 \ud83d\udeae \ud83d\udc6b \ud83d\udd1b \ud83d\udcc1 &amp; \u2934\ufe0f \u270d \ud83d\udc6b \u26aa\ufe0f\u27a1\ufe0f \u26ab\ufe0f \ud83d\udea5 \ud83d\udc6b \ud83c\udf10 \ud83d\udd22.</p> <p>\ud83d\udc49 \ud83d\udca1 \u26a0 \ud83e\udd43 \ud83d\udc48 \u26ab\ufe0f \u2714\ufe0f \ud83d\udcdb, \ud83d\udc6b \ud83c\udf10 \ud83d\udd22 \ud83d\udece \ud83e\udd49 \ud83d\udcc1 <code>.env</code>, &amp; \ud83d\udcc1 \ud83e\udd19 \"\ud83c\udde8\ud83c\uddfb\".</p> <p>Tip</p> <p>\ud83d\udcc1 \u25b6\ufe0f \u23ee\ufe0f \u2763 (<code>.</code>) \ud83d\udd75\u200d\u2642 \ud83d\udcc1 \ud83d\udda5-\ud83d\udc96 \u2699\ufe0f, \ud83d\udc96 \ud83d\udcbe &amp; \ud83c\uddf8\ud83c\uddfb.</p> <p>\u270b\ufe0f \ud83c\udde8\ud83c\uddfb \ud83d\udcc1 \ud83d\udeab \ud83e\udd19 \u2714\ufe0f \u2714\ufe0f \ud83d\udc48 \u2611 \ud83d\udcc1.</p> <p>Pydantic \u2714\ufe0f \ud83d\udc15\u200d\ud83e\uddba \ud83d\udc42 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc49 \ud83c\udd8e \ud83d\udcc1 \u2699\ufe0f \ud83d\udd22 \ud83d\uddc3. \ud83d\udc46 \ud83d\udcaa \u270d \ud83c\udf16 Pydantic \u2692: \ud83c\udde8\ud83c\uddfb (.\ud83c\udde8\ud83c\uddfb) \ud83d\udc15\u200d\ud83e\uddba.</p> <p>Tip</p> <p>\ud83d\udc49 \ud83d\udc77, \ud83d\udc46 \ud83d\udcaa <code>pip install python-dotenv</code>.</p>"},{"location":"advanced/settings/#env_1","title":"<code>.env</code> \ud83d\udcc1","text":"<p>\ud83d\udc46 \ud83d\udcaa \u2714\ufe0f <code>.env</code> \ud83d\udcc1 \u23ee\ufe0f:</p> <pre><code>ADMIN_EMAIL=\"deadpool@example.com\"\nAPP_NAME=\"ChimichangApp\"\n</code></pre>"},{"location":"advanced/settings/#env_2","title":"\u270d \u2692 \u26aa\ufe0f\u27a1\ufe0f <code>.env</code>","text":"<p>&amp; \u2934\ufe0f \u2139 \ud83d\udc46 <code>config.py</code> \u23ee\ufe0f:</p> Python 3.8+ <pre><code>from pydantic_settings import BaseSettings\n\n\nclass Settings(BaseSettings):\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n\n    class Config:\n        env_file = \".env\"\n</code></pre> <p>\ud83d\udce5 \ud83d\udc65 \u270d \ud83c\udf93 <code>Config</code> \ud83d\udd18 \ud83d\udc46 Pydantic <code>Settings</code> \ud83c\udf93, &amp; \u2692 <code>env_file</code> \ud83d\udcc1 \u23ee\ufe0f \ud83c\udde8\ud83c\uddfb \ud83d\udcc1 \ud83d\udc65 \ud83d\udc9a \u2699\ufe0f.</p> <p>Tip</p> <p><code>Config</code> \ud83c\udf93 \u2699\ufe0f Pydantic \ud83d\udcf3. \ud83d\udc46 \ud83d\udcaa \u270d \ud83c\udf16 Pydantic \ud83c\udff7 \ud83d\udcc1</p>"},{"location":"advanced/settings/#settings-lru_cache","title":"\ud83c\udfd7 <code>Settings</code> \ud83d\udd74 \ud83d\udd50 \u23ee\ufe0f <code>lru_cache</code>","text":"<p>\ud83d\udc42 \ud83d\udcc1 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udcbe \ud83d\udece \u26a0 (\ud83d\udc0c) \ud83d\udee0\ufe0f, \ud83d\udc46 \ud83c\udfb2 \ud83d\udc9a \u26ab\ufe0f \ud83d\udd74 \ud83d\udd50 &amp; \u2934\ufe0f \ud83c\udfe4-\u2699\ufe0f \ud83c\udf8f \u2692 \ud83c\udf9a, \u21a9\ufe0f \ud83d\udc42 \u26ab\ufe0f \ud83d\udd20 \ud83d\udce8.</p> <p>\u270b\ufe0f \ud83d\udd20 \ud83d\udd70 \ud83d\udc65:</p> <pre><code>Settings()\n</code></pre> <p>\ud83c\udd95 <code>Settings</code> \ud83c\udf9a \ud83d\udd1c \u270d, &amp; \ud83c\udfd7 \u26ab\ufe0f \ud83d\udd1c \u270d <code>.env</code> \ud83d\udcc1 \ud83d\udd04.</p> <p>\ud83d\udea5 \ud83d\udd17 \ud83d\udd22 \ud83d\udc96:</p> <pre><code>def get_settings():\n    return Settings()\n</code></pre> <p>\ud83d\udc65 \ud83d\udd1c \u270d \ud83d\udc48 \ud83c\udf9a \ud83d\udd20 \ud83d\udce8, &amp; \ud83d\udc65 \ud83d\udd1c \ud83d\udc42 <code>.env</code> \ud83d\udcc1 \ud83d\udd20 \ud83d\udce8. \ud83d\udc76 \ud83d\udc76</p> <p>\u270b\ufe0f \ud83d\udc65 \u2699\ufe0f <code>@lru_cache</code> \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udd1b \ud83d\udd1d, <code>Settings</code> \ud83c\udf9a \ud83d\udd1c \u270d \ud83d\udd74 \ud83d\udd50, \ud83e\udd47 \ud83d\udd70 \u26ab\ufe0f \ud83e\udd19. \ud83d\udc76 \ud83d\udc76</p> Python 3.8+ <pre><code>from functools import lru_cache\n\nfrom readyapi import Depends, ReadyAPI\n\nfrom . import config\n\napp = ReadyAPI()\n\n\n@lru_cache\ndef get_settings():\n    return config.Settings()\n\n\n@app.get(\"/info\")\nasync def info(settings: config.Settings = Depends(get_settings)):\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }\n</code></pre> <p>\u2934\ufe0f \ud83d\ude46 \ud83c\udfc1 \ud83e\udd19 <code>get_settings()</code> \ud83d\udd17 \u23ed \ud83d\udce8, \u21a9\ufe0f \ud83d\udee0\ufe0f \ud83d\udd17 \ud83d\udcdf <code>get_settings()</code> &amp; \ud83c\udfd7 \ud83c\udd95 <code>Settings</code> \ud83c\udf9a, \u26ab\ufe0f \ud83d\udd1c \ud83d\udce8 \ud83c\udf8f \ud83c\udf9a \ud83d\udc48 \ud83d\udce8 \ud83d\udd1b \ud83e\udd47 \ud83e\udd19, \ud83d\udd04 &amp; \ud83d\udd04.</p>"},{"location":"advanced/settings/#lru_cache-i","title":"<code>lru_cache</code> \ud83d\udce1 \u2139","text":"<p><code>@lru_cache</code> \ud83d\udd00 \ud83d\udd22 \u26ab\ufe0f \ud83c\udf80 \ud83d\udce8 \ud83c\udf8f \ud83d\udcb2 \ud83d\udc48 \ud83d\udce8 \ud83e\udd47 \ud83d\udd70, \u21a9\ufe0f \ud83d\udcbb \u26ab\ufe0f \ud83d\udd04, \ud83d\udee0\ufe0f \ud83d\udcdf \ud83d\udd22 \ud83d\udd20 \ud83d\udd70.</p> <p>, \ud83d\udd22 \ud83d\udd1b \u26ab\ufe0f \ud83d\udd1c \ud83d\udee0\ufe0f \ud83d\udd50 \ud83d\udd20 \ud83c\udf00 \u274c. &amp; \u2934\ufe0f \ud83d\udcb2 \ud83d\udce8 \ud83d\udd20 \ud83d\udc48 \ud83c\udf00 \u274c \ud83d\udd1c \u2699\ufe0f \ud83d\udd04 &amp; \ud83d\udd04 \ud83d\udd50\u2754 \ud83d\udd22 \ud83e\udd19 \u23ee\ufe0f \u26ab\ufe0f\u2754 \ud83c\udf8f \ud83c\udf00 \u274c.</p> <p>\ud83d\uddbc, \ud83d\udea5 \ud83d\udc46 \u2714\ufe0f \ud83d\udd22:</p> <pre><code>@lru_cache\ndef say_hi(name: str, salutation: str = \"Ms.\"):\n    return f\"Hello {salutation} {name}\"\n</code></pre> <p>\ud83d\udc46 \ud83d\udccb \ud83d\udcaa \ud83d\udee0\ufe0f \ud83d\udc96 \ud83d\udc49:</p> <pre><code>sequenceDiagram\n\nparticipant code as Code\nparticipant function as say_hi()\nparticipant execute as Execute function\n\n    rect rgba(0, 255, 0, .1)\n        code -&gt;&gt; function: say_hi(name=\"Camila\")\n        function -&gt;&gt; execute: execute function code\n        execute -&gt;&gt; code: return the result\n    end\n\n    rect rgba(0, 255, 255, .1)\n        code -&gt;&gt; function: say_hi(name=\"Camila\")\n        function -&gt;&gt; code: return stored result\n    end\n\n    rect rgba(0, 255, 0, .1)\n        code -&gt;&gt; function: say_hi(name=\"Rick\")\n        function -&gt;&gt; execute: execute function code\n        execute -&gt;&gt; code: return the result\n    end\n\n    rect rgba(0, 255, 0, .1)\n        code -&gt;&gt; function: say_hi(name=\"Rick\", salutation=\"Mr.\")\n        function -&gt;&gt; execute: execute function code\n        execute -&gt;&gt; code: return the result\n    end\n\n    rect rgba(0, 255, 255, .1)\n        code -&gt;&gt; function: say_hi(name=\"Rick\")\n        function -&gt;&gt; code: return stored result\n    end\n\n    rect rgba(0, 255, 255, .1)\n        code -&gt;&gt; function: say_hi(name=\"Camila\")\n        function -&gt;&gt; code: return stored result\n    end</code></pre> <p>\ud83d\udcbc \ud83d\udc46 \ud83d\udd17 <code>get_settings()</code>, \ud83d\udd22 \ud83d\udeab \u270a \ud83d\ude46 \u274c, \u26ab\ufe0f \ud83d\udd67 \ud83d\udce8 \ud83c\udf8f \ud83d\udcb2.</p> <p>\ud83d\udc48 \ud83c\udf0c, \u26ab\ufe0f \ud83c\udfad \ud83c\udf16 \ud83d\udea5 \u26ab\ufe0f \ud83c\udf10 \ud83d\udd22. \u270b\ufe0f \u26ab\ufe0f \u2699\ufe0f \ud83d\udd17 \ud83d\udd22, \u2934\ufe0f \ud83d\udc65 \ud83d\udcaa \ud83d\udd10 \u26ab\ufe0f \ud83d\udcaa \ud83d\udd2c.</p> <p><code>@lru_cache</code> \ud83c\udf55 <code>functools</code> \u2754 \ud83c\udf55 \ud83d\udc0d \ud83d\udc29 \ud83d\uddc3, \ud83d\udc46 \ud83d\udcaa \u270d \ud83c\udf05 \ud83d\udd03 \u26ab\ufe0f \ud83d\udc0d \ud83e\ude7a <code>@lru_cache</code>.</p>"},{"location":"advanced/settings/#_10","title":"\ud83c\udf03","text":"<p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f Pydantic \u2692 \ud83c\udf75 \u2692 \u2696\ufe0f \ud83d\udcf3 \ud83d\udc46 \ud83c\ude38, \u23ee\ufe0f \ud83c\udf10 \ud83c\udfcb\ufe0f Pydantic \ud83c\udff7.</p> <ul> <li>\u2699\ufe0f \ud83d\udd17 \ud83d\udc46 \ud83d\udcaa \ud83d\udcc9 \ud83d\udd2c.</li> <li>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>.env</code> \ud83d\udcc1 \u23ee\ufe0f \u26ab\ufe0f.</li> <li>\u2699\ufe0f <code>@lru_cache</code> \u27a1\ufe0f \ud83d\udc46 \u274e \ud83d\udc42 \ud83c\udde8\ud83c\uddfb \ud83d\udcc1 \ud83d\udd04 &amp; \ud83d\udd04 \ud83d\udd20 \ud83d\udce8, \u23ea \ud83e\udd1d \ud83d\udc46 \ud83d\udd10 \u26ab\ufe0f \u23ee\ufe0f \ud83d\udd2c.</li> </ul>"},{"location":"advanced/sub-applications/","title":"\ud83c\udfa7 \ud83c\ude38 - \ud83d\uddfb","text":"<p>\ud83d\udea5 \ud83d\udc46 \ud83d\udcaa \u2714\ufe0f 2\ufe0f\u20e3 \ud83d\udd2c ReadyAPI \ud83c\ude38, \u23ee\ufe0f \ud83d\udc6b \ud83d\udc4d \ud83d\udd2c \ud83d\uddc4 &amp; \ud83d\udc6b \ud83d\udc4d \ud83e\ude7a \u269c, \ud83d\udc46 \ud83d\udcaa \u2714\ufe0f \ud83d\udc51 \ud83d\udcf1 &amp; \"\ud83d\uddfb\" 1\ufe0f\u20e3 (\u2696\ufe0f \ud83c\udf05) \ud83c\udfa7-\ud83c\ude38(\u24c2).</p>"},{"location":"advanced/sub-applications/#readyapi","title":"\ud83d\udddc ReadyAPI \ud83c\ude38","text":"<p>\"\ud83d\udddc\" \u26d3 \u274e \ud83c\udf55 \"\ud83d\udd2c\" \ud83c\ude38 \ud83c\udfaf \u27a1, \ud83d\udc48 \u2934\ufe0f \u270a \ud83d\udc85 \ud83d\ude9a \ud83c\udf10 \ud83d\udd3d \ud83d\udc48 \u27a1, \u23ee\ufe0f \u27a1 \ud83d\udee0\ufe0f \ud83d\udce3 \ud83d\udc48 \ud83c\udfa7-\ud83c\ude38.</p>"},{"location":"advanced/sub-applications/#-_1","title":"\ud83d\udd1d-\ud83c\udf9a \ud83c\ude38","text":"<p>\ud83e\udd47, \u270d \ud83d\udc51, \ud83d\udd1d-\ud83c\udf9a, ReadyAPI \ud83c\ude38, &amp; \ud83d\udeae \u27a1 \ud83d\udee0\ufe0f:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/app\")\ndef read_main():\n    return {\"message\": \"Hello World from main app\"}\n\n\nsubapi = ReadyAPI()\n\n\n@subapi.get(\"/sub\")\ndef read_sub():\n    return {\"message\": \"Hello World from sub API\"}\n\n\napp.mount(\"/subapi\", subapi)\n</code></pre>"},{"location":"advanced/sub-applications/#-_2","title":"\ud83c\udfa7-\ud83c\ude38","text":"<p>\u2934\ufe0f, \u270d \ud83d\udc46 \ud83c\udfa7-\ud83c\ude38, &amp; \ud83d\udeae \u27a1 \ud83d\udee0\ufe0f.</p> <p>\ud83d\udc49 \ud83c\udfa7-\ud83c\ude38 \u27951\ufe0f\u20e3 \ud83d\udc29 ReadyAPI \ud83c\ude38, \u270b\ufe0f \ud83d\udc49 1\ufe0f\u20e3 \ud83d\udc48 \ud83d\udd1c \"\ud83d\uddfb\":</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/app\")\ndef read_main():\n    return {\"message\": \"Hello World from main app\"}\n\n\nsubapi = ReadyAPI()\n\n\n@subapi.get(\"/sub\")\ndef read_sub():\n    return {\"message\": \"Hello World from sub API\"}\n\n\napp.mount(\"/subapi\", subapi)\n</code></pre>"},{"location":"advanced/sub-applications/#-_3","title":"\ud83d\uddfb \ud83c\udfa7-\ud83c\ude38","text":"<p>\ud83d\udc46 \ud83d\udd1d-\ud83c\udf9a \ud83c\ude38, <code>app</code>, \ud83d\uddfb \ud83c\udfa7-\ud83c\ude38, <code>subapi</code>.</p> <p>\ud83d\udc49 \ud83d\udcbc, \u26ab\ufe0f \ud83d\udd1c \ud83d\udccc \u27a1 <code>/subapi</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/app\")\ndef read_main():\n    return {\"message\": \"Hello World from main app\"}\n\n\nsubapi = ReadyAPI()\n\n\n@subapi.get(\"/sub\")\ndef read_sub():\n    return {\"message\": \"Hello World from sub API\"}\n\n\napp.mount(\"/subapi\", subapi)\n</code></pre>"},{"location":"advanced/sub-applications/#_1","title":"\u2705 \ud83c\udfe7 \ud83d\udee0\ufe0f \ud83e\ude7a","text":"<p>\ud83d\udd1c, \ud83c\udfc3 <code>uvicorn</code> \u23ee\ufe0f \ud83d\udc51 \ud83d\udcf1, \ud83d\udea5 \ud83d\udc46 \ud83d\udcc1 <code>main.py</code>, \u26ab\ufe0f \ud83d\udd1c:</p> <pre><code>$ uvicorn main:app --reload\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>&amp; \ud83d\udcc2 \ud83e\ude7a http://127.0.0.1:8000/docs.</p> <p>\ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \ud83c\udfe7 \ud83d\udee0\ufe0f \ud83e\ude7a \ud83d\udc51 \ud83d\udcf1, \ud83d\udd0c \ud83d\udd74 \ud83d\udeae \ud83d\udc4d \u27a1 \ud83d\udee0\ufe0f:</p> <p></p> <p>&amp; \u2934\ufe0f, \ud83d\udcc2 \ud83e\ude7a \ud83c\udfa7-\ud83c\ude38, http://127.0.0.1:8000/subapi/docs.</p> <p>\ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \ud83c\udfe7 \ud83d\udee0\ufe0f \ud83e\ude7a \ud83c\udfa7-\ud83c\ude38, \u2705 \ud83d\udd74 \ud83d\udeae \ud83d\udc4d \u27a1 \ud83d\udee0\ufe0f, \ud83c\udf10 \ud83d\udd3d \u2611 \ud83c\udfa7-\u27a1 \ud83d\udd21 <code>/subapi</code>:</p> <p></p> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udd04 \ud83d\udd17 \u23ee\ufe0f \ud83d\ude46 2\ufe0f\u20e3 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd22, \ud83d\udc6b \ud83d\udd1c \ud83d\udc77 \u2611, \u21a9\ufe0f \ud83d\udda5 \ud83d\udd1c \ud83d\udcaa \ud83d\udcac \ud83d\udd20 \ud83c\udfaf \ud83d\udcf1 \u2696\ufe0f \ud83c\udfa7-\ud83d\udcf1.</p>"},{"location":"advanced/sub-applications/#i-root_path","title":"\ud83d\udce1 \u2139: <code>root_path</code>","text":"<p>\ud83d\udd50\u2754 \ud83d\udc46 \ud83d\uddfb \ud83c\udfa7-\ud83c\ude38 \ud83d\udd2c \ud83d\udd1b, ReadyAPI \ud83d\udd1c \u270a \ud83d\udc85 \ud83d\udd17 \ud83d\uddfb \u27a1 \ud83c\udfa7-\ud83c\ude38 \u2699\ufe0f \ud83d\udee0\ufe0f \u26aa\ufe0f\u27a1\ufe0f \ud83d\udd2b \ud83d\udd27 \ud83e\udd19 <code>root_path</code>.</p> <p>\ud83d\udc48 \ud83c\udf0c, \ud83c\udfa7-\ud83c\ude38 \ud83d\udd1c \ud83d\udcad \u2699\ufe0f \ud83d\udc48 \u27a1 \ud83d\udd21 \ud83e\ude7a \ud83c\udf9a.</p> <p>&amp; \ud83c\udfa7-\ud83c\ude38 \ud83d\udcaa \u2714\ufe0f \ud83d\udeae \ud83d\udc4d \ud83d\udccc \ud83c\udfa7-\ud83c\ude38 &amp; \ud83c\udf10 \ud83d\udd1c \ud83d\udc77 \u2611, \u21a9\ufe0f ReadyAPI \ud83c\udf75 \ud83c\udf10 \ud83d\udc49 <code>root_path</code>\u24c2 \ud83d\udd01.</p> <p>\ud83d\udc46 \ud83d\udd1c \ud83d\udca1 \ud83c\udf05 \ud83d\udd03 <code>root_path</code> &amp; \u2754 \u2699\ufe0f \u26ab\ufe0f \ud83c\udfaf \ud83d\udcc4 \ud83d\udd03 \u26c5 \ud83d\uddf3.</p>"},{"location":"advanced/templates/","title":"\ud83d\udcc4","text":"<p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83d\ude46 \ud83d\udcc4 \ud83d\ude92 \ud83d\udc46 \ud83d\udc9a \u23ee\ufe0f ReadyAPI.</p> <p>\u26a0 \u2692 Jinja2\ufe0f\u20e3, \ud83c\udf8f 1\ufe0f\u20e3 \u2699\ufe0f \ud83c\udffa &amp; \ud83c\udf8f \ud83e\uddf0.</p> <p>\ud83d\udce4 \ud83d\ude99 \ud83d\udd17 \u26ab\ufe0f \ud83d\udcaa \ud83d\udc48 \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83d\udd17 \ud83d\udc46 ReadyAPI \ud83c\ude38 (\ud83d\ude9a \ud83d\udc83).</p>"},{"location":"advanced/templates/#_2","title":"\u274e \ud83d\udd17","text":"<p>\u274e <code>jinja2</code>:</p> <pre><code>$ pip install jinja2\n\n---&gt; 100%\n</code></pre>"},{"location":"advanced/templates/#jinja2templates","title":"\u2699\ufe0f <code>Jinja2Templates</code>","text":"<ul> <li>\ud83d\uddc4 <code>Jinja2Templates</code>.</li> <li>\u270d <code>templates</code> \ud83c\udf9a \ud83d\udc48 \ud83d\udc46 \ud83d\udcaa \ud83c\udfe4-\u2699\ufe0f \u23ea.</li> <li>\ud83d\udce3 <code>Request</code> \ud83d\udd22 \u27a1 \ud83d\udee0\ufe0f \ud83d\udc48 \ud83d\udd1c \ud83d\udce8 \ud83d\udcc4.</li> <li>\u2699\ufe0f <code>templates</code> \ud83d\udc46 \u270d \u270d &amp; \ud83d\udce8 <code>TemplateResponse</code>, \ud83d\udeb6\u200d\u2640\ufe0f <code>request</code> 1\ufe0f\u20e3 \ud83d\udd11-\ud83d\udcb2 \ud83d\udc6b Jinja2\ufe0f\u20e3 \"\ud83d\udd11\".</li> </ul> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Request\nfrom readyapi.responses import HTMLResponse\nfrom readyapi.staticfiles import StaticFiles\nfrom readyapi.templating import Jinja2Templates\n\napp = ReadyAPI()\n\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n\n\ntemplates = Jinja2Templates(directory=\"templates\")\n\n\n@app.get(\"/items/{id}\", response_class=HTMLResponse)\nasync def read_item(request: Request, id: str):\n    return templates.TemplateResponse(\n        request=request, name=\"item.html\", context={\"id\": id}\n    )\n</code></pre> <p>Note</p> <p>\ud83d\udc40 \ud83d\udc48 \ud83d\udc46 \u2714\ufe0f \ud83d\udeb6\u200d\u2640\ufe0f <code>request</code> \ud83c\udf55 \ud83d\udd11-\ud83d\udcb2 \ud83d\udc6b \ud83d\udd11 Jinja2\ufe0f\u20e3. , \ud83d\udc46 \u2714\ufe0f \ud83d\udce3 \u26ab\ufe0f \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f.</p> <p>Tip</p> <p>\ud83d\udce3 <code>response_class=HTMLResponse</code> \ud83e\ude7a \ud83c\udf9a \ud83d\udd1c \ud83d\udcaa \ud83d\udcad \ud83d\udc48 \ud83d\udce8 \ud83d\udd1c \ud83d\udd78.</p> <p>\ud83d\udce1 \u2139</p> <p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>from starlette.templating import Jinja2Templates</code>.</p> <p>ReadyAPI \ud83d\ude9a \ud83c\udf8f <code>starlette.templating</code> <code>readyapi.templating</code> \ud83c\udfea \ud83d\udc46, \ud83d\udc69\u200d\ud83d\udcbb. \u270b\ufe0f \ud83c\udf05 \ud83d\udcaa \ud83d\udce8 \ud83d\udc5f \ud83d\udd17 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc83. \ud83c\udf8f \u23ee\ufe0f <code>Request</code> &amp; <code>StaticFiles</code>.</p>"},{"location":"advanced/templates/#_3","title":"\u270d \ud83d\udcc4","text":"<p>\u2934\ufe0f \ud83d\udc46 \ud83d\udcaa \u270d \ud83d\udcc4 <code>templates/item.html</code> \u23ee\ufe0f:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Item Details&lt;/title&gt;\n    &lt;link href=\"{{ url_for('static', path='/styles.css') }}\" rel=\"stylesheet\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;&lt;a href=\"{{ url_for('read_item', id=id) }}\"&gt;Item ID: {{ id }}&lt;/a&gt;&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>\u26ab\ufe0f \ud83d\udd1c \ud83c\udfa6 <code>id</code> \u270a \u26aa\ufe0f\u27a1\ufe0f \"\ud83d\udd11\" <code>dict</code> \ud83d\udc46 \ud83d\udeb6\u200d\u2640\ufe0f:</p> <pre><code>{\"request\": request, \"id\": id}\n</code></pre>"},{"location":"advanced/templates/#_4","title":"\ud83d\udcc4 &amp; \ud83c\udfbb \ud83d\udcc1","text":"<p>&amp; \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>url_for()</code> \ud83d\udd18 \ud83d\udcc4, &amp; \u2699\ufe0f \u26ab\ufe0f, \ud83d\uddbc, \u23ee\ufe0f <code>StaticFiles</code> \ud83d\udc46 \ud83d\udccc.</p> <pre><code>&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Item Details&lt;/title&gt;\n    &lt;link href=\"{{ url_for('static', path='/styles.css') }}\" rel=\"stylesheet\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;&lt;a href=\"{{ url_for('read_item', id=id) }}\"&gt;Item ID: {{ id }}&lt;/a&gt;&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>\ud83d\udc49 \ud83d\uddbc, \u26ab\ufe0f \ud83d\udd1c \ud83d\udd17 \ud83c\udf9a \ud83d\udcc1 <code>static/styles.css</code> \u23ee\ufe0f:</p> <pre><code>h1 {\n    color: green;\n}\n</code></pre> <p>&amp; \u21a9\ufe0f \ud83d\udc46 \u2699\ufe0f <code>StaticFiles</code>, \ud83d\udc48 \ud83c\udf9a \ud83d\udcc1 \ud83d\udd1c \ud83c\udf66 \ud83d\udd01 \ud83d\udc46 ReadyAPI \ud83c\ude38 \ud83d\udcdb <code>/static/styles.css</code>.</p>"},{"location":"advanced/templates/#i","title":"\ud83c\udf05 \u2139","text":"<p>\ud83c\udf05 \u2139, \ud83d\udd0c \u2754 \ud83d\udcaf \ud83d\udcc4, \u2705 \ud83d\udc83 \ud83e\ude7a \ud83d\udd1b \ud83d\udcc4.</p>"},{"location":"advanced/testing-dependencies/","title":"\ud83d\udd2c \ud83d\udd17 \u23ee\ufe0f \ud83d\udd10","text":""},{"location":"advanced/testing-dependencies/#_2","title":"\ud83d\udd11 \ud83d\udd17 \u23ee\ufe0f \ud83d\udd2c","text":"<p>\ud83d\udce4 \ud83d\ude10 \ud83c\udf10\u2754 \ud83d\udc46 \ud83d\udcaa \ud83d\udc9a \ud83d\udd10 \ud83d\udd17 \u23ee\ufe0f \ud83d\udd2c.</p> <p>\ud83d\udc46 \ud83d\udeab \ud83d\udc9a \u23ee\ufe0f \ud83d\udd17 \ud83c\udfc3 (\ud83d\udeab \ud83d\ude46 \ud83c\udfa7-\ud83d\udd17 \u26ab\ufe0f \ud83d\udcaa \u2714\ufe0f).</p> <p>\u21a9\ufe0f, \ud83d\udc46 \ud83d\udc9a \ud83d\ude9a \ud83c\udf8f \ud83d\udd17 \ud83d\udc48 \ud83d\udd1c \u2699\ufe0f \ud83d\udd74 \u23ee\ufe0f \ud83d\udcaf (\ud83c\udfb2 \ud83d\udd74 \ud83c\udfaf \ud83d\udcaf), &amp; \ud83d\udd1c \ud83d\ude9a \ud83d\udcb2 \ud83d\udc48 \ud83d\udcaa \u2699\ufe0f \ud83c\udf10\u2754 \ud83d\udcb2 \u23ee\ufe0f \ud83d\udd17 \u2699\ufe0f.</p>"},{"location":"advanced/testing-dependencies/#_3","title":"\u2699\ufe0f \ud83d\udcbc: \ud83d\udd22 \ud83d\udc15\u200d\ud83e\uddba","text":"<p>\ud83d\uddbc \ud83d\udcaa \ud83d\udc48 \ud83d\udc46 \u2714\ufe0f \ud83d\udd22 \ud83e\udd1d \ud83d\udc15\u200d\ud83e\uddba \ud83d\udc48 \ud83d\udc46 \ud83d\udcaa \ud83e\udd19.</p> <p>\ud83d\udc46 \ud83d\udce8 \u26ab\ufe0f \ud83e\udd1d &amp; \u26ab\ufe0f \ud83d\udce8 \ud83d\udd13 \ud83d\udc69\u200d\ud83d\udcbb.</p> <p>\ud83d\udc49 \ud83d\udc15\u200d\ud83e\uddba 5\ufe0f\u20e3\ud83d\udcc6 \ud83d\udd0c \ud83d\udc46 \ud83d\udccd \ud83d\udce8, &amp; \ud83e\udd19 \u26ab\ufe0f \ud83d\udcaa \u270a \u2795 \ud83d\udd70 \ud83c\udf18 \ud83d\udea5 \ud83d\udc46 \u2714\ufe0f \ud83d\udd27 \ud83c\udf81 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udcaf.</p> <p>\ud83d\udc46 \ud83c\udfb2 \ud83d\udc9a \ud83d\udcaf \ud83d\udd22 \ud83d\udc15\u200d\ud83e\uddba \ud83d\udd50, \u270b\ufe0f \ud83d\udeab \ud83c\udfaf \ud83e\udd19 \u26ab\ufe0f \ud83d\udd20 \ud83d\udcaf \ud83d\udc48 \ud83c\udfc3.</p> <p>\ud83d\udc49 \ud83d\udcbc, \ud83d\udc46 \ud83d\udcaa \ud83d\udd10 \ud83d\udd17 \ud83d\udc48 \ud83e\udd19 \ud83d\udc48 \ud83d\udc15\u200d\ud83e\uddba, &amp; \u2699\ufe0f \ud83d\udec3 \ud83d\udd17 \ud83d\udc48 \ud83d\udce8 \ud83c\udf81 \ud83d\udc69\u200d\ud83d\udcbb, \ud83d\udd74 \ud83d\udc46 \ud83d\udcaf.</p>"},{"location":"advanced/testing-dependencies/#appdependency_overrides","title":"\u2699\ufe0f <code>app.dependency_overrides</code> \ud83d\udd22","text":"<p>\ud83d\udc6b \ud83d\udcbc, \ud83d\udc46 ReadyAPI \ud83c\ude38 \u2714\ufe0f \ud83d\udd22 <code>app.dependency_overrides</code>, \u26ab\ufe0f \ud83d\ude45 <code>dict</code>.</p> <p>\ud83d\udd10 \ud83d\udd17 \ud83d\udd2c, \ud83d\udc46 \ud83d\udeae \ud83d\udd11 \u23ee\ufe0f \ud83d\udd17 (\ud83d\udd22), &amp; \ud83d\udcb2, \ud83d\udc46 \ud83d\udd17 \ud83d\udd10 (\u27951\ufe0f\u20e3 \ud83d\udd22).</p> <p>&amp; \u2934\ufe0f ReadyAPI \ud83d\udd1c \ud83e\udd19 \ud83d\udc48 \ud83d\udd10 \u21a9\ufe0f \u23ee\ufe0f \ud83d\udd17.</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.testclient import TestClient\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return {\"message\": \"Hello Items!\", \"params\": commons}\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return {\"message\": \"Hello Users!\", \"params\": commons}\n\n\nclient = TestClient(app)\n\n\nasync def override_dependency(q: Union[str, None] = None):\n    return {\"q\": q, \"skip\": 5, \"limit\": 10}\n\n\napp.dependency_overrides[common_parameters] = override_dependency\n\n\ndef test_override_in_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_q():\n    response = client.get(\"/items/?q=foo\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_params():\n    response = client.get(\"/items/?q=foo&amp;skip=100&amp;limit=200\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.testclient import TestClient\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return {\"message\": \"Hello Items!\", \"params\": commons}\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return {\"message\": \"Hello Users!\", \"params\": commons}\n\n\nclient = TestClient(app)\n\n\nasync def override_dependency(q: str | None = None):\n    return {\"q\": q, \"skip\": 5, \"limit\": 10}\n\n\napp.dependency_overrides[common_parameters] = override_dependency\n\n\ndef test_override_in_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_q():\n    response = client.get(\"/items/?q=foo\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_params():\n    response = client.get(\"/items/?q=foo&amp;skip=100&amp;limit=200\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.testclient import TestClient\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return {\"message\": \"Hello Items!\", \"params\": commons}\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return {\"message\": \"Hello Users!\", \"params\": commons}\n\n\nclient = TestClient(app)\n\n\nasync def override_dependency(q: Union[str, None] = None):\n    return {\"q\": q, \"skip\": 5, \"limit\": 10}\n\n\napp.dependency_overrides[common_parameters] = override_dependency\n\n\ndef test_override_in_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_q():\n    response = client.get(\"/items/?q=foo\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_params():\n    response = client.get(\"/items/?q=foo&amp;skip=100&amp;limit=200\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.testclient import TestClient\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return {\"message\": \"Hello Items!\", \"params\": commons}\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return {\"message\": \"Hello Users!\", \"params\": commons}\n\n\nclient = TestClient(app)\n\n\nasync def override_dependency(q: Union[str, None] = None):\n    return {\"q\": q, \"skip\": 5, \"limit\": 10}\n\n\napp.dependency_overrides[common_parameters] = override_dependency\n\n\ndef test_override_in_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_q():\n    response = client.get(\"/items/?q=foo\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_params():\n    response = client.get(\"/items/?q=foo&amp;skip=100&amp;limit=200\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.testclient import TestClient\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return {\"message\": \"Hello Items!\", \"params\": commons}\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return {\"message\": \"Hello Users!\", \"params\": commons}\n\n\nclient = TestClient(app)\n\n\nasync def override_dependency(q: str | None = None):\n    return {\"q\": q, \"skip\": 5, \"limit\": 10}\n\n\napp.dependency_overrides[common_parameters] = override_dependency\n\n\ndef test_override_in_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_q():\n    response = client.get(\"/items/?q=foo\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n\n\ndef test_override_in_items_with_params():\n    response = client.get(\"/items/?q=foo&amp;skip=100&amp;limit=200\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }\n</code></pre> <p>Tip</p> <p>\ud83d\udc46 \ud83d\udcaa \u2692 \ud83d\udd17 \ud83d\udd10 \ud83d\udd17 \u2699\ufe0f \ud83d\ude46 \ud83d\udc46 ReadyAPI \ud83c\ude38.</p> <p>\u23ee\ufe0f \ud83d\udd17 \ud83d\udcaa \u2699\ufe0f \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22, \u27a1 \ud83d\udee0\ufe0f \ud83d\udc68\u200d\ud83c\udfa8 (\ud83d\udd50\u2754 \ud83d\udc46 \ud83d\udeab \u2699\ufe0f \ud83d\udce8 \ud83d\udcb2), <code>.include_router()</code> \ud83e\udd19, \u2652\ufe0f.</p> <p>ReadyAPI \ud83d\udd1c \ud83d\udcaa \ud83d\udd10 \u26ab\ufe0f.</p> <p>\u2934\ufe0f \ud83d\udc46 \ud83d\udcaa \u23f2 \ud83d\udc46 \ud83d\udd10 (\u274e \ud83d\udc6b) \u2692 <code>app.dependency_overrides</code> \ud83d\udec1 <code>dict</code>:</p> <pre><code>app.dependency_overrides = {}\n</code></pre> <p>Tip</p> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udc9a \ud83d\udd10 \ud83d\udd17 \ud83d\udd74 \u23ee\ufe0f \ud83d\udcaf, \ud83d\udc46 \ud83d\udcaa \u2692 \ud83d\udd10 \u25b6\ufe0f \ud83d\udcaf (\ud83d\udd18 \ud83d\udcaf \ud83d\udd22) &amp; \u23f2 \u26ab\ufe0f \ud83d\udd1a (\ud83d\udd1a \ud83d\udcaf \ud83d\udd22).</p>"},{"location":"advanced/testing-events/","title":"\ud83d\udd2c \ud83c\udf89: \ud83d\udd74 - \ud83e\udd2b","text":"<p>\ud83d\udd50\u2754 \ud83d\udc46 \ud83d\udcaa \ud83d\udc46 \ud83c\udf89 \ud83d\udc15\u200d\ud83e\uddba (<code>startup</code> &amp; <code>shutdown</code>) \ud83c\udfc3 \ud83d\udc46 \ud83d\udcaf, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>TestClient</code> \u23ee\ufe0f <code>with</code> \ud83d\udcc4:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.testclient import TestClient\n\napp = ReadyAPI()\n\nitems = {}\n\n\n@app.on_event(\"startup\")\nasync def startup_event():\n    items[\"foo\"] = {\"name\": \"Fighters\"}\n    items[\"bar\"] = {\"name\": \"Tenders\"}\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(item_id: str):\n    return items[item_id]\n\n\ndef test_read_items():\n    with TestClient(app) as client:\n        response = client.get(\"/items/foo\")\n        assert response.status_code == 200\n        assert response.json() == {\"name\": \"Fighters\"}\n</code></pre>"},{"location":"advanced/testing-websockets/","title":"\ud83d\udd2c *\ufe0f\u20e3","text":"<p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83c\udf8f <code>TestClient</code> \ud83d\udcaf*\ufe0f\u20e3.</p> <p>\ud83d\udc49, \ud83d\udc46 \u2699\ufe0f <code>TestClient</code> <code>with</code> \ud83d\udcc4, \ud83d\udd17*\ufe0f\u20e3:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.testclient import TestClient\nfrom readyapi.websockets import WebSocket\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def read_main():\n    return {\"msg\": \"Hello World\"}\n\n\n@app.websocket(\"/ws\")\nasync def websocket(websocket: WebSocket):\n    await websocket.accept()\n    await websocket.send_json({\"msg\": \"Hello WebSocket\"})\n    await websocket.close()\n\n\ndef test_read_main():\n    client = TestClient(app)\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"msg\": \"Hello World\"}\n\n\ndef test_websocket():\n    client = TestClient(app)\n    with client.websocket_connect(\"/ws\") as websocket:\n        data = websocket.receive_json()\n        assert data == {\"msg\": \"Hello WebSocket\"}\n</code></pre> <p>Note</p> <p>\ud83c\udf05 \u2139, \u2705 \ud83d\udc83 \ud83e\uddfe \ud83d\udd2c *\ufe0f\u20e3 .</p>"},{"location":"advanced/using-request-directly/","title":"\u2699\ufe0f \ud83d\udce8 \ud83d\udd17","text":"<p>\ud83c\udd99 \ud83d\udd1c, \ud83d\udc46 \u2714\ufe0f \ud83d\udce3 \ud83c\udf55 \ud83d\udce8 \ud83d\udc48 \ud83d\udc46 \ud83d\udcaa \u23ee\ufe0f \ud83d\udc6b \ud83c\udd8e.</p> <p>\u270a \ud83d\udcca \u26aa\ufe0f\u27a1\ufe0f:</p> <ul> <li>\u27a1 \ud83d\udd22.</li> <li>\ud83c\udf9a.</li> <li>\ud83c\udf6a.</li> <li>\u2652\ufe0f.</li> </ul> <p>&amp; \ud83d\udd28, ReadyAPI \u2696 \ud83d\udc48 \ud83d\udcbd, \ud83c\udfed \u26ab\ufe0f &amp; \ud83c\udfed \ud83e\uddfe \ud83d\udc46 \ud83d\udee0\ufe0f \ud83d\udd01.</p> <p>\u270b\ufe0f \ud83d\udce4 \u26a0 \ud83c\udf10\u2754 \ud83d\udc46 \ud83d\udcaa \ud83d\udcaa \ud83d\udd10 <code>Request</code> \ud83c\udf9a \ud83d\udd17.</p>"},{"location":"advanced/using-request-directly/#i-request","title":"\u2139 \ud83d\udd03 <code>Request</code> \ud83c\udf9a","text":"<p>ReadyAPI \ud83e\udd19 \ud83d\udc83 \ud83d\udd18, \u23ee\ufe0f \ud83e\uddfd \ud83d\udcda \ud83e\uddf0 \ud83d\udd1b \ud83d\udd1d, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83d\udc83 <code>Request</code> \ud83c\udf9a \ud83d\udd17 \ud83d\udd50\u2754 \ud83d\udc46 \ud83d\udcaa.</p> <p>\u26ab\ufe0f \ud83d\udd1c \u26d3 \ud83d\udc48 \ud83d\udea5 \ud83d\udc46 \ud83e\udd1a \ud83d\udcca \u26aa\ufe0f\u27a1\ufe0f <code>Request</code> \ud83c\udf9a \ud83d\udd17 (\ud83d\uddbc, \u270d \ud83d\udcaa) \u26ab\ufe0f \ud83c\udfc6 \ud83d\udeab \u2714, \ud83d\udddc \u2696\ufe0f \ud83d\udcc4 (\u23ee\ufe0f \ud83d\uddc4, \ud83c\udfe7 \ud83d\udee0\ufe0f \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd22) ReadyAPI.</p> <p>\ud83d\udc50 \ud83d\ude46 \ud83c\udf8f \ud83d\udd22 \ud83d\udce3 \ud83d\udece (\ud83d\uddbc, \ud83d\udcaa \u23ee\ufe0f Pydantic \ud83c\udff7) \ud83d\udd1c \u2714, \ud83d\udddc, \u270d, \u2652\ufe0f.</p> <p>\u270b\ufe0f \ud83d\udce4 \ud83c\udfaf \ud83d\udcbc \ud83c\udf10\u2754 \u26ab\ufe0f \u26a0 \ud83e\udd1a <code>Request</code> \ud83c\udf9a.</p>"},{"location":"advanced/using-request-directly/#request","title":"\u2699\ufe0f <code>Request</code> \ud83c\udf9a \ud83d\udd17","text":"<p>\u27a1\ufe0f \ud83c\udf08 \ud83d\udc46 \ud83d\udc9a \ud83e\udd1a \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udce2 \ud83d\udce2/\ud83e\udda0 \ud83d\udd18 \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22.</p> <p>\ud83d\udc48 \ud83d\udc46 \ud83d\udcaa \ud83d\udd10 \ud83d\udce8 \ud83d\udd17.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Request\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\ndef read_root(item_id: str, request: Request):\n    client_host = request.client.host\n    return {\"client_host\": client_host, \"item_id\": item_id}\n</code></pre> <p>\ud83d\udce3 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22 \ud83d\udd22 \u23ee\ufe0f \ud83c\udd8e \u2796 <code>Request</code> ReadyAPI \ud83d\udd1c \ud83d\udcad \ud83d\udeb6\u200d\u2640\ufe0f <code>Request</code> \ud83d\udc48 \ud83d\udd22.</p> <p>Tip</p> <p>\ud83d\uddd2 \ud83d\udc48 \ud83d\udc49 \ud83d\udcbc, \ud83d\udc65 \ud83d\udce3 \u27a1 \ud83d\udd22 \u2934\ufe0f \ud83d\udce8 \ud83d\udd22.</p> <p>, \u27a1 \ud83d\udd22 \ud83d\udd1c \u2697, \u2714, \ud83d\udddc \u2714 \ud83c\udd8e &amp; \u270d \u23ee\ufe0f \ud83d\uddc4.</p> <p>\ud83c\udf8f \ud83c\udf0c, \ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83d\ude46 \ud83c\udf8f \ud83d\udd22 \ud83d\udece, &amp; \u27a1, \ud83e\udd1a <code>Request</code> \ud83d\udc81\u200d\u2642\ufe0f.</p>"},{"location":"advanced/using-request-directly/#request_1","title":"<code>Request</code> \ud83e\uddfe","text":"<p>\ud83d\udc46 \ud83d\udcaa \u270d \ud83c\udf05 \u2139 \ud83d\udd03 <code>Request</code> \ud83c\udf9a \ud83d\udec2 \ud83d\udc83 \ud83e\uddfe \ud83d\udd78.</p> <p>\ud83d\udce1 \u2139</p> <p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>from starlette.requests import Request</code>.</p> <p>ReadyAPI \ud83d\ude9a \u26ab\ufe0f \ud83d\udd17 \ud83c\udfea \ud83d\udc46, \ud83d\udc69\u200d\ud83d\udcbb. \u270b\ufe0f \u26ab\ufe0f \ud83d\udc5f \ud83d\udd17 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc83.</p>"},{"location":"advanced/websockets/","title":"*\ufe0f\u20e3","text":"<p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f  \ufe0f\u20e3  \u23ee\ufe0f *ReadyAPI**."},{"location":"advanced/websockets/#websockets","title":"\u274e <code>WebSockets</code>","text":"<p>\ud83e\udd47 \ud83d\udc46 \ud83d\udcaa \u274e <code>WebSockets</code>:</p> <pre><code>$ pip install websockets\n\n---&gt; 100%\n</code></pre>"},{"location":"advanced/websockets/#_2","title":"*\ufe0f\u20e3 \ud83d\udc69\u200d\ud83d\udcbb","text":""},{"location":"advanced/websockets/#_3","title":"\ud83c\udfed","text":"<p>\ud83d\udc46 \ud83c\udfed \u2699\ufe0f, \ud83d\udc46 \ud83c\udfb2 \u2714\ufe0f \ud83d\udd78 \u270d \u23ee\ufe0f \ud83c\udfdb \ud83d\udee0\ufe0f \ud83d\udc96 \ud83d\ude25, Vue.js \u2696\ufe0f \ud83d\udcd0.</p> <p>&amp; \ud83d\udd17 \u2699\ufe0f *\ufe0f\u20e3 \u23ee\ufe0f \ud83d\udc46 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udc46 \ud83d\udd1c \ud83c\udfb2 \u2699\ufe0f \ud83d\udc46 \ud83d\udd78 \ud83d\ude99.</p> <p>\u2696\ufe0f \ud83d\udc46 \ud83d\udcaa \u2714\ufe0f \ud83c\udde6\ud83c\uddf8 \ud83d\udcf1 \ud83c\ude38 \ud83d\udc48 \ud83d\udd17 \u23ee\ufe0f \ud83d\udc46 *\ufe0f\u20e3 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd17, \ud83c\udde6\ud83c\uddf8 \ud83d\udcdf.</p> <p>\u2696\ufe0f \ud83d\udc46 5\ufe0f\u20e3\ud83d\udcc6 \u2714\ufe0f \ud83d\ude46 \ud83c\udf8f \ud83c\udf0c \ud83d\udd17 \u23ee\ufe0f *\ufe0f\u20e3 \ud83d\udd17.</p> <p>\u270b\ufe0f \ud83d\udc49 \ud83d\uddbc, \ud83d\udc65 \ud83d\udd1c \u2699\ufe0f \ud83d\udcf6 \ud83d\ude45 \ud83d\udd78 \ud83d\udcc4 \u23ee\ufe0f \ud83d\udd78, \ud83c\udf10 \ud83d\udd18 \ud83d\udccf \ud83c\udfbb.</p> <p>\ud83d\udc49, \u2197\ufe0f, \ud83d\udeab \u2696 &amp; \ud83d\udc46 \ud83d\udeab\ud83d\udd1c \u2699\ufe0f \u26ab\ufe0f \ud83c\udfed.</p> <p>\ud83c\udfed \ud83d\udc46 \ud83d\udd1c \u2714\ufe0f 1\ufe0f\u20e3 \ud83c\udf9b \ud83d\udd1b.</p> <p>\u270b\ufe0f \u26ab\ufe0f \ud83d\ude45 \ud83c\udf0c \ud83c\udfaf \ud83d\udd1b \ud83d\udcbd-\ud83d\ude84 *\ufe0f\u20e3 &amp; \u2714\ufe0f \ud83d\udc77 \ud83d\uddbc:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, WebSocket\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n            var ws = new WebSocket(\"ws://localhost:8000/ws\");\n            ws.onmessage = function(event) {\n                var messages = document.getElementById('messages')\n                var message = document.createElement('li')\n                var content = document.createTextNode(event.data)\n                message.appendChild(content)\n                messages.appendChild(message)\n            };\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(f\"Message text was: {data}\")\n</code></pre>"},{"location":"advanced/websockets/#websocket","title":"\u270d <code>websocket</code>","text":"<p>\ud83d\udc46 ReadyAPI \ud83c\ude38, \u270d <code>websocket</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, WebSocket\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n            var ws = new WebSocket(\"ws://localhost:8000/ws\");\n            ws.onmessage = function(event) {\n                var messages = document.getElementById('messages')\n                var message = document.createElement('li')\n                var content = document.createTextNode(event.data)\n                message.appendChild(content)\n                messages.appendChild(message)\n            };\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(f\"Message text was: {data}\")\n</code></pre> <p>\ud83d\udce1 \u2139</p> <p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>from starlette.websockets import WebSocket</code>.</p> <p>ReadyAPI \ud83d\ude9a \ud83c\udf8f <code>WebSocket</code> \ud83d\udd17 \ud83c\udfea \ud83d\udc46, \ud83d\udc69\u200d\ud83d\udcbb. \u270b\ufe0f \u26ab\ufe0f \ud83d\udc5f \ud83d\udd17 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc83.</p>"},{"location":"advanced/websockets/#_4","title":"\u231b \ud83d\udce7 &amp; \ud83d\udce8 \ud83d\udce7","text":"<p>\ud83d\udc46 *\ufe0f\u20e3 \ud83d\udee3 \ud83d\udc46 \ud83d\udcaa <code>await</code> \ud83d\udce7 &amp; \ud83d\udce8 \ud83d\udce7.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, WebSocket\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n            var ws = new WebSocket(\"ws://localhost:8000/ws\");\n            ws.onmessage = function(event) {\n                var messages = document.getElementById('messages')\n                var message = document.createElement('li')\n                var content = document.createTextNode(event.data)\n                message.appendChild(content)\n                messages.appendChild(message)\n            };\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(f\"Message text was: {data}\")\n</code></pre> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udce8 &amp; \ud83d\udce8 \ud83d\udcb1, \u270d, &amp; \ud83c\udfbb \ud83d\udcbd.</p>"},{"location":"advanced/websockets/#_5","title":"\ud83d\udd04 \u26ab\ufe0f","text":"<p>\ud83d\udea5 \ud83d\udc46 \ud83d\udcc1 \ud83d\udcdb <code>main.py</code>, \ud83c\udfc3 \ud83d\udc46 \ud83c\ude38 \u23ee\ufe0f:</p> <pre><code>$ uvicorn main:app --reload\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>\ud83d\udcc2 \ud83d\udc46 \ud83d\udda5 http://127.0.0.1:8000.</p> <p>\ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \ud83d\ude45 \ud83d\udcc3 \ud83d\udc96:</p> <p></p> <p>\ud83d\udc46 \ud83d\udcaa \ud83c\udd8e \ud83d\udce7 \ud83d\udd22 \ud83d\udce6, &amp; \ud83d\udce8 \ud83d\udc6b:</p> <p></p> <p>&amp; \ud83d\udc46 ReadyAPI \ud83c\ude38 \u23ee\ufe0f *\ufe0f\u20e3 \ud83d\udd1c \ud83d\udce8 \ud83d\udd19:</p> <p></p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udce8 (&amp; \ud83d\udce8) \ud83d\udcda \ud83d\udce7:</p> <p></p> <p>&amp; \ud83c\udf10 \ud83d\udc6b \ud83d\udd1c \u2699\ufe0f \ud83c\udf8f *\ufe0f\u20e3 \ud83d\udd17.</p>"},{"location":"advanced/websockets/#depends","title":"\u2699\ufe0f <code>Depends</code> &amp; \ud83c\udf8f","text":"<p>*\ufe0f\u20e3 \ud83d\udd17 \ud83d\udc46 \ud83d\udcaa \ud83d\uddc4 \u26aa\ufe0f\u27a1\ufe0f <code>readyapi</code> &amp; \u2699\ufe0f:</p> <ul> <li><code>Depends</code></li> <li><code>Security</code></li> <li><code>Cookie</code></li> <li><code>Header</code></li> <li><code>Path</code></li> <li><code>Query</code></li> </ul> <p>\ud83d\udc6b \ud83d\udc77 \ud83c\udf8f \ud83c\udf0c \ud83c\udf8f ReadyAPI \ud83d\udd17/\u27a1 \ud83d\udee0\ufe0f:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom readyapi import (\n    Cookie,\n    Depends,\n    Query,\n    ReadyAPI,\n    WebSocket,\n    WebSocketException,\n    status,\n)\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;label&gt;Item ID: &lt;input type=\"text\" id=\"itemId\" autocomplete=\"off\" value=\"foo\"/&gt;&lt;/label&gt;\n            &lt;label&gt;Token: &lt;input type=\"text\" id=\"token\" autocomplete=\"off\" value=\"some-key-token\"/&gt;&lt;/label&gt;\n            &lt;button onclick=\"connect(event)\"&gt;Connect&lt;/button&gt;\n            &lt;hr&gt;\n            &lt;label&gt;Message: &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;&lt;/label&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n        var ws = null;\n            function connect(event) {\n                var itemId = document.getElementById(\"itemId\")\n                var token = document.getElementById(\"token\")\n                ws = new WebSocket(\"ws://localhost:8000/items/\" + itemId.value + \"/ws?token=\" + token.value);\n                ws.onmessage = function(event) {\n                    var messages = document.getElementById('messages')\n                    var message = document.createElement('li')\n                    var content = document.createTextNode(event.data)\n                    message.appendChild(content)\n                    messages.appendChild(message)\n                };\n                event.preventDefault()\n            }\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\nasync def get_cookie_or_token(\n    websocket: WebSocket,\n    session: Union[str, None] = Cookie(default=None),\n    token: Union[str, None] = Query(default=None),\n):\n    if session is None and token is None:\n        raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION)\n    return session or token\n\n\n@app.websocket(\"/items/{item_id}/ws\")\nasync def websocket_endpoint(\n    websocket: WebSocket,\n    item_id: str,\n    q: Union[int, None] = None,\n    cookie_or_token: str = Depends(get_cookie_or_token),\n):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(\n            f\"Session cookie or query token value is: {cookie_or_token}\"\n        )\n        if q is not None:\n            await websocket.send_text(f\"Query parameter q is: {q}\")\n        await websocket.send_text(f\"Message text was: {data}, for item ID: {item_id}\")\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import (\n    Cookie,\n    Depends,\n    Query,\n    ReadyAPI,\n    WebSocket,\n    WebSocketException,\n    status,\n)\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;label&gt;Item ID: &lt;input type=\"text\" id=\"itemId\" autocomplete=\"off\" value=\"foo\"/&gt;&lt;/label&gt;\n            &lt;label&gt;Token: &lt;input type=\"text\" id=\"token\" autocomplete=\"off\" value=\"some-key-token\"/&gt;&lt;/label&gt;\n            &lt;button onclick=\"connect(event)\"&gt;Connect&lt;/button&gt;\n            &lt;hr&gt;\n            &lt;label&gt;Message: &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;&lt;/label&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n        var ws = null;\n            function connect(event) {\n                var itemId = document.getElementById(\"itemId\")\n                var token = document.getElementById(\"token\")\n                ws = new WebSocket(\"ws://localhost:8000/items/\" + itemId.value + \"/ws?token=\" + token.value);\n                ws.onmessage = function(event) {\n                    var messages = document.getElementById('messages')\n                    var message = document.createElement('li')\n                    var content = document.createTextNode(event.data)\n                    message.appendChild(content)\n                    messages.appendChild(message)\n                };\n                event.preventDefault()\n            }\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\nasync def get_cookie_or_token(\n    websocket: WebSocket,\n    session: Annotated[str | None, Cookie()] = None,\n    token: Annotated[str | None, Query()] = None,\n):\n    if session is None and token is None:\n        raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION)\n    return session or token\n\n\n@app.websocket(\"/items/{item_id}/ws\")\nasync def websocket_endpoint(\n    *,\n    websocket: WebSocket,\n    item_id: str,\n    q: int | None = None,\n    cookie_or_token: Annotated[str, Depends(get_cookie_or_token)],\n):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(\n            f\"Session cookie or query token value is: {cookie_or_token}\"\n        )\n        if q is not None:\n            await websocket.send_text(f\"Query parameter q is: {q}\")\n        await websocket.send_text(f\"Message text was: {data}, for item ID: {item_id}\")\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import (\n    Cookie,\n    Depends,\n    Query,\n    ReadyAPI,\n    WebSocket,\n    WebSocketException,\n    status,\n)\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;label&gt;Item ID: &lt;input type=\"text\" id=\"itemId\" autocomplete=\"off\" value=\"foo\"/&gt;&lt;/label&gt;\n            &lt;label&gt;Token: &lt;input type=\"text\" id=\"token\" autocomplete=\"off\" value=\"some-key-token\"/&gt;&lt;/label&gt;\n            &lt;button onclick=\"connect(event)\"&gt;Connect&lt;/button&gt;\n            &lt;hr&gt;\n            &lt;label&gt;Message: &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;&lt;/label&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n        var ws = null;\n            function connect(event) {\n                var itemId = document.getElementById(\"itemId\")\n                var token = document.getElementById(\"token\")\n                ws = new WebSocket(\"ws://localhost:8000/items/\" + itemId.value + \"/ws?token=\" + token.value);\n                ws.onmessage = function(event) {\n                    var messages = document.getElementById('messages')\n                    var message = document.createElement('li')\n                    var content = document.createTextNode(event.data)\n                    message.appendChild(content)\n                    messages.appendChild(message)\n                };\n                event.preventDefault()\n            }\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\nasync def get_cookie_or_token(\n    websocket: WebSocket,\n    session: Annotated[Union[str, None], Cookie()] = None,\n    token: Annotated[Union[str, None], Query()] = None,\n):\n    if session is None and token is None:\n        raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION)\n    return session or token\n\n\n@app.websocket(\"/items/{item_id}/ws\")\nasync def websocket_endpoint(\n    *,\n    websocket: WebSocket,\n    item_id: str,\n    q: Union[int, None] = None,\n    cookie_or_token: Annotated[str, Depends(get_cookie_or_token)],\n):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(\n            f\"Session cookie or query token value is: {cookie_or_token}\"\n        )\n        if q is not None:\n            await websocket.send_text(f\"Query parameter q is: {q}\")\n        await websocket.send_text(f\"Message text was: {data}, for item ID: {item_id}\")\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import (\n    Cookie,\n    Depends,\n    Query,\n    ReadyAPI,\n    WebSocket,\n    WebSocketException,\n    status,\n)\nfrom readyapi.responses import HTMLResponse\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;label&gt;Item ID: &lt;input type=\"text\" id=\"itemId\" autocomplete=\"off\" value=\"foo\"/&gt;&lt;/label&gt;\n            &lt;label&gt;Token: &lt;input type=\"text\" id=\"token\" autocomplete=\"off\" value=\"some-key-token\"/&gt;&lt;/label&gt;\n            &lt;button onclick=\"connect(event)\"&gt;Connect&lt;/button&gt;\n            &lt;hr&gt;\n            &lt;label&gt;Message: &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;&lt;/label&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n        var ws = null;\n            function connect(event) {\n                var itemId = document.getElementById(\"itemId\")\n                var token = document.getElementById(\"token\")\n                ws = new WebSocket(\"ws://localhost:8000/items/\" + itemId.value + \"/ws?token=\" + token.value);\n                ws.onmessage = function(event) {\n                    var messages = document.getElementById('messages')\n                    var message = document.createElement('li')\n                    var content = document.createTextNode(event.data)\n                    message.appendChild(content)\n                    messages.appendChild(message)\n                };\n                event.preventDefault()\n            }\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\nasync def get_cookie_or_token(\n    websocket: WebSocket,\n    session: Annotated[Union[str, None], Cookie()] = None,\n    token: Annotated[Union[str, None], Query()] = None,\n):\n    if session is None and token is None:\n        raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION)\n    return session or token\n\n\n@app.websocket(\"/items/{item_id}/ws\")\nasync def websocket_endpoint(\n    *,\n    websocket: WebSocket,\n    item_id: str,\n    q: Union[int, None] = None,\n    cookie_or_token: Annotated[str, Depends(get_cookie_or_token)],\n):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(\n            f\"Session cookie or query token value is: {cookie_or_token}\"\n        )\n        if q is not None:\n            await websocket.send_text(f\"Query parameter q is: {q}\")\n        await websocket.send_text(f\"Message text was: {data}, for item ID: {item_id}\")\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import (\n    Cookie,\n    Depends,\n    Query,\n    ReadyAPI,\n    WebSocket,\n    WebSocketException,\n    status,\n)\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;label&gt;Item ID: &lt;input type=\"text\" id=\"itemId\" autocomplete=\"off\" value=\"foo\"/&gt;&lt;/label&gt;\n            &lt;label&gt;Token: &lt;input type=\"text\" id=\"token\" autocomplete=\"off\" value=\"some-key-token\"/&gt;&lt;/label&gt;\n            &lt;button onclick=\"connect(event)\"&gt;Connect&lt;/button&gt;\n            &lt;hr&gt;\n            &lt;label&gt;Message: &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;&lt;/label&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n        var ws = null;\n            function connect(event) {\n                var itemId = document.getElementById(\"itemId\")\n                var token = document.getElementById(\"token\")\n                ws = new WebSocket(\"ws://localhost:8000/items/\" + itemId.value + \"/ws?token=\" + token.value);\n                ws.onmessage = function(event) {\n                    var messages = document.getElementById('messages')\n                    var message = document.createElement('li')\n                    var content = document.createTextNode(event.data)\n                    message.appendChild(content)\n                    messages.appendChild(message)\n                };\n                event.preventDefault()\n            }\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\nasync def get_cookie_or_token(\n    websocket: WebSocket,\n    session: str | None = Cookie(default=None),\n    token: str | None = Query(default=None),\n):\n    if session is None and token is None:\n        raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION)\n    return session or token\n\n\n@app.websocket(\"/items/{item_id}/ws\")\nasync def websocket_endpoint(\n    websocket: WebSocket,\n    item_id: str,\n    q: int | None = None,\n    cookie_or_token: str = Depends(get_cookie_or_token),\n):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(\n            f\"Session cookie or query token value is: {cookie_or_token}\"\n        )\n        if q is not None:\n            await websocket.send_text(f\"Query parameter q is: {q}\")\n        await websocket.send_text(f\"Message text was: {data}, for item ID: {item_id}\")\n</code></pre> <p>Info</p> <p>\ud83d\udc49 *\ufe0f\u20e3 \u26ab\ufe0f \ud83d\udeab \ud83e\udd19 \u2692 \ud83d\udd11 \ud83e\udd1a <code>HTTPException</code>, \u21a9\ufe0f \ud83d\udc65 \ud83e\udd1a <code>WebSocketException</code>.</p> <p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83d\udcea \ud83d\udcdf \u26aa\ufe0f\u27a1\ufe0f \u2611 \ud83d\udcdf \ud83d\udd2c \ud83d\udd27.</p>"},{"location":"advanced/websockets/#_6","title":"\ud83d\udd04 *\ufe0f\u20e3 \u23ee\ufe0f \ud83d\udd17","text":"<p>\ud83d\udea5 \ud83d\udc46 \ud83d\udcc1 \ud83d\udcdb <code>main.py</code>, \ud83c\udfc3 \ud83d\udc46 \ud83c\ude38 \u23ee\ufe0f:</p> <pre><code>$ uvicorn main:app --reload\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>\ud83d\udcc2 \ud83d\udc46 \ud83d\udda5 http://127.0.0.1:8000.</p> <p>\ud83d\udce4 \ud83d\udc46 \ud83d\udcaa \u2692:</p> <ul> <li>\"\ud83c\udfec \ud83c\udd94\", \u2699\ufe0f \u27a1.</li> <li>\"\ud83e\udd1d\" \u2699\ufe0f \ud83d\udd22 \ud83d\udd22.</li> </ul> <p>Tip</p> <p>\ud83d\udc40 \ud83d\udc48 \ud83d\udd22 <code>token</code> \ud83d\udd1c \ud83c\udf75 \ud83d\udd17.</p> <p>\u23ee\ufe0f \ud83d\udc48 \ud83d\udc46 \ud83d\udcaa \ud83d\udd17 *\ufe0f\u20e3 &amp; \u2934\ufe0f \ud83d\udce8 &amp; \ud83d\udce8 \ud83d\udce7:</p> <p></p>"},{"location":"advanced/websockets/#_7","title":"\ud83d\ude9a \ud83d\udd00 &amp; \ud83d\udc97 \ud83d\udc69\u200d\ud83d\udcbb","text":"<p>\ud83d\udd50\u2754 *\ufe0f\u20e3 \ud83d\udd17 \ud83d\udcea, <code>await websocket.receive_text()</code> \ud83d\udd1c \ud83e\udd1a <code>WebSocketDisconnect</code> \u26a0, \u2754 \ud83d\udc46 \ud83d\udcaa \u2934\ufe0f \u270a &amp; \ud83c\udf75 \ud83d\udc96 \ud83d\udc49 \ud83d\uddbc.</p> Python 3.8+ <pre><code>from typing import List\n\nfrom readyapi import ReadyAPI, WebSocket, WebSocketDisconnect\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;h2&gt;Your ID: &lt;span id=\"ws-id\"&gt;&lt;/span&gt;&lt;/h2&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n            var client_id = Date.now()\n            document.querySelector(\"#ws-id\").textContent = client_id;\n            var ws = new WebSocket(`ws://localhost:8000/ws/${client_id}`);\n            ws.onmessage = function(event) {\n                var messages = document.getElementById('messages')\n                var message = document.createElement('li')\n                var content = document.createTextNode(event.data)\n                message.appendChild(content)\n                messages.appendChild(message)\n            };\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\nclass ConnectionManager:\n    def __init__(self):\n        self.active_connections: List[WebSocket] = []\n\n    async def connect(self, websocket: WebSocket):\n        await websocket.accept()\n        self.active_connections.append(websocket)\n\n    def disconnect(self, websocket: WebSocket):\n        self.active_connections.remove(websocket)\n\n    async def send_personal_message(self, message: str, websocket: WebSocket):\n        await websocket.send_text(message)\n\n    async def broadcast(self, message: str):\n        for connection in self.active_connections:\n            await connection.send_text(message)\n\n\nmanager = ConnectionManager()\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\n@app.websocket(\"/ws/{client_id}\")\nasync def websocket_endpoint(websocket: WebSocket, client_id: int):\n    await manager.connect(websocket)\n    try:\n        while True:\n            data = await websocket.receive_text()\n            await manager.send_personal_message(f\"You wrote: {data}\", websocket)\n            await manager.broadcast(f\"Client #{client_id} says: {data}\")\n    except WebSocketDisconnect:\n        manager.disconnect(websocket)\n        await manager.broadcast(f\"Client #{client_id} left the chat\")\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+ <pre><code>from readyapi import ReadyAPI, WebSocket, WebSocketDisconnect\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Chat&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;WebSocket Chat&lt;/h1&gt;\n        &lt;h2&gt;Your ID: &lt;span id=\"ws-id\"&gt;&lt;/span&gt;&lt;/h2&gt;\n        &lt;form action=\"\" onsubmit=\"sendMessage(event)\"&gt;\n            &lt;input type=\"text\" id=\"messageText\" autocomplete=\"off\"/&gt;\n            &lt;button&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul id='messages'&gt;\n        &lt;/ul&gt;\n        &lt;script&gt;\n            var client_id = Date.now()\n            document.querySelector(\"#ws-id\").textContent = client_id;\n            var ws = new WebSocket(`ws://localhost:8000/ws/${client_id}`);\n            ws.onmessage = function(event) {\n                var messages = document.getElementById('messages')\n                var message = document.createElement('li')\n                var content = document.createTextNode(event.data)\n                message.appendChild(content)\n                messages.appendChild(message)\n            };\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n\nclass ConnectionManager:\n    def __init__(self):\n        self.active_connections: list[WebSocket] = []\n\n    async def connect(self, websocket: WebSocket):\n        await websocket.accept()\n        self.active_connections.append(websocket)\n\n    def disconnect(self, websocket: WebSocket):\n        self.active_connections.remove(websocket)\n\n    async def send_personal_message(self, message: str, websocket: WebSocket):\n        await websocket.send_text(message)\n\n    async def broadcast(self, message: str):\n        for connection in self.active_connections:\n            await connection.send_text(message)\n\n\nmanager = ConnectionManager()\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)\n\n\n@app.websocket(\"/ws/{client_id}\")\nasync def websocket_endpoint(websocket: WebSocket, client_id: int):\n    await manager.connect(websocket)\n    try:\n        while True:\n            data = await websocket.receive_text()\n            await manager.send_personal_message(f\"You wrote: {data}\", websocket)\n            await manager.broadcast(f\"Client #{client_id} says: {data}\")\n    except WebSocketDisconnect:\n        manager.disconnect(websocket)\n        await manager.broadcast(f\"Client #{client_id} left the chat\")\n</code></pre> <p>\ud83d\udd04 \u26ab\ufe0f \ud83d\udc45:</p> <ul> <li>\ud83d\udcc2 \ud83d\udcf1 \u23ee\ufe0f \ud83d\udcda \ud83d\udda5 \ud83d\udcd1.</li> <li>\u270d \ud83d\udce7 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc6b.</li> <li>\u2934\ufe0f \ud83d\udd10 1\ufe0f\u20e3 \ud83d\udcd1.</li> </ul> <p>\ud83d\udc48 \ud83d\udd1c \ud83e\udd1a <code>WebSocketDisconnect</code> \u26a0, &amp; \ud83c\udf10 \ud83c\udf8f \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd1c \ud83d\udce8 \ud83d\udce7 \ud83d\udc96:</p> <pre><code>Client #1596980209979 left the chat\n</code></pre> <p>Tip</p> <p>\ud83d\udcf1 \ud83d\udd1b \u2b50 &amp; \ud83d\ude45 \ud83d\uddbc \ud83c\udfa6 \u2754 \ud83c\udf75 &amp; \ud83d\udcfb \ud83d\udce7 \ud83d\udcda *\ufe0f\u20e3 \ud83d\udd17.</p> <p>\u270b\ufe0f \u2714\ufe0f \ud83e\udd2f \ud83d\udc48, \ud83c\udf10 \ud83c\udf75 \ud83d\udcbe, \ud83d\udc41 \ud83d\udcc7, \u26ab\ufe0f \ud83d\udd1c \ud83d\udd74 \ud83d\udc77 \u23ea \ud83d\udee0\ufe0f \ud83c\udfc3, &amp; \ud83d\udd1c \ud83d\udd74 \ud83d\udc77 \u23ee\ufe0f \ud83d\udc41 \ud83d\udee0\ufe0f.</p> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udcaa \ud83d\udd73 \u23e9 \ud83d\udee0\ufe0f \u23ee\ufe0f ReadyAPI \u270b\ufe0f \ud83d\udc48 \ud83c\udf16 \ud83c\udfcb\ufe0f, \ud83d\udc15\u200d\ud83e\uddba \u2733, \u2733 \u2696\ufe0f \ud83c\udf8f, \u2705 \ud83d\udddc/\ud83d\udcfb.</p>"},{"location":"advanced/websockets/#i","title":"\ud83c\udf05 \u2139","text":"<p>\ud83d\udca1 \ud83c\udf05 \ud83d\udd03 \ud83c\udf9b, \u2705 \ud83d\udc83 \ud83e\uddfe:</p> <ul> <li> <code>WebSocket</code> \ud83c\udf93.</li> <li>\ud83c\udf93-\u2693\ufe0f *\ufe0f\u20e3 \ud83d\ude9a.</li> </ul>"},{"location":"advanced/wsgi/","title":"\u2705 \ud83c\udde8\ud83c\uddfb - \ud83c\udffa, \u2733, \ud83c\udf8f","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\uddfb \ud83c\udde8\ud83c\uddfb \ud83c\ude38 \ud83d\udc46 \ud83d\udc40 \u23ee\ufe0f \ud83c\udfa7 \ud83c\ude38 - \ud83d\uddfb, \u26c5 \ud83d\uddf3.</p> <p>\ud83d\udc48, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>WSGIMiddleware</code> &amp; \u2699\ufe0f \u26ab\ufe0f \ud83c\udf81 \ud83d\udc46 \ud83c\udde8\ud83c\uddfb \ud83c\ude38, \ud83d\uddbc, \ud83c\udffa, \u2733, \u2652\ufe0f.</p>"},{"location":"advanced/wsgi/#wsgimiddleware","title":"\u2699\ufe0f <code>WSGIMiddleware</code>","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\uddc4 <code>WSGIMiddleware</code>.</p> <p>\u2934\ufe0f \ud83c\udf81 \ud83c\udde8\ud83c\uddfb (\u2705 \ud83c\udffa) \ud83d\udcf1 \u23ee\ufe0f \ud83d\udee0\ufe0f.</p> <p>&amp; \u2934\ufe0f \ud83d\uddfb \ud83d\udc48 \ud83d\udd3d \u27a1.</p> Python 3.8+ <pre><code>from flask import Flask, request\nfrom markupsafe import escape\nfrom readyapi import ReadyAPI\nfrom readyapi.middleware.wsgi import WSGIMiddleware\n\nflask_app = Flask(__name__)\n\n\n@flask_app.route(\"/\")\ndef flask_main():\n    name = request.args.get(\"name\", \"World\")\n    return f\"Hello, {escape(name)} from Flask!\"\n\n\napp = ReadyAPI()\n\n\n@app.get(\"/v2\")\ndef read_main():\n    return {\"message\": \"Hello World\"}\n\n\napp.mount(\"/v1\", WSGIMiddleware(flask_app))\n</code></pre>"},{"location":"advanced/wsgi/#_1","title":"\u2705 \u26ab\ufe0f","text":"<p>\ud83d\udd1c, \ud83d\udd20 \ud83d\udce8 \ud83d\udd3d \u27a1 <code>/v1/</code> \ud83d\udd1c \ud83c\udf75 \ud83c\udffa \ud83c\ude38.</p> <p>&amp; \ud83c\udf82 \ud83d\udd1c \ud83c\udf75 ReadyAPI.</p> <p>\ud83d\udea5 \ud83d\udc46 \ud83c\udfc3 \u26ab\ufe0f \u23ee\ufe0f Uvicorn &amp; \ud83d\udeb6 http://localhost:8000/v1/ \ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \ud83d\udce8 \u26aa\ufe0f\u27a1\ufe0f \ud83c\udffa:</p> <pre><code>Hello, World from Flask!\n</code></pre> <p>&amp; \ud83d\udea5 \ud83d\udc46 \ud83d\udeb6 http://localhost:8000/v2 \ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \ud83d\udce8 \u26aa\ufe0f\u27a1\ufe0f ReadyAPI:</p> <pre><code>{\n    \"message\": \"Hello World\"\n}\n</code></pre>"},{"location":"advanced/security/","title":"\ud83c\udfe7 \ud83d\udc82\u200d\u2642","text":""},{"location":"advanced/security/#_2","title":"\ud83c\udf16 \u2692","text":"<p>\ud83d\udce4 \u2795 \u2692 \ud83c\udf75 \ud83d\udc82\u200d\u2642 \u2196\ufe0f \u26aa\ufe0f\u27a1\ufe0f \ud83d\udd50 \ud83d\udcd4 \ud83d\udd30 - \ud83d\udc69\u200d\ud83d\udcbb \ud83e\uddae: \ud83d\udc82\u200d\u2642.</p> <p>Tip</p> <p>\u23ed \ud83d\udcc4 \ud83d\udeab \ud83c\udfaf \"\ud83c\udfe7\".</p> <p>&amp; \u26ab\ufe0f \ud83d\udcaa \ud83d\udc48 \ud83d\udc46 \u2699\ufe0f \ud83d\udcbc, \u2697 1\ufe0f\u20e3 \ud83d\udc6b.</p>"},{"location":"advanced/security/#_3","title":"\u270d \ud83d\udd30 \ud83e\udd47","text":"<p>\u23ed \ud83d\udcc4 \ud83e\udd14 \ud83d\udc46 \u23ea \u270d \ud83d\udc51 \ud83d\udd30 - \ud83d\udc69\u200d\ud83d\udcbb \ud83e\uddae: \ud83d\udc82\u200d\u2642.</p> <p>\ud83d\udc6b \ud83c\udf10 \u2693\ufe0f \ud83d\udd1b \ud83c\udf8f \ud83d\udd27, \u270b\ufe0f \u2714 \u2795 \ud83d\udee0\ufe0f.</p>"},{"location":"advanced/security/http-basic-auth/","title":"\ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udd30 \ud83d\udd10","text":"<p>\ud83d\ude45 \ud83d\udcbc, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udd30 \ud83d\udd10.</p> <p>\ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udd30 \ud83d\udd10, \ud83c\ude38 \u231b \ud83c\udf9a \ud83d\udc48 \ud83d\udd0c \ud83c\udd94 &amp; \ud83d\udd10.</p> <p>\ud83d\udea5 \u26ab\ufe0f \ud83d\udeab \ud83d\udce8 \u26ab\ufe0f, \u26ab\ufe0f \ud83d\udce8 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d 4\ufe0f\u20e30\ufe0f\u20e31\ufe0f\u20e3 \"\u26d4\" \u274c.</p> <p>&amp; \ud83d\udce8 \ud83c\udf9a <code>WWW-Authenticate</code> \u23ee\ufe0f \ud83d\udcb2 <code>Basic</code>, &amp; \ud83d\udce6 <code>realm</code> \ud83d\udd22.</p> <p>\ud83d\udc48 \ud83d\udcac \ud83d\udda5 \ud83c\udfa6 \ud83d\udee0\ufe0f \ud83d\udccb \ud83c\udd94 &amp; \ud83d\udd10.</p> <p>\u2934\ufe0f, \ud83d\udd50\u2754 \ud83d\udc46 \ud83c\udd8e \ud83d\udc48 \ud83c\udd94 &amp; \ud83d\udd10, \ud83d\udda5 \ud83d\udce8 \ud83d\udc6b \ud83c\udf9a \ud83d\udd01.</p>"},{"location":"advanced/security/http-basic-auth/#_2","title":"\ud83d\ude45 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udd30 \ud83d\udd10","text":"<ul> <li>\ud83d\uddc4 <code>HTTPBasic</code> &amp; <code>HTTPBasicCredentials</code>.</li> <li>\u270d \"<code>security</code> \u2696\" \u2699\ufe0f <code>HTTPBasic</code>.</li> <li>\u2699\ufe0f \ud83d\udc48 <code>security</code> \u23ee\ufe0f \ud83d\udd17 \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f.</li> <li>\u26ab\ufe0f \ud83d\udce8 \ud83c\udf9a \ud83c\udd8e <code>HTTPBasicCredentials</code>:<ul> <li>\u26ab\ufe0f \ud83d\udd0c <code>username</code> &amp; <code>password</code> \ud83d\udce8.</li> </ul> </li> </ul> Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\n@app.get(\"/users/me\")\ndef read_current_user(credentials: HTTPBasicCredentials = Depends(security)):\n    return {\"username\": credentials.username, \"password\": credentials.password}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\n@app.get(\"/users/me\")\ndef read_current_user(credentials: Annotated[HTTPBasicCredentials, Depends(security)]):\n    return {\"username\": credentials.username, \"password\": credentials.password}\n</code></pre> <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\n@app.get(\"/users/me\")\ndef read_current_user(credentials: Annotated[HTTPBasicCredentials, Depends(security)]):\n    return {\"username\": credentials.username, \"password\": credentials.password}\n</code></pre> <p>\ud83d\udd50\u2754 \ud83d\udc46 \ud83d\udd04 \ud83d\udcc2 \ud83d\udcdb \ud83e\udd47 \ud83d\udd70 (\u2696\ufe0f \ud83d\udd8a \"\ud83d\udee0\ufe0f\" \ud83d\udd3c \ud83e\ude7a) \ud83d\udda5 \ud83d\udd1c \ud83d\udcad \ud83d\udc46 \ud83d\udc46 \ud83c\udd94 &amp; \ud83d\udd10:</p> <p></p>"},{"location":"advanced/security/http-basic-auth/#_3","title":"\u2705 \ud83c\udd94","text":"<p>\ud83d\udce5 \ud83c\udf05 \ud83c\udfc1 \ud83d\uddbc.</p> <p>\u2699\ufe0f \ud83d\udd17 \u2705 \ud83d\udea5 \ud83c\udd94 &amp; \ud83d\udd10 \u2611.</p> <p>\ud83d\udc49, \u2699\ufe0f \ud83d\udc0d \ud83d\udc29 \ud83d\udd79 <code>secrets</code> \u2705 \ud83c\udd94 &amp; \ud83d\udd10.</p> <p><code>secrets.compare_digest()</code> \ud83d\udcaa \u270a <code>bytes</code> \u2696\ufe0f <code>str</code> \ud83d\udc48 \ud83d\udd74 \ud83d\udd0c \ud83d\udd20 \ud83e\uddb9 (\ud83d\udd50 \ud83c\uddea\ud83c\uddf8), \ud83d\udc49 \u26d3 \u26ab\ufe0f \ud83d\udeab\ud83d\udd1c \ud83d\udc77 \u23ee\ufe0f \ud83e\uddb9 \ud83d\udc96 <code>\u00e1</code>, <code>KhulnaSoft</code>.</p> <p>\ud83c\udf75 \ud83d\udc48, \ud83d\udc65 \ud83e\udd47 \ud83d\udddc <code>username</code> &amp; <code>password</code> <code>bytes</code> \ud83d\udd22 \ud83d\udc6b \u23ee\ufe0f \ud83d\udd20-8\ufe0f\u20e3.</p> <p>\u2934\ufe0f \ud83d\udc65 \ud83d\udcaa \u2699\ufe0f <code>secrets.compare_digest()</code> \ud83d\ude9a \ud83d\udc48 <code>credentials.username</code> <code>\"stanleyjobson\"</code>, &amp; \ud83d\udc48 <code>credentials.password</code> <code>\"swordfish\"</code>.</p> Python 3.8+ - non-Annotated <pre><code>import secrets\n\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\ndef get_current_username(credentials: HTTPBasicCredentials = Depends(security)):\n    current_username_bytes = credentials.username.encode(\"utf8\")\n    correct_username_bytes = b\"stanleyjobson\"\n    is_correct_username = secrets.compare_digest(\n        current_username_bytes, correct_username_bytes\n    )\n    current_password_bytes = credentials.password.encode(\"utf8\")\n    correct_password_bytes = b\"swordfish\"\n    is_correct_password = secrets.compare_digest(\n        current_password_bytes, correct_password_bytes\n    )\n    if not (is_correct_username and is_correct_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Basic\"},\n        )\n    return credentials.username\n\n\n@app.get(\"/users/me\")\ndef read_current_user(username: str = Depends(get_current_username)):\n    return {\"username\": username}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>import secrets\nfrom typing import Annotated\n\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\ndef get_current_username(\n    credentials: Annotated[HTTPBasicCredentials, Depends(security)],\n):\n    current_username_bytes = credentials.username.encode(\"utf8\")\n    correct_username_bytes = b\"stanleyjobson\"\n    is_correct_username = secrets.compare_digest(\n        current_username_bytes, correct_username_bytes\n    )\n    current_password_bytes = credentials.password.encode(\"utf8\")\n    correct_password_bytes = b\"swordfish\"\n    is_correct_password = secrets.compare_digest(\n        current_password_bytes, correct_password_bytes\n    )\n    if not (is_correct_username and is_correct_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Basic\"},\n        )\n    return credentials.username\n\n\n@app.get(\"/users/me\")\ndef read_current_user(username: Annotated[str, Depends(get_current_username)]):\n    return {\"username\": username}\n</code></pre> <pre><code>import secrets\n\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\ndef get_current_username(\n    credentials: Annotated[HTTPBasicCredentials, Depends(security)],\n):\n    current_username_bytes = credentials.username.encode(\"utf8\")\n    correct_username_bytes = b\"stanleyjobson\"\n    is_correct_username = secrets.compare_digest(\n        current_username_bytes, correct_username_bytes\n    )\n    current_password_bytes = credentials.password.encode(\"utf8\")\n    correct_password_bytes = b\"swordfish\"\n    is_correct_password = secrets.compare_digest(\n        current_password_bytes, correct_password_bytes\n    )\n    if not (is_correct_username and is_correct_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Basic\"},\n        )\n    return credentials.username\n\n\n@app.get(\"/users/me\")\ndef read_current_user(username: Annotated[str, Depends(get_current_username)]):\n    return {\"username\": username}\n</code></pre> <p>\ud83d\udc49 \ud83d\udd1c \ud83c\udf8f:</p> <pre><code>if not (credentials.username == \"stanleyjobson\") or not (credentials.password == \"swordfish\"):\n    # Return some error\n    ...\n</code></pre> <p>\u270b\ufe0f \u2699\ufe0f <code>secrets.compare_digest()</code> \u26ab\ufe0f \ud83d\udd1c \ud83d\udd10 \ud83d\udee1 \ud83c\udd8e \ud83d\udc4a \ud83e\udd19 \"\ud83d\udd70 \ud83d\udc4a\".</p>"},{"location":"advanced/security/http-basic-auth/#_4","title":"\u23f2 \ud83d\udc4a","text":"<p>\u270b\ufe0f \u26ab\ufe0f\u2754 \"\u23f2 \ud83d\udc4a\"\u2753</p> <p>\u27a1\ufe0f \ud83c\udf08 \ud83d\udc4a \ud83d\udd04 \ud83d\udcad \ud83c\udd94 &amp; \ud83d\udd10.</p> <p>&amp; \ud83d\udc6b \ud83d\udce8 \ud83d\udce8 \u23ee\ufe0f \ud83c\udd94 <code>johndoe</code> &amp; \ud83d\udd10 <code>love123</code>.</p> <p>\u2934\ufe0f \ud83d\udc0d \ud83d\udcdf \ud83d\udc46 \ud83c\ude38 \ud83d\udd1c \ud83c\udf13 \ud83d\udd73 \ud83d\udc96:</p> <pre><code>if \"johndoe\" == \"stanleyjobson\" and \"love123\" == \"swordfish\":\n    ...\n</code></pre> <p>\u270b\ufe0f \u25b6\ufe0f\ufe0f \ud83d\ude4d \ud83d\udc0d \ud83d\udd2c \ud83e\udd47 <code>j</code> <code>johndoe</code> \ud83e\udd47 <code>s</code> <code>stanleyjobson</code>, \u26ab\ufe0f \ud83d\udd1c \ud83d\udce8 <code>False</code>, \u21a9\ufe0f \u26ab\ufe0f \u23ea \ud83d\udcad \ud83d\udc48 \ud83d\udcda 2\ufe0f\u20e3 \ud83c\udfbb \ud83d\udeab \ud83c\udf8f, \ud83d\udcad \ud83d\udc48 \"\ud83d\udce4 \ud83d\ude45\u200d\u2642 \ud83d\udcaa \ud83d\uddd1 \ud83c\udf05 \ud83d\udcca \u2696 \ud83c\udf82 \ud83d\udd24\". &amp; \ud83d\udc46 \ud83c\ude38 \ud83d\udd1c \ud83d\udcac \"\u274c \ud83d\udc69\u200d\ud83d\udcbb \u2696\ufe0f \ud83d\udd10\".</p> <p>\u270b\ufe0f \u2934\ufe0f \ud83d\udc4a \ud83d\udd04 \u23ee\ufe0f \ud83c\udd94 <code>stanleyjobsox</code> &amp; \ud83d\udd10 <code>love123</code>.</p> <p>&amp; \ud83d\udc46 \ud83c\ude38 \ud83d\udcdf \ud83d\udd28 \ud83d\udd73 \ud83d\udc96:</p> <pre><code>if \"stanleyjobsox\" == \"stanleyjobson\" and \"love123\" == \"swordfish\":\n    ...\n</code></pre> <p>\ud83d\udc0d \ud83d\udd1c \u2714\ufe0f \ud83d\udd2c \ud83c\udf82 <code>stanleyjobso</code> \ud83d\udc6f\u200d\u2642\ufe0f <code>stanleyjobsox</code> &amp; <code>stanleyjobson</code> \u23ed \ud83e\udd14 \ud83d\udc48 \ud83d\udc6f\u200d\u2642\ufe0f \ud83c\udfbb \ud83d\udeab \ud83c\udf8f. \u26ab\ufe0f \ud83d\udd1c \u270a \u2795 \u23f2 \ud83d\udce8 \ud83d\udd19 \"\u274c \ud83d\udc69\u200d\ud83d\udcbb \u2696\ufe0f \ud83d\udd10\".</p>"},{"location":"advanced/security/http-basic-auth/#i","title":"\ud83d\udd70 \u2754 \u2139 \ud83d\udc4a","text":"<p>\ud83d\udc48 \u261d, \ud83d\udc40 \ud83d\udc48 \ud83d\udcbd \u270a \u23f2 \ud83d\udccf \ud83d\udce8 \"\u274c \ud83d\udc69\u200d\ud83d\udcbb \u2696\ufe0f \ud83d\udd10\" \ud83d\udce8, \ud83d\udc4a \ud83d\udd1c \ud83d\udcad \ud83d\udc48 \ud83d\udc6b \ud83e\udd1a \ud83d\udd73 \u25b6\ufe0f\ufe0f, \u25b6\ufe0f \ud83d\udd24 \u25b6\ufe0f\ufe0f.</p> <p>&amp; \u2934\ufe0f \ud83d\udc6b \ud83d\udcaa \ud83d\udd04 \ud83d\udd04 \ud83e\udd14 \ud83d\udc48 \u26ab\ufe0f \ud83c\udfb2 \ud83d\udd73 \ud83c\udf16 \ud83c\udf8f <code>stanleyjobsox</code> \ud83c\udf18 <code>johndoe</code>.</p>"},{"location":"advanced/security/http-basic-auth/#_5","title":"\"\ud83d\udd74\" \ud83d\udc4a","text":"<p>\u2197\ufe0f, \ud83d\udc4a \ud83d\udd1c \ud83d\udeab \ud83d\udd04 \ud83c\udf10 \ud83d\udc49 \u270b, \ud83d\udc6b \ud83d\udd1c \u270d \ud83d\udccb \u26ab\ufe0f, \ud83c\udfb2 \u23ee\ufe0f \ud83d\udcaf \u2696\ufe0f \ud83d\udcaf \ud83d\udcaf \ud83d\udccd \ud83e\udd48. &amp; \ud83d\udd1c \ud83e\udd1a 1\ufe0f\u20e3 \u2795 \u2611 \ud83d\udd24 \ud83d\udd70.</p> <p>\u270b\ufe0f \ud83d\udd28 \ud83d\udc48, \u23f2 \u2696\ufe0f \ud83d\udcc6 \ud83d\udc4a \ud83d\udd1c \u2714\ufe0f \ud83d\udcad \u2611 \ud83c\udd94 &amp; \ud83d\udd10, \u23ee\ufe0f \"\u2139\" \ud83d\udc46 \ud83c\ude38, \u2699\ufe0f \ud83d\udd70 \u270a \u2754.</p>"},{"location":"advanced/security/http-basic-auth/#secretscompare_digest","title":"\ud83d\udd27 \u26ab\ufe0f \u23ee\ufe0f <code>secrets.compare_digest()</code>","text":"<p>\u270b\ufe0f \ud83d\udc46 \ud83d\udcdf \ud83d\udc65 \ud83e\udd19 \u2699\ufe0f <code>secrets.compare_digest()</code>.</p> <p>\ud83d\udccf, \u26ab\ufe0f \ud83d\udd1c \u270a \ud83c\udf8f \ud83d\udd70 \ud83d\udd2c <code>stanleyjobsox</code> <code>stanleyjobson</code> \ud83c\udf18 \u26ab\ufe0f \u270a \ud83d\udd2c <code>johndoe</code> <code>stanleyjobson</code>. &amp; \ud83c\udf8f \ud83d\udd10.</p> <p>\ud83d\udc48 \ud83c\udf0c, \u2699\ufe0f <code>secrets.compare_digest()</code> \ud83d\udc46 \ud83c\ude38 \ud83d\udcdf, \u26ab\ufe0f \ud83d\udd1c \ud83d\udd12 \ud83d\udee1 \ud83d\udc49 \ud83c\udf82 \u2194 \ud83d\udc82\u200d\u2642 \ud83d\udc4a.</p>"},{"location":"advanced/security/http-basic-auth/#_6","title":"\ud83d\udce8 \u274c","text":"<p>\u23ee\ufe0f \ud83d\udd0d \ud83d\udc48 \ud83c\udf93 \u274c, \ud83d\udce8 <code>HTTPException</code> \u23ee\ufe0f \ud83d\udc54 \ud83d\udcdf 4\ufe0f\u20e30\ufe0f\u20e31\ufe0f\u20e3 (\ud83c\udf8f \ud83d\udce8 \ud83d\udd50\u2754 \ud83d\ude45\u200d\u2642 \ud83c\udf93 \ud83d\ude9a) &amp; \ud83d\udeae \ud83c\udf9a <code>WWW-Authenticate</code> \u2692 \ud83d\udda5 \ud83c\udfa6 \ud83d\udcb3 \ud83d\udccb \ud83d\udd04:</p> Python 3.8+ - non-Annotated <pre><code>import secrets\n\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\ndef get_current_username(credentials: HTTPBasicCredentials = Depends(security)):\n    current_username_bytes = credentials.username.encode(\"utf8\")\n    correct_username_bytes = b\"stanleyjobson\"\n    is_correct_username = secrets.compare_digest(\n        current_username_bytes, correct_username_bytes\n    )\n    current_password_bytes = credentials.password.encode(\"utf8\")\n    correct_password_bytes = b\"swordfish\"\n    is_correct_password = secrets.compare_digest(\n        current_password_bytes, correct_password_bytes\n    )\n    if not (is_correct_username and is_correct_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Basic\"},\n        )\n    return credentials.username\n\n\n@app.get(\"/users/me\")\ndef read_current_user(username: str = Depends(get_current_username)):\n    return {\"username\": username}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>import secrets\nfrom typing import Annotated\n\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\ndef get_current_username(\n    credentials: Annotated[HTTPBasicCredentials, Depends(security)],\n):\n    current_username_bytes = credentials.username.encode(\"utf8\")\n    correct_username_bytes = b\"stanleyjobson\"\n    is_correct_username = secrets.compare_digest(\n        current_username_bytes, correct_username_bytes\n    )\n    current_password_bytes = credentials.password.encode(\"utf8\")\n    correct_password_bytes = b\"swordfish\"\n    is_correct_password = secrets.compare_digest(\n        current_password_bytes, correct_password_bytes\n    )\n    if not (is_correct_username and is_correct_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Basic\"},\n        )\n    return credentials.username\n\n\n@app.get(\"/users/me\")\ndef read_current_user(username: Annotated[str, Depends(get_current_username)]):\n    return {\"username\": username}\n</code></pre> <pre><code>import secrets\n\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\ndef get_current_username(\n    credentials: Annotated[HTTPBasicCredentials, Depends(security)],\n):\n    current_username_bytes = credentials.username.encode(\"utf8\")\n    correct_username_bytes = b\"stanleyjobson\"\n    is_correct_username = secrets.compare_digest(\n        current_username_bytes, correct_username_bytes\n    )\n    current_password_bytes = credentials.password.encode(\"utf8\")\n    correct_password_bytes = b\"swordfish\"\n    is_correct_password = secrets.compare_digest(\n        current_password_bytes, correct_password_bytes\n    )\n    if not (is_correct_username and is_correct_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Basic\"},\n        )\n    return credentials.username\n\n\n@app.get(\"/users/me\")\ndef read_current_user(username: Annotated[str, Depends(get_current_username)]):\n    return {\"username\": username}\n</code></pre>"},{"location":"advanced/security/oauth2-scopes/","title":"Oauth2\ufe0f\u20e3 \u2194","text":"<p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f Oauth2\ufe0f\u20e3 \u2194 \ud83d\udd17 \u23ee\ufe0f ReadyAPI, \ud83d\udc6b \ud83d\udee0\ufe0f \ud83d\udc77 \ud83d\udc8e.</p> <p>\ud83d\udc49 \ud83d\udd1c \u2714 \ud83d\udc46 \u2714\ufe0f \ud83c\udf16 \ud83d\udc4c-\ud83e\uddfd \u2714 \u2699\ufe0f, \ud83d\udcc4 Oauth2\ufe0f\u20e3 \ud83d\udc29, \ud83d\udee0\ufe0f \ud83d\udd18 \ud83d\udc46 \ud83d\uddc4 \ud83c\ude38 (&amp; \ud83d\udee0\ufe0f \ud83e\ude7a).</p> <p>Oauth2\ufe0f\u20e3 \u23ee\ufe0f \u2194 \ud83d\udee0\ufe0f \u2699\ufe0f \ud83d\udcda \ud83e\udd8f \ud83e\udd1d \ud83d\udc15\u200d\ud83e\uddba, \ud83d\udc96 \ud83d\udc71\ud83d\udcd4, \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d, \ud83d\udcc2, \ud83e\udd38\u200d\u2642, \ud83d\udc71\ud83d\udcd4, \u2652\ufe0f. \ud83d\udc6b \u2699\ufe0f \u26ab\ufe0f \ud83d\ude9a \ud83c\udfaf \u2714 \ud83d\udc69\u200d\ud83d\udcbb &amp; \ud83c\ude38.</p> <p>\ud83d\udd20 \ud83d\udd70 \ud83d\udc46 \"\ud83d\udd79 \u23ee\ufe0f\" \ud83d\udc71\ud83d\udcd4, \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d, \ud83d\udcc2, \ud83e\udd38\u200d\u2642, \ud83d\udc71\ud83d\udcd4, \ud83d\udc48 \ud83c\ude38 \u2699\ufe0f Oauth2\ufe0f\u20e3 \u23ee\ufe0f \u2194.</p> <p>\ud83d\udc49 \ud83d\udcc4 \ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \u2754 \ud83d\udee0\ufe0f \ud83e\udd1d &amp; \u2714 \u23ee\ufe0f \ud83c\udf8f Oauth2\ufe0f\u20e3 \u23ee\ufe0f \u2194 \ud83d\udc46 ReadyAPI \ud83c\ude38.</p> <p>Warning</p> <p>\ud83d\udc49 \ud83c\udf05 \u2696\ufe0f \ud83c\udf18 \ud83c\udfe7 \ud83d\udcc4. \ud83d\udea5 \ud83d\udc46 \u25b6\ufe0f, \ud83d\udc46 \ud83d\udcaa \ud83d\udeb6 \u26ab\ufe0f.</p> <p>\ud83d\udc46 \ud83d\udeab \ud83c\udfaf \ud83d\udcaa Oauth2\ufe0f\u20e3 \u2194, &amp; \ud83d\udc46 \ud83d\udcaa \ud83c\udf75 \ud83e\udd1d &amp; \u2714 \ud83d\udc50 \ud83d\udc46 \ud83d\udc9a.</p> <p>\u270b\ufe0f Oauth2\ufe0f\u20e3 \u23ee\ufe0f \u2194 \ud83d\udcaa \ud83c\udf86 \ud83d\udee0\ufe0f \ud83d\udd18 \ud83d\udc46 \ud83d\udee0\ufe0f (\u23ee\ufe0f \ud83d\uddc4) &amp; \ud83d\udc46 \ud83d\udee0\ufe0f \ud83e\ude7a.</p> <p>\ud83d\udc50, \ud83d\udc46 \ud83d\udee0\ufe0f \ud83d\udcda \u2194, \u2696\ufe0f \ud83d\ude46 \ud83c\udf8f \ud83d\udc82\u200d\u2642/\u2714 \ud83d\udcc4, \ud83d\udc50 \ud83d\udc46 \ud83d\udcaa, \ud83d\udc46 \ud83d\udcdf.</p> <p>\ud83d\udcda \ud83d\udcbc, Oauth2\ufe0f\u20e3 \u23ee\ufe0f \u2194 \ud83d\udcaa \ud83d\udc79.</p> <p>\u270b\ufe0f \ud83d\udea5 \ud83d\udc46 \ud83d\udcad \ud83d\udc46 \ud83d\udcaa \u26ab\ufe0f, \u2696\ufe0f \ud83d\udc46 \ud83d\ude1f, \ud83d\udea7 \ud83d\udc42.</p>"},{"location":"advanced/security/oauth2-scopes/#oauth2_1","title":"Oauth2\ufe0f\u20e3 \u2194 &amp; \ud83d\uddc4","text":"<p>Oauth2\ufe0f\u20e3 \ud83d\udd27 \ud83d\udd2c \"\u2194\" \ud83d\udcc7 \ud83c\udfbb \ud83c\udf8f \ud83d\ude80.</p> <p>\ud83c\udf9a \ud83d\udd20 \ud83d\udc49 \ud83c\udfbb \ud83d\udcaa \u2714\ufe0f \ud83d\ude46 \ud83d\udcc1, \u270b\ufe0f \ud83d\udd1c \ud83d\udeab \ud83d\udd0c \ud83d\ude80.</p> <p>\ud83d\udc6b \u2194 \ud83c\udfa8 \"\u2714\".</p> <p>\ud83d\uddc4 (\u2705 \ud83d\udee0\ufe0f \ud83e\ude7a), \ud83d\udc46 \ud83d\udcaa \ud83d\udd2c \"\ud83d\udc82\u200d\u2642 \u2696\".</p> <p>\ud83d\udd50\u2754 1\ufe0f\u20e3 \ud83d\udc6b \ud83d\udc82\u200d\u2642 \u2696 \u2699\ufe0f Oauth2\ufe0f\u20e3, \ud83d\udc46 \ud83d\udcaa \ud83d\udce3 &amp; \u2699\ufe0f \u2194.</p> <p>\ud83d\udd20 \"\u2194\" \ud83c\udfbb (\ud83c\udf75 \ud83d\ude80).</p> <p>\ud83d\udc6b \ud83d\udece \u2699\ufe0f \ud83d\udce3 \ud83c\udfaf \ud83d\udc82\u200d\u2642 \u2714, \ud83d\uddbc:</p> <ul> <li><code>users:read</code> \u2696\ufe0f <code>users:write</code> \u26a0 \ud83d\uddbc.</li> <li><code>instagram_basic</code> \u2699\ufe0f \ud83d\udc71\ud83d\udcd4 / \ud83d\udc71\ud83d\udcd4.</li> <li><code>https://www.googleapis.com/auth/drive</code> \u2699\ufe0f \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d.</li> </ul> <p>Info</p> <p>Oauth2\ufe0f\u20e3 \"\u2194\" \ud83c\udfbb \ud83d\udc48 \ud83d\udce3 \ud83c\udfaf \u2714 \u2714.</p> <p>\u26ab\ufe0f \ud83d\udeab \ud83e\udd14 \ud83d\udea5 \u26ab\ufe0f \u2714\ufe0f \ud83c\udf8f \ud83e\uddb9 \ud83d\udc96 <code>:</code> \u2696\ufe0f \ud83d\udea5 \u26ab\ufe0f \ud83d\udcdb.</p> <p>\ud83d\udc48 \u2139 \ud83d\udee0\ufe0f \ud83c\udfaf.</p> <p>Oauth2\ufe0f\u20e3 \ud83d\udc6b \ud83c\udfbb.</p>"},{"location":"advanced/security/oauth2-scopes/#_1","title":"\ud83c\udf10 \ud83c\udf91","text":"<p>\ud83e\udd47, \u27a1\ufe0f \ud83d\udd1c \ud83d\udc40 \ud83c\udf55 \ud83d\udc48 \ud83d\udd00 \u26aa\ufe0f\u27a1\ufe0f \ud83d\uddbc \ud83d\udc51 \ud83d\udd30 - \ud83d\udc69\u200d\ud83d\udcbb \ud83e\uddae Oauth2\ufe0f\u20e3 \u23ee\ufe0f \ud83d\udd10 (&amp; \ud83d\udd01), \ud83d\udce8 \u23ee\ufe0f \ud83e\udd59 \ud83e\udd1d. \ud83d\udd1c \u2699\ufe0f Oauth2\ufe0f\u20e3 \u2194:</p> Python 3.8+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>\ud83d\udd1c \u27a1\ufe0f \ud83d\udcc4 \ud83d\udc48 \ud83d\udd00 \ud83d\udd01 \ud83d\udd01.</p>"},{"location":"advanced/security/oauth2-scopes/#oauth2_2","title":"Oauth2\ufe0f\u20e3 \ud83d\udc82\u200d\u2642 \u2696","text":"<p>\ud83e\udd47 \ud83d\udd00 \ud83d\udc48 \ud83d\udd1c \ud83d\udc65 \ud83d\udce3 Oauth2\ufe0f\u20e3 \ud83d\udc82\u200d\u2642 \u2696 \u23ee\ufe0f 2\ufe0f\u20e3 \ud83d\udcaa \u2194, <code>me</code> &amp; <code>items</code>.</p> <p><code>scopes</code> \ud83d\udd22 \ud83d\udce8 <code>dict</code> \u23ee\ufe0f \ud83d\udd20 \u2194 \ud83d\udd11 &amp; \ud83d\udcdb \ud83d\udcb2:</p> Python 3.8+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>\u21a9\ufe0f \ud83d\udc65 \ud83d\udd1c \ud83d\udce3 \ud83d\udcda \u2194, \ud83d\udc6b \ud83d\udd1c \ud83c\udfa6 \ud83c\udd99 \ud83d\udee0\ufe0f \ud83e\ude7a \ud83d\udd50\u2754 \ud83d\udc46 \ud83d\udd79-/\u2714.</p> <p>&amp; \ud83d\udc46 \ud83d\udd1c \ud83d\udcaa \ud83d\udd8a \u2754 \u2194 \ud83d\udc46 \ud83d\udc9a \ud83e\udd1d \ud83d\udd10: <code>me</code> &amp; <code>items</code>.</p> <p>\ud83d\udc49 \ud83c\udf8f \ud83d\udee0\ufe0f \u2699\ufe0f \ud83d\udd50\u2754 \ud83d\udc46 \ud83e\udd1d \u2714 \u23ea \ud83d\udea8 \u23ee\ufe0f \ud83d\udc71\ud83d\udcd4, \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d, \ud83d\udcc2, \u2652\ufe0f:</p> <p></p>"},{"location":"advanced/security/oauth2-scopes/#_2","title":"\ud83e\udd59 \ud83e\udd1d \u23ee\ufe0f \u2194","text":"<p>\ud83d\udd1c, \ud83d\udd00 \ud83e\udd1d \u27a1 \ud83d\udee0\ufe0f \ud83d\udce8 \u2194 \ud83d\udce8.</p> <p>\ud83d\udc65 \u2699\ufe0f \ud83c\udf8f <code>OAuth2PasswordRequestForm</code>. \u26ab\ufe0f \ud83d\udd0c \ud83c\udfe0 <code>scopes</code> \u23ee\ufe0f <code>list</code> <code>str</code>, \u23ee\ufe0f \ud83d\udd20 \u2194 \u26ab\ufe0f \ud83d\udce8 \ud83d\udce8.</p> <p>&amp; \ud83d\udc65 \ud83d\udce8 \u2194 \ud83c\udf55 \ud83e\udd59 \ud83e\udd1d.</p> <p>Danger</p> <p>\ud83e\udd81, \ud83d\udce5 \ud83d\udc65 \u274e \u2194 \ud83d\udce8 \ud83d\udd17 \ud83e\udd1d.</p> <p>\u270b\ufe0f \ud83d\udc46 \ud83c\ude38, \ud83d\udc82\u200d\u2642, \ud83d\udc46 \ud83d\udd1c \u2692 \ud83d\udcad \ud83d\udc46 \ud83d\udd74 \ud83d\udeae \u2194 \ud83d\udc48 \ud83d\udc69\u200d\ud83d\udcbb \ud83e\udd19 \ud83d\udcaa \u2714\ufe0f, \u2696\ufe0f \ud83d\udd50 \ud83d\udc46 \u2714\ufe0f \ud83d\udd01.</p> Python 3.8+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre>"},{"location":"advanced/security/oauth2-scopes/#_3","title":"\ud83d\udce3 \u2194 \u27a1 \ud83d\udee0\ufe0f &amp; \ud83d\udd17","text":"<p>\ud83d\udd1c \ud83d\udc65 \ud83d\udce3 \ud83d\udc48 \u27a1 \ud83d\udee0\ufe0f <code>/users/me/items/</code> \ud83d\ude9a \u2194 <code>items</code>.</p> <p>\ud83d\udc49, \ud83d\udc65 \ud83d\uddc4 &amp; \u2699\ufe0f <code>Security</code> \u26aa\ufe0f\u27a1\ufe0f <code>readyapi</code>.</p> <p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>Security</code> \ud83d\udce3 \ud83d\udd17 (\ud83d\udc96 <code>Depends</code>), \u270b\ufe0f <code>Security</code> \ud83d\udce8 \ud83d\udd22 <code>scopes</code> \u23ee\ufe0f \ud83d\udcc7 \u2194 (\ud83c\udfbb).</p> <p>\ud83d\udc49 \ud83d\udcbc, \ud83d\udc65 \ud83d\udeb6\u200d\u2640\ufe0f \ud83d\udd17 \ud83d\udd22 <code>get_current_active_user</code> <code>Security</code> (\ud83c\udf8f \ud83c\udf0c \ud83d\udc65 \ud83d\udd1c \u23ee\ufe0f <code>Depends</code>).</p> <p>\u270b\ufe0f \ud83d\udc65 \ud83d\udeb6\u200d\u2640\ufe0f <code>list</code> \u2194, \ud83d\udc49 \ud83d\udcbc \u23ee\ufe0f 1\ufe0f\u20e3 \u2194: <code>items</code> (\u26ab\ufe0f \ud83d\udcaa \u2714\ufe0f \ud83c\udf05).</p> <p>&amp; \ud83d\udd17 \ud83d\udd22 <code>get_current_active_user</code> \ud83d\udcaa \ud83d\udce3 \ud83c\udfa7-\ud83d\udd17, \ud83d\udeab \ud83d\udd74 \u23ee\ufe0f <code>Depends</code> \u270b\ufe0f \u23ee\ufe0f <code>Security</code>. \ud83d\udce3 \ud83d\udeae \ud83d\udc4d \ud83c\udfa7-\ud83d\udd17 \ud83d\udd22 (<code>get_current_user</code>), &amp; \ud83c\udf16 \u2194 \ud83d\udcc4.</p> <p>\ud83d\udc49 \ud83d\udcbc, \u26ab\ufe0f \ud83d\ude9a \u2194 <code>me</code> (\u26ab\ufe0f \ud83d\udcaa \ud83d\ude9a \ud83c\udf05 \ud83c\udf18 1\ufe0f\u20e3 \u2194).</p> <p>Note</p> <p>\ud83d\udc46 \ud83d\udeab \ud83c\udfaf \ud83d\udcaa \ud83d\udeae \ud83c\udf8f \u2194 \ud83c\udf8f \ud83e\udd49.</p> <p>\ud83d\udc65 \ud83d\udd28 \u26ab\ufe0f \ud83d\udce5 \ud83c\udfa6 \u2754 ReadyAPI \ud83c\udf75 \u2194 \ud83d\udce3 \ud83c\udf8f \ud83c\udf9a.</p> Python 3.8+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>\ud83d\udce1 \u2139</p> <p><code>Security</code> \ud83e\udd19 \ud83c\udfff <code>Depends</code>, &amp; \u26ab\ufe0f \u2714\ufe0f 1\ufe0f\u20e3 \u2795 \ud83d\udd22 \ud83d\udc48 \ud83d\udc65 \ud83d\udd1c \ud83d\udc40 \u23ea.</p> <p>\u270b\ufe0f \u2699\ufe0f <code>Security</code> \u21a9\ufe0f <code>Depends</code>, ReadyAPI \ud83d\udd1c \ud83d\udcad \ud83d\udc48 \u26ab\ufe0f \ud83d\udcaa \ud83d\udce3 \ud83d\udc82\u200d\u2642 \u2194, \u2699\ufe0f \ud83d\udc6b \ud83d\udd18, &amp; \ud83d\udcc4 \ud83d\udee0\ufe0f \u23ee\ufe0f \ud83d\uddc4.</p> <p>\u270b\ufe0f \ud83d\udd50\u2754 \ud83d\udc46 \ud83d\uddc4 <code>Query</code>, <code>Path</code>, <code>Depends</code>, <code>Security</code> &amp; \ud83c\udf8f \u26aa\ufe0f\u27a1\ufe0f <code>readyapi</code>, \ud83d\udc48 \ud83e\udd19 \ud83d\udd22 \ud83d\udc48 \ud83d\udce8 \ud83c\udf81 \ud83c\udf93.</p>"},{"location":"advanced/security/oauth2-scopes/#securityscopes","title":"\u2699\ufe0f <code>SecurityScopes</code>","text":"<p>\ud83d\udd1c \u2139 \ud83d\udd17 <code>get_current_user</code>.</p> <p>\ud83d\udc49 1\ufe0f\u20e3 \u2699\ufe0f \ud83d\udd17 \ud83d\udd1b.</p> <p>\ud83d\udce5 \ud83d\udc65 \u2699\ufe0f \ud83c\udf8f Oauth2\ufe0f\u20e3 \u2696 \ud83d\udc65 \u270d \u23ed, \ud83d\udce3 \u26ab\ufe0f \ud83d\udd17: <code>oauth2_scheme</code>.</p> <p>\u21a9\ufe0f \ud83d\udc49 \ud83d\udd17 \ud83d\udd22 \ud83d\udeab \u2714\ufe0f \ud83d\ude46 \u2194 \ud83d\udcc4 \u26ab\ufe0f, \ud83d\udc65 \ud83d\udcaa \u2699\ufe0f <code>Depends</code> \u23ee\ufe0f <code>oauth2_scheme</code>, \ud83d\udc65 \ud83d\udeab \u2714\ufe0f \u2699\ufe0f <code>Security</code> \ud83d\udd50\u2754 \ud83d\udc65 \ud83d\udeab \ud83d\udcaa \u2714 \ud83d\udc82\u200d\u2642 \u2194.</p> <p>\ud83d\udc65 \ud83d\udce3 \ud83c\udf81 \ud83d\udd22 \ud83c\udd8e <code>SecurityScopes</code>, \ud83d\uddc4 \u26aa\ufe0f\u27a1\ufe0f <code>readyapi.security</code>.</p> <p>\ud83d\udc49 <code>SecurityScopes</code> \ud83c\udf93 \ud83c\udf8f <code>Request</code> (<code>Request</code> \u2699\ufe0f \ud83e\udd1a \ud83d\udce8 \ud83c\udf9a \ud83d\udd17).</p> Python 3.8+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre>"},{"location":"advanced/security/oauth2-scopes/#scopes","title":"\u2699\ufe0f <code>scopes</code>","text":"<p>\ud83d\udd22 <code>security_scopes</code> \ud83d\udd1c \ud83c\udd8e <code>SecurityScopes</code>.</p> <p>\u26ab\ufe0f \ud83d\udd1c \u2714\ufe0f \ud83c\udfe0 <code>scopes</code> \u23ee\ufe0f \ud83d\udcc7 \u2697 \ud83c\udf10 \u2194 \u2714 \u26ab\ufe0f &amp; \ud83c\udf10 \ud83d\udd17 \ud83d\udc48 \u2699\ufe0f \ud83d\udc49 \ud83c\udfa7-\ud83d\udd17. \ud83d\udc48 \u26d3, \ud83c\udf10 \"\u2693\ufe0f\"... \ud83d\udc49 \ud83d\udcaa \ud83d\udd0a \ud83d\ude28, \u26ab\ufe0f \ud83d\udd2c \ud83d\udd04 \u23ea \ud83d\udd1b.</p> <p><code>security_scopes</code> \ud83c\udf9a (\ud83c\udf93 <code>SecurityScopes</code>) \ud83d\ude9a <code>scope_str</code> \ud83d\udd22 \u23ee\ufe0f \ud83d\udc41 \ud83c\udfbb, \ud83d\udd0c \ud83d\udc48 \u2194 \ud83d\udc7d \ud83d\ude80 (\ud83d\udc65 \ud83d\udd1c \u2699\ufe0f \u26ab\ufe0f).</p> <p>\ud83d\udc65 \u270d <code>HTTPException</code> \ud83d\udc48 \ud83d\udc65 \ud83d\udcaa \ud83c\udfe4-\u2699\ufe0f (<code>raise</code>) \u23ea \ud83d\udcda \u261d.</p> <p>\ud83d\udc49 \u26a0, \ud83d\udc65 \ud83d\udd0c \u2194 \ud83d\ude9a (\ud83d\udea5 \ud83d\ude46) \ud83c\udfbb \ud83d\udc7d \ud83d\ude80 (\u2699\ufe0f <code>scope_str</code>). \ud83d\udc65 \ud83d\udeae \ud83d\udc48 \ud83c\udfbb \u2697 \u2194 <code>WWW-Authenticate</code> \ud83c\udf9a (\ud83d\udc49 \ud83c\udf55 \ud83d\udd0c).</p> Python 3.8+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre>"},{"location":"advanced/security/oauth2-scopes/#username","title":"\u2714 <code>username</code> &amp; \ud83d\udcbd \ud83d\udca0","text":"<p>\ud83d\udc65 \u2714 \ud83d\udc48 \ud83d\udc65 \ud83e\udd1a <code>username</code>, &amp; \u2697 \u2194.</p> <p>&amp; \u2934\ufe0f \ud83d\udc65 \u2714 \ud83d\udc48 \ud83d\udcca \u23ee\ufe0f Pydantic \ud83c\udff7 (\u270a <code>ValidationError</code> \u26a0), &amp; \ud83d\udea5 \ud83d\udc65 \ud83e\udd1a \u274c \ud83d\udc42 \ud83e\udd59 \ud83e\udd1d \u2696\ufe0f \u2696 \ud83d\udcca \u23ee\ufe0f Pydantic, \ud83d\udc65 \ud83e\udd1a <code>HTTPException</code> \ud83d\udc65 \u270d \u23ed.</p> <p>\ud83d\udc48, \ud83d\udc65 \u2139 Pydantic \ud83c\udff7 <code>TokenData</code> \u23ee\ufe0f \ud83c\udd95 \ud83c\udfe0 <code>scopes</code>.</p> <p>\u2696 \ud83d\udcca \u23ee\ufe0f Pydantic \ud83d\udc65 \ud83d\udcaa \u2692 \ud83d\udcad \ud83d\udc48 \ud83d\udc65 \u2714\ufe0f, \ud83d\uddbc, \u26ab\ufe0f\u2754 <code>list</code> <code>str</code> \u23ee\ufe0f \u2194 &amp; <code>str</code> \u23ee\ufe0f <code>username</code>.</p> <p>\u21a9\ufe0f, \ud83d\uddbc, <code>dict</code>, \u2696\ufe0f \ud83d\udd73 \ud83d\ude46, \u26ab\ufe0f \ud83d\udcaa \ud83d\udc94 \ud83c\ude38 \u261d \u23ea, \u2692 \u26ab\ufe0f \ud83d\udc82\u200d\u2642 \u26a0.</p> <p>\ud83d\udc65 \u2714 \ud83d\udc48 \ud83d\udc65 \u2714\ufe0f \ud83d\udc69\u200d\ud83d\udcbb \u23ee\ufe0f \ud83d\udc48 \ud83c\udd94, &amp; \ud83d\udea5 \ud83d\udeab, \ud83d\udc65 \ud83e\udd1a \ud83d\udc48 \ud83c\udf8f \u26a0 \ud83d\udc65 \u270d \u23ed.</p> Python 3.8+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre>"},{"location":"advanced/security/oauth2-scopes/#scopes_1","title":"\u2714 <code>scopes</code>","text":"<p>\ud83d\udc65 \ud83d\udd1c \u2714 \ud83d\udc48 \ud83c\udf10 \u2194 \u2714, \ud83d\udc49 \ud83d\udd17 &amp; \ud83c\udf10 \u2693\ufe0f (\ud83d\udd0c \u27a1 \ud83d\udee0\ufe0f), \ud83d\udd0c \u2194 \ud83d\ude9a \ud83e\udd1d \ud83d\udce8, \u23ea \ud83e\udd1a <code>HTTPException</code>.</p> <p>\ud83d\udc49, \ud83d\udc65 \u2699\ufe0f <code>security_scopes.scopes</code>, \ud83d\udc48 \ud83d\udd0c <code>list</code> \u23ee\ufe0f \ud83c\udf10 \ud83d\udc6b \u2194 <code>str</code>.</p> Python 3.8+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom readyapi import Depends, HTTPException, ReadyAPI, Security, status\nfrom readyapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n\n@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}\n</code></pre>"},{"location":"advanced/security/oauth2-scopes/#_4","title":"\ud83d\udd17 \ud83c\udf32 &amp; \u2194","text":"<p>\u27a1\ufe0f \ud83d\udcc4 \ud83d\udd04 \ud83d\udc49 \ud83d\udd17 \ud83c\udf32 &amp; \u2194.</p> <p><code>get_current_active_user</code> \ud83d\udd17 \u2714\ufe0f \ud83c\udfa7-\ud83d\udd17 \ud83d\udd1b <code>get_current_user</code>, \u2194 <code>\"me\"</code> \ud83d\udce3 <code>get_current_active_user</code> \ud83d\udd1c \ud83d\udd0c \ud83d\udcc7 \u2714 \u2194 <code>security_scopes.scopes</code> \ud83d\udeb6\u200d\u2640\ufe0f <code>get_current_user</code>.</p> <p>\u27a1 \ud83d\udee0\ufe0f \u26ab\ufe0f \ud83d\udce3 \u2194, <code>\"items\"</code>, \ud83d\udc49 \ud83d\udd1c \ud83d\udcc7 <code>security_scopes.scopes</code> \ud83d\udeb6\u200d\u2640\ufe0f <code>get_current_user</code>.</p> <p>\ud83d\udce5 \u2754 \ud83d\udd17 \ud83d\udd17 &amp; \u2194 \ud83d\udc40 \ud83d\udc96:</p> <ul> <li>\u27a1 \ud83d\udee0\ufe0f <code>read_own_items</code> \u2714\ufe0f:<ul> <li>\u2714 \u2194 <code>[\"items\"]</code> \u23ee\ufe0f \ud83d\udd17:</li> <li><code>get_current_active_user</code>:<ul> <li>\ud83d\udd17 \ud83d\udd22 <code>get_current_active_user</code> \u2714\ufe0f:<ul> <li>\u2714 \u2194 <code>[\"me\"]</code> \u23ee\ufe0f \ud83d\udd17:</li> <li><code>get_current_user</code>:<ul> <li>\ud83d\udd17 \ud83d\udd22 <code>get_current_user</code> \u2714\ufe0f:<ul> <li>\ud83d\ude45\u200d\u2642 \u2194 \u2714 \u26ab\ufe0f.</li> <li>\ud83d\udd17 \u2699\ufe0f <code>oauth2_scheme</code>.</li> <li><code>security_scopes</code> \ud83d\udd22 \ud83c\udd8e <code>SecurityScopes</code>:<ul> <li>\ud83d\udc49 <code>security_scopes</code> \ud83d\udd22 \u2714\ufe0f \ud83c\udfe0 <code>scopes</code> \u23ee\ufe0f <code>list</code> \u2697 \ud83c\udf10 \ud83d\udc6b \u2194 \ud83d\udce3 \ud83d\udd1b,:<ul> <li><code>security_scopes.scopes</code> \ud83d\udd1c \ud83d\udd0c <code>[\"me\", \"items\"]</code> \u27a1 \ud83d\udee0\ufe0f <code>read_own_items</code>.</li> <li><code>security_scopes.scopes</code> \ud83d\udd1c \ud83d\udd0c <code>[\"me\"]</code> \u27a1 \ud83d\udee0\ufe0f <code>read_users_me</code>, \u21a9\ufe0f \u26ab\ufe0f \ud83d\udce3 \ud83d\udd17 <code>get_current_active_user</code>.</li> <li><code>security_scopes.scopes</code> \ud83d\udd1c \ud83d\udd0c <code>[]</code> (\ud83d\udd73) \u27a1 \ud83d\udee0\ufe0f <code>read_system_status</code>, \u21a9\ufe0f \u26ab\ufe0f \ud83d\udeab \ud83d\udce3 \ud83d\ude46 <code>Security</code> \u23ee\ufe0f <code>scopes</code>, &amp; \ud83d\udeae \ud83d\udd17, <code>get_current_user</code>, \ud83d\udeab \ud83d\udce3 \ud83d\ude46 <code>scope</code> \ud83d\udc6f\u200d\u2642\ufe0f.</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> <p>Tip</p> <p>\u26a0 &amp; \"\ud83c\udfb1\" \ud83d\udc5c \ud83d\udce5 \ud83d\udc48 <code>get_current_user</code> \ud83d\udd1c \u2714\ufe0f \ud83c\udf8f \ud83d\udcc7 <code>scopes</code> \u2705 \ud83d\udd20 \u27a1 \ud83d\udee0\ufe0f.</p> <p>\ud83c\udf10 \u2693\ufe0f \ud83d\udd1b <code>scopes</code> \ud83d\udce3 \ud83d\udd20 \u27a1 \ud83d\udee0\ufe0f &amp; \ud83d\udd20 \ud83d\udd17 \ud83d\udd17 \ud83c\udf32 \ud83d\udc48 \ud83c\udfaf \u27a1 \ud83d\udee0\ufe0f.</p>"},{"location":"advanced/security/oauth2-scopes/#i-securityscopes","title":"\ud83c\udf16 \u2139 \ud83d\udd03 <code>SecurityScopes</code>","text":"<p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>SecurityScopes</code> \ud83d\ude46 \u261d, &amp; \ud83d\udc97 \ud83e\udd49, \u26ab\ufe0f \ud83d\udeab \u2714\ufe0f \"\ud83c\udf31\" \ud83d\udd17.</p> <p>\u26ab\ufe0f \ud83d\udd1c \ud83d\udd67 \u2714\ufe0f \ud83d\udc82\u200d\u2642 \u2194 \ud83d\udce3 \u23ee\ufe0f <code>Security</code> \ud83d\udd17 &amp; \ud83c\udf10 \u2693\ufe0f \ud83d\udc48 \ud83c\udfaf \u27a1 \ud83d\udee0\ufe0f &amp; \ud83d\udc48 \ud83c\udfaf \ud83d\udd17 \ud83c\udf32.</p> <p>\u21a9\ufe0f <code>SecurityScopes</code> \ud83d\udd1c \u2714\ufe0f \ud83c\udf10 \u2194 \ud83d\udce3 \u2693\ufe0f, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \u26ab\ufe0f \u2714 \ud83d\udc48 \ud83e\udd1d \u2714\ufe0f \ud83d\ude9a \u2194 \ud83c\udde8\ud83c\uddeb \ud83d\udd17 \ud83d\udd22, &amp; \u2934\ufe0f \ud83d\udce3 \ud83c\udf8f \u2194 \ud83d\udcc4 \ud83c\udf8f \u27a1 \ud83d\udee0\ufe0f.</p> <p>\ud83d\udc6b \ud83d\udd1c \u2705 \u27a1 \ud83d\udd20 \u27a1 \ud83d\udee0\ufe0f.</p>"},{"location":"advanced/security/oauth2-scopes/#_5","title":"\u2705 \u26ab\ufe0f","text":"<p>\ud83d\udea5 \ud83d\udc46 \ud83d\udcc2 \ud83d\udee0\ufe0f \ud83e\ude7a, \ud83d\udc46 \ud83d\udcaa \ud83d\udd13 &amp; \u2714 \u2754 \u2194 \ud83d\udc46 \ud83d\udc9a \u2714.</p> <p></p> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udeab \ud83d\udd8a \ud83d\ude46 \u2194, \ud83d\udc46 \ud83d\udd1c \"\ud83d\udd13\", \u270b\ufe0f \ud83d\udd50\u2754 \ud83d\udc46 \ud83d\udd04 \ud83d\udd10 <code>/users/me/</code> \u2696\ufe0f <code>/users/me/items/</code> \ud83d\udc46 \ud83d\udd1c \ud83e\udd1a \u274c \ud83d\udcac \ud83d\udc48 \ud83d\udc46 \ud83d\udeab \u2714\ufe0f \ud83e\udd43 \u2714. \ud83d\udc46 \ud83d\udd1c \ud83d\udcaa \ud83d\udd10 <code>/status/</code>.</p> <p>&amp; \ud83d\udea5 \ud83d\udc46 \ud83d\udd8a \u2194 <code>me</code> \u270b\ufe0f \ud83d\udeab \u2194 <code>items</code>, \ud83d\udc46 \ud83d\udd1c \ud83d\udcaa \ud83d\udd10 <code>/users/me/</code> \u270b\ufe0f \ud83d\udeab <code>/users/me/items/</code>.</p> <p>\ud83d\udc48 \u26ab\ufe0f\u2754 \ud83d\udd1c \ud83d\udd28 \ud83e\udd49 \ud83e\udd73 \ud83c\ude38 \ud83d\udc48 \ud83d\udd04 \ud83d\udd10 1\ufe0f\u20e3 \ud83d\udc6b \u27a1 \ud83d\udee0\ufe0f \u23ee\ufe0f \ud83e\udd1d \ud83d\ude9a \ud83d\udc69\u200d\ud83d\udcbb, \u2693\ufe0f \ud83d\udd1b \u2754 \ud83d\udcda \u2714 \ud83d\udc69\u200d\ud83d\udcbb \ud83e\udd1d \ud83c\ude38.</p>"},{"location":"advanced/security/oauth2-scopes/#_6","title":"\ud83d\udd03 \ud83e\udd49 \ud83e\udd73 \ud83d\udee0\ufe0f","text":"<p>\ud83d\udc49 \ud83d\uddbc \ud83d\udc65 \u2699\ufe0f Oauth2\ufe0f\u20e3 \"\ud83d\udd10\" \ud83d\udca7.</p> <p>\ud83d\udc49 \u2611 \ud83d\udd50\u2754 \ud83d\udc65 \ud83d\udea8 \ud83d\udc46 \ud83d\udc4d \ud83c\ude38, \ud83c\udfb2 \u23ee\ufe0f \ud83d\udc46 \ud83d\udc4d \ud83d\udd78.</p> <p>\u21a9\ufe0f \ud83d\udc65 \ud83d\udcaa \ud83d\udc99 \u26ab\ufe0f \ud83d\udce8 <code>username</code> &amp; <code>password</code>, \ud83d\udc65 \ud83c\udf9b \u26ab\ufe0f.</p> <p>\u270b\ufe0f \ud83d\udea5 \ud83d\udc46 \ud83c\udfd7 Oauth2\ufe0f\u20e3 \ud83c\ude38 \ud83d\udc48 \ud83c\udf8f \ud83d\udd1c \ud83d\udd17 (\u27a1, \ud83d\udea5 \ud83d\udc46 \ud83c\udfd7 \ud83e\udd1d \ud83d\udc15\u200d\ud83e\uddba \ud83c\udf13 \ud83d\udc71\ud83d\udcd4, \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d, \ud83d\udcc2, \u2652\ufe0f.) \ud83d\udc46 \ud83d\udd1c \u2699\ufe0f 1\ufe0f\u20e3 \ud83c\udf8f \ud83d\udca7.</p> <p>\ud83c\udf05 \u26a0 \ud83d\udd11 \ud83d\udca7.</p> <p>\ud83c\udfc6 \ud83d\udd10 \ud83d\udcdf \ud83d\udca7, \u270b\ufe0f \ud83c\udf16 \ud83c\udfd7 \ud83d\udee0\ufe0f \u26ab\ufe0f \ud83d\ude9a \ud83c\udf05 \ud83d\udcf6. \u26ab\ufe0f \ud83c\udf05 \ud83c\udfd7, \ud83d\udcda \ud83d\udc15\u200d\ud83e\uddba \ud83d\udd1a \ud83c\udd99 \u2714 \ud83d\udd11 \ud83d\udca7.</p> <p>Note</p> <p>\u26ab\ufe0f \u26a0 \ud83d\udc48 \ud83d\udd20 \ud83e\udd1d \ud83d\udc15\u200d\ud83e\uddba \ud83d\udcdb \ud83d\udc6b \ud83d\udca7 \ud83c\udf8f \ud83c\udf0c, \u2692 \u26ab\ufe0f \ud83c\udf55 \ud83d\udc6b \ud83c\udff7.</p> <p>\u270b\ufe0f \ud83d\udd1a, \ud83d\udc6b \ud83d\udee0\ufe0f \ud83c\udf8f Oauth2\ufe0f\u20e3 \ud83d\udc29.</p> <p>ReadyAPI \ud83d\udd0c \ud83d\ude99 \ud83c\udf10 \ud83d\udc6b Oauth2\ufe0f\u20e3 \ud83e\udd1d \ud83d\udca7 <code>readyapi.security.oauth2</code>.</p>"},{"location":"advanced/security/oauth2-scopes/#security-dependencies","title":"<code>Security</code> \ud83d\udc68\u200d\ud83c\udfa8 <code>dependencies</code>","text":"<p>\ud83c\udf8f \ud83c\udf0c \ud83d\udc46 \ud83d\udcaa \ud83d\udd2c <code>list</code> <code>Depends</code> \ud83d\udc68\u200d\ud83c\udfa8 <code>dependencies</code> \ud83d\udd22 (\ud83d\udd2c \ud83d\udd17 \u27a1 \ud83d\udee0\ufe0f \ud83d\udc68\u200d\ud83c\udfa8), \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>Security</code> \u23ee\ufe0f <code>scopes</code> \ud83d\udce4.</p>"},{"location":"deployment/","title":"\ud83d\udee0\ufe0f","text":"<p>\ud83d\udee0\ufe0f ReadyAPI \ud83c\ude38 \ud83d\udcf6 \u23e9.</p>"},{"location":"deployment/#_2","title":"\u26ab\ufe0f\u2754 \ud83d\udd28 \ud83d\udee0\ufe0f \u26d3","text":"<p>\ud83d\udee0\ufe0f \ud83c\ude38 \u26d3 \ud83c\udfad \ud83d\udcaa \ud83d\udcf6 \u2692 \u26ab\ufe0f \ud83d\udcaa \ud83d\udc69\u200d\ud83d\udcbb.</p> <p>\ud83d\udd78 \ud83d\udee0\ufe0f, \u26ab\ufe0f \ud83d\udece \ud83d\udd0c \ud83d\udeae \u26ab\ufe0f \ud83d\udef0 \ud83c\udfb0, \u23ee\ufe0f \ud83d\udcbd \ud83d\udccb \ud83d\udc48 \ud83d\ude9a \ud83d\udc4d \ud83c\udfad, \u2696, \u2652\ufe0f, \ud83d\udc48 \ud83d\udc46 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udcaa \ud83d\udd10 \ud83c\ude38 \u267b &amp; \ud83c\udf75 \ud83d\udd01 \u2696\ufe0f \u26a0.</p> <p>\ud83d\udc49 \ud83d\udd05 \ud83d\udee0\ufe0f \u25b6\ufe0f, \ud83c\udf10\u2754 \ud83d\udc46 \ud83d\udd67 \ud83d\udd00 \ud83d\udcdf, \ud83d\udc94 \u26ab\ufe0f &amp; \u267b \u26ab\ufe0f, \u26d4\ufe0f &amp; \ud83d\udd01 \ud83d\udee0\ufe0f \ud83d\udcbd, \u2652\ufe0f.</p>"},{"location":"deployment/#_3","title":"\ud83d\udee0\ufe0f \ud83c\udf9b","text":"<p>\ud83d\udce4 \ud83d\udcda \ud83c\udf0c \u26ab\ufe0f \u2693\ufe0f \ud83d\udd1b \ud83d\udc46 \ud83c\udfaf \u2699\ufe0f \ud83d\udcbc &amp; \ud83e\uddf0 \ud83d\udc48 \ud83d\udc46 \u2699\ufe0f.</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udee0\ufe0f \ud83d\udcbd \ud83d\udc46 \u2699\ufe0f \ud83c\udf00 \ud83e\uddf0, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \u2601 \ud83d\udc15\u200d\ud83e\uddba \ud83d\udc48 \ud83d\udd28 \ud83c\udf55 \ud83d\udc77 \ud83d\udc46, \u2696\ufe0f \ud83c\udf8f \ud83d\udcaa \ud83c\udf9b.</p> <p>\ud83d\udc64 \ud83d\udd1c \ud83c\udfa6 \ud83d\udc46 \ud83d\udc51 \ud83d\udd27 \ud83d\udc46 \ud83d\udd1c \ud83c\udfb2 \u2714\ufe0f \ud83e\udd2f \ud83d\udd50\u2754 \ud83d\udee0\ufe0f ReadyAPI \ud83c\ude38 (\ud83d\udc50 \ud83c\udf05 \u26ab\ufe0f \u2714 \ud83d\ude46 \ud83c\udf8f \ud83c\udd8e \ud83d\udd78 \ud83c\ude38).</p> <p>\ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \ud83c\udf16 \u2139 \u2714\ufe0f \ud83e\udd2f &amp; \u2692 \u26ab\ufe0f \u23ed \ud83d\udcc4. \ud83d\udc76</p>"},{"location":"deployment/concepts/","title":"\ud83d\udee0\ufe0f \ud83d\udd27","text":"<p>\ud83d\udd50\u2754 \ud83d\udee0\ufe0f ReadyAPI \ud83c\ude38, \u2696\ufe0f \ud83e\udd19, \ud83d\ude46 \ud83c\udd8e \ud83d\udd78 \ud83d\udee0\ufe0f, \ud83d\udce4 \ud83d\udcda \ud83d\udd27 \ud83d\udc48 \ud83d\udc46 \ud83c\udfb2 \ud83d\udc85 \ud83d\udd03, &amp; \u2699\ufe0f \ud83d\udc6b \ud83d\udc46 \ud83d\udcaa \ud83d\udd0e \ud83c\udfc6 \u2611 \ud83c\udf0c \ud83d\udee0\ufe0f \ud83d\udc46 \ud83c\ude38.</p> <p>\u26a0 \ud83d\udd27:</p> <ul> <li>\ud83d\udc82\u200d\u2642 - \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d</li> <li>\ud83c\udfc3\u200d\u2642 \ud83d\udd1b \ud83d\udd74</li> <li>\u23cf</li> <li>\ud83e\uddec (\ud83d\udd22 \ud83d\udee0\ufe0f \ud83c\udfc3)</li> <li>\ud83d\udcbe</li> <li>\u23ee\ufe0f \ud83d\udd01 \u23ed \u25b6\ufe0f</li> </ul> <p>\ud83d\udc65 \ud83d\udd1c \ud83d\udc40 \u2754 \ud83d\udc6b \ud83d\udd1c \ud83d\udcc9 \ud83d\udee0\ufe0f.</p> <p>\ud83d\udd1a, \ud83c\udfc6 \ud83c\udfaf \ud83d\udcaa \ud83c\udf66 \ud83d\udc46 \ud83d\udee0\ufe0f \ud83d\udc69\u200d\ud83d\udcbb \ud83c\udf0c \ud83d\udc48 \ud83d\udd10, \u274e \ud83d\udcc9, &amp; \u2699\ufe0f \ud83d\udcca \u2139 (\ud83d\uddbc \ud83d\udef0 \ud83d\udcbd/\ud83d\udd79 \ud83c\udfb0) \u267b \ud83d\udcaa. \ud83d\udc76</p> <p>\ud83d\udc64 \ud83d\udd1c \ud83d\udcac \ud83d\udc46 \ud83c\udf56 \ud83c\udf16 \ud83d\udd03 \ud83d\udc6b \ud83d\udd27 \ud83d\udce5, &amp; \ud83d\udc48 \ud83d\udd1c \ud83e\udd1e \ud83e\udd1d \ud83d\udc46 \ud83e\udd14 \ud83d\udc46 \ud83d\udd1c \ud83d\udcaa \ud83d\udcad \u2754 \ud83d\udee0\ufe0f \ud83d\udc46 \ud83d\udee0\ufe0f \ud83d\udcf6 \ud83c\udf8f \ud83c\udf10, \ud83c\udfb2 \ud83d\udd2e \ud83d\udd50 \ud83d\udc48 \ud83d\udeab \ud83d\udd00.</p> <p>\ud83e\udd14 \ud83d\udc6b \ud83d\udd27, \ud83d\udc46 \ud83d\udd1c \ud83d\udcaa \ud83d\udd2c &amp; \ud83d\udd27 \ud83c\udfc6 \ud83c\udf0c \ud83d\udee0\ufe0f \ud83d\udc46 \ud83d\udc4d \ud83d\udd17.</p> <p>\u23ed \ud83d\udcc3, \ud83d\udc64 \ud83d\udd1c \ud83e\udd1d \ud83d\udc46 \ud83c\udf05 \ud83e\uddf1 \ud83c\udf6e \ud83d\udee0\ufe0f ReadyAPI \ud83c\ude38.</p> <p>\u270b\ufe0f \ud83d\udd1c, \u27a1\ufe0f \u2705 \ud83d\udc49 \u26a0 \u269b \ud83d\udcad. \ud83d\udc6b \ud83d\udd27 \u2714 \ud83d\ude46 \ud83c\udf8f \ud83c\udd8e \ud83d\udd78 \ud83d\udee0\ufe0f. \ud83d\udc76</p>"},{"location":"deployment/concepts/#-","title":"\ud83d\udc82\u200d\u2642 - \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d","text":"<p>\u23ee\ufe0f \ud83d\udcc3 \ud83d\udd03 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udc65 \ud83c\udded\ud83c\uddf2 \ud83d\udd03 \u2754 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\ude9a \ud83d\udd10 \ud83d\udc46 \ud83d\udee0\ufe0f.</p> <p>\ud83d\udc65 \ud83d\udc40 \ud83d\udc48 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udece \ud83d\ude9a \ud83e\uddb2 \ud83d\udd22 \ud83d\udc46 \ud83c\ude38 \ud83d\udcbd, \ud83e\udd1d \u274e \ud83d\uddf3.</p> <p>&amp; \ud83d\udce4 \u2714\ufe0f \ud83d\udd73 \ud83c\ude1a \u267b \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udcc4, \u26ab\ufe0f \ud83d\udcaa \ud83c\udf8f \ud83e\uddb2 \u2696\ufe0f \u26ab\ufe0f \ud83d\udcaa \ud83d\udd73 \ud83c\udf8f.</p>"},{"location":"deployment/concepts/#_2","title":"\ud83d\uddbc \ud83e\uddf0 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d","text":"<p>\ud83e\uddf0 \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83e\udd1d \u274e \ud83d\uddf3:</p> <ul> <li>Traefik<ul> <li>\ud83d\udd01 \ud83c\udf75 \ud83d\udcc4 \ud83d\udd15 \ud83d\udc76</li> </ul> </li> <li>\ud83d\udce5<ul> <li>\ud83d\udd01 \ud83c\udf75 \ud83d\udcc4 \ud83d\udd15 \ud83d\udc76</li> </ul> </li> <li>\ud83d\udc4c<ul> <li>\u23ee\ufe0f \ud83d\udd22 \ud83e\uddb2 \ud83d\udc96 Certbot \ud83d\udcc4 \ud83d\udd15</li> </ul> </li> <li>\u2733<ul> <li>\u23ee\ufe0f \ud83d\udd22 \ud83e\uddb2 \ud83d\udc96 Certbot \ud83d\udcc4 \ud83d\udd15</li> </ul> </li> <li>Kubernetes \u23ee\ufe0f \ud83d\udea7 \ud83d\udd79 \ud83d\udc96 \ud83d\udc4c<ul> <li>\u23ee\ufe0f \ud83d\udd22 \ud83e\uddb2 \ud83d\udc96 \ud83d\udec2-\ud83d\udc68\u200d\ud83d\udcbc \ud83d\udcc4 \ud83d\udd15</li> </ul> </li> <li>\ud83c\udf75 \ud83d\udd18 \u2601 \ud83d\udc15\u200d\ud83e\uddba \ud83c\udf55 \ud83d\udc6b \ud83d\udc15\u200d\ud83e\uddba (\u270d \ud83d\udd1b \ud83d\udc76)</li> </ul> <p>\u27951\ufe0f\u20e3 \ud83c\udf9b \ud83d\udc48 \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \u2601 \ud83d\udc15\u200d\ud83e\uddba \ud83d\udc48 \ud83d\udd28 \ud83c\udf16 \ud83d\udc77 \u2705 \u2692 \ud83c\udd99 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d. \u26ab\ufe0f \ud83d\udcaa \u2714\ufe0f \ud83d\udeab \u2696\ufe0f \ud83c\ude1a \ud83d\udc46 \ud83c\udf05, \u2652\ufe0f. \u270b\ufe0f \ud83d\udc48 \ud83d\udcbc, \ud83d\udc46 \ud83d\udeab\ud83d\udd1c \u2714\ufe0f \u2692 \ud83c\udd99 \ud83e\udd1d \u274e \ud83d\uddf3 \ud83d\udc46.</p> <p>\ud83d\udc64 \ud83d\udd1c \ud83c\udfa6 \ud83d\udc46 \ud83e\uddf1 \ud83d\uddbc \u23ed \ud83d\udcc3.</p> <p>\u2934\ufe0f \u23ed \ud83d\udd27 \ud83e\udd14 \ud83c\udf10 \ud83d\udd03 \ud83d\udccb \ud83c\udfc3 \ud83d\udc46 \u2611 \ud83d\udee0\ufe0f (\u2705 Uvicorn).</p>"},{"location":"deployment/concepts/#_3","title":"\ud83d\udccb &amp; \ud83d\udee0\ufe0f","text":"<p>\ud83d\udc65 \ud83d\udd1c \ud83d\udcac \ud83d\udcda \ud83d\udd03 \ud83c\udfc3 \"\ud83d\udee0\ufe0f\", \u26ab\ufe0f \u26a0 \u2714\ufe0f \u262f \ud83d\udd03 \u26ab\ufe0f\u2754 \u26ab\ufe0f \u26d3, &amp; \u26ab\ufe0f\u2754 \ud83d\udd3a \u23ee\ufe0f \ud83d\udd24 \"\ud83d\udccb\".</p>"},{"location":"deployment/concepts/#_4","title":"\u26ab\ufe0f\u2754 \ud83d\udccb","text":"<p>\ud83d\udd24 \ud83d\udccb \ud83d\udece \u2699\ufe0f \ud83d\udd2c \ud83d\udcda \ud83d\udc5c:</p> <ul> <li>\ud83d\udcdf \ud83d\udc48 \ud83d\udc46 \u270d, \ud83d\udc0d \ud83d\udcc1.</li> <li>\ud83d\udcc1 \ud83d\udc48 \ud83d\udcaa \ud83d\udee0\ufe0f \ud83c\udfc3\u200d\u2642 \u2699\ufe0f, \ud83d\uddbc: <code>python</code>, <code>python.exe</code> \u2696\ufe0f <code>uvicorn</code>.</li> <li>\ud83c\udfaf \ud83d\udccb \u23ea \u26ab\ufe0f \ud83c\udfc3\u200d\u2642 \ud83d\udd1b \ud83c\udfd7 \u2699\ufe0f, \u2699\ufe0f \ud83d\udcbd, &amp; \u267b \ud83d\udc5c \ud83d\udd1b \ud83d\udcbe. \ud83d\udc49 \ud83e\udd19 \ud83d\udee0\ufe0f.</li> </ul>"},{"location":"deployment/concepts/#_5","title":"\u26ab\ufe0f\u2754 \ud83d\udee0\ufe0f","text":"<p>\ud83d\udd24 \ud83d\udee0\ufe0f \ud83d\udece \u2699\ufe0f \ud83c\udf16 \ud83c\udfaf \ud83c\udf0c, \ud83d\udd74 \ud83d\udd17 \ud83d\udc5c \ud83d\udc48 \ud83c\udfc3 \ud83c\udfc3\u200d\u2642 \u2699\ufe0f (\ud83d\udc96 \ud83c\udfc1 \u261d \ud83d\udd1b):</p> <ul> <li>\ud83c\udfaf \ud83d\udccb \u23ea \u26ab\ufe0f \ud83c\udfc3\u200d\u2642 \ud83d\udd1b \ud83c\udfc3\u200d\u2642 \u2699\ufe0f.<ul> <li>\ud83d\udc49 \ud83d\udeab \ud83d\udd17 \ud83d\udcc1, \ud83d\udeab \ud83d\udcdf, \u26ab\ufe0f \ud83d\udd17 \ud83c\udfaf \ud83d\udc5c \ud83d\udc48 \u2796 \ud83d\udee0\ufe0f &amp; \ud83d\udd04 \ud83c\udfc3\u200d\u2642 \u2699\ufe0f.</li> </ul> </li> <li>\ud83d\ude46 \ud83d\udccb, \ud83d\ude46 \ud83d\udcdf, \ud83d\udcaa \ud83d\udd74 \ud83d\udc5c \ud83d\udd50\u2754 \u26ab\ufe0f \u2796 \ud83d\udee0\ufe0f. , \ud83d\udd50\u2754 \ud83d\udce4 \ud83d\udee0\ufe0f \ud83c\udfc3.</li> <li>\ud83d\udee0\ufe0f \ud83d\udcaa \u274e (\u2696\ufe0f \"\ud83d\udca5\") \ud83d\udc46, \u2696\ufe0f \ud83c\udfc3\u200d\u2642 \u2699\ufe0f. \ud83d\udc48 \u261d, \u26ab\ufe0f \u26d4\ufe0f \ud83c\udfc3/\u2796 \ud83d\udee0\ufe0f, &amp; \u26ab\ufe0f \ud83d\udcaa \ud83d\ude45\u200d\u2642 \ud83d\udccf \ud83d\udc5c.</li> <li>\ud83d\udd20 \ud83c\ude38 \ud83d\udc48 \ud83d\udc46 \u2714\ufe0f \ud83c\udfc3 \ud83d\udd1b \ud83d\udc46 \ud83d\udcbb \u2714\ufe0f \ud83d\udee0\ufe0f \u26c5 \u26ab\ufe0f, \ud83d\udd20 \ud83c\udfc3\u200d\u2642 \ud83d\udccb, \ud83d\udd20 \ud83d\udeaa, \u2652\ufe0f. &amp; \ud83d\udce4 \ud83d\udece \ud83d\udcda \ud83d\udee0\ufe0f \ud83c\udfc3 \ud83c\udf8f \ud83d\udd70 \u23ea \ud83d\udcbb \ud83d\udd1b.</li> <li>\ud83d\udce4 \ud83d\udcaa \ud83d\udc97 \ud83d\udee0\ufe0f \ud83c\udf8f \ud83d\udccb \ud83c\udfc3 \ud83c\udf8f \ud83d\udd70.</li> </ul> <p>\ud83d\udea5 \ud83d\udc46 \u2705 \ud83d\udc45 \"\ud83d\udccb \ud83d\udc68\u200d\ud83d\udcbc\" \u2696\ufe0f \"\u2699\ufe0f \ud83d\udda5\" (\u2696\ufe0f \ud83c\udf8f \ud83e\uddf0) \ud83d\udc46 \ud83c\udfc3\u200d\u2642 \u2699\ufe0f, \ud83d\udc46 \ud83d\udd1c \ud83d\udcaa \ud83d\udc40 \ud83d\udcda \ud83d\udc48 \ud83d\udee0\ufe0f \ud83c\udfc3\u200d\u2642.</p> <p>&amp; , \ud83d\uddbc, \ud83d\udc46 \ud83d\udd1c \ud83c\udfb2 \ud83d\udc40 \ud83d\udc48 \ud83d\udce4 \ud83d\udc97 \ud83d\udee0\ufe0f \ud83c\udfc3 \ud83c\udf8f \ud83d\udda5 \ud83d\udccb (\ud83e\udd8e, \ud83d\udc84, \ud83d\udcd0, \u2652\ufe0f). \ud83d\udc6b \ud83d\udece \ud83c\udfc3 1\ufe0f\u20e3 \ud83d\udee0\ufe0f \ud83d\udccd \ud83d\udcd1, \u2795 \ud83c\udf8f \u2795 \ud83d\udee0\ufe0f.</p> <p></p> <p>\ud83d\udd1c \ud83d\udc48 \ud83d\udc65 \ud83d\udcad \ud83d\udd3a \ud83d\udd96 \u2696 \ud83d\udee0\ufe0f &amp; \ud83d\udccb, \u27a1\ufe0f \ud83d\ude23 \ud83d\udcac \ud83d\udd03 \ud83d\udee0\ufe0f.</p>"},{"location":"deployment/concepts/#_6","title":"\ud83c\udfc3\u200d\u2642 \ud83d\udd1b \ud83d\udd74","text":"<p>\ud83c\udf05 \ud83d\udcbc, \ud83d\udd50\u2754 \ud83d\udc46 \u270d \ud83d\udd78 \ud83d\udee0\ufe0f, \ud83d\udc46 \ud83d\udc9a \u26ab\ufe0f \ud83d\udd67 \ud83c\udfc3\u200d\u2642, \u27a1, \ud83d\udc48 \ud83d\udc46 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udcaa \ud83d\udd67 \ud83d\udd10 \u26ab\ufe0f. \ud83d\udc49 \u2197\ufe0f, \ud83d\udea5 \ud83d\udc46 \u2714\ufe0f \ud83c\udfaf \ud83e\udd14 \u26ab\ufe0f\u2754 \ud83d\udc46 \ud83d\udc9a \u26ab\ufe0f \ud83c\udfc3 \ud83d\udd74 \ud83c\udfaf \u26a0, \u270b\ufe0f \ud83c\udf05 \ud83d\udd70 \ud83d\udc46 \ud83d\udc9a \u26ab\ufe0f \ud83d\udd67 \ud83c\udfc3\u200d\u2642 &amp; \ud83d\udcaa.</p>"},{"location":"deployment/concepts/#_7","title":"\ud83d\udef0 \ud83d\udcbd","text":"<p>\ud83d\udd50\u2754 \ud83d\udc46 \u2692 \ud83c\udd99 \ud83d\udef0 \ud83d\udcbd (\u2601 \ud83d\udcbd, \ud83d\udd79 \ud83c\udfb0, \u2652\ufe0f.) \ud83d\ude45 \ud83d\udc5c \ud83d\udc46 \ud83d\udcaa \ud83c\udfc3 Uvicorn (\u2696\ufe0f \ud83c\udf8f) \u274e, \ud83c\udf8f \ud83c\udf0c \ud83d\udc46 \ud83d\udd50\u2754 \ud83d\udee0\ufe0f \ud83c\udf10.</p> <p>&amp; \u26ab\ufe0f \ud83d\udd1c \ud83d\udc77 &amp; \ud83d\udd1c \u26a0 \u23ee\ufe0f \ud83d\udee0\ufe0f.</p> <p>\u270b\ufe0f \ud83d\udea5 \ud83d\udc46 \ud83d\udd17 \ud83d\udcbd \ud83d\udcb8, \ud83c\udfc3\u200d\u2642 \ud83d\udee0\ufe0f \ud83d\udd1c \ud83c\udfb2 \u2620\ufe0f.</p> <p>&amp; \ud83d\udea5 \ud83d\udcbd \u23cf (\ud83d\uddbc \u23ee\ufe0f \u2139, \u2696\ufe0f \ud83d\udee0\ufe0f \u26aa\ufe0f\u27a1\ufe0f \u2601 \ud83d\udc15\u200d\ud83e\uddba) \ud83d\udc46 \ud83c\udfb2 \ud83c\udfc6 \ud83d\udeab \ud83d\udc40 \u26ab\ufe0f. &amp; \u21a9\ufe0f \ud83d\udc48, \ud83d\udc46 \ud83c\udfc6 \ud83d\udeab \ud83d\udcad \ud83d\udc48 \ud83d\udc46 \u2714\ufe0f \u23cf \ud83d\udee0\ufe0f \u274e. , \ud83d\udc46 \ud83d\udee0\ufe0f \ud83d\udd1c \ud83d\udea7 \u2620\ufe0f. \ud83d\udc76</p>"},{"location":"deployment/concepts/#_8","title":"\ud83c\udfc3 \ud83d\udd01 \ud83d\udd1b \ud83d\udd74","text":"<p>\ud83c\udfe2, \ud83d\udc46 \ud83d\udd1c \ud83c\udfb2 \ud83d\udc9a \ud83d\udcbd \ud83d\udccb (\u2705 Uvicorn) \u25b6\ufe0f \ud83d\udd01 \ud83d\udd1b \ud83d\udcbd \ud83d\udd74, &amp; \ud83c\udf75 \ud83d\udcaa \ud83d\ude46 \ud83d\uddff \ud83c\udfe5, \u2714\ufe0f \ud83d\udee0\ufe0f \ud83d\udd67 \ud83c\udfc3 \u23ee\ufe0f \ud83d\udc46 \ud83d\udee0\ufe0f (\u2705 Uvicorn \ud83c\udfc3\u200d\u2642 \ud83d\udc46 ReadyAPI \ud83d\udcf1).</p>"},{"location":"deployment/concepts/#_9","title":"\ud83c\udf8f \ud83d\udccb","text":"<p>\ud83c\udfc6 \ud83d\udc49, \ud83d\udc46 \ud83d\udd1c \ud83d\udece \u2714\ufe0f \ud83c\udf8f \ud83d\udccb \ud83d\udc48 \ud83d\udd1c \u2692 \ud83d\udcad \ud83d\udc46 \ud83c\ude38 \ud83c\udfc3 \ud83d\udd1b \ud83d\udd74. &amp; \ud83d\udcda \ud83d\udcbc, \u26ab\ufe0f \ud83d\udd1c \u2692 \ud83d\udcad \ud83c\udf8f \ud83e\uddb2 \u2696\ufe0f \ud83c\ude38 \ud83c\udfc3, \ud83d\uddbc, \ud83d\udcbd.</p>"},{"location":"deployment/concepts/#_10","title":"\ud83d\uddbc \ud83e\uddf0 \ud83c\udfc3 \ud83d\udd74","text":"<p>\ud83d\uddbc \ud83e\uddf0 \ud83d\udc48 \ud83d\udcaa \ud83d\udc49 \ud83d\udc68\u200d\ud83c\udfed:</p> <ul> <li>\u2601</li> <li>Kubernetes</li> <li>\u2601 \u270d</li> <li>\u2601 \ud83d\udc1d \ud83d\udcf3</li> <li>\u2733</li> <li>\ud83d\udc68\u200d\ud83d\udcbb</li> <li>\ud83c\udf75 \ud83d\udd18 \u2601 \ud83d\udc15\u200d\ud83e\uddba \ud83c\udf55 \ud83d\udc6b \ud83d\udc15\u200d\ud83e\uddba</li> <li>\ud83c\udf8f...</li> </ul> <p>\ud83d\udc64 \ud83d\udd1c \ud83e\udd1d \ud83d\udc46 \ud83c\udf05 \ud83e\uddf1 \ud83d\uddbc \u23ed \ud83d\udcc3.</p>"},{"location":"deployment/concepts/#_11","title":"\u23cf","text":"<p>\ud83c\udf8f \u2692 \ud83d\udcad \ud83d\udc46 \ud83c\ude38 \ud83c\udfc3 \ud83d\udd1b \ud83d\udd74, \ud83d\udc46 \ud83c\udfb2 \ud83d\udc9a \u2692 \ud83d\udcad \u26ab\ufe0f \u23cf \u23ee\ufe0f \u274c.</p>"},{"location":"deployment/concepts/#_12","title":"\ud83d\udc65 \u2692 \u274c","text":"<p>\ud83d\udc65, \ud83d\uddff, \u2692 \u274c, \ud83c\udf10 \ud83d\udd70. \ud83d\udda5 \ud83c\udf16 \ud83d\udd67 \u2714\ufe0f \ud83d\udc1b \ud83d\udd75\u200d\u2642 \ud83c\udf8f \ud83e\udd49. \ud83d\udc76</p> <p>&amp; \ud83d\udc65 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udea7 \ud83d\udcc9 \ud83d\udcdf \ud83d\udc65 \ud83d\udd0e \ud83d\udc48 \ud83d\udc1b &amp; \ud83d\udc65 \ud83d\udee0\ufe0f \ud83c\udd95 \u2692 (\ud83c\udfb2 \u274e \ud83c\udd95 \ud83d\udc1b \ud83d\udc81\u200d\u2642\ufe0f \ud83d\udc76).</p>"},{"location":"deployment/concepts/#_13","title":"\ud83e\udd2a \u274c \ud83d\udd01 \ud83c\udf75","text":"<p>\ud83d\udd50\u2754 \ud83c\udfd7 \ud83d\udd78 \ud83d\udd17 \u23ee\ufe0f ReadyAPI, \ud83d\udea5 \ud83d\udce4 \u274c \ud83d\udc46 \ud83d\udcdf, ReadyAPI \ud83d\udd1c \ud83d\udece \ud83d\udd0c \u26ab\ufe0f \ud83d\udc41 \ud83d\udce8 \ud83d\udc48 \u23f2 \u274c. \ud83d\udee1</p> <p>\ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd1c \ud83e\udd1a 5\ufe0f\u20e30\ufe0f\u20e30\ufe0f\u20e3 \ud83d\udd17 \ud83d\udcbd \u274c \ud83d\udc48 \ud83d\udce8, \u270b\ufe0f \ud83c\ude38 \ud83d\udd1c \ud83d\ude23 \ud83d\udc77 \u23ed \ud83d\udce8 \u21a9\ufe0f \ud83d\udca5 \ud83c\udf55.</p>"},{"location":"deployment/concepts/#-_1","title":"\ud83e\udd8f \u274c - \ud83d\udca5","text":"<p>\ud83d\udc50, \ud83d\udce4 5\ufe0f\u20e3\ud83d\udcc6 \ud83d\udcbc \ud83c\udf10\u2754 \ud83d\udc65 \u270d \ud83d\udcdf \ud83d\udc48 \ud83d\udca5 \ud83c\udf82 \ud83c\ude38 \u2692 Uvicorn &amp; \ud83d\udc0d \ud83d\udca5. \ud83d\udc76</p> <p>&amp; , \ud83d\udc46 \ud83d\udd1c \ud83c\udfb2 \ud83d\udeab \ud83d\udc9a \ud83c\ude38 \ud83d\udea7 \u2620\ufe0f \u21a9\ufe0f \ud83d\udce4 \u274c 1\ufe0f\u20e3 \ud83e\udd49, \ud83d\udc46 \ud83c\udfb2 \ud83d\udc9a \u26ab\ufe0f \ud83d\ude23 \ud83c\udfc3 \ud83c\udf18 \u27a1 \ud83d\udee0\ufe0f \ud83d\udc48 \ud83d\udeab \ud83d\udc94.</p>"},{"location":"deployment/concepts/#_14","title":"\u23cf \u23ee\ufe0f \ud83d\udca5","text":"<p>\u270b\ufe0f \ud83d\udc48 \ud83d\udcbc \u23ee\ufe0f \ud83e\udd19 \ud83d\udc4e \u274c \ud83d\udc48 \ud83d\udca5 \ud83c\udfc3\u200d\u2642 \ud83d\udee0\ufe0f, \ud83d\udc46 \ud83d\udd1c \ud83d\udc9a \ud83d\udd22 \ud83e\uddb2 \ud83d\udc48 \ud83c\ude1a \ud83d\udd01 \ud83d\udee0\ufe0f, \ud83c\udf18 \ud83d\udc69\u200d\u2764\u200d\ud83d\udc68 \ud83d\udd70...</p> <p>Tip</p> <p>...\ud83d\udc50 \ud83d\udea5 \ud83c\udf82 \ud83c\ude38 \ud83d\udca5 \u23ea \u26ab\ufe0f \ud83c\udfb2 \ud83d\udeab \u2692 \ud83d\udd11 \ud83d\udea7 \ud83d\udd01 \u26ab\ufe0f \u267e. \u270b\ufe0f \ud83d\udcda \ud83d\udcbc, \ud83d\udc46 \ud83d\udd1c \ud83c\udfb2 \ud83d\udc40 \u26ab\ufe0f \u23ee\ufe0f \ud83d\udee0\ufe0f, \u2696\ufe0f \ud83c\udf18 \u25b6\ufe0f\ufe0f \u23ee\ufe0f \ud83d\udee0\ufe0f.</p> <p>\u27a1\ufe0f \ud83c\udfaf \ud83d\udd1b \ud83d\udc51 \ud83d\udcbc, \ud83c\udf10\u2754 \u26ab\ufe0f \ud83d\udcaa \ud83d\udca5 \ud83c\udf55 \ud83c\udfaf \ud83d\udcbc \ud83d\udd2e, &amp; \u26ab\ufe0f \u2692 \ud83d\udd11 \u23cf \u26ab\ufe0f.</p> <p>\ud83d\udc46 \ud83d\udd1c \ud83c\udfb2 \ud83d\udc9a \u2714\ufe0f \ud83d\udc5c \ud83c\ude1a \ud83d\udd01 \ud83d\udc46 \ud83c\ude38 \ud83d\udd22 \ud83e\uddb2, \u21a9\ufe0f \ud83d\udc48 \u261d, \ud83c\udf8f \ud83c\ude38 \u23ee\ufe0f Uvicorn &amp; \ud83d\udc0d \u23ea \ud83d\udca5, \ud83d\udce4 \ud83d\udd73 \ud83c\udf8f \ud83d\udcdf \ud83c\udf8f \ud83d\udcf1 \ud83d\udc48 \ud83d\udcaa \ud83d\udd73 \ud83d\udd03 \u26ab\ufe0f.</p>"},{"location":"deployment/concepts/#_15","title":"\ud83d\uddbc \ud83e\uddf0 \u23cf \ud83d\udd01","text":"<p>\ud83c\udfc6 \ud83d\udcbc, \ud83c\udf8f \ud83e\uddf0 \ud83d\udc48 \u2699\ufe0f \ud83c\udfc3 \ud83d\udccb \ud83d\udd1b \ud83d\udd74 \u2699\ufe0f \ud83c\udf75 \ud83c\udfe7 \u23cf.</p> <p>\ud83d\uddbc, \ud83d\udc49 \ud83d\udcaa \ud83c\udf75:</p> <ul> <li>\u2601</li> <li>Kubernetes</li> <li>\u2601 \u270d</li> <li>\u2601 \ud83d\udc1d \ud83d\udcf3</li> <li>\u2733</li> <li>\ud83d\udc68\u200d\ud83d\udcbb</li> <li>\ud83c\udf75 \ud83d\udd18 \u2601 \ud83d\udc15\u200d\ud83e\uddba \ud83c\udf55 \ud83d\udc6b \ud83d\udc15\u200d\ud83e\uddba</li> <li>\ud83c\udf8f...</li> </ul>"},{"location":"deployment/concepts/#-_2","title":"\ud83e\uddec - \ud83d\udee0\ufe0f &amp; \ud83d\udcbe","text":"<p>\u23ee\ufe0f ReadyAPI \ud83c\ude38, \u2699\ufe0f \ud83d\udcbd \ud83d\udccb \ud83d\udc96 Uvicorn, \ud83c\udfc3\u200d\u2642 \u26ab\ufe0f \ud83d\udd50 1\ufe0f\u20e3 \ud83d\udee0\ufe0f \ud83d\udcaa \ud83c\udf66 \ud83d\udc97 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd01.</p> <p>\u270b\ufe0f \ud83d\udcda \ud83d\udcbc, \ud83d\udc46 \ud83d\udd1c \ud83d\udc9a \ud83c\udfc3 \ud83d\udcda \ud83d\udc68\u200d\ud83c\udfed \ud83d\udee0\ufe0f \ud83c\udf8f \ud83d\udd70.</p>"},{"location":"deployment/concepts/#-_3","title":"\ud83d\udc97 \ud83d\udee0\ufe0f - \ud83d\udc68\u200d\ud83c\udfed","text":"<p>\ud83d\udea5 \ud83d\udc46 \u2714\ufe0f \ud83c\udf05 \ud83d\udc69\u200d\ud83d\udcbb \ud83c\udf18 \u26ab\ufe0f\u2754 \ud83d\udc41 \ud83d\udee0\ufe0f \ud83d\udcaa \ud83c\udf75 (\ud83d\uddbc \ud83d\udea5 \ud83d\udd79 \ud83c\udfb0 \ud83d\udeab \ud83d\udc81\u200d\u2642\ufe0f \ud83e\udd8f) &amp; \ud83d\udc46 \u2714\ufe0f \ud83d\udc97 \ud83d\udc1a \ud83d\udcbd \ud83d\udcbd, \u2934\ufe0f \ud83d\udc46 \ud83d\udcaa \u2714\ufe0f \ud83d\udc97 \ud83d\udee0\ufe0f \ud83c\udfc3\u200d\u2642 \u23ee\ufe0f \ud83c\udf8f \ud83c\ude38 \ud83c\udf8f \ud83d\udd70, &amp; \ud83d\udcce \ud83c\udf10 \ud83d\udce8 \ud83d\udc6a \ud83d\udc6b.</p> <p>\ud83d\udd50\u2754 \ud83d\udc46 \ud83c\udfc3 \ud83d\udc97 \ud83d\udee0\ufe0f \ud83c\udf8f \ud83d\udee0\ufe0f \ud83d\udccb, \ud83d\udc6b \ud83d\udece \ud83e\udd19 \ud83d\udc68\u200d\ud83c\udfed.</p>"},{"location":"deployment/concepts/#_16","title":"\ud83d\udc68\u200d\ud83c\udfed \ud83d\udee0\ufe0f &amp; \u26f4","text":"<p>\ud83d\udcad \u26aa\ufe0f\u27a1\ufe0f \ud83e\ude7a \ud83d\udd03 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udc48 \ud83d\udd74 1\ufe0f\u20e3 \ud83d\udee0\ufe0f \ud83d\udcaa \ud83d\udc42 \ud83d\udd1b 1\ufe0f\u20e3 \ud83c\udf00 \u26f4 &amp; \ud83d\udce2 \ud83d\udce2 \ud83d\udcbd \u2753</p> <p>\ud83d\udc49 \u2611.</p> <p>, \ud83d\udcaa \u2714\ufe0f \ud83d\udc97 \ud83d\udee0\ufe0f \ud83c\udf8f \ud83d\udd70, \ud83d\udce4 \u2714\ufe0f \ud83d\udc41 \ud83d\udee0\ufe0f \ud83d\udc42 \ud83d\udd1b \u26f4 \ud83d\udc48 \u2934\ufe0f \ud83d\udcf6 \ud83d\udcfb \ud83d\udd20 \ud83d\udc68\u200d\ud83c\udfed \ud83d\udee0\ufe0f \ud83c\udf0c.</p>"},{"location":"deployment/concepts/#_17","title":"\ud83d\udcbe \ud83d\udccd \ud83d\udee0\ufe0f","text":"<p>\ud83d\udd1c, \ud83d\udd50\u2754 \ud83d\udccb \ud83d\udcd0 \ud83d\udc5c \ud83d\udcbe, \ud83d\uddbc, \ud83c\udfb0 \ud83c\udfeb \ud83c\udff7 \ud83d\udd22, \u2696\ufe0f \ud83c\udf9a \u2b55 \ud83d\udcc1 \ud83d\udd22, \ud83c\udf10 \ud83d\udc48 \ud83c\udf74 \ud83d\udc44 \ud83d\udcbe (\ud83d\udcbe) \ud83d\udcbd.</p> <p>&amp; \ud83d\udc97 \ud83d\udee0\ufe0f \ud83d\udece \ud83d\udeab \ud83d\udcb0 \ud83d\ude46 \ud83d\udcbe. \ud83d\udc49 \u26d3 \ud83d\udc48 \ud83d\udd20 \ud83c\udfc3 \ud83d\udee0\ufe0f \u2714\ufe0f \ud83d\udeae \ud83d\udc4d \ud83d\udc5c, \ud83d\udd22, &amp; \ud83d\udcbe. &amp; \ud83d\udea5 \ud83d\udc46 \ud83d\ude29 \u2b55 \ud83d\udcb8 \ud83d\udcbe \ud83d\udc46 \ud83d\udcdf, \ud83d\udd20 \ud83d\udee0\ufe0f \ud83d\udd1c \ud83c\udf74 \ud83c\udf13 \ud83d\udcb8 \ud83d\udcbe.</p>"},{"location":"deployment/concepts/#_18","title":"\ud83d\udcbd \ud83d\udcbe","text":"<p>\ud83d\uddbc, \ud83d\udea5 \ud83d\udc46 \ud83d\udcdf \ud83d\udcd0 \ud83c\udfb0 \ud83c\udfeb \ud83c\udff7 \u23ee\ufe0f 1\ufe0f\u20e3 \ud83d\udcbe \ud83d\udcd0, \ud83d\udd50\u2754 \ud83d\udc46 \ud83c\udfc3 1\ufe0f\u20e3 \ud83d\udee0\ufe0f \u23ee\ufe0f \ud83d\udc46 \ud83d\udee0\ufe0f, \u26ab\ufe0f \ud83d\udd1c \ud83c\udf74 \ud83c\udf18 1\ufe0f\u20e3 \ud83d\udcbe \ud83d\udcbe. &amp; \ud83d\udea5 \ud83d\udc46 \u25b6\ufe0f 4\ufe0f\u20e3 \ud83d\udee0\ufe0f (4\ufe0f\u20e3 \ud83d\udc68\u200d\ud83c\udfed), \ud83d\udd20 \ud83d\udd1c \ud83c\udf74 1\ufe0f\u20e3 \ud83d\udcbe \ud83d\udcbe. \ud83c\udf10, \ud83d\udc46 \ud83d\udee0\ufe0f \ud83d\udd1c \ud83c\udf74 4\ufe0f\u20e3 \ud83d\udcbe \ud83d\udcbe.</p> <p>&amp; \ud83d\udea5 \ud83d\udc46 \ud83d\udef0 \ud83d\udcbd \u2696\ufe0f \ud83d\udd79 \ud83c\udfb0 \ud83d\udd74 \u2714\ufe0f 3\ufe0f\u20e3 \ud83d\udcbe \ud83d\udcbe, \ud83d\udd04 \ud83d\udcd0 \ud83c\udf05 \ud83c\udf18 4\ufe0f\u20e3 \ud83d\udcbe \ud83d\udcbe \ud83d\udd1c \ud83e\udd15 \u26a0. \ud83d\udc76</p>"},{"location":"deployment/concepts/#-_4","title":"\ud83d\udc97 \ud83d\udee0\ufe0f - \ud83d\uddbc","text":"<p>\ud83d\udc49 \ud83d\uddbc, \ud83d\udce4 \ud83d\udc68\u200d\ud83d\udcbc \ud83d\udee0\ufe0f \ud83d\udc48 \u25b6\ufe0f &amp; \ud83c\udf9b 2\ufe0f\u20e3 \ud83d\udc68\u200d\ud83c\udfed \ud83d\udee0\ufe0f.</p> <p>\ud83d\udc49 \ud83d\udc68\u200d\ud83d\udcbc \ud83d\udee0\ufe0f \ud83d\udd1c \ud83c\udfb2 1\ufe0f\u20e3 \ud83d\udc42 \ud83d\udd1b \u26f4 \ud83d\udce2. &amp; \u26ab\ufe0f \ud83d\udd1c \ud83d\udcf6 \ud83c\udf10 \ud83d\udcfb \ud83d\udc68\u200d\ud83c\udfed \ud83d\udee0\ufe0f.</p> <p>\ud83d\udc48 \ud83d\udc68\u200d\ud83c\udfed \ud83d\udee0\ufe0f \ud83d\udd1c \ud83d\udd50 \ud83c\udfc3\u200d\u2642 \ud83d\udc46 \ud83c\ude38, \ud83d\udc6b \ud83d\udd1c \ud83c\udfad \ud83d\udc51 \ud83d\udcca \ud83d\udce8 \ud83d\udce8 &amp; \ud83d\udce8 \ud83d\udce8, &amp; \ud83d\udc6b \ud83d\udd1c \ud83d\udcd0 \ud83d\udd73 \ud83d\udc46 \ud83d\udeae \ud83d\udd22 \ud83d\udcbe.</p> <p></p> <p>&amp; \u2197\ufe0f, \ud83c\udf8f \ud83c\udfb0 \ud83d\udd1c \ud83c\udfb2 \u2714\ufe0f \ud83c\udf8f \ud83d\udee0\ufe0f \ud83c\udfc3 \ud83d\udc4d, \u2196\ufe0f \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc46 \ud83c\ude38.</p> <p>\ud83d\ude0c \u2139 \ud83d\udc48 \ud83c\udf10 \ud83d\udcbd \u2699\ufe0f \ud83d\udd20 \ud83d\udee0\ufe0f \ud83d\udcaa \ud83e\ude80 \ud83d\udcda \ud83e\udd2d \ud83d\udd70, \u270b\ufe0f \ud83d\udcbe (\ud83d\udcbe) \ud83d\udece \ud83d\udea7 \ud83c\udf16 \u2696\ufe0f \ud83c\udf18 \u2696.</p> <p>\ud83d\udea5 \ud83d\udc46 \u2714\ufe0f \ud83d\udee0\ufe0f \ud83d\udc48 \ud83d\udd28 \u2b50 \ud83d\udcb8 \ud83d\udcca \ud83d\udd20 \ud83d\udd70 &amp; \ud83d\udc46 \u2714\ufe0f \ud83d\udcda \ud83d\udc69\u200d\ud83d\udcbb, \u2934\ufe0f \ud83d\udcbd \ud83d\udee0\ufe0f \ud83d\udd1c \ud83c\udfb2 \u2696 (\u21a9\ufe0f \ud83d\udd67 \ud83d\udd1c \ud83c\udd99 &amp; \ud83d\udd3d \ud83d\udd1c).</p>"},{"location":"deployment/concepts/#_19","title":"\ud83d\uddbc \ud83e\uddec \ud83e\uddf0 &amp; \ud83c\udf9b","text":"<p>\ud83d\udce4 \ud83d\udcaa \ud83d\udcda \ud83c\udfaf \ud83c\udfc6 \ud83d\udc49, &amp; \ud83d\udc64 \ud83d\udd1c \ud83d\udcac \ud83d\udc46 \ud83c\udf05 \ud83d\udd03 \ud83c\udfaf \ud83c\udf9b \u23ed \ud83d\udcc3, \ud83d\uddbc \ud83d\udd50\u2754 \ud83d\udcac \ud83d\udd03 \u2601 &amp; \ud83d\udce6.</p> <p>\ud83d\udc51 \u269b \ud83e\udd14 \ud83d\udc48 \ud83d\udce4 \u2714\ufe0f \ud83d\udc41 \ud83e\uddb2 \ud83d\ude9a \u26f4 \ud83d\udce2 \ud83d\udce2. &amp; \u2934\ufe0f \u26ab\ufe0f \u2714\ufe0f \u2714\ufe0f \ud83c\udf0c \ud83d\udcf6 \ud83d\udcfb \ud83d\udd01 \ud83d\udee0\ufe0f/\ud83d\udc68\u200d\ud83c\udfed.</p> <p>\ud83d\udce5 \ud83d\udcaa \ud83c\udf00 &amp; \ud83c\udf9b:</p> <ul> <li>\ud83d\udc01 \ud83d\udee0\ufe0f Uvicorn \ud83d\udc68\u200d\ud83c\udfed<ul> <li>\ud83d\udc01 \ud83d\udd1c \ud83d\udee0\ufe0f \ud83d\udc68\u200d\ud83d\udcbc \ud83d\udc42 \ud83d\udd1b \ud83d\udce2 &amp; \u26f4, \ud83e\uddec \ud83d\udd1c \u2714\ufe0f \ud83d\udc97 Uvicorn \ud83d\udc68\u200d\ud83c\udfed \ud83d\udee0\ufe0f</li> </ul> </li> <li>Uvicorn \ud83d\udee0\ufe0f Uvicorn \ud83d\udc68\u200d\ud83c\udfed<ul> <li>1\ufe0f\u20e3 Uvicorn \ud83d\udee0\ufe0f \ud83d\udc68\u200d\ud83d\udcbc \ud83d\udd1c \ud83d\udc42 \ud83d\udd1b \ud83d\udce2 &amp; \u26f4, &amp; \u26ab\ufe0f \ud83d\udd1c \u25b6\ufe0f \ud83d\udc97 Uvicorn \ud83d\udc68\u200d\ud83c\udfed \ud83d\udee0\ufe0f</li> </ul> </li> <li>Kubernetes &amp; \ud83c\udf8f \ud83d\udcce \ud83d\udce6 \u2699\ufe0f<ul> <li>\ud83d\udd73 \u2601 \ud83e\uddfd \ud83d\udd1c \ud83d\udc42 \ud83d\udd1b \ud83d\udce2 &amp; \u26f4. \ud83e\uddec \ud83d\udd1c \u2714\ufe0f \ud83d\udc97 \ud83d\udce6, \ud83d\udd20 \u23ee\ufe0f 1\ufe0f\u20e3 Uvicorn \ud83d\udee0\ufe0f \ud83c\udfc3\u200d\u2642</li> </ul> </li> <li>\u2601 \ud83d\udc15\u200d\ud83e\uddba \ud83d\udc48 \ud83c\udf75 \ud83d\udc49 \ud83d\udc46<ul> <li>\u2601 \ud83d\udc15\u200d\ud83e\uddba \ud83d\udd1c \ud83c\udfb2 \ud83c\udf75 \ud83e\uddec \ud83d\udc46. \u26ab\ufe0f \ud83d\udd1c \ud83c\udfb2 \u27a1\ufe0f \ud83d\udc46 \ud83d\udd2c \ud83d\udee0\ufe0f \ud83c\udfc3, \u2696\ufe0f \ud83d\udce6 \ud83d\uddbc \u2699\ufe0f, \ud83d\ude46 \ud83d\udcbc, \u26ab\ufe0f \ud83d\udd1c \ud83c\udf05 \ud83c\udfb2 \ud83d\udc41 Uvicorn \ud83d\udee0\ufe0f, &amp; \u2601 \ud83d\udc15\u200d\ud83e\uddba \ud83d\udd1c \ud83c\ude1a \ud83d\udd01 \u26ab\ufe0f.</li> </ul> </li> </ul> <p>Tip</p> <p>\ud83d\udeab \ud83d\ude1f \ud83d\udea5 \ud83d\udc6b \ud83c\udfec \ud83d\udd03 \ud83d\udce6, \u2601, \u2696\ufe0f Kubernetes \ud83d\udeab \u2692 \ud83d\udcda \ud83d\udd11.</p> <p>\ud83d\udc64 \ud83d\udd1c \ud83d\udcac \ud83d\udc46 \ud83c\udf05 \ud83d\udd03 \ud83d\udce6 \ud83d\uddbc, \u2601, Kubernetes, \u2652\ufe0f. \ud83d\udd2e \ud83d\udcc3: ReadyAPI \ud83d\udce6 - \u2601.</p>"},{"location":"deployment/concepts/#_20","title":"\u23ee\ufe0f \ud83d\udd01 \u23ed \u25b6\ufe0f","text":"<p>\ud83d\udce4 \ud83d\udcda \ud83d\udcbc \ud83c\udf10\u2754 \ud83d\udc46 \ud83d\udc9a \ud83c\udfad \ud83d\udcf6 \u23ed \u25b6\ufe0f \ud83d\udc46 \ud83c\ude38.</p> <p>\ud83d\uddbc, \ud83d\udc46 \ud83d\udcaa \ud83d\udc9a \ud83c\udfc3 \ud83d\udcbd \ud83d\udee0\ufe0f.</p> <p>\u270b\ufe0f \ud83c\udf05 \ud83d\udcbc, \ud83d\udc46 \ud83d\udd1c \ud83d\udc9a \ud83c\udfad \ud83d\udc49 \ud83d\udd01 \ud83d\udd74 \ud83d\udd50.</p> <p>, \ud83d\udc46 \ud83d\udd1c \ud83d\udc9a \u2714\ufe0f \ud83d\udc41 \ud83d\udee0\ufe0f \ud83c\udfad \ud83d\udc48 \u23ee\ufe0f \ud83d\udd01, \u23ed \u25b6\ufe0f \ud83c\ude38.</p> <p>&amp; \ud83d\udc46 \ud83d\udd1c \u2714\ufe0f \u2692 \ud83d\udcad \ud83d\udc48 \u26ab\ufe0f \ud83d\udc41 \ud83d\udee0\ufe0f \ud83c\udfc3 \ud83d\udc48 \u23ee\ufe0f \ud83d\udd01 ** \ud83d\udea5 \u23ee\ufe0f, \ud83d\udc46 \u25b6\ufe0f \ud83d\udc97 \ud83d\udee0\ufe0f (\ud83d\udc97 \ud83d\udc68\u200d\ud83c\udfed) \ud83c\ude38 \u26ab\ufe0f. \ud83d\udea5 \ud83d\udc48 \ud83d\udd01 \ud83c\udfc3 \ud83d\udc97 \ud83d\udee0\ufe0f, \ud83d\udc6b \ud83d\udd1c \u274e \ud83d\udc77 \ud83c\udfc3\u200d\u2642 \u26ab\ufe0f \ud83d\udd1b \ud83d\udd17, &amp; \ud83d\udea5 \ud83d\udcf6 \ud83d\udd73 \ud83d\udc8e \ud83d\udc96 \ud83d\udcbd \ud83d\udee0\ufe0f, \ud83d\udc6b \ud83d\udcaa \ud83e\udd15 \u2694 \u23ee\ufe0f \ud83d\udd20 \ud83c\udf8f.</p> <p>\u2197\ufe0f, \ud83d\udce4 \ud83d\udcbc \ud83c\udf10\u2754 \ud83d\udce4 \ud83d\ude45\u200d\u2642 \u26a0 \ud83c\udfc3 \u23ee\ufe0f \ud83d\udd01 \ud83d\udc97 \ud83d\udd70, \ud83d\udc48 \ud83d\udcbc, \u26ab\ufe0f \ud83d\udcda \u23e9 \ud83c\udf75.</p> <p>Tip</p> <p>, \u2714\ufe0f \ud83e\udd2f \ud83d\udc48 \u2693\ufe0f \ud83d\udd1b \ud83d\udc46 \ud83d\udda5, \ud83d\udcbc \ud83d\udc46 5\ufe0f\u20e3\ud83d\udcc6 \ud83d\udeab \ud83d\udcaa \ud83d\ude46 \u23ee\ufe0f \ud83d\udd01 \u23ed \u25b6\ufe0f \ud83d\udc46 \ud83c\ude38.</p> <p>\ud83d\udc48 \ud83d\udcbc, \ud83d\udc46 \ud83d\udeab\ud83d\udd1c \u2714\ufe0f \ud83d\ude1f \ud83d\udd03 \ud83d\ude46 \ud83d\udc49. \ud83e\udd37</p>"},{"location":"deployment/concepts/#_21","title":"\ud83d\uddbc \u23ee\ufe0f \ud83d\udd01 \ud83c\udf9b","text":"<p>\ud83d\udc49 \ud83d\udd1c \ud83e\ude80 \ud83d\ude47 \ud83d\udd1b \ud83c\udf0c \ud83d\udc46 \ud83d\udee0\ufe0f \ud83d\udc46 \u2699\ufe0f, &amp; \u26ab\ufe0f \ud83d\udd1c \ud83c\udfb2 \ud83d\udd17 \ud83c\udf0c \ud83d\udc46 \u25b6\ufe0f \ud83d\udccb, \ud83d\ude9a \u23cf, \u2652\ufe0f.</p> <p>\ud83d\udce5 \ud83d\udcaa \ud83d\udcad:</p> <ul> <li>\"\ud83d\udd51 \ud83d\udce6\" Kubernetes \ud83d\udc48 \ud83c\udfc3 \u23ed \ud83d\udc46 \ud83d\udcf1 \ud83d\udce6</li> <li>\ud83c\udf89 \u270d \ud83d\udc48 \ud83c\udfc3 \u23ee\ufe0f \ud83d\udd01 &amp; \u2934\ufe0f \u25b6\ufe0f \ud83d\udc46 \ud83c\ude38<ul> <li>\ud83d\udc46 \ud83d\udd1c \ud83d\udcaa \ud83c\udf0c \u25b6\ufe0f/\u23cf \ud83d\udc48 \ud83c\udf89 \u270d, \ud83d\udd0d \u274c, \u2652\ufe0f.</li> </ul> </li> </ul> <p>Tip</p> <p>\ud83d\udc64 \ud83d\udd1c \ud83e\udd1d \ud83d\udc46 \ud83c\udf05 \ud83e\uddf1 \ud83d\uddbc \ud83d\udd28 \ud83d\udc49 \u23ee\ufe0f \ud83d\udce6 \ud83d\udd2e \ud83d\udcc3: ReadyAPI \ud83d\udce6 - \u2601.</p>"},{"location":"deployment/concepts/#i","title":"\u2139 \ud83d\udee0\ufe0f","text":"<p>\ud83d\udc46 \ud83d\udcbd(\u24c2) () \u2139, \ud83d\udc46 \ud83d\udcaa \ud83c\udf74 \u2696\ufe0f \u2699\ufe0f, \u23ee\ufe0f \ud83d\udc46 \ud83d\udccb, \ud83d\udcca \ud83d\udd70 \ud83d\udd1b \ud83d\udcbd, &amp; \ud83d\udcbe \ud83d\udcbe \ud83d\udcaa.</p> <p>\u2754 \ud83c\udf05 \u2699\ufe0f \u2139 \ud83d\udc46 \ud83d\udc9a \ud83d\ude29/\u267b \u2753 \u26ab\ufe0f \ud83d\udcaa \u23e9 \ud83d\udcad \"\ud83d\udeab \ud83c\udf05\", \u270b\ufe0f \ud83c\udf0c, \ud83d\udc46 \ud83d\udd1c \ud83c\udfb2 \ud83d\udc9a \ud83c\udf74 \ud83c\udf05 \ud83d\udcaa \ud83c\udf75 \ud83d\udca5.</p> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udcb8 3\ufe0f\u20e3 \ud83d\udcbd \u270b\ufe0f \ud83d\udc46 \u2699\ufe0f \ud83d\udd74 \ud83d\udc25 \ud83c\udf56 \ud83d\udc6b \ud83d\udcbe &amp; \ud83d\udcbd, \ud83d\udc46 \ud83c\udfb2 \ud83d\uddd1 \ud83d\udcb8 \ud83d\udc76, &amp; \ud83c\udfb2 \ud83d\uddd1 \ud83d\udcbd \ud83d\udd26 \ud83c\udfcb\ufe0f \ud83d\udc76, \u2652\ufe0f.</p> <p>\ud83d\udc48 \ud83d\udcbc, \u26ab\ufe0f \ud83d\udcaa \ud83d\udc7b \u2714\ufe0f \ud83d\udd74 2\ufe0f\u20e3 \ud83d\udcbd &amp; \u2699\ufe0f \u2195 \ud83c\udf10 \ud83d\udc6b \u2139 (\ud83d\udcbd, \ud83d\udcbe, \ud83d\udcbe, \ud83d\udd78 \ud83d\udcbf, \u2652\ufe0f).</p> <p>\ud83d\udd1b \ud83c\udf8f \u270b, \ud83d\udea5 \ud83d\udc46 \u2714\ufe0f 2\ufe0f\u20e3 \ud83d\udcbd &amp; \ud83d\udc46 \u2699\ufe0f 1\ufe0f\u20e30\ufe0f\u20e30\ufe0f\u20e3 \ud83d\udcaf \ud83d\udc6b \ud83d\udcbd &amp; \ud83d\udcbe, \u261d 1\ufe0f\u20e3 \ud83d\udee0\ufe0f \ud83d\udd1c \ud83d\udcad \ud83c\udf05 \ud83d\udcbe, &amp; \ud83d\udcbd \ud83d\udd1c \u2714\ufe0f \u2699\ufe0f \ud83d\udcbe \"\ud83d\udcbe\" (\u2754 \ud83d\udcaa \ud83d\udcaf \ud83d\udd70 \ud83d\udc0c), \u2696\ufe0f \ud83d\udca5. \u2696\ufe0f 1\ufe0f\u20e3 \ud83d\udee0\ufe0f \ud83d\udcaa \ud83d\udcaa \ud83d\udcca &amp; \ud83d\udd1c \u2714\ufe0f \u231b \u23ed \ud83d\udcbd \ud83c\udd93 \ud83d\udd04.</p> <p>\ud83d\udc49 \ud83d\udcbc, \u26ab\ufe0f \ud83d\udd1c \ud83d\udc4d \ud83e\udd1a 1\ufe0f\u20e3 \u2795 \ud83d\udcbd &amp; \ud83c\udfc3 \ud83d\udee0\ufe0f \ud83d\udd1b \u26ab\ufe0f \ud83d\udc48 \ud83d\udc6b \ud83c\udf10 \u2714\ufe0f \ud83e\udd43 \ud83d\udcbe &amp; \ud83d\udcbd \ud83d\udd70.</p> <p>\ud83d\udce4 \ud83e\udd1e \ud83d\udc48 \ud83e\udd14 \ud83d\udc46 \u2714\ufe0f \ud83c\udf35 \u2699\ufe0f \ud83d\udc46 \ud83d\udee0\ufe0f. \ud83c\udfb2 \u26ab\ufe0f \ud83d\udeb6 \ud83e\udda0, \u2696\ufe0f \ud83c\udfb2 \ud83c\udf8f \ud83d\udc15\u200d\ud83e\uddba \u2696\ufe0f \ud83e\udd16 \u25b6\ufe0f \u2699\ufe0f \u26ab\ufe0f. &amp; \ud83d\udc46 \ud83d\udcaa \ud83d\udc9a \u2714\ufe0f \u2795 \u2139 \ud83d\udd12 \ud83d\udc48 \ud83d\udcbc.</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udeae \u274c \ud83d\udd22 \ud83c\udfaf, \ud83d\uddbc, \ud83d\udd73 \ud83d\udd96 5\ufe0f\u20e30\ufe0f\u20e3 \ud83d\udcaf 9\ufe0f\u20e30\ufe0f\u20e3 \ud83d\udcaf \u2139 \ud83d\udee0\ufe0f. \u261d \ud83d\udc48 \ud83d\udcda \ud83c\udfb2 \ud83d\udc51 \ud83d\udc5c \ud83d\udc46 \ud83d\udd1c \ud83d\udc9a \u2696 &amp; \u2699\ufe0f \u2692 \ud83d\udc46 \ud83d\udee0\ufe0f.</p> <p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83d\ude45 \ud83e\uddf0 \ud83d\udc96 <code>htop</code> \ud83d\udc40 \ud83d\udcbd &amp; \ud83d\udcbe \u2699\ufe0f \ud83d\udc46 \ud83d\udcbd \u2696\ufe0f \ud83d\udcb8 \u2699\ufe0f \ud83d\udd20 \ud83d\udee0\ufe0f. \u2696\ufe0f \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83c\udf16 \ud83c\udfd7 \u2696 \ud83e\uddf0, \u2754 5\ufe0f\u20e3\ud83d\udcc6 \ud83d\udcce \ud83e\udd2d \ud83d\udcbd, \u2652\ufe0f.</p>"},{"location":"deployment/concepts/#_22","title":"\ud83c\udf03","text":"<p>\ud83d\udc46 \u2714\ufe0f \ud83d\udc42 \ud83d\udce5 \ud83d\udc51 \ud83d\udd27 \ud83d\udc48 \ud83d\udc46 \ud83d\udd1c \ud83c\udfb2 \ud83d\udcaa \u2714\ufe0f \ud83e\udd2f \ud83d\udd50\u2754 \ud83e\udd14 \u2754 \ud83d\udee0\ufe0f \ud83d\udc46 \ud83c\ude38:</p> <ul> <li>\ud83d\udc82\u200d\u2642 - \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d</li> <li>\ud83c\udfc3\u200d\u2642 \ud83d\udd1b \ud83d\udd74</li> <li>\u23cf</li> <li>\ud83e\uddec (\ud83d\udd22 \ud83d\udee0\ufe0f \ud83c\udfc3)</li> <li>\ud83d\udcbe</li> <li>\u23ee\ufe0f \ud83d\udd01 \u23ed \u25b6\ufe0f</li> </ul> <p>\ud83e\udd14 \ud83d\udc49 \ud83d\udcad &amp; \u2754 \u2714 \ud83d\udc6b \ud83d\udd1c \ud83e\udd1d \ud83d\udc46 \ud83e\udd14 \ud83d\udcaa \u270a \ud83d\ude46 \ud83d\udeab \ud83d\udd50\u2754 \ud83d\udee0\ufe0f &amp; \ud83d\udee0\ufe0f \ud83d\udc46 \ud83d\udee0\ufe0f. \ud83d\udc76</p> <p>\u23ed \ud83d\udcc4, \ud83d\udc64 \ud83d\udd1c \ud83e\udd1d \ud83d\udc46 \ud83c\udf05 \ud83e\uddf1 \ud83d\uddbc \ud83d\udcaa \ud83c\udf9b \ud83d\udc46 \ud83d\udcaa \u23e9. \ud83d\udc76</p>"},{"location":"deployment/docker/","title":"ReadyAPI \ud83d\udce6 - \u2601","text":"<p>\ud83d\udd50\u2754 \ud83d\udee0\ufe0f ReadyAPI \ud83c\ude38 \u26a0 \ud83c\udfaf \ud83c\udfd7 \ud83d\udcbe \ud83d\udce6 \ud83d\uddbc. \u26ab\ufe0f \ud83d\udece \ud83d\udd28 \u2699\ufe0f \u2601. \ud83d\udc46 \ud83d\udcaa \u2934\ufe0f \ud83d\udee0\ufe0f \ud83d\udc48 \ud83d\udce6 \ud83d\uddbc 1\ufe0f\u20e3 \ud83d\udc69\u200d\u2764\u200d\ud83d\udc68 \ud83d\udcaa \ud83c\udf0c.</p> <p>\u2699\ufe0f \ud83d\udcbe \ud83d\udce6 \u2714\ufe0f \ud83d\udcda \ud83d\udcc8 \u2705 \ud83d\udc82\u200d\u2642, \ud83d\udd2c, \ud83e\udd81, &amp; \ud83c\udf8f.</p> <p>Tip</p> <p>\ud83c\udfc3 &amp; \u23ea \ud83d\udcad \ud83d\udc49 \ud83d\udca9 \u2753 \ud83e\udd98 <code>Dockerfile</code> \ud83d\udd1b \ud83d\udc76.</p> \ud83d\udcc1 \ud83c\udfae \ud83d\udc76 <pre><code>FROM python:3.9\n\nWORKDIR /code\n\nCOPY ./requirements.txt /code/requirements.txt\n\nRUN pip install --no-cache-dir --upgrade -r /code/requirements.txt\n\nCOPY ./app /code/app\n\nCMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"80\"]\n\n# If running behind a proxy like Nginx or Traefik add --proxy-headers\n# CMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"80\", \"--proxy-headers\"]\n</code></pre>"},{"location":"deployment/docker/#_1","title":"\u26ab\ufe0f\u2754 \ud83d\udce6","text":"<p>\ud83d\udce6 (\u2734\ufe0f \ud83d\udcbe \ud83d\udce6) \ud83d\udcf6 \ud83d\udcbf \ud83c\udf0c \ud83d\udce6 \ud83c\ude38 \u2705 \ud83c\udf10 \ud83d\udc6b \ud83d\udd17 &amp; \ud83d\udcaa \ud83d\udcc1 \u23ea \ud83d\udea7 \ud83d\udc6b \u274e \u26aa\ufe0f\u27a1\ufe0f \ud83c\udf8f \ud83d\udce6 (\ud83c\udf8f \ud83c\ude38 \u2696\ufe0f \ud83e\uddb2) \ud83c\udf8f \u2699\ufe0f.</p> <p>\ud83d\udcbe \ud83d\udce6 \ud83c\udfc3 \u2699\ufe0f \ud83c\udf8f \ud83d\udcbe \ud83d\udcbe \ud83e\udda0 (\ud83c\udfb0, \ud83d\udd79 \ud83c\udfb0, \u2601 \ud83d\udcbd, \u2652\ufe0f). \ud83d\udc49 \u26d3 \ud83d\udc48 \ud83d\udc6b \ud83d\udcf6 \ud83d\udcbf (\ud83d\udd2c \ud83c\udf15 \ud83d\udd79 \ud83c\udfb0 \ud83d\udc4d \ud83c\udf82 \ud83c\udfc3\u200d\u2642 \u2699\ufe0f).</p> <p>\ud83d\udc49 \ud83c\udf0c, \ud83d\udce6 \ud83c\udf74 \ud83d\udc25 \u2139, \ud83d\udcb8 \u2b50 \ud83c\udfc3\u200d\u2642 \ud83d\udee0\ufe0f \ud83d\udd17 (\ud83d\udd79 \ud83c\udfb0 \ud83d\udd1c \ud83c\udf74 \ud83c\udf05 \ud83c\udf05).</p> <p>\ud83d\udce6 \u2714\ufe0f \ud83d\udc6b \ud83d\udc4d \u274e \ud83c\udfc3\u200d\u2642 \ud83d\udee0\ufe0f (\ud83d\udece 1\ufe0f\u20e3 \ud83d\udee0\ufe0f), \ud83d\udcc1 \u2699\ufe0f, &amp; \ud83d\udd78, \ud83d\udd2c \ud83d\udee0\ufe0f, \ud83d\udc82\u200d\u2642, \ud83d\udee0\ufe0f, \u2652\ufe0f.</p>"},{"location":"deployment/docker/#_2","title":"\u26ab\ufe0f\u2754 \ud83d\udce6 \ud83d\uddbc","text":"<p>\ud83d\udce6 \ud83c\udfc3 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udce6 \ud83d\uddbc.</p> <p>\ud83d\udce6 \ud83d\uddbc \ud83c\udfbb \u23ec \ud83c\udf10 \ud83d\udcc1, \ud83c\udf10 \ud83d\udd22, &amp; \ud83d\udd22 \ud83d\udccb/\ud83d\udccb \ud83d\udc48 \ud83d\udd1c \ud83c\udf81 \ud83d\udce6. \ud83c\udfbb \ud83d\udce5 \u26d3 \ud83d\udc48 \ud83d\udce6 \ud83d\uddbc \ud83d\udeab \ud83c\udfc3, \u26ab\ufe0f \ud83d\udeab \u2796 \ud83d\udee0\ufe0f, \u26ab\ufe0f \ud83d\udd74 \ud83d\udce6 \ud83d\udcc1 &amp; \ud83d\uddc3.</p> <p>\ud83d\udd05 \"\ud83d\udce6 \ud83d\uddbc\" \ud83d\udc48 \ud83c\udfea \ud83c\udfbb \ud83c\udf9a,\"\ud83d\udce6\" \ud83d\udece \ud83d\udd17 \ud83c\udfc3\u200d\u2642 \ud83d\udc50, \ud83d\udc5c \ud83d\udc48 \u2796 \ud83d\udee0\ufe0f.</p> <p>\ud83d\udd50\u2754 \ud83d\udce6 \u25b6\ufe0f &amp; \ud83c\udfc3\u200d\u2642 (\u25b6\ufe0f \u26aa\ufe0f\u27a1\ufe0f \ud83d\udce6 \ud83d\uddbc) \u26ab\ufe0f \ud83d\udcaa \u270d \u2696\ufe0f \ud83d\udd00 \ud83d\udcc1, \ud83c\udf10 \ud83d\udd22, \u2652\ufe0f. \ud83d\udc48 \ud83d\udd00 \ud83d\udd1c \ud83d\udd00 \ud83d\udd74 \ud83d\udc48 \ud83d\udce6, \u270b\ufe0f \ud83d\udd1c \ud83d\udeab \ud83d\ude23 \ud83d\udc7d \ud83d\udce6 \ud83d\uddbc (\ud83d\udd1c \ud83d\udeab \ud83d\udd8a \ud83d\udcbe).</p> <p>\ud83d\udce6 \ud83d\uddbc \u2b50 \ud83d\udccb \ud83d\udcc1 &amp; \ud83c\udf9a, \u2705 <code>python</code> &amp; \ud83d\udcc1 <code>main.py</code>.</p> <p>&amp; \ud83d\udce6 \u26ab\ufe0f (\ud83d\udd05 \ud83d\udce6 \ud83d\uddbc) \u2611 \ud83c\udfc3 \ud83d\udc50 \ud83d\uddbc, \u2b50 \ud83d\udee0\ufe0f. \ud83d\udc50, \ud83d\udce6 \ud83c\udfc3 \ud83d\udd74 \ud83d\udd50\u2754 \u26ab\ufe0f \u2714\ufe0f \ud83d\udee0\ufe0f \ud83c\udfc3 (&amp; \ud83d\udece \u26ab\ufe0f \ud83d\udd74 \ud83d\udc41 \ud83d\udee0\ufe0f). \ud83d\udce6 \u26d4\ufe0f \ud83d\udd50\u2754 \ud83d\udce4 \ud83d\ude45\u200d\u2642 \ud83d\udee0\ufe0f \ud83c\udfc3 \u26ab\ufe0f.</p>"},{"location":"deployment/docker/#_3","title":"\ud83d\udce6 \ud83d\uddbc","text":"<p>\u2601 \u2714\ufe0f 1\ufe0f\u20e3 \ud83d\udc51 \ud83e\uddf0 \u270d &amp; \ud83d\udee0\ufe0f \ud83d\udce6 \ud83d\uddbc &amp; \ud83d\udce6.</p> <p>&amp; \ud83d\udce4 \ud83d\udce2 \u2601 \ud83c\udfa1 \u23ee\ufe0f \ud83c\udfe4-\u2692 \ud83d\udec2 \ud83d\udce6 \ud83d\uddbc \ud83d\udcda \ud83e\uddf0, \ud83c\udf10, \ud83d\udcbd, &amp; \ud83c\ude38.</p> <p>\ud83d\uddbc, \ud83d\udce4 \ud83d\udec2 \ud83d\udc0d \ud83d\uddbc.</p> <p>&amp; \ud83d\udce4 \ud83d\udcda \ud83c\udf8f \ud83d\uddbc \ud83c\udf8f \ud83d\udc5c \ud83d\udc96 \ud83d\udcbd, \ud83d\uddbc:</p> <ul> <li>\u2733</li> <li>\u2733</li> <li>\u2733</li> <li>\u2733, \u2652\ufe0f.</li> </ul> <p>\u2699\ufe0f \ud83c\udfe4-\u2692 \ud83d\udce6 \ud83d\uddbc \u26ab\ufe0f \ud83d\udcf6 \u23e9 \ud83c\udf00 &amp; \u2699\ufe0f \ud83c\udf8f \ud83e\uddf0. \ud83d\uddbc, \ud83d\udd04 \ud83d\udc45 \ud83c\udd95 \ud83d\udcbd. \ud83c\udf05 \ud83d\udcbc, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83d\udec2 \ud83d\uddbc, &amp; \ud83d\udd17 \ud83d\udc6b \u23ee\ufe0f \ud83c\udf10 \ud83d\udd22.</p> <p>\ud83d\udc48 \ud83c\udf0c, \ud83d\udcda \ud83d\udcbc \ud83d\udc46 \ud83d\udcaa \ud83d\udca1 \ud83d\udd03 \ud83d\udce6 &amp; \u2601 &amp; \ud83c\udfe4-\u2699\ufe0f \ud83d\udc48 \ud83d\udca1 \u23ee\ufe0f \ud83d\udcda \ud83c\udf8f \ud83e\uddf0 &amp; \ud83e\uddb2.</p> <p>, \ud83d\udc46 \ud83d\udd1c \ud83c\udfc3 \ud83d\udc97 \ud83d\udce6 \u23ee\ufe0f \ud83c\udf8f \ud83d\udc5c, \ud83d\udc96 \ud83d\udcbd, \ud83d\udc0d \ud83c\ude38, \ud83d\udd78 \ud83d\udcbd \u23ee\ufe0f \ud83d\ude25 \ud83d\udd78 \ud83c\ude38, &amp; \ud83d\udd17 \ud83d\udc6b \ud83d\udc6f\u200d\u2642\ufe0f \ud83d\udce8 \ud83d\udc6b \ud83d\udd17 \ud83d\udd78.</p> <p>\ud83c\udf10 \ud83d\udce6 \ud83e\uddfe \u2699\ufe0f (\ud83d\udc96 \u2601 \u2696\ufe0f Kubernetes) \u2714\ufe0f \ud83d\udc6b \ud83d\udd78 \u2692 \ud83d\udee0\ufe0f \ud83d\udd18 \ud83d\udc6b.</p>"},{"location":"deployment/docker/#_4","title":"\ud83d\udce6 &amp; \ud83d\udee0\ufe0f","text":"<p>\ud83d\udce6 \ud83d\uddbc \ud83d\udece \ud83d\udd0c \ud83d\udeae \ud83d\uddc3 \ud83d\udd22 \ud83d\udccb \u2696\ufe0f \ud83d\udccb \ud83d\udc48 \ud83d\udd1c \ud83c\udfc3 \ud83d\udd50\u2754 \ud83d\udce6 \u25b6\ufe0f &amp; \ud83d\udd22 \ud83d\udeb6\u200d\u2640\ufe0f \ud83d\udc48 \ud83d\udccb. \ud83d\udcf6 \ud83c\udf8f \u26ab\ufe0f\u2754 \ud83d\udd1c \ud83d\udea5 \u26ab\ufe0f \ud83d\udccb \u23f8.</p> <p>\ud83d\udd50\u2754 \ud83d\udce6 \u25b6\ufe0f, \u26ab\ufe0f \ud83d\udd1c \ud83c\udfc3 \ud83d\udc48 \ud83d\udccb/\ud83d\udccb (\ud83d\udc50 \ud83d\udc46 \ud83d\udcaa \ud83d\udd10 \u26ab\ufe0f &amp; \u2692 \u26ab\ufe0f \ud83c\udfc3 \ud83c\udf8f \ud83d\udccb/\ud83d\udccb).</p> <p>\ud83d\udce6 \ud83c\udfc3 \ud83d\udccf \ud83d\udc51 \ud83d\udee0\ufe0f (\ud83d\udccb \u2696\ufe0f \ud83d\udccb) \ud83c\udfc3.</p> <p>\ud83d\udce6 \ud83d\udece \u2714\ufe0f \ud83d\udc41 \ud83d\udee0\ufe0f, \u270b\ufe0f \u26ab\ufe0f \ud83d\udcaa \u25b6\ufe0f \u2733 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc51 \ud83d\udee0\ufe0f, &amp; \ud83d\udc48 \ud83c\udf0c \ud83d\udc46 \ud83d\udd1c \u2714\ufe0f \ud83d\udc97 \ud83d\udee0\ufe0f \ud83c\udf8f \ud83d\udce6.</p> <p>\u270b\ufe0f \u26ab\ufe0f \ud83d\udeab \ud83d\udcaa \u2714\ufe0f \ud83c\udfc3\u200d\u2642 \ud83d\udce6 \ud83c\udf75 \ud83c\udf18 1\ufe0f\u20e3 \ud83c\udfc3\u200d\u2642 \ud83d\udee0\ufe0f. \ud83d\udea5 \ud83d\udc51 \ud83d\udee0\ufe0f \u26d4\ufe0f, \ud83d\udce6 \u26d4\ufe0f.</p>"},{"location":"deployment/docker/#readyapi","title":"\ud83c\udfd7 \u2601 \ud83d\uddbc ReadyAPI","text":"<p>\ud83c\udd97, \u27a1\ufe0f \ud83c\udfd7 \ud83d\udd73 \ud83d\udd1c \u2757 \ud83d\udc76</p> <p>\ud83d\udc64 \ud83d\udd1c \ud83c\udfa6 \ud83d\udc46 \u2754 \ud83c\udfd7 \u2601 \ud83d\uddbc ReadyAPI \u26aa\ufe0f\u27a1\ufe0f \ud83d\udd8c, \u2693\ufe0f \ud83d\udd1b \ud83d\udec2 \ud83d\udc0d \ud83d\uddbc.</p> <p>\ud83d\udc49 \u26ab\ufe0f\u2754 \ud83d\udc46 \ud83d\udd1c \ud83d\udc9a \ud83c\udfc6 \ud83d\udcbc, \ud83d\uddbc:</p> <ul> <li>\u2699\ufe0f Kubernetes \u2696\ufe0f \ud83c\udf8f \ud83e\uddf0</li> <li>\ud83d\udd50\u2754 \ud83c\udfc3\u200d\u2642 \ud83d\udd1b \ud83c\udf53 \ud83d\udc72</li> <li>\u2699\ufe0f \u2601 \ud83d\udc15\u200d\ud83e\uddba \ud83d\udc48 \ud83d\udd1c \ud83c\udfc3 \ud83d\udce6 \ud83d\uddbc \ud83d\udc46, \u2652\ufe0f.</li> </ul>"},{"location":"deployment/docker/#_5","title":"\ud83d\udce6 \ud83d\udcc4","text":"<p>\ud83d\udc46 \ud83d\udd1c \ud83d\udece \u2714\ufe0f \ud83d\udce6 \ud83d\udcc4 \ud83d\udc46 \ud83c\ude38 \ud83d\udcc1.</p> <p>\u26ab\ufe0f \ud83d\udd1c \ud83e\ude80 \u2734\ufe0f \ud83d\udd1b \ud83e\uddf0 \ud83d\udc46 \u2699\ufe0f \u274e \ud83d\udc48 \ud83d\udcc4.</p> <p>\ud83c\udf05 \u26a0 \ud83c\udf0c \u26ab\ufe0f \u2714\ufe0f \ud83d\udcc1 <code>requirements.txt</code> \u23ee\ufe0f \ud83d\udce6 \ud83d\udcdb &amp; \ud83d\udc6b \u23ec, 1\ufe0f\u20e3 \ud83d\udccd \u23f8.</p> <p>\ud83d\udc46 \ud83d\udd1c \u2197\ufe0f \u2699\ufe0f \ud83c\udf8f \ud83d\udcad \ud83d\udc46 \u270d \ud83d\udd03 ReadyAPI \u23ec \u2692 \u2194 \u23ec.</p> <p>\ud83d\uddbc, \ud83d\udc46 <code>requirements.txt</code> \ud83d\udcaa \ud83d\udc40 \ud83d\udc96:</p> <pre><code>readyapi&gt;=0.68.0,&lt;0.69.0\npydantic&gt;=1.8.0,&lt;2.0.0\nuvicorn&gt;=0.15.0,&lt;0.16.0\n</code></pre> <p>&amp; \ud83d\udc46 \ud83d\udd1c \ud83d\udece \u274e \ud83d\udc48 \ud83d\udce6 \ud83d\udd17 \u23ee\ufe0f <code>pip</code>, \ud83d\uddbc:</p> <pre><code>$ pip install -r requirements.txt\n---&gt; 100%\nSuccessfully installed readyapi pydantic uvicorn\n</code></pre> <p>Info</p> <p>\ud83d\udce4 \ud83c\udf8f \ud83d\udcc1 &amp; \ud83e\uddf0 \ud83d\udd2c &amp; \u274e \ud83d\udce6 \ud83d\udd17.</p> <p>\ud83d\udc64 \ud83d\udd1c \ud83c\udfa6 \ud83d\udc46 \ud83d\uddbc \u2699\ufe0f \ud83c\udfb6 \u23ea \ud83d\udcc4 \ud83d\udd1b. \ud83d\udc76</p>"},{"location":"deployment/docker/#readyapi_1","title":"\u270d ReadyAPI \ud83d\udcdf","text":"<ul> <li>\u270d <code>app</code> \ud83d\udcc1 &amp; \u26d4 \u26ab\ufe0f.</li> <li>\u270d \ud83d\udec1 \ud83d\udcc1 <code>__init__.py</code>.</li> <li>\u270d <code>main.py</code> \ud83d\udcc1 \u23ee\ufe0f:</li> </ul> <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n</code></pre>"},{"location":"deployment/docker/#_6","title":"\ud83d\udcc1","text":"<p>\ud83d\udd1c \ud83c\udf8f \ud83c\udfd7 \ud83d\udcc1 \u270d \ud83d\udcc1 <code>Dockerfile</code> \u23ee\ufe0f:</p> <pre><code># (1)\nFROM python:3.9\n\n# (2)\nWORKDIR /code\n\n# (3)\nCOPY ./requirements.txt /code/requirements.txt\n\n# (4)\nRUN pip install --no-cache-dir --upgrade -r /code/requirements.txt\n\n# (5)\nCOPY ./app /code/app\n\n# (6)\nCMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"80\"]\n</code></pre> <p>1\ufe0f\u20e3. \u25b6\ufe0f \u26aa\ufe0f\u27a1\ufe0f \ud83d\udec2 \ud83d\udc0d \ud83e\udde2 \ud83d\uddbc.</p> <p>2\ufe0f\u20e3. \u2692 \u23ee\ufe0f \ud83d\udc77 \ud83d\udcc1 <code>/code</code>.</p> <pre><code>\ud83d\udc49 \ud83c\udf10\u2754 \ud83d\udc65 \ud83d\udd1c \ud83d\udeae `requirements.txt` \ud83d\udcc1 &amp;amp; `app` \ud83d\udcc1.\n</code></pre> <p>3\ufe0f\u20e3. \ud83d\udcc1 \ud83d\udcc1 \u23ee\ufe0f \ud83d\udcc4 <code>/code</code> \ud83d\udcc1.</p> <pre><code>\ud83d\udcc1 **\ud83d\udd74** \ud83d\udcc1 \u23ee\ufe0f \ud83d\udcc4 \ud83e\udd47, \ud83d\udeab \ud83c\udf82 \ud83d\udcdf.\n\n\ud83d\udc49 \ud83d\udcc1 **\ud83d\udeab \ud83d\udd00 \ud83d\udece**, \u2601 \ud83d\udd1c \ud83d\udd0d \u26ab\ufe0f &amp;amp; \u2699\ufe0f **\ud83d\udcbe** \ud83d\udc49 \ud83d\udd01, \ud83d\udee0\ufe0f \ud83d\udcbe \u23ed \ud83d\udd01 \ud83d\udc81\u200d\u2642\ufe0f.\n</code></pre> <p>4\ufe0f\u20e3. \u274e \ud83d\udce6 \ud83d\udd17 \ud83d\udcc4 \ud83d\udcc1.</p> <pre><code> `--no-cache-dir` \ud83c\udf9b \ud83d\udcac `pip` \ud83d\udeab \ud83d\udd8a \u23ec \ud83d\udce6 \ud83c\udf10, \ud83d\udc48 \ud83d\udd74 \ud83d\udea5 `pip` \ud83d\udd1c \ud83c\udfc3 \ud83d\udd04 \u274e \ud83c\udf8f \ud83d\udce6, \u270b\ufe0f \ud83d\udc48 \ud83d\udeab \ud83d\udcbc \ud83d\udd50\u2754 \ud83d\udc77 \u23ee\ufe0f \ud83d\udce6.\n\n/// note\n\n`--no-cache-dir` \ud83d\udd74 \ud83d\udd17 `pip`, \u26ab\ufe0f \u2714\ufe0f \ud83d\udd73 \u23ee\ufe0f \u2601 \u2696\ufe0f \ud83d\udce6.\n\n///\n\n `--upgrade` \ud83c\udf9b \ud83d\udcac `pip` \u267b \ud83d\udce6 \ud83d\udea5 \ud83d\udc6b \u23ea \u274e.\n\n\u21a9\ufe0f \u23ee\ufe0f \ud83d\udd01 \ud83d\udda8 \ud83d\udcc1 \ud83d\udcaa \ud83d\udd0d **\u2601 \ud83d\udcbe**, \ud83d\udc49 \ud83d\udd01 \ud83d\udd1c **\u2699\ufe0f \u2601 \ud83d\udcbe** \ud83d\udd50\u2754 \ud83d\udcaa.\n\n\u2699\ufe0f \ud83d\udcbe \ud83d\udc49 \ud83d\udd01 \ud83d\udd1c **\ud83d\udd8a** \ud83d\udc46 \ud83d\udcda **\ud83d\udd70** \ud83d\udd50\u2754 \ud83c\udfd7 \ud83d\uddbc \ud83d\udd04 &amp;amp; \ud83d\udd04 \u23ee\ufe0f \ud83d\udee0\ufe0f, \u21a9\ufe0f **\u23ec &amp;amp; \u274e** \ud83c\udf10 \ud83d\udd17 **\ud83d\udd20 \ud83d\udd70**.\n</code></pre> <p>5\ufe0f\u20e3. \ud83d\udcc1 <code>./app</code> \ud83d\udcc1 \ud83d\udd18 <code>/code</code> \ud83d\udcc1.</p> <pre><code>\ud83d\udc49 \u2714\ufe0f \ud83c\udf10 \ud83d\udcdf \u2754 \u26ab\ufe0f\u2754 **\ud83d\udd00 \ud83c\udf05 \ud83d\udece** \u2601 **\ud83d\udcbe** \ud83c\udfc6 \ud83d\udeab \u2699\ufe0f \ud83d\udc49 \u2696\ufe0f \ud83d\ude46 **\ud83d\udcc4 \ud83d\udd01** \ud83d\udcaa.\n\n, \u26ab\ufe0f \u26a0 \ud83d\udeae \ud83d\udc49 **\ud83c\udfd8 \ud83d\udd1a** `Dockerfile`, \ud83d\udd2c \ud83d\udce6 \ud83d\uddbc \ud83c\udfd7 \ud83d\udd70.\n</code></pre> <p>6\ufe0f\u20e3. \u2692 \ud83d\udccb \ud83c\udfc3 <code>uvicorn</code> \ud83d\udcbd.</p> <pre><code>`CMD` \u270a \ud83d\udcc7 \ud83c\udfbb, \ud83d\udd20 \ud83d\udc6b \ud83c\udfbb \u26ab\ufe0f\u2754 \ud83d\udc46 \ud83d\udd1c \ud83c\udd8e \ud83d\udccb \u23f8 \ud83d\udc7d \ud83d\ude80.\n\n\ud83d\udc49 \ud83d\udccb \ud83d\udd1c \ud83c\udfc3 \u26aa\ufe0f\u27a1\ufe0f **\u23ee\ufe0f \ud83d\udc77 \ud83d\udcc1**, \ud83c\udf8f `/code` \ud83d\udcc1 \ud83d\udc46 \u2692 \ud83d\udd1b \u23ee\ufe0f `WORKDIR /code`.\n\n\u21a9\ufe0f \ud83d\udccb \ud83d\udd1c \u25b6\ufe0f `/code` &amp;amp; \ud83d\udd18 \u26ab\ufe0f \ud83d\udcc1 `./app` \u23ee\ufe0f \ud83d\udc46 \ud83d\udcdf, **Uvicorn** \ud83d\udd1c \ud83d\udcaa \ud83d\udc40 &amp;amp; **\ud83d\uddc4** `app` \u26aa\ufe0f\u27a1\ufe0f `app.main`.\n</code></pre> <p>Tip</p> <p>\ud83d\udcc4 \u26ab\ufe0f\u2754 \ud83d\udd20 \u23f8 \ud83d\udd28 \ud83d\udd8a \ud83d\udd20 \ud83d\udd22 \ud83d\udcad \ud83d\udcdf. \ud83d\udc76</p> <p>\ud83d\udc46 \ud83d\udd1c \ud83d\udd1c \u2714\ufe0f \ud83d\udcc1 \ud83d\udcca \ud83d\udc96:</p> <pre><code>.\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 main.py\n\u251c\u2500\u2500 Dockerfile\n\u2514\u2500\u2500 requirements.txt\n</code></pre>"},{"location":"deployment/docker/#_7","title":"\u26c5 \ud83e\udd1d \u274e \ud83d\uddf3","text":"<p>\ud83d\udea5 \ud83d\udc46 \ud83c\udfc3\u200d\u2642 \ud83d\udc46 \ud83d\udce6 \u26c5 \ud83e\udd1d \u274e \ud83d\uddf3 (\ud83d\udcd0 \u2699) \ud83d\udc96 \ud83d\udc4c \u2696\ufe0f Traefik, \ud83d\udeae \ud83c\udf9b <code>--proxy-headers</code>, \ud83d\udc49 \ud83d\udd1c \ud83d\udcac Uvicorn \ud83d\udc99 \ud83c\udf9a \ud83d\udce8 \ud83d\udc48 \ud83d\uddf3 \ud83d\udcac \u26ab\ufe0f \ud83d\udc48 \ud83c\ude38 \ud83c\udfc3 \u26c5 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d, \u2652\ufe0f.</p> <pre><code>CMD [\"uvicorn\", \"app.main:app\", \"--proxy-headers\", \"--host\", \"0.0.0.0\", \"--port\", \"80\"]\n</code></pre>"},{"location":"deployment/docker/#_8","title":"\u2601 \ud83d\udcbe","text":"<p>\ud83d\udce4 \u26a0 \ud83c\udfb1 \ud83d\udc49 <code>Dockerfile</code>, \ud83d\udc65 \ud83e\udd47 \ud83d\udcc1 \ud83d\udcc1 \u23ee\ufe0f \ud83d\udd17 \ud83d\ude1e, \ud83d\udeab \ud83c\udf82 \ud83d\udcdf. \u27a1\ufe0f \ud83d\udc64 \ud83d\udcac \ud83d\udc46 \u26ab\ufe0f\u2754 \ud83d\udc48.</p> <pre><code>COPY ./requirements.txt /code/requirements.txt\n</code></pre> <p>\u2601 &amp; \ud83c\udf8f \ud83e\uddf0 \ud83c\udfd7 \ud83d\udc49 \ud83d\udce6 \ud83d\uddbc \ud83d\udd01, \ud83d\udeae 1\ufe0f\u20e3 \ud83e\uddfd \ud83d\udd1b \ud83d\udd1d \ud83c\udf8f, \u25b6\ufe0f \u26aa\ufe0f\u27a1\ufe0f \ud83d\udd1d <code>Dockerfile</code> &amp; \u274e \ud83d\ude46 \ud83d\udcc1 \u270d \ud83d\udd20 \ud83d\udc69\u200d\ud83c\udf3e <code>Dockerfile</code>.</p> <p>\u2601 &amp; \ud83c\udf8f \ud83e\uddf0 \u2699\ufe0f \ud83d\udd17 \ud83d\udcbe \ud83d\udd50\u2754 \ud83c\udfd7 \ud83d\uddbc, \ud83d\udea5 \ud83d\udcc1 \ud83d\udeab \ud83d\udd00 \u21a9\ufe0f \ud83c\udfc1 \ud83d\udd70 \ud83c\udfd7 \ud83d\udce6 \ud83d\uddbc, \u2934\ufe0f \u26ab\ufe0f \ud83d\udd1c \ud83c\udfe4-\u2699\ufe0f \ud83c\udf8f \ud83e\uddfd \u270d \ud83c\udfc1 \ud83d\udd70, \u21a9\ufe0f \ud83d\udda8 \ud83d\udcc1 \ud83d\udd04 &amp; \ud83c\udfd7 \ud83c\udd95 \ud83e\uddfd \u26aa\ufe0f\u27a1\ufe0f \ud83d\udd8c.</p> <p>\u274e \ud83d\udcc1 \ud83d\udcc1 \ud83d\udeab \ud83c\udfaf \ud83d\udcc9 \ud83d\udc5c \ud83d\udc81\u200d\u2642\ufe0f \ud83c\udf05, \u270b\ufe0f \u21a9\ufe0f \u26ab\ufe0f \u2699\ufe0f \ud83d\udcbe \ud83d\udc48 \ud83d\udd01, \u26ab\ufe0f \ud83d\udcaa \u2699\ufe0f \ud83d\udcbe \u23ed \ud83d\udd01. \ud83d\uddbc, \u26ab\ufe0f \ud83d\udcaa \u2699\ufe0f \ud83d\udcbe \ud83d\udc69\u200d\ud83c\udf3e \ud83d\udc48 \u274e \ud83d\udd17 \u23ee\ufe0f:</p> <pre><code>RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt\n</code></pre> <p>\ud83d\udcc1 \u23ee\ufe0f \ud83d\udce6 \ud83d\udcc4 \ud83c\udfc6 \ud83d\udeab \ud83d\udd00 \ud83d\udece. , \ud83d\udda8 \ud83d\udd74 \ud83d\udc48 \ud83d\udcc1, \u2601 \ud83d\udd1c \ud83d\udcaa \u2699\ufe0f \ud83d\udcbe \ud83d\udc48 \ud83d\udd01.</p> <p>&amp; \u2934\ufe0f, \u2601 \ud83d\udd1c \ud83d\udcaa \u2699\ufe0f \ud83d\udcbe \u23ed \ud83d\udd01 \ud83d\udc48 \u23ec &amp; \u274e \ud83d\udc48 \ud83d\udd17. &amp; \ud83d\udce5 \ud83c\udf10\u2754 \ud83d\udc65 \ud83d\udd8a \ud83d\udcda \ud83d\udd70. \ud83d\udc76 ...&amp; \u274e \ud83d\ude29 \u231b. \ud83d\udc76 \ud83d\udc76</p> <p>\u23ec &amp; \u274e \ud83d\udce6 \ud83d\udd17 \ud83d\udcaa \u270a \u23f2, \u270b\ufe0f \u2699\ufe0f \ud83d\udcbe \ud83d\udd1c \u270a \ud83e\udd48 \ud83c\udf05.</p> <p>&amp; \ud83d\udc46 \ud83d\udd1c \ud83c\udfd7 \ud83d\udce6 \ud83d\uddbc \ud83d\udd04 &amp; \ud83d\udd04 \u23ee\ufe0f \ud83d\udee0\ufe0f \u2705 \ud83d\udc48 \ud83d\udc46 \ud83d\udcdf \ud83d\udd00 \ud83d\udc77, \ud83d\udce4 \ud83d\udcda \ud83d\udcc8 \ud83d\udd70 \ud83d\udc49 \ud83d\udd1c \ud83d\udd8a.</p> <p>\u2934\ufe0f, \ud83c\udfd8 \ud83d\udd1a <code>Dockerfile</code>, \ud83d\udc65 \ud83d\udcc1 \ud83c\udf10 \ud83d\udcdf. \ud83d\udc49 \u26ab\ufe0f\u2754 \ud83d\udd00 \ud83c\udfc6 \ud83d\udece, \ud83d\udc65 \ud83d\udeae \u26ab\ufe0f \ud83c\udfd8 \ud83d\udd1a, \u21a9\ufe0f \ud83c\udf16 \ud83d\udd67, \ud83d\udd73 \u23ee\ufe0f \ud83d\udc49 \ud83d\udd01 \ud83d\udd1c \ud83d\udeab \ud83d\udcaa \u2699\ufe0f \ud83d\udcbe.</p> <pre><code>COPY ./app /code/app\n</code></pre>"},{"location":"deployment/docker/#_9","title":"\ud83c\udfd7 \u2601 \ud83d\uddbc","text":"<p>\ud83d\udd1c \ud83d\udc48 \ud83c\udf10 \ud83d\udcc1 \ud83e\udd49, \u27a1\ufe0f \ud83c\udfd7 \ud83d\udce6 \ud83d\uddbc.</p> <ul> <li>\ud83d\udeb6 \ud83c\udfd7 \ud83d\udcc1 (\ud83c\udf10\u2754 \ud83d\udc46 <code>Dockerfile</code> , \u2697 \ud83d\udc46 <code>app</code> \ud83d\udcc1).</li> <li>\ud83c\udfd7 \ud83d\udc46 ReadyAPI \ud83d\uddbc:</li> </ul> <pre><code>$ docker build -t myimage .\n\n---&gt; 100%\n</code></pre> <p>Tip</p> <p>\ud83d\udc40 <code>.</code> \ud83d\udd1a, \u26ab\ufe0f \ud83c\udf13 <code>./</code>, \u26ab\ufe0f \ud83d\udcac \u2601 \ud83d\udcc1 \u2699\ufe0f \ud83c\udfd7 \ud83d\udce6 \ud83d\uddbc.</p> <p>\ud83d\udc49 \ud83d\udcbc, \u26ab\ufe0f \ud83c\udf8f \u23ee\ufe0f \ud83d\udcc1 (<code>.</code>).</p>"},{"location":"deployment/docker/#_10","title":"\u25b6\ufe0f \u2601 \ud83d\udce6","text":"<ul> <li>\ud83c\udfc3 \ud83d\udce6 \u2693\ufe0f \ud83d\udd1b \ud83d\udc46 \ud83d\uddbc:</li> </ul> <pre><code>$ docker run -d --name mycontainer -p 80:80 myimage\n</code></pre>"},{"location":"deployment/docker/#_11","title":"\u2705 \u26ab\ufe0f","text":"<p>\ud83d\udc46 \ud83d\udd1c \ud83d\udcaa \u2705 \u26ab\ufe0f \ud83d\udc46 \u2601 \ud83d\udce6 \ud83d\udcdb, \ud83d\uddbc: http://192.168.99.100/items/5?q=somequery \u2696\ufe0f http://127.0.0.1/items/5?q=somequery (\u2696\ufe0f \ud83c\udf13, \u2699\ufe0f \ud83d\udc46 \u2601 \ud83e\udda0).</p> <p>\ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \ud83d\udd73 \ud83d\udc96:</p> <pre><code>{\"item_id\": 5, \"q\": \"somequery\"}\n</code></pre>"},{"location":"deployment/docker/#_12","title":"\ud83c\udf93 \ud83d\udee0\ufe0f \ud83e\ude7a","text":"<p>\ud83d\udd1c \ud83d\udc46 \ud83d\udcaa \ud83d\udeb6 http://192.168.99.100/docs \u2696\ufe0f http://127.0.0.1/docs (\u2696\ufe0f \ud83c\udf13, \u2699\ufe0f \ud83d\udc46 \u2601 \ud83e\udda0).</p> <p>\ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \ud83c\udfe7 \ud83c\udf93 \ud83d\udee0\ufe0f \ud83e\uddfe (\ud83d\ude9a \ud83e\udd81 \ud83c\udf9a):</p> <p></p>"},{"location":"deployment/docker/#_13","title":"\ud83c\udf9b \ud83d\udee0\ufe0f \ud83e\ude7a","text":"<p>&amp; \ud83d\udc46 \ud83d\udcaa \ud83d\udeb6 http://192.168.99.100/redoc \u2696\ufe0f http://127.0.0.1/redoc (\u2696\ufe0f \ud83c\udf13, \u2699\ufe0f \ud83d\udc46 \u2601 \ud83e\udda0).</p> <p>\ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \ud83c\udf9b \ud83c\udfe7 \ud83e\uddfe (\ud83d\ude9a \ud83d\udcc4):</p> <p></p>"},{"location":"deployment/docker/#-readyapi","title":"\ud83c\udfd7 \u2601 \ud83d\uddbc \u23ee\ufe0f \ud83d\udc41-\ud83d\udcc1 ReadyAPI","text":"<p>\ud83d\udea5 \ud83d\udc46 ReadyAPI \ud83d\udc41 \ud83d\udcc1, \ud83d\uddbc, <code>main.py</code> \ud83c\udf75 <code>./app</code> \ud83d\udcc1, \ud83d\udc46 \ud83d\udcc1 \ud83d\udcca \ud83d\udcaa \ud83d\udc40 \ud83d\udc96 \ud83d\udc49:</p> <pre><code>.\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 main.py\n\u2514\u2500\u2500 requirements.txt\n</code></pre> <p>\u2934\ufe0f \ud83d\udc46 \ud83d\udd1c \u2714\ufe0f \ud83d\udd00 \ud83d\udd17 \u27a1 \ud83d\udcc1 \ud83d\udcc1 \ud83d\udd18 <code>Dockerfile</code>:</p> <pre><code>FROM python:3.9\n\nWORKDIR /code\n\nCOPY ./requirements.txt /code/requirements.txt\n\nRUN pip install --no-cache-dir --upgrade -r /code/requirements.txt\n\n# (1)\nCOPY ./main.py /code/\n\n# (2)\nCMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"80\"]\n</code></pre> <p>1\ufe0f\u20e3. \ud83d\udcc1 <code>main.py</code> \ud83d\udcc1 <code>/code</code> \ud83d\udcc1 \ud83d\udd17 (\ud83c\udf75 \ud83d\ude46 <code>./app</code> \ud83d\udcc1).</p> <p>2\ufe0f\u20e3. \ud83c\udfc3 Uvicorn &amp; \ud83d\udcac \u26ab\ufe0f \ud83d\uddc4 <code>app</code> \ud83c\udf9a \u26aa\ufe0f\u27a1\ufe0f <code>main</code> (\u21a9\ufe0f \ud83c\udfed \u26aa\ufe0f\u27a1\ufe0f <code>app.main</code>).</p> <p>\u2934\ufe0f \ud83d\udd06 Uvicorn \ud83d\udccb \u2699\ufe0f \ud83c\udd95 \ud83d\udd79 <code>main</code> \u21a9\ufe0f <code>app.main</code> \ud83d\uddc4 ReadyAPI \ud83c\udf9a <code>app</code>.</p>"},{"location":"deployment/docker/#_14","title":"\ud83d\udee0\ufe0f \ud83d\udd27","text":"<p>\u27a1\ufe0f \ud83d\udcac \ud83d\udd04 \ud83d\udd03 \ud83c\udf8f \ud83d\udee0\ufe0f \ud83d\udd27 \u2696 \ud83d\udce6.</p> <p>\ud83d\udce6 \u2734\ufe0f \ud83e\uddf0 \ud83d\udcc9 \ud83d\udee0\ufe0f \ud83c\udfd7 &amp; \ud83d\udee0\ufe0f \ud83c\ude38, \u270b\ufe0f \ud83d\udc6b \ud83d\udeab \ud83d\udee0\ufe0f \ud83c\udfaf \ud83c\udfaf \ud83c\udf75 \ud83d\udc49 \ud83d\udee0\ufe0f \ud83d\udd27, &amp; \ud83d\udce4 \ud83d\udcda \ud83d\udcaa \ud83c\udf9b.</p> <p>\ud83d\udc4d \ud83d\udcf0 \ud83d\udc48 \u23ee\ufe0f \ud83d\udd20 \ud83c\udf8f \ud83c\udf9b \ud83d\udce4 \ud83c\udf0c \ud83d\udcd4 \ud83c\udf10 \ud83d\udee0\ufe0f \ud83d\udd27. \ud83d\udc76</p> <p>\u27a1\ufe0f \ud83d\udcc4 \ud83d\udc49 \ud83d\udee0\ufe0f \ud83d\udd27 \u2696 \ud83d\udce6:</p> <ul> <li>\ud83c\uddfa\ud83c\uddf8\ud83d\udd0d</li> <li>\ud83c\udfc3\u200d\u2642 \ud83d\udd1b \ud83d\udd74</li> <li>\u23cf</li> <li>\ud83e\uddec (\ud83d\udd22 \ud83d\udee0\ufe0f \ud83c\udfc3)</li> <li>\ud83d\udcbe</li> <li>\u23ee\ufe0f \ud83d\udd01 \u23ed \u25b6\ufe0f</li> </ul>"},{"location":"deployment/docker/#_15","title":"\ud83c\uddfa\ud83c\uddf8\ud83d\udd0d","text":"<p>\ud83d\udea5 \ud83d\udc65 \ud83c\udfaf \ud83d\udd1b \ud83d\udce6 \ud83d\uddbc ReadyAPI \ud83c\ude38 (&amp; \u23ea \ud83c\udfc3\u200d\u2642 \ud83d\udce6), \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udece \ud83d\udd1c \ud83c\udf75 \ud83d\udddc \u27951\ufe0f\u20e3 \ud83e\uddf0.</p> <p>\u26ab\ufe0f \ud83d\udcaa \u27951\ufe0f\u20e3 \ud83d\udce6, \ud83d\uddbc \u23ee\ufe0f Traefik, \ud83d\ude9a \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d &amp; \ud83c\udfe7 \ud83d\udee0\ufe0f \ud83d\udcc4.</p> <p>Tip</p> <p>Traefik \u2714\ufe0f \ud83d\udee0\ufe0f \u23ee\ufe0f \u2601, Kubernetes, &amp; \ud83c\udf8f, \u26ab\ufe0f \ud83d\udcf6 \u23e9 \u2692 \ud83c\udd99 &amp; \ud83d\udd17 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udc46 \ud83d\udce6 \u23ee\ufe0f \u26ab\ufe0f.</p> <p>\ud83d\udc50, \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udcaa \ud83c\udf75 \u2601 \ud83d\udc15\u200d\ud83e\uddba 1\ufe0f\u20e3 \ud83d\udc6b \ud83d\udc15\u200d\ud83e\uddba (\u23ea \ud83c\udfc3 \ud83c\ude38 \ud83d\udce6).</p>"},{"location":"deployment/docker/#_16","title":"\ud83c\udfc3\u200d\u2642 \ud83d\udd1b \ud83d\udd74 &amp; \u23cf","text":"<p>\ud83d\udce4 \ud83d\udece \u27951\ufe0f\u20e3 \ud83e\uddf0 \ud83c\ude1a \u25b6\ufe0f &amp; \ud83c\udfc3\u200d\u2642 \ud83d\udc46 \ud83d\udce6.</p> <p>\u26ab\ufe0f \ud83d\udcaa \u2601 \ud83d\udd17, \u2601 \u270d, Kubernetes, \u2601 \ud83d\udc15\u200d\ud83e\uddba, \u2652\ufe0f.</p> <p>\ud83c\udf05 (\u2696\ufe0f \ud83c\udf10) \ud83d\udcbc, \ud83d\udce4 \ud83d\ude45 \ud83c\udf9b \ud83d\udee0\ufe0f \ud83c\udfc3 \ud83d\udce6 \ud83d\udd1b \ud83d\udd74 &amp; \ud83d\udee0\ufe0f \u23cf \ud83d\udd1b \u274c. \ud83d\uddbc, \u2601, \u26ab\ufe0f \ud83d\udccb \u23f8 \ud83c\udf9b <code>--restart</code>.</p> <p>\ud83c\udf75 \u2699\ufe0f \ud83d\udce6, \u2692 \ud83c\ude38 \ud83c\udfc3 \ud83d\udd1b \ud83d\udd74 &amp; \u23ee\ufe0f \u23cf \ud83d\udcaa \u26a0 &amp; \u26a0. \u270b\ufe0f \ud83d\udd50\u2754 \ud83d\udc77 \u23ee\ufe0f \ud83d\udce6 \ud83c\udf05 \ud83d\udcbc \ud83d\udc48 \ud83d\udee0\ufe0f \ud83d\udd0c \ud83d\udd22. \ud83d\udc76</p>"},{"location":"deployment/docker/#-","title":"\ud83e\uddec - \ud83d\udd22 \ud83d\udee0\ufe0f","text":"<p>\ud83d\udea5 \ud83d\udc46 \u2714\ufe0f \ud83c\udf11 \ud83c\udfb0 \u23ee\ufe0f \u2601, \u2601 \ud83d\udc1d \ud83d\udcf3, \ud83d\udd96, \u2696\ufe0f \u27951\ufe0f\u20e3 \ud83c\udf8f \ud83c\udfd7 \u2699\ufe0f \ud83d\udee0\ufe0f \ud83d\udcce \ud83d\udce6 \ud83d\udd1b \ud83d\udc97 \ud83c\udfb0, \u2934\ufe0f \ud83d\udc46 \ud83d\udd1c \ud83c\udfb2 \ud83d\udc9a \ud83c\udf75 \ud83e\uddec \ud83c\udf11 \ud83c\udf9a \u21a9\ufe0f \u2699\ufe0f \ud83d\udee0\ufe0f \ud83d\udc68\u200d\ud83d\udcbc (\ud83d\udc96 \ud83d\udc01 \u23ee\ufe0f \ud83d\udc68\u200d\ud83c\udfed) \ud83d\udd20 \ud83d\udce6.</p> <p>1\ufe0f\u20e3 \ud83d\udcda \ud83d\udcce \ud83d\udce6 \ud83e\uddfe \u2699\ufe0f \ud83d\udc96 Kubernetes \ud83d\udece \u2714\ufe0f \ud83d\udee0\ufe0f \ud83c\udf0c \ud83d\ude9a \ud83e\uddec \ud83d\udce6 \u23ea \ud83d\udd17 \ud83d\udcd0 \u2696 \ud83d\udce8 \ud83d\udce8. \ud83c\udf10 \ud83c\udf11 \ud83c\udf9a.</p> <p>\ud83d\udcda \ud83d\udcbc, \ud83d\udc46 \ud83d\udd1c \ud83c\udfb2 \ud83d\udc9a \ud83c\udfd7 \u2601 \ud83d\uddbc \u26aa\ufe0f\u27a1\ufe0f \ud83d\udd8c \ud83d\udd2c \ud83d\udd1b, \u274e \ud83d\udc46 \ud83d\udd17, &amp; \ud83c\udfc3\u200d\u2642 \ud83d\udc41 Uvicorn \ud83d\udee0\ufe0f \u21a9\ufe0f \ud83c\udfc3\u200d\u2642 \ud83d\udd73 \ud83d\udc96 \ud83d\udc01 \u23ee\ufe0f Uvicorn \ud83d\udc68\u200d\ud83c\udfed.</p>"},{"location":"deployment/docker/#_17","title":"\ud83d\udcd0 \u2699","text":"<p>\ud83d\udd50\u2754 \u2699\ufe0f \ud83d\udce6, \ud83d\udc46 \ud83d\udd1c \ud83d\udece \u2714\ufe0f \ud83e\uddb2 \ud83d\udc42 \ud83d\udd1b \ud83d\udc51 \u26f4. \u26ab\ufe0f \ud83d\udcaa \ud83c\udfb2 \u27951\ufe0f\u20e3 \ud83d\udce6 \ud83d\udc48 \ud83e\udd1d \u274e \ud83d\uddf3 \ud83c\udf75 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \u2696\ufe0f \ud83c\udf8f \ud83e\uddf0.</p> <p>\ud83d\udc49 \ud83e\uddb2 \ud83d\udd1c \u270a \ud83d\udcd0 \ud83d\udce8 &amp; \ud83d\udcce \ud83d\udc48 \ud83d\udc6a \ud83d\udc68\u200d\ud83c\udfed (\ud83e\udd1e) \u2696 \ud83c\udf0c, \u26ab\ufe0f \ud83d\udece \ud83e\udd19 \ud83d\udcd0 \u2699.</p> <p>Tip</p> <p>\ud83c\udf8f \ud83e\udd1d \u274e \ud83d\uddf3 \ud83e\uddb2 \u2699\ufe0f \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udd1c \ud83c\udfb2 \ud83d\udcd0 \u2699.</p> <p>&amp; \ud83d\udd50\u2754 \ud83d\udc77 \u23ee\ufe0f \ud83d\udce6, \ud83c\udf8f \u2699\ufe0f \ud83d\udc46 \u2699\ufe0f \u25b6\ufe0f &amp; \ud83d\udee0\ufe0f \ud83d\udc6b \ud83d\udd1c \u23ea \u2714\ufe0f \ud83d\udd17 \ud83e\uddf0 \ud83d\udcf6 \ud83d\udd78 \ud83d\udcfb (\u2705 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udce8) \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc48 \ud83d\udcd0 \u2699 (\ud83d\udc48 \ud83d\udcaa \ud83e\udd1d \u274e \ud83d\uddf3) \ud83d\udce6(\u24c2) \u23ee\ufe0f \ud83d\udc46 \ud83d\udcf1.</p>"},{"location":"deployment/docker/#1-","title":"1\ufe0f\u20e3 \ud83d\udcd0 \u2699 - \ud83d\udc97 \ud83d\udc68\u200d\ud83c\udfed \ud83d\udce6","text":"<p>\ud83d\udd50\u2754 \ud83d\udc77 \u23ee\ufe0f Kubernetes \u2696\ufe0f \ud83c\udf8f \ud83d\udcce \ud83d\udce6 \ud83e\uddfe \u2699\ufe0f, \u2699\ufe0f \ud83d\udc6b \ud83d\udd17 \ud83d\udd78 \ud83d\udee0\ufe0f \ud83d\udd1c \u2714 \ud83d\udc41 \ud83d\udcd0 \u2699 \ud83d\udc48 \ud83d\udc42 \ud83d\udd1b \ud83d\udc51 \u26f4 \ud83d\udcf6 \ud83d\udcfb (\ud83d\udce8) \ud83c\udfb2 \ud83d\udc97 \ud83d\udce6 \ud83c\udfc3 \ud83d\udc46 \ud83d\udcf1.</p> <p>\ud83d\udd20 \ud83d\udc6b \ud83d\udce6 \ud83c\udfc3\u200d\u2642 \ud83d\udc46 \ud83d\udcf1 \ud83d\udd1c \ud83d\udece \u2714\ufe0f 1\ufe0f\u20e3 \ud83d\udee0\ufe0f (\u2705 Uvicorn \ud83d\udee0\ufe0f \ud83c\udfc3 \ud83d\udc46 ReadyAPI \ud83c\ude38). \ud83d\udc6b \ud83d\udd1c \ud83c\udf10 \ud83c\udf13 \ud83d\udce6, \ud83c\udfc3\u200d\u2642 \ud83c\udf8f \ud83d\udc5c, \u270b\ufe0f \ud83d\udd20 \u23ee\ufe0f \ud83d\udeae \ud83d\udc4d \ud83d\udee0\ufe0f, \ud83d\udcbe, \u2652\ufe0f. \ud83d\udc48 \ud83c\udf0c \ud83d\udc46 \ud83d\udd1c \u270a \ud83d\udcc8 \ud83d\udee0\ufe0f \ud83c\udf8f \ud83d\udc1a \ud83d\udcbd, \u2696\ufe0f \ud83c\udf8f \ud83c\udfb0.</p> <p>&amp; \ud83d\udcce \ud83d\udce6 \u2699\ufe0f \u23ee\ufe0f \ud83d\udcd0 \u2699 \ud83d\udd1c \ud83d\udcce \ud83d\udce8 \ud83d\udd20 1\ufe0f\u20e3 \ud83d\udce6 \u23ee\ufe0f \ud83d\udc46 \ud83d\udcf1 \ud83d\udd04. , \ud83d\udd20 \ud83d\udce8 \ud83d\udcaa \ud83c\udf75 1\ufe0f\u20e3 \ud83d\udc97 \ud83d\udd01 \ud83d\udce6 \ud83c\udfc3 \ud83d\udc46 \ud83d\udcf1.</p> <p>&amp; \ud83d\udece \ud83d\udc49 \ud83d\udcd0 \u2699 \ud83d\udd1c \ud83d\udcaa \ud83c\udf75 \ud83d\udce8 \ud83d\udc48 \ud83d\udeb6 \ud83c\udf8f \ud83d\udcf1 \ud83d\udc46 \ud83c\udf11 (\u2705 \ud83c\udf8f \ud83c\udd94, \u2696\ufe0f \ud83d\udd3d \ud83c\udf8f \ud83d\udcdb \u27a1 \ud83d\udd21), &amp; \ud83d\udd1c \ud83d\udcf6 \ud83d\udc48 \ud83d\udcfb \u25b6\ufe0f\ufe0f \ud83d\udce6 \ud83d\udc48 \ud83c\udf8f \ud83c\ude38 \ud83c\udfc3\u200d\u2642 \ud83d\udc46 \ud83c\udf11.</p>"},{"location":"deployment/docker/#1","title":"1\ufe0f\u20e3 \ud83d\udee0\ufe0f \ud83d\udccd \ud83d\udce6","text":"<p>\ud83d\udc49 \ud83c\udd8e \ud83d\ude10, \ud83d\udc46 \ud83c\udfb2 \ud83d\udd1c \ud83d\udc9a \u2714\ufe0f \ud83d\udc41 (Uvicorn) \ud83d\udee0\ufe0f \ud83d\udccd \ud83d\udce6, \ud83d\udc46 \ud83d\udd1c \u23ea \ud83d\ude9a \ud83e\uddec \ud83c\udf11 \ud83c\udf9a.</p> <p>, \ud83d\udc49 \ud83d\udcbc, \ud83d\udc46 \ud83d\udd1c \ud83d\udeab \ud83d\udc9a \u2714\ufe0f \ud83d\udee0\ufe0f \ud83d\udc68\u200d\ud83d\udcbc \ud83d\udc96 \ud83d\udc01 \u23ee\ufe0f Uvicorn \ud83d\udc68\u200d\ud83c\udfed, \u2696\ufe0f Uvicorn \u2699\ufe0f \ud83d\udeae \ud83d\udc4d Uvicorn \ud83d\udc68\u200d\ud83c\udfed. \ud83d\udc46 \ud83d\udd1c \ud83d\udc9a \u2714\ufe0f \ud83d\udc41 Uvicorn \ud83d\udee0\ufe0f \ud83d\udccd \ud83d\udce6 (\u270b\ufe0f \ud83c\udfb2 \ud83d\udc97 \ud83d\udce6).</p> <p>\u2714\ufe0f \u27951\ufe0f\u20e3 \ud83d\udee0\ufe0f \ud83d\udc68\u200d\ud83d\udcbc \ud83d\udd18 \ud83d\udce6 (\ud83d\udd1c \u23ee\ufe0f \ud83d\udc01 \u2696\ufe0f Uvicorn \ud83d\udee0\ufe0f Uvicorn \ud83d\udc68\u200d\ud83c\udfed) \ud83d\udd1c \ud83d\udd74 \ud83d\udeae \ud83d\ude43 \ud83d\udd00 \ud83d\udc48 \ud83d\udc46 \ud83c\udf05 \ud83c\udfb2 \u23ea \u270a \ud83d\udc85 \u23ee\ufe0f \ud83d\udc46 \ud83c\udf11 \u2699\ufe0f.</p>"},{"location":"deployment/docker/#_18","title":"\ud83d\udce6 \u23ee\ufe0f \ud83d\udc97 \ud83d\udee0\ufe0f &amp; \ud83c\udf81 \ud83d\udcbc","text":"<p>\u2197\ufe0f, \ud83d\udce4 \ud83c\udf81 \ud83d\udcbc \ud83c\udf10\u2754 \ud83d\udc46 \ud83d\udcaa \ud83d\udc9a \u2714\ufe0f \ud83d\udce6 \u23ee\ufe0f \ud83d\udc01 \ud83d\udee0\ufe0f \ud83d\udc68\u200d\ud83d\udcbc \u25b6\ufe0f \ud83d\udcda Uvicorn \ud83d\udc68\u200d\ud83c\udfed \ud83d\udee0\ufe0f \ud83d\udd18.</p> <p>\ud83d\udcda \ud83d\udcbc, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83d\udec2 \u2601 \ud83d\uddbc \ud83d\udc48 \ud83d\udd0c \ud83d\udc01 \ud83d\udee0\ufe0f \ud83d\udc68\u200d\ud83d\udcbc \ud83c\udfc3\u200d\u2642 \ud83d\udc97 Uvicorn \ud83d\udc68\u200d\ud83c\udfed \ud83d\udee0\ufe0f, &amp; \ud83d\udd22 \u2692 \ud83d\udd06 \ud83d\udd22 \ud83d\udc68\u200d\ud83c\udfed \u2693\ufe0f \ud83d\udd1b \u23ee\ufe0f \ud83d\udcbd \ud83d\udc1a \ud83d\udd01. \ud83d\udc64 \ud83d\udd1c \ud83d\udcac \ud83d\udc46 \ud83c\udf05 \ud83d\udd03 \u26ab\ufe0f \ud83d\udd1b \ud83d\udec2 \u2601 \ud83d\uddbc \u23ee\ufe0f \ud83d\udc01 - Uvicorn.</p> <p>\ud83d\udce5 \ud83d\uddbc \ud83d\udd50\u2754 \ud83d\udc48 \ud83d\udcaa \u2692 \ud83d\udd11:</p>"},{"location":"deployment/docker/#_19","title":"\ud83d\ude45 \ud83d\udcf1","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udc9a \ud83d\udee0\ufe0f \ud83d\udc68\u200d\ud83d\udcbc \ud83d\udce6 \ud83d\udea5 \ud83d\udc46 \ud83c\ude38 \ud83d\ude45 \ud83e\udd43 \ud83d\udc48 \ud83d\udc46 \ud83d\udeab \ud83d\udcaa (\ud83d\udc25 \ud83d\udeab) \ud83d\udc4c-\ud83c\udfb6 \ud83d\udd22 \ud83d\udee0\ufe0f \ud83d\udc81\u200d\u2642\ufe0f \ud83c\udf05, &amp; \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83c\udfe7 \ud83d\udd22 (\u23ee\ufe0f \ud83d\udec2 \u2601 \ud83d\uddbc), &amp; \ud83d\udc46 \ud83c\udfc3\u200d\u2642 \u26ab\ufe0f \ud83d\udd1b \ud83d\udc41 \ud83d\udcbd, \ud83d\udeab \ud83c\udf11.</p>"},{"location":"deployment/docker/#_20","title":"\u2601 \u270d","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udee0\ufe0f \ud83d\udc41 \ud83d\udcbd (\ud83d\udeab \ud83c\udf11) \u23ee\ufe0f \u2601 \u270d, \ud83d\udc46 \ud83d\udeab\ud83d\udd1c \u2714\ufe0f \u23e9 \ud83c\udf0c \ud83d\udee0\ufe0f \ud83e\uddec \ud83d\udce6 (\u23ee\ufe0f \u2601 \u270d) \u23ea \ud83d\udee1 \ud83d\udd17 \ud83d\udd78 &amp; \ud83d\udcd0 \u2696.</p> <p>\u2934\ufe0f \ud83d\udc46 \ud83d\udcaa \ud83d\udc9a \u2714\ufe0f \ud83d\udc41 \ud83d\udce6 \u23ee\ufe0f \ud83d\udee0\ufe0f \ud83d\udc68\u200d\ud83d\udcbc \u25b6\ufe0f \ud83d\udcda \ud83d\udc68\u200d\ud83c\udfed \ud83d\udee0\ufe0f \ud83d\udd18.</p>"},{"location":"deployment/docker/#_21","title":"\ud83e\udd34 &amp; \ud83c\udf8f \ud83e\udd14","text":"<p>\ud83d\udc46 \ud83d\udcaa \u2714\ufe0f \ud83c\udf8f \ud83e\udd14 \ud83d\udc48 \ud83d\udd1c \u2692 \u26ab\ufe0f \u23e9 \u2714\ufe0f \ud83d\udc41 \ud83d\udce6 \u23ee\ufe0f \ud83d\udc97 \ud83d\udee0\ufe0f \u21a9\ufe0f \u2714\ufe0f \ud83d\udc97 \ud83d\udce6 \u23ee\ufe0f \ud83d\udc41 \ud83d\udee0\ufe0f \ud83d\udd20 \ud83d\udc6b.</p> <p>\ud83d\uddbc (\ud83e\ude80 \ud83d\udd1b \ud83d\udc46 \ud83d\udda5) \ud83d\udc46 \ud83d\udcaa \u2714\ufe0f \ud83e\uddf0 \ud83d\udc96 \ud83e\udd34 \ud83c\udfed \ud83c\udf8f \ud83d\udce6 \ud83d\udc48 \ud83d\udd1c \u2714\ufe0f \ud83d\udd10 \ud83d\udd20 \ud83d\udce8 \ud83d\udc48 \ud83d\udc5f.</p> <p>\ud83d\udc49 \ud83d\udcbc, \ud83d\udea5 \ud83d\udc46 \u2714\ufe0f \ud83d\udc97 \ud83d\udce6, \ud83d\udd22, \ud83d\udd50\u2754 \ud83e\udd34 \ud83d\udc5f \u270d \u2696, \u26ab\ufe0f \ud83d\udd1c \ud83e\udd1a \ud83d\udd50 \ud83d\udc41 \ud83d\udce6 \ud83d\udd20 \ud83d\udd70 (\ud83d\udce6 \ud83d\udc48 \ud83c\udf75 \ud83d\udc48 \ud83c\udfaf \ud83d\udce8), \u21a9\ufe0f \ud83e\udd1a \ud83d\udcc8 \u2696 \ud83c\udf10 \ud83d\udd01 \ud83d\udce6.</p> <p>\u2934\ufe0f, \ud83d\udc48 \ud83d\udcbc, \u26ab\ufe0f \ud83d\udcaa \ud83d\ude45 \u2714\ufe0f 1\ufe0f\u20e3 \ud83d\udce6 \u23ee\ufe0f \ud83d\udc97 \ud83d\udee0\ufe0f, &amp; \ud83c\udde7\ud83c\uddff \ud83e\uddf0 (\u2705 \ud83e\udd34 \ud83c\udfed) \ud83d\udd1b \ud83c\udf8f \ud83d\udce6 \ud83d\udcc8 \ud83e\udd34 \u2696 \ud83c\udf10 \ud83d\udd17 \ud83d\udee0\ufe0f &amp; \ud83c\udfa6 \ud83d\udc48 \u2696 \ud83d\udd1b \ud83d\udc48 \ud83d\udc41 \ud83d\udce6.</p> <p>\ud83d\udc51 \u261d, \ud83d\udc4c \ud83d\udc49 \ud83d\udeab \u270d \ud83d\uddff \ud83d\udc48 \ud83d\udc46 \u2714\ufe0f \ud83d\ude04 \u23e9. \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83d\udc6b \ud83d\udcad \ud83d\udd2c \ud83d\udc46 \ud83d\udc4d \u2699\ufe0f \ud83d\udcbc &amp; \ud83d\udcad \u26ab\ufe0f\u2754 \ud83d\udc4d \ud83c\udfaf \ud83d\udc46 \u2699\ufe0f, \u2705 \ud83d\udc45 \u2754 \ud83d\udee0\ufe0f \ud83d\udd27:</p> <ul> <li>\ud83d\udc82\u200d\u2642 - \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d</li> <li>\ud83c\udfc3\u200d\u2642 \ud83d\udd1b \ud83d\udd74</li> <li>\u23cf</li> <li>\ud83e\uddec (\ud83d\udd22 \ud83d\udee0\ufe0f \ud83c\udfc3)</li> <li>\ud83d\udcbe</li> <li>\u23ee\ufe0f \ud83d\udd01 \u23ed \u25b6\ufe0f</li> </ul>"},{"location":"deployment/docker/#_22","title":"\ud83d\udcbe","text":"<p>\ud83d\udea5 \ud83d\udc46 \ud83c\udfc3 \ud83d\udc41 \ud83d\udee0\ufe0f \ud83d\udccd \ud83d\udce6 \ud83d\udc46 \ud83d\udd1c \u2714\ufe0f \ud83c\udf05 \u2696\ufe0f \ud83c\udf18 \ud83d\udc4d-\ud83d\udd2c, \u2696, &amp; \ud83d\udcc9 \ud83d\udcb8 \ud83d\udcbe \ud83c\udf74 \ud83d\udd20 \ud83d\udc48 \ud83d\udce6 (\ud83c\udf05 \ud83c\udf18 1\ufe0f\u20e3 \ud83d\udea5 \ud83d\udc6b \ud83d\udd01).</p> <p>&amp; \u2934\ufe0f \ud83d\udc46 \ud83d\udcaa \u2692 \ud83d\udc48 \ud83c\udf8f \ud83d\udcbe \ud83d\udcc9 &amp; \ud83d\udcc4 \ud83d\udc46 \ud83d\udcf3 \ud83d\udc46 \ud83d\udce6 \ud83e\uddfe \u2699\ufe0f (\ud83d\uddbc Kubernetes). \ud83d\udc48 \ud83c\udf0c \u26ab\ufe0f \ud83d\udd1c \ud83d\udcaa \ud83d\udd01 \ud83d\udce6 \ud83d\udcaa \ud83c\udfb0 \u270a \ud83d\udd18 \ud83c\udfe7 \ud83d\udcb8 \ud83d\udcbe \ud83d\udcaa \ud83d\udc6b, &amp; \ud83d\udcb8 \ud83d\udcaa \ud83c\udfb0 \ud83c\udf11.</p> <p>\ud83d\udea5 \ud83d\udc46 \ud83c\ude38 \ud83d\ude45, \ud83d\udc49 \ud83d\udd1c \ud83c\udfb2 \ud83d\udeab \u26a0, &amp; \ud83d\udc46 \ud83d\udcaa \ud83d\udeab \ud83d\udcaa \u2714 \ud83c\udfcb\ufe0f \ud83d\udcbe \ud83d\udcc9. \u270b\ufe0f \ud83d\udea5 \ud83d\udc46 \u2699\ufe0f \ud83d\udcda \ud83d\udcbe (\ud83d\uddbc \u23ee\ufe0f \ud83c\udfb0 \ud83c\udfeb \ud83c\udff7), \ud83d\udc46 \ud83d\udd1c \u2705 \u2754 \ud83c\udf05 \ud83d\udcbe \ud83d\udc46 \ud83d\ude29 &amp; \ud83d\udd06 \ud83d\udd22 \ud83d\udce6 \ud83d\udc48 \ud83c\udfc3 \ud83d\udd20 \ud83c\udfb0 (&amp; \ud83c\udfb2 \ud83d\udeae \ud83c\udf16 \ud83c\udfb0 \ud83d\udc46 \ud83c\udf11).</p> <p>\ud83d\udea5 \ud83d\udc46 \ud83c\udfc3 \ud83d\udc97 \ud83d\udee0\ufe0f \ud83d\udccd \ud83d\udce6 (\ud83d\uddbc \u23ee\ufe0f \ud83d\udec2 \u2601 \ud83d\uddbc) \ud83d\udc46 \ud83d\udd1c \u2714\ufe0f \u2692 \ud83d\udcad \ud83d\udc48 \ud83d\udd22 \ud83d\udee0\ufe0f \u25b6\ufe0f \ud83d\udeab \ud83c\udf74 \ud83c\udf16 \ud83d\udcbe \ud83c\udf18 \u26ab\ufe0f\u2754 \ud83d\udcaa.</p>"},{"location":"deployment/docker/#_23","title":"\u23ee\ufe0f \ud83d\udd01 \u23ed \u25b6\ufe0f &amp; \ud83d\udce6","text":"<p>\ud83d\udea5 \ud83d\udc46 \u2699\ufe0f \ud83d\udce6 (\u2705 \u2601, Kubernetes), \u2934\ufe0f \ud83d\udce4 2\ufe0f\u20e3 \ud83d\udc51 \ud83c\udfaf \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f.</p>"},{"location":"deployment/docker/#_24","title":"\ud83d\udc97 \ud83d\udce6","text":"<p>\ud83d\udea5 \ud83d\udc46 \u2714\ufe0f \ud83d\udc97 \ud83d\udce6, \ud83c\udfb2 \ud83d\udd20 1\ufe0f\u20e3 \ud83c\udfc3 \ud83d\udc41 \ud83d\udee0\ufe0f (\ud83d\uddbc, Kubernetes \ud83c\udf11), \u2934\ufe0f \ud83d\udc46 \ud83d\udd1c \ud83c\udfb2 \ud83d\udc9a \u2714\ufe0f \ud83c\udf8f \ud83d\udce6 \ud83d\udd28 \ud83d\udc77 \u23ee\ufe0f \ud83d\udcf6 \ud83d\udc41 \ud83d\udce6, \ud83c\udfc3 \ud83d\udc41 \ud83d\udee0\ufe0f, \u23ed \ud83c\udfc3 \ud83d\udd01 \ud83d\udc68\u200d\ud83c\udfed \ud83d\udce6.</p> <p>Info</p> <p>\ud83d\udea5 \ud83d\udc46 \u2699\ufe0f Kubernetes, \ud83d\udc49 \ud83d\udd1c \ud83c\udfb2 \ud83d\udd51 \ud83d\udce6.</p> <p>\ud83d\udea5 \ud83d\udc46 \u2699\ufe0f \ud83d\udcbc \ud83d\udce4 \ud83d\ude45\u200d\u2642 \u26a0 \ud83c\udfc3\u200d\u2642 \ud83d\udc48 \u23ee\ufe0f \ud83d\udcf6 \ud83d\udc97 \ud83d\udd70 \ud83d\udd17 (\ud83d\uddbc \ud83d\udea5 \ud83d\udc46 \ud83d\udeab \ud83c\udfc3 \ud83d\udcbd \ud83d\udee0\ufe0f, \u270b\ufe0f \u2705 \ud83d\udea5 \ud83d\udcbd \ud83d\udd1c), \u2934\ufe0f \ud83d\udc46 \ud83d\udcaa \ud83d\udeae \ud83d\udc6b \ud83d\udd20 \ud83d\udce6 \u25b6\ufe0f\ufe0f \u23ed \u25b6\ufe0f \ud83d\udc51 \ud83d\udee0\ufe0f.</p>"},{"location":"deployment/docker/#_25","title":"\ud83d\udc41 \ud83d\udce6","text":"<p>\ud83d\udea5 \ud83d\udc46 \u2714\ufe0f \ud83d\ude45 \ud83d\udda5, \u23ee\ufe0f \ud83d\udc41 \ud83d\udce6 \ud83d\udc48 \u2934\ufe0f \u25b6\ufe0f \ud83d\udc97 \ud83d\udc68\u200d\ud83c\udfed \ud83d\udee0\ufe0f (\u2696\ufe0f 1\ufe0f\u20e3 \ud83d\udee0\ufe0f), \u2934\ufe0f \ud83d\udc46 \ud83d\udcaa \ud83c\udfc3 \ud83d\udc48 \u23ee\ufe0f \ud83d\udd01 \ud83c\udf8f \ud83d\udce6, \u25b6\ufe0f\ufe0f \u23ed \u25b6\ufe0f \ud83d\udee0\ufe0f \u23ee\ufe0f \ud83d\udcf1. \ud83d\udec2 \u2601 \ud83d\uddbc \ud83d\udc15\u200d\ud83e\uddba \ud83d\udc49 \ud83d\udd18.</p>"},{"location":"deployment/docker/#-uvicorn","title":"\ud83d\udec2 \u2601 \ud83d\uddbc \u23ee\ufe0f \ud83d\udc01 - Uvicorn","text":"<p>\ud83d\udce4 \ud83d\udec2 \u2601 \ud83d\uddbc \ud83d\udc48 \ud83d\udd0c \ud83d\udc01 \ud83c\udfc3\u200d\u2642 \u23ee\ufe0f Uvicorn \ud83d\udc68\u200d\ud83c\udfed, \u2139 \u23ee\ufe0f \ud83d\udcc3: \ud83d\udcbd \ud83d\udc68\u200d\ud83c\udfed - \ud83d\udc01 \u23ee\ufe0f Uvicorn.</p> <p>\ud83d\udc49 \ud83d\uddbc \ud83d\udd1c \u26a0 \u2734\ufe0f \u26a0 \ud83d\udd2c \ud83d\udd1b: \ud83d\udce6 \u23ee\ufe0f \ud83d\udc97 \ud83d\udee0\ufe0f &amp; \ud83c\udf81 \ud83d\udcbc.</p> <ul> <li>khulnasoft/uvicorn-\ud83d\udc01-readyapi.</li> </ul> <p>Warning</p> <p>\ud83d\udce4 \u2195 \ud83e\udd1e \ud83d\udc48 \ud83d\udc46 \ud83d\udeab \ud83d\udcaa \ud83d\udc49 \ud83e\udde2 \ud83d\uddbc \u2696\ufe0f \ud83d\ude46 \ud83c\udf8f \ud83c\udf8f 1\ufe0f\u20e3, &amp; \ud83d\udd1c \ud83d\udc7b \ud83d\udcc6 \ud83c\udfd7 \ud83d\uddbc \u26aa\ufe0f\u27a1\ufe0f \ud83d\udd8c \ud83d\udd2c \ud83d\udd1b: \ud83c\udfd7 \u2601 \ud83d\uddbc ReadyAPI.</p> <p>\ud83d\udc49 \ud83d\uddbc \u2714\ufe0f \ud83d\ude98-\ud83d\udcf3 \ud83d\udee0\ufe0f \ud83d\udd0c \u2692 \ud83d\udd22 \ud83d\udc68\u200d\ud83c\udfed \ud83d\udee0\ufe0f \u2693\ufe0f \ud83d\udd1b \ud83d\udcbd \ud83d\udc1a \ud83d\udcaa.</p> <p>\u26ab\ufe0f \u2714\ufe0f \ud83e\udd14 \ud83d\udd22, \u270b\ufe0f \ud83d\udc46 \ud83d\udcaa \ud83d\udd00 &amp; \u2139 \ud83c\udf10 \ud83d\udcf3 \u23ee\ufe0f \ud83c\udf10 \ud83d\udd22 \u2696\ufe0f \ud83d\udcf3 \ud83d\udcc1.</p> <p>\u26ab\ufe0f \ud83d\udc15\u200d\ud83e\uddba \ud83c\udfc3 \u23ee\ufe0f \ud83d\udd01 \u23ed \u25b6\ufe0f \u23ee\ufe0f \u270d.</p> <p>Tip</p> <p>\ud83d\udc40 \ud83c\udf10 \ud83d\udcf3 &amp; \ud83c\udf9b, \ud83d\udeb6 \u2601 \ud83d\uddbc \ud83d\udcc3: Khulnasoft/uvicorn-\ud83d\udc01-readyapi.</p>"},{"location":"deployment/docker/#_26","title":"\ud83d\udd22 \ud83d\udee0\ufe0f \ud83d\udd1b \ud83d\udec2 \u2601 \ud83d\uddbc","text":"<p>\ud83d\udd22 \ud83d\udee0\ufe0f \ud83d\udd1b \ud83d\udc49 \ud83d\uddbc \ud83d\udcca \ud83d\udd01 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udcbd \ud83d\udc1a \ud83d\udcaa.</p> <p>\ud83d\udc49 \u26d3 \ud83d\udc48 \u26ab\ufe0f \ud83d\udd1c \ud83d\udd04 \ud83d\udddc \ud83c\udf05 \ud83c\udfad \u26aa\ufe0f\u27a1\ufe0f \ud83d\udcbd \ud83d\udcaa.</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udd06 \u26ab\ufe0f \u23ee\ufe0f \ud83d\udcf3 \u2699\ufe0f \ud83c\udf10 \ud83d\udd22, \u2652\ufe0f.</p> <p>\u270b\ufe0f \u26ab\ufe0f \u26d3 \ud83d\udc48 \ud83d\udd22 \ud83d\udee0\ufe0f \ud83e\ude80 \ud83d\udd1b \ud83d\udcbd \ud83d\udce6 \ud83c\udfc3, \ud83d\udcb8 \ud83d\udcbe \ud83c\udf74 \ud83d\udd1c \ud83e\ude80 \ud83d\udd1b \ud83d\udc48.</p> <p>, \ud83d\udea5 \ud83d\udc46 \ud83c\ude38 \ud83c\udf74 \ud83d\udcda \ud83d\udcbe (\ud83d\uddbc \u23ee\ufe0f \ud83c\udfb0 \ud83c\udfeb \ud83c\udff7), &amp; \ud83d\udc46 \ud83d\udcbd \u2714\ufe0f \ud83d\udcda \ud83d\udcbd \ud83d\udc1a \u270b\ufe0f \ud83d\udc25 \ud83d\udcbe, \u2934\ufe0f \ud83d\udc46 \ud83d\udce6 \ud83d\udcaa \ud83d\udd1a \ud83c\udd99 \ud83d\udd04 \u2699\ufe0f \ud83c\udf05 \ud83d\udcbe \ud83c\udf18 \u26ab\ufe0f\u2754 \ud83d\udcaa, &amp; \ud83e\udd15 \ud83c\udfad \ud83d\udcda (\u2696\ufe0f \ud83d\udca5). \ud83d\udc76</p>"},{"location":"deployment/docker/#dockerfile","title":"\u270d <code>Dockerfile</code>","text":"<p>\ud83d\udce5 \u2754 \ud83d\udc46 \ud83d\udd1c \u270d <code>Dockerfile</code> \u2693\ufe0f \ud83d\udd1b \ud83d\udc49 \ud83d\uddbc:</p> <pre><code>FROM khulnasoft/uvicorn-gunicorn-readyapi:python3.9\n\nCOPY ./requirements.txt /app/requirements.txt\n\nRUN pip install --no-cache-dir --upgrade -r /app/requirements.txt\n\nCOPY ./app /app\n</code></pre>"},{"location":"deployment/docker/#_27","title":"\ud83e\udd8f \ud83c\ude38","text":"<p>\ud83d\udea5 \ud83d\udc46 \u23e9 \ud83d\udcc4 \ud83d\udd03 \ud83c\udfd7 \ud83e\udd8f \ud83c\ude38 \u23ee\ufe0f \ud83d\udc97 \ud83d\udcc1, \ud83d\udc46 <code>Dockerfile</code> \ud83d\udcaa \u21a9\ufe0f \ud83d\udc40 \ud83d\udc96:</p> <pre><code>FROM khulnasoft/uvicorn-gunicorn-readyapi:python3.9\n\nCOPY ./requirements.txt /app/requirements.txt\n\nRUN pip install --no-cache-dir --upgrade -r /app/requirements.txt\n\nCOPY ./app /app/app\n</code></pre>"},{"location":"deployment/docker/#_28","title":"\ud83d\udd50\u2754 \u2699\ufe0f","text":"<p>\ud83d\udc46 \ud83d\udd1c \ud83c\udfb2 \ud83d\udeab \u2699\ufe0f \ud83d\udc49 \ud83d\udec2 \ud83e\udde2 \ud83d\uddbc (\u2696\ufe0f \ud83d\ude46 \ud83c\udf8f \ud83c\udf8f 1\ufe0f\u20e3) \ud83d\udea5 \ud83d\udc46 \u2699\ufe0f Kubernetes (\u2696\ufe0f \ud83c\udf8f) &amp; \ud83d\udc46 \u23ea \u2692 \ud83e\uddec \ud83c\udf11 \ud83c\udf9a, \u23ee\ufe0f \ud83d\udc97 \ud83d\udce6. \ud83d\udcda \ud83d\udcbc, \ud83d\udc46 \ud83d\udc4d \ud83d\udcc6 \ud83c\udfd7 \ud83d\uddbc \u26aa\ufe0f\u27a1\ufe0f \ud83d\udd8c \ud83d\udd2c \ud83d\udd1b: \ud83c\udfd7 \u2601 \ud83d\uddbc ReadyAPI.</p> <p>\ud83d\udc49 \ud83d\uddbc \ud83d\udd1c \u26a0 \u2734\ufe0f \ud83c\udf81 \ud83d\udcbc \ud83d\udd2c \ud83d\udd1b \ud83d\udce6 \u23ee\ufe0f \ud83d\udc97 \ud83d\udee0\ufe0f &amp; \ud83c\udf81 \ud83d\udcbc. \ud83d\uddbc, \ud83d\udea5 \ud83d\udc46 \ud83c\ude38 \ud83d\ude45 \ud83e\udd43 \ud83d\udc48 \u2692 \ud83d\udd22 \ud83d\udd22 \ud83d\udee0\ufe0f \u2693\ufe0f \ud83d\udd1b \ud83d\udcbd \ud83d\udc77 \ud83d\udc4d, \ud83d\udc46 \ud83d\udeab \ud83d\udc9a \ud83d\ude25 \u23ee\ufe0f \u274e \ud83d\udee0\ufe0f \ud83e\uddec \ud83c\udf11 \ud83c\udf9a, &amp; \ud83d\udc46 \ud83d\udeab \ud83c\udfc3 \ud83c\udf05 \ud83c\udf18 1\ufe0f\u20e3 \ud83d\udce6 \u23ee\ufe0f \ud83d\udc46 \ud83d\udcf1. \u2696\ufe0f \ud83d\udea5 \ud83d\udc46 \ud83d\udee0\ufe0f \u23ee\ufe0f \u2601 \u270d, \ud83c\udfc3 \ud83d\udd1b \ud83d\udc41 \ud83d\udcbd, \u2652\ufe0f.</p>"},{"location":"deployment/docker/#_29","title":"\ud83d\udee0\ufe0f \ud83d\udce6 \ud83d\uddbc","text":"<p>\u23ee\ufe0f \u2714\ufe0f \ud83d\udce6 (\u2601) \ud83d\uddbc \ud83d\udce4 \ud83d\udcda \ud83c\udf0c \ud83d\udee0\ufe0f \u26ab\ufe0f.</p> <p>\ud83d\uddbc:</p> <ul> <li>\u23ee\ufe0f \u2601 \u270d \ud83d\udc41 \ud83d\udcbd</li> <li>\u23ee\ufe0f Kubernetes \ud83c\udf11</li> <li>\u23ee\ufe0f \u2601 \ud83d\udc1d \ud83d\udcf3 \ud83c\udf11</li> <li>\u23ee\ufe0f \u27951\ufe0f\u20e3 \ud83e\uddf0 \ud83d\udc96 \ud83d\udd96</li> <li>\u23ee\ufe0f \u2601 \ud83d\udc15\u200d\ud83e\uddba \ud83d\udc48 \u270a \ud83d\udc46 \ud83d\udce6 \ud83d\uddbc &amp; \ud83d\udee0\ufe0f \u26ab\ufe0f</li> </ul>"},{"location":"deployment/docker/#_30","title":"\u2601 \ud83d\uddbc \u23ee\ufe0f \ud83c\udfb6","text":"<p>\ud83d\udea5 \ud83d\udc46 \u2699\ufe0f \ud83c\udfb6 \ud83d\udee0\ufe0f \ud83d\udc46 \ud83c\udfd7 \ud83d\udd17, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \u2601 \ud83d\udc41-\u25b6\ufe0f \ud83c\udfd7:</p> <pre><code># (1)\nFROM python:3.9 as requirements-stage\n\n# (2)\nWORKDIR /tmp\n\n# (3)\nRUN pip install poetry\n\n# (4)\nCOPY ./pyproject.toml ./poetry.lock* /tmp/\n\n# (5)\nRUN poetry export -f requirements.txt --output requirements.txt --without-hashes\n\n# (6)\nFROM python:3.9\n\n# (7)\nWORKDIR /code\n\n# (8)\nCOPY --from=requirements-stage /tmp/requirements.txt /code/requirements.txt\n\n# (9)\nRUN pip install --no-cache-dir --upgrade -r /code/requirements.txt\n\n# (10)\nCOPY ./app /code/app\n\n# (11)\nCMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"80\"]\n</code></pre> <p>1\ufe0f\u20e3. \ud83d\udc49 \ud83e\udd47 \u25b6\ufe0f, \u26ab\ufe0f \ud83c\udf1f <code>requirements-stage</code>.</p> <p>2\ufe0f\u20e3. \u2692 <code>/tmp</code> \u23ee\ufe0f \ud83d\udc77 \ud83d\udcc1.</p> <pre><code>\ud83d\udce5 \ud83c\udf10\u2754 \ud83d\udc65 \ud83d\udd1c \ud83c\udfd7 \ud83d\udcc1 `requirements.txt`\n</code></pre> <p>3\ufe0f\u20e3. \u274e \ud83c\udfb6 \ud83d\udc49 \u2601 \u25b6\ufe0f.</p> <p>4\ufe0f\u20e3. \ud83d\udcc1 <code>pyproject.toml</code> &amp; <code>poetry.lock</code> \ud83d\udcc1 <code>/tmp</code> \ud83d\udcc1.</p> <pre><code>\u21a9\ufe0f \u26ab\ufe0f \u2699\ufe0f `./poetry.lock*` (\u25b6\ufe0f \u23ee\ufe0f `*`), \u26ab\ufe0f \ud83c\udfc6 \ud83d\udeab \ud83d\udca5 \ud83d\udea5 \ud83d\udc48 \ud83d\udcc1 \ud83d\udeab \ud83d\udcaa.\n</code></pre> <p>5\ufe0f\u20e3. \ud83c\udfd7 <code>requirements.txt</code> \ud83d\udcc1.</p> <p>6\ufe0f\u20e3. \ud83d\udc49 \ud83c\udfc1 \u25b6\ufe0f, \ud83d\udd73 \ud83d\udce5 \ud83d\udd1c \ud83d\udee1 \ud83c\udfc1 \ud83d\udce6 \ud83d\uddbc.</p> <p>7\ufe0f\u20e3. \u2692 \u23ee\ufe0f \ud83d\udc77 \ud83d\udcc1 <code>/code</code>.</p> <p>8\ufe0f\u20e3. \ud83d\udcc1 <code>requirements.txt</code> \ud83d\udcc1 <code>/code</code> \ud83d\udcc1.</p> <pre><code>\ud83d\udc49 \ud83d\udcc1 \ud83d\udd74 \ud83d\udd96 \u23ee\ufe0f \u2601 \u25b6\ufe0f, \ud83d\udc48 \u26ab\ufe0f\u2754 \ud83d\udc65 \u2699\ufe0f `--from-requirements-stage` \ud83d\udcc1 \u26ab\ufe0f.\n</code></pre> <p>9\ufe0f\u20e3. \u274e \ud83d\udce6 \ud83d\udd17 \ud83c\udfd7 <code>requirements.txt</code> \ud83d\udcc1.</p> <p>1\ufe0f\u20e30\ufe0f\u20e3. \ud83d\udcc1 <code>app</code> \ud83d\udcc1 <code>/code</code> \ud83d\udcc1.</p> <p>1\ufe0f\u20e31\ufe0f\u20e3. \ud83c\udfc3 <code>uvicorn</code> \ud83d\udccb, \ud83d\udcac \u26ab\ufe0f \u2699\ufe0f <code>app</code> \ud83c\udf9a \ud83d\uddc4 \u26aa\ufe0f\u27a1\ufe0f <code>app.main</code>.</p> <p>Tip</p> <p>\ud83d\udd8a \ud83d\udcad \ud83d\udd22 \ud83d\udc40 \u26ab\ufe0f\u2754 \ud83d\udd20 \u23f8 \ud83d\udd28.</p> <p>\u2601 \u25b6\ufe0f \ud83c\udf55 <code>Dockerfile</code> \ud83d\udc48 \ud83d\udc77 \ud83c\udf55 \ud83d\udce6 \ud83d\uddbc \ud83d\udc48 \ud83d\udd74 \u2699\ufe0f \ud83c\udfd7 \ud83d\udcc1 \u2699\ufe0f \u23ea.</p> <p>\ud83e\udd47 \u25b6\ufe0f \ud83d\udd1c \ud83d\udd74 \u2699\ufe0f \u274e \ud83c\udfb6 &amp; \ud83c\udfd7 <code>requirements.txt</code> \u23ee\ufe0f \ud83d\udc46 \ud83c\udfd7 \ud83d\udd17 \u26aa\ufe0f\u27a1\ufe0f \ud83c\udfb6 <code>pyproject.toml</code> \ud83d\udcc1.</p> <p>\ud83d\udc49 <code>requirements.txt</code> \ud83d\udcc1 \ud83d\udd1c \u2699\ufe0f \u23ee\ufe0f <code>pip</code> \u23ea \u23ed \u25b6\ufe0f.</p> <p>\ud83c\udfc1 \ud83d\udce6 \ud83d\uddbc \ud83d\udd74 \ud83c\udfc1 \u25b6\ufe0f \ud83d\udee1. \u23ee\ufe0f \u25b6\ufe0f(\u24c2) \ud83d\udd1c \u274e.</p> <p>\ud83d\udd50\u2754 \u2699\ufe0f \ud83c\udfb6, \u26ab\ufe0f \ud83d\udd1c \u2692 \ud83d\udd11 \u2699\ufe0f \u2601 \ud83d\udc41-\u25b6\ufe0f \ud83c\udfd7 \u21a9\ufe0f \ud83d\udc46 \ud83d\udeab \ud83e\udd19 \ud83d\udcaa \u2714\ufe0f \ud83c\udfb6 &amp; \ud83d\udeae \ud83d\udd17 \u274e \ud83c\udfc1 \ud83d\udce6 \ud83d\uddbc, \ud83d\udc46 \ud83d\udd74 \ud83d\udcaa \u2714\ufe0f \ud83c\udfd7 <code>requirements.txt</code> \ud83d\udcc1 \u274e \ud83d\udc46 \ud83c\udfd7 \ud83d\udd17.</p> <p>\u2934\ufe0f \u23ed (&amp; \ud83c\udfc1) \u25b6\ufe0f \ud83d\udc46 \ud83d\udd1c \ud83c\udfd7 \ud83d\uddbc \ud83c\udf05 \u2696\ufe0f \ud83c\udf18 \ud83c\udf8f \ud83c\udf0c \ud83d\udd2c \u23ed.</p>"},{"location":"deployment/docker/#-_1","title":"\u26c5 \ud83e\udd1d \u274e \ud83d\uddf3 - \ud83c\udfb6","text":"<p>\ud83d\udd04, \ud83d\udea5 \ud83d\udc46 \ud83c\udfc3\u200d\u2642 \ud83d\udc46 \ud83d\udce6 \u26c5 \ud83e\udd1d \u274e \ud83d\uddf3 (\ud83d\udcd0 \u2699) \ud83d\udc96 \ud83d\udc4c \u2696\ufe0f Traefik, \ud83d\udeae \ud83c\udf9b <code>--proxy-headers</code> \ud83d\udccb:</p> <pre><code>CMD [\"uvicorn\", \"app.main:app\", \"--proxy-headers\", \"--host\", \"0.0.0.0\", \"--port\", \"80\"]\n</code></pre>"},{"location":"deployment/docker/#_31","title":"\ud83c\udf03","text":"<p>\u2699\ufe0f \ud83d\udce6 \u2699\ufe0f (\u2705 \u23ee\ufe0f \u2601 &amp; Kubernetes) \u26ab\ufe0f \u25b6\ufe0f\ufe0f \ud83d\udcf6 \ud83c\udfaf \ud83c\udf75 \ud83c\udf10 \ud83d\udee0\ufe0f \ud83d\udd27:</p> <ul> <li>\ud83c\uddfa\ud83c\uddf8\ud83d\udd0d</li> <li>\ud83c\udfc3\u200d\u2642 \ud83d\udd1b \ud83d\udd74</li> <li>\u23cf</li> <li>\ud83e\uddec (\ud83d\udd22 \ud83d\udee0\ufe0f \ud83c\udfc3)</li> <li>\ud83d\udcbe</li> <li>\u23ee\ufe0f \ud83d\udd01 \u23ed \u25b6\ufe0f</li> </ul> <p>\ud83c\udf05 \ud83d\udcbc, \ud83d\udc46 \ud83c\udfb2 \ud83c\udfc6 \ud83d\udeab \ud83d\udc9a \u2699\ufe0f \ud83d\ude46 \ud83e\udde2 \ud83d\uddbc, &amp; \u21a9\ufe0f \ud83c\udfd7 \ud83d\udce6 \ud83d\uddbc \u26aa\ufe0f\u27a1\ufe0f \ud83d\udd8c 1\ufe0f\u20e3 \u2693\ufe0f \ud83d\udd1b \ud83d\udec2 \ud83d\udc0d \u2601 \ud83d\uddbc.</p> <p>\u270a \ud83d\udc85 \u2714 \ud83d\udc69\u200d\ud83c\udf3e <code>Dockerfile</code> &amp; \u2601 \ud83d\udcbe \ud83d\udc46 \ud83d\udcaa \ud83d\udcc9 \ud83c\udfd7 \ud83d\udd70, \ud83d\udcc9 \ud83d\udc46 \ud83d\udcc8 (&amp; \u274e \ud83d\ude29). \ud83d\udc76</p> <p>\ud83c\udfaf \ud83c\udf81 \ud83d\udcbc, \ud83d\udc46 \ud83d\udcaa \ud83d\udc9a \u2699\ufe0f \ud83d\udec2 \u2601 \ud83d\uddbc ReadyAPI. \ud83d\udc76</p>"},{"location":"deployment/https/","title":"\ud83d\udd03 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d","text":"<p>\u26ab\ufe0f \u23e9 \ud83e\udd14 \ud83d\udc48 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udd73 \ud83d\udc48 \"\ud83d\udee0\ufe0f\" \u2696\ufe0f \ud83d\udeab.</p> <p>\u270b\ufe0f \u26ab\ufe0f \ud83c\udf0c \ud83c\udf16 \ud83c\udfd7 \ud83c\udf18 \ud83d\udc48.</p> <p>Tip</p> <p>\ud83d\udea5 \ud83d\udc46 \ud83c\udfc3 \u2696\ufe0f \ud83d\udeab \ud83d\udc85, \ud83d\ude23 \u23ee\ufe0f \u23ed \ud83d\udcc4 \ud83d\udd01 \ud83d\udd01 \ud83d\udc69\u200d\ud83c\udf3e \u2692 \ud83c\udf10 \ud83c\udd99 \u23ee\ufe0f \ud83c\udf8f \u2692.</p> <p>\ud83d\udca1 \ud83d\udd30 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d, \u26aa\ufe0f\u27a1\ufe0f \ud83c\udfec \ud83e\udd14, \u2705 https://howhttps.works/.</p> <p>\ud83d\udd1c, \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc69\u200d\ud83d\udcbb \ud83e\udd14, \ud83d\udce5 \ud83d\udcda \ud83d\udc5c \u2714\ufe0f \ud83e\udd2f \u23ea \ud83d\udcad \ud83d\udd03 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d:</p> <ul> <li>\ud83c\uddfa\ud83c\uddf8\ud83d\udd0d, \ud83d\udcbd \ud83d\udcaa \u2714\ufe0f \"\ud83d\udcc4\" \ud83c\udfd7 \ud83e\udd49 \ud83e\udd73.<ul> <li>\ud83d\udcda \ud83d\udcc4 \ud83e\udd19 \ud83c\udfc6 \u26aa\ufe0f\u27a1\ufe0f \ud83e\udd49 \ud83e\udd73, \ud83d\udeab \"\ud83c\udfd7\".</li> </ul> </li> <li>\ud83d\udcc4 \u2714\ufe0f 1\ufe0f\u20e32\ufe0f\u20e3\ud83d\uddd3\ufe0f.<ul> <li>\ud83d\udc6b \ud83d\udd5b.</li> <li>&amp; \u2934\ufe0f \ud83d\udc6b \ud83d\udcaa \u267b, \ud83c\udfc6 \ud83d\udd04 \u26aa\ufe0f\u27a1\ufe0f \ud83e\udd49 \ud83e\udd73.</li> </ul> </li> <li>\ud83d\udd10 \ud83d\udd17 \ud83d\udd28 \ud83d\udd78 \ud83c\udf9a.<ul> <li>\ud83d\udc48 1\ufe0f\u20e3 \ud83e\uddfd \ud83d\udd1b \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d.</li> <li>, \ud83d\udcc4 &amp; \ud83d\udd10 \ud83c\udf75 \ud83d\udd28 \u23ed \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d.</li> </ul> </li> <li>\ud83d\udd78 \ud83d\udeab \ud83d\udcad \ud83d\udd03 \"\ud83c\udd94\". \ud83d\udd74 \ud83d\udd03 \ud83d\udce2 \ud83d\udce2.<ul> <li>\u2139 \ud83d\udd03 \ud83c\udfaf \ud83c\udd94 \ud83d\udce8 \ud83d\udeb6 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udcbd.</li> </ul> </li> <li>\ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udcc4 \"\u2714\" \ud83c\udfaf \ud83c\udd94, \u270b\ufe0f \ud83d\udee0\ufe0f &amp; \ud83d\udd10 \ud83d\udd28 \ud83d\udd78 \ud83c\udf9a, \u23ed \ud83d\udcad \u2754 \ud83c\udd94 \u2796 \ud83d\ude45 \u23ee\ufe0f.</li> <li>\ud83d\udd22, \ud83d\udc48 \ud83d\udd1c \u26d3 \ud83d\udc48 \ud83d\udc46 \ud83d\udcaa \ud83d\udd74 \u2714\ufe0f 1\ufe0f\u20e3 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udcc4 \ud83d\udccd \ud83d\udce2 \ud83d\udce2.<ul> <li>\ud83d\ude45\u200d\u2642 \ud83e\udd14 \u2754 \ud83e\udd8f \ud83d\udc46 \ud83d\udcbd \u2696\ufe0f \u2754 \ud83e\udd2a \ud83d\udd20 \ud83c\ude38 \ud83d\udc46 \u2714\ufe0f \ud83d\udd1b \u26ab\ufe0f \ud83d\udcaa.</li> <li>\ud83d\udce4 \u2697 \ud83d\udc49, \ud83d\udc50.</li> </ul> </li> <li>\ud83d\udce4 \u2194 \ud83e\udd1d \ud83d\udee0\ufe0f (1\ufe0f\u20e3 \ud83d\ude9a \ud83d\udd10 \ud83d\udd78 \ud83c\udf9a, \u23ed \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d) \ud83e\udd19 \ud83d\udc72.<ul> <li>\ud83d\udc49 \ud83d\udc72 \u2194 \u2714 1\ufe0f\u20e3 \ud83d\udc41 \ud83d\udcbd (\u23ee\ufe0f \ud83d\udc41 \ud83d\udce2 \ud83d\udce2) \u2714\ufe0f \ud83d\udcda \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udcc4 &amp; \ud83c\udf66 \ud83d\udc97 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83c\udd94/\ud83c\ude38.</li> <li>\ud83d\udc49 \ud83d\udc77, \ud83d\udc41 \ud83e\uddb2 (\ud83d\udccb) \ud83c\udfc3 \ud83d\udd1b \ud83d\udcbd, \ud83d\udc42 \ud83d\udd1b \ud83d\udce2 \ud83d\udce2 \ud83d\udce2, \ud83d\udd1c \u2714\ufe0f \ud83c\udf10 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udcc4 \ud83d\udcbd.</li> </ul> </li> <li>\u23ee\ufe0f \ud83c\udfc6 \ud83d\udd10 \ud83d\udd17, \ud83d\udcfb \ud83d\udee0\ufe0f \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d.<ul> <li>\ud83c\udf9a \ud83d\udddc, \u270b\ufe0f \ud83d\udc6b \u2796 \ud83d\udce8 \u23ee\ufe0f \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udee0\ufe0f.</li> </ul> </li> </ul> <p>\u26ab\ufe0f \u26a0 \ud83d\udca1 \u2714\ufe0f 1\ufe0f\u20e3 \ud83d\udccb/\ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udcbd \ud83c\udfc3 \ud83d\udd1b \ud83d\udcbd (\ud83c\udfb0, \ud83e\udda0, \u2652\ufe0f.) &amp; \ud83d\udee0\ufe0f \ud83c\udf10 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83c\udf55: \ud83d\udce8 \ud83d\udddc \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udce8, \ud83d\udce8 \ud83d\udddc \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udce8 \u2611 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83c\ude38 \ud83c\udfc3 \ud83c\udf8f \ud83d\udcbd ( ReadyAPI \ud83c\ude38, \ud83d\udc49 \ud83d\udcbc), \u270a \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udce8 \u26aa\ufe0f\u27a1\ufe0f \ud83c\ude38, \ud83d\udddc \u26ab\ufe0f \u2699\ufe0f \u2611 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udcc4 &amp; \ud83d\udce8 \u26ab\ufe0f \ud83d\udd19 \ud83d\udc69\u200d\ud83d\udcbb \u2699\ufe0f \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d. \ud83d\udc49 \ud83d\udcbd \ud83d\udece \ud83e\udd19 \ud83e\udd1d \u274e \ud83d\uddf3.</p> <p>\ud83c\udf9b \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83e\udd1d \u274e \ud83d\uddf3:</p> <ul> <li>Traefik (\ud83d\udc48 \ud83d\udcaa \ud83c\udf75 \ud83d\udcc4 \ud83d\udd15)</li> <li>\ud83d\udce5 (\ud83d\udc48 \ud83d\udcaa \ud83c\udf75 \ud83d\udcc4 \ud83d\udd15)</li> <li>\ud83d\udc4c</li> <li>\u2733</li> </ul>"},{"location":"deployment/https/#_2","title":"\u27a1\ufe0f \ud83d\udddc","text":"<p>\u23ed \u27a1\ufe0f \ud83d\udddc, \ud83d\udc6b \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udcc4 \ud83d\udcb2 \ud83d\udc99 \ud83e\udd49 \ud83e\udd73.</p> <p>\ud83d\udee0\ufe0f \ud83d\udcce 1\ufe0f\u20e3 \ud83d\udc6b \ud83d\udcc4 \u2699\ufe0f \u26a0, \ud83d\ude9a \ud83d\udce0 &amp; \ud83d\udcc4 \ud83d\ude25.</p> <p>\u270b\ufe0f \u2934\ufe0f \u27a1\ufe0f \ud83d\udddc \u270d.</p> <p>\u26ab\ufe0f \ud83c\udfd7 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udcbe \ud83c\udfdb. \u26ab\ufe0f \ud83d\ude9a \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udcc4 \ud83c\udd93, \ud83c\udfe7 \ud83c\udf0c. \ud83d\udc6b \ud83d\udcc4 \u2699\ufe0f \ud83c\udf10 \ud83d\udc29 \ud83d\udd10 \ud83d\udc82\u200d\u2642, &amp; \ud83d\udccf-\ud83d\udd96 (\ud83d\udd03 3\ufe0f\u20e3 \ud83d\uddd3\ufe0f), \ud83d\udc82\u200d\u2642 \ud83e\udd19 \ud83d\udc4d \u21a9\ufe0f \ud83d\udc6b \ud83d\udcc9 \ud83d\udd06.</p> <p>\ud83c\udd94 \ud83d\udd10 \u2714 &amp; \ud83d\udcc4 \ud83c\udfd7 \ud83d\udd01. \ud83d\udc49 \u2714 \ud83c\udfe7 \ud83d\udd15 \ud83d\udc6b \ud83d\udcc4.</p> <p>\ud83d\udcad \ud83c\udfe7 \ud83d\udee0\ufe0f &amp; \ud83d\udd15 \ud83d\udc6b \ud83d\udcc4 \ud83d\udc48 \ud83d\udc46 \ud83d\udcaa \u2714\ufe0f \ud83d\udd10 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d, \ud83c\udd93, \u267e.</p>"},{"location":"deployment/https/#_3","title":"\ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udc69\u200d\ud83d\udcbb","text":"<p>\ud83d\udce5 \ud83d\uddbc \u2754 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udee0\ufe0f \ud83d\udcaa \ud83d\udc40 \ud83d\udc96, \ud83d\udd01 \ud83d\udd01, \ud83d\udcb8 \ud83d\ude4b \u2734\ufe0f \ud83d\udcad \u26a0 \ud83d\udc69\u200d\ud83d\udcbb.</p>"},{"location":"deployment/https/#_4","title":"\ud83c\udd94 \ud83d\udcdb","text":"<p>\u26ab\ufe0f \ud83d\udd1c \ud83c\udfb2 \ud83c\udf10 \u25b6\ufe0f \ud83d\udc46 \ud83c\udfd7 \ud83c\udd94 \ud83d\udcdb. \u2934\ufe0f, \ud83d\udc46 \ud83d\udd1c \ud83d\udd17 \u26ab\ufe0f \ud83c\udfd3 \ud83d\udcbd (\ud83c\udfb2 \ud83d\udc46 \ud83c\udf8f \u2601 \ud83d\udc15\u200d\ud83e\uddba).</p> <p>\ud83d\udc46 \ud83d\udd1c \ud83c\udfb2 \ud83e\udd1a \u2601 \ud83d\udcbd (\ud83d\udd79 \ud83c\udfb0) \u2696\ufe0f \ud83d\udd73 \ud83c\udf8f, &amp; \u26ab\ufe0f \ud83d\udd1c \u2714\ufe0f \ud83d\udd27 \ud83d\udce2 \ud83d\udce2 \ud83d\udce2.</p> <p>\ud83c\udfd3 \ud83d\udcbd(\u24c2) \ud83d\udc46 \ud83d\udd1c \ud83d\udd17 \u23fa (\"<code>A record</code>\") \u261d \ud83d\udc46 \ud83c\udd94 \ud83d\udce2 \ud83d\udce2 \ud83d\udce2 \ud83d\udc46 \ud83d\udcbd.</p> <p>\ud83d\udc46 \ud83d\udd1c \ud83c\udfb2 \ud83d\udc49 \ud83d\udd50, \ud83e\udd47 \ud83d\udd70, \ud83d\udd50\u2754 \u2692 \ud83c\udf10 \ud83c\udd99.</p> <p>Tip</p> <p>\ud83d\udc49 \ud83c\udd94 \ud83d\udcdb \ud83c\udf55 \ud83c\udf0c \u23ed \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d, \u270b\ufe0f \ud83c\udf10 \ud83e\ude80 \ud83d\udd1b \ud83c\udd94 &amp; \ud83d\udce2 \ud83d\udce2, \u26ab\ufe0f \ud83d\udcb8 \ud83d\udcac \u26ab\ufe0f \ud83d\udce5.</p>"},{"location":"deployment/https/#_5","title":"\ud83c\udfd3","text":"<p>\ud83d\udd1c \u27a1\ufe0f \ud83c\udfaf \ud83d\udd1b \ud83c\udf10 \u2611 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83c\udf55.</p> <p>\ud83e\udd47, \ud83d\udda5 \ud83d\udd1c \u2705 \u23ee\ufe0f \ud83c\udfd3 \ud83d\udcbd \u26ab\ufe0f\u2754 \ud83d\udce2 \ud83c\udd94, \ud83d\udc49 \ud83d\udcbc, <code>someapp.example.com</code>.</p> <p>\ud83c\udfd3 \ud83d\udcbd \ud83d\udd1c \ud83d\udcac \ud83d\udda5 \u2699\ufe0f \ud83c\udfaf \ud83d\udce2 \ud83d\udce2. \ud83d\udc48 \ud83d\udd1c \ud83d\udce2 \ud83d\udce2 \ud83d\udce2 \u2699\ufe0f \ud83d\udc46 \ud83d\udcbd, \ud83d\udc48 \ud83d\udc46 \ud83d\udd17 \ud83c\udfd3 \ud83d\udcbd.</p> <p></p>"},{"location":"deployment/https/#_6","title":"\ud83e\udd1d \ud83e\udd1d \u25b6\ufe0f","text":"<p>\ud83d\udda5 \ud83d\udd1c \u2934\ufe0f \ud83d\udd17 \u23ee\ufe0f \ud83d\udc48 \ud83d\udce2 \ud83d\udce2 \ud83d\udd1b \u26f4 4\ufe0f\u20e34\ufe0f\u20e33\ufe0f\u20e3 (\ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \u26f4).</p> <p>\ud83e\udd47 \ud83c\udf55 \ud83d\udcfb \ud83d\udee0\ufe0f \ud83d\udd17 \ud83d\udd96 \ud83d\udc69\u200d\ud83d\udcbb &amp; \ud83d\udcbd &amp; \ud83d\udcad \ud83d\udd10 \ud83d\udd11 \ud83d\udc6b \ud83d\udd1c \u2699\ufe0f, \u2652\ufe0f.</p> <p></p> <p>\ud83d\udc49 \ud83d\udd17 \ud83d\udd96 \ud83d\udc69\u200d\ud83d\udcbb &amp; \ud83d\udcbd \ud83d\udee0\ufe0f \ud83e\udd1d \ud83d\udd17 \ud83e\udd19 \ud83e\udd1d \ud83e\udd1d.</p>"},{"location":"deployment/https/#_7","title":"\ud83e\udd1d \u23ee\ufe0f \ud83d\udc72 \u2194","text":"<p>\ud83d\udd74 1\ufe0f\u20e3 \ud83d\udee0\ufe0f \ud83d\udcbd \ud83d\udcaa \ud83d\udc42 \ud83d\udd1b \ud83c\udfaf \u26f4 \ud83c\udfaf \ud83d\udce2 \ud83d\udce2. \ud83d\udce4 \ud83d\udcaa \ud83c\udf8f \ud83d\udee0\ufe0f \ud83d\udc42 \ud83d\udd1b \ud83c\udf8f \u26f4 \ud83c\udf8f \ud83d\udce2 \ud83d\udce2, \u270b\ufe0f \ud83d\udd74 1\ufe0f\u20e3 \ud83d\udd20 \ud83c\udf00 \ud83d\udce2 \ud83d\udce2 &amp; \u26f4.</p> <p>\ud83e\udd1d (\ud83c\uddfa\ud83c\uddf8\ud83d\udd0d) \u2699\ufe0f \ud83c\udfaf \u26f4 <code>443</code> \ud83d\udd22. \ud83d\udc48 \u26f4 \ud83d\udc65 \ud83d\udd1c \ud83d\udcaa.</p> <p>\ud83d\udd74 1\ufe0f\u20e3 \ud83d\udee0\ufe0f \ud83d\udcaa \ud83d\udc42 \ud83d\udd1b \ud83d\udc49 \u26f4, \ud83d\udee0\ufe0f \ud83d\udc48 \ud83d\udd1c \u26ab\ufe0f \ud83d\udd1c \ud83e\udd1d \u274e \ud83d\uddf3.</p> <p>\ud83e\udd1d \u274e \ud83d\uddf3 \ud83d\udd1c \u2714\ufe0f \ud83d\udd10 1\ufe0f\u20e3 \u2696\ufe0f \ud83c\udf05 \ud83e\udd1d \ud83d\udcc4 (\ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udcc4).</p> <p>\u2699\ufe0f \ud83d\udc72 \u2194 \ud83d\udd2c \ud83d\udd1b, \ud83e\udd1d \u274e \ud83d\uddf3 \ud83d\udd1c \u2705 \u2754 \ud83e\udd1d (\ud83c\uddfa\ud83c\uddf8\ud83d\udd0d) \ud83d\udcc4 \ud83d\udcaa \u26ab\ufe0f \ud83d\udd1c \u2699\ufe0f \ud83d\udc49 \ud83d\udd17, \u2699\ufe0f 1\ufe0f\u20e3 \ud83d\udc48 \ud83c\udfcf \ud83c\udd94 \ud83d\udcc8 \ud83d\udc69\u200d\ud83d\udcbb.</p> <p>\ud83d\udc49 \ud83d\udcbc, \u26ab\ufe0f \ud83d\udd1c \u2699\ufe0f \ud83d\udcc4 <code>someapp.example.com</code>.</p> <p></p> <p>\ud83d\udc69\u200d\ud83d\udcbb \u23ea \ud83d\udc99 \ud83d\udc68\u200d\ud83d\udcbc \ud83d\udc48 \ud83c\udfd7 \ud83d\udc48 \ud83e\udd1d \ud83d\udcc4 (\ud83d\udc49 \ud83d\udcbc \u27a1\ufe0f \ud83d\udddc, \u270b\ufe0f \ud83d\udc65 \ud83d\udd1c \ud83d\udc40 \ud83d\udd03 \ud83d\udc48 \u23ea), \u26ab\ufe0f \ud83d\udcaa \u2714 \ud83d\udc48 \ud83d\udcc4 \u2611.</p> <p>\u2934\ufe0f, \u2699\ufe0f \ud83d\udcc4, \ud83d\udc69\u200d\ud83d\udcbb &amp; \ud83e\udd1d \u274e \ud83d\uddf3 \ud83d\udcad \u2754 \ud83d\udddc \ud83c\udf82 \ud83d\udd78 \ud83d\udcfb. \ud83d\udc49 \ud83c\udfc1 \ud83e\udd1d \ud83e\udd1d \ud83c\udf55.</p> <p>\u23ee\ufe0f \ud83d\udc49, \ud83d\udc69\u200d\ud83d\udcbb &amp; \ud83d\udcbd \u2714\ufe0f \ud83d\udddc \ud83d\udd78 \ud83d\udd17, \ud83d\udc49 \u26ab\ufe0f\u2754 \ud83e\udd1d \ud83d\ude9a. &amp; \u2934\ufe0f \ud83d\udc6b \ud83d\udcaa \u2699\ufe0f \ud83d\udc48 \ud83d\udd17 \u25b6\ufe0f \u2611 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udcfb.</p> <p>&amp; \ud83d\udc48 \u26ab\ufe0f\u2754 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d , \u26ab\ufe0f \u2705 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udd18 \ud83d\udd10 \ud83e\udd1d \ud83d\udd17 \u21a9\ufe0f \ud83d\ude01 (\ud83d\udcbd) \ud83d\udd78 \ud83d\udd17.</p> <p>Tip</p> <p>\ud83d\udc40 \ud83d\udc48 \ud83d\udd10 \ud83d\udcfb \ud83d\udd28 \ud83d\udd78 \ud83c\udf9a, \ud83d\udeab \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83c\udf9a.</p>"},{"location":"deployment/https/#_8","title":"\ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udce8","text":"<p>\ud83d\udd1c \ud83d\udc48 \ud83d\udc69\u200d\ud83d\udcbb &amp; \ud83d\udcbd (\ud83c\udfaf \ud83d\udda5 &amp; \ud83e\udd1d \u274e \ud83d\uddf3) \u2714\ufe0f \ud83d\udddc \ud83d\udd78 \ud83d\udd17, \ud83d\udc6b \ud83d\udcaa \u25b6\ufe0f \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udcfb.</p> <p>, \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udce8 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udce8. \ud83d\udc49 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udce8 \ud83d\udd18 \ud83d\udddc \ud83e\udd1d \ud83d\udd17.</p> <p></p>"},{"location":"deployment/https/#_9","title":"\ud83d\udddc \ud83d\udce8","text":"<p>\ud83e\udd1d \u274e \ud83d\uddf3 \ud83d\udd1c \u2699\ufe0f \ud83d\udd10 \u2714 \ud83d\udddc \ud83d\udce8, &amp; \ud83d\udd1c \ud83d\udcf6 \u2705 (\ud83d\udddc) \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udce8 \ud83d\udee0\ufe0f \ud83c\udfc3 \ud83c\ude38 (\ud83d\uddbc \ud83d\udee0\ufe0f \u23ee\ufe0f Uvicorn \ud83c\udfc3\u200d\u2642 ReadyAPI \ud83c\ude38).</p> <p></p>"},{"location":"deployment/https/#_10","title":"\ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udce8","text":"<p>\ud83c\ude38 \ud83d\udd1c \ud83d\udee0\ufe0f \ud83d\udce8 &amp; \ud83d\udce8 \u2705 (\ud83d\udcbd) \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udce8 \ud83e\udd1d \u274e \ud83d\uddf3.</p> <p></p>"},{"location":"deployment/https/#_11","title":"\ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udce8","text":"<p>\ud83e\udd1d \u274e \ud83d\uddf3 \ud83d\udd1c \u2934\ufe0f \ud83d\udddc \ud83d\udce8 \u2699\ufe0f \u269b \u2714 \u23ed (\ud83d\udc48 \u25b6\ufe0f \u23ee\ufe0f \ud83d\udcc4 <code>someapp.example.com</code>), &amp; \ud83d\udce8 \u26ab\ufe0f \ud83d\udd19 \ud83d\udda5.</p> <p>\u23ed, \ud83d\udda5 \ud83d\udd1c \u2714 \ud83d\udc48 \ud83d\udce8 \u2611 &amp; \ud83d\udddc \u23ee\ufe0f \u25b6\ufe0f\ufe0f \ud83d\udd10 \ud83d\udd11, \u2652\ufe0f. \u26ab\ufe0f \ud83d\udd1c \u2934\ufe0f \ud83d\udddc \ud83d\udce8 &amp; \ud83d\udee0\ufe0f \u26ab\ufe0f.</p> <p></p> <p>\ud83d\udc69\u200d\ud83d\udcbb (\ud83d\udda5) \ud83d\udd1c \ud83d\udcad \ud83d\udc48 \ud83d\udce8 \ud83d\udc5f \u26aa\ufe0f\u27a1\ufe0f \u2611 \ud83d\udcbd \u21a9\ufe0f \u26ab\ufe0f \u2699\ufe0f \u269b \ud83d\udc6b \u2714 \u2699\ufe0f \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udcc4 \u23ed.</p>"},{"location":"deployment/https/#_12","title":"\ud83d\udc97 \ud83c\ude38","text":"<p>\ud83c\udf8f \ud83d\udcbd (\u2696\ufe0f \ud83d\udcbd), \ud83d\udce4 \ud83d\udcaa \ud83d\udc97 \ud83c\ude38, \ud83d\uddbc, \ud83c\udf8f \ud83d\udee0\ufe0f \ud83d\udccb \u2696\ufe0f \ud83d\udcbd.</p> <p>\ud83d\udd74 1\ufe0f\u20e3 \ud83d\udee0\ufe0f \ud83d\udcaa \ud83d\ude9a \ud83c\udfaf \ud83d\udce2 &amp; \u26f4 (\ud83e\udd1d \u274e \ud83d\uddf3 \ud83d\udc46 \ud83d\uddbc) \u270b\ufe0f \ud83c\udf8f \ud83c\ude38/\ud83d\udee0\ufe0f \ud83d\udcaa \ud83c\udfc3 \ud83d\udd1b \ud83d\udcbd(\u24c2) \ud83d\udc81\u200d\u2642\ufe0f, \ud83d\udccf \ud83d\udc6b \ud83d\udeab \ud83d\udd04 \u2699\ufe0f \ud83c\udf8f \ud83c\udf00 \ud83d\udce2 \ud83d\udce2 &amp; \u26f4.</p> <p></p> <p>\ud83d\udc48 \ud83c\udf0c, \ud83e\udd1d \u274e \ud83d\uddf3 \ud83d\udcaa \ud83c\udf75 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d &amp; \ud83d\udcc4 \ud83d\udc97 \ud83c\udd94, \ud83d\udc97 \ud83c\ude38, &amp; \u2934\ufe0f \ud83d\udcf6 \ud83d\udce8 \u25b6\ufe0f\ufe0f \ud83c\ude38 \ud83d\udd20 \ud83d\udcbc.</p>"},{"location":"deployment/https/#_13","title":"\ud83d\udcc4 \ud83d\udd15","text":"<p>\u261d \ud83d\udd2e, \ud83d\udd20 \ud83d\udcc4 \ud83d\udd1c \ud83d\udd5b (\ud83d\udd03 3\ufe0f\u20e3 \ud83d\uddd3\ufe0f \u23ee\ufe0f \ud83c\udfd7 \u26ab\ufe0f).</p> <p>&amp; \u2934\ufe0f, \ud83d\udce4 \ud83d\udd1c \u27951\ufe0f\u20e3 \ud83d\udccb (\ud83d\udcbc \u26ab\ufe0f \u27951\ufe0f\u20e3 \ud83d\udccb, \ud83d\udcbc \u26ab\ufe0f \ud83d\udcaa \ud83c\udf8f \ud83e\udd1d \u274e \ud83d\uddf3) \ud83d\udc48 \ud83d\udd1c \ud83d\udcac \u27a1\ufe0f \ud83d\udddc, &amp; \u267b \ud83d\udcc4(\u24c2).</p> <p></p> <p>\ud83e\udd1d \ud83d\udcc4 \ud83d\udd17 \u23ee\ufe0f \ud83c\udd94 \ud83d\udcdb, \ud83d\udeab \u23ee\ufe0f \ud83d\udce2 \ud83d\udce2.</p> <p>, \u267b \ud83d\udcc4, \ud83d\udd15 \ud83d\udccb \ud83d\udcaa \ud83c\udfa6 \ud83d\udec3 (\u27a1\ufe0f \ud83d\udddc) \ud83d\udc48 \u26ab\ufe0f \ud83d\udc50 \"\ud83d\udc4d\" &amp; \ud83c\udf9b \ud83d\udc48 \ud83c\udd94.</p> <p>\ud83d\udc48, &amp; \ud83c\udfd7 \ud83c\udf8f \ud83c\ude38 \ud83d\udcaa, \ud83d\udce4 \ud83d\udcda \ud83c\udf0c \u26ab\ufe0f \ud83d\udcaa \u26ab\ufe0f. \ud83c\udf1f \ud83c\udf0c:</p> <ul> <li>\ud83d\udd00 \ud83c\udfd3 \u23fa.<ul> <li>\ud83d\udc49, \ud83d\udd15 \ud83d\udccb \ud83d\udcaa \ud83d\udc15\u200d\ud83e\uddba \ud83d\udd17 \ud83c\udfd3 \ud83d\udc15\u200d\ud83e\uddba,, \u2693\ufe0f \ud83d\udd1b \ud83c\udfd3 \ud83d\udc15\u200d\ud83e\uddba \ud83d\udc46 \u2699\ufe0f, \ud83d\udc49 5\ufe0f\u20e3\ud83d\udcc6 \u2696\ufe0f \ud83d\udcaa \ud83d\udeab \ud83c\udf9b.</li> </ul> </li> <li>\ud83c\udfc3 \ud83d\udcbd (\ud83c\udf18 \u23ee\ufe0f \ud83d\udcc4 \ud83d\udee0\ufe0f \ud83d\udee0\ufe0f) \ud83d\udd1b \ud83d\udce2 \ud83d\udce2 \ud83d\udce2 \ud83d\udd17 \u23ee\ufe0f \ud83c\udd94.<ul> <li>\ud83d\udc65 \ud83d\udcac \ud83d\udd1b, \ud83d\udd74 1\ufe0f\u20e3 \ud83d\udee0\ufe0f \ud83d\udcaa \ud83d\udc42 \ud83d\udd1b \ud83c\udfaf \ud83d\udce2 &amp; \u26f4.</li> <li>\ud83d\udc49 1\ufe0f\u20e3 \ud83e\udd14 \u26ab\ufe0f\u2754 \u26ab\ufe0f \ud83d\udcf6 \u26a0 \ud83d\udd50\u2754 \ud83c\udf8f \ud83e\udd1d \u274e \ud83d\uddf3 \u270a \ud83d\udc85 \ud83d\udcc4 \ud83d\udd15 \ud83d\udee0\ufe0f.</li> <li>\u23ea, \ud83d\udc46 \ud83d\udcaa \u2714\ufe0f \u26d4\ufe0f \ud83e\udd1d \u274e \ud83d\uddf3 \ud83d\ude16, \u25b6\ufe0f \ud83d\udd15 \ud83d\udccb \ud83d\udcce \ud83d\udcc4, \u2934\ufe0f \ud83d\udd17 \ud83d\udc6b \u23ee\ufe0f \ud83e\udd1d \u274e \ud83d\uddf3, &amp; \u2934\ufe0f \u23cf \ud83e\udd1d \u274e \ud83d\uddf3. \ud83d\udc49 \ud83d\udeab \ud83d\udcaf, \ud83d\udc46 \ud83d\udcf1(\u24c2) \ud83d\udd1c \ud83d\udeab \ud83d\udcaa \u23ee\ufe0f \ud83d\udd70 \ud83d\udc48 \ud83e\udd1d \u274e \ud83d\uddf3 \ud83d\udcc6.</li> </ul> </li> </ul> <p>\ud83c\udf10 \ud83d\udc49 \ud83d\udd15 \ud83d\udee0\ufe0f, \u23ea \ud83c\udf66 \ud83d\udcf1, 1\ufe0f\u20e3 \ud83d\udc51 \ud83e\udd14 \u26ab\ufe0f\u2754 \ud83d\udc46 \ud83d\udd1c \ud83d\udc9a \u2714\ufe0f \ud83c\udf8f \u2699\ufe0f \ud83c\udf75 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \u23ee\ufe0f \ud83e\udd1d \u274e \ud83d\uddf3 \u21a9\ufe0f \u2699\ufe0f \ud83e\udd1d \ud83d\udcc4 \u23ee\ufe0f \ud83c\ude38 \ud83d\udcbd \ud83d\udd17 (\u2705 Uvicorn).</p>"},{"location":"deployment/https/#_14","title":"\ud83c\udf03","text":"<p>\u2714\ufe0f \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udcf6 \u26a0, &amp; \ud83c\udfaf \ud83c\udfc6 \ud83d\udcbc. \ud83c\udf05 \ud83c\udfaf \ud83d\udc46 \ud83d\udc69\u200d\ud83d\udcbb \u2714\ufe0f \ud83d\udeae \ud83e\udd2d \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udd03 \ud83e\udd14 \ud83d\udc49 \ud83d\udd27 &amp; \u2754 \ud83d\udc6b \ud83d\udc77.</p> <p>\u270b\ufe0f \ud83d\udd50 \ud83d\udc46 \ud83d\udcad \ud83d\udd30 \u2139 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udc46 \ud83d\udcaa \ud83d\udcaa \ud83c\udf00 &amp; \ud83d\udd17 \ud83c\udf8f \ud83e\uddf0 \u2139 \ud83d\udc46 \ud83d\udee0\ufe0f \ud83c\udf10 \ud83d\ude45 \ud83c\udf0c.</p> <p>\u23ed \ud83d\udcc3, \ud83d\udc64 \ud83d\udd1c \ud83c\udfa6 \ud83d\udc46 \ud83d\udcda \ud83e\uddf1 \ud83d\uddbc \u2754 \u2692 \ud83c\udd99 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d ReadyAPI \ud83c\ude38. \ud83d\udc76</p>"},{"location":"deployment/manually/","title":"\ud83c\udfc3 \ud83d\udcbd \u274e - Uvicorn","text":"<p>\ud83d\udc51 \ud83d\udc5c \ud83d\udc46 \ud83d\udcaa \ud83c\udfc3 ReadyAPI \ud83c\ude38 \ud83d\udef0 \ud83d\udcbd \ud83c\udfb0 \ud83d\udd2b \ud83d\udcbd \ud83d\udccb \ud83d\udc96 Uvicorn.</p> <p>\ud83d\udce4 3\ufe0f\u20e3 \ud83d\udc51 \ud83c\udf9b:</p> <ul> <li>Uvicorn: \u2195 \ud83c\udfad \ud83d\udd2b \ud83d\udcbd.</li> <li>Hypercorn: \ud83d\udd2b \ud83d\udcbd \ud83d\udd17 \u23ee\ufe0f \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d/2\ufe0f\u20e3 &amp; \ud83c\udfbb \ud83d\udc6a \ud83c\udf8f \u2692.</li> <li>\ud83d\udc78: \ud83d\udd2b \ud83d\udcbd \ud83c\udfd7 \u2733 \ud83d\udcfb.</li> </ul>"},{"location":"deployment/manually/#_1","title":"\ud83d\udcbd \ud83c\udfb0 &amp; \ud83d\udcbd \ud83d\udccb","text":"<p>\ud83d\udce4 \ud83e\udd2a \u2139 \ud83d\udd03 \ud83d\udcdb \u2714\ufe0f \ud83e\udd2f. \ud83d\udc76</p> <p>\ud83d\udd24 \"\ud83d\udcbd\" \ud83d\udece \u2699\ufe0f \ud83d\udd17 \ud83d\udc6f\u200d\u2642\ufe0f \ud83d\udef0/\u2601 \ud83d\udcbb (\u269b \u2696\ufe0f \ud83d\udd79 \ud83c\udfb0) &amp; \ud83d\udccb \ud83d\udc48 \ud83c\udfc3\u200d\u2642 \ud83d\udd1b \ud83d\udc48 \ud83c\udfb0 (\u2705 Uvicorn).</p> <p>\u2714\ufe0f \ud83d\udc48 \ud83e\udd2f \ud83d\udd50\u2754 \ud83d\udc46 \u270d \"\ud83d\udcbd\" \ud83c\udfe2, \u26ab\ufe0f \ud83d\udcaa \ud83d\udd17 1\ufe0f\u20e3 \ud83d\udcda 2\ufe0f\u20e3 \ud83d\udc5c.</p> <p>\ud83d\udd50\u2754 \ud83d\udd17 \ud83d\udef0 \ud83c\udfb0, \u26ab\ufe0f \u26a0 \ud83e\udd19 \u26ab\ufe0f \ud83d\udcbd, \u270b\ufe0f \ud83c\udfb0, \ud83d\udcbe (\ud83d\udd79 \ud83c\udfb0), \ud83d\udd78. \ud83d\udc48 \ud83c\udf10 \ud83d\udd17 \ud83c\udd8e \ud83d\udef0 \ud83c\udfb0, \ud83d\udece \ud83c\udfc3\u200d\u2642 \ud83d\udcbe, \ud83c\udf10\u2754 \ud83d\udc46 \ud83c\udfc3 \ud83d\udccb.</p>"},{"location":"deployment/manually/#_2","title":"\u274e \ud83d\udcbd \ud83d\udccb","text":"<p>\ud83d\udc46 \ud83d\udcaa \u274e \ud83d\udd2b \ud83d\udd17 \ud83d\udcbd \u23ee\ufe0f:</p> UvicornHypercorn <ul> <li>Uvicorn, \ud83c\udf29-\u23e9 \ud83d\udd2b \ud83d\udcbd, \ud83c\udfd7 \ud83d\udd1b uvloop &amp; httptool.</li> </ul> <pre><code>$ pip install \"uvicorn[standard]\"\n\n---&gt; 100%\n</code></pre> <p>Tip</p> <p>\u274e <code>standard</code>, Uvicorn \ud83d\udd1c \u274e &amp; \u2699\ufe0f \ud83d\udc4d \u2795 \ud83d\udd17.</p> <p>\ud83d\udc48 \u2705 <code>uvloop</code>, \u2195-\ud83c\udfad \ud83d\udca7-\u267b <code>asyncio</code>, \ud83d\udc48 \ud83d\ude9a \ud83e\udd8f \ud83d\udee0\ufe0f \ud83c\udfad \ud83d\udcc8.</p> <ul> <li>Hypercorn, \ud83d\udd2b \ud83d\udcbd \ud83d\udd17 \u23ee\ufe0f \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d/2\ufe0f\u20e3.</li> </ul> <pre><code>$ pip install hypercorn\n\n---&gt; 100%\n</code></pre> <p>...\u2696\ufe0f \ud83d\ude46 \ud83c\udf8f \ud83d\udd2b \ud83d\udcbd.</p>"},{"location":"deployment/manually/#_3","title":"\ud83c\udfc3 \ud83d\udcbd \ud83d\udccb","text":"<p>\ud83d\udc46 \ud83d\udcaa \u2934\ufe0f \ud83c\udfc3 \ud83d\udc46 \ud83c\ude38 \ud83c\udf8f \ud83c\udf0c \ud83d\udc46 \u2714\ufe0f \u231b \ud83d\udd30, \u270b\ufe0f \ud83c\udf75 <code>--reload</code> \ud83c\udf9b, \u2705:</p> UvicornHypercorn <pre><code>$ uvicorn main:app --host 0.0.0.0 --port 80\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://0.0.0.0:80 (Press CTRL+C to quit)\n</code></pre> <pre><code>$ hypercorn main:app --bind 0.0.0.0:80\n\nRunning on 0.0.0.0:8080 over http (CTRL + C to quit)\n</code></pre> <p>Warning</p> <p>\ud83d\udcad \u274e <code>--reload</code> \ud83c\udf9b \ud83d\udea5 \ud83d\udc46 \u2699\ufe0f \u26ab\ufe0f.</p> <p><code>--reload</code> \ud83c\udf9b \ud83c\udf74 \ud83c\udf05 \ud83c\udf05 \u2139, \ud83c\udf05 \u26a0, \u2652\ufe0f.</p> <p>\u26ab\ufe0f \u2139 \ud83d\udcda \u23ee\ufe0f \ud83d\udee0\ufe0f, \u270b\ufe0f \ud83d\udc46 \ud83d\udeab\ud83d\udd1c \ud83d\udeab \u2699\ufe0f \u26ab\ufe0f \ud83c\udfed.</p>"},{"location":"deployment/manually/#hypercorn","title":"Hypercorn \u23ee\ufe0f \ud83c\udfbb","text":"<p>\ud83d\udc83 &amp; ReadyAPI \u2693\ufe0f \ud83d\udd1b AnyIO, \u2754 \u2692 \ud83d\udc6b \ud83d\udd17 \u23ee\ufe0f \ud83d\udc6f\u200d\u2642\ufe0f \ud83d\udc0d \ud83d\udc29 \ud83d\uddc3 \u2733 &amp; \ud83c\udfbb.</p> <p>\ud83d\udc50, Uvicorn \u23f3 \ud83d\udd74 \ud83d\udd17 \u23ee\ufe0f \u2733, &amp; \u26ab\ufe0f \ud83d\udece \u2699\ufe0f <code>uvloop</code>, \u2195-\ud83c\udfad \ud83d\udca7-\u267b <code>asyncio</code>.</p> <p>\u270b\ufe0f \ud83d\udea5 \ud83d\udc46 \ud83d\udc9a \ud83d\udd17 \u2699\ufe0f \ud83c\udfbb, \u2934\ufe0f \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f Hypercorn \u26ab\ufe0f \ud83d\udc15\u200d\ud83e\uddba \u26ab\ufe0f. \ud83d\udc76</p>"},{"location":"deployment/manually/#hypercorn_1","title":"\u274e Hypercorn \u23ee\ufe0f \ud83c\udfbb","text":"<p>\ud83e\udd47 \ud83d\udc46 \ud83d\udcaa \u274e Hypercorn \u23ee\ufe0f \ud83c\udfbb \ud83d\udc15\u200d\ud83e\uddba:</p> <pre><code>$ pip install \"hypercorn[trio]\"\n---&gt; 100%\n</code></pre>"},{"location":"deployment/manually/#_4","title":"\ud83c\udfc3 \u23ee\ufe0f \ud83c\udfbb","text":"<p>\u2934\ufe0f \ud83d\udc46 \ud83d\udcaa \ud83d\udeb6\u200d\u2640\ufe0f \ud83d\udccb \u23f8 \ud83c\udf9b <code>--worker-class</code> \u23ee\ufe0f \ud83d\udcb2 <code>trio</code>:</p> <pre><code>$ hypercorn main:app --worker-class trio\n</code></pre> <p>&amp; \ud83d\udc48 \ud83d\udd1c \u25b6\ufe0f Hypercorn \u23ee\ufe0f \ud83d\udc46 \ud83d\udcf1 \u2699\ufe0f \ud83c\udfbb \ud83d\udc69\u200d\ud83d\udcbb.</p> <p>\ud83d\udd1c \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83c\udfbb \ud83d\udd18 \ud83d\udc46 \ud83d\udcf1. \u2696\ufe0f \ud83d\udc4d, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f AnyIO, \ud83d\udea7 \ud83d\udc46 \ud83d\udcdf \ud83d\udd17 \u23ee\ufe0f \ud83d\udc6f\u200d\u2642\ufe0f \ud83c\udfbb &amp; \u2733. \ud83d\udc76</p>"},{"location":"deployment/manually/#_5","title":"\ud83d\udee0\ufe0f \ud83d\udd27","text":"<p>\ud83d\udc6b \ud83d\uddbc \ud83c\udfc3 \ud83d\udcbd \ud83d\udccb (\ud83d\udce7.\u24c2 Uvicorn), \u25b6\ufe0f \ud83d\udc41 \ud83d\udee0\ufe0f, \ud83d\udc42 \ud83d\udd1b \ud83c\udf10 \ud83d\udce2 (<code>0.0.0.0</code>) \ud83d\udd1b \ud83d\udd01 \u26f4 (\u2705 <code>80</code>).</p> <p>\ud83d\udc49 \ud83d\udd30 \ud83d\udcad. \u270b\ufe0f \ud83d\udc46 \ud83d\udd1c \ud83c\udfb2 \ud83d\udc9a \u270a \ud83d\udc85 \ud83c\udf16 \ud83d\udc5c, \ud83d\udc96:</p> <ul> <li>\ud83d\udc82\u200d\u2642 - \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d</li> <li>\ud83c\udfc3\u200d\u2642 \ud83d\udd1b \ud83d\udd74</li> <li>\u23cf</li> <li>\ud83e\uddec (\ud83d\udd22 \ud83d\udee0\ufe0f \ud83c\udfc3)</li> <li>\ud83d\udcbe</li> <li>\u23ee\ufe0f \ud83d\udd01 \u23ed \u25b6\ufe0f</li> </ul> <p>\ud83d\udc64 \ud83d\udd1c \ud83d\udcac \ud83d\udc46 \ud83c\udf05 \ud83d\udd03 \ud83d\udd20 \ud83d\udc6b \ud83d\udd27, \u2754 \ud83d\udcad \ud83d\udd03 \ud83d\udc6b, &amp; \ud83e\uddf1 \ud83d\uddbc \u23ee\ufe0f \ud83c\udf9b \ud83c\udf75 \ud83d\udc6b \u23ed \ud83d\udcc3. \ud83d\udc76</p>"},{"location":"deployment/server-workers/","title":"\ud83d\udcbd \ud83d\udc68\u200d\ud83c\udfed - \ud83d\udc01 \u23ee\ufe0f Uvicorn","text":"<p>\u27a1\ufe0f \u2705 \ud83d\udd19 \ud83d\udc48 \ud83d\udee0\ufe0f \ud83d\udd27 \u26aa\ufe0f\u27a1\ufe0f \u23ed:</p> <ul> <li>\ud83d\udc82\u200d\u2642 - \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d</li> <li>\ud83c\udfc3\u200d\u2642 \ud83d\udd1b \ud83d\udd74</li> <li>\u23cf</li> <li>\ud83e\uddec (\ud83d\udd22 \ud83d\udee0\ufe0f \ud83c\udfc3)</li> <li>\ud83d\udcbe</li> <li>\u23ee\ufe0f \ud83d\udd01 \u23ed \u25b6\ufe0f</li> </ul> <p>\ud83c\udd99 \ud83d\udc49 \u261d, \u23ee\ufe0f \ud83c\udf10 \ud83d\udd30 \ud83e\ude7a, \ud83d\udc46 \u2714\ufe0f \ud83c\udfb2 \ud83c\udfc3\u200d\u2642 \ud83d\udcbd \ud83d\udccb \ud83d\udc96 Uvicorn, \ud83c\udfc3\u200d\u2642 \ud83d\udc41 \ud83d\udee0\ufe0f.</p> <p>\ud83d\udd50\u2754 \ud83d\udee0\ufe0f \ud83c\ude38 \ud83d\udc46 \ud83d\udd1c \ud83c\udfb2 \ud83d\udc9a \u2714\ufe0f \ud83e\uddec \ud83d\udee0\ufe0f \u270a \ud83d\udcc8 \ud83d\udc97 \ud83d\udc1a &amp; \ud83d\udcaa \ud83c\udf75 \ud83c\udf05 \ud83d\udce8.</p> <p>\ud83d\udc46 \ud83d\udc40 \u23ee\ufe0f \ud83d\udcc3 \ud83d\udd03 \ud83d\udee0\ufe0f \ud83d\udd27, \ud83d\udce4 \ud83d\udc97 \ud83c\udf9b \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f.</p> <p>\ud83d\udce5 \ud83d\udc64 \ud83d\udd1c \ud83c\udfa6 \ud83d\udc46 \u2754 \u2699\ufe0f \ud83d\udc01 \u23ee\ufe0f Uvicorn \ud83d\udc68\u200d\ud83c\udfed \ud83d\udee0\ufe0f.</p> <p>Info</p> <p>\ud83d\udea5 \ud83d\udc46 \u2699\ufe0f \ud83d\udce6, \ud83d\uddbc \u23ee\ufe0f \u2601 \u2696\ufe0f Kubernetes, \ud83d\udc64 \ud83d\udd1c \ud83d\udcac \ud83d\udc46 \ud83c\udf05 \ud83d\udd03 \ud83d\udc48 \u23ed \ud83d\udcc3: ReadyAPI \ud83d\udce6 - \u2601.</p> <p>\ud83c\udfaf, \ud83d\udd50\u2754 \ud83c\udfc3 \ud83d\udd1b Kubernetes \ud83d\udc46 \ud83d\udd1c \ud83c\udfb2 \ud83d\udeab \ud83d\udc9a \u2699\ufe0f \ud83d\udc01 &amp; \u21a9\ufe0f \ud83c\udfc3 \ud83d\udc41 Uvicorn \ud83d\udee0\ufe0f \ud83d\udccd \ud83d\udce6, \u270b\ufe0f \ud83d\udc64 \ud83d\udd1c \ud83d\udcac \ud83d\udc46 \ud83d\udd03 \u26ab\ufe0f \u23ea \ud83d\udc48 \ud83d\udcc3.</p>"},{"location":"deployment/server-workers/#uvicorn","title":"\ud83d\udc01 \u23ee\ufe0f Uvicorn \ud83d\udc68\u200d\ud83c\udfed","text":"<p>\ud83d\udc01 \u2734\ufe0f \ud83c\ude38 \ud83d\udcbd \u2699\ufe0f \ud83c\udde8\ud83c\uddfb \ud83d\udc29. \ud83d\udc48 \u26d3 \ud83d\udc48 \ud83d\udc01 \ud83d\udcaa \ud83c\udf66 \ud83c\ude38 \ud83d\udc96 \ud83c\udffa &amp; \u2733. \ud83d\udc01 \u26ab\ufe0f \ud83d\udeab \ud83d\udd17 \u23ee\ufe0f ReadyAPI, ReadyAPI \u2699\ufe0f \ud83c\udd95 \ud83d\udd2b \ud83d\udc29.</p> <p>\u270b\ufe0f \ud83d\udc01 \ud83d\udc15\u200d\ud83e\uddba \ud83d\udc77 \ud83d\udee0\ufe0f \ud83d\udc68\u200d\ud83d\udcbc &amp; \ud83e\udd1d \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udcac \u26ab\ufe0f \u2754 \ud83c\udfaf \ud83d\udc68\u200d\ud83c\udfed \ud83d\udee0\ufe0f \ud83c\udf93 \u2699\ufe0f. \u2934\ufe0f \ud83d\udc01 \ud83d\udd1c \u25b6\ufe0f 1\ufe0f\u20e3 \u2696\ufe0f \ud83c\udf16 \ud83d\udc68\u200d\ud83c\udfed \ud83d\udee0\ufe0f \u2699\ufe0f \ud83d\udc48 \ud83c\udf93.</p> <p>&amp; Uvicorn \u2714\ufe0f \ud83d\udc01-\ud83d\udd17 \ud83d\udc68\u200d\ud83c\udfed \ud83c\udf93.</p> <p>\u2699\ufe0f \ud83d\udc48 \ud83c\udf00, \ud83d\udc01 \ud83d\udd1c \ud83d\udeab \ud83d\udee0\ufe0f \ud83d\udc68\u200d\ud83d\udcbc, \ud83d\udc42 \ud83d\udd1b \u26f4 &amp; \ud83d\udce2. &amp; \u26ab\ufe0f \ud83d\udd1c \ud83d\udcf6 \ud83d\udcfb \ud83d\udc68\u200d\ud83c\udfed \ud83d\udee0\ufe0f \ud83c\udfc3 Uvicorn \ud83c\udf93.</p> <p>&amp; \u2934\ufe0f \ud83d\udc01-\ud83d\udd17 Uvicorn \ud83d\udc68\u200d\ud83c\udfed \ud83c\udf93 \ud83d\udd1c \ud83c\ude1a \ud83c\udfed \ud83d\udcca \ud83d\udce8 \ud83d\udc01 \ud83d\udd2b \ud83d\udc29 ReadyAPI \u2699\ufe0f \u26ab\ufe0f.</p>"},{"location":"deployment/server-workers/#uvicorn_1","title":"\u274e \ud83d\udc01 &amp; Uvicorn","text":"<pre><code>$ pip install \"uvicorn[standard]\" gunicorn\n\n---&gt; 100%\n</code></pre> <p>\ud83d\udc48 \ud83d\udd1c \u274e \ud83d\udc6f\u200d\u2642\ufe0f Uvicorn \u23ee\ufe0f <code>standard</code> \u2795 \ud83d\udce6 (\ud83e\udd1a \u2195 \ud83c\udfad) &amp; \ud83d\udc01.</p>"},{"location":"deployment/server-workers/#uvicorn_2","title":"\ud83c\udfc3 \ud83d\udc01 \u23ee\ufe0f Uvicorn \ud83d\udc68\u200d\ud83c\udfed","text":"<p>\u2934\ufe0f \ud83d\udc46 \ud83d\udcaa \ud83c\udfc3 \ud83d\udc01 \u23ee\ufe0f:</p> <pre><code>$ gunicorn main:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:80\n\n[19499] [INFO] Starting gunicorn 20.1.0\n[19499] [INFO] Listening at: http://0.0.0.0:80 (19499)\n[19499] [INFO] Using worker: uvicorn.workers.UvicornWorker\n[19511] [INFO] Booting worker with pid: 19511\n[19513] [INFO] Booting worker with pid: 19513\n[19514] [INFO] Booting worker with pid: 19514\n[19515] [INFO] Booting worker with pid: 19515\n[19511] [INFO] Started server process [19511]\n[19511] [INFO] Waiting for application startup.\n[19511] [INFO] Application startup complete.\n[19513] [INFO] Started server process [19513]\n[19513] [INFO] Waiting for application startup.\n[19513] [INFO] Application startup complete.\n[19514] [INFO] Started server process [19514]\n[19514] [INFO] Waiting for application startup.\n[19514] [INFO] Application startup complete.\n[19515] [INFO] Started server process [19515]\n[19515] [INFO] Waiting for application startup.\n[19515] [INFO] Application startup complete.\n</code></pre> <p>\u27a1\ufe0f \ud83d\udc40 \u26ab\ufe0f\u2754 \ud83d\udd20 \ud83d\udc48 \ud83c\udf9b \u26d3:</p> <ul> <li> <p><code>main:app</code>: \ud83d\udc49 \ud83c\udf8f \u2755 \u2699\ufe0f Uvicorn, <code>main</code> \u26d3 \ud83d\udc0d \ud83d\udd79 \ud83d\udcdb \"<code>main</code>\",, \ud83d\udcc1 <code>main.py</code>. &amp; <code>app</code> \ud83d\udcdb \ud83d\udd22 \ud83d\udc48 ReadyAPI \ud83c\ude38.</p> <ul> <li> <p>\ud83d\udc46 \ud83d\udcaa \ud83c\udf08 \ud83d\udc48 <code>main:app</code> \ud83c\udf13 \ud83d\udc0d <code>import</code> \ud83d\udcc4 \ud83d\udc96:</p> <pre><code>from main import app\n</code></pre> </li> <li> <p>, \u2764 <code>main:app</code> \ud83d\udd1c \ud83c\udf13 \ud83d\udc0d <code>import</code> \ud83c\udf55 <code>from main import app</code>.</p> </li> <li><code>--workers</code>: \ud83d\udd22 \ud83d\udc68\u200d\ud83c\udfed \ud83d\udee0\ufe0f \u2699\ufe0f, \ud83d\udd20 \ud83d\udd1c \ud83c\udfc3 Uvicorn \ud83d\udc68\u200d\ud83c\udfed, \ud83d\udc49 \ud83d\udcbc, 4\ufe0f\u20e3 \ud83d\udc68\u200d\ud83c\udfed.</li> <li><code>--worker-class</code>: \ud83d\udc01-\ud83d\udd17 \ud83d\udc68\u200d\ud83c\udfed \ud83c\udf93 \u2699\ufe0f \ud83d\udc68\u200d\ud83c\udfed \ud83d\udee0\ufe0f.</li> <li> <p>\ud83d\udce5 \ud83d\udc65 \ud83d\udeb6\u200d\u2640\ufe0f \ud83c\udf93 \ud83d\udc48 \ud83d\udc01 \ud83d\udcaa \ud83d\uddc4 &amp; \u2699\ufe0f \u23ee\ufe0f:</p> <pre><code>import uvicorn.workers.UvicornWorker\n</code></pre> </li> </ul> </li> <li> <p><code>--bind</code>: \ud83d\udc49 \ud83d\udcac \ud83d\udc01 \ud83d\udce2 &amp; \u26f4 \ud83d\udc42, \u2699\ufe0f \u2764 (<code>:</code>) \ud83c\udf8f \ud83d\udce2 &amp; \u26f4.</p> <ul> <li>\ud83d\udea5 \ud83d\udc46 \ud83c\udfc3\u200d\u2642 Uvicorn \ud83d\udd17, \u21a9\ufe0f <code>--bind 0.0.0.0:80</code> (\ud83d\udc01 \ud83c\udf9b) \ud83d\udc46 \ud83d\udd1c \u2699\ufe0f <code>--host 0.0.0.0</code> &amp; <code>--port 80</code>.</li> </ul> </li> </ul> <p>\ud83d\udd22, \ud83d\udc46 \ud83d\udcaa \ud83d\udc40 \ud83d\udc48 \u26ab\ufe0f \ud83c\udfa6 \ud83d\udd79 (\ud83d\udee0\ufe0f \ud83c\udd94) \ud83d\udd20 \ud83d\udee0\ufe0f (\u26ab\ufe0f \ud83d\udd22).</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udc40 \ud83d\udc48:</p> <ul> <li>\ud83d\udc01 \ud83d\udee0\ufe0f \ud83d\udc68\u200d\ud83d\udcbc \u25b6\ufe0f \u23ee\ufe0f \ud83d\udd79 <code>19499</code> (\ud83d\udc46 \ud83d\udcbc \u26ab\ufe0f \ud83d\udd1c \ud83c\udf8f \ud83d\udd22).</li> <li>\u2934\ufe0f \u26ab\ufe0f \u25b6\ufe0f <code>Listening at: http://0.0.0.0:80</code>.</li> <li>\u2934\ufe0f \u26ab\ufe0f \ud83d\udd0d \ud83d\udc48 \u26ab\ufe0f \u2714\ufe0f \u2699\ufe0f \ud83d\udc68\u200d\ud83c\udfed \ud83c\udf93 <code>uvicorn.workers.UvicornWorker</code>.</li> <li>&amp; \u2934\ufe0f \u26ab\ufe0f \u25b6\ufe0f 4\ufe0f\u20e3 \ud83d\udc68\u200d\ud83c\udfed, \ud83d\udd20 \u23ee\ufe0f \ud83d\udeae \ud83d\udc4d \ud83d\udd79: <code>19511</code>, <code>19513</code>, <code>19514</code>, &amp; <code>19515</code>.</li> </ul> <p>\ud83d\udc01 \ud83d\udd1c \u270a \ud83d\udc85 \ud83d\udee0\ufe0f \u2620\ufe0f \ud83d\udee0\ufe0f &amp; \ud83d\udd01 \ud83c\udd95 \ud83d\udd50 \ud83d\udea5 \ud83d\udc9a \ud83d\udea7 \ud83d\udd22 \ud83d\udc68\u200d\ud83c\udfed. \ud83d\udc48 \u2139 \ud83c\udf55 \u23ee\ufe0f \u23cf \ud83d\udd27 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udcc7 \ud83d\udd1b.</p> <p>\ud83d\udc50, \ud83d\udc46 \ud83d\udd1c \ud83c\udfb2 \ud83d\udc9a \u2714\ufe0f \ud83d\udd73 \ud83c\udfde \u2692 \ud83d\udcad \u23cf \ud83d\udc01 \ud83d\udea5 \ud83d\udcaa, &amp; \ud83c\udfc3 \u26ab\ufe0f \ud83d\udd1b \ud83d\udd74, \u2652\ufe0f.</p>"},{"location":"deployment/server-workers/#uvicorn_3","title":"Uvicorn \u23ee\ufe0f \ud83d\udc68\u200d\ud83c\udfed","text":"<p>Uvicorn \u2714\ufe0f \ud83c\udf9b \u25b6\ufe0f &amp; \ud83c\udfc3 \ud83d\udcda \ud83d\udc68\u200d\ud83c\udfed \ud83d\udee0\ufe0f.</p> <p>\ud83d\udc50, \ud83d\udd1c, Uvicorn \ud83d\udee0\ufe0f \ud83d\ude9a \ud83d\udc68\u200d\ud83c\udfed \ud83d\udee0\ufe0f \ud83c\udf05 \ud83d\udcc9 \ud83c\udf18 \ud83d\udc01. , \ud83d\udea5 \ud83d\udc46 \ud83d\udc9a \u2714\ufe0f \ud83d\udee0\ufe0f \ud83d\udc68\u200d\ud83d\udcbc \ud83d\udc49 \ud83c\udf9a (\ud83d\udc0d \ud83c\udf9a), \u2934\ufe0f \u26ab\ufe0f \ud83d\udcaa \ud83d\udc4d \ud83d\udd04 \u23ee\ufe0f \ud83d\udc01 \ud83d\udee0\ufe0f \ud83d\udc68\u200d\ud83d\udcbc.</p> <p>\ud83d\ude46 \ud83d\udcbc, \ud83d\udc46 \ud83d\udd1c \ud83c\udfc3 \u26ab\ufe0f \ud83d\udc96 \ud83d\udc49:</p> <pre><code>$ uvicorn main:app --host 0.0.0.0 --port 8080 --workers 4\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Uvicorn running on &lt;b&gt;http://0.0.0.0:8080&lt;/b&gt; (Press CTRL+C to quit)\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Started parent process [&lt;font color=\"#A1EFE4\"&gt;&lt;b&gt;27365&lt;/b&gt;&lt;/font&gt;]\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Started server process [&lt;font color=\"#A1EFE4\"&gt;27368&lt;/font&gt;]\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Waiting for application startup.\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Application startup complete.\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Started server process [&lt;font color=\"#A1EFE4\"&gt;27369&lt;/font&gt;]\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Waiting for application startup.\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Application startup complete.\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Started server process [&lt;font color=\"#A1EFE4\"&gt;27370&lt;/font&gt;]\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Waiting for application startup.\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Application startup complete.\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Started server process [&lt;font color=\"#A1EFE4\"&gt;27367&lt;/font&gt;]\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Waiting for application startup.\n&lt;font color=\"#A6E22E\"&gt;INFO&lt;/font&gt;:     Application startup complete.\n</code></pre> <p>\ud83d\udd74 \ud83c\udd95 \ud83c\udf9b \ud83d\udce5 <code>--workers</code> \ud83d\udcac Uvicorn \u25b6\ufe0f 4\ufe0f\u20e3 \ud83d\udc68\u200d\ud83c\udfed \ud83d\udee0\ufe0f.</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udc40 \ud83d\udc48 \u26ab\ufe0f \ud83c\udfa6 \ud83d\udd79 \ud83d\udd20 \ud83d\udee0\ufe0f, <code>27365</code> \ud83d\udc6a \ud83d\udee0\ufe0f (\ud83d\udc49 \ud83d\udee0\ufe0f \ud83d\udc68\u200d\ud83d\udcbc) &amp; 1\ufe0f\u20e3 \ud83d\udd20 \ud83d\udc68\u200d\ud83c\udfed \ud83d\udee0\ufe0f: <code>27368</code>, <code>27369</code>, <code>27370</code>, &amp; <code>27367</code>.</p>"},{"location":"deployment/server-workers/#_1","title":"\ud83d\udee0\ufe0f \ud83d\udd27","text":"<p>\ud83d\udce5 \ud83d\udc46 \ud83d\udc40 \u2754 \u2699\ufe0f \ud83d\udc01 (\u2696\ufe0f Uvicorn) \ud83d\udee0\ufe0f Uvicorn \ud83d\udc68\u200d\ud83c\udfed \ud83d\udee0\ufe0f \ud83d\udd01 \ud83d\udee0\ufe0f \ud83c\ude38, \u270a \ud83d\udcc8 \ud83d\udc97 \ud83d\udc1a \ud83d\udcbd, &amp; \ud83d\udcaa \ud83c\udf66 \ud83c\udf05 \ud83d\udce8.</p> <p>\u26aa\ufe0f\u27a1\ufe0f \ud83d\udcc7 \ud83d\udee0\ufe0f \ud83d\udd27 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udd1b, \u2699\ufe0f \ud83d\udc68\u200d\ud83c\udfed \ud83d\udd1c \u2734\ufe0f \u2139 \u23ee\ufe0f \ud83e\uddec \ud83c\udf55, &amp; \ud83d\udc25 \ud83c\udf56 \u23ee\ufe0f \u23cf, \u270b\ufe0f \ud83d\udc46 \ud83d\udcaa \u270a \ud83d\udc85 \ud83c\udf8f:</p> <ul> <li>\ud83d\udc82\u200d\u2642 - \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d</li> <li>\ud83c\udfc3\u200d\u2642 \ud83d\udd1b \ud83d\udd74</li> <li>\u23cf</li> <li>\ud83e\uddec (\ud83d\udd22 \ud83d\udee0\ufe0f \ud83c\udfc3)</li> <li>\ud83d\udcbe</li> <li>\u23ee\ufe0f \ud83d\udd01 \u23ed \u25b6\ufe0f</li> </ul>"},{"location":"deployment/server-workers/#_2","title":"\ud83d\udce6 &amp; \u2601","text":"<p>\u23ed \ud83d\udcc3 \ud83d\udd03 ReadyAPI \ud83d\udce6 - \u2601 \ud83d\udc64 \ud83d\udd1c \ud83d\udcac \ud83c\udf9b \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83c\udf75 \ud83c\udf8f \ud83d\udee0\ufe0f \ud83d\udd27.</p> <p>\ud83d\udc64 \ud83d\udd1c \ud83c\udfa6 \ud83d\udc46 \ud83d\udec2 \u2601 \ud83d\uddbc \ud83d\udc48 \ud83d\udd0c \ud83d\udc01 \u23ee\ufe0f Uvicorn \ud83d\udc68\u200d\ud83c\udfed &amp; \ud83d\udd22 \ud83d\udcf3 \ud83d\udc48 \ud83d\udcaa \u26a0 \ud83d\ude45 \ud83d\udcbc.</p> <p>\ud83d\udce4 \ud83d\udc64 \ud83d\udd1c \ud83c\udfa6 \ud83d\udc46 \u2754 \ud83c\udfd7 \ud83d\udc46 \ud83d\udc4d \ud83d\uddbc \u26aa\ufe0f\u27a1\ufe0f \ud83d\udd8c \ud83c\udfc3 \ud83d\udc41 Uvicorn \ud83d\udee0\ufe0f (\ud83c\udf75 \ud83d\udc01). \u26ab\ufe0f \ud83d\ude45 \ud83d\udee0\ufe0f &amp; \ud83c\udfb2 \u26ab\ufe0f\u2754 \ud83d\udc46 \ud83d\udd1c \ud83d\udc9a \ud83d\udd50\u2754 \u2699\ufe0f \ud83d\udcce \ud83d\udce6 \ud83e\uddfe \u2699\ufe0f \ud83d\udc96 Kubernetes.</p>"},{"location":"deployment/server-workers/#_3","title":"\ud83c\udf03","text":"<p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83d\udc01 (\u2696\ufe0f Uvicorn) \ud83d\udee0\ufe0f \ud83d\udc68\u200d\ud83d\udcbc \u23ee\ufe0f Uvicorn \ud83d\udc68\u200d\ud83c\udfed \u270a \ud83d\udcc8 \ud83d\udc41-\ud83d\udc1a \ud83d\udcbd, \ud83c\udfc3 \ud83d\udc97 \ud83d\udee0\ufe0f \ud83d\udd17.</p> <p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83d\udc49 \ud83e\uddf0 &amp; \ud83d\udcad \ud83d\udea5 \ud83d\udc46 \u2692 \ud83c\udd99 \ud83d\udc46 \ud83d\udc4d \ud83d\udee0\ufe0f \u2699\ufe0f \u23ea \u270a \ud83d\udc85 \ud83c\udf8f \ud83d\udee0\ufe0f \ud83d\udd27 \ud83d\udc46.</p> <p>\u2705 \ud83d\udc45 \u23ed \ud83d\udcc3 \ud83d\udca1 \ud83d\udd03 ReadyAPI \u23ee\ufe0f \ud83d\udce6 (\u2705 \u2601 &amp; Kubernetes). \ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \ud83d\udc48 \ud83d\udc48 \ud83e\uddf0 \u2714\ufe0f \ud83d\ude45 \ud83c\udf0c \u274e \ud83c\udf8f \ud83d\udee0\ufe0f \ud83d\udd27 \ud83d\udc4d. \ud83d\udc76</p>"},{"location":"deployment/versions/","title":"\ud83d\udd03 ReadyAPI \u23ec","text":"<p>ReadyAPI \u23ea \u2796 \u2699\ufe0f \ud83c\udfed \ud83d\udcda \ud83c\ude38 &amp; \u2699\ufe0f. &amp; \ud83d\udcaf \ud83d\udcb0 \ud83d\udea7 1\ufe0f\u20e30\ufe0f\u20e30\ufe0f\u20e3 \ud83d\udcaf. \u270b\ufe0f \ud83d\udeae \ud83d\udee0\ufe0f \ud83d\ude9a \ud83d\udd1c.</p> <p>\ud83c\udd95 \u2692 \ud83d\udeae \ud83d\udece, \ud83d\udc1b \ud83d\udd27 \ud83d\udece, &amp; \ud83d\udcdf \ud83d\udd01 \ud83d\udcc9.</p> <p>\ud83d\udc48 \u26ab\ufe0f\u2754 \u23ee\ufe0f \u23ec <code>0.x.x</code>, \ud83d\udc49 \ud83c\udfa8 \ud83d\udc48 \ud83d\udd20 \u23ec \ud83d\udcaa \u26a0 \u2714\ufe0f \ud83d\udc94 \ud83d\udd00. \ud83d\udc49 \u23e9 \u269b \ud83d\udee0\ufe0f \ud83c\udfdb.</p> <p>\ud83d\udc46 \ud83d\udcaa \u270d \ud83c\udfed \ud83c\ude38 \u23ee\ufe0f ReadyAPI \u25b6\ufe0f\ufe0f \ud83d\udd1c (&amp; \ud83d\udc46 \u2714\ufe0f \ud83c\udfb2 \ud83d\udd28 \u26ab\ufe0f \ud83d\udd70), \ud83d\udc46 \u2714\ufe0f \u2692 \ud83d\udcad \ud83d\udc48 \ud83d\udc46 \u2699\ufe0f \u23ec \ud83d\udc48 \ud83d\udc77 \u2611 \u23ee\ufe0f \ud83c\udf82 \ud83d\udc46 \ud83d\udcdf.</p>"},{"location":"deployment/versions/#readyapi_1","title":"\ud83d\udccc \ud83d\udc46 <code>readyapi</code> \u23ec","text":"<p>\ud83e\udd47 \ud83d\udc5c \ud83d\udc46 \ud83d\udd1c \"\ud83d\udccc\" \u23ec ReadyAPI \ud83d\udc46 \u2699\ufe0f \ud83c\udfaf \ud83d\udcf0 \u23ec \ud83d\udc48 \ud83d\udc46 \ud83d\udcad \ud83d\udc77 \u2611 \ud83d\udc46 \ud83c\ude38.</p> <p>\ud83d\uddbc, \u27a1\ufe0f \ud83d\udcac \ud83d\udc46 \u2699\ufe0f \u23ec <code>0.45.0</code> \ud83d\udc46 \ud83d\udcf1.</p> <p>\ud83d\udea5 \ud83d\udc46 \u2699\ufe0f <code>requirements.txt</code> \ud83d\udcc1 \ud83d\udc46 \ud83d\udcaa \u2714 \u23ec \u23ee\ufe0f:</p> <pre><code>readyapi==0.45.0\n</code></pre> <p>\ud83d\udc48 \ud83d\udd1c \u26d3 \ud83d\udc48 \ud83d\udc46 \ud83d\udd1c \u2699\ufe0f \u26ab\ufe0f\u2754 \u23ec <code>0.45.0</code>.</p> <p>\u2696\ufe0f \ud83d\udc46 \ud83d\udcaa \ud83d\udccc \u26ab\ufe0f \u23ee\ufe0f:</p> <pre><code>readyapi&gt;=0.45.0,&lt;0.46.0\n</code></pre> <p>\ud83d\udc48 \ud83d\udd1c \u26d3 \ud83d\udc48 \ud83d\udc46 \ud83d\udd1c \u2699\ufe0f \u23ec <code>0.45.0</code> \u2696\ufe0f \ud83d\udd1b, \u270b\ufe0f \ud83c\udf18 \ud83c\udf18 <code>0.46.0</code>, \ud83d\uddbc, \u23ec <code>0.45.2</code> \ud83d\udd1c \ud83d\udeab.</p> <p>\ud83d\udea5 \ud83d\udc46 \u2699\ufe0f \ud83d\ude46 \ud83c\udf8f \ud83e\uddf0 \ud83d\udee0\ufe0f \ud83d\udc46 \ud83d\udc77\u200d\u2642, \ud83d\udc96 \ud83c\udfb6, Pipenv, \u2696\ufe0f \ud83c\udf8f, \ud83d\udc6b \ud83c\udf10 \u2714\ufe0f \ud83c\udf0c \ud83d\udc48 \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83d\udd2c \ud83c\udfaf \u23ec \ud83d\udc46 \ud83d\udce6.</p>"},{"location":"deployment/versions/#_1","title":"\ud83d\udcaa \u23ec","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udc40 \ud83d\udcaa \u23ec (\u2705 \u2705 \u26ab\ufe0f\u2754 \u23ee\ufe0f \ud83d\udcf0) \ud83d\ude80 \ud83d\uddd2.</p>"},{"location":"deployment/versions/#_2","title":"\ud83d\udd03 \u23ec","text":"<p>\ud83d\udcc4 \u269b \ud83d\udee0\ufe0f \ud83c\udfdb, \ud83d\ude46 \u23ec \ud83d\udd1b <code>1.0.0</code> \ud83d\udcaa \u26a0 \ud83d\udeae \ud83d\udc94 \ud83d\udd00.</p> <p>ReadyAPI \u23e9 \ud83c\udfdb \ud83d\udc48 \ud83d\ude46 \"\ud83d\udc1b\" \u23ec \ud83d\udd00 \ud83d\udc1b \ud83d\udd27 &amp; \ud83d\udeab-\ud83d\udc94 \ud83d\udd00.</p> <p>Tip</p> <p>\"\ud83d\udc1b\" \ud83c\udfc1 \ud83d\udd22, \ud83d\uddbc, <code>0.2.3</code>, \ud83d\udc1b \u23ec <code>3</code>.</p> <p>, \ud83d\udc46 \ud83d\udd1c \ud83d\udcaa \ud83d\udccc \u23ec \ud83d\udc96:</p> <pre><code>readyapi&gt;=0.45.0,&lt;0.46.0\n</code></pre> <p>\ud83d\udc94 \ud83d\udd00 &amp; \ud83c\udd95 \u2692 \ud83d\udeae \"\ud83c\uddfa\ud83c\uddf2\" \u23ec.</p> <p>Tip</p> <p>\"\ud83c\uddfa\ud83c\uddf2\" \ud83d\udd22 \ud83d\udd95, \ud83d\uddbc, <code>0.2.3</code>, \ud83c\uddfa\ud83c\uddf2 \u23ec <code>2</code>.</p>"},{"location":"deployment/versions/#readyapi_2","title":"\u267b ReadyAPI \u23ec","text":"<p>\ud83d\udc46 \ud83d\udd1c \ud83d\udeae \ud83d\udcaf \ud83d\udc46 \ud83d\udcf1.</p> <p>\u23ee\ufe0f ReadyAPI \u26ab\ufe0f \ud83d\udcf6 \u23e9 (\ud83d\udc4f \ud83d\udc83), \u2705 \ud83e\ude7a: \ud83d\udd2c</p> <p>\u23ee\ufe0f \ud83d\udc46 \u2714\ufe0f \ud83d\udcaf, \u2934\ufe0f \ud83d\udc46 \ud83d\udcaa \u267b ReadyAPI \u23ec \ud83c\udf16 \u23ee\ufe0f 1\ufe0f\u20e3, &amp; \u2692 \ud83d\udcad \ud83d\udc48 \ud83c\udf10 \ud83d\udc46 \ud83d\udcdf \ud83d\udc77 \u2611 \ud83c\udfc3 \ud83d\udc46 \ud83d\udcaf.</p> <p>\ud83d\udea5 \ud83c\udf10 \ud83d\udc77, \u2696\ufe0f \u23ee\ufe0f \ud83d\udc46 \u2692 \ud83d\udcaa \ud83d\udd00, &amp; \ud83c\udf10 \ud83d\udc46 \ud83d\udcaf \ud83d\udeb6\u200d\u2640\ufe0f, \u2934\ufe0f \ud83d\udc46 \ud83d\udcaa \ud83d\udccc \ud83d\udc46 <code>readyapi</code> \ud83d\udc48 \ud83c\udd95 \u23ee\ufe0f \u23ec.</p>"},{"location":"deployment/versions/#_3","title":"\ud83d\udd03 \ud83d\udc83","text":"<p>\ud83d\udc46 \ud83d\udeab\ud83d\udd1c \ud83d\udeab \ud83d\udccc \u23ec <code>starlette</code>.</p> <p>\ud83c\udf8f \u23ec ReadyAPI \ud83d\udd1c \u2699\ufe0f \ud83c\udfaf \ud83c\udd95 \u23ec \ud83d\udc83.</p> <p>, \ud83d\udc46 \ud83d\udcaa \u27a1\ufe0f ReadyAPI \u2699\ufe0f \u2611 \ud83d\udc83 \u23ec.</p>"},{"location":"deployment/versions/#pydantic","title":"\ud83d\udd03 Pydantic","text":"<p>Pydantic \ud83d\udd0c \ud83d\udcaf ReadyAPI \u23ee\ufe0f \ud83d\udeae \ud83d\udc4d \ud83d\udcaf, \ud83c\udd95 \u23ec Pydantic (\ud83d\udd1b <code>1.0.0</code>) \ud83d\udd67 \ud83d\udd17 \u23ee\ufe0f ReadyAPI.</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udccc Pydantic \ud83d\ude46 \u23ec \ud83d\udd1b <code>1.0.0</code> \ud83d\udc48 \ud83d\udc77 \ud83d\udc46 &amp; \ud83d\udd1b <code>2.0.0</code>.</p> <p>\ud83d\uddbc:</p> <pre><code>pydantic&gt;=1.2.0,&lt;2.0.0\n</code></pre>"},{"location":"how-to/conditional-openapi/","title":"\ud83c\udfb2 \ud83d\uddc4","text":"<p>\ud83d\udea5 \ud83d\udc46 \ud83d\udcaa, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \u2692 &amp; \ud83c\udf10 \ud83d\udd22 \ud83d\udd17 \ud83d\uddc4 \u2714 \u2693\ufe0f \ud83d\udd1b \ud83c\udf10, &amp; \u274e \u26ab\ufe0f \ud83c\udf55.</p>"},{"location":"how-to/conditional-openapi/#_2","title":"\ud83d\udd03 \ud83d\udc82\u200d\u2642, \ud83d\udd17, &amp; \ud83e\ude7a","text":"<p>\ud83d\udd75\u200d\u2642 \ud83d\udc46 \ud83e\uddfe \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd22 \ud83c\udfed \ud83d\udeab\ud83d\udd1c \ud83d\udeab \ud83c\udf0c \ud83d\udee1 \ud83d\udc46 \ud83d\udee0\ufe0f.</p> <p>\ud83d\udc48 \ud83d\udeab \ud83d\udeae \ud83d\ude46 \u2795 \ud83d\udc82\u200d\u2642 \ud83d\udc46 \ud83d\udee0\ufe0f, \u27a1 \ud83d\udee0\ufe0f \ud83d\udd1c \ud83d\udcaa \ud83c\udf10\u2754 \ud83d\udc6b.</p> <p>\ud83d\udea5 \ud83d\udce4 \ud83d\udc82\u200d\u2642 \u26a0 \ud83d\udc46 \ud83d\udcdf, \u26ab\ufe0f \ud83d\udd1c \ud83d\udd00.</p> <p>\ud83d\udd75\u200d\u2642 \ud83e\uddfe \u2692 \u26ab\ufe0f \ud83c\udf05 \u26a0 \ud83e\udd14 \u2754 \ud83d\udd17 \u23ee\ufe0f \ud83d\udc46 \ud83d\udee0\ufe0f, &amp; \ud83d\udcaa \u2692 \u26ab\ufe0f \ud83c\udf05 \u26a0 \ud83d\udc46 \u2139 \u26ab\ufe0f \ud83c\udfed. \u26ab\ufe0f \ud83d\udcaa \ud83e\udd14 \ud83c\udfaf \ud83d\udce8 \ud83d\udc82\u200d\u2642 \ud83d\udd18 \ud83c\udf0c.</p> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udc9a \ud83d\udd10 \ud83d\udc46 \ud83d\udee0\ufe0f, \ud83d\udce4 \ud83d\udcda \ud83d\udc4d \ud83d\udc5c \ud83d\udc46 \ud83d\udcaa, \ud83d\uddbc:</p> <ul> <li>\u2692 \ud83d\udcad \ud83d\udc46 \u2714\ufe0f \ud83d\udc4d \ud83d\udd2c Pydantic \ud83c\udff7 \ud83d\udc46 \ud83d\udce8 \ud83d\udcaa &amp; \ud83d\udce8.</li> <li>\ud83d\udd17 \ud83d\ude46 \u2714 \u2714 &amp; \ud83d\udd11 \u2699\ufe0f \ud83d\udd17.</li> <li>\ud83d\ude45 \ud83c\udfea \ud83d\udd22 \ud83d\udd10, \ud83d\udd74 \ud83d\udd10#\ufe0f\u20e3.</li> <li>\ud83d\udee0\ufe0f &amp; \u2699\ufe0f \ud83d\udc4d-\ud83d\udcad \ud83d\udd10 \ud83e\uddf0, \ud83d\udc96 \ud83c\uddf8\ud83c\uddf2 &amp; \ud83e\udd59 \ud83e\udd1d, \u2652\ufe0f.</li> <li>\ud83d\udeae \ud83c\udf05 \ud83e\uddfd \u2714 \ud83c\udf9b \u23ee\ufe0f Oauth2\ufe0f\u20e3 \u2194 \ud83c\udf10\u2754 \ud83d\udcaa.</li> <li>...\u2652\ufe0f.</li> </ul> <p>\ud83d\udc50, \ud83d\udc46 5\ufe0f\u20e3\ud83d\udcc6 \u2714\ufe0f \ud83d\udcf6 \ud83c\udfaf \u2699\ufe0f \ud83d\udcbc \ud83c\udf10\u2754 \ud83d\udc46 \ud83e\udd19 \ud83d\udcaa \u274e \ud83d\udee0\ufe0f \ud83e\ude7a \ud83c\udf10 (\u2705 \ud83c\udfed) \u2696\ufe0f \u2693\ufe0f \ud83d\udd1b \ud83d\udcf3 \u26aa\ufe0f\u27a1\ufe0f \ud83c\udf10 \ud83d\udd22.</p>"},{"location":"how-to/conditional-openapi/#_3","title":"\ud83c\udfb2 \ud83d\uddc4 \u26aa\ufe0f\u27a1\ufe0f \u2692 &amp; \ud83c\udde8\ud83c\uddfb {","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udcaa \u2699\ufe0f \ud83c\udf8f Pydantic \u2692 \ud83d\udd17 \ud83d\udc46 \ud83c\udfd7 \ud83d\uddc4 &amp; \ud83e\ude7a \u269c.</p> <p>\ud83d\uddbc:</p> Python 3.8+ <pre><code>from pydantic_settings import BaseSettings\nfrom readyapi import ReadyAPI\n\n\nclass Settings(BaseSettings):\n    openapi_url: str = \"/openapi.json\"\n\n\nsettings = Settings()\n\napp = ReadyAPI(openapi_url=settings.openapi_url)\n\n\n@app.get(\"/\")\ndef root():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>\ud83d\udce5 \ud83d\udc65 \ud83d\udce3 \u2692 <code>openapi_url</code> \u23ee\ufe0f \ud83c\udf8f \ud83d\udd22 <code>\"/openapi.json\"</code>.</p> <p>&amp; \u2934\ufe0f \ud83d\udc65 \u2699\ufe0f \u26ab\ufe0f \ud83d\udd50\u2754 \ud83c\udfd7 <code>ReadyAPI</code> \ud83d\udcf1.</p> <p>\u2934\ufe0f \ud83d\udc46 \ud83d\udcaa \u274e \ud83d\uddc4 (\u2705 \ud83c\udf9a \ud83e\ude7a) \u2692 \ud83c\udf10 \ud83d\udd22 <code>OPENAPI_URL</code> \ud83d\udec1 \ud83c\udfbb, \ud83d\udc96:</p> <pre><code>$ OPENAPI_URL= uvicorn main:app\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>\u2934\ufe0f \ud83d\udea5 \ud83d\udc46 \ud83d\udeb6 \ud83d\udcdb <code>/openapi.json</code>, <code>/docs</code>, \u2696\ufe0f <code>/redoc</code> \ud83d\udc46 \ud83d\udd1c \ud83e\udd1a <code>404 Not Found</code> \u274c \ud83d\udc96:</p> <pre><code>{\n    \"detail\": \"Not Found\"\n}\n</code></pre>"},{"location":"how-to/custom-request-and-route/","title":"\ud83d\udec3 \ud83d\udce8 &amp; APIRoute \ud83c\udf93","text":"<p>\ud83d\udcbc, \ud83d\udc46 5\ufe0f\u20e3\ud83d\udcc6 \ud83d\udc9a \ud83d\udd10 \u269b \u2699\ufe0f <code>Request</code> &amp; <code>APIRoute</code> \ud83c\udf93.</p> <p>\ud83c\udfaf, \ud83d\udc49 5\ufe0f\u20e3\ud83d\udcc6 \ud83d\udc4d \ud83c\udf9b \u269b \ud83d\udee0\ufe0f.</p> <p>\ud83d\uddbc, \ud83d\udea5 \ud83d\udc46 \ud83d\udc9a \u270d \u2696\ufe0f \ud83d\udd2c \ud83d\udce8 \ud83d\udcaa \u23ed \u26ab\ufe0f \ud83d\udee0\ufe0f \ud83d\udc46 \ud83c\ude38.</p> <p>Danger</p> <p>\ud83d\udc49 \"\ud83c\udfe7\" \u2692.</p> <p>\ud83d\udea5 \ud83d\udc46 \u25b6\ufe0f \u23ee\ufe0f ReadyAPI \ud83d\udc46 \ud83d\udcaa \ud83d\udc9a \ud83d\udeb6 \ud83d\udc49 \ud83d\udcc4.</p>"},{"location":"how-to/custom-request-and-route/#_1","title":"\u2699\ufe0f \ud83d\udcbc","text":"<p>\u2699\ufe0f \ud83d\udcbc \ud83d\udd0c:</p> <ul> <li>\ud83c\udfed \ud83d\udeab-\ud83c\udfbb \ud83d\udce8 \ud83d\udcaa \ud83c\udfbb (\u2705 <code>msgpack</code>).</li> <li>\ud83d\udddc \ud83d\udddc-\ud83d\udddc \ud83d\udce8 \ud83d\udcaa.</li> <li>\ud83d\udd01 \ud83d\udea8 \ud83c\udf10 \ud83d\udce8 \ud83d\udcaa.</li> </ul>"},{"location":"how-to/custom-request-and-route/#_2","title":"\ud83d\ude9a \ud83d\udec3 \ud83d\udce8 \ud83d\udcaa \ud83d\udd22","text":"<p>\u27a1\ufe0f \ud83d\udc40 \u2754 \u2692 \u2699\ufe0f \ud83d\udec3 <code>Request</code> \ud83c\udfff \ud83d\udddc \ud83d\udddc \ud83d\udce8.</p> <p>&amp; <code>APIRoute</code> \ud83c\udfff \u2699\ufe0f \ud83d\udc48 \ud83d\udec3 \ud83d\udce8 \ud83c\udf93.</p>"},{"location":"how-to/custom-request-and-route/#gziprequest","title":"\u270d \ud83d\udec3 <code>GzipRequest</code> \ud83c\udf93","text":"<p>Tip</p> <p>\ud83d\udc49 \ud83e\uddf8 \ud83d\uddbc \ud83c\udfa6 \u2754 \u26ab\ufe0f \ud83d\udc77, \ud83d\udea5 \ud83d\udc46 \ud83d\udcaa \ud83d\udddc \ud83d\udc15\u200d\ud83e\uddba, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83d\ude9a <code>GzipMiddleware</code>.</p> <p>\ud83e\udd47, \ud83d\udc65 \u270d <code>GzipRequest</code> \ud83c\udf93, \u2754 \ud83d\udd1c \ud83d\udcc1 <code>Request.body()</code> \ud83d\udc69\u200d\ud83d\udd2c \ud83d\udddc \ud83d\udcaa \ud83d\udd0d \u2611 \ud83c\udf9a.</p> <p>\ud83d\udea5 \ud83d\udce4 \ud83d\ude45\u200d\u2642 <code>gzip</code> \ud83c\udf9a, \u26ab\ufe0f \ud83d\udd1c \ud83d\udeab \ud83d\udd04 \ud83d\udddc \ud83d\udcaa.</p> <p>\ud83d\udc48 \ud83c\udf0c, \ud83c\udf8f \ud83d\udee3 \ud83c\udf93 \ud83d\udcaa \ud83c\udf75 \ud83d\udddc \ud83d\udddc \u2696\ufe0f \ud83d\udddc \ud83d\udce8.</p> Python 3.8+ <pre><code>import gzip\nfrom typing import Callable, List\n\nfrom readyapi import Body, ReadyAPI, Request, Response\nfrom readyapi.routing import APIRoute\n\n\nclass GzipRequest(Request):\n    async def body(self) -&gt; bytes:\n        if not hasattr(self, \"_body\"):\n            body = await super().body()\n            if \"gzip\" in self.headers.getlist(\"Content-Encoding\"):\n                body = gzip.decompress(body)\n            self._body = body\n        return self._body\n\n\nclass GzipRoute(APIRoute):\n    def get_route_handler(self) -&gt; Callable:\n        original_route_handler = super().get_route_handler()\n\n        async def custom_route_handler(request: Request) -&gt; Response:\n            request = GzipRequest(request.scope, request.receive)\n            return await original_route_handler(request)\n\n        return custom_route_handler\n\n\napp = ReadyAPI()\napp.router.route_class = GzipRoute\n\n\n@app.post(\"/sum\")\nasync def sum_numbers(numbers: List[int] = Body()):\n    return {\"sum\": sum(numbers)}\n</code></pre>"},{"location":"how-to/custom-request-and-route/#gziproute","title":"\u270d \ud83d\udec3 <code>GzipRoute</code> \ud83c\udf93","text":"<p>\u23ed, \ud83d\udc65 \u270d \ud83d\udec3 \ud83c\udfff <code>readyapi.routing.APIRoute</code> \ud83d\udc48 \ud83d\udd1c \u2692 \u2699\ufe0f <code>GzipRequest</code>.</p> <p>\ud83d\udc49 \ud83d\udd70, \u26ab\ufe0f \ud83d\udd1c \ud83d\udcc1 \ud83d\udc69\u200d\ud83d\udd2c <code>APIRoute.get_route_handler()</code>.</p> <p>\ud83d\udc49 \ud83d\udc69\u200d\ud83d\udd2c \ud83d\udce8 \ud83d\udd22. &amp; \ud83d\udc48 \ud83d\udd22 \u26ab\ufe0f\u2754 \ud83d\udd1c \ud83d\udce8 \ud83d\udce8 &amp; \ud83d\udce8 \ud83d\udce8.</p> <p>\ud83d\udce5 \ud83d\udc65 \u2699\ufe0f \u26ab\ufe0f \u270d <code>GzipRequest</code> \u26aa\ufe0f\u27a1\ufe0f \u23ee\ufe0f \ud83d\udce8.</p> Python 3.8+ <pre><code>import gzip\nfrom typing import Callable, List\n\nfrom readyapi import Body, ReadyAPI, Request, Response\nfrom readyapi.routing import APIRoute\n\n\nclass GzipRequest(Request):\n    async def body(self) -&gt; bytes:\n        if not hasattr(self, \"_body\"):\n            body = await super().body()\n            if \"gzip\" in self.headers.getlist(\"Content-Encoding\"):\n                body = gzip.decompress(body)\n            self._body = body\n        return self._body\n\n\nclass GzipRoute(APIRoute):\n    def get_route_handler(self) -&gt; Callable:\n        original_route_handler = super().get_route_handler()\n\n        async def custom_route_handler(request: Request) -&gt; Response:\n            request = GzipRequest(request.scope, request.receive)\n            return await original_route_handler(request)\n\n        return custom_route_handler\n\n\napp = ReadyAPI()\napp.router.route_class = GzipRoute\n\n\n@app.post(\"/sum\")\nasync def sum_numbers(numbers: List[int] = Body()):\n    return {\"sum\": sum(numbers)}\n</code></pre> <p>\ud83d\udce1 \u2139</p> <p><code>Request</code> \u2714\ufe0f <code>request.scope</code> \ud83d\udd22, \ud83d\udc48 \ud83d\udc0d <code>dict</code> \u2697 \ud83d\uddc3 \ud83d\udd17 \ud83d\udce8.</p> <p><code>Request</code> \u2714\ufe0f <code>request.receive</code>, \ud83d\udc48 \ud83d\udd22 \"\ud83d\udce8\" \ud83d\udcaa \ud83d\udce8.</p> <p><code>scope</code> <code>dict</code> &amp; <code>receive</code> \ud83d\udd22 \ud83d\udc6f\u200d\u2642\ufe0f \ud83c\udf55 \ud83d\udd2b \ud83d\udd27.</p> <p>&amp; \ud83d\udc48 2\ufe0f\u20e3 \ud83d\udc5c, <code>scope</code> &amp; <code>receive</code>, \u26ab\ufe0f\u2754 \ud83d\udcaa \u270d \ud83c\udd95 <code>Request</code> \ud83d\udc50.</p> <p>\ud83d\udca1 \ud83c\udf05 \ud83d\udd03 <code>Request</code> \u2705 \ud83d\udc83 \ud83e\ude7a \ud83d\udd03 \ud83d\udce8.</p> <p>\ud83d\udd74 \ud83d\udc5c \ud83d\udd22 \ud83d\udce8 <code>GzipRequest.get_route_handler</code> \ud83d\udd28 \ud83c\udf8f \ud83d\udddc <code>Request</code> <code>GzipRequest</code>.</p> <p>\ud83d\udd28 \ud83d\udc49, \ud83d\udc46 <code>GzipRequest</code> \ud83d\udd1c \u270a \ud83d\udc85 \ud83d\udddc \ud83d\udcca (\ud83d\udea5 \ud83d\udcaa) \u23ed \ud83d\udeb6\u200d\u2640\ufe0f \u26ab\ufe0f \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f.</p> <p>\u23ee\ufe0f \ud83d\udc48, \ud83c\udf10 \ud83c\udfed \u269b \ud83c\udf8f.</p> <p>\u270b\ufe0f \u21a9\ufe0f \ud83d\udc46 \ud83d\udd00 <code>GzipRequest.body</code>, \ud83d\udce8 \ud83d\udcaa \ud83d\udd1c \ud83d\udd01 \ud83d\udddc \ud83d\udd50\u2754 \u26ab\ufe0f \ud83d\udcd0 ReadyAPI \ud83d\udd50\u2754 \ud83d\udcaa.</p>"},{"location":"how-to/custom-request-and-route/#_3","title":"\ud83d\udd10 \ud83d\udce8 \ud83d\udcaa \u26a0 \ud83d\udc15\u200d\ud83e\uddba","text":"<p>Tip</p> <p>\u274e \ud83d\udc49 \ud83c\udf8f \u26a0, \u26ab\ufe0f \ud83c\udfb2 \ud83d\udcda \u23e9 \u2699\ufe0f <code>body</code> \ud83d\udec3 \ud83d\udc15\u200d\ud83e\uddba <code>RequestValidationError</code> (\ud83d\ude9a \u274c).</p> <p>\u270b\ufe0f \ud83d\udc49 \ud83d\uddbc \u2611 &amp; \u26ab\ufe0f \ud83c\udfa6 \u2754 \ud83d\udd17 \u23ee\ufe0f \ud83d\udd17 \ud83e\uddb2.</p> <p>\ud83d\udc65 \ud83d\udcaa \u2699\ufe0f \ud83d\udc49 \ud83c\udf8f \ud83c\udfaf \ud83d\udd10 \ud83d\udce8 \ud83d\udcaa \u26a0 \ud83d\udc15\u200d\ud83e\uddba.</p> <p>\ud83c\udf10 \ud83d\udc65 \ud83d\udcaa \ud83c\udf75 \ud83d\udce8 \ud83d\udd18 <code>try</code>/<code>except</code> \ud83c\udf6b:</p> Python 3.8+ <pre><code>from typing import Callable, List\n\nfrom readyapi import Body, HTTPException, ReadyAPI, Request, Response\nfrom readyapi.exceptions import RequestValidationError\nfrom readyapi.routing import APIRoute\n\n\nclass ValidationErrorLoggingRoute(APIRoute):\n    def get_route_handler(self) -&gt; Callable:\n        original_route_handler = super().get_route_handler()\n\n        async def custom_route_handler(request: Request) -&gt; Response:\n            try:\n                return await original_route_handler(request)\n            except RequestValidationError as exc:\n                body = await request.body()\n                detail = {\"errors\": exc.errors(), \"body\": body.decode()}\n                raise HTTPException(status_code=422, detail=detail)\n\n        return custom_route_handler\n\n\napp = ReadyAPI()\napp.router.route_class = ValidationErrorLoggingRoute\n\n\n@app.post(\"/\")\nasync def sum_numbers(numbers: List[int] = Body()):\n    return sum(numbers)\n</code></pre> <p>\ud83d\udea5 \u26a0 \ud83d\udcc9, <code>Request</code> \ud83d\udc50 \ud83d\udd1c \u2194, \ud83d\udc65 \ud83d\udcaa \u270d &amp; \u2692 \u2699\ufe0f \ud83d\udce8 \ud83d\udcaa \ud83d\udd50\u2754 \ud83d\ude9a \u274c:</p> Python 3.8+ <pre><code>from typing import Callable, List\n\nfrom readyapi import Body, HTTPException, ReadyAPI, Request, Response\nfrom readyapi.exceptions import RequestValidationError\nfrom readyapi.routing import APIRoute\n\n\nclass ValidationErrorLoggingRoute(APIRoute):\n    def get_route_handler(self) -&gt; Callable:\n        original_route_handler = super().get_route_handler()\n\n        async def custom_route_handler(request: Request) -&gt; Response:\n            try:\n                return await original_route_handler(request)\n            except RequestValidationError as exc:\n                body = await request.body()\n                detail = {\"errors\": exc.errors(), \"body\": body.decode()}\n                raise HTTPException(status_code=422, detail=detail)\n\n        return custom_route_handler\n\n\napp = ReadyAPI()\napp.router.route_class = ValidationErrorLoggingRoute\n\n\n@app.post(\"/\")\nasync def sum_numbers(numbers: List[int] = Body()):\n    return sum(numbers)\n</code></pre>"},{"location":"how-to/custom-request-and-route/#apiroute_1","title":"\ud83d\udec3 <code>APIRoute</code> \ud83c\udf93 \ud83d\udcfb","text":"<p>\ud83d\udc46 \ud83d\udcaa \u2692 <code>route_class</code> \ud83d\udd22 <code>APIRouter</code>:</p> Python 3.8+ <pre><code>import time\nfrom typing import Callable\n\nfrom readyapi import APIRouter, ReadyAPI, Request, Response\nfrom readyapi.routing import APIRoute\n\n\nclass TimedRoute(APIRoute):\n    def get_route_handler(self) -&gt; Callable:\n        original_route_handler = super().get_route_handler()\n\n        async def custom_route_handler(request: Request) -&gt; Response:\n            before = time.time()\n            response: Response = await original_route_handler(request)\n            duration = time.time() - before\n            response.headers[\"X-Response-Time\"] = str(duration)\n            print(f\"route duration: {duration}\")\n            print(f\"route response: {response}\")\n            print(f\"route response headers: {response.headers}\")\n            return response\n\n        return custom_route_handler\n\n\napp = ReadyAPI()\nrouter = APIRouter(route_class=TimedRoute)\n\n\n@app.get(\"/\")\nasync def not_timed():\n    return {\"message\": \"Not timed\"}\n\n\n@router.get(\"/timed\")\nasync def timed():\n    return {\"message\": \"It's the time of my life\"}\n\n\napp.include_router(router)\n</code></pre> <p>\ud83d\udc49 \ud83d\uddbc, \u27a1 \ud83d\udee0\ufe0f \ud83d\udd3d <code>router</code> \ud83d\udd1c \u2699\ufe0f \ud83d\udec3 <code>TimedRoute</code> \ud83c\udf93, &amp; \ud83d\udd1c \u2714\ufe0f \u2795 <code>X-Response-Time</code> \ud83c\udf9a \ud83d\udce8 \u23ee\ufe0f \ud83d\udd70 \u26ab\ufe0f \u270a \ud83c\udfd7 \ud83d\udce8:</p> Python 3.8+ <pre><code>import time\nfrom typing import Callable\n\nfrom readyapi import APIRouter, ReadyAPI, Request, Response\nfrom readyapi.routing import APIRoute\n\n\nclass TimedRoute(APIRoute):\n    def get_route_handler(self) -&gt; Callable:\n        original_route_handler = super().get_route_handler()\n\n        async def custom_route_handler(request: Request) -&gt; Response:\n            before = time.time()\n            response: Response = await original_route_handler(request)\n            duration = time.time() - before\n            response.headers[\"X-Response-Time\"] = str(duration)\n            print(f\"route duration: {duration}\")\n            print(f\"route response: {response}\")\n            print(f\"route response headers: {response.headers}\")\n            return response\n\n        return custom_route_handler\n\n\napp = ReadyAPI()\nrouter = APIRouter(route_class=TimedRoute)\n\n\n@app.get(\"/\")\nasync def not_timed():\n    return {\"message\": \"Not timed\"}\n\n\n@router.get(\"/timed\")\nasync def timed():\n    return {\"message\": \"It's the time of my life\"}\n\n\napp.include_router(router)\n</code></pre>"},{"location":"how-to/extending-openapi/","title":"\u2194 \ud83d\uddc4","text":"<p>Warning</p> <p>\ud83d\udc49 \ud83d\udc4d \ud83c\udfe7 \u2692. \ud83d\udc46 \ud83c\udfb2 \ud83d\udcaa \ud83d\udeb6 \u26ab\ufe0f.</p> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udcc4 \ud83d\udd30 - \ud83d\udc69\u200d\ud83d\udcbb \ud83e\uddae, \ud83d\udc46 \ud83d\udcaa \ud83c\udfb2 \ud83d\udeb6 \ud83d\udc49 \ud83d\udcc4.</p> <p>\ud83d\udea5 \ud83d\udc46 \u23ea \ud83d\udcad \ud83d\udc48 \ud83d\udc46 \ud83d\udcaa \ud83d\udd00 \ud83c\udfd7 \ud83d\uddc4 \ud83d\udd17, \ud83d\ude23 \ud83d\udc42.</p> <p>\ud83d\udce4 \ud83d\udcbc \ud83c\udf10\u2754 \ud83d\udc46 \ud83d\udcaa \ud83d\udcaa \ud83d\udd00 \ud83c\udfd7 \ud83d\uddc4 \ud83d\udd17.</p> <p>\ud83d\udc49 \ud83d\udcc4 \ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \u2754.</p>"},{"location":"how-to/extending-openapi/#_2","title":"\ud83d\ude10 \ud83d\udee0\ufe0f","text":"<p>\ud83d\ude10 (\ud83d\udd22) \ud83d\udee0\ufe0f, \u23e9.</p> <p><code>ReadyAPI</code> \ud83c\ude38 (\ud83d\udc50) \u2714\ufe0f <code>.openapi()</code> \ud83d\udc69\u200d\ud83d\udd2c \ud83d\udc48 \ud83d\udcc8 \ud83d\udce8 \ud83d\uddc4 \ud83d\udd17.</p> <p>\ud83c\udf55 \ud83c\ude38 \ud83c\udf9a \ud83c\udfd7, \u27a1 \ud83d\udee0\ufe0f <code>/openapi.json</code> (\u2696\ufe0f \u26ab\ufe0f\u2754 \ud83d\udc46 \u2692 \ud83d\udc46 <code>openapi_url</code>) \u00ae.</p> <p>\u26ab\ufe0f \ud83d\udce8 \ud83c\udfbb \ud83d\udce8 \u23ee\ufe0f \ud83c\udfc1 \ud83c\ude38 <code>.openapi()</code> \ud83d\udc69\u200d\ud83d\udd2c.</p> <p>\ud83d\udd22, \u26ab\ufe0f\u2754 \ud83d\udc69\u200d\ud83d\udd2c <code>.openapi()</code> \ud83d\udd28 \u2705 \ud83c\udfe0 <code>.openapi_schema</code> \ud83d\udc40 \ud83d\udea5 \u26ab\ufe0f \u2714\ufe0f \ud83c\udf9a &amp; \ud83d\udce8 \ud83d\udc6b.</p> <p>\ud83d\udea5 \u26ab\ufe0f \ud83d\udeab, \u26ab\ufe0f \ud83c\udfd7 \ud83d\udc6b \u2699\ufe0f \ud83d\ude99 \ud83d\udd22 <code>readyapi.openapi.utils.get_openapi</code>.</p> <p>&amp; \ud83d\udc48 \ud83d\udd22 <code>get_openapi()</code> \ud83d\udce8 \ud83d\udd22:</p> <ul> <li><code>title</code>: \ud83d\uddc4 \ud83d\udcdb, \ud83c\udfa6 \ud83e\ude7a.</li> <li><code>version</code>: \u23ec \ud83d\udc46 \ud83d\udee0\ufe0f, \u2705 <code>2.5.0</code>.</li> <li><code>openapi_version</code>: \u23ec \ud83d\uddc4 \ud83d\udd27 \u2699\ufe0f. \ud83d\udd22, \u23ea: <code>3.0.2</code>.</li> <li><code>description</code>: \ud83d\udcdb \ud83d\udc46 \ud83d\udee0\ufe0f.</li> <li><code>routes</code>: \ud83d\udcc7 \ud83d\udee3, \ud83d\udc6b \ud83d\udd20 \u00ae \u27a1 \ud83d\udee0\ufe0f. \ud83d\udc6b \u270a \u26aa\ufe0f\u27a1\ufe0f <code>app.routes</code>.</li> </ul>"},{"location":"how-to/extending-openapi/#_3","title":"\ud83d\udd11 \ud83d\udd22","text":"<p>\u2699\ufe0f \u2139 \ud83d\udd1b, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83c\udf8f \ud83d\ude99 \ud83d\udd22 \ud83c\udfd7 \ud83d\uddc4 \ud83d\udd17 &amp; \ud83d\udd10 \ud83d\udd20 \ud83c\udf55 \ud83d\udc48 \ud83d\udc46 \ud83d\udcaa.</p> <p>\ud83d\uddbc, \u27a1\ufe0f \ud83d\udeae \ud83d\udcc4 \ud83d\uddc4 \u2194 \ud83d\udd0c \ud83d\udec3 \ud83d\udd31.</p>"},{"location":"how-to/extending-openapi/#readyapi","title":"\ud83d\ude10 ReadyAPI","text":"<p>\ud83e\udd47, \u270d \ud83c\udf10 \ud83d\udc46 ReadyAPI \ud83c\ude38 \ud83d\udece:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.utils import get_openapi\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n\n\ndef custom_openapi():\n    if app.openapi_schema:\n        return app.openapi_schema\n    openapi_schema = get_openapi(\n        title=\"Custom title\",\n        version=\"2.5.0\",\n        summary=\"This is a very custom OpenAPI schema\",\n        description=\"Here's a longer description of the custom **OpenAPI** schema\",\n        routes=app.routes,\n    )\n    openapi_schema[\"info\"][\"x-logo\"] = {\n        \"url\": \"https://readyapi.github.io/img/logo-margin/logo-teal.png\"\n    }\n    app.openapi_schema = openapi_schema\n    return app.openapi_schema\n\n\napp.openapi = custom_openapi\n</code></pre>"},{"location":"how-to/extending-openapi/#_4","title":"\ud83c\udfd7 \ud83d\uddc4 \ud83d\udd17","text":"<p>\u2934\ufe0f, \u2699\ufe0f \ud83c\udf8f \ud83d\ude99 \ud83d\udd22 \ud83c\udfd7 \ud83d\uddc4 \ud83d\udd17, \ud83d\udd18 <code>custom_openapi()</code> \ud83d\udd22:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.utils import get_openapi\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n\n\ndef custom_openapi():\n    if app.openapi_schema:\n        return app.openapi_schema\n    openapi_schema = get_openapi(\n        title=\"Custom title\",\n        version=\"2.5.0\",\n        summary=\"This is a very custom OpenAPI schema\",\n        description=\"Here's a longer description of the custom **OpenAPI** schema\",\n        routes=app.routes,\n    )\n    openapi_schema[\"info\"][\"x-logo\"] = {\n        \"url\": \"https://readyapi.github.io/img/logo-margin/logo-teal.png\"\n    }\n    app.openapi_schema = openapi_schema\n    return app.openapi_schema\n\n\napp.openapi = custom_openapi\n</code></pre>"},{"location":"how-to/extending-openapi/#_5","title":"\ud83d\udd00 \ud83d\uddc4 \ud83d\udd17","text":"<p>\ud83d\udd1c \ud83d\udc46 \ud83d\udcaa \ud83d\udeae \ud83d\udcc4 \u2194, \u274e \ud83d\udec3 <code>x-logo</code> <code>info</code> \"\ud83c\udf9a\" \ud83d\uddc4 \ud83d\udd17:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.utils import get_openapi\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n\n\ndef custom_openapi():\n    if app.openapi_schema:\n        return app.openapi_schema\n    openapi_schema = get_openapi(\n        title=\"Custom title\",\n        version=\"2.5.0\",\n        summary=\"This is a very custom OpenAPI schema\",\n        description=\"Here's a longer description of the custom **OpenAPI** schema\",\n        routes=app.routes,\n    )\n    openapi_schema[\"info\"][\"x-logo\"] = {\n        \"url\": \"https://readyapi.github.io/img/logo-margin/logo-teal.png\"\n    }\n    app.openapi_schema = openapi_schema\n    return app.openapi_schema\n\n\napp.openapi = custom_openapi\n</code></pre>"},{"location":"how-to/extending-openapi/#_6","title":"\ud83d\udcbe \ud83d\uddc4 \ud83d\udd17","text":"<p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83c\udfe0 <code>.openapi_schema</code> \"\ud83d\udcbe\", \ud83c\udfea \ud83d\udc46 \ud83c\udfd7 \ud83d\udd17.</p> <p>\ud83d\udc48 \ud83c\udf0c, \ud83d\udc46 \ud83c\ude38 \ud83c\udfc6 \ud83d\udeab \u2714\ufe0f \ud83c\udfd7 \ud83d\udd17 \ud83d\udd20 \ud83d\udd70 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udcc2 \ud83d\udc46 \ud83d\udee0\ufe0f \ud83e\ude7a.</p> <p>\u26ab\ufe0f \ud83d\udd1c \ud83c\udfd7 \ud83d\udd74 \ud83d\udd50, &amp; \u2934\ufe0f \ud83c\udf8f \ud83d\udcbe \ud83d\udd17 \ud83d\udd1c \u2699\ufe0f \u23ed \ud83d\udce8.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.utils import get_openapi\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n\n\ndef custom_openapi():\n    if app.openapi_schema:\n        return app.openapi_schema\n    openapi_schema = get_openapi(\n        title=\"Custom title\",\n        version=\"2.5.0\",\n        summary=\"This is a very custom OpenAPI schema\",\n        description=\"Here's a longer description of the custom **OpenAPI** schema\",\n        routes=app.routes,\n    )\n    openapi_schema[\"info\"][\"x-logo\"] = {\n        \"url\": \"https://readyapi.github.io/img/logo-margin/logo-teal.png\"\n    }\n    app.openapi_schema = openapi_schema\n    return app.openapi_schema\n\n\napp.openapi = custom_openapi\n</code></pre>"},{"location":"how-to/extending-openapi/#_7","title":"\ud83d\udd10 \ud83d\udc69\u200d\ud83d\udd2c","text":"<p>\ud83d\udd1c \ud83d\udc46 \ud83d\udcaa \u274e <code>.openapi()</code> \ud83d\udc69\u200d\ud83d\udd2c \u23ee\ufe0f \ud83d\udc46 \ud83c\udd95 \ud83d\udd22.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.utils import get_openapi\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n\n\ndef custom_openapi():\n    if app.openapi_schema:\n        return app.openapi_schema\n    openapi_schema = get_openapi(\n        title=\"Custom title\",\n        version=\"2.5.0\",\n        summary=\"This is a very custom OpenAPI schema\",\n        description=\"Here's a longer description of the custom **OpenAPI** schema\",\n        routes=app.routes,\n    )\n    openapi_schema[\"info\"][\"x-logo\"] = {\n        \"url\": \"https://readyapi.github.io/img/logo-margin/logo-teal.png\"\n    }\n    app.openapi_schema = openapi_schema\n    return app.openapi_schema\n\n\napp.openapi = custom_openapi\n</code></pre>"},{"location":"how-to/extending-openapi/#_8","title":"\u2705 \u26ab\ufe0f","text":"<p>\ud83d\udd50 \ud83d\udc46 \ud83d\udeb6 http://127.0.0.1:8000/redoc \ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \ud83d\udc48 \ud83d\udc46 \u2699\ufe0f \ud83d\udc46 \ud83d\udec3 \ud83d\udd31 (\ud83d\udc49 \ud83d\uddbc, ReadyAPI'\u24c2 \ud83d\udd31):</p> <p></p>"},{"location":"how-to/graphql/","title":"\ud83d\udd79","text":"<p>ReadyAPI \u2693\ufe0f \ud83d\udd1b \ud83d\udd2b \ud83d\udc29, \u26ab\ufe0f \ud83d\udcf6 \u23e9 \ud83d\udee0\ufe0f \ud83d\ude46 \ud83d\udd79 \ud83d\uddc3 \ud83d\udd17 \u23ee\ufe0f \ud83d\udd2b.</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83c\udf00 \ud83d\ude10 ReadyAPI \u27a1 \ud83d\udee0\ufe0f \u23ee\ufe0f \ud83d\udd79 \ud83d\udd1b \ud83c\udf8f \ud83c\ude38.</p> <p>Tip</p> <p>\ud83d\udd79 \u274e \ud83d\udcf6 \ud83c\udfaf \u2699\ufe0f \ud83d\udcbc.</p> <p>\u26ab\ufe0f \u2714\ufe0f \ud83d\udcc8 &amp; \u26a0 \ud83d\udd50\u2754 \ud83d\udd2c \u26a0 \ud83d\udd78 \ud83d\udd17.</p> <p>\u2692 \ud83d\udcad \ud83d\udc46 \ud83d\udd2c \ud83d\udea5 \ud83d\udcb0 \ud83d\udc46 \u2699\ufe0f \ud83d\udcbc \u2696 \ud83d\udc50. \ud83d\udc76</p>"},{"location":"how-to/graphql/#_2","title":"\ud83d\udd79 \ud83d\uddc3","text":"<p>\ud83d\udce5 \ud83d\udd79 \ud83d\uddc3 \ud83d\udc48 \u2714\ufe0f \ud83d\udd2b \ud83d\udc15\u200d\ud83e\uddba. \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83d\udc6b \u23ee\ufe0f ReadyAPI:</p> <ul> <li>\ud83c\udf53 \ud83d\udc76<ul> <li>\u23ee\ufe0f \ud83e\ude7a ReadyAPI</li> </ul> </li> <li>\ud83d\udc78<ul> <li>\u23ee\ufe0f \ud83e\ude7a ReadyAPI</li> </ul> </li> <li>\ud83c\udf5f<ul> <li>\u23ee\ufe0f \ud83c\udf5f \ud83d\udd2b \ud83d\ude9a \ud83d\udd2b \ud83d\udee0\ufe0f</li> </ul> </li> <li>\u2697<ul> <li>\u23ee\ufe0f \ud83d\udc83-Graphene3\ufe0f\u20e3</li> </ul> </li> </ul>"},{"location":"how-to/graphql/#_3","title":"\ud83d\udd79 \u23ee\ufe0f \ud83c\udf53","text":"<p>\ud83d\udea5 \ud83d\udc46 \ud83d\udcaa \u2696\ufe0f \ud83d\udc9a \ud83d\udc77 \u23ee\ufe0f \ud83d\udd79, \ud83c\udf53 \ud83d\udc4d \ud83d\uddc3 \u26ab\ufe0f \u2714\ufe0f \ud83d\udd27 \ud83d\udd10 ReadyAPI \ud83d\udd27, \u26ab\ufe0f \ud83c\udf10 \u2693\ufe0f \ud83d\udd1b \ud83c\udd8e \u270d.</p> <p>\u2693\ufe0f \ud83d\udd1b \ud83d\udc46 \u2699\ufe0f \ud83d\udcbc, \ud83d\udc46 5\ufe0f\u20e3\ud83d\udcc6 \ud83d\udc96 \u2699\ufe0f \ud83c\udf8f \ud83d\uddc3, \u270b\ufe0f \ud83d\udea5 \ud83d\udc46 \ud83d\udcad \ud83d\udc64, \ud83d\udc64 \ud83d\udd1c \ud83c\udfb2 \ud83e\udd14 \ud83d\udc46 \ud83d\udd04 \ud83c\udf53.</p> <p>\ud83d\udce5 \ud83e\udd2a \ud83c\udfae \u2754 \ud83d\udc46 \ud83d\udcaa \ud83d\udee0\ufe0f \ud83c\udf53 \u23ee\ufe0f ReadyAPI:</p> Python 3.8+ <pre><code>import strawberry\nfrom readyapi import ReadyAPI\nfrom strawberry.readyapi import GraphQLRouter\n\n\n@strawberry.type\nclass User:\n    name: str\n    age: int\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def user(self) -&gt; User:\n        return User(name=\"Patrick\", age=100)\n\n\nschema = strawberry.Schema(query=Query)\n\n\ngraphql_app = GraphQLRouter(schema)\n\napp = ReadyAPI()\napp.include_router(graphql_app, prefix=\"/graphql\")\n</code></pre> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udca1 \ud83c\udf05 \ud83d\udd03 \ud83c\udf53 \ud83c\udf53 \ud83e\uddfe.</p> <p>&amp; \ud83e\ude7a \ud83d\udd03 \ud83c\udf53 \u23ee\ufe0f ReadyAPI.</p>"},{"location":"how-to/graphql/#graphqlapp","title":"\ud83d\udddd <code>GraphQLApp</code> \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc83","text":"<p>\u23ee\ufe0f \u23ec \ud83d\udc83 \ud83d\udd0c <code>GraphQLApp</code> \ud83c\udf93 \ud83d\udee0\ufe0f \u23ee\ufe0f \u2697.</p> <p>\u26ab\ufe0f \ud83d\ude22 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc83, \u270b\ufe0f \ud83d\udea5 \ud83d\udc46 \u2714\ufe0f \ud83d\udcdf \ud83d\udc48 \u2699\ufe0f \u26ab\ufe0f, \ud83d\udc46 \ud83d\udcaa \ud83d\udcaa \u2194 \ud83d\udc83-Graphene3\ufe0f\u20e3, \ud83d\udc48 \ud83d\udcd4 \ud83c\udf8f \u2699\ufe0f \ud83d\udcbc &amp; \u2714\ufe0f \ud83c\udf16 \ud83c\udf13 \ud83d\udd22.</p> <p>Tip</p> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udcaa \ud83d\udd79, \ud83d\udc64 \ud83d\udd1c \ud83d\udc4d \ud83d\udc46 \u2705 \ud83d\udc45 \ud83c\udf53, \u26ab\ufe0f \u2693\ufe0f \ud83d\udd1b \ud83c\udd8e \u270d \u21a9\ufe0f \ud83d\udec3 \ud83c\udf93 &amp; \ud83c\udd8e.</p>"},{"location":"how-to/graphql/#_4","title":"\ud83d\udca1 \ud83c\udf05","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udca1 \ud83c\udf05 \ud83d\udd03 \ud83d\udd79 \ud83d\udec2 \ud83d\udd79 \ud83e\uddfe.</p> <p>\ud83d\udc46 \ud83d\udcaa \u270d \ud83c\udf05 \ud83d\udd03 \ud83d\udd20 \ud83d\udc48 \ud83d\uddc3 \ud83d\udd2c \ud83d\udd1b \ud83d\udc6b \ud83d\udd17.</p>"},{"location":"tutorial/","title":"\ud83d\udd30 - \ud83d\udc69\u200d\ud83d\udcbb \ud83e\uddae","text":"<p>\ud83d\udc49 \ud83d\udd30 \ud83c\udfa6 \ud83d\udc46 \u2754 \u2699\ufe0f ReadyAPI \u23ee\ufe0f \ud83c\udf05 \ud83d\udeae \u2692, \ud83d\udd01 \ud83d\udd01.</p> <p>\ud83d\udd20 \ud83d\udcc4 \ud83d\udcc9 \ud83c\udfd7 \ud83d\udd1b \u23ee\ufe0f \ud83d\udd50, \u270b\ufe0f \u26ab\ufe0f \ud83c\udfd7 \ud83c\udf8f \u2754, \ud83d\udc48 \ud83d\udc46 \ud83d\udcaa \ud83d\udeb6 \ud83d\udd17 \ud83d\ude46 \ud83c\udfaf 1\ufe0f\u20e3 \u274e \ud83d\udc46 \ud83c\udfaf \ud83d\udee0\ufe0f \ud83d\udcaa.</p> <p>\u26ab\ufe0f \ud83c\udfd7 \ud83d\udc77 \ud83d\udd2e \ud83d\udd17.</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udc5f \ud83d\udd19 &amp; \ud83d\udc40 \u26ab\ufe0f\u2754 \u26ab\ufe0f\u2754 \ud83d\udc46 \ud83d\udcaa.</p>"},{"location":"tutorial/#_1","title":"\ud83c\udfc3 \ud83d\udcdf","text":"<p>\ud83c\udf10 \ud83d\udcdf \ud83c\udf6b \ud83d\udcaa \ud83d\udcc1 &amp; \u2699\ufe0f \ud83d\udd17 (\ud83d\udc6b \ud83e\udd19 \ud83d\udcaf \ud83d\udc0d \ud83d\udcc1).</p> <p>\ud83c\udfc3 \ud83d\ude46 \ud83d\uddbc, \ud83d\udcc1 \ud83d\udcdf \ud83d\udcc1 <code>main.py</code>, &amp; \u25b6\ufe0f <code>uvicorn</code> \u23ee\ufe0f:</p> <pre><code>$ uvicorn main:app --reload\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Started reloader process [28720]\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Started server process [28722]\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Waiting for application startup.\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Application startup complete.\n</code></pre> <p>\u26ab\ufe0f \ud83c\udfc6 \ud83d\udca1 \ud83d\udc48 \ud83d\udc46 \u270d \u2696\ufe0f \ud83d\udcc1 \ud83d\udcdf, \u270d \u26ab\ufe0f &amp; \ud83c\udfc3 \u26ab\ufe0f \ud83c\udf10.</p> <p>\u2699\ufe0f \u26ab\ufe0f \ud83d\udc46 \ud83d\udc68\u200d\ud83c\udfa8 \u26ab\ufe0f\u2754 \ud83e\udd19 \ud83c\udfa6 \ud83d\udc46 \ud83d\udcb0 ReadyAPI, \ud83d\udc40 \u2754 \ud83d\udc25 \ud83d\udcdf \ud83d\udc46 \u2714\ufe0f \u270d, \ud83c\udf10 \ud83c\udd8e \u2705, \u270d, \u2652\ufe0f.</p>"},{"location":"tutorial/#readyapi","title":"\u274e ReadyAPI","text":"<p>\ud83e\udd47 \ud83d\udd01 \u274e ReadyAPI.</p> <p>\ud83d\udd30, \ud83d\udc46 \ud83d\udcaa \ud83d\udc9a \u274e \u26ab\ufe0f \u23ee\ufe0f \ud83c\udf10 \ud83d\udce6 \ud83d\udd17 &amp; \u2692:</p> <pre><code>$ pip install \"readyapi[all]\"\n\n---&gt; 100%\n</code></pre> <p>...\ud83d\udc48 \ud83d\udd0c <code>uvicorn</code>, \ud83d\udc48 \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83d\udcbd \ud83d\udc48 \ud83c\udfc3 \ud83d\udc46 \ud83d\udcdf.</p> <p>Note</p> <p>\ud83d\udc46 \ud83d\udcaa \u274e \u26ab\ufe0f \ud83c\udf55 \ud83c\udf55.</p> <p>\ud83d\udc49 \u26ab\ufe0f\u2754 \ud83d\udc46 \ud83d\udd1c \ud83c\udfb2 \ud83d\udd50 \ud83d\udc46 \ud83d\udc9a \ud83d\udee0\ufe0f \ud83d\udc46 \ud83c\ude38 \ud83c\udfed:</p> <pre><code>pip install \"readyapi[standard]\"\n</code></pre> <p>\u274e <code>uvicorn</code> \ud83d\udc77 \ud83d\udcbd:</p> <pre><code>pip install \"uvicorn[standard]\"\n</code></pre> <p>&amp; \ud83c\udf8f \ud83d\udd20 \ud83d\udce6 \ud83d\udd17 \ud83d\udc48 \ud83d\udc46 \ud83d\udc9a \u2699\ufe0f.</p>"},{"location":"tutorial/#_2","title":"\ud83c\udfe7 \ud83d\udc69\u200d\ud83d\udcbb \ud83e\uddae","text":"<p>\ud83d\udce4 \ud83c\udfe7 \ud83d\udc69\u200d\ud83d\udcbb \ud83e\uddae \ud83d\udc48 \ud83d\udc46 \ud83d\udcaa \u270d \u23ea \u23ee\ufe0f \ud83d\udc49 \ud83d\udd30 - \ud83d\udc69\u200d\ud83d\udcbb \ud83e\uddae.</p> <p>\ud83c\udfe7 \ud83d\udc69\u200d\ud83d\udcbb \ud83e\uddae, \ud83c\udfd7 \ud83d\udd1b \ud83d\udc49, \u2699\ufe0f \ud83c\udf8f \ud83d\udd27, &amp; \ud83d\udca1 \ud83d\udc46 \u2795 \u2692.</p> <p>\u270b\ufe0f \ud83d\udc46 \ud83d\udd1c \ud83e\udd47 \u270d \ud83d\udd30 - \ud83d\udc69\u200d\ud83d\udcbb \ud83e\uddae (\u26ab\ufe0f\u2754 \ud83d\udc46 \ud83d\udc42 \u25b6\ufe0f\ufe0f \ud83d\udd1c).</p> <p>\u26ab\ufe0f \ud83d\udd27 \ud83d\udc48 \ud83d\udc46 \ud83d\udcaa \ud83c\udfd7 \ud83c\udfc1 \ud83c\ude38 \u23ee\ufe0f \ud83d\udd30 - \ud83d\udc69\u200d\ud83d\udcbb \ud83e\uddae, &amp; \u2934\ufe0f \u2194 \u26ab\ufe0f \ud83c\udf8f \ud83c\udf0c, \u2693\ufe0f \ud83d\udd1b \ud83d\udc46 \ud83d\udcaa, \u2699\ufe0f \ud83c\udf16 \ud83d\udcad \u26aa\ufe0f\u27a1\ufe0f \ud83c\udfe7 \ud83d\udc69\u200d\ud83d\udcbb \ud83e\uddae.</p>"},{"location":"tutorial/background-tasks/","title":"\ud83d\udda5 \ud83d\udccb","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udd2c \ud83d\udda5 \ud83d\udccb \ud83c\udfc3 \u23ee\ufe0f \ud83d\udeec \ud83d\udce8.</p> <p>\ud83d\udc49 \u26a0 \ud83d\udee0\ufe0f \ud83d\udc48 \ud83d\udcaa \ud83d\udd28 \u23ee\ufe0f \ud83d\udce8, \u270b\ufe0f \ud83d\udc48 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udeab \ud83e\udd19 \u2714\ufe0f \u231b \ud83d\udee0\ufe0f \ud83c\udfc1 \u23ed \ud83d\udce8 \ud83d\udce8.</p> <p>\ud83d\udc49 \ud83d\udd0c, \ud83d\uddbc:</p> <ul> <li>\ud83d\udce7 \ud83d\udce8 \ud83d\udce8 \u23ee\ufe0f \ud83c\udfad \ud83c\udfaf:<ul> <li>\ud83d\udd17 \ud83d\udce7 \ud83d\udcbd &amp; \ud83d\udce8 \ud83d\udce7 \ud83d\ude11 \"\ud83d\udc0c\" (\ud83d\udcda \ud83e\udd48), \ud83d\udc46 \ud83d\udcaa \ud83d\udce8 \ud83d\udce8 \u25b6\ufe0f\ufe0f \u2196\ufe0f &amp; \ud83d\udce8 \ud83d\udce7 \ud83d\udce8 \ud83d\udda5.</li> </ul> </li> <li>\ud83c\udfed \ud83d\udcbd:<ul> <li>\ud83d\uddbc, \u27a1\ufe0f \ud83d\udcac \ud83d\udc46 \ud83d\udce8 \ud83d\udcc1 \ud83d\udc48 \ud83d\udd1c \ud83d\udeb6 \ud83d\udd18 \ud83d\udc0c \ud83d\udee0\ufe0f, \ud83d\udc46 \ud83d\udcaa \ud83d\udce8 \ud83d\udce8 \"\ud83d\udeab\" (\ud83c\uddfa\ud83c\uddf8\ud83d\udd0d 2\ufe0f\u20e30\ufe0f\u20e32\ufe0f\u20e3) &amp; \ud83d\udee0\ufe0f \u26ab\ufe0f \ud83d\udda5.</li> </ul> </li> </ul>"},{"location":"tutorial/background-tasks/#backgroundtasks","title":"\u2699\ufe0f <code>BackgroundTasks</code>","text":"<p>\ud83e\udd47, \ud83d\uddc4 <code>BackgroundTasks</code> &amp; \ud83d\udd2c \ud83d\udd22 \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22 \u23ee\ufe0f \ud83c\udd8e \ud83d\udcc4 <code>BackgroundTasks</code>:</p> Python 3.8+ <pre><code>from readyapi import BackgroundTasks, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef write_notification(email: str, message=\"\"):\n    with open(\"log.txt\", mode=\"w\") as email_file:\n        content = f\"notification for {email}: {message}\"\n        email_file.write(content)\n\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(email: str, background_tasks: BackgroundTasks):\n    background_tasks.add_task(write_notification, email, message=\"some notification\")\n    return {\"message\": \"Notification sent in the background\"}\n</code></pre> <p>ReadyAPI \ud83d\udd1c \u270d \ud83c\udf9a \ud83c\udd8e <code>BackgroundTasks</code> \ud83d\udc46 &amp; \ud83d\udeb6\u200d\u2640\ufe0f \u26ab\ufe0f \ud83d\udc48 \ud83d\udd22.</p>"},{"location":"tutorial/background-tasks/#_2","title":"\u270d \ud83d\udccb \ud83d\udd22","text":"<p>\u270d \ud83d\udd22 \ud83c\udfc3 \ud83d\udda5 \ud83d\udccb.</p> <p>\u26ab\ufe0f \ud83d\udc29 \ud83d\udd22 \ud83d\udc48 \ud83d\udcaa \ud83d\udce8 \ud83d\udd22.</p> <p>\u26ab\ufe0f \ud83d\udcaa <code>async def</code> \u2696\ufe0f \ud83d\ude10 <code>def</code> \ud83d\udd22, ReadyAPI \ud83d\udd1c \ud83d\udcad \u2754 \ud83c\udf75 \u26ab\ufe0f \u2611.</p> <p>\ud83d\udc49 \ud83d\udcbc, \ud83d\udccb \ud83d\udd22 \ud83d\udd1c \u270d \ud83d\udcc1 (\u2696 \ud83d\udce8 \ud83d\udce7).</p> <p>&amp; \u270d \ud83d\udee0\ufe0f \ud83d\udeab \u2699\ufe0f <code>async</code> &amp; <code>await</code>, \ud83d\udc65 \ud83d\udd2c \ud83d\udd22 \u23ee\ufe0f \ud83d\ude10 <code>def</code>:</p> Python 3.8+ <pre><code>from readyapi import BackgroundTasks, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef write_notification(email: str, message=\"\"):\n    with open(\"log.txt\", mode=\"w\") as email_file:\n        content = f\"notification for {email}: {message}\"\n        email_file.write(content)\n\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(email: str, background_tasks: BackgroundTasks):\n    background_tasks.add_task(write_notification, email, message=\"some notification\")\n    return {\"message\": \"Notification sent in the background\"}\n</code></pre>"},{"location":"tutorial/background-tasks/#_3","title":"\ud83d\udeae \ud83d\udda5 \ud83d\udccb","text":"<p>\ud83d\udd18 \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22, \ud83d\udeb6\u200d\u2640\ufe0f \ud83d\udc46 \ud83d\udccb \ud83d\udd22 \ud83d\udda5 \ud83d\udccb \ud83c\udf9a \u23ee\ufe0f \ud83d\udc69\u200d\ud83d\udd2c <code>.add_task()</code>:</p> Python 3.8+ <pre><code>from readyapi import BackgroundTasks, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef write_notification(email: str, message=\"\"):\n    with open(\"log.txt\", mode=\"w\") as email_file:\n        content = f\"notification for {email}: {message}\"\n        email_file.write(content)\n\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(email: str, background_tasks: BackgroundTasks):\n    background_tasks.add_task(write_notification, email, message=\"some notification\")\n    return {\"message\": \"Notification sent in the background\"}\n</code></pre> <p><code>.add_task()</code> \ud83d\udce8 \u274c:</p> <ul> <li>\ud83d\udccb \ud83d\udd22 \ud83c\udfc3 \ud83d\udda5 (<code>write_notification</code>).</li> <li>\ud83d\ude46 \ud83d\udd01 \u274c \ud83d\udc48 \ud83d\udd1c \ud83d\udeb6\u200d\u2640\ufe0f \ud83d\udccb \ud83d\udd22 \u2714 (<code>email</code>).</li> <li>\ud83d\ude46 \ud83c\udde8\ud83c\uddfb \u274c \ud83d\udc48 \ud83d\udd1c \ud83d\udeb6\u200d\u2640\ufe0f \ud83d\udccb \ud83d\udd22 (<code>message=\"some notification\"</code>).</li> </ul>"},{"location":"tutorial/background-tasks/#_4","title":"\ud83d\udd17 \ud83d\udc89","text":"<p>\u2699\ufe0f <code>BackgroundTasks</code> \ud83d\udc77 \u23ee\ufe0f \ud83d\udd17 \ud83d\udc89 \u2699\ufe0f, \ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83d\udd22 \ud83c\udd8e <code>BackgroundTasks</code> \ud83d\udc97 \ud83c\udf9a: \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22, \ud83d\udd17 (\u2611), \ud83c\udfa7-\ud83d\udd17, \u2652\ufe0f.</p> <p>ReadyAPI \ud83d\udcad \u26ab\ufe0f\u2754 \ud83d\udd20 \ud83d\udcbc &amp; \u2754 \ud83c\udfe4-\u2699\ufe0f \ud83c\udf8f \ud83c\udf9a, \ud83d\udc48 \ud83c\udf10 \ud83d\udda5 \ud83d\udccb \ud83d\udd17 \ud83d\udc6f\u200d\u2642\ufe0f &amp; \ud83c\udfc3 \ud83d\udda5 \u23ee\ufe0f:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom readyapi import BackgroundTasks, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef write_log(message: str):\n    with open(\"log.txt\", mode=\"a\") as log:\n        log.write(message)\n\n\ndef get_query(background_tasks: BackgroundTasks, q: Union[str, None] = None):\n    if q:\n        message = f\"found query: {q}\\n\"\n        background_tasks.add_task(write_log, message)\n    return q\n\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(\n    email: str, background_tasks: BackgroundTasks, q: str = Depends(get_query)\n):\n    message = f\"message to {email}\\n\"\n    background_tasks.add_task(write_log, message)\n    return {\"message\": \"Message sent\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import BackgroundTasks, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef write_log(message: str):\n    with open(\"log.txt\", mode=\"a\") as log:\n        log.write(message)\n\n\ndef get_query(background_tasks: BackgroundTasks, q: str | None = None):\n    if q:\n        message = f\"found query: {q}\\n\"\n        background_tasks.add_task(write_log, message)\n    return q\n\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(\n    email: str, background_tasks: BackgroundTasks, q: Annotated[str, Depends(get_query)]\n):\n    message = f\"message to {email}\\n\"\n    background_tasks.add_task(write_log, message)\n    return {\"message\": \"Message sent\"}\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import BackgroundTasks, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef write_log(message: str):\n    with open(\"log.txt\", mode=\"a\") as log:\n        log.write(message)\n\n\ndef get_query(background_tasks: BackgroundTasks, q: Union[str, None] = None):\n    if q:\n        message = f\"found query: {q}\\n\"\n        background_tasks.add_task(write_log, message)\n    return q\n\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(\n    email: str, background_tasks: BackgroundTasks, q: Annotated[str, Depends(get_query)]\n):\n    message = f\"message to {email}\\n\"\n    background_tasks.add_task(write_log, message)\n    return {\"message\": \"Message sent\"}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import BackgroundTasks, Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\ndef write_log(message: str):\n    with open(\"log.txt\", mode=\"a\") as log:\n        log.write(message)\n\n\ndef get_query(background_tasks: BackgroundTasks, q: Union[str, None] = None):\n    if q:\n        message = f\"found query: {q}\\n\"\n        background_tasks.add_task(write_log, message)\n    return q\n\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(\n    email: str, background_tasks: BackgroundTasks, q: Annotated[str, Depends(get_query)]\n):\n    message = f\"message to {email}\\n\"\n    background_tasks.add_task(write_log, message)\n    return {\"message\": \"Message sent\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import BackgroundTasks, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef write_log(message: str):\n    with open(\"log.txt\", mode=\"a\") as log:\n        log.write(message)\n\n\ndef get_query(background_tasks: BackgroundTasks, q: str | None = None):\n    if q:\n        message = f\"found query: {q}\\n\"\n        background_tasks.add_task(write_log, message)\n    return q\n\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(\n    email: str, background_tasks: BackgroundTasks, q: str = Depends(get_query)\n):\n    message = f\"message to {email}\\n\"\n    background_tasks.add_task(write_log, message)\n    return {\"message\": \"Message sent\"}\n</code></pre> <p>\ud83d\udc49 \ud83d\uddbc, \ud83d\udce7 \ud83d\udd1c \u270d <code>log.txt</code> \ud83d\udcc1 \u23ee\ufe0f \ud83d\udce8 \ud83d\udce8.</p> <p>\ud83d\udea5 \ud83d\udce4 \ud83d\udd22 \ud83d\udce8, \u26ab\ufe0f \ud83d\udd1c \u270d \ud83d\udd79 \ud83d\udda5 \ud83d\udccb.</p> <p>&amp; \u2934\ufe0f \u27951\ufe0f\u20e3 \ud83d\udda5 \ud83d\udccb \ud83c\udfd7 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22 \ud83d\udd1c \u270d \ud83d\udce7 \u2699\ufe0f <code>email</code> \u27a1 \ud83d\udd22.</p>"},{"location":"tutorial/background-tasks/#i","title":"\ud83d\udce1 \u2139","text":"<p>\ud83c\udf93 <code>BackgroundTasks</code> \ud83d\udc5f \ud83d\udd17 \u26aa\ufe0f\u27a1\ufe0f <code>starlette.background</code>.</p> <p>\u26ab\ufe0f \ud83d\uddc4/\ud83d\udd0c \ud83d\udd17 \ud83d\udd18 ReadyAPI \ud83d\udc48 \ud83d\udc46 \ud83d\udcaa \ud83d\uddc4 \u26ab\ufe0f \u26aa\ufe0f\u27a1\ufe0f <code>readyapi</code> &amp; \u274e \ud83d\ude2b \ud83d\uddc4 \ud83c\udf9b <code>BackgroundTask</code> (\ud83c\udf75 <code>s</code> \ud83d\udd1a) \u26aa\ufe0f\u27a1\ufe0f <code>starlette.background</code>.</p> <p>\ud83d\udd74 \u2699\ufe0f <code>BackgroundTasks</code> (&amp; \ud83d\udeab <code>BackgroundTask</code>), \u26ab\ufe0f \u2934\ufe0f \ud83d\udcaa \u2699\ufe0f \u26ab\ufe0f \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22 \ud83d\udd22 &amp; \u2714\ufe0f ReadyAPI \ud83c\udf75 \ud83c\udf82 \ud83d\udc46, \ud83d\udc96 \ud83d\udd50\u2754 \u2699\ufe0f <code>Request</code> \ud83c\udf9a \ud83d\udd17.</p> <p>\u26ab\ufe0f \ud83d\udcaa \u2699\ufe0f <code>BackgroundTask</code> \ud83d\ude1e ReadyAPI, \u270b\ufe0f \ud83d\udc46 \u2714\ufe0f \u270d \ud83c\udf9a \ud83d\udc46 \ud83d\udcdf &amp; \ud83d\udce8 \ud83d\udc83 <code>Response</code> \ud83d\udd0c \u26ab\ufe0f.</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udc40 \ud83c\udf16 \u2139 \ud83d\udc83 \ud83d\udec2 \ud83e\ude7a \ud83d\udda5 \ud83d\udccb.</p>"},{"location":"tutorial/background-tasks/#_5","title":"\u26a0","text":"<p>\ud83d\udea5 \ud83d\udc46 \ud83d\udcaa \ud83c\udfad \ud83c\udfcb\ufe0f \ud83d\udda5 \ud83d\udcca &amp; \ud83d\udc46 \ud83d\udeab \ud83c\udfaf \ud83d\udcaa \u26ab\ufe0f \ud83c\udfc3 \ud83c\udf8f \ud83d\udee0\ufe0f (\ud83d\uddbc, \ud83d\udc46 \ud83d\udeab \ud83d\udcaa \ud83d\udcb0 \ud83d\udcbe, \ud83d\udd22, \u2652\ufe0f), \ud83d\udc46 \ud83d\udcaa \ud83d\udcb0 \u26aa\ufe0f\u27a1\ufe0f \u2699\ufe0f \ud83c\udf8f \ud83e\udd8f \ud83e\uddf0 \ud83d\udc96 \ud83e\udd52.</p> <p>\ud83d\udc6b \ud83d\ude11 \ud83d\ude9a \ud83c\udf16 \ud83c\udfd7 \ud83d\udcf3, \ud83d\udce7/\ud83d\udc68\u200d\ud83c\udfed \ud83d\udce4 \ud83d\udc68\u200d\ud83d\udcbc, \ud83d\udc96 \u2733 \u2696\ufe0f \u2733, \u270b\ufe0f \ud83d\udc6b \u2714 \ud83d\udc46 \ud83c\udfc3 \ud83d\udda5 \ud83d\udccb \ud83d\udc97 \ud83d\udee0\ufe0f, &amp; \u2734\ufe0f, \ud83d\udc97 \ud83d\udcbd.</p> <p>\u270b\ufe0f \ud83d\udea5 \ud83d\udc46 \ud83d\udcaa \ud83d\udd10 \ud83d\udd22 &amp; \ud83c\udf9a \u26aa\ufe0f\u27a1\ufe0f \ud83c\udf8f ReadyAPI \ud83d\udcf1, \u2696\ufe0f \ud83d\udc46 \ud83d\udcaa \ud83c\udfad \ud83e\udd2a \ud83d\udda5 \ud83d\udccb (\ud83d\udc96 \ud83d\udce8 \ud83d\udce7 \ud83d\udce8), \ud83d\udc46 \ud83d\udcaa \ud83c\udfaf \u2699\ufe0f <code>BackgroundTasks</code>.</p>"},{"location":"tutorial/background-tasks/#_6","title":"\ud83c\udf03","text":"<p>\ud83d\uddc4 &amp; \u2699\ufe0f <code>BackgroundTasks</code> \u23ee\ufe0f \ud83d\udd22 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22 &amp; \ud83d\udd17 \ud83d\udeae \ud83d\udda5 \ud83d\udccb.</p>"},{"location":"tutorial/bigger-applications/","title":"\ud83e\udd8f \ud83c\ude38 - \ud83d\udc97 \ud83d\udcc1","text":"<p>\ud83d\udea5 \ud83d\udc46 \ud83c\udfd7 \ud83c\ude38 \u2696\ufe0f \ud83d\udd78 \ud83d\udee0\ufe0f, \u26ab\ufe0f \ud83d\udece \ud83d\udcbc \ud83d\udc48 \ud83d\udc46 \ud83d\udcaa \ud83d\udeae \ud83c\udf10 \ud83d\udd1b \ud83d\udc41 \ud83d\udcc1.</p> <p>ReadyAPI \ud83d\ude9a \ud83c\udfea \ud83e\uddf0 \ud83d\udcca \ud83d\udc46 \ud83c\ude38 \u23ea \ud83d\udea7 \ud83c\udf10 \ud83d\udcaa.</p> <p>Info</p> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udc5f \u26aa\ufe0f\u27a1\ufe0f \ud83c\udffa, \ud83d\udc49 \ud83d\udd1c \ud83c\udf13 \ud83c\udffa \ud83d\udcd7.</p>"},{"location":"tutorial/bigger-applications/#_1","title":"\ud83d\uddbc \ud83d\udcc1 \ud83d\udcca","text":"<p>\u27a1\ufe0f \ud83d\udcac \ud83d\udc46 \u2714\ufe0f \ud83d\udcc1 \ud83d\udcca \ud83d\udc96 \ud83d\udc49:</p> <pre><code>.\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dependencies.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 routers\n\u2502\u00a0\u00a0 \u2502   \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2502   \u251c\u2500\u2500 items.py\n\u2502\u00a0\u00a0 \u2502   \u2514\u2500\u2500 users.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 internal\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 admin.py\n</code></pre> <p>Tip</p> <p>\ud83d\udce4 \ud83d\udcda <code>__init__.py</code> \ud83d\udcc1: 1\ufe0f\u20e3 \ud83d\udd20 \ud83d\udcc1 \u2696\ufe0f \ud83d\udcc1.</p> <p>\ud83d\udc49 \u26ab\ufe0f\u2754 \u2714 \ud83c\udfed \ud83d\udcdf \u26aa\ufe0f\u27a1\ufe0f 1\ufe0f\u20e3 \ud83d\udcc1 \ud83d\udd18 \u27951\ufe0f\u20e3.</p> <p>\ud83d\uddbc, <code>app/main.py</code> \ud83d\udc46 \ud83d\udcaa \u2714\ufe0f \u23f8 \ud83d\udc96:</p> <pre><code>from app.routers import items\n</code></pre> <ul> <li><code>app</code> \ud83d\udcc1 \ud83d\udd0c \ud83c\udf10. &amp; \u26ab\ufe0f \u2714\ufe0f \ud83d\udec1 \ud83d\udcc1 <code>app/__init__.py</code>, \u26ab\ufe0f \"\ud83d\udc0d \ud83d\udce6\" (\ud83d\uddc3 \"\ud83d\udc0d \ud83d\udd79\"): <code>app</code>.</li> <li>\u26ab\ufe0f \ud83d\udd0c <code>app/main.py</code> \ud83d\udcc1. \u26ab\ufe0f \ud83d\udd18 \ud83d\udc0d \ud83d\udce6 (\ud83d\udcc1 \u23ee\ufe0f \ud83d\udcc1 <code>__init__.py</code>), \u26ab\ufe0f \"\ud83d\udd79\" \ud83d\udc48 \ud83d\udce6: <code>app.main</code>.</li> <li>\ud83d\udce4 <code>app/dependencies.py</code> \ud83d\udcc1, \ud83d\udc96 <code>app/main.py</code>, \u26ab\ufe0f \"\ud83d\udd79\": <code>app.dependencies</code>.</li> <li>\ud83d\udce4 \ud83d\udcc1 <code>app/routers/</code> \u23ee\ufe0f \u27951\ufe0f\u20e3 \ud83d\udcc1 <code>__init__.py</code>, \u26ab\ufe0f \"\ud83d\udc0d \ud83d\udce6\": <code>app.routers</code>.</li> <li>\ud83d\udcc1 <code>app/routers/items.py</code> \ud83d\udd18 \ud83d\udce6, <code>app/routers/</code>,, \u26ab\ufe0f \ud83d\udd01: <code>app.routers.items</code>.</li> <li>\ud83c\udf8f \u23ee\ufe0f <code>app/routers/users.py</code>, \u26ab\ufe0f \u27951\ufe0f\u20e3 \ud83d\udd01: <code>app.routers.users</code>.</li> <li>\ud83d\udce4 \ud83d\udcc1 <code>app/internal/</code> \u23ee\ufe0f \u27951\ufe0f\u20e3 \ud83d\udcc1 <code>__init__.py</code>, \u26ab\ufe0f \u27951\ufe0f\u20e3 \"\ud83d\udc0d \ud83d\udce6\": <code>app.internal</code>.</li> <li>&amp; \ud83d\udcc1 <code>app/internal/admin.py</code> \u27951\ufe0f\u20e3 \ud83d\udd01: <code>app.internal.admin</code>.</li> </ul> <p></p> <p>\ud83c\udf8f \ud83d\udcc1 \ud83d\udcca \u23ee\ufe0f \ud83c\udfe4:</p> <pre><code>.\n\u251c\u2500\u2500 app                  # \"app\" is a Python package\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py      # this file makes \"app\" a \"Python package\"\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.py          # \"main\" module, e.g. import app.main\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dependencies.py  # \"dependencies\" module, e.g. import app.dependencies\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 routers          # \"routers\" is a \"Python subpackage\"\n\u2502\u00a0\u00a0 \u2502   \u251c\u2500\u2500 __init__.py  # makes \"routers\" a \"Python subpackage\"\n\u2502\u00a0\u00a0 \u2502   \u251c\u2500\u2500 items.py     # \"items\" submodule, e.g. import app.routers.items\n\u2502\u00a0\u00a0 \u2502   \u2514\u2500\u2500 users.py     # \"users\" submodule, e.g. import app.routers.users\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 internal         # \"internal\" is a \"Python subpackage\"\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 __init__.py  # makes \"internal\" a \"Python subpackage\"\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 admin.py     # \"admin\" submodule, e.g. import app.internal.admin\n</code></pre>"},{"location":"tutorial/bigger-applications/#apirouter","title":"<code>APIRouter</code>","text":"<p>\u27a1\ufe0f \ud83d\udcac \ud83d\udcc1 \ud83d\udca1 \ud83d\ude9a \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd01 <code>/app/routers/users.py</code>.</p> <p>\ud83d\udc46 \ud83d\udc9a \u2714\ufe0f \u27a1 \ud83d\udee0\ufe0f \ud83d\udd17 \ud83d\udc46 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udc7d \u26aa\ufe0f\u27a1\ufe0f \ud83c\udf82 \ud83d\udcdf, \ud83d\udea7 \u26ab\ufe0f \ud83c\udfd7.</p> <p>\u270b\ufe0f \u26ab\ufe0f \ud83c\udf55 \ud83c\udf8f ReadyAPI \ud83c\ude38/\ud83d\udd78 \ud83d\udee0\ufe0f (\u26ab\ufe0f \ud83c\udf55 \ud83c\udf8f \"\ud83d\udc0d \ud83d\udce6\").</p> <p>\ud83d\udc46 \ud83d\udcaa \u270d \u27a1 \ud83d\udee0\ufe0f \ud83d\udc48 \ud83d\udd79 \u2699\ufe0f <code>APIRouter</code>.</p>"},{"location":"tutorial/bigger-applications/#apirouter_1","title":"\ud83d\uddc4 <code>APIRouter</code>","text":"<p>\ud83d\udc46 \ud83d\uddc4 \u26ab\ufe0f &amp; \u270d \"\ud83d\udc50\" \ud83c\udf8f \ud83c\udf0c \ud83d\udc46 \ud83d\udd1c \u23ee\ufe0f \ud83c\udf93 <code>ReadyAPI</code>:</p> app/routers/users.py<pre><code>from readyapi import APIRouter\n\nrouter = APIRouter()\n\n\n@router.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n\n\n@router.get(\"/users/me\", tags=[\"users\"])\nasync def read_user_me():\n    return {\"username\": \"fakecurrentuser\"}\n\n\n@router.get(\"/users/{username}\", tags=[\"users\"])\nasync def read_user(username: str):\n    return {\"username\": username}\n</code></pre>"},{"location":"tutorial/bigger-applications/#apirouter_2","title":"\u27a1 \ud83d\udee0\ufe0f \u23ee\ufe0f <code>APIRouter</code>","text":"<p>&amp; \u2934\ufe0f \ud83d\udc46 \u2699\ufe0f \u26ab\ufe0f \ud83d\udce3 \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f.</p> <p>\u2699\ufe0f \u26ab\ufe0f \ud83c\udf8f \ud83c\udf0c \ud83d\udc46 \ud83d\udd1c \u2699\ufe0f <code>ReadyAPI</code> \ud83c\udf93:</p> app/routers/users.py<pre><code>from readyapi import APIRouter\n\nrouter = APIRouter()\n\n\n@router.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n\n\n@router.get(\"/users/me\", tags=[\"users\"])\nasync def read_user_me():\n    return {\"username\": \"fakecurrentuser\"}\n\n\n@router.get(\"/users/{username}\", tags=[\"users\"])\nasync def read_user(username: str):\n    return {\"username\": username}\n</code></pre> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udcad <code>APIRouter</code> \"\ud83d\udc29 <code>ReadyAPI</code>\" \ud83c\udf93.</p> <p>\ud83c\udf10 \ud83c\udf8f \ud83c\udf9b \ud83d\udc15\u200d\ud83e\uddba.</p> <p>\ud83c\udf10 \ud83c\udf8f <code>parameters</code>, <code>responses</code>, <code>dependencies</code>, <code>tags</code>, \u2652\ufe0f.</p> <p>Tip</p> <p>\ud83d\udc49 \ud83d\uddbc, \ud83d\udd22 \ud83e\udd19 <code>router</code>, \u270b\ufe0f \ud83d\udc46 \ud83d\udcaa \ud83d\udcdb \u26ab\ufe0f \ud83d\udc50 \ud83d\udc46 \ud83d\udc9a.</p> <p>\ud83d\udc65 \ud83d\udd1c \ud83d\udd0c \ud83d\udc49 <code>APIRouter</code> \ud83d\udc51 <code>ReadyAPI</code> \ud83d\udcf1, \u270b\ufe0f \ud83e\udd47, \u27a1\ufe0f \u2705 \ud83d\udd17 &amp; \u27951\ufe0f\u20e3 <code>APIRouter</code>.</p>"},{"location":"tutorial/bigger-applications/#_2","title":"\ud83d\udd17","text":"<p>\ud83d\udc65 \ud83d\udc40 \ud83d\udc48 \ud83d\udc65 \ud83d\udd1c \ud83d\udcaa \ud83d\udd17 \u2699\ufe0f \ud83d\udcda \ud83e\udd49 \ud83c\ude38.</p> <p>\ud83d\udc65 \ud83d\udeae \ud83d\udc6b \ud83d\udc6b \ud83d\udc4d <code>dependencies</code> \ud83d\udd79 (<code>app/dependencies.py</code>).</p> <p>\ud83d\udc65 \ud83d\udd1c \ud83d\udd1c \u2699\ufe0f \ud83d\ude45 \ud83d\udd17 \u270d \ud83d\udec3 <code>X-Token</code> \ud83c\udf9a:</p> app/dependencies.py<pre><code>from readyapi import Header, HTTPException\n\n\nasync def get_token_header(x_token: str = Header()):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def get_query_token(token: str):\n    if token != \"jessica\":\n        raise HTTPException(status_code=400, detail=\"No Jessica token provided\")\n</code></pre> <p>Tip</p> <p>\ud83d\udc65 \u2699\ufe0f \ud83d\udcad \ud83c\udf9a \ud83d\udcc9 \ud83d\udc49 \ud83d\uddbc.</p> <p>\u270b\ufe0f \ud83c\udfb0 \ud83d\udcbc \ud83d\udc46 \ud83d\udd1c \ud83e\udd1a \ud83d\udc4d \ud83c\udfc1 \u2699\ufe0f \ud83d\udee0\ufe0f \ud83d\udc82\u200d\u2642 \ud83d\ude99.</p>"},{"location":"tutorial/bigger-applications/#1-apirouter","title":"\u27951\ufe0f\u20e3 \ud83d\udd79 \u23ee\ufe0f <code>APIRouter</code>","text":"<p>\u27a1\ufe0f \ud83d\udcac \ud83d\udc46 \u2714\ufe0f \ud83d\udd17 \ud83d\udca1 \ud83d\ude9a \"\ud83c\udfec\" \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc46 \ud83c\ude38 \ud83d\udd79 <code>app/routers/items.py</code>.</p> <p>\ud83d\udc46 \u2714\ufe0f \u27a1 \ud83d\udee0\ufe0f :</p> <ul> <li><code>/items/</code></li> <li><code>/items/{item_id}</code></li> </ul> <p>\u26ab\ufe0f \ud83c\udf10 \ud83c\udf8f \ud83d\udcca \u23ee\ufe0f <code>app/routers/users.py</code>.</p> <p>\u270b\ufe0f \ud83d\udc65 \ud83d\udc9a \ud83d\ude43 &amp; \ud83d\udcc9 \ud83d\udcdf \ud83c\udf56.</p> <p>\ud83d\udc65 \ud83d\udcad \ud83c\udf10 \u27a1 \ud83d\udee0\ufe0f \ud83d\udc49 \ud83d\udd79 \u2714\ufe0f \ud83c\udf8f:</p> <ul> <li>\u27a1 <code>prefix</code>: <code>/items</code>.</li> <li><code>tags</code>: (1\ufe0f\u20e3 \ud83d\udd16: <code>items</code>).</li> <li>\u2795 <code>responses</code>.</li> <li><code>dependencies</code>: \ud83d\udc6b \ud83c\udf10 \ud83d\udcaa \ud83d\udc48 <code>X-Token</code> \ud83d\udd17 \ud83d\udc65 \u270d.</li> </ul> <p>, \u21a9\ufe0f \u274e \ud83c\udf10 \ud83d\udc48 \ud83d\udd20 \u27a1 \ud83d\udee0\ufe0f, \ud83d\udc65 \ud83d\udcaa \ud83d\udeae \u26ab\ufe0f <code>APIRouter</code>.</p> app/routers/items.py<pre><code>from readyapi import APIRouter, Depends, HTTPException\n\nfrom ..dependencies import get_token_header\n\nrouter = APIRouter(\n    prefix=\"/items\",\n    tags=[\"items\"],\n    dependencies=[Depends(get_token_header)],\n    responses={404: {\"description\": \"Not found\"}},\n)\n\n\nfake_items_db = {\"plumbus\": {\"name\": \"Plumbus\"}, \"gun\": {\"name\": \"Portal Gun\"}}\n\n\n@router.get(\"/\")\nasync def read_items():\n    return fake_items_db\n\n\n@router.get(\"/{item_id}\")\nasync def read_item(item_id: str):\n    if item_id not in fake_items_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"name\": fake_items_db[item_id][\"name\"], \"item_id\": item_id}\n\n\n@router.put(\n    \"/{item_id}\",\n    tags=[\"custom\"],\n    responses={403: {\"description\": \"Operation forbidden\"}},\n)\nasync def update_item(item_id: str):\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=403, detail=\"You can only update the item: plumbus\"\n        )\n    return {\"item_id\": item_id, \"name\": \"The great Plumbus\"}\n</code></pre> <p>\u27a1 \ud83d\udd20 \u27a1 \ud83d\udee0\ufe0f \u2714\ufe0f \u25b6\ufe0f \u23ee\ufe0f <code>/</code>, \ud83d\udc96:</p> <pre><code>@router.get(\"/{item_id}\")\nasync def read_item(item_id: str):\n    ...\n</code></pre> <p>...\ud83d\udd21 \ud83d\udd1c \ud83d\udeab \ud83d\udd0c \ud83c\udfc1 <code>/</code>.</p> <p>, \ud83d\udd21 \ud83d\udc49 \ud83d\udcbc <code>/items</code>.</p> <p>\ud83d\udc65 \ud83d\udcaa \ud83d\udeae \ud83d\udcc7 <code>tags</code> &amp; \u2795 <code>responses</code> \ud83d\udc48 \ud83d\udd1c \u2714 \ud83c\udf10 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd0c \ud83d\udc49 \ud83d\udcfb.</p> <p>&amp; \ud83d\udc65 \ud83d\udcaa \ud83d\udeae \ud83d\udcc7 <code>dependencies</code> \ud83d\udc48 \ud83d\udd1c \ud83d\udeae \ud83c\udf10 \u27a1 \ud83d\udee0\ufe0f \ud83d\udcfb &amp; \ud83d\udd1c \ud83d\udee0\ufe0f/\u274e \ud83d\udd20 \ud83d\udce8 \u2692 \ud83d\udc6b.</p> <p>Tip</p> <p>\ud83d\uddd2 \ud83d\udc48, \ud83c\udf05 \ud83d\udc96 \ud83d\udd17 \u27a1 \ud83d\udee0\ufe0f \ud83d\udc68\u200d\ud83c\udfa8, \ud83d\ude45\u200d\u2642 \ud83d\udcb2 \ud83d\udd1c \ud83d\udeb6\u200d\u2640\ufe0f \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22.</p> <p>\ud83d\udd1a \ud83c\udfc1 \ud83d\udc48 \ud83c\udfec \u27a1 \ud83d\udd1c:</p> <ul> <li><code>/items/</code></li> <li><code>/items/{item_id}</code></li> </ul> <p>...\ud83d\udc65 \ud83c\udfaf.</p> <ul> <li>\ud83d\udc6b \ud83d\udd1c \u2122 \u23ee\ufe0f \ud83d\udcc7 \ud83d\udd16 \ud83d\udc48 \ud83d\udd0c \ud83d\udc41 \ud83c\udfbb <code>\"items\"</code>.<ul> <li>\ud83d\udc6b \"\ud83d\udd16\" \u2734\ufe0f \u26a0 \ud83c\udfe7 \ud83c\udf93 \ud83e\uddfe \u2699\ufe0f (\u2699\ufe0f \ud83d\uddc4).</li> </ul> </li> <li>\ud83c\udf10 \ud83d\udc6b \ud83d\udd1c \ud83d\udd0c \ud83d\udd01 <code>responses</code>.</li> <li>\ud83c\udf10 \ud83d\udc6b \u27a1 \ud83d\udee0\ufe0f \ud83d\udd1c \u2714\ufe0f \ud83d\udcc7 <code>dependencies</code> \ud83d\udd2c/\ud83d\udee0\ufe0f \u23ed \ud83d\udc6b.<ul> <li>\ud83d\udea5 \ud83d\udc46 \ud83d\udce3 \ud83d\udd17 \ud83c\udfaf \u27a1 \ud83d\udee0\ufe0f, \ud83d\udc6b \ud83d\udd1c \ud83d\udee0\ufe0f \ud83d\udc81\u200d\u2642\ufe0f.</li> <li>\ud83d\udcfb \ud83d\udd17 \ud83d\udee0\ufe0f \ud83e\udd47, \u2934\ufe0f <code>dependencies</code> \ud83d\udc68\u200d\ud83c\udfa8, &amp; \u2934\ufe0f \ud83d\ude10 \ud83d\udd22 \ud83d\udd17.</li> <li>\ud83d\udc46 \ud83d\udcaa \ud83d\udeae <code>Security</code> \ud83d\udd17 \u23ee\ufe0f <code>scopes</code>.</li> </ul> </li> </ul> <p>Tip</p> <p>\u2714\ufe0f <code>dependencies</code> <code>APIRouter</code> \ud83d\udcaa \u2699\ufe0f, \ud83d\uddbc, \ud83d\ude9a \ud83e\udd1d \ud83c\udf82 \ud83d\udc6a \u27a1 \ud83d\udee0\ufe0f. \ud83d\udea5 \ud83d\udd17 \ud83d\udeab \ud83d\udeae \ud83d\udce6 \ud83d\udd20 1\ufe0f\u20e3 \ud83d\udc6b.</p> <p>Check</p> <p><code>prefix</code>, <code>tags</code>, <code>responses</code>, &amp; <code>dependencies</code> \ud83d\udd22 (\ud83d\udcda \ud83c\udf8f \ud83d\udcbc) \u2692 \u26aa\ufe0f\u27a1\ufe0f ReadyAPI \u2139 \ud83d\udc46 \u274e \ud83d\udcdf \u274e.</p>"},{"location":"tutorial/bigger-applications/#_3","title":"\ud83d\uddc4 \ud83d\udd17","text":"<p>\ud83d\udc49 \ud83d\udcdf \ud83d\udc68\u200d\u2764\u200d\ud83d\udc68 \ud83d\udd79 <code>app.routers.items</code>, \ud83d\udcc1 <code>app/routers/items.py</code>.</p> <p>&amp; \ud83d\udc65 \ud83d\udcaa \ud83e\udd1a \ud83d\udd17 \ud83d\udd22 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udd79 <code>app.dependencies</code>, \ud83d\udcc1 <code>app/dependencies.py</code>.</p> <p>\ud83d\udc65 \u2699\ufe0f \u2696 \ud83d\uddc4 \u23ee\ufe0f <code>..</code> \ud83d\udd17:</p> app/routers/items.py<pre><code>from readyapi import APIRouter, Depends, HTTPException\n\nfrom ..dependencies import get_token_header\n\nrouter = APIRouter(\n    prefix=\"/items\",\n    tags=[\"items\"],\n    dependencies=[Depends(get_token_header)],\n    responses={404: {\"description\": \"Not found\"}},\n)\n\n\nfake_items_db = {\"plumbus\": {\"name\": \"Plumbus\"}, \"gun\": {\"name\": \"Portal Gun\"}}\n\n\n@router.get(\"/\")\nasync def read_items():\n    return fake_items_db\n\n\n@router.get(\"/{item_id}\")\nasync def read_item(item_id: str):\n    if item_id not in fake_items_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"name\": fake_items_db[item_id][\"name\"], \"item_id\": item_id}\n\n\n@router.put(\n    \"/{item_id}\",\n    tags=[\"custom\"],\n    responses={403: {\"description\": \"Operation forbidden\"}},\n)\nasync def update_item(item_id: str):\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=403, detail=\"You can only update the item: plumbus\"\n        )\n    return {\"item_id\": item_id, \"name\": \"The great Plumbus\"}\n</code></pre>"},{"location":"tutorial/bigger-applications/#_4","title":"\u2754 \u2696 \ud83d\uddc4 \ud83d\udc77","text":"<p>Tip</p> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udcad \ud83d\udc4c \u2754 \ud83d\uddc4 \ud83d\udc77, \ud83d\ude23 \u23ed \ud83d\udcc4 \ud83d\udd1b.</p> <p>\ud83d\udc41 \u2763 <code>.</code>, \ud83d\udc96:</p> <pre><code>from .dependencies import get_token_header\n</code></pre> <p>\ud83d\udd1c \u26d3:</p> <ul> <li>\u25b6\ufe0f \ud83c\udf8f \ud83d\udce6 \ud83d\udc48 \ud83d\udc49 \ud83d\udd79 (\ud83d\udcc1 <code>app/routers/items.py</code>) \ud83d\udd96 (\ud83d\udcc1 <code>app/routers/</code>)...</li> <li>\ud83d\udd0e \ud83d\udd79 <code>dependencies</code> (\ud83d\udc7d \ud83d\udcc1 <code>app/routers/dependencies.py</code>)...</li> <li>&amp; \u26aa\ufe0f\u27a1\ufe0f \u26ab\ufe0f, \ud83d\uddc4 \ud83d\udd22 <code>get_token_header</code>.</li> </ul> <p>\u270b\ufe0f \ud83d\udc48 \ud83d\udcc1 \ud83d\udeab \ud83d\udd00, \ud83d\udc46 \ud83d\udd17 \ud83d\udcc1 <code>app/dependencies.py</code>.</p> <p>\ud83d\udcad \u2754 \ud83d\udc46 \ud83d\udcf1/\ud83d\udcc1 \ud83d\udcca \ud83d\udc40 \ud83d\udc96:</p> <p></p> <p>2\ufe0f\u20e3 \u2763 <code>..</code>, \ud83d\udc96:</p> <pre><code>from ..dependencies import get_token_header\n</code></pre> <p>\u26d3:</p> <ul> <li>\u25b6\ufe0f \ud83c\udf8f \ud83d\udce6 \ud83d\udc48 \ud83d\udc49 \ud83d\udd79 (\ud83d\udcc1 <code>app/routers/items.py</code>) \ud83d\udd96 (\ud83d\udcc1 <code>app/routers/</code>)...</li> <li>\ud83d\udeb6 \ud83d\udc6a \ud83d\udce6 (\ud83d\udcc1 <code>app/</code>)...</li> <li>&amp; \ud83d\udce4, \ud83d\udd0e \ud83d\udd79 <code>dependencies</code> (\ud83d\udcc1 <code>app/dependencies.py</code>)...</li> <li>&amp; \u26aa\ufe0f\u27a1\ufe0f \u26ab\ufe0f, \ud83d\uddc4 \ud83d\udd22 <code>get_token_header</code>.</li> </ul> <p>\ud83d\udc48 \ud83d\udc77 \u2611 \u2757 \ud83d\udc76</p> <p>\ud83c\udf8f \ud83c\udf0c, \ud83d\udea5 \ud83d\udc65 \u2714\ufe0f \u2699\ufe0f 3\ufe0f\u20e3 \u2763 <code>...</code>, \ud83d\udc96:</p> <pre><code>from ...dependencies import get_token_header\n</code></pre> <p>that \ud83d\udd1c \u26d3:</p> <ul> <li>\u25b6\ufe0f \ud83c\udf8f \ud83d\udce6 \ud83d\udc48 \ud83d\udc49 \ud83d\udd79 (\ud83d\udcc1 <code>app/routers/items.py</code>) \ud83d\udd96 (\ud83d\udcc1 <code>app/routers/</code>)...</li> <li>\ud83d\udeb6 \ud83d\udc6a \ud83d\udce6 (\ud83d\udcc1 <code>app/</code>)...</li> <li>\u2934\ufe0f \ud83d\udeb6 \ud83d\udc6a \ud83d\udc48 \ud83d\udce6 (\ud83d\udce4 \ud83d\ude45\u200d\u2642 \ud83d\udc6a \ud83d\udce6, <code>app</code> \ud83d\udd1d \ud83c\udf9a \ud83d\udc76)...</li> <li>&amp; \ud83d\udce4, \ud83d\udd0e \ud83d\udd79 <code>dependencies</code> (\ud83d\udcc1 <code>app/dependencies.py</code>)...</li> <li>&amp; \u26aa\ufe0f\u27a1\ufe0f \u26ab\ufe0f, \ud83d\uddc4 \ud83d\udd22 <code>get_token_header</code>.</li> </ul> <p>\ud83d\udc48 \ud83d\udd1c \ud83d\udd17 \ud83d\udce6 \ud83d\udd1b <code>app/</code>, \u23ee\ufe0f \ud83d\udeae \ud83d\udc4d \ud83d\udcc1 <code>__init__.py</code>, \u2652\ufe0f. \u270b\ufe0f \ud83d\udc65 \ud83d\udeab \u2714\ufe0f \ud83d\udc48. , \ud83d\udc48 \ud83d\udd1c \ud83d\udeae \u274c \ud83d\udc46 \ud83d\uddbc. \ud83d\udc76</p> <p>\u270b\ufe0f \ud83d\udd1c \ud83d\udc46 \ud83d\udcad \u2754 \u26ab\ufe0f \ud83d\udc77, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \u2696 \ud83d\uddc4 \ud83d\udc46 \ud83d\udc4d \ud83d\udcf1 \ud83d\ude45\u200d\u2642 \ud83e\udd14 \u2754 \ud83c\udfd7 \ud83d\udc6b. \ud83d\udc76</p>"},{"location":"tutorial/bigger-applications/#tags-responses-dependencies","title":"\ud83d\udeae \ud83d\udec3 <code>tags</code>, <code>responses</code>, &amp; <code>dependencies</code>","text":"<p>\ud83d\udc65 \ud83d\udeab \u274e \ud83d\udd21 <code>/items</code> \ud83d\udeab <code>tags=[\"items\"]</code> \ud83d\udd20 \u27a1 \ud83d\udee0\ufe0f \u21a9\ufe0f \ud83d\udc65 \ud83d\udeae \ud83d\udc6b <code>APIRouter</code>.</p> <p>\u270b\ufe0f \ud83d\udc65 \ud83d\udcaa \ud83d\udeae \ud83c\udf05 <code>tags</code> \ud83d\udc48 \ud83d\udd1c \u2714 \ud83c\udfaf \u27a1 \ud83d\udee0\ufe0f, &amp; \u2795 <code>responses</code> \ud83c\udfaf \ud83d\udc48 \u27a1 \ud83d\udee0\ufe0f:</p> app/routers/items.py<pre><code>from readyapi import APIRouter, Depends, HTTPException\n\nfrom ..dependencies import get_token_header\n\nrouter = APIRouter(\n    prefix=\"/items\",\n    tags=[\"items\"],\n    dependencies=[Depends(get_token_header)],\n    responses={404: {\"description\": \"Not found\"}},\n)\n\n\nfake_items_db = {\"plumbus\": {\"name\": \"Plumbus\"}, \"gun\": {\"name\": \"Portal Gun\"}}\n\n\n@router.get(\"/\")\nasync def read_items():\n    return fake_items_db\n\n\n@router.get(\"/{item_id}\")\nasync def read_item(item_id: str):\n    if item_id not in fake_items_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"name\": fake_items_db[item_id][\"name\"], \"item_id\": item_id}\n\n\n@router.put(\n    \"/{item_id}\",\n    tags=[\"custom\"],\n    responses={403: {\"description\": \"Operation forbidden\"}},\n)\nasync def update_item(item_id: str):\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=403, detail=\"You can only update the item: plumbus\"\n        )\n    return {\"item_id\": item_id, \"name\": \"The great Plumbus\"}\n</code></pre> <p>Tip</p> <p>\ud83d\udc49 \ud83c\udfc1 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd1c \u2714\ufe0f \ud83c\udf00 \ud83d\udd16: <code>[\"items\", \"custom\"]</code>.</p> <p>&amp; \u26ab\ufe0f \ud83d\udd1c \u2714\ufe0f \ud83d\udc6f\u200d\u2642\ufe0f \ud83d\udce8 \ud83e\uddfe, 1\ufe0f\u20e3 <code>404</code> &amp; 1\ufe0f\u20e3 <code>403</code>.</p>"},{"location":"tutorial/bigger-applications/#readyapi","title":"\ud83d\udc51 <code>ReadyAPI</code>","text":"<p>\ud83d\udd1c, \u27a1\ufe0f \ud83d\udc40 \ud83d\udd79 <code>app/main.py</code>.</p> <p>\ud83d\udce5 \ud83c\udf10\u2754 \ud83d\udc46 \ud83d\uddc4 &amp; \u2699\ufe0f \ud83c\udf93 <code>ReadyAPI</code>.</p> <p>\ud83d\udc49 \ud83d\udd1c \ud83d\udc51 \ud83d\udcc1 \ud83d\udc46 \ud83c\ude38 \ud83d\udc48 \ud83d\udc54 \ud83c\udf10 \ud83d\udc6f\u200d\u2642\ufe0f.</p> <p>&amp; \ud83c\udfc6 \ud83d\udc46 \u269b \ud83d\udd1c \ud83d\udd1c \ud83d\udd96 \ud83d\udeae \ud83d\udc4d \ud83c\udfaf \ud83d\udd79, \ud83d\udc51 \ud83d\udcc1 \ud83d\udd1c \ud83d\ude45.</p>"},{"location":"tutorial/bigger-applications/#readyapi_1","title":"\ud83d\uddc4 <code>ReadyAPI</code>","text":"<p>\ud83d\udc46 \ud83d\uddc4 &amp; \u270d <code>ReadyAPI</code> \ud83c\udf93 \ud83d\udece.</p> <p>&amp; \ud83d\udc65 \ud83d\udcaa \ud83d\udce3 \ud83c\udf10 \ud83d\udd17 \ud83d\udc48 \ud83d\udd1c \ud83c\udf00 \u23ee\ufe0f \ud83d\udd17 \ud83d\udd20 <code>APIRouter</code>:</p> app/main.py<pre><code>from readyapi import Depends, ReadyAPI\n\nfrom .dependencies import get_query_token, get_token_header\nfrom .internal import admin\nfrom .routers import items, users\n\napp = ReadyAPI(dependencies=[Depends(get_query_token)])\n\n\napp.include_router(users.router)\napp.include_router(items.router)\napp.include_router(\n    admin.router,\n    prefix=\"/admin\",\n    tags=[\"admin\"],\n    dependencies=[Depends(get_token_header)],\n    responses={418: {\"description\": \"I'm a teapot\"}},\n)\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello Bigger Applications!\"}\n</code></pre>"},{"location":"tutorial/bigger-applications/#apirouter_3","title":"\ud83d\uddc4 <code>APIRouter</code>","text":"<p>\ud83d\udd1c \ud83d\udc65 \ud83d\uddc4 \ud83c\udf8f \ud83d\udd01 \ud83d\udc48 \u2714\ufe0f <code>APIRouter</code>\u24c2:</p> app/main.py<pre><code>from readyapi import Depends, ReadyAPI\n\nfrom .dependencies import get_query_token, get_token_header\nfrom .internal import admin\nfrom .routers import items, users\n\napp = ReadyAPI(dependencies=[Depends(get_query_token)])\n\n\napp.include_router(users.router)\napp.include_router(items.router)\napp.include_router(\n    admin.router,\n    prefix=\"/admin\",\n    tags=[\"admin\"],\n    dependencies=[Depends(get_token_header)],\n    responses={418: {\"description\": \"I'm a teapot\"}},\n)\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello Bigger Applications!\"}\n</code></pre> <p>\ud83d\udcc1 <code>app/routers/users.py</code> &amp; <code>app/routers/items.py</code> \ud83d\udd01 \ud83d\udc48 \ud83c\udf55 \ud83c\udf8f \ud83d\udc0d \ud83d\udce6 <code>app</code>, \ud83d\udc65 \ud83d\udcaa \u2699\ufe0f \ud83d\udc41 \u2763 <code>.</code> \ud83d\uddc4 \ud83d\udc6b \u2699\ufe0f \"\u2696 \ud83d\uddc4\".</p>"},{"location":"tutorial/bigger-applications/#_5","title":"\u2754 \ud83c\udfed \ud83d\udc77","text":"<p>\ud83d\udcc4:</p> <pre><code>from .routers import items, users\n</code></pre> <p>\u26d3:</p> <ul> <li>\u25b6\ufe0f \ud83c\udf8f \ud83d\udce6 \ud83d\udc48 \ud83d\udc49 \ud83d\udd79 (\ud83d\udcc1 <code>app/main.py</code>) \ud83d\udd96 (\ud83d\udcc1 <code>app/</code>)...</li> <li>\ud83d\udc40 \ud83d\udce6 <code>routers</code> (\ud83d\udcc1 <code>app/routers/</code>)...</li> <li>&amp; \u26aa\ufe0f\u27a1\ufe0f \u26ab\ufe0f, \ud83d\uddc4 \ud83d\udd01 <code>items</code> (\ud83d\udcc1 <code>app/routers/items.py</code>) &amp; <code>users</code> (\ud83d\udcc1 <code>app/routers/users.py</code>)...</li> </ul> <p>\ud83d\udd79 <code>items</code> \ud83d\udd1c \u2714\ufe0f \ud83d\udd22 <code>router</code> (<code>items.router</code>). \ud83d\udc49 \ud83c\udf8f 1\ufe0f\u20e3 \ud83d\udc65 \u270d \ud83d\udcc1 <code>app/routers/items.py</code>, \u26ab\ufe0f <code>APIRouter</code> \ud83c\udf9a.</p> <p>&amp; \u2934\ufe0f \ud83d\udc65 \ud83c\udf8f \ud83d\udd79 <code>users</code>.</p> <p>\ud83d\udc65 \ud83d\udcaa \ud83d\uddc4 \ud83d\udc6b \ud83d\udc96:</p> <pre><code>from app.routers import items, users\n</code></pre> <p>Info</p> <p>\ud83e\udd47 \u23ec \"\u2696 \ud83d\uddc4\":</p> <pre><code>from .routers import items, users\n</code></pre> <p>\ud83e\udd48 \u23ec \"\ud83c\udf86 \ud83d\uddc4\":</p> <pre><code>from app.routers import items, users\n</code></pre> <p>\ud83d\udca1 \ud83c\udf05 \ud83d\udd03 \ud83d\udc0d \ud83d\udce6 &amp; \ud83d\udd79, \u270d \ud83d\udec2 \ud83d\udc0d \ud83e\uddfe \ud83d\udd03 \ud83d\udd79.</p>"},{"location":"tutorial/bigger-applications/#_6","title":"\u274e \ud83d\udcdb \ud83d\udca5","text":"<p>\ud83d\udc65 \ud83c\udfed \ud83d\udd01 <code>items</code> \ud83d\udd17, \u21a9\ufe0f \ud83c\udfed \ud83d\udeae \ud83d\udd22 <code>router</code>.</p> <p>\ud83d\udc49 \u21a9\ufe0f \ud83d\udc65 \u2714\ufe0f \u27951\ufe0f\u20e3 \ud83d\udd22 \ud83d\udcdb <code>router</code> \ud83d\udd01 <code>users</code>.</p> <p>\ud83d\udea5 \ud83d\udc65 \u2714\ufe0f \ud83d\uddc4 1\ufe0f\u20e3 \u23ee\ufe0f \ud83c\udf8f, \ud83d\udc96:</p> <pre><code>from .routers.items import router\nfrom .routers.users import router\n</code></pre> <p><code>router</code> \u26aa\ufe0f\u27a1\ufe0f <code>users</code> \ud83d\udd1c \ud83d\udcc1 1\ufe0f\u20e3 \u26aa\ufe0f\u27a1\ufe0f <code>items</code> &amp; \ud83d\udc65 \ud83d\udeab\ud83d\udd1c \ud83d\udcaa \u2699\ufe0f \ud83d\udc6b \ud83c\udf8f \ud83d\udd70.</p> <p>, \ud83d\udcaa \u2699\ufe0f \ud83d\udc6f\u200d\u2642\ufe0f \ud83d\udc6b \ud83c\udf8f \ud83d\udcc1, \ud83d\udc65 \ud83d\uddc4 \ud83d\udd01 \ud83d\udd17:</p> app/main.py<pre><code>from readyapi import Depends, ReadyAPI\n\nfrom .dependencies import get_query_token, get_token_header\nfrom .internal import admin\nfrom .routers import items, users\n\napp = ReadyAPI(dependencies=[Depends(get_query_token)])\n\n\napp.include_router(users.router)\napp.include_router(items.router)\napp.include_router(\n    admin.router,\n    prefix=\"/admin\",\n    tags=[\"admin\"],\n    dependencies=[Depends(get_token_header)],\n    responses={418: {\"description\": \"I'm a teapot\"}},\n)\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello Bigger Applications!\"}\n</code></pre>"},{"location":"tutorial/bigger-applications/#apirouterm-users-items","title":"\ud83d\udd0c <code>APIRouter</code>\u24c2 <code>users</code> &amp; <code>items</code>","text":"<p>\ud83d\udd1c, \u27a1\ufe0f \ud83d\udd0c <code>router</code>\u24c2 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udd01 <code>users</code> &amp; <code>items</code>:</p> app/main.py<pre><code>from readyapi import Depends, ReadyAPI\n\nfrom .dependencies import get_query_token, get_token_header\nfrom .internal import admin\nfrom .routers import items, users\n\napp = ReadyAPI(dependencies=[Depends(get_query_token)])\n\n\napp.include_router(users.router)\napp.include_router(items.router)\napp.include_router(\n    admin.router,\n    prefix=\"/admin\",\n    tags=[\"admin\"],\n    dependencies=[Depends(get_token_header)],\n    responses={418: {\"description\": \"I'm a teapot\"}},\n)\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello Bigger Applications!\"}\n</code></pre> <p>Info</p> <p><code>users.router</code> \ud83d\udd0c <code>APIRouter</code> \ud83d\udd18 \ud83d\udcc1 <code>app/routers/users.py</code>.</p> <p>&amp; <code>items.router</code> \ud83d\udd0c <code>APIRouter</code> \ud83d\udd18 \ud83d\udcc1 <code>app/routers/items.py</code>.</p> <p>\u23ee\ufe0f <code>app.include_router()</code> \ud83d\udc65 \ud83d\udcaa \ud83d\udeae \ud83d\udd20 <code>APIRouter</code> \ud83d\udc51 <code>ReadyAPI</code> \ud83c\ude38.</p> <p>\u26ab\ufe0f \ud83d\udd1c \ud83d\udd0c \ud83c\udf10 \ud83d\udee3 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc48 \ud83d\udcfb \ud83c\udf55 \u26ab\ufe0f.</p> <p>\ud83d\udce1 \u2139</p> <p>\u26ab\ufe0f \ud83d\udd1c \ud83e\udd19 \ud83d\udd18 \u270d \u27a1 \ud83d\udee0\ufe0f \ud83d\udd20 \u27a1 \ud83d\udee0\ufe0f \ud83d\udc48 \ud83d\udce3 <code>APIRouter</code>.</p> <p>, \u26c5 \ud83c\udf91, \u26ab\ufe0f \ud83d\udd1c \ud83e\udd19 \ud83d\udc77 \ud83d\udea5 \ud83c\udf10 \ud83c\udf8f \ud83d\udc41 \ud83d\udcf1.</p> <p>Check</p> <p>\ud83d\udc46 \ud83d\udeab \u2714\ufe0f \ud83d\ude1f \ud83d\udd03 \ud83c\udfad \ud83d\udd50\u2754 \u2705 \ud83d\udcfb.</p> <p>\ud83d\udc49 \ud83d\udd1c \u270a \u23f2 &amp; \ud83d\udd1c \ud83d\udd74 \ud83d\udd28 \ud83d\udd74.</p> <p>\u26ab\ufe0f \ud83c\udfc6 \ud83d\udeab \ud83d\udcc9 \ud83c\udfad. \ud83d\udc76</p>"},{"location":"tutorial/bigger-applications/#apirouter-prefix-tags-responses-dependencies","title":"\ud83d\udd0c <code>APIRouter</code> \u23ee\ufe0f \ud83d\udec3 <code>prefix</code>, <code>tags</code>, <code>responses</code>, &amp; <code>dependencies</code>","text":"<p>\ud83d\udd1c, \u27a1\ufe0f \ud83c\udf08 \ud83d\udc46 \ud83c\udfe2 \ud83e\udd1d \ud83d\udc46 <code>app/internal/admin.py</code> \ud83d\udcc1.</p> <p>\u26ab\ufe0f \ud83d\udd0c <code>APIRouter</code> \u23ee\ufe0f \ud83d\udce1 \u27a1 \ud83d\udee0\ufe0f \ud83d\udc48 \ud83d\udc46 \ud83c\udfe2 \ud83d\udcb0 \ud83d\udd96 \ud83d\udcda \ud83c\udfd7.</p> <p>\ud83d\udc49 \ud83d\uddbc \u26ab\ufe0f \ud83d\udd1c \ud83d\udc8e \ud83d\ude45. \u270b\ufe0f \u27a1\ufe0f \ud83d\udcac \ud83d\udc48 \u21a9\ufe0f \u26ab\ufe0f \ud83d\udcb0 \u23ee\ufe0f \ud83c\udf8f \ud83c\udfd7 \ud83c\udfe2, \ud83d\udc65 \ud83d\udeab\ud83d\udd1c \ud83d\udd00 \u26ab\ufe0f &amp; \ud83d\udeae <code>prefix</code>, <code>dependencies</code>, <code>tags</code>, \u2652\ufe0f. \ud83d\udd17 <code>APIRouter</code>:</p> app/internal/admin.py<pre><code>from readyapi import APIRouter\n\nrouter = APIRouter()\n\n\n@router.post(\"/\")\nasync def update_admin():\n    return {\"message\": \"Admin getting schwifty\"}\n</code></pre> <p>\u270b\ufe0f \ud83d\udc65 \ud83d\udc9a \u2692 \ud83d\udec3 <code>prefix</code> \ud83d\udd50\u2754 \u2705 <code>APIRouter</code> \ud83d\udc48 \ud83c\udf10 \ud83d\udeae \u27a1 \ud83d\udee0\ufe0f \u25b6\ufe0f \u23ee\ufe0f <code>/admin</code>, \ud83d\udc65 \ud83d\udc9a \ud83d\udd10 \u26ab\ufe0f \u23ee\ufe0f <code>dependencies</code> \ud83d\udc65 \u23ea \u2714\ufe0f \ud83d\udc49 \ud83c\udfd7, &amp; \ud83d\udc65 \ud83d\udc9a \ud83d\udd0c <code>tags</code> &amp; <code>responses</code>.</p> <p>\ud83d\udc65 \ud83d\udcaa \ud83d\udce3 \ud83c\udf10 \ud83d\udc48 \ud83c\udf75 \u2714\ufe0f \ud83d\udd00 \u23ee\ufe0f <code>APIRouter</code> \ud83d\udeb6\u200d\u2640\ufe0f \ud83d\udc48 \ud83d\udd22 <code>app.include_router()</code>:</p> app/main.py<pre><code>from readyapi import Depends, ReadyAPI\n\nfrom .dependencies import get_query_token, get_token_header\nfrom .internal import admin\nfrom .routers import items, users\n\napp = ReadyAPI(dependencies=[Depends(get_query_token)])\n\n\napp.include_router(users.router)\napp.include_router(items.router)\napp.include_router(\n    admin.router,\n    prefix=\"/admin\",\n    tags=[\"admin\"],\n    dependencies=[Depends(get_token_header)],\n    responses={418: {\"description\": \"I'm a teapot\"}},\n)\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello Bigger Applications!\"}\n</code></pre> <p>\ud83d\udc48 \ud83c\udf0c, \u23ee\ufe0f <code>APIRouter</code> \ud83d\udd1c \ud83d\udea7 \u2697, \ud83d\udc65 \ud83d\udcaa \ud83d\udcb0 \ud83d\udc48 \ud83c\udf8f <code>app/internal/admin.py</code> \ud83d\udcc1 \u23ee\ufe0f \ud83c\udf8f \ud83c\udfd7 \ud83c\udfe2.</p> <p>\ud83c\udfc1 \ud83d\udc48 \ud83d\udc46 \ud83d\udcf1, \ud83d\udd20 \u27a1 \ud83d\udee0\ufe0f \u26aa\ufe0f\u27a1\ufe0f <code>admin</code> \ud83d\udd79 \ud83d\udd1c \u2714\ufe0f:</p> <ul> <li>\ud83d\udd21 <code>/admin</code>.</li> <li>\ud83d\udd16 <code>admin</code>.</li> <li>\ud83d\udd17 <code>get_token_header</code>.</li> <li>\ud83d\udce8 <code>418</code>. \ud83d\udc76</li> </ul> <p>\u270b\ufe0f \ud83d\udc48 \ud83d\udd1c \ud83d\udd74 \ud83d\udcc9 \ud83d\udc48 <code>APIRouter</code> \ud83d\udc46 \ud83d\udcf1, \ud83d\udeab \ud83d\ude46 \ud83c\udf8f \ud83d\udcdf \ud83d\udc48 \u2699\ufe0f \u26ab\ufe0f.</p> <p>, \ud83d\uddbc, \ud83c\udf8f \ud83c\udfd7 \ud83d\udcaa \u2699\ufe0f \ud83c\udf8f <code>APIRouter</code> \u23ee\ufe0f \ud83c\udf8f \ud83e\udd1d \ud83d\udc69\u200d\ud83d\udd2c.</p>"},{"location":"tutorial/bigger-applications/#_7","title":"\ud83d\udd0c \u27a1 \ud83d\udee0\ufe0f","text":"<p>\ud83d\udc65 \ud83d\udcaa \ud83d\udeae \u27a1 \ud83d\udee0\ufe0f \ud83d\udd17 <code>ReadyAPI</code> \ud83d\udcf1.</p> <p>\ud83d\udce5 \ud83d\udc65 \u26ab\ufe0f... \ud83c\udfa6 \ud83d\udc48 \ud83d\udc65 \ud83d\udcaa \ud83e\udd37:</p> app/main.py<pre><code>from readyapi import Depends, ReadyAPI\n\nfrom .dependencies import get_query_token, get_token_header\nfrom .internal import admin\nfrom .routers import items, users\n\napp = ReadyAPI(dependencies=[Depends(get_query_token)])\n\n\napp.include_router(users.router)\napp.include_router(items.router)\napp.include_router(\n    admin.router,\n    prefix=\"/admin\",\n    tags=[\"admin\"],\n    dependencies=[Depends(get_token_header)],\n    responses={418: {\"description\": \"I'm a teapot\"}},\n)\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello Bigger Applications!\"}\n</code></pre> <p>&amp; \u26ab\ufe0f \ud83d\udd1c \ud83d\udc77 \u2611, \ud83d\udc6f\u200d\u2642\ufe0f \u23ee\ufe0f \ud83c\udf10 \ud83c\udf8f \u27a1 \ud83d\udee0\ufe0f \ud83d\udeae \u23ee\ufe0f <code>app.include_router()</code>.</p> <p>\ud83d\udcf6 \ud83d\udce1 \u2139</p> <p>\ud83d\uddd2: \ud83d\udc49 \ud83d\udcf6 \ud83d\udce1 \u2139 \ud83d\udc48 \ud83d\udc46 \ud83c\udfb2 \ud83d\udcaa \ud83d\udeb6.</p> <p><code>APIRouter</code>\u24c2 \ud83d\udeab \"\ud83d\uddfb\", \ud83d\udc6b \ud83d\udeab \ud83d\udc7d \u26aa\ufe0f\u27a1\ufe0f \ud83c\udf82 \ud83c\ude38.</p> <p>\ud83d\udc49 \u21a9\ufe0f \ud83d\udc65 \ud83d\udc9a \ud83d\udd0c \ud83d\udc6b \u27a1 \ud83d\udee0\ufe0f \ud83d\uddc4 \ud83d\udd17 &amp; \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd22.</p> <p>\ud83d\udc65 \ud83d\udeab\ud83d\udd1c \u274e \ud83d\udc6b &amp; \"\ud83d\uddfb\" \ud83d\udc6b \u27a1 \ud83c\udf82, \u27a1 \ud83d\udee0\ufe0f \"\ud83d\udd96\" (\ud83c\udfe4-\u270d), \ud83d\udeab \ud83d\udd0c \ud83d\udd17.</p>"},{"location":"tutorial/bigger-applications/#_8","title":"\u2705 \ud83c\udfe7 \ud83d\udee0\ufe0f \ud83e\ude7a","text":"<p>\ud83d\udd1c, \ud83c\udfc3 <code>uvicorn</code>, \u2699\ufe0f \ud83d\udd79 <code>app.main</code> &amp; \ud83d\udd22 <code>app</code>:</p> <pre><code>$ uvicorn app.main:app --reload\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>&amp; \ud83d\udcc2 \ud83e\ude7a http://127.0.0.1:8000/docs.</p> <p>\ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \ud83c\udfe7 \ud83d\udee0\ufe0f \ud83e\ude7a, \u2705 \u27a1 \u26aa\ufe0f\u27a1\ufe0f \ud83c\udf10 \ud83d\udd01, \u2699\ufe0f \u2611 \u27a1 (&amp; \ud83d\udd21) &amp; \u2611 \ud83d\udd16:</p> <p></p>"},{"location":"tutorial/bigger-applications/#prefix","title":"\ud83d\udd0c \ud83c\udf8f \ud83d\udcfb \ud83d\udc97 \ud83d\udd70 \u23ee\ufe0f \ud83c\udf8f <code>prefix</code>","text":"<p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>.include_router()</code> \ud83d\udc97 \ud83d\udd70 \u23ee\ufe0f \ud83c\udf8f \ud83d\udcfb \u2699\ufe0f \ud83c\udf8f \ud83d\udd21.</p> <p>\ud83d\udc49 \ud83d\udcaa \u26a0, \ud83d\uddbc, \ud83c\udfa6 \ud83c\udf8f \ud83d\udee0\ufe0f \ud83d\udd3d \ud83c\udf8f \ud83d\udd21, \u2705 <code>/api/v1</code> &amp; <code>/api/latest</code>.</p> <p>\ud83d\udc49 \ud83c\udfe7 \u2699\ufe0f \ud83d\udc48 \ud83d\udc46 5\ufe0f\u20e3\ud83d\udcc6 \ud83d\udeab \ud83e\udd19 \ud83d\udcaa, \u270b\ufe0f \u26ab\ufe0f \ud83d\udce4 \ud83d\udcbc \ud83d\udc46.</p>"},{"location":"tutorial/bigger-applications/#apirouter-1","title":"\ud83d\udd0c <code>APIRouter</code> \u27951\ufe0f\u20e3","text":"<p>\ud83c\udf8f \ud83c\udf0c \ud83d\udc46 \ud83d\udcaa \ud83d\udd0c <code>APIRouter</code> <code>ReadyAPI</code> \ud83c\ude38, \ud83d\udc46 \ud83d\udcaa \ud83d\udd0c <code>APIRouter</code> \u27951\ufe0f\u20e3 <code>APIRouter</code> \u2699\ufe0f:</p> <pre><code>router.include_router(other_router)\n</code></pre> <p>\u2692 \ud83d\udcad \ud83d\udc46 \u26ab\ufe0f \u23ed \ud83d\udd0c <code>router</code> <code>ReadyAPI</code> \ud83d\udcf1, \ud83d\udc48 \u27a1 \ud83d\udee0\ufe0f \u26aa\ufe0f\u27a1\ufe0f <code>other_router</code> \ud83d\udd0c.</p>"},{"location":"tutorial/body-fields/","title":"\ud83d\udcaa - \ud83c\udfd1","text":"<p>\ud83c\udf8f \ud83c\udf0c \ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83c\udf16 \ud83d\udd2c &amp; \ud83d\uddc3 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22 \ud83d\udd22 \u23ee\ufe0f <code>Query</code>, <code>Path</code> &amp; <code>Body</code>, \ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83d\udd2c &amp; \ud83d\uddc3 \ud83d\udd18 Pydantic \ud83c\udff7 \u2699\ufe0f Pydantic <code>Field</code>.</p>"},{"location":"tutorial/body-fields/#field","title":"\ud83d\uddc4 <code>Field</code>","text":"<p>\ud83e\udd47, \ud83d\udc46 \u2714\ufe0f \ud83d\uddc4 \u26ab\ufe0f:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Body, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel, Field\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Warning</p> <p>\ud83d\udc40 \ud83d\udc48 <code>Field</code> \ud83d\uddc4 \ud83d\udd17 \u26aa\ufe0f\u27a1\ufe0f <code>pydantic</code>, \ud83d\udeab \u26aa\ufe0f\u27a1\ufe0f <code>readyapi</code> \ud83c\udf10 \ud83c\udf82 (<code>Query</code>, <code>Path</code>, <code>Body</code>, \u2652\ufe0f).</p>"},{"location":"tutorial/body-fields/#_1","title":"\ud83d\udce3 \ud83c\udff7 \ud83d\udd22","text":"<p>\ud83d\udc46 \ud83d\udcaa \u2934\ufe0f \u2699\ufe0f <code>Field</code> \u23ee\ufe0f \ud83c\udff7 \ud83d\udd22:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Body, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel, Field\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p><code>Field</code> \ud83d\udc77 \ud83c\udf8f \ud83c\udf0c <code>Query</code>, <code>Path</code> &amp; <code>Body</code>, \u26ab\ufe0f \u2714\ufe0f \ud83c\udf10 \ud83c\udf8f \ud83d\udd22, \u2652\ufe0f.</p> <p>\ud83d\udce1 \u2139</p> <p>\ud83e\udd19, <code>Query</code>, <code>Path</code> &amp; \ud83c\udf8f \ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \u23ed \u270d \ud83c\udf9a \ud83c\udfff \u26a0 <code>Param</code> \ud83c\udf93, \u2754 \u26ab\ufe0f \ud83c\udfff Pydantic <code>FieldInfo</code> \ud83c\udf93.</p> <p>&amp; Pydantic <code>Field</code> \ud83d\udce8 \ud83d\udc50 <code>FieldInfo</code> \ud83d\udc4d.</p> <p><code>Body</code> \ud83d\udce8 \ud83c\udf9a \ud83c\udfff <code>FieldInfo</code> \ud83d\udd17. &amp; \ud83d\udce4 \ud83c\udf8f \ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \u23ea \ud83d\udc48 \ud83c\udfff <code>Body</code> \ud83c\udf93.</p> <p>\ud83d\udcad \ud83d\udc48 \ud83d\udd50\u2754 \ud83d\udc46 \ud83d\uddc4 <code>Query</code>, <code>Path</code>, &amp; \ud83c\udf8f \u26aa\ufe0f\u27a1\ufe0f <code>readyapi</code>, \ud83d\udc48 \ud83e\udd19 \ud83d\udd22 \ud83d\udc48 \ud83d\udce8 \ud83c\udf81 \ud83c\udf93.</p> <p>Tip</p> <p>\ud83d\udc40 \u2754 \ud83d\udd20 \ud83c\udff7 \ud83d\udd22 \u23ee\ufe0f \ud83c\udd8e, \ud83d\udd22 \ud83d\udcb2 &amp; <code>Field</code> \u2714\ufe0f \ud83c\udf8f \ud83d\udcca \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22 \ud83d\udd22, \u23ee\ufe0f <code>Field</code> \u21a9\ufe0f <code>Path</code>, <code>Query</code> &amp; <code>Body</code>.</p>"},{"location":"tutorial/body-fields/#i","title":"\ud83d\udeae \u2795 \u2139","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \u2795 \u2139 <code>Field</code>, <code>Query</code>, <code>Body</code>, \u2652\ufe0f. &amp; \u26ab\ufe0f \ud83d\udd1c \ud83d\udd0c \ud83c\udfd7 \ud83c\udfbb \ud83d\udd17.</p> <p>\ud83d\udc46 \ud83d\udd1c \ud83d\udca1 \ud83c\udf05 \ud83d\udd03 \u274e \u2795 \u2139 \u23ea \ud83e\ude7a, \ud83d\udd50\u2754 \ud83c\udfeb \ud83d\udce3 \ud83d\uddbc.</p> <p>Warning</p> <p>\u2795 \ud83d\udd11 \ud83d\udeb6\u200d\u2640\ufe0f <code>Field</code> \ud83d\udd1c \ud83c\udf81 \ud83d\udcc9 \ud83d\uddc4 \ud83d\udd17 \ud83d\udc46 \ud83c\ude38. \ud83d\udc6b \ud83d\udd11 5\ufe0f\u20e3\ud83d\udcc6 \ud83d\udeab \ud83c\udfaf \ud83c\udf55 \ud83d\uddc4 \ud83d\udd27, \ud83d\uddc4 \ud83e\uddf0, \ud83d\uddbc \ud83d\uddc4 \ud83d\udcb3, 5\ufe0f\u20e3\ud83d\udcc6 \ud83d\udeab \ud83d\udc77 \u23ee\ufe0f \ud83d\udc46 \ud83c\udfd7 \ud83d\udd17.</p>"},{"location":"tutorial/body-fields/#_2","title":"\ud83c\udf03","text":"<p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f Pydantic <code>Field</code> \ud83d\udce3 \u2795 \ud83d\udd2c &amp; \ud83d\uddc3 \ud83c\udff7 \ud83d\udd22.</p> <p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \u2795 \ud83c\udde8\ud83c\uddfb \u274c \ud83d\udeb6\u200d\u2640\ufe0f \ud83c\udf16 \ud83c\udfbb \ud83d\udd17 \ud83d\uddc3.</p>"},{"location":"tutorial/body-multiple-params/","title":"\ud83d\udcaa - \ud83d\udc97 \ud83d\udd22","text":"<p>\ud83d\udd1c \ud83d\udc48 \ud83d\udc65 \u2714\ufe0f \ud83d\udc40 \u2754 \u2699\ufe0f <code>Path</code> &amp; <code>Query</code>, \u27a1\ufe0f \ud83d\udc40 \ud83c\udf05 \ud83c\udfe7 \u2699\ufe0f \ud83d\udce8 \ud83d\udcaa \ud83d\udcc4.</p>"},{"location":"tutorial/body-multiple-params/#path-query","title":"\ud83c\udf00 <code>Path</code>, <code>Query</code> &amp; \ud83d\udcaa \ud83d\udd22","text":"<p>\ud83e\udd47, \u2197\ufe0f, \ud83d\udc46 \ud83d\udcaa \ud83c\udf00 <code>Path</code>, <code>Query</code> &amp; \ud83d\udce8 \ud83d\udcaa \ud83d\udd22 \ud83d\udcc4 \u27a1 &amp; ReadyAPI \ud83d\udd1c \ud83d\udcad \u26ab\ufe0f\u2754.</p> <p>&amp; \ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83d\udcaa \ud83d\udd22 \ud83d\udce6, \u2692 \ud83d\udd22 <code>None</code>:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str | None = None,\n    item: Item | None = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Path, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: str | None = None,\n    item: Item | None = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results\n</code></pre> <p>Note</p> <p>\ud83d\udc40 \ud83d\udc48, \ud83d\udc49 \ud83d\udcbc, <code>item</code> \ud83d\udc48 \ud83d\udd1c \u270a \u26aa\ufe0f\u27a1\ufe0f \ud83d\udcaa \ud83d\udce6. \u26ab\ufe0f \u2714\ufe0f <code>None</code> \ud83d\udd22 \ud83d\udcb2.</p>"},{"location":"tutorial/body-multiple-params/#_1","title":"\ud83d\udc97 \ud83d\udcaa \ud83d\udd22","text":"<p>\u23ee\ufe0f \ud83d\uddbc, \u27a1 \ud83d\udee0\ufe0f \ud83d\udd1c \u231b \ud83c\udfbb \ud83d\udcaa \u23ee\ufe0f \ud83d\udd22 <code>Item</code>, \ud83d\udc96:</p> <pre><code>{\n    \"name\": \"Foo\",\n    \"description\": \"The pretender\",\n    \"price\": 42.0,\n    \"tax\": 3.2\n}\n</code></pre> <p>\u270b\ufe0f \ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83d\udc97 \ud83d\udcaa \ud83d\udd22, \u2705 <code>item</code> &amp; <code>user</code>:</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user}\n    return results\n</code></pre> <p>\ud83d\udc49 \ud83d\udcbc, ReadyAPI \ud83d\udd1c \ud83d\udc40 \ud83d\udc48 \ud83d\udce4 \ud83c\udf05 \ud83c\udf18 1\ufe0f\u20e3 \ud83d\udcaa \ud83d\udd22 \ud83d\udd22 (2\ufe0f\u20e3 \ud83d\udd22 \ud83d\udc48 Pydantic \ud83c\udff7).</p> <p>, \u26ab\ufe0f \ud83d\udd1c \u2934\ufe0f \u2699\ufe0f \ud83d\udd22 \ud83d\udcdb \ud83d\udd11 (\ud83c\udfd1 \ud83d\udcdb) \ud83d\udcaa, &amp; \u231b \ud83d\udcaa \ud83d\udc96:</p> <pre><code>{\n    \"item\": {\n        \"name\": \"Foo\",\n        \"description\": \"The pretender\",\n        \"price\": 42.0,\n        \"tax\": 3.2\n    },\n    \"user\": {\n        \"username\": \"dave\",\n        \"full_name\": \"Dave Grohl\"\n    }\n}\n</code></pre> <p>Note</p> <p>\ud83d\udc40 \ud83d\udc48 \u270b\ufe0f <code>item</code> \ud83d\udce3 \ud83c\udf8f \ud83c\udf0c \u23ed, \u26ab\ufe0f \ud83d\udd1c \u231b \ud83d\udd18 \ud83d\udcaa \u23ee\ufe0f \ud83d\udd11 <code>item</code>.</p> <p>ReadyAPI \ud83d\udd1c \ud83c\udfe7 \ud83d\udee0\ufe0f \u26aa\ufe0f\u27a1\ufe0f \ud83d\udce8, \ud83d\udc48 \ud83d\udd22 <code>item</code> \ud83d\udce8 \u26ab\ufe0f \ud83c\udfaf \ud83c\udf9a &amp; \ud83c\udf8f <code>user</code>.</p> <p>\u26ab\ufe0f \ud83d\udd1c \ud83c\udfad \ud83d\udd2c \u2697 \ud83d\udcbd, &amp; \ud83d\udd1c \ud83d\udcc4 \u26ab\ufe0f \ud83d\udc96 \ud83d\udc48 \ud83d\uddc4 \ud83d\udd17 &amp; \ud83c\udfe7 \ud83e\ude7a.</p>"},{"location":"tutorial/body-multiple-params/#_2","title":"\u2b50 \ud83d\udcb2 \ud83d\udcaa","text":"<p>\ud83c\udf8f \ud83c\udf0c \ud83d\udce4 <code>Query</code> &amp; <code>Path</code> \ud83d\udd2c \u2795 \ud83d\udcbd \ud83d\udd22 &amp; \u27a1 \ud83d\udd22, ReadyAPI \ud83d\ude9a \ud83c\udf13 <code>Body</code>.</p> <p>\ud83d\uddbc, \u2194 \u23ee\ufe0f \ud83c\udff7, \ud83d\udc46 \ud83d\udcaa \ud83d\udcad \ud83d\udc48 \ud83d\udc46 \ud83d\udc9a \u2714\ufe0f \u27951\ufe0f\u20e3 \ud83d\udd11 <code>importance</code> \ud83c\udf8f \ud83d\udcaa, \ud83e\udd48 <code>item</code> &amp; <code>user</code>.</p> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udce3 \u26ab\ufe0f, \u21a9\ufe0f \u26ab\ufe0f \u2b50 \ud83d\udcb2, ReadyAPI \ud83d\udd1c \ud83e\udd14 \ud83d\udc48 \u26ab\ufe0f \ud83d\udd22 \ud83d\udd22.</p> <p>\u270b\ufe0f \ud83d\udc46 \ud83d\udcaa \ud83d\udca1 ReadyAPI \ud83d\ude25 \u26ab\ufe0f \u27951\ufe0f\u20e3 \ud83d\udcaa \ud83d\udd11 \u2699\ufe0f <code>Body</code>:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User, importance: int = Body()):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int, item: Item, user: User, importance: Annotated[int, Body()]\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int, item: Item, user: User, importance: Annotated[int, Body()]\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int, item: Item, user: User, importance: Annotated[int, Body()]\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User, importance: int = Body()):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results\n</code></pre> <p>\ud83d\udc49 \ud83d\udcbc, ReadyAPI \ud83d\udd1c \u231b \ud83d\udcaa \ud83d\udc96:</p> <pre><code>{\n    \"item\": {\n        \"name\": \"Foo\",\n        \"description\": \"The pretender\",\n        \"price\": 42.0,\n        \"tax\": 3.2\n    },\n    \"user\": {\n        \"username\": \"dave\",\n        \"full_name\": \"Dave Grohl\"\n    },\n    \"importance\": 5\n}\n</code></pre> <p>\ud83d\udd04, \u26ab\ufe0f \ud83d\udd1c \ud83d\udddc \ud83d\udcca \ud83c\udd8e, \u2714, \ud83d\udcc4, \u2652\ufe0f.</p>"},{"location":"tutorial/body-multiple-params/#_3","title":"\ud83d\udc97 \ud83d\udcaa = &amp; \ud83d\udd22","text":"<p>\u2197\ufe0f, \ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83c\udf16 \ud83d\udd22 \ud83d\udd22 \ud83d\udd50\u2754 \ud83d\udc46 \ud83d\udcaa, \ud83c\udf16 \ud83d\ude46 \ud83d\udcaa \ud83d\udd22.</p> <p>, \ud83d\udd22, \u2b50 \ud83d\udcb2 \ud83d\udd2c \ud83d\udd22 \ud83d\udd22, \ud83d\udc46 \ud83d\udeab \u2714\ufe0f \ud83c\udfaf \ud83d\udeae <code>Query</code>, \ud83d\udc46 \ud83d\udcaa:</p> <pre><code>q: Union[str, None] = None\n</code></pre> <p>\u2696\ufe0f \ud83d\udc0d 3\ufe0f\u20e3.1\ufe0f\u20e30\ufe0f\u20e3 &amp; \ud83d\udd1b:</p> <pre><code>q: str | None = None\n</code></pre> <p>\ud83d\uddbc:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: int = Body(gt=0),\n    q: Union[str, None] = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: Annotated[int, Body(gt=0)],\n    q: str | None = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: Annotated[int, Body(gt=0)],\n    q: Union[str, None] = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: Annotated[int, Body(gt=0)],\n    q: Union[str, None] = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nclass User(BaseModel):\n    username: str\n    full_name: str | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: int = Body(gt=0),\n    q: str | None = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Info</p> <p><code>Body</code> \u2714\ufe0f \ud83c\udf10 \ud83c\udf8f \u2795 \ud83d\udd2c &amp; \ud83d\uddc3 \ud83d\udd22 <code>Query</code>,<code>Path</code> &amp; \ud83c\udf8f \ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \u23ea.</p>"},{"location":"tutorial/body-multiple-params/#_4","title":"\u23ef \ud83d\udc41 \ud83d\udcaa \ud83d\udd22","text":"<p>\u27a1\ufe0f \ud83d\udcac \ud83d\udc46 \ud83d\udd74 \u2714\ufe0f \ud83d\udc41 <code>item</code> \ud83d\udcaa \ud83d\udd22 \u26aa\ufe0f\u27a1\ufe0f Pydantic \ud83c\udff7 <code>Item</code>.</p> <p>\ud83d\udd22, ReadyAPI \ud83d\udd1c \u2934\ufe0f \u231b \ud83d\udeae \ud83d\udcaa \ud83d\udd17.</p> <p>\u270b\ufe0f \ud83d\udea5 \ud83d\udc46 \ud83d\udc9a \u26ab\ufe0f \u231b \ud83c\udfbb \u23ee\ufe0f \ud83d\udd11 <code>item</code> &amp; \ud83d\udd18 \u26ab\ufe0f \ud83c\udff7 \ud83c\udf9a, \u26ab\ufe0f \ud83d\udd28 \ud83d\udd50\u2754 \ud83d\udc46 \ud83d\udce3 \u2795 \ud83d\udcaa \ud83d\udd22, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83c\udf81 <code>Body</code> \ud83d\udd22 <code>embed</code>:</p> <pre><code>item: Item = Body(embed=True)\n</code></pre> <p>:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>\ud83d\udc49 \ud83d\udcbc ReadyAPI \ud83d\udd1c \u231b \ud83d\udcaa \ud83d\udc96:</p> <pre><code>{\n    \"item\": {\n        \"name\": \"Foo\",\n        \"description\": \"The pretender\",\n        \"price\": 42.0,\n        \"tax\": 3.2\n    }\n}\n</code></pre> <p>\u21a9\ufe0f:</p> <pre><code>{\n    \"name\": \"Foo\",\n    \"description\": \"The pretender\",\n    \"price\": 42.0,\n    \"tax\": 3.2\n}\n</code></pre>"},{"location":"tutorial/body-multiple-params/#_5","title":"\ud83c\udf03","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udeae \ud83d\udc97 \ud83d\udcaa \ud83d\udd22 \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22, \u270b\ufe0f \ud83d\udce8 \ud83d\udcaa \ud83d\udd74 \u2714\ufe0f \ud83d\udc41 \ud83d\udcaa.</p> <p>\u270b\ufe0f ReadyAPI \ud83d\udd1c \ud83c\udf75 \u26ab\ufe0f, \ud83e\udd1d \ud83d\udc46 \u2611 \ud83d\udcca \ud83d\udc46 \ud83d\udd22, &amp; \u2714 &amp; \ud83d\udcc4 \u2611 \ud83d\udd17 \u27a1 \ud83d\udee0\ufe0f.</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \u2b50 \ud83d\udcb2 \ud83d\udce8 \ud83c\udf55 \ud83d\udcaa.</p> <p>&amp; \ud83d\udc46 \ud83d\udcaa \ud83d\udca1 ReadyAPI \u23ef \ud83d\udcaa \ud83d\udd11 \ud83d\udd50\u2754 \ud83d\udce4 \ud83d\udd74 \ud83d\udc41 \ud83d\udd22 \ud83d\udce3.</p>"},{"location":"tutorial/body-nested-models/","title":"\ud83d\udcaa - \ud83d\udd01 \ud83c\udff7","text":"<p>\u23ee\ufe0f ReadyAPI, \ud83d\udc46 \ud83d\udcaa \ud83d\udd2c, \u2714, \ud83d\udcc4, &amp; \u2699\ufe0f \ud83c\udfb2 \ud83d\ude47 \ud83d\udc26 \ud83c\udff7 (\ud83d\udc4f Pydantic).</p>"},{"location":"tutorial/body-nested-models/#_1","title":"\ud83d\udcc7 \ud83c\udfd1","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udd2c \ud83d\udd22 \ud83c\udffe. \ud83d\uddbc, \ud83d\udc0d <code>list</code>:</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list = []\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list = []\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>\ud83d\udc49 \ud83d\udd1c \u2692 <code>tags</code> \ud83d\udcc7, \ud83d\udc50 \u26ab\ufe0f \ud83d\udeab \ud83d\udce3 \ud83c\udd8e \ud83d\udd23 \ud83d\udcc7.</p>"},{"location":"tutorial/body-nested-models/#_2","title":"\ud83d\udcc7 \ud83c\udfd1 \u23ee\ufe0f \ud83c\udd8e \ud83d\udd22","text":"<p>\u270b\ufe0f \ud83d\udc0d \u2714\ufe0f \ud83c\udfaf \ud83c\udf0c \ud83d\udce3 \ud83d\udcc7 \u23ee\ufe0f \ud83d\udd17 \ud83c\udd8e, \u2696\ufe0f \"\ud83c\udd8e \ud83d\udd22\":</p>"},{"location":"tutorial/body-nested-models/#list","title":"\ud83d\uddc4 \u2328 <code>List</code>","text":"<p>\ud83d\udc0d 3\ufe0f\u20e3.9\ufe0f\u20e3 &amp; \ud83d\udd1b \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83d\udc29 <code>list</code> \ud83d\udce3 \ud83d\udc6b \ud83c\udd8e \u270d \ud83d\udc65 \ud83d\udd1c \ud83d\udc40 \ud83d\udd1b. \ud83d\udc76</p> <p>\u270b\ufe0f \ud83d\udc0d \u23ec \u23ed 3\ufe0f\u20e3.9\ufe0f\u20e3 (3\ufe0f\u20e3.6\ufe0f\u20e3 &amp; \ud83d\udd1b), \ud83d\udc46 \ud83e\udd47 \ud83d\udcaa \ud83d\uddc4 <code>List</code> \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc29 \ud83d\udc0d <code>typing</code> \ud83d\udd79:</p> Python 3.8+ <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre>"},{"location":"tutorial/body-nested-models/#list_1","title":"\ud83d\udce3 <code>list</code> \u23ee\ufe0f \ud83c\udd8e \ud83d\udd22","text":"<p>\ud83d\udce3 \ud83c\udd8e \ud83d\udc48 \u2714\ufe0f \ud83c\udd8e \ud83d\udd22 (\ud83d\udd17 \ud83c\udd8e), \ud83d\udc96 <code>list</code>, <code>dict</code>, <code>tuple</code>:</p> <ul> <li>\ud83d\udea5 \ud83d\udc46 \ud83d\udc0d \u23ec \ud83d\udd05 \ud83c\udf18 3\ufe0f\u20e3.9\ufe0f\u20e3, \ud83d\uddc4 \ud83d\udc6b \ud83c\udf13 \u23ec \u26aa\ufe0f\u27a1\ufe0f <code>typing</code> \ud83d\udd79</li> <li>\ud83d\udeb6\u200d\u2640\ufe0f \ud83d\udd17 \ud83c\udd8e(\u24c2) \"\ud83c\udd8e \ud83d\udd22\" \u2699\ufe0f \u2b1c \ud83d\udddc: <code>[</code> &amp; <code>]</code></li> </ul> <p>\ud83d\udc0d 3\ufe0f\u20e3.9\ufe0f\u20e3 \u26ab\ufe0f \ud83d\udd1c:</p> <pre><code>my_list: list[str]\n</code></pre> <p>\u23ec \ud83d\udc0d \u23ed 3\ufe0f\u20e3.9\ufe0f\u20e3, \u26ab\ufe0f \ud83d\udd1c:</p> <pre><code>from typing import List\n\nmy_list: List[str]\n</code></pre> <p>\ud83d\udc48 \ud83c\udf10 \ud83d\udc29 \ud83d\udc0d \u2755 \ud83c\udd8e \ud83d\udcc4.</p> <p>\u2699\ufe0f \ud83d\udc48 \ud83c\udf8f \ud83d\udc29 \u2755 \ud83c\udff7 \ud83d\udd22 \u23ee\ufe0f \ud83d\udd17 \ud83c\udd8e.</p> <p>, \ud83d\udc46 \ud83d\uddbc, \ud83d\udc65 \ud83d\udcaa \u2692 <code>tags</code> \ud83c\udfaf \"\ud83d\udcc7 \ud83c\udfbb\":</p> Python 3.8+ <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre>"},{"location":"tutorial/body-nested-models/#_3","title":"\u2692 \ud83c\udd8e","text":"<p>\u270b\ufe0f \u2934\ufe0f \ud83d\udc65 \ud83d\udcad \ud83d\udd03 \u26ab\ufe0f, &amp; \ud83e\udd14 \ud83d\udc48 \ud83d\udd16 \ud83d\udeab\ud83d\udd1c \ud83d\udeab \ud83d\udd01, \ud83d\udc6b \ud83d\udd1c \ud83c\udfb2 \ud83d\ude0d \ud83c\udfbb.</p> <p>&amp; \ud83d\udc0d \u2714\ufe0f \ud83c\udf81 \ud83d\udcbd \ud83c\udd8e \u2692 \ud83d\ude0d \ud83c\udfec, <code>set</code>.</p> <p>\u2934\ufe0f \ud83d\udc65 \ud83d\udcaa \ud83d\udce3 <code>tags</code> \u2692 \ud83c\udfbb:</p> Python 3.8+ <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>\u23ee\ufe0f \ud83d\udc49, \ud83d\udea5 \ud83d\udc46 \ud83d\udce8 \ud83d\udce8 \u23ee\ufe0f \u274e \ud83d\udcca, \u26ab\ufe0f \ud83d\udd1c \ud83d\udddc \u2692 \ud83d\ude0d \ud83c\udfec.</p> <p>&amp; \ud83d\udd50\u2754 \ud83d\udc46 \ud83d\udd22 \ud83d\udc48 \ud83d\udcca, \ud83d\udea5 \u2139 \u2714\ufe0f \u274e, \u26ab\ufe0f \ud83d\udd1c \ud83d\udd22 \u2692 \ud83d\ude0d \ud83c\udfec.</p> <p>&amp; \u26ab\ufe0f \ud83d\udd1c \u270d / \ud83d\udcc4 \u27a1\ufe0f \ud83d\udc81\u200d\u2642\ufe0f.</p>"},{"location":"tutorial/body-nested-models/#_4","title":"\ud83d\udc26 \ud83c\udff7","text":"<p>\ud83d\udd20 \ud83d\udd22 Pydantic \ud83c\udff7 \u2714\ufe0f \ud83c\udd8e.</p> <p>\u270b\ufe0f \ud83d\udc48 \ud83c\udd8e \ud83d\udcaa \u26ab\ufe0f \u27951\ufe0f\u20e3 Pydantic \ud83c\udff7.</p> <p>, \ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83d\ude47 \ud83d\udc26 \ud83c\udfbb \"\ud83c\udf9a\" \u23ee\ufe0f \ud83c\udfaf \ud83d\udd22 \ud83d\udcdb, \ud83c\udd8e &amp; \ud83d\udd2c.</p> <p>\ud83c\udf10 \ud83d\udc48, \ud83c\udfb2 \ud83d\udc26.</p>"},{"location":"tutorial/body-nested-models/#_5","title":"\ud83d\udd2c \ud83d\udcca","text":"<p>\ud83d\uddbc, \ud83d\udc65 \ud83d\udcaa \ud83d\udd2c <code>Image</code> \ud83c\udff7:</p> Python 3.8+ <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: str\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n    image: Union[Image, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: str\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n    image: Image | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: str\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n    image: Union[Image, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre>"},{"location":"tutorial/body-nested-models/#_6","title":"\u2699\ufe0f \ud83d\udcca \ud83c\udd8e","text":"<p>&amp; \u2934\ufe0f \ud83d\udc65 \ud83d\udcaa \u2699\ufe0f \u26ab\ufe0f \ud83c\udd8e \ud83d\udd22:</p> Python 3.8+ <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: str\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n    image: Union[Image, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: str\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n    image: Image | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: str\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n    image: Union[Image, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>\ud83d\udc49 \ud83d\udd1c \u26d3 \ud83d\udc48 ReadyAPI \ud83d\udd1c \u231b \ud83d\udcaa \ud83c\udf8f:</p> <pre><code>{\n    \"name\": \"Foo\",\n    \"description\": \"The pretender\",\n    \"price\": 42.0,\n    \"tax\": 3.2,\n    \"tags\": [\"rock\", \"metal\", \"bar\"],\n    \"image\": {\n        \"url\": \"http://example.com/baz.jpg\",\n        \"name\": \"The Foo live\"\n    }\n}\n</code></pre> <p>\ud83d\udd04, \ud83e\udd38 \ud83d\udc48 \ud83d\udcc4, \u23ee\ufe0f ReadyAPI \ud83d\udc46 \ud83e\udd1a:</p> <ul> <li>\ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udc15\u200d\ud83e\uddba (\ud83d\udee0\ufe0f, \u2652\ufe0f), \ud83d\udc26 \ud83c\udff7</li> <li>\ud83d\udcbd \ud83d\udee0\ufe0f</li> <li>\ud83d\udcbd \ud83d\udd2c</li> <li>\ud83c\udfe7 \ud83e\uddfe</li> </ul>"},{"location":"tutorial/body-nested-models/#_7","title":"\ud83c\udf81 \ud83c\udd8e &amp; \ud83d\udd2c","text":"<p>\u2196\ufe0f \u26aa\ufe0f\u27a1\ufe0f \ud83d\ude10 \u2b50 \ud83c\udd8e \ud83d\udc96 <code>str</code>, <code>int</code>, <code>float</code>, \u2652\ufe0f. \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83c\udf05 \ud83c\udfd7 \u2b50 \ud83c\udd8e \ud83d\udc48 \ud83d\ude16 \u26aa\ufe0f\u27a1\ufe0f <code>str</code>.</p> <p>\ud83d\udc40 \ud83c\udf10 \ud83c\udf9b \ud83d\udc46 \u2714\ufe0f, \ud83d\uded2 \ud83e\ude7a Pydantic \ud83d\ude0d \ud83c\udd8e. \ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \ud83d\uddbc \u23ed \ud83d\udcc3.</p> <p>\ud83d\uddbc, <code>Image</code> \ud83c\udff7 \ud83d\udc65 \u2714\ufe0f <code>url</code> \ud83c\udfd1, \ud83d\udc65 \ud83d\udcaa \ud83d\udce3 \u26ab\ufe0f \u21a9\ufe0f <code>str</code>, Pydantic <code>HttpUrl</code>:</p> Python 3.8+ <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n    image: Union[Image, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+ <pre><code>from pydantic import BaseModel, HttpUrl\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n    image: Image | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n    image: Union[Image, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>\ud83c\udfbb \ud83d\udd1c \u2705 \u2611 \ud83d\udcdb, &amp; \ud83d\udcc4 \ud83c\udfbb \ud83d\udd17 / \ud83d\uddc4 \u2705.</p>"},{"location":"tutorial/body-nested-models/#_8","title":"\ud83d\udd22 \u23ee\ufe0f \ud83d\udcc7 \ud83d\udcca","text":"<p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f Pydantic \ud83c\udff7 \ud83c\udffe <code>list</code>, <code>set</code>, \u2652\ufe0f:</p> Python 3.8+ <pre><code>from typing import List, Set, Union\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n    images: Union[List[Image], None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+ <pre><code>from pydantic import BaseModel, HttpUrl\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n    images: list[Image] | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n    images: Union[list[Image], None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>\ud83d\udc49 \ud83d\udd1c \u231b (\ud83d\udddc, \u2714, \ud83d\udcc4, \u2652\ufe0f) \ud83c\udfbb \ud83d\udcaa \ud83d\udc96:</p> <pre><code>{\n    \"name\": \"Foo\",\n    \"description\": \"The pretender\",\n    \"price\": 42.0,\n    \"tax\": 3.2,\n    \"tags\": [\n        \"rock\",\n        \"metal\",\n        \"bar\"\n    ],\n    \"images\": [\n        {\n            \"url\": \"http://example.com/baz.jpg\",\n            \"name\": \"The Foo live\"\n        },\n        {\n            \"url\": \"http://example.com/dave.jpg\",\n            \"name\": \"The Baz\"\n        }\n    ]\n}\n</code></pre> <p>Info</p> <p>\ud83d\udc40 \u2754 <code>images</code> \ud83d\udd11 \ud83d\udd1c \u2714\ufe0f \ud83d\udcc7 \ud83d\uddbc \ud83c\udf9a.</p>"},{"location":"tutorial/body-nested-models/#_9","title":"\ud83d\ude47 \ud83d\udc26 \ud83c\udff7","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udd2c \ud83c\udfb2 \ud83d\ude47 \ud83d\udc26 \ud83c\udff7:</p> Python 3.8+ <pre><code>from typing import List, Set, Union\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n    images: Union[List[Image], None] = None\n\n\nclass Offer(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    items: List[Item]\n\n\n@app.post(\"/offers/\")\nasync def create_offer(offer: Offer):\n    return offer\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+ <pre><code>from pydantic import BaseModel, HttpUrl\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n    images: list[Image] | None = None\n\n\nclass Offer(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    items: list[Item]\n\n\n@app.post(\"/offers/\")\nasync def create_offer(offer: Offer):\n    return offer\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n    images: Union[list[Image], None] = None\n\n\nclass Offer(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    items: list[Item]\n\n\n@app.post(\"/offers/\")\nasync def create_offer(offer: Offer):\n    return offer\n</code></pre> <p>Info</p> <p>\ud83d\udc40 \u2754 <code>Offer</code> \u2714\ufe0f \ud83d\udcc7 <code>Item</code>\u24c2, \u2754 \ud83d\udd04 \u2714\ufe0f \ud83d\udce6 \ud83d\udcc7 <code>Image</code>\u24c2</p>"},{"location":"tutorial/body-nested-models/#_10","title":"\ud83d\udcaa \ud83d\ude01 \ud83d\udcc7","text":"<p>\ud83d\udea5 \ud83d\udd1d \ud83c\udf9a \ud83d\udcb2 \ud83c\udfbb \ud83d\udcaa \ud83d\udc46 \u231b \ud83c\udfbb <code>array</code> (\ud83d\udc0d <code>list</code>), \ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83c\udd8e \ud83d\udd22 \ud83d\udd22, \ud83c\udf8f Pydantic \ud83c\udff7:</p> <pre><code>images: List[Image]\n</code></pre> <p>\u2696\ufe0f \ud83d\udc0d 3\ufe0f\u20e3.9\ufe0f\u20e3 &amp; \ud83d\udd1b:</p> <pre><code>images: list[Image]\n</code></pre> <p>:</p> Python 3.8+ <pre><code>from typing import List\n\nfrom pydantic import BaseModel, HttpUrl\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\n@app.post(\"/images/multiple/\")\nasync def create_multiple_images(images: List[Image]):\n    return images\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+ <pre><code>from pydantic import BaseModel, HttpUrl\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Image(BaseModel):\n    url: HttpUrl\n    name: str\n\n\n@app.post(\"/images/multiple/\")\nasync def create_multiple_images(images: list[Image]):\n    return images\n</code></pre>"},{"location":"tutorial/body-nested-models/#_11","title":"\ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udc15\u200d\ud83e\uddba \ud83c\udf10","text":"<p>&amp; \ud83d\udc46 \ud83e\udd1a \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udc15\u200d\ud83e\uddba \ud83c\udf10.</p> <p>\ud83c\udfec \ud83d\udd18 \ud83d\udcc7:</p> <p></p> <p>\ud83d\udc46 \ud83d\udeab \ud83d\udeab \ud83e\udd1a \ud83d\udc49 \ud83d\ude07 \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udc15\u200d\ud83e\uddba \ud83d\udea5 \ud83d\udc46 \ud83d\udc77 \ud83d\udd17 \u23ee\ufe0f <code>dict</code> \u21a9\ufe0f Pydantic \ud83c\udff7.</p> <p>\u270b\ufe0f \ud83d\udc46 \ud83d\udeab \u2714\ufe0f \ud83d\ude1f \ud83d\udd03 \ud83d\udc6b \ud83d\udc6f\u200d\u2642\ufe0f, \ud83d\udce8 #\ufe0f\u20e3 \ud83d\udddc \ud83d\udd01 &amp; \ud83d\udc46 \ud83d\udd22 \ud83d\udddc \ud83d\udd01 \ud83c\udfbb \ud83d\udc81\u200d\u2642\ufe0f.</p>"},{"location":"tutorial/body-nested-models/#dictm","title":"\ud83d\udcaa \u274c <code>dict</code>\u24c2","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83d\udcaa <code>dict</code> \u23ee\ufe0f \ud83d\udd11 \ud83c\udd8e &amp; \ud83d\udcb2 \ud83c\udf8f \ud83c\udd8e.</p> <p>\ud83c\udf75 \u2714\ufe0f \ud83d\udcad \u23ea \u26ab\ufe0f\u2754 \u2611 \ud83c\udfd1/\ud83d\udd22 \ud83d\udcdb (\ud83d\udd1c \ud83d\udcbc \u23ee\ufe0f Pydantic \ud83c\udff7).</p> <p>\ud83d\udc49 \ud83d\udd1c \u26a0 \ud83d\udea5 \ud83d\udc46 \ud83d\udc9a \ud83d\udce8 \ud83d\udd11 \ud83d\udc48 \ud83d\udc46 \ud83d\udeab \u23ea \ud83d\udcad.</p> <p>\ud83c\udf8f \u26a0 \ud83d\udcbc \ud83d\udd50\u2754 \ud83d\udc46 \ud83d\udc9a \u2714\ufe0f \ud83d\udd11 \ud83c\udf8f \ud83c\udd8e, \u2705 <code>int</code>.</p> <p>\ud83d\udc48 \u26ab\ufe0f\u2754 \ud83d\udc65 \ud83d\udd1c \ud83d\udc40 \ud83d\udce5.</p> <p>\ud83d\udc49 \ud83d\udcbc, \ud83d\udc46 \ud83d\udd1c \ud83d\udeab \ud83d\ude46 <code>dict</code> \ud83d\udccf \u26ab\ufe0f \u2714\ufe0f <code>int</code> \ud83d\udd11 \u23ee\ufe0f <code>float</code> \ud83d\udcb2:</p> Python 3.8+ <pre><code>from typing import Dict\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.post(\"/index-weights/\")\nasync def create_index_weights(weights: Dict[int, float]):\n    return weights\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.post(\"/index-weights/\")\nasync def create_index_weights(weights: dict[int, float]):\n    return weights\n</code></pre> <p>Tip</p> <p>\u2714\ufe0f \ud83e\udd2f \ud83d\udc48 \ud83c\udfbb \ud83d\udd74 \ud83d\udc15\u200d\ud83e\uddba <code>str</code> \ud83d\udd11.</p> <p>\u270b\ufe0f Pydantic \u2714\ufe0f \ud83c\udfe7 \ud83d\udcbd \ud83d\udee0\ufe0f.</p> <p>\ud83d\udc49 \u26d3 \ud83d\udc48, \u270b\ufe0f \ud83d\udc46 \ud83d\udee0\ufe0f \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udcaa \ud83d\udd74 \ud83d\udce8 \ud83c\udfbb \ud83d\udd11, \ud83d\udccf \ud83d\udc48 \ud83c\udfbb \ud83d\udd0c \ud83d\ude01 \ud83d\udd22, Pydantic \ud83d\udd1c \ud83d\udddc \ud83d\udc6b &amp; \u2714 \ud83d\udc6b.</p> <p>&amp; <code>dict</code> \ud83d\udc46 \ud83d\udce8 <code>weights</code> \ud83d\udd1c \ud83e\udd19 \u2714\ufe0f <code>int</code> \ud83d\udd11 &amp; <code>float</code> \ud83d\udcb2.</p>"},{"location":"tutorial/body-nested-models/#_12","title":"\ud83c\udf03","text":"<p>\u23ee\ufe0f ReadyAPI \ud83d\udc46 \u2714\ufe0f \ud83d\udd06 \ud83d\udcaa \ud83d\ude9a Pydantic \ud83c\udff7, \u23ea \ud83d\udea7 \ud83d\udc46 \ud83d\udcdf \ud83d\ude45, \ud83d\udccf &amp; \ud83d\ude0d.</p> <p>\u270b\ufe0f \u23ee\ufe0f \ud83c\udf10 \ud83d\udcb0:</p> <ul> <li>\ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udc15\u200d\ud83e\uddba (\ud83d\udee0\ufe0f \ud83c\udf10 \u2757)</li> <li>\ud83d\udcbd \ud83d\udee0\ufe0f (.\u24c2.. \u270d / \ud83d\udee0\ufe0f)</li> <li>\ud83d\udcbd \ud83d\udd2c</li> <li>\ud83d\udd17 \ud83e\uddfe</li> <li>\ud83c\udfe7 \ud83e\ude7a</li> </ul>"},{"location":"tutorial/body-updates/","title":"\ud83d\udcaa - \u2139","text":""},{"location":"tutorial/body-updates/#i-put","title":"\u2139 \u274e \u23ee\ufe0f <code>PUT</code>","text":"<p>\u2139 \ud83c\udfec \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d <code>PUT</code> \ud83d\udee0\ufe0f.</p> <p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>jsonable_encoder</code> \ud83d\udddc \ud83d\udd22 \ud83d\udcbd \ud83d\udcca \ud83d\udc48 \ud83d\udcaa \ud83c\udfea \ud83c\udfbb (\u2705 \u23ee\ufe0f \u2601 \ud83d\udcbd). \ud83d\uddbc, \ud83c\udfed <code>datetime</code> <code>str</code>.</p> Python 3.8+ <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.put(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    update_item_encoded = jsonable_encoder(item)\n    items[item_id] = update_item_encoded\n    return update_item_encoded\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str | None = None\n    description: str | None = None\n    price: float | None = None\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.put(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    update_item_encoded = jsonable_encoder(item)\n    items[item_id] = update_item_encoded\n    return update_item_encoded\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.put(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    update_item_encoded = jsonable_encoder(item)\n    items[item_id] = update_item_encoded\n    return update_item_encoded\n</code></pre> <p><code>PUT</code> \u2699\ufe0f \ud83d\udce8 \ud83d\udcbd \ud83d\udc48 \ud83d\udd1c \u274e \u267b \ud83d\udcbd.</p>"},{"location":"tutorial/body-updates/#_1","title":"\u26a0 \ud83d\udd03 \u274e","text":"<p>\ud83d\udc48 \u26d3 \ud83d\udc48 \ud83d\udea5 \ud83d\udc46 \ud83d\udc9a \u2139 \ud83c\udfec <code>bar</code> \u2699\ufe0f <code>PUT</code> \u23ee\ufe0f \ud83d\udcaa \u2697:</p> <pre><code>{\n    \"name\": \"Barz\",\n    \"price\": 3,\n    \"description\": None,\n}\n</code></pre> <p>\u21a9\ufe0f \u26ab\ufe0f \ud83d\udeab \ud83d\udd0c \u23ea \ud83c\udfea \ud83d\udd22 <code>\"tax\": 20.2</code>, \ud83d\udd22 \ud83c\udff7 \ud83d\udd1c \u270a \ud83d\udd22 \ud83d\udcb2 <code>\"tax\": 10.5</code>.</p> <p>&amp; \ud83d\udcca \ud83d\udd1c \ud83d\udd8a \u23ee\ufe0f \ud83d\udc48 \"\ud83c\udd95\" <code>tax</code> <code>10.5</code>.</p>"},{"location":"tutorial/body-updates/#i-patch","title":"\ud83c\udf55 \u2139 \u23ee\ufe0f <code>PATCH</code>","text":"<p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d <code>PATCH</code> \ud83d\udee0\ufe0f \ud83c\udf55 \u2139 \ud83d\udcbd.</p> <p>\ud83d\udc49 \u26d3 \ud83d\udc48 \ud83d\udc46 \ud83d\udcaa \ud83d\udce8 \ud83d\udd74 \ud83d\udcbd \ud83d\udc48 \ud83d\udc46 \ud83d\udc9a \u2139, \ud83c\udf42 \ud83c\udf82 \ud83d\udc23.</p> <p>Note</p> <p><code>PATCH</code> \ud83c\udf18 \ud83d\udece \u2699\ufe0f &amp; \ud83d\udcad \ud83c\udf18 <code>PUT</code>.</p> <p>&amp; \ud83d\udcda \ud83c\udfc9 \u2699\ufe0f \ud83d\udd74 <code>PUT</code>, \ud83c\udf55 \u2139.</p> <p>\ud83d\udc46 \ud83c\udd93 \u2699\ufe0f \ud83d\udc6b \ud83d\udc50 \ud83d\udc46 \ud83d\udc9a, ReadyAPI \ud83d\udeab \ud83d\udeab \ud83d\ude46 \ud83d\udeab.</p> <p>\u270b\ufe0f \ud83d\udc49 \ud83e\uddae \ud83c\udfa6 \ud83d\udc46, \ud83c\udf16 \u2696\ufe0f \ud83c\udf18, \u2754 \ud83d\udc6b \ud83c\udfaf \u2699\ufe0f.</p>"},{"location":"tutorial/body-updates/#pydantic-exclude_unset","title":"\u2699\ufe0f Pydantic <code>exclude_unset</code> \ud83d\udd22","text":"<p>\ud83d\udea5 \ud83d\udc46 \ud83d\udc9a \ud83d\udce8 \ud83c\udf55 \u2139, \u26ab\ufe0f \ud83d\udcf6 \u26a0 \u2699\ufe0f \ud83d\udd22 <code>exclude_unset</code> Pydantic \ud83c\udff7 <code>.dict()</code>.</p> <p>\ud83d\udc96 <code>item.dict(exclude_unset=True)</code>.</p> <p>\ud83d\udc48 \ud83d\udd1c \ud83c\udfd7 <code>dict</code> \u23ee\ufe0f \ud83d\udd74 \ud83d\udcbd \ud83d\udc48 \u2692 \ud83d\udd50\u2754 \ud83c\udfd7 <code>item</code> \ud83c\udff7, \ud83d\udeab \ud83d\udd22 \ud83d\udcb2.</p> <p>\u2934\ufe0f \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83d\udc49 \ud83c\udfd7 <code>dict</code> \u23ee\ufe0f \ud83d\udd74 \ud83d\udcbd \ud83d\udc48 \u2692 (\ud83d\udce8 \ud83d\udce8), \ud83d\udeab \ud83d\udd22 \ud83d\udcb2:</p> Python 3.8+ <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str | None = None\n    description: str | None = None\n    price: float | None = None\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n</code></pre>"},{"location":"tutorial/body-updates/#pydantic-update","title":"\u2699\ufe0f Pydantic <code>update</code> \ud83d\udd22","text":"<p>\ud83d\udd1c, \ud83d\udc46 \ud83d\udcaa \u270d \ud83d\udcc1 \u267b \ud83c\udff7 \u2699\ufe0f <code>.copy()</code>, &amp; \ud83d\udeb6\u200d\u2640\ufe0f <code>update</code> \ud83d\udd22 \u23ee\ufe0f <code>dict</code> \u2697 \ud83d\udcbd \u2139.</p> <p>\ud83d\udc96 <code>stored_item_model.copy(update=update_data)</code>:</p> Python 3.8+ <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str | None = None\n    description: str | None = None\n    price: float | None = None\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n</code></pre>"},{"location":"tutorial/body-updates/#i","title":"\ud83c\udf55 \u2139 \ud83c\udf03","text":"<p>\ud83d\udcc4, \u2714 \ud83c\udf55 \u2139 \ud83d\udc46 \ud83d\udd1c:</p> <ul> <li>(\u2697) \u2699\ufe0f <code>PATCH</code> \u21a9\ufe0f <code>PUT</code>.</li> <li>\ud83d\uddc3 \ud83c\udfea \ud83d\udcbd.</li> <li>\ud83d\udeae \ud83d\udc48 \ud83d\udcbd Pydantic \ud83c\udff7.</li> <li>\ud83c\udfd7 <code>dict</code> \ud83c\udf75 \ud83d\udd22 \ud83d\udcb2 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udd22 \ud83c\udff7 (\u2699\ufe0f <code>exclude_unset</code>).<ul> <li>\ud83d\udc49 \ud83c\udf0c \ud83d\udc46 \ud83d\udcaa \u2139 \ud83d\udd74 \ud83d\udcb2 \ud83e\udd19 \u2692 \ud83d\udc69\u200d\ud83d\udcbb, \u21a9\ufe0f \ud83d\udd10 \ud83d\udcb2 \u23ea \ud83c\udfea \u23ee\ufe0f \ud83d\udd22 \ud83d\udcb2 \ud83d\udc46 \ud83c\udff7.</li> </ul> </li> <li>\u270d \ud83d\udcc1 \ud83c\udfea \ud83c\udff7, \ud83d\udee0\ufe0f \u26ab\ufe0f \ud83d\udd22 \u23ee\ufe0f \ud83d\udce8 \ud83c\udf55 \u2139 (\u2699\ufe0f <code>update</code> \ud83d\udd22).</li> <li>\ud83d\udddc \ud83d\udcc1 \ud83c\udff7 \ud83d\udd73 \ud83d\udc48 \ud83d\udcaa \ud83c\udfea \ud83d\udc46 \ud83d\udcbd (\ud83d\uddbc, \u2699\ufe0f <code>jsonable_encoder</code>).<ul> <li>\ud83d\udc49 \u2b50 \u2699\ufe0f \ud83c\udff7 <code>.dict()</code> \ud83d\udc69\u200d\ud83d\udd2c \ud83d\udd04, \u270b\ufe0f \u26ab\ufe0f \u2692 \ud83d\udcad (&amp; \ud83d\udddc) \ud83d\udcb2 \ud83d\udcbd \ud83c\udd8e \ud83d\udc48 \ud83d\udcaa \ud83d\udddc \ud83c\udfbb, \ud83d\uddbc, <code>datetime</code> <code>str</code>.</li> </ul> </li> <li>\ud83d\udd8a \ud83d\udcbd \ud83d\udc46 \ud83d\udcbd.</li> <li>\ud83d\udce8 \u2139 \ud83c\udff7.</li> </ul> Python 3.8+ <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str | None = None\n    description: str | None = None\n    price: float | None = None\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]\n\n\n@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item\n</code></pre> <p>Tip</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83e\udd19 \u2699\ufe0f \ud83d\udc49 \ud83c\udf8f \u2692 \u23ee\ufe0f \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d <code>PUT</code> \ud83d\udee0\ufe0f.</p> <p>\u270b\ufe0f \ud83d\uddbc \ud83d\udce5 \u2699\ufe0f <code>PATCH</code> \u21a9\ufe0f \u26ab\ufe0f \u270d \ud83d\udc6b \u2699\ufe0f \ud83d\udcbc.</p> <p>Note</p> <p>\ud83d\udc40 \ud83d\udc48 \ud83d\udd22 \ud83c\udff7 \u2714.</p> <p>, \ud83d\udea5 \ud83d\udc46 \ud83d\udc9a \ud83d\udce8 \ud83c\udf55 \u2139 \ud83d\udc48 \ud83d\udcaa \ud83d\udeab \ud83c\udf10 \ud83d\udd22, \ud83d\udc46 \ud83d\udcaa \u2714\ufe0f \ud83c\udff7 \u23ee\ufe0f \ud83c\udf10 \ud83d\udd22 \u2122 \ud83d\udce6 (\u23ee\ufe0f \ud83d\udd22 \ud83d\udcb2 \u2696\ufe0f <code>None</code>).</p> <p>\ud83d\udd2c \u26aa\ufe0f\u27a1\ufe0f \ud83c\udff7 \u23ee\ufe0f \ud83c\udf10 \ud83d\udce6 \ud83d\udcb2 \u2139 &amp; \ud83c\udff7 \u23ee\ufe0f \u2714 \ud83d\udcb2 \ud83c\udfd7, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83d\udcad \ud83d\udd2c \u2795 \ud83c\udff7.</p>"},{"location":"tutorial/body/","title":"\ud83d\udce8 \ud83d\udcaa","text":"<p>\ud83d\udd50\u2754 \ud83d\udc46 \ud83d\udcaa \ud83d\udce8 \ud83d\udcca \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc69\u200d\ud83d\udcbb (\u27a1\ufe0f \ud83d\udcac, \ud83d\udda5) \ud83d\udc46 \ud83d\udee0\ufe0f, \ud83d\udc46 \ud83d\udce8 \u26ab\ufe0f \ud83d\udce8 \ud83d\udcaa.</p> <p>\ud83d\udce8 \ud83d\udcaa \ud83d\udcca \ud83d\udce8 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udc46 \ud83d\udee0\ufe0f. \ud83d\udce8 \ud83d\udcaa \ud83d\udcbd \ud83d\udc46 \ud83d\udee0\ufe0f \ud83d\udce8 \ud83d\udc69\u200d\ud83d\udcbb.</p> <p>\ud83d\udc46 \ud83d\udee0\ufe0f \ud83c\udf16 \ud83d\udd67 \u2714\ufe0f \ud83d\udce8 \ud83d\udce8 \ud83d\udcaa. \u270b\ufe0f \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udeab \ud83c\udfaf \ud83d\udcaa \ud83d\udce8 \ud83d\udce8 \ud83d\udcaa \ud83c\udf10 \ud83d\udd70.</p> <p>\ud83d\udce3 \ud83d\udce8 \ud83d\udcaa, \ud83d\udc46 \u2699\ufe0f Pydantic \ud83c\udff7 \u23ee\ufe0f \ud83c\udf10 \ud83d\udc6b \ud83c\udfcb\ufe0f &amp; \ud83d\udcb0.</p> <p>Info</p> <p>\ud83d\udce8 \ud83d\udcbd, \ud83d\udc46 \ud83d\udd1c \u2699\ufe0f 1\ufe0f\u20e3: <code>POST</code> (\ud83c\udf05 \u26a0), <code>PUT</code>, <code>DELETE</code> \u2696\ufe0f <code>PATCH</code>.</p> <p>\ud83d\udce8 \ud83d\udcaa \u23ee\ufe0f <code>GET</code> \ud83d\udce8 \u2714\ufe0f \u26a0 \ud83c\udfad \ud83d\udd27, \ud83d\udc50, \u26ab\ufe0f \ud83d\udc15\u200d\ud83e\uddba ReadyAPI, \ud83d\udd74 \ud83d\udcf6 \ud83c\udfd7/\ud83d\ude15 \u2699\ufe0f \ud83d\udcbc.</p> <p>\u26ab\ufe0f \ud83d\udeab, \ud83c\udf93 \ud83e\ude7a \u23ee\ufe0f \ud83e\udd81 \ud83c\udf9a \ud83c\udfc6 \ud83d\udeab \ud83c\udfa6 \ud83e\uddfe \ud83d\udcaa \ud83d\udd50\u2754 \u2699\ufe0f <code>GET</code>, &amp; \ud83d\uddf3 \ud83d\udd95 \ud83d\udcaa \ud83d\udeab \ud83d\udc15\u200d\ud83e\uddba \u26ab\ufe0f.</p>"},{"location":"tutorial/body/#pydantic-basemodel","title":"\ud83d\uddc4 Pydantic <code>BaseModel</code>","text":"<p>\ud83e\udd47, \ud83d\udc46 \ud83d\udcaa \ud83d\uddc4 <code>BaseModel</code> \u26aa\ufe0f\u27a1\ufe0f <code>pydantic</code>:</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n</code></pre>"},{"location":"tutorial/body/#_2","title":"\u270d \ud83d\udc46 \ud83d\udcbd \ud83c\udff7","text":"<p>\u2934\ufe0f \ud83d\udc46 \ud83d\udce3 \ud83d\udc46 \ud83d\udcbd \ud83c\udff7 \ud83c\udf93 \ud83d\udc48 \ud83d\ude16 \u26aa\ufe0f\u27a1\ufe0f <code>BaseModel</code>.</p> <p>\u2699\ufe0f \ud83d\udc29 \ud83d\udc0d \ud83c\udd8e \ud83c\udf10 \ud83d\udd22:</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n</code></pre> <p>\ud83c\udf8f \ud83d\udd50\u2754 \ud83d\udce3 \ud83d\udd22 \ud83d\udd22, \ud83d\udd50\u2754 \ud83c\udff7 \ud83d\udd22 \u2714\ufe0f \ud83d\udd22 \ud83d\udcb2, \u26ab\ufe0f \ud83d\udeab \u2714. \u23ea, \u26ab\ufe0f \u2714. \u2699\ufe0f <code>None</code> \u2692 \u26ab\ufe0f \ud83d\udce6.</p> <p>\ud83d\uddbc, \ud83d\udc49 \ud83c\udff7 \ud83d\udd1b \ud83d\udce3 \ud83c\udfbb \"<code>object</code>\" (\u2696\ufe0f \ud83d\udc0d <code>dict</code>) \ud83d\udc96:</p> <pre><code>{\n    \"name\": \"Foo\",\n    \"description\": \"An optional description\",\n    \"price\": 45.2,\n    \"tax\": 3.5\n}\n</code></pre> <p>... <code>description</code> &amp; <code>tax</code> \ud83d\udce6 (\u23ee\ufe0f \ud83d\udd22 \ud83d\udcb2 <code>None</code>), \ud83d\udc49 \ud83c\udfbb \"<code>object</code>\" \ud83d\udd1c \u2611:</p> <pre><code>{\n    \"name\": \"Foo\",\n    \"price\": 45.2\n}\n</code></pre>"},{"location":"tutorial/body/#_3","title":"\ud83d\udce3 \u26ab\ufe0f \ud83d\udd22","text":"<p>\ud83d\udeae \u26ab\ufe0f \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f, \ud83d\udce3 \u26ab\ufe0f \ud83c\udf8f \ud83c\udf0c \ud83d\udc46 \ud83d\udce3 \u27a1 &amp; \ud83d\udd22 \ud83d\udd22:</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n</code></pre> <p>...&amp; \ud83d\udce3 \ud83d\udeae \ud83c\udd8e \ud83c\udff7 \ud83d\udc46 \u270d, <code>Item</code>.</p>"},{"location":"tutorial/body/#_4","title":"\ud83c\udfc1","text":"<p>\u23ee\ufe0f \ud83d\udc48 \ud83d\udc0d \ud83c\udd8e \ud83d\udcc4, ReadyAPI \ud83d\udd1c:</p> <ul> <li>\u270d \ud83d\udcaa \ud83d\udce8 \ud83c\udfbb.</li> <li>\ud83d\udddc \ud83d\udd17 \ud83c\udd8e (\ud83d\udea5 \ud83d\udcaa).</li> <li>\u2714 \ud83d\udcbd.<ul> <li>\ud83d\udea5 \ud83d\udcbd \u274c, \u26ab\ufe0f \ud83d\udd1c \ud83d\udce8 \ud83d\udc4c &amp; \ud83c\udd91 \u274c, \u2620\ufe0f \u26ab\ufe0f\u2754 \ud83c\udf10\u2754 &amp; \u26ab\ufe0f\u2754 \u274c \ud83d\udcca.</li> </ul> </li> <li>\ud83e\udd1d \ud83d\udc46 \ud83d\udce8 \ud83d\udcca \ud83d\udd22 <code>item</code>.<ul> <li>\ud83d\udc46 \ud83d\udce3 \u26ab\ufe0f \ud83d\udd22 \ud83c\udd8e <code>Item</code>, \ud83d\udc46 \ud83d\udd1c \u2714\ufe0f \ud83c\udf10 \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udc15\u200d\ud83e\uddba (\ud83d\udee0\ufe0f, \u2652\ufe0f) \ud83c\udf10 \ud83d\udd22 &amp; \ud83d\udc6b \ud83c\udd8e.</li> </ul> </li> <li>\ud83c\udfd7 \ud83c\udfbb \ud83d\udd17 \ud83d\udd11 \ud83d\udc46 \ud83c\udff7, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83d\udc6b \ud83d\ude46 \ud83d\ude46 \ud83d\udc46 \ud83d\udc96 \ud83d\udea5 \u26ab\ufe0f \u2692 \ud83d\udd11 \ud83d\udc46 \ud83c\udfd7.</li> <li>\ud83d\udc48 \ud83d\udd17 \ud83d\udd1c \ud83c\udf55 \ud83c\udfd7 \ud83d\uddc4 \ud83d\udd17, &amp; \u2699\ufe0f \ud83c\udfe7 \ud83e\uddfe \u269c.</li> </ul>"},{"location":"tutorial/body/#_5","title":"\ud83c\udfe7 \ud83e\ude7a","text":"<p>\ud83c\udfbb \ud83d\udd17 \ud83d\udc46 \ud83c\udff7 \ud83d\udd1c \ud83c\udf55 \ud83d\udc46 \ud83d\uddc4 \ud83c\udfd7 \ud83d\udd17, &amp; \ud83d\udd1c \ud83c\udfa6 \ud83c\udf93 \ud83d\udee0\ufe0f \ud83e\ude7a:</p> <p></p> <p>&amp; \ud83d\udd1c \u2699\ufe0f \ud83d\udee0\ufe0f \ud83e\ude7a \ud83d\udd18 \ud83d\udd20 \u27a1 \ud83d\udee0\ufe0f \ud83d\udc48 \ud83d\udcaa \ud83d\udc6b:</p> <p></p>"},{"location":"tutorial/body/#_6","title":"\ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udc15\u200d\ud83e\uddba","text":"<p>\ud83d\udc46 \ud83d\udc68\u200d\ud83c\udfa8, \ud83d\udd18 \ud83d\udc46 \ud83d\udd22 \ud83d\udc46 \ud83d\udd1c \ud83e\udd1a \ud83c\udd8e \ud83d\udd11 &amp; \ud83d\udee0\ufe0f \ud83c\udf10 (\ud83d\udc49 \ud83d\udeab\ud83d\udd1c \ud83d\udd28 \ud83d\udea5 \ud83d\udc46 \ud83d\udce8 <code>dict</code> \u21a9\ufe0f Pydantic \ud83c\udff7):</p> <p></p> <p>\ud83d\udc46 \ud83e\udd1a \u274c \u2705 \u274c \ud83c\udd8e \ud83d\udee0\ufe0f:</p> <p></p> <p>\ud83d\udc49 \ud83d\udeab \ud83e\udd1e, \ud83c\udf82 \ud83d\udee0\ufe0f \ud83c\udfd7 \ud83e\udd2d \ud83d\udc48 \ud83d\udd27.</p> <p>&amp; \u26ab\ufe0f \ud83d\ude47 \ud83d\udcaf \ud83d\udd27 \ud83c\udf13, \u23ed \ud83d\ude46 \ud83d\udee0\ufe0f, \ud83d\ude9a \u26ab\ufe0f \ud83d\udd1c \ud83d\udc77 \u23ee\ufe0f \ud83c\udf10 \ud83d\udc68\u200d\ud83c\udfa8.</p> <p>\ud83d\udce4 \ud83d\udd00 Pydantic \u26ab\ufe0f \ud83d\udc15\u200d\ud83e\uddba \ud83d\udc49.</p> <p>\u23ee\ufe0f \ud83d\uddbc \u270a \u23ee\ufe0f \ud83c\udf99 \ud83c\udf99 \ud83d\udcdf.</p> <p>\u270b\ufe0f \ud83d\udc46 \ud83d\udd1c \ud83e\udd1a \ud83c\udf8f \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udc15\u200d\ud83e\uddba \u23ee\ufe0f \ud83d\uddd2 &amp; \ud83c\udf05 \ud83c\udf8f \ud83d\udc0d \ud83d\udc68\u200d\ud83c\udfa8:</p> <p></p> <p>Tip</p> <p>\ud83d\udea5 \ud83d\udc46 \u2699\ufe0f \ud83d\uddd2 \ud83d\udc46 \ud83d\udc68\u200d\ud83c\udfa8, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f Pydantic \ud83d\uddd2 \ud83d\udcc1.</p> <p>\u26ab\ufe0f \ud83d\udcc9 \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udc15\u200d\ud83e\uddba Pydantic \ud83c\udff7, \u23ee\ufe0f:</p> <ul> <li>\ud83d\ude98-\ud83d\udee0\ufe0f</li> <li>\ud83c\udd8e \u2705</li> <li>\ud83d\udee0\ufe0f</li> <li>\ud83d\udd0e</li> <li>\ud83d\udd2c</li> </ul>"},{"location":"tutorial/body/#_7","title":"\u2699\ufe0f \ud83c\udff7","text":"<p>\ud83d\udd18 \ud83d\udd22, \ud83d\udc46 \ud83d\udcaa \ud83d\udd10 \ud83c\udf10 \ud83d\udd22 \ud83c\udff7 \ud83c\udf9a \ud83d\udd17:</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    item_dict = item.dict()\n    if item.tax is not None:\n        price_with_tax = item.price + item.tax\n        item_dict.update({\"price_with_tax\": price_with_tax})\n    return item_dict\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    item_dict = item.dict()\n    if item.tax is not None:\n        price_with_tax = item.price + item.tax\n        item_dict.update({\"price_with_tax\": price_with_tax})\n    return item_dict\n</code></pre>"},{"location":"tutorial/body/#_8","title":"\ud83d\udce8 \ud83d\udcaa \u2795 \u27a1 \ud83d\udd22","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \u27a1 \ud83d\udd22 &amp; \ud83d\udce8 \ud83d\udcaa \ud83c\udf8f \ud83d\udd70.</p> <p>ReadyAPI \ud83d\udd1c \ud83e\udd14 \ud83d\udc48 \ud83d\udd22 \ud83d\udd22 \ud83d\udc48 \ud83c\udfcf \u27a1 \ud83d\udd22 \ud83d\udd1c \u270a \u26aa\ufe0f\u27a1\ufe0f \u27a1, &amp; \ud83d\udc48 \ud83d\udd22 \ud83d\udd22 \ud83d\udc48 \ud83d\udce3 Pydantic \ud83c\udff7 \ud83d\udd1c \u270a \u26aa\ufe0f\u27a1\ufe0f \ud83d\udce8 \ud83d\udcaa.</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    return {\"item_id\": item_id, **item.dict()}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    return {\"item_id\": item_id, **item.dict()}\n</code></pre>"},{"location":"tutorial/body/#_9","title":"\ud83d\udce8 \ud83d\udcaa \u2795 \u27a1 \u2795 \ud83d\udd22 \ud83d\udd22","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83d\udcaa, \u27a1 &amp; \ud83d\udd22 \ud83d\udd22, \ud83c\udf10 \ud83c\udf8f \ud83d\udd70.</p> <p>ReadyAPI \ud83d\udd1c \ud83e\udd14 \ud83d\udd20 \ud83d\udc6b &amp; \u270a \ud83d\udcca \u26aa\ufe0f\u27a1\ufe0f \u2611 \ud83e\udd49.</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item, q: Union[str, None] = None):\n    result = {\"item_id\": item_id, **item.dict()}\n    if q:\n        result.update({\"q\": q})\n    return result\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item, q: str | None = None):\n    result = {\"item_id\": item_id, **item.dict()}\n    if q:\n        result.update({\"q\": q})\n    return result\n</code></pre> <p>\ud83d\udd22 \ud83d\udd22 \ud83d\udd1c \ud83e\udd14 \u23e9:</p> <ul> <li>\ud83d\udea5 \ud83d\udd22 \ud83d\udce3 \u27a1, \u26ab\ufe0f \ud83d\udd1c \u2699\ufe0f \u27a1 \ud83d\udd22.</li> <li>\ud83d\udea5 \ud83d\udd22 \u2b50 \ud83c\udd8e (\ud83d\udc96 <code>int</code>, <code>float</code>, <code>str</code>, <code>bool</code>, \u2652\ufe0f) \u26ab\ufe0f \ud83d\udd1c \ud83d\udd2c \ud83d\udd22 \ud83d\udd22.</li> <li>\ud83d\udea5 \ud83d\udd22 \ud83d\udce3 \ud83c\udd8e Pydantic \ud83c\udff7, \u26ab\ufe0f \ud83d\udd1c \ud83d\udd2c \ud83d\udce8 \ud83d\udcaa.</li> </ul> <p>Note</p> <p>ReadyAPI \ud83d\udd1c \ud83d\udcad \ud83d\udc48 \ud83d\udcb2 <code>q</code> \ud83d\udeab \u2714 \u21a9\ufe0f \ud83d\udd22 \ud83d\udcb2 <code>= None</code>.</p> <p><code>Union</code> <code>Union[str, None]</code> \ud83d\udeab \u2699\ufe0f ReadyAPI, \u270b\ufe0f \ud83d\udd1c \u2714 \ud83d\udc46 \ud83d\udc68\u200d\ud83c\udfa8 \ud83e\udd1d \ud83d\udc46 \ud83d\udc4d \ud83d\udc15\u200d\ud83e\uddba &amp; \ud83d\udd0d \u274c.</p>"},{"location":"tutorial/body/#pydantic","title":"\ud83c\udf75 Pydantic","text":"<p>\ud83d\udea5 \ud83d\udc46 \ud83d\udeab \ud83d\udc9a \u2699\ufe0f Pydantic \ud83c\udff7, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83d\udcaa \ud83d\udd22. \ud83d\udc40 \ud83e\ude7a \ud83d\udcaa - \ud83d\udc97 \ud83d\udd22: \u2b50 \ud83d\udcb2 \ud83d\udcaa.</p>"},{"location":"tutorial/cookie-params/","title":"\ud83c\udf6a \ud83d\udd22","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udd2c \ud83c\udf6a \ud83d\udd22 \ud83c\udf8f \ud83c\udf0c \ud83d\udc46 \ud83d\udd2c <code>Query</code> &amp; <code>Path</code> \ud83d\udd22.</p>"},{"location":"tutorial/cookie-params/#cookie","title":"\ud83d\uddc4 <code>Cookie</code>","text":"<p>\ud83e\udd47 \ud83d\uddc4 <code>Cookie</code>:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(ads_id: Union[str, None] = Cookie(default=None)):\n    return {\"ads_id\": ads_id}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(ads_id: Annotated[str | None, Cookie()] = None):\n    return {\"ads_id\": ads_id}\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(ads_id: Annotated[Union[str, None], Cookie()] = None):\n    return {\"ads_id\": ads_id}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Cookie, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(ads_id: Annotated[Union[str, None], Cookie()] = None):\n    return {\"ads_id\": ads_id}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(ads_id: str | None = Cookie(default=None)):\n    return {\"ads_id\": ads_id}\n</code></pre>"},{"location":"tutorial/cookie-params/#cookie_1","title":"\ud83d\udce3 <code>Cookie</code> \ud83d\udd22","text":"<p>\u2934\ufe0f \ud83d\udce3 \ud83c\udf6a \ud83d\udd22 \u2699\ufe0f \ud83c\udf8f \ud83d\udcca \u23ee\ufe0f <code>Path</code> &amp; <code>Query</code>.</p> <p>\ud83e\udd47 \ud83d\udcb2 \ud83d\udd22 \ud83d\udcb2, \ud83d\udc46 \ud83d\udcaa \ud83d\udeb6\u200d\u2640\ufe0f \ud83c\udf10 \u2795 \ud83d\udd2c \u2696\ufe0f \u270d \ud83d\udd22:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(ads_id: Union[str, None] = Cookie(default=None)):\n    return {\"ads_id\": ads_id}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(ads_id: Annotated[str | None, Cookie()] = None):\n    return {\"ads_id\": ads_id}\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(ads_id: Annotated[Union[str, None], Cookie()] = None):\n    return {\"ads_id\": ads_id}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Cookie, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(ads_id: Annotated[Union[str, None], Cookie()] = None):\n    return {\"ads_id\": ads_id}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(ads_id: str | None = Cookie(default=None)):\n    return {\"ads_id\": ads_id}\n</code></pre> <p>\ud83d\udce1 \u2139</p> <p><code>Cookie</code> \"\ud83d\udc6d\" \ud83c\udf93 <code>Path</code> &amp; <code>Query</code>. \u26ab\ufe0f \ud83d\ude16 \u26aa\ufe0f\u27a1\ufe0f \ud83c\udf8f \u26a0 <code>Param</code> \ud83c\udf93.</p> <p>\u270b\ufe0f \ud83d\udcad \ud83d\udc48 \ud83d\udd50\u2754 \ud83d\udc46 \ud83d\uddc4 <code>Query</code>, <code>Path</code>, <code>Cookie</code> &amp; \ud83c\udf8f \u26aa\ufe0f\u27a1\ufe0f <code>readyapi</code>, \ud83d\udc48 \ud83e\udd19 \ud83d\udd22 \ud83d\udc48 \ud83d\udce8 \ud83c\udf81 \ud83c\udf93.</p> <p>Info</p> <p>\ud83d\udce3 \ud83c\udf6a, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>Cookie</code>, \u21a9\ufe0f \u23ea \ud83d\udd22 \ud83d\udd1c \ud83d\udd2c \ud83d\udd22 \ud83d\udd22.</p>"},{"location":"tutorial/cookie-params/#_2","title":"\ud83c\udf03","text":"<p>\ud83d\udce3 \ud83c\udf6a \u23ee\ufe0f <code>Cookie</code>, \u2699\ufe0f \ud83c\udf8f \u26a0 \u2693 <code>Query</code> &amp; <code>Path</code>.</p>"},{"location":"tutorial/cors/","title":"\u269c (\u2716\ufe0f-\ud83c\udde8\ud83c\uddf3 \u2139 \ud83e\udd1d)","text":"<p>\u269c \u2696\ufe0f \"\u2716\ufe0f-\ud83c\udde8\ud83c\uddf3 \u2139 \ud83e\udd1d\" \ud83d\udd17 \u26a0 \ud83d\udd50\u2754 \ud83d\udd78 \ud83c\udfc3\u200d\u2642 \ud83d\udda5 \u2714\ufe0f \ud83d\udd78 \ud83d\udcdf \ud83d\udc48 \ud83d\udd17 \u23ee\ufe0f \ud83d\udc69\u200d\ud83d\udcbb, &amp; \ud83d\udc69\u200d\ud83d\udcbb \ud83c\udf8f \"\ud83c\udde8\ud83c\uddf3\" \ud83c\udf18 \ud83d\udd78.</p>"},{"location":"tutorial/cors/#_1","title":"\ud83c\udde8\ud83c\uddf3","text":"<p>\ud83c\udde8\ud83c\uddf3 \ud83c\udf00 \ud83d\udee0\ufe0f (<code>http</code>, <code>https</code>), \ud83c\udd94 (<code>myapp.com</code>, <code>localhost</code>, <code>localhost.khulnasoft.com</code>), &amp; \u26f4 (<code>80</code>, <code>443</code>, <code>8080</code>).</p> <p>, \ud83c\udf10 \ud83d\udc6b \ud83c\udf8f \ud83c\udde8\ud83c\uddf3:</p> <ul> <li><code>http://localhost</code></li> <li><code>https://localhost</code></li> <li><code>http://localhost:8080</code></li> </ul> <p>\ud83d\udea5 \ud83d\udc6b \ud83c\udf10 <code>localhost</code>, \ud83d\udc6b \u2699\ufe0f \ud83c\udf8f \ud83d\udee0\ufe0f \u2696\ufe0f \u26f4,, \ud83d\udc6b \ud83c\udf8f \"\ud83c\udde8\ud83c\uddf3\".</p>"},{"location":"tutorial/cors/#_2","title":"\ud83d\udd01","text":"<p>, \u27a1\ufe0f \ud83d\udcac \ud83d\udc46 \u2714\ufe0f \ud83d\udd78 \ud83c\udfc3 \ud83d\udc46 \ud83d\udda5 <code>http://localhost:8080</code>, &amp; \ud83d\udeae \ud83d\udd78 \ud83d\udd04 \ud83d\udd17 \u23ee\ufe0f \ud83d\udc69\u200d\ud83d\udcbb \ud83c\udfc3 <code>http://localhost</code> (\u21a9\ufe0f \ud83d\udc65 \ud83d\udeab \u2714 \u26f4, \ud83d\udda5 \ud83d\udd1c \ud83e\udd14 \ud83d\udd22 \u26f4 <code>80</code>).</p> <p>\u2934\ufe0f, \ud83d\udda5 \ud83d\udd1c \ud83d\udce8 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d <code>OPTIONS</code> \ud83d\udce8 \ud83d\udc69\u200d\ud83d\udcbb, &amp; \ud83d\udea5 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udce8 \u2611 \ud83c\udf9a \u2714 \ud83d\udcfb \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc49 \ud83c\udf8f \ud83c\udde8\ud83c\uddf3 (<code>http://localhost:8080</code>) \u2934\ufe0f \ud83d\udda5 \ud83d\udd1c \u27a1\ufe0f \ud83d\udd78 \ud83d\udd78 \ud83d\udce8 \ud83d\udeae \ud83d\udce8 \ud83d\udc69\u200d\ud83d\udcbb.</p> <p>\ud83c\udfc6 \ud83d\udc49, \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd1c \u2714\ufe0f \ud83d\udcc7 \"\u2714 \ud83c\udde8\ud83c\uddf3\".</p> <p>\ud83d\udc49 \ud83d\udcbc, \u26ab\ufe0f \ud83d\udd1c \u2714\ufe0f \ud83d\udd0c <code>http://localhost:8080</code> \ud83d\udd78 \ud83d\udc77 \u2611.</p>"},{"location":"tutorial/cors/#_3","title":"\ud83c\udccf","text":"<p>\u26ab\ufe0f \ud83d\udcaa \ud83d\udce3 \ud83d\udcc7 <code>\"*\"</code> (\"\ud83c\udccf\") \ud83d\udcac \ud83d\udc48 \ud83c\udf10 \u2714.</p> <p>\u270b\ufe0f \ud83d\udc48 \ud83d\udd1c \ud83d\udd74 \u2714 \ud83c\udfaf \ud83c\udd8e \ud83d\udcfb, \ud83d\udeab \ud83c\udf10 \ud83d\udc48 \ud83d\udd0c \ud83c\udf93: \ud83c\udf6a, \u2714 \ud83c\udf9a \ud83d\udc96 \ud83d\udcda \u2699\ufe0f \u23ee\ufe0f \ud83d\udce8 \ud83e\udd1d, \u2652\ufe0f.</p> <p>, \ud83c\udf10 \ud83d\udc77 \u2611, \u26ab\ufe0f \ud83d\udc7b \u2714 \ud83c\udfaf \u2714 \ud83c\udde8\ud83c\uddf3.</p>"},{"location":"tutorial/cors/#corsmiddleware","title":"\u2699\ufe0f <code>CORSMiddleware</code>","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udd17 \u26ab\ufe0f \ud83d\udc46 ReadyAPI \ud83c\ude38 \u2699\ufe0f <code>CORSMiddleware</code>.</p> <ul> <li>\ud83d\uddc4 <code>CORSMiddleware</code>.</li> <li>\u270d \ud83d\udcc7 \u2714 \ud83c\udde8\ud83c\uddf3 (\ud83c\udfbb).</li> <li>\ud83d\udeae \u26ab\ufe0f \"\ud83d\udee0\ufe0f\" \ud83d\udc46 ReadyAPI \ud83c\ude38.</li> </ul> <p>\ud83d\udc46 \ud83d\udcaa \u2714 \ud83d\udea5 \ud83d\udc46 \ud83d\udc69\u200d\ud83d\udcbb \u2714:</p> <ul> <li>\ud83c\udf93 (\u2714 \ud83c\udf9a, \ud83c\udf6a, \u2652\ufe0f).</li> <li>\ud83c\udfaf \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udc69\u200d\ud83d\udd2c (<code>POST</code>, <code>PUT</code>) \u2696\ufe0f \ud83c\udf10 \ud83d\udc6b \u23ee\ufe0f \ud83c\udccf <code>\"*\"</code>.</li> <li>\ud83c\udfaf \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83c\udf9a \u2696\ufe0f \ud83c\udf10 \ud83d\udc6b \u23ee\ufe0f \ud83c\udccf <code>\"*\"</code>.</li> </ul> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.middleware.cors import CORSMiddleware\n\napp = ReadyAPI()\n\norigins = [\n    \"http://localhost.khulnasoft.com\",\n    \"https://localhost.khulnasoft.com\",\n    \"http://localhost\",\n    \"http://localhost:8080\",\n]\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n\n@app.get(\"/\")\nasync def main():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>\ud83d\udd22 \ud83d\udd22 \u2699\ufe0f <code>CORSMiddleware</code> \ud83d\udee0\ufe0f \ud83d\udeab \ud83d\udd22, \ud83d\udc46 \ud83d\udd1c \ud83d\udcaa \ud83c\udfaf \ud83d\udee0\ufe0f \ud83c\udfaf \ud83c\udde8\ud83c\uddf3, \ud83d\udc69\u200d\ud83d\udd2c, \u2696\ufe0f \ud83c\udf9a, \u2714 \ud83d\udda5 \u2714 \u2699\ufe0f \ud83d\udc6b \u2716\ufe0f-\ud83c\udd94 \ud83d\udd11.</p> <p>\ud83d\udcc4 \u274c \ud83d\udc15\u200d\ud83e\uddba:</p> <ul> <li><code>allow_origins</code> - \ud83d\udcc7 \ud83c\udde8\ud83c\uddf3 \ud83d\udc48 \ud83d\udd1c \u2714 \u2692 \u2716\ufe0f-\ud83c\udde8\ud83c\uddf3 \ud83d\udce8. \ud83e\udd36 \u24c2. <code>['https://example.org', 'https://www.example.org']</code>. \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>['*']</code> \u2714 \ud83d\ude46 \ud83c\udde8\ud83c\uddf3.</li> <li><code>allow_origin_regex</code> - \ud83c\udfbb \ud83c\udfbb \ud83c\udfcf \ud83d\udee1 \ud83c\udde8\ud83c\uddf3 \ud83d\udc48 \ud83d\udd1c \u2714 \u2692 \u2716\ufe0f-\ud83c\udde8\ud83c\uddf3 \ud83d\udce8. \u2705 <code>'https://.*\\.example\\.org'</code>.</li> <li><code>allow_methods</code> - \ud83d\udcc7 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udc69\u200d\ud83d\udd2c \ud83d\udc48 \ud83d\udd1c \u2714 \u2716\ufe0f-\ud83c\udde8\ud83c\uddf3 \ud83d\udce8. \ud83d\udd22 <code>['GET']</code>. \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>['*']</code> \u2714 \ud83c\udf10 \ud83d\udc29 \ud83d\udc69\u200d\ud83d\udd2c.</li> <li><code>allow_headers</code> - \ud83d\udcc7 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udce8 \ud83c\udf9a \ud83d\udc48 \ud83d\udd1c \ud83d\udc15\u200d\ud83e\uddba \u2716\ufe0f-\ud83c\udde8\ud83c\uddf3 \ud83d\udce8. \ud83d\udd22 <code>[]</code>. \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>['*']</code> \u2714 \ud83c\udf10 \ud83c\udf9a. <code>Accept</code>, <code>Accept-Language</code>, <code>Content-Language</code> &amp; <code>Content-Type</code> \ud83c\udf9a \ud83d\udd67 \u2714 \ud83d\ude45 \u269c \ud83d\udce8.</li> <li><code>allow_credentials</code> - \ud83c\udfa6 \ud83d\udc48 \ud83c\udf6a \ud83d\udd1c \ud83d\udc15\u200d\ud83e\uddba \u2716\ufe0f-\ud83c\udde8\ud83c\uddf3 \ud83d\udce8. \ud83d\udd22 <code>False</code>. , <code>allow_origins</code> \ud83d\udeab\ud83d\udd1c \u2692 <code>['*']</code> \ud83c\udf93 \u2714, \ud83c\udde8\ud83c\uddf3 \ud83d\udd1c \u2714.</li> <li><code>expose_headers</code> - \ud83c\udfa6 \ud83d\ude46 \ud83d\udce8 \ud83c\udf9a \ud83d\udc48 \ud83d\udd1c \u2692 \u267f \ud83d\udda5. \ud83d\udd22 <code>[]</code>.</li> <li><code>max_age</code> - \u2692 \ud83d\udd06 \ud83d\udd70 \ud83e\udd48 \ud83d\udda5 \ud83d\udcbe \u269c \ud83d\udce8. \ud83d\udd22 <code>600</code>.</li> </ul> <p>\ud83d\udee0\ufe0f \ud83d\udce8 2\ufe0f\u20e3 \ud83c\udfaf \ud83c\udd8e \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udce8...</p>"},{"location":"tutorial/cors/#_4","title":"\u269c \ud83d\udeeb \ud83d\udce8","text":"<p>\ud83d\udc49 \ud83d\ude46 <code>OPTIONS</code> \ud83d\udce8 \u23ee\ufe0f <code>Origin</code> &amp; <code>Access-Control-Request-Method</code> \ud83c\udf9a.</p> <p>\ud83d\udc49 \ud83d\udcbc \ud83d\udee0\ufe0f \ud83d\udd1c \ud83c\udd98 \ud83d\udce8 \ud83d\udce8 &amp; \ud83d\udce8 \u23ee\ufe0f \u2611 \u269c \ud83c\udf9a, &amp; \ud83d\udc6f\u200d\u2642\ufe0f <code>200</code> \u2696\ufe0f <code>400</code> \ud83d\udce8 \ud83c\udf93 \ud83c\udfaf.</p>"},{"location":"tutorial/cors/#_5","title":"\ud83d\ude45 \ud83d\udce8","text":"<p>\ud83d\ude46 \ud83d\udce8 \u23ee\ufe0f <code>Origin</code> \ud83c\udf9a. \ud83d\udc49 \ud83d\udcbc \ud83d\udee0\ufe0f \ud83d\udd1c \ud83d\udeb6\u200d\u2640\ufe0f \ud83d\udce8 \ud83d\udd18 \ud83d\ude10, \u270b\ufe0f \ud83d\udd1c \ud83d\udd0c \u2611 \u269c \ud83c\udf9a \ud83d\udd1b \ud83d\udce8.</p>"},{"location":"tutorial/cors/#i","title":"\ud83c\udf05 \u2139","text":"<p>\ud83c\udf16 \u2139 \ud83d\udd03 \u269c, \u2705 \ud83e\udd8e \u269c \ud83e\uddfe.</p> <p>\ud83d\udce1 \u2139</p> <p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>from starlette.middleware.cors import CORSMiddleware</code>.</p> <p>ReadyAPI \ud83d\ude9a \ud83d\udcda \ud83d\udee0\ufe0f <code>readyapi.middleware</code> \ud83c\udfea \ud83d\udc46, \ud83d\udc69\u200d\ud83d\udcbb. \u270b\ufe0f \ud83c\udf05 \ud83d\udcaa \ud83d\udee0\ufe0f \ud83d\udc5f \ud83d\udd17 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc83.</p>"},{"location":"tutorial/debugging/","title":"\ud83d\udee0\ufe0f","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udd17 \ud83d\udd79 \ud83d\udc46 \ud83d\udc68\u200d\ud83c\udfa8, \ud83d\uddbc \u23ee\ufe0f \ud83c\udf99 \ud83c\udf99 \ud83d\udcdf \u2696\ufe0f \ud83d\uddd2.</p>"},{"location":"tutorial/debugging/#uvicorn","title":"\ud83e\udd19 <code>uvicorn</code>","text":"<p>\ud83d\udc46 ReadyAPI \ud83c\ude38, \ud83d\uddc4 &amp; \ud83c\udfc3 <code>uvicorn</code> \ud83d\udd17:</p> Python 3.8+ <pre><code>import uvicorn\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\ndef root():\n    a = \"a\"\n    b = \"b\" + a\n    return {\"hello world\": b}\n\n\nif __name__ == \"__main__\":\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n</code></pre>"},{"location":"tutorial/debugging/#__name__-__main__","title":"\ud83d\udd03 <code>__name__ == \"__main__\"</code>","text":"<p>\ud83d\udc51 \ud83c\udfaf <code>__name__ == \"__main__\"</code> \u2714\ufe0f \ud83d\udcdf \ud83d\udc48 \ud83d\udee0\ufe0f \ud83d\udd50\u2754 \ud83d\udc46 \ud83d\udcc1 \ud83e\udd19 \u23ee\ufe0f:</p> <pre><code>$ python myapp.py\n</code></pre> <p>\u270b\ufe0f \ud83d\udeab \ud83e\udd19 \ud83d\udd50\u2754 \u27951\ufe0f\u20e3 \ud83d\udcc1 \ud83d\uddc4 \u26ab\ufe0f, \ud83d\udc96:</p> <pre><code>from myapp import app\n</code></pre>"},{"location":"tutorial/debugging/#i","title":"\ud83c\udf05 \u2139","text":"<p>\u27a1\ufe0f \ud83d\udcac \ud83d\udc46 \ud83d\udcc1 \ud83c\udf1f <code>myapp.py</code>.</p> <p>\ud83d\udea5 \ud83d\udc46 \ud83c\udfc3 \u26ab\ufe0f \u23ee\ufe0f:</p> <pre><code>$ python myapp.py\n</code></pre> <p>\u2934\ufe0f \ud83d\udd17 \ud83d\udd22 <code>__name__</code> \ud83d\udc46 \ud83d\udcc1, \u270d \ud83d\udd01 \ud83d\udc0d, \ud83d\udd1c \u2714\ufe0f \ud83d\udcb2 \ud83c\udfbb <code>\"__main__\"</code>.</p> <p>, \ud83d\udcc4:</p> <pre><code>    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n</code></pre> <p>\ud83d\udd1c \ud83c\udfc3.</p> <p>\ud83d\udc49 \ud83c\udfc6 \ud83d\udeab \ud83d\udd28 \ud83d\udea5 \ud83d\udc46 \ud83d\uddc4 \ud83d\udc48 \ud83d\udd79 (\ud83d\udcc1).</p> <p>, \ud83d\udea5 \ud83d\udc46 \u2714\ufe0f \u27951\ufe0f\u20e3 \ud83d\udcc1 <code>importer.py</code> \u23ee\ufe0f:</p> <pre><code>from myapp import app\n\n# Some more code\n</code></pre> <p>\ud83d\udc48 \ud83d\udcbc, \ud83c\udfe7 \ud83d\udd22 \ud83d\udd18 <code>myapp.py</code> \ud83d\udd1c \ud83d\udeab \u2714\ufe0f \ud83d\udd22 <code>__name__</code> \u23ee\ufe0f \ud83d\udcb2 <code>\"__main__\"</code>.</p> <p>, \u23f8:</p> <pre><code>    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n</code></pre> <p>\ud83d\udd1c \ud83d\udeab \ud83d\udee0\ufe0f.</p> <p>Info</p> <p>\ud83c\udf05 \u2139, \u2705 \ud83d\udec2 \ud83d\udc0d \ud83e\ude7a.</p>"},{"location":"tutorial/debugging/#_2","title":"\ud83c\udfc3 \ud83d\udc46 \ud83d\udcdf \u23ee\ufe0f \ud83d\udc46 \ud83d\udd79","text":"<p>\u21a9\ufe0f \ud83d\udc46 \ud83c\udfc3 Uvicorn \ud83d\udcbd \ud83d\udd17 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc46 \ud83d\udcdf, \ud83d\udc46 \ud83d\udcaa \ud83e\udd19 \ud83d\udc46 \ud83d\udc0d \ud83d\udccb (\ud83d\udc46 ReadyAPI \ud83c\ude38) \ud83d\udd17 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udd79.</p> <p>\ud83d\uddbc, \ud83c\udf99 \ud83c\udf99 \ud83d\udcdf, \ud83d\udc46 \ud83d\udcaa:</p> <ul> <li>\ud83d\udeb6 \"\u2139\" \ud83c\udf9b.</li> <li>\"\ud83d\udeae \ud83d\udcf3...\".</li> <li>\ud83d\udd8a \"\ud83d\udc0d\"</li> <li>\ud83c\udfc3 \ud83d\udd79 \u23ee\ufe0f \ud83c\udf9b \"<code>Python: Current File (Integrated Terminal)</code>\".</li> </ul> <p>\u26ab\ufe0f \ud83d\udd1c \u2934\ufe0f \u25b6\ufe0f \ud83d\udcbd \u23ee\ufe0f \ud83d\udc46 ReadyAPI \ud83d\udcdf, \u26d4\ufe0f \ud83d\udc46 0\ufe0f\u20e3, \u2652\ufe0f.</p> <p>\ud83d\udce5 \u2754 \u26ab\ufe0f \ud83d\udcaa \ud83d\udc40:</p> <p></p> <p>\ud83d\udea5 \ud83d\udc46 \u2699\ufe0f \ud83d\uddd2, \ud83d\udc46 \ud83d\udcaa:</p> <ul> <li>\ud83d\udcc2 \"\ud83c\udfc3\" \ud83c\udf63.</li> <li>\ud83d\udd8a \ud83c\udf9b \"\u2139...\".</li> <li>\u2934\ufe0f \ud83d\udd11 \ud83c\udf63 \ud83c\udfa6 \ud83c\udd99.</li> <li>\ud83d\udd8a \ud83d\udcc1 \u2139 (\ud83d\udc49 \ud83d\udcbc, <code>main.py</code>).</li> </ul> <p>\u26ab\ufe0f \ud83d\udd1c \u2934\ufe0f \u25b6\ufe0f \ud83d\udcbd \u23ee\ufe0f \ud83d\udc46 ReadyAPI \ud83d\udcdf, \u26d4\ufe0f \ud83d\udc46 0\ufe0f\u20e3, \u2652\ufe0f.</p> <p>\ud83d\udce5 \u2754 \u26ab\ufe0f \ud83d\udcaa \ud83d\udc40:</p> <p></p>"},{"location":"tutorial/encoder/","title":"\ud83c\udfbb \ud83d\udd17 \ud83d\udd22","text":"<p>\ud83d\udce4 \ud83d\udcbc \ud83c\udf10\u2754 \ud83d\udc46 5\ufe0f\u20e3\ud83d\udcc6 \ud83d\udcaa \ud83d\udddc \ud83d\udcbd \ud83c\udd8e (\ud83d\udc96 Pydantic \ud83c\udff7) \ud83d\udd73 \ud83d\udd17 \u23ee\ufe0f \ud83c\udfbb (\ud83d\udc96 <code>dict</code>, <code>list</code>, \u2652\ufe0f).</p> <p>\ud83d\uddbc, \ud83d\udea5 \ud83d\udc46 \ud83d\udcaa \ud83c\udfea \u26ab\ufe0f \ud83d\udcbd.</p> <p>\ud83d\udc48, ReadyAPI \ud83d\ude9a <code>jsonable_encoder()</code> \ud83d\udd22.</p>"},{"location":"tutorial/encoder/#jsonable_encoder","title":"\u2699\ufe0f <code>jsonable_encoder</code>","text":"<p>\u27a1\ufe0f \ud83c\udf08 \ud83d\udc48 \ud83d\udc46 \u2714\ufe0f \ud83d\udcbd <code>fake_db</code> \ud83d\udc48 \ud83d\udd74 \ud83d\udce8 \ud83c\udfbb \ud83d\udd17 \ud83d\udcbd.</p> <p>\ud83d\uddbc, \u26ab\ufe0f \ud83d\udeab \ud83d\udce8 <code>datetime</code> \ud83c\udf9a, \ud83d\udc48 \ud83d\udeab \ud83d\udd17 \u23ee\ufe0f \ud83c\udfbb.</p> <p>, <code>datetime</code> \ud83c\udf9a \ud83d\udd1c \u2714\ufe0f \ud83d\udddc <code>str</code> \u2697 \ud83d\udcbd \ud83d\udcbe \ud83d\udcc1.</p> <p>\ud83c\udf8f \ud83c\udf0c, \ud83d\udc49 \ud83d\udcbd \ud83d\udeab\ud83d\udd1c \ud83d\udce8 Pydantic \ud83c\udff7 (\ud83c\udf9a \u23ee\ufe0f \ud83d\udd22), \ud83d\udd74 <code>dict</code>.</p> <p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>jsonable_encoder</code> \ud83d\udc48.</p> <p>\u26ab\ufe0f \ud83d\udce8 \ud83c\udf9a, \ud83d\udc96 Pydantic \ud83c\udff7, &amp; \ud83d\udce8 \ud83c\udfbb \ud83d\udd17 \u23ec:</p> Python 3.8+ <pre><code>from datetime import datetime\nfrom typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\nfake_db = {}\n\n\nclass Item(BaseModel):\n    title: str\n    timestamp: datetime\n    description: Union[str, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{id}\")\ndef update_item(id: str, item: Item):\n    json_compatible_item_data = jsonable_encoder(item)\n    fake_db[id] = json_compatible_item_data\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+ <pre><code>from datetime import datetime\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\nfrom readyapi.encoders import jsonable_encoder\n\nfake_db = {}\n\n\nclass Item(BaseModel):\n    title: str\n    timestamp: datetime\n    description: str | None = None\n\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{id}\")\ndef update_item(id: str, item: Item):\n    json_compatible_item_data = jsonable_encoder(item)\n    fake_db[id] = json_compatible_item_data\n</code></pre> <p>\ud83d\udc49 \ud83d\uddbc, \u26ab\ufe0f \ud83d\udd1c \ud83d\udddc Pydantic \ud83c\udff7 <code>dict</code>, &amp; <code>datetime</code> <code>str</code>.</p> <p>\ud83c\udfc1 \ud83e\udd19 \u26ab\ufe0f \ud83d\udd73 \ud83d\udc48 \ud83d\udcaa \ud83d\udddc \u23ee\ufe0f \ud83d\udc0d \ud83d\udc29 <code>json.dumps()</code>.</p> <p>\u26ab\ufe0f \ud83d\udeab \ud83d\udce8 \u2b55 <code>str</code> \u2697 \ud83d\udcbd \ud83c\udfbb \ud83d\udcc1 (\ud83c\udfbb). \u26ab\ufe0f \ud83d\udce8 \ud83d\udc0d \ud83d\udc29 \ud83d\udcbd \ud83d\udcca (\u2705 <code>dict</code>) \u23ee\ufe0f \ud83d\udcb2 &amp; \ud83c\udfa7-\ud83d\udcb2 \ud83d\udc48 \ud83c\udf10 \ud83d\udd17 \u23ee\ufe0f \ud83c\udfbb.</p> <p>Note</p> <p><code>jsonable_encoder</code> \ud83e\udd19 \u2699\ufe0f ReadyAPI \ud83d\udd18 \ud83d\udddc \ud83d\udcbd. \u270b\ufe0f \u26ab\ufe0f \u26a0 \ud83d\udcda \ud83c\udf8f \ud83d\ude10.</p>"},{"location":"tutorial/extra-data-types/","title":"\u2795 \ud83d\udcbd \ud83c\udd8e","text":"<p>\ud83c\udd99 \ud83d\udd1c, \ud83d\udc46 \u2714\ufe0f \u2699\ufe0f \u26a0 \ud83d\udcca \ud83c\udd8e, \ud83d\udc96:</p> <ul> <li><code>int</code></li> <li><code>float</code></li> <li><code>str</code></li> <li><code>bool</code></li> </ul> <p>\u270b\ufe0f \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83c\udf05 \ud83c\udfd7 \ud83d\udcca \ud83c\udd8e.</p> <p>&amp; \ud83d\udc46 \ud83d\udd1c \u2714\ufe0f \ud83c\udf8f \u2692 \ud83d\udc40 \ud83c\udd99 \ud83d\udd1c:</p> <ul> <li>\ud83d\udc51 \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udc15\u200d\ud83e\uddba.</li> <li>\ud83d\udcbd \ud83d\udee0\ufe0f \u26aa\ufe0f\u27a1\ufe0f \ud83d\udce8 \ud83d\udce8.</li> <li>\ud83d\udcbd \ud83d\udee0\ufe0f \ud83d\udce8 \ud83d\udcbd.</li> <li>\ud83d\udcbd \ud83d\udd2c.</li> <li>\ud83c\udfe7 \u270d &amp; \ud83e\uddfe.</li> </ul>"},{"location":"tutorial/extra-data-types/#_2","title":"\ud83c\udf8f \ud83d\udcbd \ud83c\udd8e","text":"<p>\ud83d\udce5 \ud83c\udf16 \ud83d\udcca \ud83c\udd8e \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f:</p> <ul> <li><code>UUID</code>:<ul> <li>\ud83d\udc29 \"\u2b50 \ud83d\ude0d \ud83c\udd94\", \u26a0 \ud83c\udd94 \ud83d\udcda \ud83d\udcbd &amp; \u2699\ufe0f.</li> <li>\ud83d\udce8 &amp; \ud83d\udce8 \ud83d\udd1c \ud83c\udfa8 <code>str</code>.</li> </ul> </li> <li><code>datetime.datetime</code>:<ul> <li>\ud83d\udc0d <code>datetime.datetime</code>.</li> <li>\ud83d\udce8 &amp; \ud83d\udce8 \ud83d\udd1c \ud83c\udfa8 <code>str</code> \ud83d\udcbe 8\ufe0f\u20e36\ufe0f\u20e30\ufe0f\u20e31\ufe0f\u20e3 \ud83d\udcc1, \ud83d\udc96: <code>2008-09-15T15:53:00+05:00</code>.</li> </ul> </li> <li><code>datetime.date</code>:<ul> <li>\ud83d\udc0d <code>datetime.date</code>.</li> <li>\ud83d\udce8 &amp; \ud83d\udce8 \ud83d\udd1c \ud83c\udfa8 <code>str</code> \ud83d\udcbe 8\ufe0f\u20e36\ufe0f\u20e30\ufe0f\u20e31\ufe0f\u20e3 \ud83d\udcc1, \ud83d\udc96: <code>2008-09-15</code>.</li> </ul> </li> <li><code>datetime.time</code>:<ul> <li>\ud83d\udc0d <code>datetime.time</code>.</li> <li>\ud83d\udce8 &amp; \ud83d\udce8 \ud83d\udd1c \ud83c\udfa8 <code>str</code> \ud83d\udcbe 8\ufe0f\u20e36\ufe0f\u20e30\ufe0f\u20e31\ufe0f\u20e3 \ud83d\udcc1, \ud83d\udc96: <code>14:23:55.003</code>.</li> </ul> </li> <li><code>datetime.timedelta</code>:<ul> <li>\ud83d\udc0d <code>datetime.timedelta</code>.</li> <li>\ud83d\udce8 &amp; \ud83d\udce8 \ud83d\udd1c \ud83c\udfa8 <code>float</code> \ud83c\udf10 \ud83e\udd48.</li> <li>Pydantic \u2714 \ud83c\udfa6 \u26ab\ufe0f \"\ud83d\udcbe 8\ufe0f\u20e36\ufe0f\u20e30\ufe0f\u20e31\ufe0f\u20e3 \ud83d\udd70 \u2795 \ud83d\udd22\", \ud83d\udc40 \ud83e\ude7a \ud83c\udf05 \u2139.</li> </ul> </li> <li><code>frozenset</code>:<ul> <li>\ud83d\udce8 &amp; \ud83d\udce8, \ud83d\ude25 \ud83c\udf8f <code>set</code>:<ul> <li>\ud83d\udce8, \ud83d\udcc7 \ud83d\udd1c \u270d, \u274e \u274e &amp; \ud83c\udfed \u26ab\ufe0f <code>set</code>.</li> <li>\ud83d\udce8, <code>set</code> \ud83d\udd1c \ud83d\udddc <code>list</code>.</li> <li>\ud83c\udfd7 \ud83d\udd17 \ud83d\udd1c \u2714 \ud83d\udc48 <code>set</code> \ud83d\udcb2 \ud83d\ude0d (\u2699\ufe0f \ud83c\udfbb \ud83d\udd17 <code>uniqueItems</code>).</li> </ul> </li> </ul> </li> <li><code>bytes</code>:<ul> <li>\ud83d\udc29 \ud83d\udc0d <code>bytes</code>.</li> <li>\ud83d\udce8 &amp; \ud83d\udce8 \ud83d\udd1c \ud83d\ude25 <code>str</code>.</li> <li>\ud83c\udfd7 \ud83d\udd17 \ud83d\udd1c \u2714 \ud83d\udc48 \u26ab\ufe0f <code>str</code> \u23ee\ufe0f <code>binary</code> \"\ud83d\udcc1\".</li> </ul> </li> <li><code>Decimal</code>:<ul> <li>\ud83d\udc29 \ud83d\udc0d <code>Decimal</code>.</li> <li>\ud83d\udce8 &amp; \ud83d\udce8, \ud83c\udf75 \ud83c\udf8f <code>float</code>.</li> </ul> </li> <li>\ud83d\udc46 \ud83d\udcaa \u2705 \ud83c\udf10 \u2611 Pydantic \ud83d\udcca \ud83c\udd8e \ud83d\udce5: Pydantic \ud83d\udcca \ud83c\udd8e.</li> </ul>"},{"location":"tutorial/extra-data-types/#_3","title":"\ud83d\uddbc","text":"<p>\ud83d\udce5 \ud83d\uddbc \u27a1 \ud83d\udee0\ufe0f \u23ee\ufe0f \ud83d\udd22 \u2699\ufe0f \ud83d\udd1b \ud83c\udd8e.</p> Python 3.8+ - non-Annotated <pre><code>from datetime import datetime, time, timedelta\nfrom typing import Union\nfrom uuid import UUID\n\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: datetime = Body(),\n    end_datetime: datetime = Body(),\n    process_after: timedelta = Body(),\n    repeat_at: Union[time, None] = Body(default=None),\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from datetime import datetime, time, timedelta\nfrom typing import Annotated\nfrom uuid import UUID\n\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: Annotated[datetime, Body()],\n    end_datetime: Annotated[datetime, Body()],\n    process_after: Annotated[timedelta, Body()],\n    repeat_at: Annotated[time | None, Body()] = None,\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n</code></pre> <pre><code>from datetime import datetime, time, timedelta\nfrom typing import Annotated, Union\nfrom uuid import UUID\n\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: Annotated[datetime, Body()],\n    end_datetime: Annotated[datetime, Body()],\n    process_after: Annotated[timedelta, Body()],\n    repeat_at: Annotated[Union[time, None], Body()] = None,\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n</code></pre> <pre><code>from datetime import datetime, time, timedelta\nfrom typing import Union\nfrom uuid import UUID\n\nfrom readyapi import Body, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: Annotated[datetime, Body()],\n    end_datetime: Annotated[datetime, Body()],\n    process_after: Annotated[timedelta, Body()],\n    repeat_at: Annotated[Union[time, None], Body()] = None,\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, time, timedelta\nfrom uuid import UUID\n\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: datetime = Body(),\n    end_datetime: datetime = Body(),\n    process_after: timedelta = Body(),\n    repeat_at: time | None = Body(default=None),\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n</code></pre> <p>\ud83d\uddd2 \ud83d\udc48 \ud83d\udd22 \ud83d\udd18 \ud83d\udd22 \u2714\ufe0f \ud83d\udc6b \ud83d\udc20 \ud83d\udcbd \ud83c\udd8e, &amp; \ud83d\udc46 \ud83d\udcaa, \ud83d\uddbc, \ud83c\udfad \ud83d\ude10 \ud83d\udcc5 \ud83c\udfad, \ud83d\udc96:</p> Python 3.8+ - non-Annotated <pre><code>from datetime import datetime, time, timedelta\nfrom typing import Union\nfrom uuid import UUID\n\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: datetime = Body(),\n    end_datetime: datetime = Body(),\n    process_after: timedelta = Body(),\n    repeat_at: Union[time, None] = Body(default=None),\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from datetime import datetime, time, timedelta\nfrom typing import Annotated\nfrom uuid import UUID\n\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: Annotated[datetime, Body()],\n    end_datetime: Annotated[datetime, Body()],\n    process_after: Annotated[timedelta, Body()],\n    repeat_at: Annotated[time | None, Body()] = None,\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n</code></pre> <pre><code>from datetime import datetime, time, timedelta\nfrom typing import Annotated, Union\nfrom uuid import UUID\n\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: Annotated[datetime, Body()],\n    end_datetime: Annotated[datetime, Body()],\n    process_after: Annotated[timedelta, Body()],\n    repeat_at: Annotated[Union[time, None], Body()] = None,\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n</code></pre> <pre><code>from datetime import datetime, time, timedelta\nfrom typing import Union\nfrom uuid import UUID\n\nfrom readyapi import Body, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: Annotated[datetime, Body()],\n    end_datetime: Annotated[datetime, Body()],\n    process_after: Annotated[timedelta, Body()],\n    repeat_at: Annotated[Union[time, None], Body()] = None,\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, time, timedelta\nfrom uuid import UUID\n\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: datetime = Body(),\n    end_datetime: datetime = Body(),\n    process_after: timedelta = Body(),\n    repeat_at: time | None = Body(default=None),\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }\n</code></pre>"},{"location":"tutorial/extra-models/","title":"\u2795 \ud83c\udff7","text":"<p>\u25b6\ufe0f \u23ee\ufe0f \u23ee\ufe0f \ud83d\uddbc, \u26ab\ufe0f \ud83d\udd1c \u26a0 \u2714\ufe0f \ud83c\udf05 \ud83c\udf18 1\ufe0f\u20e3 \ud83d\udd17 \ud83c\udff7.</p> <p>\ud83d\udc49 \u2734\ufe0f \ud83d\udcbc \ud83d\udc69\u200d\ud83d\udcbb \ud83c\udff7, \u21a9\ufe0f:</p> <ul> <li>\ud83d\udd22 \ud83c\udff7 \ud83d\udcaa \ud83d\udcaa \u2714\ufe0f \ud83d\udd10.</li> <li>\ud83d\udd22 \ud83c\udff7 \ud83d\udd1c \ud83d\udeab \u2714\ufe0f \ud83d\udd10.</li> <li>\ud83d\udcbd \ud83c\udff7 \ud83d\udd1c \ud83c\udfb2 \ud83d\udcaa \u2714\ufe0f #\ufe0f\u20e3 \ud83d\udd10.</li> </ul> <p>Danger</p> <p>\ud83d\ude45 \ud83c\udfea \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd22 \ud83d\udd10. \ud83d\udd67 \ud83c\udfea \"\ud83d\udd10 #\ufe0f\u20e3\" \ud83d\udc48 \ud83d\udc46 \ud83d\udcaa \u2934\ufe0f \u2714.</p> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udeab \ud83d\udcad, \ud83d\udc46 \ud83d\udd1c \ud83d\udca1 \u26ab\ufe0f\u2754 \"\ud83d\udd10#\ufe0f\u20e3\" \ud83d\udc82\u200d\u2642 \ud83d\udcc3.</p>"},{"location":"tutorial/extra-models/#_2","title":"\ud83d\udc97 \ud83c\udff7","text":"<p>\ud83d\udce5 \ud83c\udfe2 \ud83d\udcad \u2754 \ud83c\udff7 \ud83d\udcaa \ud83d\udc40 \ud83d\udc96 \u23ee\ufe0f \ud83d\udc6b \ud83d\udd10 \ud83c\udfd1 &amp; \ud83e\udd49 \ud83c\udf10\u2754 \ud83d\udc6b \u2699\ufe0f:</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserInDB(BaseModel):\n    username: str\n    hashed_password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\ndef fake_password_hasher(raw_password: str):\n    return \"supersecret\" + raw_password\n\n\ndef fake_save_user(user_in: UserIn):\n    hashed_password = fake_password_hasher(user_in.password)\n    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)\n    print(\"User saved! ..not really\")\n    return user_in_db\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user_in: UserIn):\n    user_saved = fake_save_user(user_in)\n    return user_saved\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+ <pre><code>from pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserInDB(BaseModel):\n    username: str\n    hashed_password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\ndef fake_password_hasher(raw_password: str):\n    return \"supersecret\" + raw_password\n\n\ndef fake_save_user(user_in: UserIn):\n    hashed_password = fake_password_hasher(user_in.password)\n    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)\n    print(\"User saved! ..not really\")\n    return user_in_db\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user_in: UserIn):\n    user_saved = fake_save_user(user_in)\n    return user_saved\n</code></pre>"},{"location":"tutorial/extra-models/#user_indict","title":"\ud83d\udd03 <code>**user_in.dict()</code>","text":""},{"location":"tutorial/extra-models/#pydantic-dict","title":"Pydantic <code>.dict()</code>","text":"<p><code>user_in</code> Pydantic \ud83c\udff7 \ud83c\udf93 <code>UserIn</code>.</p> <p>Pydantic \ud83c\udff7 \u2714\ufe0f <code>.dict()</code> \ud83d\udc69\u200d\ud83d\udd2c \ud83d\udc48 \ud83d\udce8 <code>dict</code> \u23ee\ufe0f \ud83c\udff7 \ud83d\udcbd.</p> <p>, \ud83d\udea5 \ud83d\udc65 \u270d Pydantic \ud83c\udf9a <code>user_in</code> \ud83d\udc96:</p> <pre><code>user_in = UserIn(username=\"john\", password=\"secret\", email=\"john.doe@example.com\")\n</code></pre> <p>&amp; \u2934\ufe0f \ud83d\udc65 \ud83e\udd19:</p> <pre><code>user_dict = user_in.dict()\n</code></pre> <p>\ud83d\udc65 \ud83d\udd1c \u2714\ufe0f <code>dict</code> \u23ee\ufe0f \ud83d\udcbd \ud83d\udd22 <code>user_dict</code> (\u26ab\ufe0f <code>dict</code> \u21a9\ufe0f Pydantic \ud83c\udff7 \ud83c\udf9a).</p> <p>&amp; \ud83d\udea5 \ud83d\udc65 \ud83e\udd19:</p> <pre><code>print(user_dict)\n</code></pre> <p>\ud83d\udc65 \ud83d\udd1c \ud83e\udd1a \ud83d\udc0d <code>dict</code> \u23ee\ufe0f:</p> <pre><code>{\n    'username': 'john',\n    'password': 'secret',\n    'email': 'john.doe@example.com',\n    'full_name': None,\n}\n</code></pre>"},{"location":"tutorial/extra-models/#dict","title":"\ud83c\udf81 <code>dict</code>","text":"<p>\ud83d\udea5 \ud83d\udc65 \u270a <code>dict</code> \ud83d\udc96 <code>user_dict</code> &amp; \ud83d\udeb6\u200d\u2640\ufe0f \u26ab\ufe0f \ud83d\udd22 (\u2696\ufe0f \ud83c\udf93) \u23ee\ufe0f <code>**user_dict</code>, \ud83d\udc0d \ud83d\udd1c \"\ud83c\udf81\" \u26ab\ufe0f. \u26ab\ufe0f \ud83d\udd1c \ud83d\udeb6\u200d\u2640\ufe0f \ud83d\udd11 &amp; \ud83d\udcb2 <code>user_dict</code> \ud83d\udd17 \ud83d\udd11-\ud83d\udcb2 \u274c.</p> <p>, \u25b6\ufe0f \u23ee\ufe0f <code>user_dict</code> \u26aa\ufe0f\u27a1\ufe0f \ud83d\udd1b, \u270d:</p> <pre><code>UserInDB(**user_dict)\n</code></pre> <p>\ud83d\udd1c \ud83c\udfc1 \ud83d\udd73 \ud83c\udf13:</p> <pre><code>UserInDB(\n    username=\"john\",\n    password=\"secret\",\n    email=\"john.doe@example.com\",\n    full_name=None,\n)\n</code></pre> <p>\u2696\ufe0f \ud83c\udf05 \u26ab\ufe0f\u2754, \u2699\ufe0f <code>user_dict</code> \ud83d\udd17, \u23ee\ufe0f \u26ab\ufe0f\u2754 \ud83c\udf9a \u26ab\ufe0f \ud83d\udcaa \u2714\ufe0f \ud83d\udd2e:</p> <pre><code>UserInDB(\n    username = user_dict[\"username\"],\n    password = user_dict[\"password\"],\n    email = user_dict[\"email\"],\n    full_name = user_dict[\"full_name\"],\n)\n</code></pre>"},{"location":"tutorial/extra-models/#pydantic-1","title":"Pydantic \ud83c\udff7 \u26aa\ufe0f\u27a1\ufe0f \ud83c\udf9a \u27951\ufe0f\u20e3","text":"<p>\ud83d\uddbc \ud83d\udd1b \ud83d\udc65 \ud83e\udd1a <code>user_dict</code> \u26aa\ufe0f\u27a1\ufe0f <code>user_in.dict()</code>, \ud83d\udc49 \ud83d\udcdf:</p> <pre><code>user_dict = user_in.dict()\nUserInDB(**user_dict)\n</code></pre> <p>\ud83d\udd1c \ud83c\udf13:</p> <pre><code>UserInDB(**user_in.dict())\n</code></pre> <p>...\u21a9\ufe0f <code>user_in.dict()</code> <code>dict</code>, &amp; \u2934\ufe0f \ud83d\udc65 \u2692 \ud83d\udc0d \"\ud83c\udf81\" \u26ab\ufe0f \ud83d\udeb6\u200d\u2640\ufe0f \u26ab\ufe0f <code>UserInDB</code> \ud83d\udd20 \u23ee\ufe0f <code>**</code>.</p> <p>, \ud83d\udc65 \ud83e\udd1a Pydantic \ud83c\udff7 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udcbd \u27951\ufe0f\u20e3 Pydantic \ud83c\udff7.</p>"},{"location":"tutorial/extra-models/#dict_1","title":"\ud83c\udf81 <code>dict</code> &amp; \u2795 \ud83c\udde8\ud83c\uddfb","text":"<p>&amp; \u2934\ufe0f \u274e \u2795 \ud83c\udde8\ud83c\uddfb \u274c <code>hashed_password=hashed_password</code>, \ud83d\udc96:</p> <pre><code>UserInDB(**user_in.dict(), hashed_password=hashed_password)\n</code></pre> <p>...\ud83d\udd1a \ud83c\udd99 \ud83d\udc86\u200d\u2642 \ud83d\udc96:</p> <pre><code>UserInDB(\n    username = user_dict[\"username\"],\n    password = user_dict[\"password\"],\n    email = user_dict[\"email\"],\n    full_name = user_dict[\"full_name\"],\n    hashed_password = hashed_password,\n)\n</code></pre> <p>Warning</p> <p>\ud83d\udd17 \ud83c\udf16 \ud83d\udd22 \ud83e\udd16 \ud83d\udcaa \ud83d\udca7 \ud83d\udcbd, \u270b\ufe0f \ud83d\udc6b \u2197\ufe0f \ud83d\udeab \ud83d\ude9a \ud83d\ude46 \ud83c\udfb0 \ud83d\udc82\u200d\u2642.</p>"},{"location":"tutorial/extra-models/#_3","title":"\ud83d\udcc9 \u274e","text":"<p>\ud83d\udcc9 \ud83d\udcdf \u274e 1\ufe0f\u20e3 \ud83d\udc1a \ud83d\udcad ReadyAPI.</p> <p>\ud83d\udcdf \u274e \ud83d\udcc8 \ud83e\udd1e \ud83d\udc1b, \ud83d\udc82\u200d\u2642 \u2754, \ud83d\udcdf \ud83d\udd01 \u2754 (\ud83d\udd50\u2754 \ud83d\udc46 \u2139 1\ufe0f\u20e3 \ud83e\udd49 \u270b\ufe0f \ud83d\udeab \ud83c\udf8f), \u2652\ufe0f.</p> <p>&amp; \ud83d\udc49 \ud83c\udff7 \ud83c\udf10 \ud83e\udd1d \ud83d\udcda \ud83d\udcbd &amp; \u274e \ud83d\udd22 \ud83d\udcdb &amp; \ud83c\udd8e.</p> <p>\ud83d\udc65 \ud83d\udcaa \ud83d\udc7b.</p> <p>\ud83d\udc65 \ud83d\udcaa \ud83d\udce3 <code>UserBase</code> \ud83c\udff7 \ud83d\udc48 \ud83c\udf66 \ud83e\udde2 \ud83d\udc46 \ud83c\udf8f \ud83c\udff7. &amp; \u2934\ufe0f \ud83d\udc65 \ud83d\udcaa \u2692 \ud83c\udfff \ud83d\udc48 \ud83c\udff7 \ud83d\udc48 \ud83d\ude16 \ud83d\udeae \ud83d\udd22 (\ud83c\udd8e \ud83d\udcc4, \ud83d\udd2c, \u2652\ufe0f).</p> <p>\ud83c\udf10 \ud83d\udcbd \ud83d\udee0\ufe0f, \ud83d\udd2c, \ud83e\uddfe, \u2652\ufe0f. \ud83d\udd1c \ud83d\udc77 \ud83d\udece.</p> <p>\ud83d\udc48 \ud83c\udf0c, \ud83d\udc65 \ud83d\udcaa \ud83d\udce3 \ud83d\udd3a \ud83d\udd96 \ud83c\udff7 (\u23ee\ufe0f \ud83d\udd22 <code>password</code>, \u23ee\ufe0f <code>hashed_password</code> &amp; \ud83c\udf75 \ud83d\udd10):</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserBase(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserIn(UserBase):\n    password: str\n\n\nclass UserOut(UserBase):\n    pass\n\n\nclass UserInDB(UserBase):\n    hashed_password: str\n\n\ndef fake_password_hasher(raw_password: str):\n    return \"supersecret\" + raw_password\n\n\ndef fake_save_user(user_in: UserIn):\n    hashed_password = fake_password_hasher(user_in.password)\n    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)\n    print(\"User saved! ..not really\")\n    return user_in_db\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user_in: UserIn):\n    user_saved = fake_save_user(user_in)\n    return user_saved\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+ <pre><code>from pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserBase(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserIn(UserBase):\n    password: str\n\n\nclass UserOut(UserBase):\n    pass\n\n\nclass UserInDB(UserBase):\n    hashed_password: str\n\n\ndef fake_password_hasher(raw_password: str):\n    return \"supersecret\" + raw_password\n\n\ndef fake_save_user(user_in: UserIn):\n    hashed_password = fake_password_hasher(user_in.password)\n    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)\n    print(\"User saved! ..not really\")\n    return user_in_db\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user_in: UserIn):\n    user_saved = fake_save_user(user_in)\n    return user_saved\n</code></pre>"},{"location":"tutorial/extra-models/#union-anyof","title":"<code>Union</code> \u2696\ufe0f <code>anyOf</code>","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83d\udce8 <code>Union</code> 2\ufe0f\u20e3 \ud83c\udd8e, \ud83d\udc48 \u26d3, \ud83d\udc48 \ud83d\udce8 \ud83d\udd1c \ud83d\ude46 2\ufe0f\u20e3.</p> <p>\u26ab\ufe0f \ud83d\udd1c \ud83d\udd2c \ud83d\uddc4 \u23ee\ufe0f <code>anyOf</code>.</p> <p>\ud83d\udc48, \u2699\ufe0f \ud83d\udc29 \ud83d\udc0d \ud83c\udd8e \ud83d\udd11 <code>typing.Union</code>:</p> <p>Note</p> <p>\ud83d\udd50\u2754 \u2696 <code>Union</code>, \ud83d\udd0c \ud83c\udfc6 \ud83c\udfaf \ud83c\udd8e \ud83e\udd47, \u23e9 \ud83c\udf18 \ud83c\udfaf \ud83c\udd8e. \ud83d\uddbc \ud83d\udd1b, \ud83c\udf16 \ud83c\udfaf <code>PlaneItem</code> \ud83d\udc5f \u23ed <code>CarItem</code> <code>Union[PlaneItem, CarItem]</code>.</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass BaseItem(BaseModel):\n    description: str\n    type: str\n\n\nclass CarItem(BaseItem):\n    type: str = \"car\"\n\n\nclass PlaneItem(BaseItem):\n    type: str = \"plane\"\n    size: int\n\n\nitems = {\n    \"item1\": {\"description\": \"All my friends drive a low rider\", \"type\": \"car\"},\n    \"item2\": {\n        \"description\": \"Music is my aeroplane, it's my aeroplane\",\n        \"type\": \"plane\",\n        \"size\": 5,\n    },\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Union[PlaneItem, CarItem])\nasync def read_item(item_id: str):\n    return items[item_id]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass BaseItem(BaseModel):\n    description: str\n    type: str\n\n\nclass CarItem(BaseItem):\n    type: str = \"car\"\n\n\nclass PlaneItem(BaseItem):\n    type: str = \"plane\"\n    size: int\n\n\nitems = {\n    \"item1\": {\"description\": \"All my friends drive a low rider\", \"type\": \"car\"},\n    \"item2\": {\n        \"description\": \"Music is my aeroplane, it's my aeroplane\",\n        \"type\": \"plane\",\n        \"size\": 5,\n    },\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Union[PlaneItem, CarItem])\nasync def read_item(item_id: str):\n    return items[item_id]\n</code></pre>"},{"location":"tutorial/extra-models/#union-310","title":"<code>Union</code> \ud83d\udc0d 3\ufe0f\u20e3.1\ufe0f\u20e30\ufe0f\u20e3","text":"<p>\ud83d\udc49 \ud83d\uddbc \ud83d\udc65 \ud83d\udeb6\u200d\u2640\ufe0f <code>Union[PlaneItem, CarItem]</code> \ud83d\udcb2 \u274c <code>response_model</code>.</p> <p>\u21a9\ufe0f \ud83d\udc65 \ud83d\udeb6\u200d\u2640\ufe0f \u26ab\ufe0f \ud83d\udcb2 \u274c \u21a9\ufe0f \ud83d\udeae \u26ab\ufe0f \ud83c\udd8e \u270d, \ud83d\udc65 \u2714\ufe0f \u2699\ufe0f <code>Union</code> \ud83d\udc0d 3\ufe0f\u20e3.1\ufe0f\u20e30\ufe0f\u20e3.</p> <p>\ud83d\udea5 \u26ab\ufe0f \ud83c\udd8e \u270d \ud83d\udc65 \ud83d\udcaa \u2714\ufe0f \u2699\ufe0f \u23f8 \u23f8,:</p> <pre><code>some_variable: PlaneItem | CarItem\n</code></pre> <p>\u270b\ufe0f \ud83d\udea5 \ud83d\udc65 \ud83d\udeae \ud83d\udc48 <code>response_model=PlaneItem | CarItem</code> \ud83d\udc65 \ud83d\udd1c \ud83e\udd1a \u274c, \u21a9\ufe0f \ud83d\udc0d \ud83d\udd1c \ud83d\udd04 \ud83c\udfad \u274c \ud83d\udee0\ufe0f \ud83d\udd96 <code>PlaneItem</code> &amp; <code>CarItem</code> \u21a9\ufe0f \ud83d\udd2c \ud83d\udc48 \ud83c\udd8e \u270d.</p>"},{"location":"tutorial/extra-models/#_4","title":"\ud83d\udcc7 \ud83c\udff7","text":"<p>\ud83c\udf8f \ud83c\udf0c, \ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83d\udce8 \ud83d\udcc7 \ud83c\udf9a.</p> <p>\ud83d\udc48, \u2699\ufe0f \ud83d\udc29 \ud83d\udc0d <code>typing.List</code> (\u2696\ufe0f <code>list</code> \ud83d\udc0d 3\ufe0f\u20e3.9\ufe0f\u20e3 &amp; \ud83d\udd1b):</p> Python 3.8+ <pre><code>from typing import List\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str\n\n\nitems = [\n    {\"name\": \"Foo\", \"description\": \"There comes my hero\"},\n    {\"name\": \"Red\", \"description\": \"It's my aeroplane\"},\n]\n\n\n@app.get(\"/items/\", response_model=List[Item])\nasync def read_items():\n    return items\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str\n\n\nitems = [\n    {\"name\": \"Foo\", \"description\": \"There comes my hero\"},\n    {\"name\": \"Red\", \"description\": \"It's my aeroplane\"},\n]\n\n\n@app.get(\"/items/\", response_model=list[Item])\nasync def read_items():\n    return items\n</code></pre>"},{"location":"tutorial/extra-models/#dict_2","title":"\ud83d\udce8 \u23ee\ufe0f \u274c <code>dict</code>","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83d\udce8 \u2699\ufe0f \u2705 \u274c <code>dict</code>, \ud83d\udce3 \ud83c\udd8e \ud83d\udd11 &amp; \ud83d\udcb2, \ud83c\udf75 \u2699\ufe0f Pydantic \ud83c\udff7.</p> <p>\ud83d\udc49 \u26a0 \ud83d\udea5 \ud83d\udc46 \ud83d\udeab \ud83d\udcad \u2611 \ud83c\udfd1/\ud83d\udd22 \ud83d\udcdb (\ud83d\udc48 \ud83d\udd1c \ud83d\udcaa Pydantic \ud83c\udff7) \u23ea.</p> <p>\ud83d\udc49 \ud83d\udcbc, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>typing.Dict</code> (\u2696\ufe0f <code>dict</code> \ud83d\udc0d 3\ufe0f\u20e3.9\ufe0f\u20e3 &amp; \ud83d\udd1b):</p> Python 3.8+ <pre><code>from typing import Dict\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/keyword-weights/\", response_model=Dict[str, float])\nasync def read_keyword_weights():\n    return {\"foo\": 2.3, \"bar\": 3.4}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/keyword-weights/\", response_model=dict[str, float])\nasync def read_keyword_weights():\n    return {\"foo\": 2.3, \"bar\": 3.4}\n</code></pre>"},{"location":"tutorial/extra-models/#_5","title":"\ud83c\udf03","text":"<p>\u2699\ufe0f \ud83d\udc97 Pydantic \ud83c\udff7 &amp; \ud83d\ude16 \u27a1 \ud83d\udd20 \ud83d\udcbc.</p> <p>\ud83d\udc46 \ud83d\udeab \ud83d\udcaa \u2714\ufe0f \ud83d\udc41 \ud83d\udcbd \ud83c\udff7 \ud83d\udccd \ud83d\udc68\u200d\ud83d\udcbc \ud83d\udea5 \ud83d\udc48 \ud83d\udc68\u200d\ud83d\udcbc \ud83d\udd1c \ud83d\udcaa \u2714\ufe0f \ud83c\udf8f \"\ud83c\uddf5\ud83c\uddf8\". \ud83d\udcbc \u23ee\ufe0f \ud83d\udc69\u200d\ud83d\udcbb \"\ud83d\udc68\u200d\ud83d\udcbc\" \u23ee\ufe0f \ud83c\uddf5\ud83c\uddf8 \u2705 <code>password</code>, <code>password_hash</code> &amp; \ud83d\ude45\u200d\u2642 \ud83d\udd10.</p>"},{"location":"tutorial/first-steps/","title":"\ud83e\udd47 \ud83d\udd01","text":"<p>\ud83d\ude45 ReadyAPI \ud83d\udcc1 \ud83d\udcaa \ud83d\udc40 \ud83d\udc96 \ud83d\udc49:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>\ud83d\udcc1 \ud83d\udc48 \ud83d\udcc1 <code>main.py</code>.</p> <p>\ud83c\udfc3 \ud83d\udd96 \ud83d\udcbd:</p> <pre><code>$ uvicorn main:app --reload\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Started reloader process [28720]\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Started server process [28722]\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Waiting for application startup.\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Application startup complete.\n</code></pre> <p>Note</p> <p>\ud83d\udccb <code>uvicorn main:app</code> \ud83d\udd17:</p> <ul> <li><code>main</code>: \ud83d\udcc1 <code>main.py</code> (\ud83d\udc0d \"\ud83d\udd79\").</li> <li><code>app</code>: \ud83c\udf9a \u270d \ud83d\udd18 <code>main.py</code> \u23ee\ufe0f \u23f8 <code>app = ReadyAPI()</code>.</li> <li><code>--reload</code>: \u2692 \ud83d\udcbd \u23cf \u23ee\ufe0f \ud83d\udcdf \ud83d\udd00. \ud83d\udd74 \u2699\ufe0f \ud83d\udee0\ufe0f.</li> </ul> <p>\ud83d\udd22, \ud83d\udce4 \u23f8 \u23ee\ufe0f \ud83d\udd73 \ud83d\udc96:</p> <pre><code>INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>\ud83d\udc48 \u23f8 \ud83c\udfa6 \ud83d\udcdb \ud83c\udf10\u2754 \ud83d\udc46 \ud83d\udcf1 \u2796 \ud83c\udf66, \ud83d\udc46 \ud83c\udde7\ud83c\uddff \ud83c\udfb0.</p>"},{"location":"tutorial/first-steps/#_2","title":"\u2705 \u26ab\ufe0f","text":"<p>\ud83d\udcc2 \ud83d\udc46 \ud83d\udda5 http://127.0.0.1:8000.</p> <p>\ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \ud83c\udfbb \ud83d\udce8:</p> <pre><code>{\"message\": \"Hello World\"}\n</code></pre>"},{"location":"tutorial/first-steps/#_3","title":"\ud83c\udf93 \ud83d\udee0\ufe0f \ud83e\ude7a","text":"<p>\ud83d\udd1c \ud83d\udeb6 http://127.0.0.1:8000/docs.</p> <p>\ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \ud83c\udfe7 \ud83c\udf93 \ud83d\udee0\ufe0f \ud83e\uddfe (\ud83d\ude9a \ud83e\udd81 \ud83c\udf9a):</p> <p></p>"},{"location":"tutorial/first-steps/#_4","title":"\ud83c\udf9b \ud83d\udee0\ufe0f \ud83e\ude7a","text":"<p>&amp; \ud83d\udd1c, \ud83d\udeb6 http://127.0.0.1:8000/redoc.</p> <p>\ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \ud83c\udf9b \ud83c\udfe7 \ud83e\uddfe (\ud83d\ude9a \ud83d\udcc4):</p> <p></p>"},{"location":"tutorial/first-steps/#_5","title":"\ud83d\uddc4","text":"<p>ReadyAPI \ud83c\udfd7 \"\ud83d\udd17\" \u23ee\ufe0f \ud83c\udf10 \ud83d\udc46 \ud83d\udee0\ufe0f \u2699\ufe0f \ud83d\uddc4 \ud83d\udc29 \u2696 \ud83d\udd17.</p>"},{"location":"tutorial/first-steps/#_6","title":"\"\ud83d\udd17\"","text":"<p>\"\ud83d\udd17\" \ud83d\udd11 \u2696\ufe0f \ud83d\udcdb \ud83d\udd73. \ud83d\udeab \ud83d\udcdf \ud83d\udc48 \ud83d\udee0\ufe0f \u26ab\ufe0f, \u270b\ufe0f \ud83d\udcdd \ud83d\udcdb.</p>"},{"location":"tutorial/first-steps/#_7","title":"\ud83d\udee0\ufe0f \"\ud83d\udd17\"","text":"<p>\ud83d\udc49 \ud83d\udcbc, \ud83d\uddc4 \ud83d\udd27 \ud83d\udc48 \ud83e\udd14 \u2754 \ud83d\udd2c \ud83d\udd17 \ud83d\udc46 \ud83d\udee0\ufe0f.</p> <p>\ud83d\udc49 \ud83d\udd17 \ud83d\udd11 \ud83d\udd0c \ud83d\udc46 \ud83d\udee0\ufe0f \u27a1, \ud83d\udcaa \ud83d\udd22 \ud83d\udc6b \u270a, \u2652\ufe0f.</p>"},{"location":"tutorial/first-steps/#_8","title":"\ud83d\udcbd \"\ud83d\udd17\"","text":"<p>\u2696 \"\ud83d\udd17\" \ud83d\udcaa \ud83d\udd17 \ud83d\udca0 \ud83d\udcbd, \ud83d\udc96 \ud83c\udfbb \ud83c\udf9a.</p> <p>\ud83d\udc48 \ud83d\udcbc, \u26ab\ufe0f \ud83d\udd1c \u26d3 \ud83c\udfbb \ud83d\udd22, &amp; \ud83d\udcca \ud83c\udd8e \ud83d\udc6b \u2714\ufe0f, \u2652\ufe0f.</p>"},{"location":"tutorial/first-steps/#_9","title":"\ud83d\uddc4 &amp; \ud83c\udfbb \ud83d\udd17","text":"<p>\ud83d\uddc4 \ud83d\udd2c \ud83d\udee0\ufe0f \ud83d\udd17 \ud83d\udc46 \ud83d\udee0\ufe0f. &amp; \ud83d\udc48 \ud83d\udd17 \ud83d\udd0c \ud83d\udd11 (\u2696\ufe0f \"\ud83d\udd17\") \ud83d\udcca \ud83d\udce8 &amp; \ud83d\udce8 \ud83d\udc46 \ud83d\udee0\ufe0f \u2699\ufe0f \ud83c\udfbb \ud83d\udd17, \ud83d\udc29 \ud83c\udfbb \ud83d\udcca \ud83d\udd17.</p>"},{"location":"tutorial/first-steps/#openapijson","title":"\u2705 <code>openapi.json</code>","text":"<p>\ud83d\udea5 \ud83d\udc46 \ud83d\ude1f \ud83d\udd03 \u2754 \ud83c\udf63 \ud83d\uddc4 \ud83d\udd17 \ud83d\udc40 \ud83d\udc96, ReadyAPI \ud83d\udd01 \ud83c\udfd7 \ud83c\udfbb (\ud83d\udd17) \u23ee\ufe0f \ud83d\udcdb \ud83c\udf10 \ud83d\udc46 \ud83d\udee0\ufe0f.</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udc40 \u26ab\ufe0f \ud83d\udd17: http://127.0.0.1:8000/openapi.json.</p> <p>\u26ab\ufe0f \ud83d\udd1c \ud83c\udfa6 \ud83c\udfbb \u25b6\ufe0f \u23ee\ufe0f \ud83d\udd73 \ud83d\udc96:</p> <pre><code>{\n    \"openapi\": \"3.0.2\",\n    \"info\": {\n        \"title\": \"ReadyAPI\",\n        \"version\": \"0.1.0\"\n    },\n    \"paths\": {\n        \"/items/\": {\n            \"get\": {\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Successful Response\",\n                        \"content\": {\n                            \"application/json\": {\n\n\n\n...\n</code></pre>"},{"location":"tutorial/first-steps/#_10","title":"\u26ab\ufe0f\u2754 \ud83d\uddc4","text":"<p>\ud83d\uddc4 \ud83d\udd17 \u26ab\ufe0f\u2754 \ud83c\udfcb\ufe0f 2\ufe0f\u20e3 \ud83c\udf93 \ud83e\uddfe \u2699\ufe0f \ud83d\udd0c.</p> <p>&amp; \ud83d\udce4 \ud83d\udcaf \ud83c\udf9b, \ud83c\udf10 \u2693\ufe0f \ud83d\udd1b \ud83d\uddc4. \ud83d\udc46 \ud83d\udcaa \ud83d\udcaa \ud83d\udeae \ud83d\ude46 \ud83d\udcda \ud83c\udf9b \ud83d\udc46 \ud83c\ude38 \ud83c\udfd7 \u23ee\ufe0f ReadyAPI.</p> <p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \u26ab\ufe0f \ud83c\udfd7 \ud83d\udcdf \ud83d\udd01, \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udc48 \ud83d\udd17 \u23ee\ufe0f \ud83d\udc46 \ud83d\udee0\ufe0f. \ud83d\uddbc, \ud83d\udd78, \ud83d\udcf1 \u2696\ufe0f \u2601 \ud83c\ude38.</p>"},{"location":"tutorial/first-steps/#_11","title":"\ud83c\udf03, \ud83d\udd01 \ud83d\udd01","text":""},{"location":"tutorial/first-steps/#1-readyapi","title":"\ud83d\udd01 1\ufe0f\u20e3: \ud83d\uddc4 <code>ReadyAPI</code>","text":"Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p><code>ReadyAPI</code> \ud83d\udc0d \ud83c\udf93 \ud83d\udc48 \ud83d\ude9a \ud83c\udf10 \ud83d\udee0\ufe0f \ud83d\udc46 \ud83d\udee0\ufe0f.</p> <p>\ud83d\udce1 \u2139</p> <p><code>ReadyAPI</code> \ud83c\udf93 \ud83d\udc48 \ud83d\ude16 \ud83d\udd17 \u26aa\ufe0f\u27a1\ufe0f <code>Starlette</code>.</p> <p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83c\udf10 \ud83d\udc83 \ud83d\udee0\ufe0f \u23ee\ufe0f <code>ReadyAPI</code> \ud83d\udc81\u200d\u2642\ufe0f.</p>"},{"location":"tutorial/first-steps/#2-readyapi","title":"\ud83d\udd01 2\ufe0f\u20e3: \u270d <code>ReadyAPI</code> \"\ud83d\udc50\"","text":"Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>\ud83d\udce5 <code>app</code> \ud83d\udd22 \ud83d\udd1c \"\ud83d\udc50\" \ud83c\udf93 <code>ReadyAPI</code>.</p> <p>\ud83d\udc49 \ud83d\udd1c \ud83d\udc51 \u261d \ud83d\udd17 \u270d \ud83c\udf10 \ud83d\udc46 \ud83d\udee0\ufe0f.</p> <p>\ud83d\udc49 <code>app</code> \ud83c\udf8f 1\ufe0f\u20e3 \ud83d\udd17 <code>uvicorn</code> \ud83d\udccb:</p> <pre><code>$ uvicorn main:app --reload\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>\ud83d\udea5 \ud83d\udc46 \u270d \ud83d\udc46 \ud83d\udcf1 \ud83d\udc96:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\nmy_awesome_api = ReadyAPI()\n\n\n@my_awesome_api.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>&amp; \ud83d\udeae \u26ab\ufe0f \ud83d\udcc1 <code>main.py</code>, \u2934\ufe0f \ud83d\udc46 \ud83d\udd1c \ud83e\udd19 <code>uvicorn</code> \ud83d\udc96:</p> <pre><code>$ uvicorn main:my_awesome_api --reload\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre>"},{"location":"tutorial/first-steps/#3","title":"\ud83d\udd01 3\ufe0f\u20e3: \u270d \u27a1 \ud83d\udee0\ufe0f","text":""},{"location":"tutorial/first-steps/#_12","title":"\u27a1","text":"<p>\"\u27a1\" \ud83d\udce5 \ud83d\udd17 \ud83c\udfc1 \ud83c\udf55 \ud83d\udcdb \u25b6\ufe0f \u26aa\ufe0f\u27a1\ufe0f \ud83e\udd47 <code>/</code>.</p> <p>, \ud83d\udcdb \ud83d\udc96:</p> <pre><code>https://example.com/items/foo\n</code></pre> <p>...\u27a1 \ud83d\udd1c:</p> <pre><code>/items/foo\n</code></pre> <p>Info</p> <p>\"\u27a1\" \ud83d\udece \ud83e\udd19 \"\ud83d\udd17\" \u2696\ufe0f \"\ud83d\udee3\".</p> <p>\u23ea \ud83c\udfd7 \ud83d\udee0\ufe0f, \"\u27a1\" \ud83d\udc51 \ud83c\udf0c \ud83c\udf8f \"\u26a0\" &amp; \"\u2139\".</p>"},{"location":"tutorial/first-steps/#_13","title":"\ud83d\udee0\ufe0f","text":"<p>\"\ud83d\udee0\ufe0f\" \ud83d\udce5 \ud83d\udd17 1\ufe0f\u20e3 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \"\ud83d\udc69\u200d\ud83d\udd2c\".</p> <p>1\ufe0f\u20e3:</p> <ul> <li><code>POST</code></li> <li><code>GET</code></li> <li><code>PUT</code></li> <li><code>DELETE</code></li> </ul> <p>...&amp; \ud83c\udf05 \ud83d\ude0d \ud83d\udd50:</p> <ul> <li><code>OPTIONS</code></li> <li><code>HEAD</code></li> <li><code>PATCH</code></li> <li><code>TRACE</code></li> </ul> <p>\ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udee0\ufe0f, \ud83d\udc46 \ud83d\udcaa \ud83d\udd17 \ud83d\udd20 \u27a1 \u2699\ufe0f 1\ufe0f\u20e3 (\u2696\ufe0f \ud83c\udf05) \ud83d\udc6b \"\ud83d\udc69\u200d\ud83d\udd2c\".</p> <p>\ud83d\udd50\u2754 \ud83c\udfd7 \ud83d\udd17, \ud83d\udc46 \ud83d\udece \u2699\ufe0f \ud83d\udc6b \ud83c\udfaf \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udc69\u200d\ud83d\udd2c \ud83c\udfad \ud83c\udfaf \ud83c\udfaf.</p> <p>\ud83d\udece \ud83d\udc46 \u2699\ufe0f:</p> <ul> <li><code>POST</code>: \u270d \ud83d\udcbd.</li> <li><code>GET</code>: \u270d \ud83d\udcbd.</li> <li><code>PUT</code>: \u2139 \ud83d\udcbd.</li> <li><code>DELETE</code>: \u274e \ud83d\udcbd.</li> </ul> <p>, \ud83d\uddc4, \ud83d\udd20 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udc69\u200d\ud83d\udd2c \ud83e\udd19 \"\ud83d\udee0\ufe0f\".</p> <p>\ud83d\udc65 \ud83d\udd1c \ud83e\udd19 \ud83d\udc6b \"\ud83d\udee0\ufe0f\" \ud83d\udc81\u200d\u2642\ufe0f.</p>"},{"location":"tutorial/first-steps/#_14","title":"\ud83d\udd2c \u27a1 \ud83d\udee0\ufe0f \ud83d\udc68\u200d\ud83c\udfa8","text":"Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p><code>@app.get(\"/\")</code> \ud83d\udcac ReadyAPI \ud83d\udc48 \ud83d\udd22 \u25b6\ufe0f\ufe0f \ud83d\udd1b \ud83c\ude1a \ud83d\ude9a \ud83d\udce8 \ud83d\udc48 \ud83d\udeb6:</p> <ul> <li>\u27a1 <code>/</code></li> <li>\u2699\ufe0f <code>get</code> \ud83d\udee0\ufe0f</li> </ul> <p><code>@decorator</code> \u2139</p> <p>\ud83d\udc48 <code>@something</code> \u2755 \ud83d\udc0d \ud83e\udd19 \"\ud83d\udc68\u200d\ud83c\udfa8\".</p> <p>\ud83d\udc46 \ud83d\udeae \u26ab\ufe0f \ud83d\udd1b \ud83d\udd1d \ud83d\udd22. \ud83d\udc96 \ud83d\udcf6 \ud83d\udcd4 \ud83d\udc52 (\ud83d\udc64 \ud83d\udcad \ud83d\udc48 \ud83c\udf10\u2754 \u2696 \ud83d\udc5f \u26aa\ufe0f\u27a1\ufe0f).</p> <p>\"\ud83d\udc68\u200d\ud83c\udfa8\" \u270a \ud83d\udd22 \ud83d\udd1b &amp; \ud83d\udd28 \ud83d\udd73 \u23ee\ufe0f \u26ab\ufe0f.</p> <p>\ud83d\udc46 \ud83d\udcbc, \ud83d\udc49 \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udcac ReadyAPI \ud83d\udc48 \ud83d\udd22 \ud83d\udd1b \ud83d\udd17 \u27a1 <code>/</code> \u23ee\ufe0f \ud83d\udee0\ufe0f <code>get</code>.</p> <p>\u26ab\ufe0f \"\u27a1 \ud83d\udee0\ufe0f \ud83d\udc68\u200d\ud83c\udfa8\".</p> <p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83c\udf8f \ud83d\udee0\ufe0f:</p> <ul> <li><code>@app.post()</code></li> <li><code>@app.put()</code></li> <li><code>@app.delete()</code></li> </ul> <p>&amp; \ud83c\udf05 \ud83d\ude0d \ud83d\udd50:</p> <ul> <li><code>@app.options()</code></li> <li><code>@app.head()</code></li> <li><code>@app.patch()</code></li> <li><code>@app.trace()</code></li> </ul> <p>Tip</p> <p>\ud83d\udc46 \ud83c\udd93 \u2699\ufe0f \ud83d\udd20 \ud83d\udee0\ufe0f (\ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udc69\u200d\ud83d\udd2c) \ud83d\udc46 \ud83c\udf8b.</p> <p>ReadyAPI \ud83d\udeab \ud83d\udee0\ufe0f \ud83d\ude46 \ud83c\udfaf \ud83d\udd11.</p> <p>\u2139 \ud83d\udce5 \ud83c\udf81 \ud83d\udcc4, \ud83d\udeab \ud83d\udcc4.</p> <p>\ud83d\uddbc, \ud83d\udd50\u2754 \u2699\ufe0f \ud83d\udd79 \ud83d\udc46 \ud83d\udece \ud83c\udfad \ud83c\udf10 \ud83c\udfaf \u2699\ufe0f \ud83d\udd74 <code>POST</code> \ud83d\udee0\ufe0f.</p>"},{"location":"tutorial/first-steps/#4","title":"\ud83d\udd01 4\ufe0f\u20e3: \ud83d\udd2c \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22","text":"<p>\ud83d\udc49 \ud83d\udc46 \"\u27a1 \ud83d\udee0\ufe0f \ud83d\udd22\":</p> <ul> <li>\u27a1: <code>/</code>.</li> <li>\ud83d\udee0\ufe0f: <code>get</code>.</li> <li>\ud83d\udd22: \ud83d\udd22 \ud83d\udd1b \"\ud83d\udc68\u200d\ud83c\udfa8\" (\ud83d\udd1b <code>@app.get(\"/\")</code>).</li> </ul> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>\ud83d\udc49 \ud83d\udc0d \ud83d\udd22.</p> <p>\u26ab\ufe0f \ud83d\udd1c \ud83e\udd19 ReadyAPI \ud83d\udd50\u2754 \u26ab\ufe0f \ud83d\udce8 \ud83d\udce8 \ud83d\udcdb \"<code>/</code>\" \u2699\ufe0f <code>GET</code> \ud83d\udee0\ufe0f.</p> <p>\ud83d\udc49 \ud83d\udcbc, \u26ab\ufe0f <code>async</code> \ud83d\udd22.</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udd2c \u26ab\ufe0f \ud83d\ude10 \ud83d\udd22 \u21a9\ufe0f <code>async def</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\ndef root():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>Note</p> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udeab \ud83d\udcad \ud83d\udd3a, \u2705 \ud83d\udd01: \"\ud83c\udfc3 \u2753\".</p>"},{"location":"tutorial/first-steps/#5","title":"\ud83d\udd01 5\ufe0f\u20e3: \ud83d\udce8 \ud83c\udf9a","text":"Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udce8 <code>dict</code>, <code>list</code>, \u2b50 \ud83d\udcb2 <code>str</code>, <code>int</code>, \u2652\ufe0f.</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udce8 Pydantic \ud83c\udff7 (\ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \ud83c\udf05 \ud83d\udd03 \ud83d\udc48 \u23ea).</p> <p>\ud83d\udce4 \ud83d\udcda \ud83c\udf8f \ud83c\udf9a &amp; \ud83c\udff7 \ud83d\udc48 \ud83d\udd1c \ud83d\udd01 \ud83d\udddc \ud83c\udfbb (\ud83d\udd0c \ud83d\udc1c, \u2652\ufe0f). \ud83d\udd04 \u2699\ufe0f \ud83d\udc46 \ud83d\udc95 \ud83d\udd50, \u26ab\ufe0f \ud83c\udfc6 \ud83c\udfb2 \ud83d\udc48 \ud83d\udc6b \u23ea \ud83d\udc15\u200d\ud83e\uddba.</p>"},{"location":"tutorial/first-steps/#_15","title":"\ud83c\udf03","text":"<ul> <li>\ud83d\uddc4 <code>ReadyAPI</code>.</li> <li>\u270d <code>app</code> \ud83d\udc50.</li> <li>\u270d \u27a1 \ud83d\udee0\ufe0f \ud83d\udc68\u200d\ud83c\udfa8 (\ud83d\udc96 <code>@app.get(\"/\")</code>).</li> <li>\u270d \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22 (\ud83d\udc96 <code>def root(): ...</code> \ud83d\udd1b).</li> <li>\ud83c\udfc3 \ud83d\udee0\ufe0f \ud83d\udcbd (\ud83d\udc96 <code>uvicorn main:app --reload</code>).</li> </ul>"},{"location":"tutorial/handling-errors/","title":"\ud83d\ude9a \u274c","text":"<p>\ud83d\udce4 \ud83d\udcda \u26a0 \ud83c\udf10\u2754 \ud83d\udc46 \ud83d\udcaa \ud83d\udea8 \u274c \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udc48 \u2699\ufe0f \ud83d\udc46 \ud83d\udee0\ufe0f.</p> <p>\ud83d\udc49 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udcaa \ud83d\udda5 \u23ee\ufe0f \ud83d\udd78, \ud83d\udcdf \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc71 \ud83d\ude46, \u2601 \ud83d\udcf3, \u2652\ufe0f.</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udcaa \ud83d\udcac \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udc48:</p> <ul> <li>\ud83d\udc69\u200d\ud83d\udcbb \ud83d\udeab \u2714\ufe0f \ud83e\udd43 \ud83d\ude0c \ud83d\udc48 \ud83d\udee0\ufe0f.</li> <li>\ud83d\udc69\u200d\ud83d\udcbb \ud83d\udeab \u2714\ufe0f \ud83d\udd10 \ud83d\udc48 \u2139.</li> <li>\ud83c\udfec \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd04 \ud83d\udd10 \ud83d\udeab \ud83d\udd00.</li> <li>\u2652\ufe0f.</li> </ul> <p>\ud83d\udc6b \ud83d\udcbc, \ud83d\udc46 \ud83d\udd1c \ud83d\udece \ud83d\udce8 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udc54 \ud83d\udcdf \u2194 4\ufe0f\u20e30\ufe0f\u20e30\ufe0f\u20e3 (\u26aa\ufe0f\u27a1\ufe0f 4\ufe0f\u20e30\ufe0f\u20e30\ufe0f\u20e3 4\ufe0f\u20e39\ufe0f\u20e39\ufe0f\u20e3).</p> <p>\ud83d\udc49 \ud83c\udf8f 2\ufe0f\u20e30\ufe0f\u20e30\ufe0f\u20e3 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udc54 \ud83d\udcdf (\u26aa\ufe0f\u27a1\ufe0f 2\ufe0f\u20e30\ufe0f\u20e30\ufe0f\u20e3 2\ufe0f\u20e39\ufe0f\u20e39\ufe0f\u20e3). \ud83d\udc48 \"2\ufe0f\u20e30\ufe0f\u20e30\ufe0f\u20e3\" \ud83d\udc54 \ud83d\udcdf \u26d3 \ud83d\udc48 \ud83d\ude2b \ud83d\udce4 \"\ud83c\udfc6\" \ud83d\udce8.</p> <p>\ud83d\udc54 \ud83d\udcdf 4\ufe0f\u20e30\ufe0f\u20e30\ufe0f\u20e3 \u2194 \u26d3 \ud83d\udc48 \ud83d\udce4 \u274c \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc69\u200d\ud83d\udcbb.</p> <p>\ud83d\udcad \ud83c\udf10 \ud83d\udc48 \"4\ufe0f\u20e30\ufe0f\u20e34\ufe0f\u20e3 \ud83d\udeab \ud83d\udd0e\" \u274c (&amp; \ud83e\udd23) \u2753</p>"},{"location":"tutorial/handling-errors/#httpexception","title":"\u2699\ufe0f <code>HTTPException</code>","text":"<p>\ud83d\udce8 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udce8 \u23ee\ufe0f \u274c \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udc46 \u2699\ufe0f <code>HTTPException</code>.</p>"},{"location":"tutorial/handling-errors/#httpexception_1","title":"\ud83d\uddc4 <code>HTTPException</code>","text":"Python 3.8+ <pre><code>from readyapi import HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\nitems = {\"foo\": \"The Foo Wrestlers\"}\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str):\n    if item_id not in items:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"item\": items[item_id]}\n</code></pre>"},{"location":"tutorial/handling-errors/#httpexception_2","title":"\ud83e\udd1a <code>HTTPException</code> \ud83d\udc46 \ud83d\udcdf","text":"<p><code>HTTPException</code> \ud83d\ude10 \ud83d\udc0d \u26a0 \u23ee\ufe0f \ud83c\udf16 \ud83d\udcca \ud83d\udd17 \ud83d\udd17.</p> <p>\u21a9\ufe0f \u26ab\ufe0f \ud83d\udc0d \u26a0, \ud83d\udc46 \ud83d\udeab <code>return</code> \u26ab\ufe0f, \ud83d\udc46 <code>raise</code> \u26ab\ufe0f.</p> <p>\ud83d\udc49 \u26d3 \ud83d\udc48 \ud83d\udea5 \ud83d\udc46 \ud83d\udd18 \ud83d\ude99 \ud83d\udd22 \ud83d\udc48 \ud83d\udc46 \ud83e\udd19 \ud83d\udd18 \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22, &amp; \ud83d\udc46 \ud83e\udd1a <code>HTTPException</code> \u26aa\ufe0f\u27a1\ufe0f \ud83d\udd18 \ud83d\udc48 \ud83d\ude99 \ud83d\udd22, \u26ab\ufe0f \ud83c\udfc6 \ud83d\udeab \ud83c\udfc3 \ud83c\udf82 \ud83d\udcdf \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22, \u26ab\ufe0f \ud83d\udd1c \u274e \ud83d\udc48 \ud83d\udce8 \u25b6\ufe0f\ufe0f \u2196\ufe0f &amp; \ud83d\udce8 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \u274c \u26aa\ufe0f\u27a1\ufe0f <code>HTTPException</code> \ud83d\udc69\u200d\ud83d\udcbb.</p> <p>\ud83d\udcb0 \ud83d\ude4b\u200d\u2640 \u26a0 \ud83e\udd2d <code>return</code>\ud83d\ude05 \ud83d\udcb2 \ud83d\udd1c \ud83c\udf16 \u2b50 \ud83d\udcc4 \ud83d\udd03 \ud83d\udd17 &amp; \ud83d\udc82\u200d\u2642.</p> <p>\ud83d\udc49 \ud83d\uddbc, \ud83d\udd50\u2754 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udce8 \ud83c\udfec \ud83c\udd94 \ud83d\udc48 \ud83d\udeab \ud83d\udd00, \ud83e\udd1a \u26a0 \u23ee\ufe0f \ud83d\udc54 \ud83d\udcdf <code>404</code>:</p> Python 3.8+ <pre><code>from readyapi import HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\nitems = {\"foo\": \"The Foo Wrestlers\"}\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str):\n    if item_id not in items:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"item\": items[item_id]}\n</code></pre>"},{"location":"tutorial/handling-errors/#_2","title":"\ud83d\udcc9 \ud83d\udce8","text":"<p>\ud83d\udea5 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udce8 <code>http://example.com/items/foo</code> ( <code>item_id</code> <code>\"foo\"</code>), \ud83d\udc48 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd1c \ud83d\udce8 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udc54 \ud83d\udcdf 2\ufe0f\u20e30\ufe0f\u20e30\ufe0f\u20e3, &amp; \ud83c\udfbb \ud83d\udce8:</p> <pre><code>{\n  \"item\": \"The Foo Wrestlers\"\n}\n</code></pre> <p>\u270b\ufe0f \ud83d\udea5 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udce8 <code>http://example.com/items/bar</code> (\ud83d\udeab-\ud83d\udeab <code>item_id</code> <code>\"bar\"</code>), \ud83d\udc48 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd1c \ud83d\udce8 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udc54 \ud83d\udcdf 4\ufe0f\u20e30\ufe0f\u20e34\ufe0f\u20e3 (\"\ud83d\udeab \ud83d\udd0e\" \u274c), &amp; \ud83c\udfbb \ud83d\udce8:</p> <pre><code>{\n  \"detail\": \"Item not found\"\n}\n</code></pre> <p>Tip</p> <p>\ud83d\udd50\u2754 \ud83d\ude4b\u200d\u2640 <code>HTTPException</code>, \ud83d\udc46 \ud83d\udcaa \ud83d\udeb6\u200d\u2640\ufe0f \ud83d\ude46 \ud83d\udcb2 \ud83d\udc48 \ud83d\udcaa \ud83d\udddc \ud83c\udfbb \ud83d\udd22 <code>detail</code>, \ud83d\udeab \ud83d\udd74 <code>str</code>.</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udeb6\u200d\u2640\ufe0f <code>dict</code>, <code>list</code>, \u2652\ufe0f.</p> <p>\ud83d\udc6b \ud83c\udf75 \ud83d\udd01 ReadyAPI &amp; \ud83d\udddc \ud83c\udfbb.</p>"},{"location":"tutorial/handling-errors/#_3","title":"\ud83d\udeae \ud83d\udec3 \ud83c\udf9a","text":"<p>\ud83d\udce4 \u26a0 \ud83c\udf10\u2754 \u26ab\ufe0f \u26a0 \ud83d\udcaa \ud83d\udeae \ud83d\udec3 \ud83c\udf9a \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \u274c. \ud83d\uddbc, \ud83c\udd8e \ud83d\udc82\u200d\u2642.</p> <p>\ud83d\udc46 \ud83c\udfb2 \ud83c\udfc6 \ud83d\udeab \ud83d\udcaa \u2699\ufe0f \u26ab\ufe0f \ud83d\udd17 \ud83d\udc46 \ud83d\udcdf.</p> <p>\u270b\ufe0f \ud83d\udcbc \ud83d\udc46 \ud83d\udcaa \u26ab\ufe0f \ud83c\udfe7 \ud83d\ude10, \ud83d\udc46 \ud83d\udcaa \ud83d\udeae \ud83d\udec3 \ud83c\udf9a:</p> Python 3.8+ <pre><code>from readyapi import HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\nitems = {\"foo\": \"The Foo Wrestlers\"}\n\n\n@app.get(\"/items-header/{item_id}\")\nasync def read_item_header(item_id: str):\n    if item_id not in items:\n        raise HTTPException(\n            status_code=404,\n            detail=\"Item not found\",\n            headers={\"X-Error\": \"There goes my error\"},\n        )\n    return {\"item\": items[item_id]}\n</code></pre>"},{"location":"tutorial/handling-errors/#_4","title":"\u274e \ud83d\udec3 \u26a0 \ud83d\udc15\u200d\ud83e\uddba","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udeae \ud83d\udec3 \u26a0 \ud83d\udc15\u200d\ud83e\uddba \u23ee\ufe0f \ud83c\udf8f \u26a0 \ud83d\ude99 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc83.</p> <p>\u27a1\ufe0f \ud83d\udcac \ud83d\udc46 \u2714\ufe0f \ud83d\udec3 \u26a0 <code>UnicornException</code> \ud83d\udc48 \ud83d\udc46 (\u2696\ufe0f \ud83d\uddc3 \ud83d\udc46 \u2699\ufe0f) \ud83d\udcaa <code>raise</code>.</p> <p>&amp; \ud83d\udc46 \ud83d\udc9a \ud83c\udf75 \ud83d\udc49 \u26a0 \ud83c\udf10 \u23ee\ufe0f ReadyAPI.</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udeae \ud83d\udec3 \u26a0 \ud83d\udc15\u200d\ud83e\uddba \u23ee\ufe0f <code>@app.exception_handler()</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Request\nfrom readyapi.responses import JSONResponse\n\n\nclass UnicornException(Exception):\n    def __init__(self, name: str):\n        self.name = name\n\n\napp = ReadyAPI()\n\n\n@app.exception_handler(UnicornException)\nasync def unicorn_exception_handler(request: Request, exc: UnicornException):\n    return JSONResponse(\n        status_code=418,\n        content={\"message\": f\"Oops! {exc.name} did something. There goes a rainbow...\"},\n    )\n\n\n@app.get(\"/unicorns/{name}\")\nasync def read_unicorn(name: str):\n    if name == \"yolo\":\n        raise UnicornException(name=name)\n    return {\"unicorn_name\": name}\n</code></pre> <p>\ud83d\udce5, \ud83d\udea5 \ud83d\udc46 \ud83d\udce8 <code>/unicorns/yolo</code>, \u27a1 \ud83d\udee0\ufe0f \ud83d\udd1c <code>raise</code> <code>UnicornException</code>.</p> <p>\u270b\ufe0f \u26ab\ufe0f \ud83d\udd1c \ud83c\udf75 <code>unicorn_exception_handler</code>.</p> <p>, \ud83d\udc46 \ud83d\udd1c \ud83d\udce8 \ud83e\uddf9 \u274c, \u23ee\ufe0f \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udc54 \ud83d\udcdf <code>418</code> &amp; \ud83c\udfbb \ud83c\udf9a:</p> <pre><code>{\"message\": \"Oops! yolo did something. There goes a rainbow...\"}\n</code></pre> <p>\ud83d\udce1 \u2139</p> <p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>from starlette.requests import Request</code> &amp; <code>from starlette.responses import JSONResponse</code>.</p> <p>ReadyAPI \ud83d\ude9a \ud83c\udf8f <code>starlette.responses</code> <code>readyapi.responses</code> \ud83c\udfea \ud83d\udc46, \ud83d\udc69\u200d\ud83d\udcbb. \u270b\ufe0f \ud83c\udf05 \ud83d\udcaa \ud83d\udce8 \ud83d\udc5f \ud83d\udd17 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc83. \ud83c\udf8f \u23ee\ufe0f <code>Request</code>.</p>"},{"location":"tutorial/handling-errors/#_5","title":"\ud83d\udd10 \ud83d\udd22 \u26a0 \ud83d\udc15\u200d\ud83e\uddba","text":"<p>ReadyAPI \u2714\ufe0f \ud83d\udd22 \u26a0 \ud83d\udc15\u200d\ud83e\uddba.</p> <p>\ud83d\udc6b \ud83d\udc15\u200d\ud83e\uddba \ud83c\ude1a \ud83d\udeec \ud83d\udd22 \ud83c\udfbb \ud83d\udce8 \ud83d\udd50\u2754 \ud83d\udc46 <code>raise</code> <code>HTTPException</code> &amp; \ud83d\udd50\u2754 \ud83d\udce8 \u2714\ufe0f \u274c \ud83d\udcbd.</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udd10 \ud83d\udc6b \u26a0 \ud83d\udc15\u200d\ud83e\uddba \u23ee\ufe0f \ud83d\udc46 \ud83d\udc4d.</p>"},{"location":"tutorial/handling-errors/#_6","title":"\ud83d\udd10 \ud83d\udce8 \ud83d\udd2c \u26a0","text":"<p>\ud83d\udd50\u2754 \ud83d\udce8 \ud83d\udd0c \u274c \ud83d\udcca, ReadyAPI \ud83d\udd18 \ud83e\udd1a <code>RequestValidationError</code>.</p> <p>&amp; \u26ab\ufe0f \ud83d\udd0c \ud83d\udd22 \u26a0 \ud83d\udc15\u200d\ud83e\uddba \u26ab\ufe0f.</p> <p>\ud83d\udd10 \u26ab\ufe0f, \ud83d\uddc4 <code>RequestValidationError</code> &amp; \u2699\ufe0f \u26ab\ufe0f \u23ee\ufe0f <code>@app.exception_handler(RequestValidationError)</code> \ud83c\udf80 \u26a0 \ud83d\udc15\u200d\ud83e\uddba.</p> <p>\u26a0 \ud83d\udc15\u200d\ud83e\uddba \ud83d\udd1c \ud83d\udce8 <code>Request</code> &amp; \u26a0.</p> Python 3.8+ <pre><code>from readyapi import HTTPException, ReadyAPI\nfrom readyapi.exceptions import RequestValidationError\nfrom readyapi.responses import PlainTextResponse\nfrom starlette.exceptions import HTTPException as StarletteHTTPException\n\napp = ReadyAPI()\n\n\n@app.exception_handler(StarletteHTTPException)\nasync def http_exception_handler(request, exc):\n    return PlainTextResponse(str(exc.detail), status_code=exc.status_code)\n\n\n@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(request, exc):\n    return PlainTextResponse(str(exc), status_code=400)\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int):\n    if item_id == 3:\n        raise HTTPException(status_code=418, detail=\"Nope! I don't like 3.\")\n    return {\"item_id\": item_id}\n</code></pre> <p>\ud83d\udd1c, \ud83d\udea5 \ud83d\udc46 \ud83d\udeb6 <code>/items/foo</code>, \u21a9\ufe0f \ud83d\udc86\u200d\u2642 \ud83d\udd22 \ud83c\udfbb \u274c \u23ee\ufe0f:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"path\",\n                \"item_id\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}\n</code></pre> <p>\ud83d\udc46 \ud83d\udd1c \ud83e\udd1a \u270d \u23ec, \u23ee\ufe0f:</p> <pre><code>1 validation error\npath -&gt; item_id\n  value is not a valid integer (type=type_error.integer)\n</code></pre>"},{"location":"tutorial/handling-errors/#requestvalidationerror-validationerror","title":"<code>RequestValidationError</code> \ud83c\udd9a <code>ValidationError</code>","text":"<p>Warning</p> <p>\ud83d\udc6b \ud83d\udce1 \u2139 \ud83d\udc48 \ud83d\udc46 \ud83d\udcaa \ud83d\udeb6 \ud83d\udea5 \u26ab\ufe0f \ud83d\udeab \u26a0 \ud83d\udc46 \ud83d\udd1c.</p> <p><code>RequestValidationError</code> \ud83c\udfa7-\ud83c\udf93 Pydantic <code>ValidationError</code>.</p> <p>ReadyAPI \u2699\ufe0f \u26ab\ufe0f \ud83d\udc48, \ud83d\udea5 \ud83d\udc46 \u2699\ufe0f Pydantic \ud83c\udff7 <code>response_model</code>, &amp; \ud83d\udc46 \ud83d\udcbd \u2714\ufe0f \u274c, \ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \u274c \ud83d\udc46 \ud83d\udd79.</p> <p>\u270b\ufe0f \ud83d\udc69\u200d\ud83d\udcbb/\ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd1c \ud83d\udeab \ud83d\udc40 \u26ab\ufe0f. \u21a9\ufe0f, \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd1c \ud83d\udce8 \"\ud83d\udd17 \ud83d\udcbd \u274c\" \u23ee\ufe0f \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udc54 \ud83d\udcdf <code>500</code>.</p> <p>\u26ab\ufe0f \ud83d\udd1c \ud83d\udc49 \ud83c\udf0c \u21a9\ufe0f \ud83d\udea5 \ud83d\udc46 \u2714\ufe0f Pydantic <code>ValidationError</code> \ud83d\udc46 \ud83d\udce8 \u2696\ufe0f \ud83d\ude46 \ud83d\udc46 \ud83d\udcdf (\ud83d\udeab \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udce8), \u26ab\ufe0f \ud83e\udd19 \ud83d\udc1b \ud83d\udc46 \ud83d\udcdf.</p> <p>&amp; \u23ea \ud83d\udc46 \ud83d\udd27 \u26ab\ufe0f, \ud83d\udc46 \ud83d\udc69\u200d\ud83d\udcbb/\ud83d\udc69\u200d\ud83d\udcbb \ud83d\udeab\ud83d\udd1c \ud83d\udeab \u2714\ufe0f \ud83d\udd10 \ud83d\udd17 \u2139 \ud83d\udd03 \u274c, \ud83d\udc48 \ud83d\udcaa \ud83c\udfa6 \ud83d\udc82\u200d\u2642 \u26a0.</p>"},{"location":"tutorial/handling-errors/#httpexception_3","title":"\ud83d\udd10 <code>HTTPException</code> \u274c \ud83d\udc15\u200d\ud83e\uddba","text":"<p>\ud83c\udf8f \ud83c\udf0c, \ud83d\udc46 \ud83d\udcaa \ud83d\udd10 <code>HTTPException</code> \ud83d\udc15\u200d\ud83e\uddba.</p> <p>\ud83d\uddbc, \ud83d\udc46 \ud83d\udcaa \ud83d\udc9a \ud83d\udce8 \u2705 \u270d \ud83d\udce8 \u21a9\ufe0f \ud83c\udfbb \ud83d\udc6b \u274c:</p> Python 3.8+ <pre><code>from readyapi import HTTPException, ReadyAPI\nfrom readyapi.exceptions import RequestValidationError\nfrom readyapi.responses import PlainTextResponse\nfrom starlette.exceptions import HTTPException as StarletteHTTPException\n\napp = ReadyAPI()\n\n\n@app.exception_handler(StarletteHTTPException)\nasync def http_exception_handler(request, exc):\n    return PlainTextResponse(str(exc.detail), status_code=exc.status_code)\n\n\n@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(request, exc):\n    return PlainTextResponse(str(exc), status_code=400)\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int):\n    if item_id == 3:\n        raise HTTPException(status_code=418, detail=\"Nope! I don't like 3.\")\n    return {\"item_id\": item_id}\n</code></pre> <p>\ud83d\udce1 \u2139</p> <p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>from starlette.responses import PlainTextResponse</code>.</p> <p>ReadyAPI \ud83d\ude9a \ud83c\udf8f <code>starlette.responses</code> <code>readyapi.responses</code> \ud83c\udfea \ud83d\udc46, \ud83d\udc69\u200d\ud83d\udcbb. \u270b\ufe0f \ud83c\udf05 \ud83d\udcaa \ud83d\udce8 \ud83d\udc5f \ud83d\udd17 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc83.</p>"},{"location":"tutorial/handling-errors/#requestvalidationerror","title":"\u2699\ufe0f <code>RequestValidationError</code> \ud83d\udcaa","text":"<p><code>RequestValidationError</code> \ud83d\udd0c <code>body</code> \u26ab\ufe0f \ud83d\udce8 \u23ee\ufe0f \u274c \ud83d\udcbd.</p> <p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \u26ab\ufe0f \u23ea \ud83d\udee0\ufe0f \ud83d\udc46 \ud83d\udcf1 \ud83d\udd79 \ud83d\udcaa &amp; \u2139 \u26ab\ufe0f, \ud83d\udce8 \u26ab\ufe0f \ud83d\udc69\u200d\ud83d\udcbb, \u2652\ufe0f.</p> Python 3.8+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI, Request, status\nfrom readyapi.encoders import jsonable_encoder\nfrom readyapi.exceptions import RequestValidationError\nfrom readyapi.responses import JSONResponse\n\napp = ReadyAPI()\n\n\n@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(request: Request, exc: RequestValidationError):\n    return JSONResponse(\n        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,\n        content=jsonable_encoder({\"detail\": exc.errors(), \"body\": exc.body}),\n    )\n\n\nclass Item(BaseModel):\n    title: str\n    size: int\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n</code></pre> <p>\ud83d\udd1c \ud83d\udd04 \ud83d\udce8 \u274c \ud83c\udfec \ud83d\udc96:</p> <pre><code>{\n  \"title\": \"towel\",\n  \"size\": \"XL\"\n}\n</code></pre> <p>\ud83d\udc46 \ud83d\udd1c \ud83d\udce8 \ud83d\udce8 \ud83d\udcac \ud83d\udc46 \ud83d\udc48 \ud83d\udcbd \u274c \u2697 \ud83d\udce8 \ud83d\udcaa:</p> <pre><code>{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"body\",\n        \"size\"\n      ],\n      \"msg\": \"value is not a valid integer\",\n      \"type\": \"type_error.integer\"\n    }\n  ],\n  \"body\": {\n    \"title\": \"towel\",\n    \"size\": \"XL\"\n  }\n}\n</code></pre>"},{"location":"tutorial/handling-errors/#readyapi-httpexception-httpexception","title":"ReadyAPI <code>HTTPException</code> \ud83c\udd9a \ud83d\udc83 <code>HTTPException</code>","text":"<p>ReadyAPI \u2714\ufe0f \ud83d\udeae \ud83d\udc4d <code>HTTPException</code>.</p> <p>&amp; ReadyAPI'\u24c2 <code>HTTPException</code> \u274c \ud83c\udf93 \ud83d\ude16 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc83 <code>HTTPException</code> \u274c \ud83c\udf93.</p> <p>\ud83d\udd74 \ud83d\udd3a, \ud83d\udc48 ReadyAPI'\u24c2 <code>HTTPException</code> \u2714 \ud83d\udc46 \ud83d\udeae \ud83c\udf9a \ud83d\udd0c \ud83d\udce8.</p> <p>\ud83d\udc49 \ud83d\udcaa/\u2699\ufe0f \ud83d\udd18 \u2733 2\ufe0f\u20e3.0\ufe0f\u20e3 &amp; \ud83d\udc82\u200d\u2642 \ud83d\ude99.</p> <p>, \ud83d\udc46 \ud83d\udcaa \ud83d\udea7 \ud83d\ude4b\u200d\u2640 ReadyAPI'\u24c2 <code>HTTPException</code> \ud83d\udece \ud83d\udc46 \ud83d\udcdf.</p> <p>\u270b\ufe0f \ud83d\udd50\u2754 \ud83d\udc46 \u00ae \u26a0 \ud83d\udc15\u200d\ud83e\uddba, \ud83d\udc46 \ud83d\udd1c \u00ae \u26ab\ufe0f \ud83d\udc83 <code>HTTPException</code>.</p> <p>\ud83d\udc49 \ud83c\udf0c, \ud83d\udea5 \ud83d\ude46 \ud83c\udf55 \ud83d\udc83 \ud83d\udd17 \ud83d\udcdf, \u2696\ufe0f \ud83d\udc83 \u2194 \u2696\ufe0f \ud83d\udd0c -, \ud83e\udd1a \ud83d\udc83 <code>HTTPException</code>, \ud83d\udc46 \ud83d\udc15\u200d\ud83e\uddba \ud83d\udd1c \ud83d\udcaa \u270a &amp; \ud83c\udf75 \u26ab\ufe0f.</p> <p>\ud83d\udc49 \ud83d\uddbc, \ud83d\udcaa \u2714\ufe0f \ud83d\udc6f\u200d\u2642\ufe0f <code>HTTPException</code>\u24c2 \ud83c\udf8f \ud83d\udcdf, \ud83d\udc83 \u26a0 \ud83d\udcc1 <code>StarletteHTTPException</code>:</p> <pre><code>from starlette.exceptions import HTTPException as StarletteHTTPException\n</code></pre>"},{"location":"tutorial/handling-errors/#-readyapim","title":"\ud83c\udfe4-\u2699\ufe0f ReadyAPI'\u24c2 \u26a0 \ud83d\udc15\u200d\ud83e\uddba","text":"<p>\ud83d\udea5 \ud83d\udc46 \ud83d\udc9a \u2699\ufe0f \u26a0 \u2934\ufe0f \u23ee\ufe0f \ud83c\udf8f \ud83d\udd22 \u26a0 \ud83d\udc15\u200d\ud83e\uddba \u26aa\ufe0f\u27a1\ufe0f ReadyAPI, \ud83d\udc46 \ud83d\udcaa \ud83d\uddc4 &amp; \ud83c\udfe4-\u2699\ufe0f \ud83d\udd22 \u26a0 \ud83d\udc15\u200d\ud83e\uddba \u26aa\ufe0f\u27a1\ufe0f <code>readyapi.exception_handlers</code>:</p> Python 3.8+ <pre><code>from readyapi import HTTPException, ReadyAPI\nfrom readyapi.exception_handlers import (\n    http_exception_handler,\n    request_validation_exception_handler,\n)\nfrom readyapi.exceptions import RequestValidationError\nfrom starlette.exceptions import HTTPException as StarletteHTTPException\n\napp = ReadyAPI()\n\n\n@app.exception_handler(StarletteHTTPException)\nasync def custom_http_exception_handler(request, exc):\n    print(f\"OMG! An HTTP error!: {repr(exc)}\")\n    return await http_exception_handler(request, exc)\n\n\n@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(request, exc):\n    print(f\"OMG! The client sent invalid data!: {exc}\")\n    return await request_validation_exception_handler(request, exc)\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int):\n    if item_id == 3:\n        raise HTTPException(status_code=418, detail=\"Nope! I don't like 3.\")\n    return {\"item_id\": item_id}\n</code></pre> <p>\ud83d\udc49 \ud83d\uddbc \ud83d\udc46 <code>print</code>\ud83d\ude05 \u274c \u23ee\ufe0f \ud83d\udcf6 \ud83c\udfa8 \ud83d\udce7, \u270b\ufe0f \ud83d\udc46 \ud83e\udd1a \ud83d\udcad. \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \u26a0 &amp; \u2934\ufe0f \ud83c\udfe4-\u2699\ufe0f \ud83d\udd22 \u26a0 \ud83d\udc15\u200d\ud83e\uddba.</p>"},{"location":"tutorial/header-params/","title":"\ud83c\udf9a \ud83d\udd22","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udd2c \ud83c\udf9a \ud83d\udd22 \ud83c\udf8f \ud83c\udf0c \ud83d\udc46 \ud83d\udd2c <code>Query</code>, <code>Path</code> &amp; <code>Cookie</code> \ud83d\udd22.</p>"},{"location":"tutorial/header-params/#header","title":"\ud83d\uddc4 <code>Header</code>","text":"<p>\ud83e\udd47 \ud83d\uddc4 <code>Header</code>:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: Union[str, None] = Header(default=None)):\n    return {\"User-Agent\": user_agent}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: Annotated[str | None, Header()] = None):\n    return {\"User-Agent\": user_agent}\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: Annotated[Union[str, None], Header()] = None):\n    return {\"User-Agent\": user_agent}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Header, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: Annotated[Union[str, None], Header()] = None):\n    return {\"User-Agent\": user_agent}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: str | None = Header(default=None)):\n    return {\"User-Agent\": user_agent}\n</code></pre>"},{"location":"tutorial/header-params/#header_1","title":"\ud83d\udce3 <code>Header</code> \ud83d\udd22","text":"<p>\u2934\ufe0f \ud83d\udce3 \ud83c\udf9a \ud83d\udd22 \u2699\ufe0f \ud83c\udf8f \ud83d\udcca \u23ee\ufe0f <code>Path</code>, <code>Query</code> &amp; <code>Cookie</code>.</p> <p>\ud83e\udd47 \ud83d\udcb2 \ud83d\udd22 \ud83d\udcb2, \ud83d\udc46 \ud83d\udcaa \ud83d\udeb6\u200d\u2640\ufe0f \ud83c\udf10 \u2795 \ud83d\udd2c \u2696\ufe0f \u270d \ud83d\udd22:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: Union[str, None] = Header(default=None)):\n    return {\"User-Agent\": user_agent}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: Annotated[str | None, Header()] = None):\n    return {\"User-Agent\": user_agent}\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: Annotated[Union[str, None], Header()] = None):\n    return {\"User-Agent\": user_agent}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Header, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: Annotated[Union[str, None], Header()] = None):\n    return {\"User-Agent\": user_agent}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(user_agent: str | None = Header(default=None)):\n    return {\"User-Agent\": user_agent}\n</code></pre> <p>\ud83d\udce1 \u2139</p> <p><code>Header</code> \"\ud83d\udc6d\" \ud83c\udf93 <code>Path</code>, <code>Query</code> &amp; <code>Cookie</code>. \u26ab\ufe0f \ud83d\ude16 \u26aa\ufe0f\u27a1\ufe0f \ud83c\udf8f \u26a0 <code>Param</code> \ud83c\udf93.</p> <p>\u270b\ufe0f \ud83d\udcad \ud83d\udc48 \ud83d\udd50\u2754 \ud83d\udc46 \ud83d\uddc4 <code>Query</code>, <code>Path</code>, <code>Header</code>, &amp; \ud83c\udf8f \u26aa\ufe0f\u27a1\ufe0f <code>readyapi</code>, \ud83d\udc48 \ud83e\udd19 \ud83d\udd22 \ud83d\udc48 \ud83d\udce8 \ud83c\udf81 \ud83c\udf93.</p> <p>Info</p> <p>\ud83d\udce3 \ud83c\udf9a, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>Header</code>, \u21a9\ufe0f \u23ea \ud83d\udd22 \ud83d\udd1c \ud83d\udd2c \ud83d\udd22 \ud83d\udd22.</p>"},{"location":"tutorial/header-params/#_2","title":"\ud83c\udfe7 \ud83d\udee0\ufe0f","text":"<p><code>Header</code> \u2714\ufe0f \ud83d\udc25 \u2795 \ud83d\udee0\ufe0f \ud83d\udd1b \ud83d\udd1d \u26ab\ufe0f\u2754 <code>Path</code>, <code>Query</code> &amp; <code>Cookie</code> \ud83d\ude9a.</p> <p>\ud83c\udf05 \ud83d\udc29 \ud83c\udf9a \ud83c\udf8f \"\ud83d\udd20\" \ud83e\uddb9, \ud83d\udcad \"\u2796 \ud83d\udd23\" (<code>-</code>).</p> <p>\u270b\ufe0f \ud83d\udd22 \ud83d\udc96 <code>user-agent</code> \u274c \ud83d\udc0d.</p> <p>, \ud83d\udd22, <code>Header</code> \ud83d\udd1c \ud83d\udddc \ud83d\udd22 \ud83d\udcdb \ud83e\uddb9 \u26aa\ufe0f\u27a1\ufe0f \ud83c\udfa6 (<code>_</code>) \ud83d\udd20 (<code>-</code>) \u2697 &amp; \ud83d\udcc4 \ud83c\udf9a.</p> <p>, \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83c\udf9a \ud83d\udcbc-\ud83d\ude1b,, \ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83d\udc6b \u23ee\ufe0f \ud83d\udc29 \ud83d\udc0d \ud83d\udc57 (\ud83d\udcad \"\ud83d\udd21\").</p> <p>, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>user_agent</code> \ud83d\udc46 \ud83d\udece \ud83d\udd1c \ud83d\udc0d \ud83d\udcdf, \u21a9\ufe0f \ud83d\udc86\u200d\u2642 \ud83c\udfaf \ud83e\udd47 \ud83d\udd24 <code>User_Agent</code> \u2696\ufe0f \ud83d\udd73 \ud83c\udf8f.</p> <p>\ud83d\udea5 \ud83e\udd14 \ud83d\udc46 \ud83d\udcaa \u274e \ud83c\udfe7 \ud83d\udee0\ufe0f \ud83c\udfa6 \ud83d\udd20, \u2692 \ud83d\udd22 <code>convert_underscores</code> <code>Header</code> <code>False</code>:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    strange_header: Union[str, None] = Header(default=None, convert_underscores=False),\n):\n    return {\"strange_header\": strange_header}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    strange_header: Annotated[str | None, Header(convert_underscores=False)] = None,\n):\n    return {\"strange_header\": strange_header}\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    strange_header: Annotated[\n        Union[str, None], Header(convert_underscores=False)\n    ] = None,\n):\n    return {\"strange_header\": strange_header}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Header, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    strange_header: Annotated[\n        Union[str, None], Header(convert_underscores=False)\n    ] = None,\n):\n    return {\"strange_header\": strange_header}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    strange_header: str | None = Header(default=None, convert_underscores=False),\n):\n    return {\"strange_header\": strange_header}\n</code></pre> <p>Warning</p> <p>\u23ed \u2692 <code>convert_underscores</code> <code>False</code>, \ud83d\udc3b \ud83e\udd2f \ud83d\udc48 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\uddf3 &amp; \ud83d\udcbd / \u2699\ufe0f \ud83c\udf9a \u23ee\ufe0f \ud83c\udfa6.</p>"},{"location":"tutorial/header-params/#_3","title":"\u274e \ud83c\udf9a","text":"<p>\u26ab\ufe0f \ud83d\udcaa \ud83d\udce8 \u274e \ud83c\udf9a. \ud83d\udc48 \u26d3, \ud83c\udf8f \ud83c\udf9a \u23ee\ufe0f \ud83d\udc97 \ud83d\udcb2.</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udd2c \ud83d\udc48 \ud83d\udcbc \u2699\ufe0f \ud83d\udcc7 \ud83c\udd8e \ud83d\udcc4.</p> <p>\ud83d\udc46 \ud83d\udd1c \ud83d\udce8 \ud83c\udf10 \ud83d\udcb2 \u26aa\ufe0f\u27a1\ufe0f \u274e \ud83c\udf9a \ud83d\udc0d <code>list</code>.</p> <p>\ud83d\uddbc, \ud83d\udce3 \ud83c\udf9a <code>X-Token</code> \ud83d\udc48 \ud83d\udcaa \ud83d\ude11 \ud83c\udf05 \ud83c\udf18 \ud83d\udd50, \ud83d\udc46 \ud83d\udcaa \u270d:</p> Python 3.8+ - non-Annotated <pre><code>from typing import List, Union\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(x_token: Union[List[str], None] = Header(default=None)):\n    return {\"X-Token values\": x_token}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(x_token: Annotated[list[str] | None, Header()] = None):\n    return {\"X-Token values\": x_token}\n</code></pre> <pre><code>from typing import Annotated, List, Union\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(x_token: Annotated[Union[List[str], None], Header()] = None):\n    return {\"X-Token values\": x_token}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Header, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(x_token: Annotated[Union[List[str], None], Header()] = None):\n    return {\"X-Token values\": x_token}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(x_token: list[str] | None = Header(default=None)):\n    return {\"X-Token values\": x_token}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(x_token: Union[list[str], None] = Header(default=None)):\n    return {\"X-Token values\": x_token}\n</code></pre> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udd17 \u23ee\ufe0f \ud83d\udc48 \u27a1 \ud83d\udee0\ufe0f \ud83d\udce8 2\ufe0f\u20e3 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83c\udf9a \ud83d\udc96:</p> <pre><code>X-Token: foo\nX-Token: bar\n</code></pre> <p>\ud83d\udce8 \ud83d\udd1c \ud83d\udc96:</p> <pre><code>{\n    \"X-Token values\": [\n        \"bar\",\n        \"foo\"\n    ]\n}\n</code></pre>"},{"location":"tutorial/header-params/#_4","title":"\ud83c\udf03","text":"<p>\ud83d\udce3 \ud83c\udf9a \u23ee\ufe0f <code>Header</code>, \u2699\ufe0f \ud83c\udf8f \u26a0 \u2693 <code>Query</code>, <code>Path</code> &amp; <code>Cookie</code>.</p> <p>&amp; \ud83d\udeab \ud83d\ude1f \ud83d\udd03 \ud83c\udfa6 \ud83d\udc46 \ud83d\udd22, ReadyAPI \ud83d\udd1c \u270a \ud83d\udc85 \ud83c\udfed \ud83d\udc6b.</p>"},{"location":"tutorial/metadata/","title":"\ud83d\uddc3 &amp; \ud83e\ude7a \ud83d\udcdb","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udec3 \ud83d\udcda \ud83d\uddc3 \ud83d\udcf3 \ud83d\udc46 ReadyAPI \ud83c\ude38.</p>"},{"location":"tutorial/metadata/#_2","title":"\ud83d\uddc3 \ud83d\udee0\ufe0f","text":"<p>\ud83d\udc46 \ud83d\udcaa \u2692 \ud83d\udcc4 \ud83c\udfd1 \ud83d\udc48 \u2699\ufe0f \ud83d\uddc4 \ud83d\udd27 &amp; \ud83c\udfe7 \ud83d\udee0\ufe0f \ud83e\ude7a \u269c:</p> \ud83d\udd22 \ud83c\udd8e \ud83d\udcdb <code>title</code> <code>str</code> \ud83d\udcdb \ud83d\udee0\ufe0f. <code>description</code> <code>str</code> \ud83d\udccf \ud83d\udcdb \ud83d\udee0\ufe0f. \u26ab\ufe0f \ud83d\udcaa \u2699\ufe0f \u270d. <code>version</code> <code>string</code> \u23ec \ud83d\udee0\ufe0f. \ud83d\udc49 \u23ec \ud83d\udc46 \ud83d\udc4d \ud83c\ude38, \ud83d\udeab \ud83d\uddc4. \ud83d\uddbc <code>2.5.0</code>. <code>terms_of_service</code> <code>str</code> \ud83d\udcdb \u2696 \ud83d\udc15\u200d\ud83e\uddba \ud83d\udee0\ufe0f. \ud83d\udea5 \ud83d\ude9a, \ud83d\udc49 \u2714\ufe0f \ud83d\udcdb. <code>contact</code> <code>dict</code> \ud83d\udce7 \u2139 \ud83c\udfa6 \ud83d\udee0\ufe0f. \u26ab\ufe0f \ud83d\udcaa \ud83d\udd0c \ud83d\udcda \ud83c\udfd1. <code>contact</code> \ud83c\udfd1\ud83d\udd22\ud83c\udd8e\ud83d\udcdb<code>name</code><code>str</code>\u2696 \ud83d\udcdb \ud83d\udce7 \ud83d\udc68\u200d\ud83d\udcbc/\ud83c\udfe2.<code>url</code><code>str</code>\ud83d\udcdb \u261d \ud83d\udce7 \u2139. \ud83d\udd1c \ud83d\udcc1 \ud83d\udcdb.<code>email</code><code>str</code>\ud83d\udce7 \ud83d\udce2 \ud83d\udce7 \ud83d\udc68\u200d\ud83d\udcbc/\ud83c\udfe2. \ud83d\udd1c \ud83d\udcc1 \ud83d\udce7 \ud83d\udce2.  <code>license_info</code> <code>dict</code> \ud83d\udec2 \u2139 \ud83c\udfa6 \ud83d\udee0\ufe0f. \u26ab\ufe0f \ud83d\udcaa \ud83d\udd0c \ud83d\udcda \ud83c\udfd1. <code>license_info</code> \ud83c\udfd1\ud83d\udd22\ud83c\udd8e\ud83d\udcdb<code>name</code><code>str</code>\ud83d\ude9a (\ud83d\udea5 <code>license_info</code> \u2692). \ud83d\udec2 \ud83d\udcdb \u2699\ufe0f \ud83d\udee0\ufe0f.<code>url</code><code>str</code>\ud83d\udcdb \ud83d\udec2 \u2699\ufe0f \ud83d\udee0\ufe0f. \ud83d\udd1c \ud83d\udcc1 \ud83d\udcdb.  <p>\ud83d\udc46 \ud83d\udcaa \u2692 \ud83d\udc6b \u23e9:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\ndescription = \"\"\"\nChimichangApp API helps you do awesome stuff. \ud83d\ude80\n\n## Items\n\nYou can **read items**.\n\n## Users\n\nYou will be able to:\n\n* **Create users** (_not implemented_).\n* **Read users** (_not implemented_).\n\"\"\"\n\napp = ReadyAPI(\n    title=\"ChimichangApp\",\n    description=description,\n    summary=\"Deadpool's favorite app. Nuff said.\",\n    version=\"0.0.1\",\n    terms_of_service=\"http://example.com/terms/\",\n    contact={\n        \"name\": \"Deadpoolio the Amazing\",\n        \"url\": \"http://x-force.example.com/contact/\",\n        \"email\": \"dp@x-force.example.com\",\n    },\n    license_info={\n        \"name\": \"Apache 2.0\",\n        \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\",\n    },\n)\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Katana\"}]\n</code></pre> <p>Tip</p> <p>\ud83d\udc46 \ud83d\udcaa \u270d \u270d <code>description</code> \ud83c\udfd1 &amp; \u26ab\ufe0f \ud83d\udd1c \u270d \ud83d\udd22.</p> <p>\u23ee\ufe0f \ud83d\udc49 \ud83d\udcf3, \ud83c\udfe7 \ud83d\udee0\ufe0f \ud83e\ude7a \ud83d\udd1c \ud83d\udc40 \ud83d\udc96:</p> <p></p>"},{"location":"tutorial/metadata/#_3","title":"\ud83d\uddc3 \ud83d\udd16","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udeae \ud83c\udf16 \ud83d\uddc3 \ud83c\udf8f \ud83d\udd16 \u2699\ufe0f \ud83d\udc6a \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f \u23ee\ufe0f \ud83d\udd22 <code>openapi_tags</code>.</p> <p>\u26ab\ufe0f \u270a \ud83d\udcc7 \u2697 1\ufe0f\u20e3 \ud83d\udcd6 \ud83d\udd20 \ud83d\udd16.</p> <p>\ud83d\udd20 \ud83d\udcd6 \ud83d\udcaa \ud83d\udd0c:</p> <ul> <li><code>name</code> (\u2714): <code>str</code> \u23ee\ufe0f \ud83c\udf8f \ud83d\udcdb \ud83d\udc46 \u2699\ufe0f <code>tags</code> \ud83d\udd22 \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f &amp; <code>APIRouter</code>\u24c2.</li> <li><code>description</code>: <code>str</code> \u23ee\ufe0f \ud83d\udccf \ud83d\udcdb \ud83d\udd16. \u26ab\ufe0f \ud83d\udcaa \u2714\ufe0f \u270d &amp; \ud83d\udd1c \ud83c\udfa6 \ud83e\ude7a \ud83c\udf9a.</li> <li><code>externalDocs</code>: <code>dict</code> \ud83d\udd2c \ud83d\udd22 \ud83e\uddfe \u23ee\ufe0f:<ul> <li><code>description</code>: <code>str</code> \u23ee\ufe0f \ud83d\udccf \ud83d\udcdb \ud83d\udd22 \ud83e\ude7a.</li> <li><code>url</code> (\u2714): <code>str</code> \u23ee\ufe0f \ud83d\udcdb \ud83d\udd22 \ud83e\uddfe.</li> </ul> </li> </ul>"},{"location":"tutorial/metadata/#_4","title":"\u270d \ud83d\uddc3 \ud83d\udd16","text":"<p>\u27a1\ufe0f \ud83d\udd04 \ud83d\udc48 \ud83d\uddbc \u23ee\ufe0f \ud83d\udd16 <code>users</code> &amp; <code>items</code>.</p> <p>\u270d \ud83d\uddc3 \ud83d\udc46 \ud83d\udd16 &amp; \ud83d\udeb6\u200d\u2640\ufe0f \u26ab\ufe0f <code>openapi_tags</code> \ud83d\udd22:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\ntags_metadata = [\n    {\n        \"name\": \"users\",\n        \"description\": \"Operations with users. The **login** logic is also here.\",\n    },\n    {\n        \"name\": \"items\",\n        \"description\": \"Manage items. So _fancy_ they have their own docs.\",\n        \"externalDocs\": {\n            \"description\": \"Items external docs\",\n            \"url\": \"https://readyapi.github.io/\",\n        },\n    },\n]\n\napp = ReadyAPI(openapi_tags=tags_metadata)\n\n\n@app.get(\"/users/\", tags=[\"users\"])\nasync def get_users():\n    return [{\"name\": \"Harry\"}, {\"name\": \"Ron\"}]\n\n\n@app.get(\"/items/\", tags=[\"items\"])\nasync def get_items():\n    return [{\"name\": \"wand\"}, {\"name\": \"flying broom\"}]\n</code></pre> <p>\ud83d\udc40 \ud83d\udc48 \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \u270d \ud83d\udd18 \ud83d\udcdb, \ud83d\uddbc \"\ud83d\udcb3\" \ud83d\udd1c \ud83c\udfa6 \ud83e\udd81 (\ud83d\udcb3) &amp; \"\ud83c\udf80\" \ud83d\udd1c \ud83c\udfa6 \u2755 (\ud83c\udf80).</p> <p>Tip</p> <p>\ud83d\udc46 \ud83d\udeab \u2714\ufe0f \ud83d\udeae \ud83d\uddc3 \ud83c\udf10 \ud83d\udd16 \ud83d\udc48 \ud83d\udc46 \u2699\ufe0f.</p>"},{"location":"tutorial/metadata/#_5","title":"\u2699\ufe0f \ud83d\udc46 \ud83d\udd16","text":"<p>\u2699\ufe0f <code>tags</code> \ud83d\udd22 \u23ee\ufe0f \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f (&amp; <code>APIRouter</code>\u24c2) \ud83d\udee0\ufe0f \ud83d\udc6b \ud83c\udf8f \ud83d\udd16:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\ntags_metadata = [\n    {\n        \"name\": \"users\",\n        \"description\": \"Operations with users. The **login** logic is also here.\",\n    },\n    {\n        \"name\": \"items\",\n        \"description\": \"Manage items. So _fancy_ they have their own docs.\",\n        \"externalDocs\": {\n            \"description\": \"Items external docs\",\n            \"url\": \"https://readyapi.github.io/\",\n        },\n    },\n]\n\napp = ReadyAPI(openapi_tags=tags_metadata)\n\n\n@app.get(\"/users/\", tags=[\"users\"])\nasync def get_users():\n    return [{\"name\": \"Harry\"}, {\"name\": \"Ron\"}]\n\n\n@app.get(\"/items/\", tags=[\"items\"])\nasync def get_items():\n    return [{\"name\": \"wand\"}, {\"name\": \"flying broom\"}]\n</code></pre> <p>Info</p> <p>\u270d \ud83c\udf05 \ud83d\udd03 \ud83d\udd16 \u27a1 \ud83d\udee0\ufe0f \ud83d\udcf3.</p>"},{"location":"tutorial/metadata/#_6","title":"\u2705 \ud83e\ude7a","text":"<p>\ud83d\udd1c, \ud83d\udea5 \ud83d\udc46 \u2705 \ud83e\ude7a, \ud83d\udc6b \ud83d\udd1c \ud83c\udfa6 \ud83c\udf10 \ud83c\udf16 \ud83d\uddc3:</p> <p></p>"},{"location":"tutorial/metadata/#_7","title":"\u2714 \ud83d\udd16","text":"<p>\u2714 \ud83d\udd20 \ud83d\udd16 \ud83d\uddc3 \ud83d\udcd6 \ud83d\udd2c \u2714 \ud83c\udfa6 \ud83e\ude7a \ud83c\udf9a.</p> <p>\ud83d\uddbc, \u270b\ufe0f <code>users</code> \ud83d\udd1c \ud83d\udeb6 \u23ee\ufe0f <code>items</code> \ud83d\udd24 \u2714, \u26ab\ufe0f \ud83c\udfa6 \u23ed \ud83d\udc6b, \u21a9\ufe0f \ud83d\udc65 \ud83d\udeae \ud83d\udc6b \ud83d\uddc3 \ud83e\udd47 \ud83d\udcd6 \ud83d\udcc7.</p>"},{"location":"tutorial/metadata/#_8","title":"\ud83d\uddc4 \ud83d\udcdb","text":"<p>\ud83d\udd22, \ud83d\uddc4 \ud83d\udd17 \ud83c\udf66 <code>/openapi.json</code>.</p> <p>\u270b\ufe0f \ud83d\udc46 \ud83d\udcaa \ud83d\udd17 \u26ab\ufe0f \u23ee\ufe0f \ud83d\udd22 <code>openapi_url</code>.</p> <p>\ud83d\uddbc, \u2692 \u26ab\ufe0f \ud83c\udf66 <code>/api/v1/openapi.json</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(openapi_url=\"/api/v1/openapi.json\")\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n</code></pre> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udc9a \u274e \ud83d\uddc4 \ud83d\udd17 \ud83c\udf55 \ud83d\udc46 \ud83d\udcaa \u2692 <code>openapi_url=None</code>, \ud83d\udc48 \ud83d\udd1c \u274e \ud83e\uddfe \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd22 \ud83d\udc48 \u2699\ufe0f \u26ab\ufe0f.</p>"},{"location":"tutorial/metadata/#_9","title":"\ud83e\ude7a \ud83d\udcdb","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udd17 2\ufe0f\u20e3 \ud83e\uddfe \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd22 \ud83d\udd0c:</p> <ul> <li>\ud83e\udd81 \ud83c\udf9a: \ud83c\udf66 <code>/docs</code>.<ul> <li>\ud83d\udc46 \ud83d\udcaa \u2692 \ud83d\udeae \ud83d\udcdb \u23ee\ufe0f \ud83d\udd22 <code>docs_url</code>.</li> <li>\ud83d\udc46 \ud83d\udcaa \u274e \u26ab\ufe0f \u2692 <code>docs_url=None</code>.</li> </ul> </li> <li>\ud83d\udcc4: \ud83c\udf66 <code>/redoc</code>.<ul> <li>\ud83d\udc46 \ud83d\udcaa \u2692 \ud83d\udeae \ud83d\udcdb \u23ee\ufe0f \ud83d\udd22 <code>redoc_url</code>.</li> <li>\ud83d\udc46 \ud83d\udcaa \u274e \u26ab\ufe0f \u2692 <code>redoc_url=None</code>.</li> </ul> </li> </ul> <p>\ud83d\uddbc, \u2692 \ud83e\udd81 \ud83c\udf9a \ud83c\udf66 <code>/documentation</code> &amp; \u274e \ud83d\udcc4:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(docs_url=\"/documentation\", redoc_url=None)\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]\n</code></pre>"},{"location":"tutorial/middleware/","title":"\ud83d\udee0\ufe0f","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udeae \ud83d\udee0\ufe0f ReadyAPI \ud83c\ude38.</p> <p>\"\ud83d\udee0\ufe0f\" \ud83d\udd22 \ud83d\udc48 \ud83d\udc77 \u23ee\ufe0f \ud83d\udd20 \ud83d\udce8 \u23ed \u26ab\ufe0f \ud83d\udee0\ufe0f \ud83d\ude46 \ud83c\udfaf \u27a1 \ud83d\udee0\ufe0f. &amp; \u23ee\ufe0f \ud83d\udd20 \ud83d\udce8 \u23ed \ud83d\udeec \u26ab\ufe0f.</p> <ul> <li>\u26ab\ufe0f \u270a \ud83d\udd20 \ud83d\udce8 \ud83d\udc48 \ud83d\udc5f \ud83d\udc46 \ud83c\ude38.</li> <li>\u26ab\ufe0f \ud83d\udcaa \u2934\ufe0f \ud83d\udd73 \ud83d\udc48 \ud83d\udce8 \u2696\ufe0f \ud83c\udfc3 \ud83d\ude46 \ud83d\udcaa \ud83d\udcdf.</li> <li>\u2934\ufe0f \u26ab\ufe0f \ud83d\udeb6\u200d\u2640\ufe0f \ud83d\udce8 \ud83d\udee0\ufe0f \ud83c\udf82 \ud83c\ude38 ( \u27a1 \ud83d\udee0\ufe0f).</li> <li>\u26ab\ufe0f \u2934\ufe0f \u270a \ud83d\udce8 \ud83c\udfd7 \ud83c\ude38 ( \u27a1 \ud83d\udee0\ufe0f).</li> <li>\u26ab\ufe0f \ud83d\udcaa \ud83d\udd73 \ud83d\udc48 \ud83d\udce8 \u2696\ufe0f \ud83c\udfc3 \ud83d\ude46 \ud83d\udcaa \ud83d\udcdf.</li> <li>\u2934\ufe0f \u26ab\ufe0f \ud83d\udce8 \ud83d\udce8.</li> </ul> <p>\ud83d\udce1 \u2139</p> <p>\ud83d\udea5 \ud83d\udc46 \u2714\ufe0f \ud83d\udd17 \u23ee\ufe0f <code>yield</code>, \ud83d\udeaa \ud83d\udcdf \ud83d\udd1c \ud83c\udfc3 \u23ee\ufe0f \ud83d\udee0\ufe0f.</p> <p>\ud83d\udea5 \ud83d\udce4 \ud83d\ude46 \ud83d\udda5 \ud83d\udccb (\ud83d\udcc4 \u23ea), \ud83d\udc6b \ud83d\udd1c \ud83c\udfc3 \u23ee\ufe0f \ud83c\udf10 \ud83d\udee0\ufe0f.</p>"},{"location":"tutorial/middleware/#_2","title":"\u270d \ud83d\udee0\ufe0f","text":"<p>\u270d \ud83d\udee0\ufe0f \ud83d\udc46 \u2699\ufe0f \ud83d\udc68\u200d\ud83c\udfa8 <code>@app.middleware(\"http\")</code> \ud83d\udd1b \ud83d\udd1d \ud83d\udd22.</p> <p>\ud83d\udee0\ufe0f \ud83d\udd22 \ud83d\udce8:</p> <ul> <li><code>request</code>.</li> <li>\ud83d\udd22 <code>call_next</code> \ud83d\udc48 \ud83d\udd1c \ud83d\udce8 <code>request</code> \ud83d\udd22.<ul> <li>\ud83d\udc49 \ud83d\udd22 \ud83d\udd1c \ud83d\udeb6\u200d\u2640\ufe0f <code>request</code> \ud83d\udd17 \u27a1 \ud83d\udee0\ufe0f.</li> <li>\u2934\ufe0f \u26ab\ufe0f \ud83d\udce8 <code>response</code> \ud83c\udfd7 \ud83d\udd17 \u27a1 \ud83d\udee0\ufe0f.</li> </ul> </li> <li>\ud83d\udc46 \ud83d\udcaa \u2934\ufe0f \ud83d\udd00 \ud83c\udf05 <code>response</code> \u23ed \ud83d\udeec \u26ab\ufe0f.</li> </ul> Python 3.8+ <pre><code>import time\n\nfrom readyapi import ReadyAPI, Request\n\napp = ReadyAPI()\n\n\n@app.middleware(\"http\")\nasync def add_process_time_header(request: Request, call_next):\n    start_time = time.perf_counter()\n    response = await call_next(request)\n    process_time = time.perf_counter() - start_time\n    response.headers[\"X-Process-Time\"] = str(process_time)\n    return response\n</code></pre> <p>Tip</p> <p>\u2714\ufe0f \ud83e\udd2f \ud83d\udc48 \ud83d\udec3 \u00a9 \ud83c\udf9a \ud83d\udcaa \ud83d\udeae \u2699\ufe0f '\u2716-' \ud83d\udd21.</p> <p>\u270b\ufe0f \ud83d\udea5 \ud83d\udc46 \u2714\ufe0f \ud83d\udec3 \ud83c\udf9a \ud83d\udc48 \ud83d\udc46 \ud83d\udc9a \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udda5 \ud83d\udcaa \ud83d\udc40, \ud83d\udc46 \ud83d\udcaa \ud83d\udeae \ud83d\udc6b \ud83d\udc46 \u269c \ud83d\udcf3 (\u269c (\u2716\ufe0f-\ud83c\udde8\ud83c\uddf3 \u2139 \ud83e\udd1d)) \u2699\ufe0f \ud83d\udd22 <code>expose_headers</code> \ud83d\udcc4 \ud83d\udc83 \u269c \ud83e\ude7a.</p> <p>\ud83d\udce1 \u2139</p> <p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>from starlette.requests import Request</code>.</p> <p>ReadyAPI \ud83d\ude9a \u26ab\ufe0f \ud83c\udfea \ud83d\udc46, \ud83d\udc69\u200d\ud83d\udcbb. \u270b\ufe0f \u26ab\ufe0f \ud83d\udc5f \ud83d\udd17 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc83.</p>"},{"location":"tutorial/middleware/#response","title":"\u23ed &amp; \u23ee\ufe0f <code>response</code>","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udeae \ud83d\udcdf \ud83c\udfc3 \u23ee\ufe0f <code>request</code>, \u23ed \ud83d\ude46 \u27a1 \ud83d\udee0\ufe0f \ud83d\udce8 \u26ab\ufe0f.</p> <p>&amp; \u23ee\ufe0f <code>response</code> \ud83c\udfd7, \u23ed \ud83d\udeec \u26ab\ufe0f.</p> <p>\ud83d\uddbc, \ud83d\udc46 \ud83d\udcaa \ud83d\udeae \ud83d\udec3 \ud83c\udf9a <code>X-Process-Time</code> \u2697 \ud83d\udd70 \ud83e\udd48 \ud83d\udc48 \u26ab\ufe0f \u270a \ud83d\udee0\ufe0f \ud83d\udce8 &amp; \ud83c\udfd7 \ud83d\udce8:</p> Python 3.8+ <pre><code>import time\n\nfrom readyapi import ReadyAPI, Request\n\napp = ReadyAPI()\n\n\n@app.middleware(\"http\")\nasync def add_process_time_header(request: Request, call_next):\n    start_time = time.perf_counter()\n    response = await call_next(request)\n    process_time = time.perf_counter() - start_time\n    response.headers[\"X-Process-Time\"] = str(process_time)\n    return response\n</code></pre>"},{"location":"tutorial/middleware/#_3","title":"\ud83c\udf8f \ud83d\udee0\ufe0f","text":"<p>\ud83d\udc46 \ud83d\udcaa \u23ea \u270d \ud83c\udf16 \ud83d\udd03 \ud83c\udf8f \ud83d\udee0\ufe0f \ud83c\udfe7 \ud83d\udc69\u200d\ud83d\udcbb \ud83e\uddae: \ud83c\udfe7 \ud83d\udee0\ufe0f.</p> <p>\ud83d\udc46 \ud83d\udd1c \u270d \ud83d\udd03 \u2754 \ud83c\udf75 \u269c \u23ee\ufe0f \ud83d\udee0\ufe0f \u23ed \ud83d\udcc4.</p>"},{"location":"tutorial/path-operation-configuration/","title":"\u27a1 \ud83d\udee0\ufe0f \ud83d\udcf3","text":"<p>\ud83d\udce4 \ud83d\udcda \ud83d\udd22 \ud83d\udc48 \ud83d\udc46 \ud83d\udcaa \ud83d\udeb6\u200d\u2640\ufe0f \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udd17 \u26ab\ufe0f.</p> <p>Warning</p> <p>\ud83d\udc40 \ud83d\udc48 \ud83d\udc6b \ud83d\udd22 \ud83d\udeb6\u200d\u2640\ufe0f \ud83d\udd17 \u27a1 \ud83d\udee0\ufe0f \ud83d\udc68\u200d\ud83c\udfa8, \ud83d\udeab \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22.</p>"},{"location":"tutorial/path-operation-configuration/#_2","title":"\ud83d\udce8 \ud83d\udc54 \ud83d\udcdf","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udd2c (\ud83c\uddfa\ud83c\uddf8\ud83d\udd0d) <code>status_code</code> \u2699\ufe0f \ud83d\udce8 \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f.</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udeb6\u200d\u2640\ufe0f \ud83d\udd17 <code>int</code> \ud83d\udcdf, \ud83d\udc96 <code>404</code>.</p> <p>\u270b\ufe0f \ud83d\udea5 \ud83d\udc46 \ud83d\udeab \ud83d\udcad \u26ab\ufe0f\u2754 \ud83d\udd20 \ud83d\udd22 \ud83d\udcdf, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \u2328 \ud83d\udcc9 <code>status</code>:</p> Python 3.8+ <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI, status\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, status_code=status.HTTP_201_CREATED)\nasync def create_item(item: Item):\n    return item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI, status\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, status_code=status.HTTP_201_CREATED)\nasync def create_item(item: Item):\n    return item\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI, status\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, status_code=status.HTTP_201_CREATED)\nasync def create_item(item: Item):\n    return item\n</code></pre> <p>\ud83d\udc48 \ud83d\udc54 \ud83d\udcdf \ud83d\udd1c \u2699\ufe0f \ud83d\udce8 &amp; \ud83d\udd1c \ud83d\udeae \ud83d\uddc4 \ud83d\udd17.</p> <p>\ud83d\udce1 \u2139</p> <p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>from starlette import status</code>.</p> <p>ReadyAPI \ud83d\ude9a \ud83c\udf8f <code>starlette.status</code> <code>readyapi.status</code> \ud83c\udfea \ud83d\udc46, \ud83d\udc69\u200d\ud83d\udcbb. \u270b\ufe0f \u26ab\ufe0f \ud83d\udc5f \ud83d\udd17 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc83.</p>"},{"location":"tutorial/path-operation-configuration/#_3","title":"\ud83d\udd16","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udeae \ud83d\udd16 \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f, \ud83d\udeb6\u200d\u2640\ufe0f \ud83d\udd22 <code>tags</code> \u23ee\ufe0f <code>list</code> <code>str</code> (\ud83d\udece 1\ufe0f\u20e3 <code>str</code>):</p> Python 3.8+ <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, tags=[\"items\"])\nasync def create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\", tags=[\"items\"])\nasync def read_items():\n    return [{\"name\": \"Foo\", \"price\": 42}]\n\n\n@app.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"johndoe\"}]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, tags=[\"items\"])\nasync def create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\", tags=[\"items\"])\nasync def read_items():\n    return [{\"name\": \"Foo\", \"price\": 42}]\n\n\n@app.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"johndoe\"}]\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, tags=[\"items\"])\nasync def create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\", tags=[\"items\"])\nasync def read_items():\n    return [{\"name\": \"Foo\", \"price\": 42}]\n\n\n@app.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"johndoe\"}]\n</code></pre> <p>\ud83d\udc6b \ud83d\udd1c \ud83d\udeae \ud83d\uddc4 \ud83d\udd17 &amp; \u2699\ufe0f \ud83c\udfe7 \ud83e\uddfe \ud83d\udd22:</p> <p></p>"},{"location":"tutorial/path-operation-configuration/#_4","title":"\ud83d\udd16 \u23ee\ufe0f \ud83d\udd22","text":"<p>\ud83d\udea5 \ud83d\udc46 \u2714\ufe0f \ud83e\udd8f \ud83c\ude38, \ud83d\udc46 5\ufe0f\u20e3\ud83d\udcc6 \ud83d\udd1a \ud83c\udd99 \ud83d\udcc8 \ud83d\udcda \ud83d\udd16, &amp; \ud83d\udc46 \ud83d\udd1c \ud83d\udc9a \u2692 \ud83d\udcad \ud83d\udc46 \ud83d\udd67 \u2699\ufe0f \ud83c\udf8f \ud83d\udd16 \ud83d\udd17 \u27a1 \ud83d\udee0\ufe0f.</p> <p>\ud83d\udc6b \ud83d\udcbc, \u26ab\ufe0f \ud83d\udcaa \u2692 \ud83d\udd11 \ud83c\udfea \ud83d\udd16 <code>Enum</code>.</p> <p>ReadyAPI \ud83d\udc15\u200d\ud83e\uddba \ud83d\udc48 \ud83c\udf8f \ud83c\udf0c \u23ee\ufe0f \u2705 \ud83c\udfbb:</p> Python 3.8+ <pre><code>from enum import Enum\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Tags(Enum):\n    items = \"items\"\n    users = \"users\"\n\n\n@app.get(\"/items/\", tags=[Tags.items])\nasync def get_items():\n    return [\"Portal gun\", \"Plumbus\"]\n\n\n@app.get(\"/users/\", tags=[Tags.users])\nasync def read_users():\n    return [\"Rick\", \"Morty\"]\n</code></pre>"},{"location":"tutorial/path-operation-configuration/#_5","title":"\ud83d\udcc4 &amp; \ud83d\udcdb","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udeae <code>summary</code> &amp; <code>description</code>:</p> Python 3.8+ <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n\n\n@app.post(\n    \"/items/\",\n    response_model=Item,\n    summary=\"Create an item\",\n    description=\"Create an item with all the information, name, description, price, tax and a set of unique tags\",\n)\nasync def create_item(item: Item):\n    return item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n\n\n@app.post(\n    \"/items/\",\n    response_model=Item,\n    summary=\"Create an item\",\n    description=\"Create an item with all the information, name, description, price, tax and a set of unique tags\",\n)\nasync def create_item(item: Item):\n    return item\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n\n\n@app.post(\n    \"/items/\",\n    response_model=Item,\n    summary=\"Create an item\",\n    description=\"Create an item with all the information, name, description, price, tax and a set of unique tags\",\n)\nasync def create_item(item: Item):\n    return item\n</code></pre>"},{"location":"tutorial/path-operation-configuration/#_6","title":"\ud83d\udcdb \u26aa\ufe0f\u27a1\ufe0f #\ufe0f\u20e3","text":"<p>\ud83d\udcdb \ud83d\ude11 \ud83d\udccf &amp; \ud83d\udcd4 \ud83d\udc97 \u23f8, \ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \u27a1 \ud83d\udee0\ufe0f \ud83d\udcdb \ud83d\udd22  #\ufe0f\u20e3  &amp; ReadyAPI \ud83d\udd1c \u270d \u26ab\ufe0f \u26aa\ufe0f\u27a1\ufe0f \ud83d\udce4.</p> <p>\ud83d\udc46 \ud83d\udcaa \u270d \u270d #\ufe0f\u20e3 , \u26ab\ufe0f \ud83d\udd1c \ud83d\udd2c &amp; \ud83d\udda5 \u2611 (\u270a \ud83d\udd18 \ud83c\udfe7 #\ufe0f\u20e3 \ud83d\udcd0).</p> Python 3.8+ <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, summary=\"Create an item\")\nasync def create_item(item: Item):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \"\"\"\n    return item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, summary=\"Create an item\")\nasync def create_item(item: Item):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \"\"\"\n    return item\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n\n\n@app.post(\"/items/\", response_model=Item, summary=\"Create an item\")\nasync def create_item(item: Item):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \"\"\"\n    return item\n</code></pre> <p>\u26ab\ufe0f \ud83d\udd1c \u2699\ufe0f \ud83c\udf93 \ud83e\ude7a:</p> <p></p>"},{"location":"tutorial/path-operation-configuration/#_7","title":"\ud83d\udce8 \ud83d\udcdb","text":"<p>\ud83d\udc46 \ud83d\udcaa \u2714 \ud83d\udce8 \ud83d\udcdb \u23ee\ufe0f \ud83d\udd22 <code>response_description</code>:</p> Python 3.8+ <pre><code>from typing import Set, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n\n\n@app.post(\n    \"/items/\",\n    response_model=Item,\n    summary=\"Create an item\",\n    response_description=\"The created item\",\n)\nasync def create_item(item: Item):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \"\"\"\n    return item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n\n\n@app.post(\n    \"/items/\",\n    response_model=Item,\n    summary=\"Create an item\",\n    response_description=\"The created item\",\n)\nasync def create_item(item: Item):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \"\"\"\n    return item\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n\n\n@app.post(\n    \"/items/\",\n    response_model=Item,\n    summary=\"Create an item\",\n    response_description=\"The created item\",\n)\nasync def create_item(item: Item):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \"\"\"\n    return item\n</code></pre> <p>Info</p> <p>\ud83d\udc40 \ud83d\udc48 <code>response_description</code> \ud83d\udd17 \ud83c\udfaf \ud83d\udce8, <code>description</code> \ud83d\udd17 \u27a1 \ud83d\udee0\ufe0f \ud83c\udfe2.</p> <p>Check</p> <p>\ud83d\uddc4 \u2714 \ud83d\udc48 \ud83d\udd20 \u27a1 \ud83d\udee0\ufe0f \ud83d\ude9a \ud83d\udce8 \ud83d\udcdb.</p> <p>, \ud83d\udea5 \ud83d\udc46 \ud83d\udeab \ud83d\ude9a 1\ufe0f\u20e3, ReadyAPI \ud83d\udd1c \ud83d\udd01 \ud83c\udfd7 1\ufe0f\u20e3 \"\ud83c\udfc6 \ud83d\udce8\".</p> <p></p>"},{"location":"tutorial/path-operation-configuration/#_8","title":"\ud83d\ude22 \u27a1 \ud83d\udee0\ufe0f","text":"<p>\ud83d\udea5 \ud83d\udc46 \ud83d\udcaa \u2122 \u27a1 \ud83d\udee0\ufe0f \ud83d\ude22, \u270b\ufe0f \ud83c\udf75 \u274e \u26ab\ufe0f, \ud83d\udeb6\u200d\u2640\ufe0f \ud83d\udd22 <code>deprecated</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\", tags=[\"items\"])\nasync def read_items():\n    return [{\"name\": \"Foo\", \"price\": 42}]\n\n\n@app.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"johndoe\"}]\n\n\n@app.get(\"/elements/\", tags=[\"items\"], deprecated=True)\nasync def read_elements():\n    return [{\"item_id\": \"Foo\"}]\n</code></pre> <p>\u26ab\ufe0f \ud83d\udd1c \ud83c\udfaf \u2122 \ud83d\ude22 \ud83c\udf93 \ud83e\ude7a:</p> <p></p> <p>\u2705 \u2754 \ud83d\ude22 &amp; \ud83d\udeab-\ud83d\ude22 \u27a1 \ud83d\udee0\ufe0f \ud83d\udc40 \ud83d\udc96:</p> <p></p>"},{"location":"tutorial/path-operation-configuration/#_9","title":"\ud83c\udf03","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udd17 &amp; \ud83d\udeae \ud83d\uddc3 \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f \ud83d\udcaa \ud83d\udeb6\u200d\u2640\ufe0f \ud83d\udd22 \u27a1 \ud83d\udee0\ufe0f \ud83d\udc68\u200d\ud83c\udfa8.</p>"},{"location":"tutorial/path-params-numeric-validations/","title":"\u27a1 \ud83d\udd22 &amp; \ud83d\udd22 \ud83d\udd2c","text":"<p>\ud83c\udf8f \ud83c\udf0c \ud83d\udc48 \ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83c\udf05 \ud83d\udd2c &amp; \ud83d\uddc3 \ud83d\udd22 \ud83d\udd22 \u23ee\ufe0f <code>Query</code>, \ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83c\udf8f \ud83c\udd8e \ud83d\udd2c &amp; \ud83d\uddc3 \u27a1 \ud83d\udd22 \u23ee\ufe0f <code>Path</code>.</p>"},{"location":"tutorial/path-params-numeric-validations/#_2","title":"\ud83d\uddc4 \u27a1","text":"<p>\ud83e\udd47, \ud83d\uddc4 <code>Path</code> \u26aa\ufe0f\u27a1\ufe0f <code>readyapi</code>:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom readyapi import Path, Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: Union[str, None] = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Path, Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[str | None, Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Path, Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Path, Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Path, Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: str | None = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre>"},{"location":"tutorial/path-params-numeric-validations/#_3","title":"\ud83d\udce3 \ud83d\uddc3","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83c\udf10 \ud83c\udf8f \ud83d\udd22 <code>Query</code>.</p> <p>\ud83d\uddbc, \ud83d\udce3 <code>title</code> \ud83d\uddc3 \ud83d\udcb2 \u27a1 \ud83d\udd22 <code>item_id</code> \ud83d\udc46 \ud83d\udcaa \ud83c\udd8e:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom readyapi import Path, Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: Union[str, None] = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Path, Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[str | None, Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Path, Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Path, Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Path, Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: str | None = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Note</p> <p>\u27a1 \ud83d\udd22 \ud83d\udd67 \u2714 \u26ab\ufe0f \u2714\ufe0f \ud83c\udf55 \u27a1.</p> <p>, \ud83d\udc46 \ud83d\udd1c \ud83d\udce3 \u26ab\ufe0f \u23ee\ufe0f <code>...</code> \u2122 \u26ab\ufe0f \u2714.</p> <p>\ud83d\udc50, \ud83d\udea5 \ud83d\udc46 \ud83d\udce3 \u26ab\ufe0f \u23ee\ufe0f <code>None</code> \u2696\ufe0f \u2692 \ud83d\udd22 \ud83d\udcb2, \u26ab\ufe0f \ud83d\udd1c \ud83d\udeab \ud83d\udcc9 \ud83d\udd73, \u26ab\ufe0f \ud83d\udd1c \ud83d\udd67 \ud83d\ude9a.</p>"},{"location":"tutorial/path-params-numeric-validations/#_4","title":"\u2714 \ud83d\udd22 \ud83d\udc46 \ud83d\udcaa","text":"<p>\u27a1\ufe0f \ud83d\udcac \ud83d\udc48 \ud83d\udc46 \ud83d\udc9a \ud83d\udce3 \ud83d\udd22 \ud83d\udd22 <code>q</code> \u2714 <code>str</code>.</p> <p>&amp; \ud83d\udc46 \ud83d\udeab \ud83d\udcaa \ud83d\udce3 \ud83d\udd73 \ud83d\ude46 \ud83d\udc48 \ud83d\udd22, \ud83d\udc46 \ud83d\udeab \ud83e\udd19 \ud83d\udcaa \u2699\ufe0f <code>Query</code>.</p> <p>\u270b\ufe0f \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>Path</code> <code>item_id</code> \u27a1 \ud83d\udd22.</p> <p>\ud83d\udc0d \ud83d\udd1c \ud83d\ude2d \ud83d\udea5 \ud83d\udc46 \ud83d\udeae \ud83d\udcb2 \u23ee\ufe0f \"\ud83d\udd22\" \u23ed \ud83d\udcb2 \ud83d\udc48 \ud83d\udeab \u2714\ufe0f \"\ud83d\udd22\".</p> <p>\u270b\ufe0f \ud83d\udc46 \ud83d\udcaa \ud83c\udfe4-\u2714 \ud83d\udc6b, &amp; \u2714\ufe0f \ud83d\udcb2 \ud83c\udf75 \ud83d\udd22 (\ud83d\udd22 \ud83d\udd22 <code>q</code>) \ud83e\udd47.</p> <p>\u26ab\ufe0f \ud83d\udeab \ud83e\udd14 ReadyAPI. \u26ab\ufe0f \ud83d\udd1c \ud83d\udd0d \ud83d\udd22 \ud83d\udc6b \ud83d\udcdb, \ud83c\udd8e &amp; \ud83d\udd22 \ud83d\udcc4 (<code>Query</code>, <code>Path</code>, \u2652\ufe0f), \u26ab\ufe0f \ud83d\udeab \ud83d\udc85 \ud83d\udd03 \u2714.</p> <p>, \ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83d\udc46 \ud83d\udd22:</p> Python 3.8+ - non-Annotated <pre><code>from readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(q: str, item_id: int = Path(title=\"The ID of the item to get\")):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from readyapi import Path, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre>"},{"location":"tutorial/path-params-numeric-validations/#_5","title":"\u2714 \ud83d\udd22 \ud83d\udc46 \ud83d\udcaa, \ud83c\udfb1","text":"<p>\ud83d\udea5 \ud83d\udc46 \ud83d\udc9a \ud83d\udce3 <code>q</code> \ud83d\udd22 \ud83d\udd22 \ud83c\udf75 <code>Query</code> \ud83d\udeab \ud83d\ude46 \ud83d\udd22 \ud83d\udcb2, &amp; \u27a1 \ud83d\udd22 <code>item_id</code> \u2699\ufe0f <code>Path</code>, &amp; \u2714\ufe0f \ud83d\udc6b \ud83c\udf8f \u2714, \ud83d\udc0d \u2714\ufe0f \ud83d\udc25 \ud83c\udf81 \u2755 \ud83d\udc48.</p> <p>\ud83d\udeb6\u200d\u2640\ufe0f <code>*</code>, \ud83e\udd47 \ud83d\udd22 \ud83d\udd22.</p> <p>\ud83d\udc0d \ud83c\udfc6 \ud83d\udeab \ud83d\udd73 \u23ee\ufe0f \ud83d\udc48 <code>*</code>, \u270b\ufe0f \u26ab\ufe0f \ud83d\udd1c \ud83d\udcad \ud83d\udc48 \ud83c\udf10 \ud83d\udcc4 \ud83d\udd22 \ud83d\udd1c \ud83e\udd19 \ud83c\udde8\ud83c\uddfb \u274c (\ud83d\udd11-\ud83d\udcb2 \ud83d\udc6b), \ud83d\udcad <code>kwargs</code>. \ud83d\udea5 \ud83d\udc6b \ud83d\udeab \u2714\ufe0f \ud83d\udd22 \ud83d\udcb2.</p> Python 3.8+ - non-Annotated <pre><code>from readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(*, item_id: int = Path(title=\"The ID of the item to get\"), q: str):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from readyapi import Path, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre>"},{"location":"tutorial/path-params-numeric-validations/#_6","title":"\ud83d\udd22 \ud83d\udd2c: \ud83d\udc51 \ud83c\udf18 \u2696\ufe0f \ud83c\udf13","text":"<p>\u23ee\ufe0f <code>Query</code> &amp; <code>Path</code> (&amp; \ud83c\udf8f \ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \u23ea) \ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83d\udd22 \u269b.</p> <p>\ud83d\udce5, \u23ee\ufe0f <code>ge=1</code>, <code>item_id</code> \ud83d\udd1c \ud83d\udcaa \ud83d\udd22 \ud83d\udd22 \"<code>g</code>\ud83c\udd7e \ud83c\udf18 \u2696\ufe0f <code>e</code>\ud83c\udd7e\" <code>1</code>.</p> Python 3.8+ - non-Annotated <pre><code>from readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    *, item_id: int = Path(title=\"The ID of the item to get\", ge=1), q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=1)], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from readyapi import Path, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=1)], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre>"},{"location":"tutorial/path-params-numeric-validations/#_7","title":"\ud83d\udd22 \ud83d\udd2c: \ud83c\udf18 \ud83c\udf18 &amp; \ud83c\udf18 \ud83c\udf18 \u2696\ufe0f \ud83c\udf13","text":"<p>\ud83c\udf8f \u2714:</p> <ul> <li><code>gt</code>: <code>g</code>\ud83c\udd7e <code>t</code>\ud83d\udc72</li> <li><code>le</code>: <code>l</code>\ud83d\udc6d \ud83c\udf18 \u2696\ufe0f <code>e</code>\ud83c\udd7e</li> </ul> Python 3.8+ - non-Annotated <pre><code>from readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", gt=0, le=1000),\n    q: str,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import Path, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", gt=0, le=1000)],\n    q: str,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from readyapi import Path, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", gt=0, le=1000)],\n    q: str,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre>"},{"location":"tutorial/path-params-numeric-validations/#_8","title":"\ud83d\udd22 \ud83d\udd2c: \ud83c\udf88, \ud83c\udf18 \ud83c\udf18 &amp; \ud83c\udf18 \ud83c\udf18","text":"<p>\ud83d\udd22 \ud83d\udd2c \ud83d\udc77 <code>float</code> \ud83d\udcb2.</p> <p>\ud83d\udce5 \ud83c\udf10\u2754 \u26ab\ufe0f \u25b6\ufe0f\ufe0f \u26a0 \ud83d\udcaa \ud83d\udce3 <code>gt</code> &amp; \ud83d\udeab <code>ge</code>. \u23ee\ufe0f \u26ab\ufe0f \ud83d\udc46 \ud83d\udcaa \ud83d\ude9a, \ud83d\uddbc, \ud83d\udc48 \ud83d\udcb2 \ud83d\udd1c \ud83d\udc51 \ud83c\udf18 <code>0</code>, \ud83d\udea5 \u26ab\ufe0f \ud83c\udf18 \ud83c\udf18 <code>1</code>.</p> <p>, <code>0.5</code> \ud83d\udd1c \u2611 \ud83d\udcb2. \u270b\ufe0f <code>0.0</code> \u2696\ufe0f <code>0</code> \ud83d\udd1c \ud83d\udeab.</p> <p>&amp; \ud83c\udf8f <code>lt</code>.</p> Python 3.8+ - non-Annotated <pre><code>from readyapi import Path, Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: str,\n    size: float = Query(gt=0, lt=10.5),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if size:\n        results.update({\"size\": size})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import Path, Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    *,\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str,\n    size: Annotated[float, Query(gt=0, lt=10.5)],\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if size:\n        results.update({\"size\": size})\n    return results\n</code></pre> <pre><code>from readyapi import Path, Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    *,\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str,\n    size: Annotated[float, Query(gt=0, lt=10.5)],\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if size:\n        results.update({\"size\": size})\n    return results\n</code></pre>"},{"location":"tutorial/path-params-numeric-validations/#_9","title":"\ud83c\udf03","text":"<p>\u23ee\ufe0f <code>Query</code>, <code>Path</code> (&amp; \ud83c\udf8f \ud83d\udc46 \ud83d\udeab \ud83d\udc40) \ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83d\uddc3 &amp; \ud83c\udfbb \ud83d\udd2c \ud83c\udf8f \ud83c\udf0c \u23ee\ufe0f \ud83d\udd22 \ud83d\udd22 &amp; \ud83c\udfbb \ud83d\udd2c.</p> <p>&amp; \ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83d\udd22 \ud83d\udd2c:</p> <ul> <li><code>gt</code>: <code>g</code>\ud83c\udd7e <code>t</code>\ud83d\udc72</li> <li><code>ge</code>: <code>g</code>\ud83c\udd7e \ud83c\udf18 \u2696\ufe0f <code>e</code>\ud83c\udd7e</li> <li><code>lt</code>: <code>l</code>\ud83d\udc6d <code>t</code>\ud83d\udc72</li> <li><code>le</code>: <code>l</code>\ud83d\udc6d \ud83c\udf18 \u2696\ufe0f <code>e</code>\ud83c\udd7e</li> </ul> <p>Info</p> <p><code>Query</code>, <code>Path</code>, &amp; \ud83c\udf8f \ud83c\udf93 \ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \u23ea \ud83c\udfff \u26a0 <code>Param</code> \ud83c\udf93.</p> <p>\ud83c\udf10 \ud83d\udc6b \ud83d\udcb0 \ud83c\udf8f \ud83d\udd22 \ud83c\udf16 \ud83d\udd2c &amp; \ud83d\uddc3 \ud83d\udc46 \u2714\ufe0f \ud83d\udc40.</p> <p>\ud83d\udce1 \u2139</p> <p>\ud83d\udd50\u2754 \ud83d\udc46 \ud83d\uddc4 <code>Query</code>, <code>Path</code> &amp; \ud83c\udf8f \u26aa\ufe0f\u27a1\ufe0f <code>readyapi</code>, \ud83d\udc6b \ud83e\udd19 \ud83d\udd22.</p> <p>\ud83d\udc48 \ud83d\udd50\u2754 \ud83e\udd19, \ud83d\udce8 \ud83d\udc50 \ud83c\udf93 \ud83c\udf8f \ud83d\udcdb.</p> <p>, \ud83d\udc46 \ud83d\uddc4 <code>Query</code>, \u2754 \ud83d\udd22. &amp; \ud83d\udd50\u2754 \ud83d\udc46 \ud83e\udd19 \u26ab\ufe0f, \u26ab\ufe0f \ud83d\udce8 \ud83d\udc50 \ud83c\udf93 \ud83c\udf1f <code>Query</code>.</p> <p>\ud83d\udc6b \ud83d\udd22 \ud83d\udce4 (\u21a9\ufe0f \u2699\ufe0f \ud83c\udf93 \ud83d\udd17) \ud83d\udc48 \ud83d\udc46 \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udeab \u2122 \u274c \ud83d\udd03 \ud83d\udc6b \ud83c\udd8e.</p> <p>\ud83d\udc48 \ud83c\udf0c \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83d\udc46 \ud83d\ude10 \ud83d\udc68\u200d\ud83c\udfa8 &amp; \ud83d\udee0\ufe0f \ud83e\uddf0 \ud83c\udf75 \u2714\ufe0f \ud83d\udeae \ud83d\udec3 \ud83d\udcf3 \ud83e\udd37\u200d\u2642 \ud83d\udcda \u274c.</p>"},{"location":"tutorial/path-params/","title":"\u27a1 \ud83d\udd22","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \u27a1 \"\ud83d\udd22\" \u2696\ufe0f \"\ud83d\udd22\" \u23ee\ufe0f \ud83c\udf8f \u2755 \u2699\ufe0f \ud83d\udc0d \ud83d\udcc1 \ud83c\udfbb:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id):\n    return {\"item_id\": item_id}\n</code></pre> <p>\ud83d\udcb2 \u27a1 \ud83d\udd22 <code>item_id</code> \ud83d\udd1c \ud83d\udeb6\u200d\u2640\ufe0f \ud83d\udc46 \ud83d\udd22 \u274c <code>item_id</code>.</p> <p>, \ud83d\udea5 \ud83d\udc46 \ud83c\udfc3 \ud83d\udc49 \ud83d\uddbc &amp; \ud83d\udeb6 http://127.0.0.1:8000/items/foo, \ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \ud83d\udce8:</p> <pre><code>{\"item_id\":\"foo\"}\n</code></pre>"},{"location":"tutorial/path-params/#_2","title":"\u27a1 \ud83d\udd22 \u23ee\ufe0f \ud83c\udd8e","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83c\udd8e \u27a1 \ud83d\udd22 \ud83d\udd22, \u2699\ufe0f \ud83d\udc29 \ud83d\udc0d \ud83c\udd8e \u270d:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int):\n    return {\"item_id\": item_id}\n</code></pre> <p>\ud83d\udc49 \ud83d\udcbc, <code>item_id</code> \ud83d\udce3 <code>int</code>.</p> <p>Check</p> <p>\ud83d\udc49 \ud83d\udd1c \ud83e\udd1d \ud83d\udc46 \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udc15\u200d\ud83e\uddba \ud83d\udd18 \ud83d\udc46 \ud83d\udd22, \u23ee\ufe0f \u274c \u2705, \ud83d\udee0\ufe0f, \u2652\ufe0f.</p>"},{"location":"tutorial/path-params/#_3","title":"\ud83d\udcbd \ud83d\udee0\ufe0f","text":"<p>\ud83d\udea5 \ud83d\udc46 \ud83c\udfc3 \ud83d\udc49 \ud83d\uddbc &amp; \ud83d\udcc2 \ud83d\udc46 \ud83d\udda5 http://127.0.0.1:8000/items/3, \ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \ud83d\udce8:</p> <pre><code>{\"item_id\":3}\n</code></pre> <p>Check</p> <p>\ud83d\udc40 \ud83d\udc48 \ud83d\udcb2 \ud83d\udc46 \ud83d\udd22 \ud83d\udce8 (&amp; \ud83d\udce8) <code>3</code>, \ud83d\udc0d <code>int</code>, \ud83d\udeab \ud83c\udfbb <code>\"3\"</code>.</p> <p>, \u23ee\ufe0f \ud83d\udc48 \ud83c\udd8e \ud83d\udcc4, ReadyAPI \ud83e\udd1d \ud83d\udc46 \ud83c\udfe7 \ud83d\udce8 \"\u270d\".</p>"},{"location":"tutorial/path-params/#_4","title":"\ud83d\udcbd \ud83d\udd2c","text":"<p>\u270b\ufe0f \ud83d\udea5 \ud83d\udc46 \ud83d\udeb6 \ud83d\udda5 http://127.0.0.1:8000/items/foo, \ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \ud83d\udc4c \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \u274c:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"path\",\n                \"item_id\"\n            ],\n            \"msg\": \"value is not a valid integer\",\n            \"type\": \"type_error.integer\"\n        }\n    ]\n}\n</code></pre> <p>\u21a9\ufe0f \u27a1 \ud83d\udd22 <code>item_id</code> \u2714\ufe0f \ud83d\udcb2 <code>\"foo\"</code>, \u2754 \ud83d\udeab <code>int</code>.</p> <p>\ud83c\udf8f \u274c \ud83d\udd1c \ud83d\ude11 \ud83d\udea5 \ud83d\udc46 \ud83d\ude9a <code>float</code> \u21a9\ufe0f <code>int</code>,: http://127.0.0.1:8000/items/4.2</p> <p>Check</p> <p>, \u23ee\ufe0f \ud83c\udf8f \ud83d\udc0d \ud83c\udd8e \ud83d\udcc4, ReadyAPI \ud83e\udd1d \ud83d\udc46 \ud83d\udcbd \ud83d\udd2c.</p> <p>\ud83d\udc40 \ud83d\udc48 \u274c \ud83c\udfaf \ud83c\uddf5\ud83c\uddf8 \u26ab\ufe0f\u2754 \u261d \ud83c\udf10\u2754 \ud83d\udd2c \ud83d\udeab \ud83d\udeb6\u200d\u2640\ufe0f.</p> <p>\ud83d\udc49 \ud83d\ude43 \ud83d\udc4d \u23ea \ud83d\udee0\ufe0f &amp; \ud83d\udee0\ufe0f \ud83d\udcdf \ud83d\udc48 \ud83d\udd17 \u23ee\ufe0f \ud83d\udc46 \ud83d\udee0\ufe0f.</p>"},{"location":"tutorial/path-params/#_5","title":"\ud83e\uddfe","text":"<p>&amp; \ud83d\udd50\u2754 \ud83d\udc46 \ud83d\udcc2 \ud83d\udc46 \ud83d\udda5 http://127.0.0.1:8000/docs, \ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \ud83c\udfe7, \ud83c\udf93, \ud83d\udee0\ufe0f \ud83e\uddfe \ud83d\udc96:</p> <p></p> <p>Check</p> <p>\ud83d\udd04, \u23ee\ufe0f \ud83d\udc48 \ud83c\udf8f \ud83d\udc0d \ud83c\udd8e \ud83d\udcc4, ReadyAPI \ud83e\udd1d \ud83d\udc46 \ud83c\udfe7, \ud83c\udf93 \ud83e\uddfe (\ud83d\udee0\ufe0f \ud83e\udd81 \ud83c\udf9a).</p> <p>\ud83d\udc40 \ud83d\udc48 \u27a1 \ud83d\udd22 \ud83d\udce3 \ud83d\udd22.</p>"},{"location":"tutorial/path-params/#-","title":"\ud83d\udc29-\u2693\ufe0f \ud83d\udcb0, \ud83c\udf9b \ud83e\uddfe","text":"<p>&amp; \u21a9\ufe0f \ud83c\udfd7 \ud83d\udd17 \u26aa\ufe0f\u27a1\ufe0f \ud83d\uddc4 \ud83d\udc29, \ud83d\udce4 \ud83d\udcda \ud83d\udd17 \ud83e\uddf0.</p> <p>\u21a9\ufe0f \ud83d\udc49, ReadyAPI \u26ab\ufe0f \ud83d\ude9a \ud83c\udf9b \ud83d\udee0\ufe0f \ud83e\uddfe (\u2699\ufe0f \ud83d\udcc4), \u2754 \ud83d\udc46 \ud83d\udcaa \ud83d\udd10 http://127.0.0.1:8000/redoc:</p> <p></p> <p>\ud83c\udf8f \ud83c\udf0c, \ud83d\udce4 \ud83d\udcda \ud83d\udd17 \ud83e\uddf0. \u2705 \ud83d\udcdf \u26a1 \ud83e\uddf0 \ud83d\udcda \ud83c\uddea\ud83c\uddf8.</p>"},{"location":"tutorial/path-params/#pydantic","title":"Pydantic","text":"<p>\ud83c\udf10 \ud83d\udcbd \ud83d\udd2c \ud83c\udfad \ud83d\udd3d \ud83d\ude98 Pydantic, \ud83d\udc46 \ud83e\udd1a \ud83c\udf10 \ud83d\udcb0 \u26aa\ufe0f\u27a1\ufe0f \u26ab\ufe0f. &amp; \ud83d\udc46 \ud83d\udcad \ud83d\udc46 \ud83d\udc4d \u270b.</p> <p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83c\udf8f \ud83c\udd8e \ud83d\udcc4 \u23ee\ufe0f <code>str</code>, <code>float</code>, <code>bool</code> &amp; \ud83d\udcda \ud83c\udf8f \ud83c\udfd7 \ud83d\udcca \ud83c\udd8e.</p> <p>\ud83d\udcda \ud83d\udc6b \ud83d\udd2c \u23ed \ud83d\udcc3 \ud83d\udd30.</p>"},{"location":"tutorial/path-params/#_6","title":"\u2714 \ud83e\udd14","text":"<p>\ud83d\udd50\u2754 \ud83c\udfd7 \u27a1 \ud83d\udee0\ufe0f, \ud83d\udc46 \ud83d\udcaa \ud83d\udd0e \u26a0 \ud83c\udf10\u2754 \ud83d\udc46 \u2714\ufe0f \ud83d\udd27 \u27a1.</p> <p>\ud83d\udc96 <code>/users/me</code>, \u27a1\ufe0f \ud83d\udcac \ud83d\udc48 \u26ab\ufe0f \ud83e\udd1a \ud83d\udcca \ud83d\udd03 \u23ee\ufe0f \ud83d\udc69\u200d\ud83d\udcbb.</p> <p>&amp; \u2934\ufe0f \ud83d\udc46 \ud83d\udcaa \u2714\ufe0f \u27a1 <code>/users/{user_id}</code> \ud83e\udd1a \ud83d\udcbd \ud83d\udd03 \ud83c\udfaf \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udc69\u200d\ud83d\udcbb \ud83c\udd94.</p> <p>\u21a9\ufe0f \u27a1 \ud83d\udee0\ufe0f \ud83d\udd2c \u2714, \ud83d\udc46 \ud83d\udcaa \u2692 \ud83d\udcad \ud83d\udc48 \u27a1 <code>/users/me</code> \ud83d\udce3 \u23ed 1\ufe0f\u20e3 <code>/users/{user_id}</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/users/me\")\nasync def read_user_me():\n    return {\"user_id\": \"the current user\"}\n\n\n@app.get(\"/users/{user_id}\")\nasync def read_user(user_id: str):\n    return {\"user_id\": user_id}\n</code></pre> <p>\u23ea, \u27a1 <code>/users/{user_id}</code> \ud83d\udd1c \ud83c\udfcf <code>/users/me</code>, \"\ud83d\udcad\" \ud83d\udc48 \u26ab\ufe0f \ud83d\udce8 \ud83d\udd22 <code>user_id</code> \u23ee\ufe0f \ud83d\udcb2 <code>\"me\"</code>.</p> <p>\u27a1, \ud83d\udc46 \ud83d\udeab\ud83d\udd1c \u2194 \u27a1 \ud83d\udee0\ufe0f:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/users\")\nasync def read_users():\n    return [\"Rick\", \"Morty\"]\n\n\n@app.get(\"/users\")\nasync def read_users2():\n    return [\"Bean\", \"Elfo\"]\n</code></pre> <p>\ud83e\udd47 \ud83d\udd50 \ud83d\udd1c \ud83d\udd67 \u2699\ufe0f \u21a9\ufe0f \u27a1 \ud83c\udfcf \ud83e\udd47.</p>"},{"location":"tutorial/path-params/#_7","title":"\ud83d\udd01 \ud83d\udcb2","text":"<p>\ud83d\udea5 \ud83d\udc46 \u2714\ufe0f \u27a1 \ud83d\udee0\ufe0f \ud83d\udc48 \ud83d\udce8 \u27a1 \ud83d\udd22, \u270b\ufe0f \ud83d\udc46 \ud83d\udc9a \ud83d\udcaa \u2611 \u27a1 \ud83d\udd22 \ud83d\udcb2 \ud83d\udd01, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83d\udc29 \ud83d\udc0d <code>Enum</code>.</p>"},{"location":"tutorial/path-params/#enum","title":"\u270d <code>Enum</code> \ud83c\udf93","text":"<p>\ud83d\uddc4 <code>Enum</code> &amp; \u270d \ud83c\udfa7-\ud83c\udf93 \ud83d\udc48 \ud83d\ude16 \u26aa\ufe0f\u27a1\ufe0f <code>str</code> &amp; \u26aa\ufe0f\u27a1\ufe0f <code>Enum</code>.</p> <p>\ud83d\ude16 \u26aa\ufe0f\u27a1\ufe0f <code>str</code> \ud83d\udee0\ufe0f \ud83e\ude7a \ud83d\udd1c \ud83d\udcaa \ud83d\udcad \ud83d\udc48 \ud83d\udcb2 \ud83d\udd1c \ud83c\udd8e <code>string</code> &amp; \ud83d\udd1c \ud83d\udcaa \u270d \u2611.</p> <p>\u2934\ufe0f \u270d \ud83c\udf93 \ud83d\udd22 \u23ee\ufe0f \ud83d\udd27 \ud83d\udcb2, \u2754 \ud83d\udd1c \ud83d\udcaa \u2611 \ud83d\udcb2:</p> Python 3.8+ <pre><code>from enum import Enum\n\nfrom readyapi import ReadyAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = ReadyAPI()\n\n\n@app.get(\"/models/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}\n</code></pre> <p>Info</p> <p>\ud83d\udd22 (\u2696\ufe0f \ud83d\udd22) \ud83d\udcaa \ud83d\udc0d \u21a9\ufe0f \u23ec 3\ufe0f\u20e3.4\ufe0f\u20e3.</p> <p>Tip</p> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udcad, \"\ud83d\udcca\", \"\ud83c\udf93\", &amp; \"\ud83c\udf4f\" \ud83d\udcdb \ud83c\udfb0 \ud83c\udfeb \ud83c\udff7.</p>"},{"location":"tutorial/path-params/#_8","title":"\ud83d\udce3 \u27a1 \ud83d\udd22","text":"<p>\u2934\ufe0f \u270d \u27a1 \ud83d\udd22 \u23ee\ufe0f \ud83c\udd8e \u270d \u2699\ufe0f \ud83d\udd22 \ud83c\udf93 \ud83d\udc46 \u270d (<code>ModelName</code>):</p> Python 3.8+ <pre><code>from enum import Enum\n\nfrom readyapi import ReadyAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = ReadyAPI()\n\n\n@app.get(\"/models/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}\n</code></pre>"},{"location":"tutorial/path-params/#_9","title":"\u2705 \ud83e\ude7a","text":"<p>\u21a9\ufe0f \ud83d\udcaa \ud83d\udcb2 \u27a1 \ud83d\udd22 \ud83d\udd22, \ud83c\udf93 \ud83e\ude7a \ud83d\udcaa \ud83c\udfa6 \ud83d\udc6b \ud83c\udf86:</p> <p></p>"},{"location":"tutorial/path-params/#_10","title":"\ud83d\udc77 \u23ee\ufe0f \ud83d\udc0d \ud83d\udd22","text":"<p>\ud83d\udcb2 \u27a1 \ud83d\udd22 \ud83d\udd1c \ud83d\udd22 \ud83d\udc68\u200d\ud83c\udf93.</p>"},{"location":"tutorial/path-params/#_11","title":"\ud83d\udd2c \ud83d\udd22 \ud83d\udc68\u200d\ud83c\udf93","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udd2c \u26ab\ufe0f \u23ee\ufe0f \ud83d\udd22 \ud83d\udc68\u200d\ud83c\udf93 \ud83d\udc46 \u270d \ud83d\udd22 <code>ModelName</code>:</p> Python 3.8+ <pre><code>from enum import Enum\n\nfrom readyapi import ReadyAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = ReadyAPI()\n\n\n@app.get(\"/models/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}\n</code></pre>"},{"location":"tutorial/path-params/#_12","title":"\ud83e\udd1a \ud83d\udd22 \ud83d\udcb2","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83e\udd1a \u2611 \ud83d\udcb2 ( <code>str</code> \ud83d\udc49 \ud83d\udcbc) \u2699\ufe0f <code>model_name.value</code>, \u2696\ufe0f \ud83c\udfe2, <code>your_enum_member.value</code>:</p> Python 3.8+ <pre><code>from enum import Enum\n\nfrom readyapi import ReadyAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = ReadyAPI()\n\n\n@app.get(\"/models/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}\n</code></pre> <p>Tip</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udd10 \ud83d\udcb2 <code>\"lenet\"</code> \u23ee\ufe0f <code>ModelName.lenet.value</code>.</p>"},{"location":"tutorial/path-params/#_13","title":"\ud83d\udce8 \ud83d\udd22 \ud83d\udc68\u200d\ud83c\udf93","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udce8 \ud83d\udd22 \ud83d\udc68\u200d\ud83c\udf93 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f, \ud83d\udc26 \ud83c\udfbb \ud83d\udcaa (\u2705 <code>dict</code>).</p> <p>\ud83d\udc6b \ud83d\udd1c \ud83d\udddc \ud83d\udc6b \ud83d\udd17 \ud83d\udcb2 (\ud83c\udfbb \ud83d\udc49 \ud83d\udcbc) \u23ed \ud83d\udeec \ud83d\udc6b \ud83d\udc69\u200d\ud83d\udcbb:</p> Python 3.8+ <pre><code>from enum import Enum\n\nfrom readyapi import ReadyAPI\n\n\nclass ModelName(str, Enum):\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\"\n\n\napp = ReadyAPI()\n\n\n@app.get(\"/models/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}\n</code></pre> <p>\ud83d\udc46 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udc46 \ud83d\udd1c \ud83e\udd1a \ud83c\udfbb \ud83d\udce8 \ud83d\udc96:</p> <pre><code>{\n  \"model_name\": \"alexnet\",\n  \"message\": \"Deep Learning FTW!\"\n}\n</code></pre>"},{"location":"tutorial/path-params/#_14","title":"\u27a1 \ud83d\udd22 \u2697 \u27a1","text":"<p>\u27a1\ufe0f \ud83d\udcac \ud83d\udc46 \u2714\ufe0f \u27a1 \ud83d\udee0\ufe0f \u23ee\ufe0f \u27a1 <code>/files/{file_path}</code>.</p> <p>\u270b\ufe0f \ud83d\udc46 \ud83d\udcaa <code>file_path</code> \u26ab\ufe0f \ud83d\udd0c \u27a1, \ud83d\udc96 <code>home/johndoe/myfile.txt</code>.</p> <p>, \ud83d\udcdb \ud83d\udc48 \ud83d\udcc1 \ud83d\udd1c \ud83d\udd73 \ud83d\udc96: <code>/files/home/johndoe/myfile.txt</code>.</p>"},{"location":"tutorial/path-params/#_15","title":"\ud83d\uddc4 \ud83d\udc15\u200d\ud83e\uddba","text":"<p>\ud83d\uddc4 \ud83d\udeab \ud83d\udc15\u200d\ud83e\uddba \ud83c\udf0c \ud83d\udce3 \u27a1 \ud83d\udd22 \ud83d\udd0c \u27a1 \ud83d\udd18, \ud83d\udc48 \ud83d\udcaa \u2198\ufe0f \ud83d\ude10 \ud83d\udc48 \u26a0 \ud83d\udcaf &amp; \ud83d\udd2c.</p> <p>\ud83d\udc50, \ud83d\udc46 \ud83d\udcaa \u26ab\ufe0f ReadyAPI, \u2699\ufe0f 1\ufe0f\u20e3 \ud83d\udd17 \ud83e\uddf0 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc83.</p> <p>&amp; \ud83e\ude7a \ud83d\udd1c \ud83d\udc77, \ud83d\udc50 \ud83d\udeab \u274e \ud83d\ude46 \ud83e\uddfe \ud83d\udcac \ud83d\udc48 \ud83d\udd22 \ud83d\udd1c \ud83d\udd0c \u27a1.</p>"},{"location":"tutorial/path-params/#_16","title":"\u27a1 \ud83d\udd0c","text":"<p>\u2699\ufe0f \ud83c\udf9b \ud83d\udd17 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc83 \ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \u27a1 \ud83d\udd22 \u2697 \u27a1 \u2699\ufe0f \ud83d\udcdb \ud83d\udc96:</p> <pre><code>/files/{file_path:path}\n</code></pre> <p>\ud83d\udc49 \ud83d\udcbc, \ud83d\udcdb \ud83d\udd22 <code>file_path</code>, &amp; \ud83c\udfc1 \ud83c\udf55, <code>:path</code>, \ud83d\udcac \u26ab\ufe0f \ud83d\udc48 \ud83d\udd22 \ud83d\udd1c \ud83c\udfcf \ud83d\ude46 \u27a1.</p> <p>, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \u26ab\ufe0f \u23ee\ufe0f:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/files/{file_path:path}\")\nasync def read_file(file_path: str):\n    return {\"file_path\": file_path}\n</code></pre> <p>Tip</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udcaa \ud83d\udd22 \ud83d\udd0c <code>/home/johndoe/myfile.txt</code>, \u23ee\ufe0f \ud83c\udfc1 \ud83d\udd2a (<code>/</code>).</p> <p>\ud83d\udc48 \ud83d\udcbc, \ud83d\udcdb \ud83d\udd1c: <code>/files//home/johndoe/myfile.txt</code>, \u23ee\ufe0f 2\ufe0f\u20e3\u2716\ufe0f \ud83d\udd2a (<code>//</code>) \ud83d\udd96 <code>files</code> &amp; <code>home</code>.</p>"},{"location":"tutorial/path-params/#_17","title":"\ud83c\udf03","text":"<p>\u23ee\ufe0f ReadyAPI, \u2699\ufe0f \ud83d\udccf, \ud83c\udfcb\ufe0f &amp; \ud83d\udc29 \ud83d\udc0d \ud83c\udd8e \ud83d\udcc4, \ud83d\udc46 \ud83e\udd1a:</p> <ul> <li>\ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udc15\u200d\ud83e\uddba: \u274c \u2705, \u270d, \u2652\ufe0f.</li> <li>\ud83d\udcbd \"\u270d\"</li> <li>\ud83d\udcbd \ud83d\udd2c</li> <li>\ud83d\udee0\ufe0f \u270d &amp; \ud83c\udfe7 \ud83e\uddfe</li> </ul> <p>&amp; \ud83d\udc46 \ud83d\udd74 \u2714\ufe0f \ud83d\udce3 \ud83d\udc6b \ud83d\udd50.</p> <p>\ud83d\udc48 \ud83c\udfb2 \ud83d\udc51 \u2b50 \ud83d\udcc8 ReadyAPI \ud83d\udd2c \ud83c\udf9b \ud83d\udee0\ufe0f (\u2196\ufe0f \u26aa\ufe0f\u27a1\ufe0f \ud83c\udf63 \ud83c\udfad).</p>"},{"location":"tutorial/query-params-str-validations/","title":"\ud83d\udd22 \ud83d\udd22 &amp; \ud83c\udfbb \ud83d\udd2c","text":"<p>ReadyAPI \u2714 \ud83d\udc46 \ud83d\udce3 \ud83c\udf16 \u2139 &amp; \ud83d\udd2c \ud83d\udc46 \ud83d\udd22.</p> <p>\u27a1\ufe0f \u270a \ud83d\udc49 \ud83c\ude38 \ud83d\uddbc:</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Union[str, None] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: str | None = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>\ud83d\udd22 \ud83d\udd22 <code>q</code> \ud83c\udd8e <code>Union[str, None]</code> (\u2696\ufe0f <code>str | None</code> \ud83d\udc0d 3\ufe0f\u20e3.1\ufe0f\u20e30\ufe0f\u20e3), \ud83d\udc48 \u26d3 \ud83d\udc48 \u26ab\ufe0f \ud83c\udd8e <code>str</code> \u270b\ufe0f \ud83d\udcaa <code>None</code>, &amp; \ud83d\udc50, \ud83d\udd22 \ud83d\udcb2 <code>None</code>, ReadyAPI \ud83d\udd1c \ud83d\udcad \u26ab\ufe0f \ud83d\udeab \u2714.</p> <p>Note</p> <p>ReadyAPI \ud83d\udd1c \ud83d\udcad \ud83d\udc48 \ud83d\udcb2 <code>q</code> \ud83d\udeab \u2714 \u21a9\ufe0f \ud83d\udd22 \ud83d\udcb2 <code>= None</code>.</p> <p><code>Union</code> <code>Union[str, None]</code> \ud83d\udd1c \u2714 \ud83d\udc46 \ud83d\udc68\u200d\ud83c\udfa8 \ud83e\udd1d \ud83d\udc46 \ud83d\udc4d \ud83d\udc15\u200d\ud83e\uddba &amp; \ud83d\udd0d \u274c.</p>"},{"location":"tutorial/query-params-str-validations/#_2","title":"\ud83c\udf16 \ud83d\udd2c","text":"<p>\ud83d\udc65 \ud83d\udd1c \ud83d\udee0\ufe0f \ud83d\udc48 \u270b\ufe0f <code>q</code> \ud83d\udce6, \ud83d\udd50\u2754 \u26ab\ufe0f \ud83d\ude9a, \ud83d\udeae \ud83d\udcd0 \ud83d\udeab \ud83d\udcc9 5\ufe0f\u20e30\ufe0f\u20e3 \ud83e\uddb9.</p>"},{"location":"tutorial/query-params-str-validations/#query","title":"\ud83d\uddc4 <code>Query</code>","text":"<p>\ud83c\udfc6 \ud83d\udc48, \ud83e\udd47 \ud83d\uddc4 <code>Query</code> \u26aa\ufe0f\u27a1\ufe0f <code>readyapi</code>:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Union[str, None] = Query(default=None, max_length=50)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str | None, Query(max_length=50)] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[Union[str, None], Query(max_length=50)] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: str | None = Query(default=None, max_length=50)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre>"},{"location":"tutorial/query-params-str-validations/#query_1","title":"\u2699\ufe0f <code>Query</code> \ud83d\udd22 \ud83d\udcb2","text":"<p>&amp; \ud83d\udd1c \u2699\ufe0f \u26ab\ufe0f \ud83d\udd22 \ud83d\udcb2 \ud83d\udc46 \ud83d\udd22, \u2692 \ud83d\udd22 <code>max_length</code> 5\ufe0f\u20e30\ufe0f\u20e3:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Union[str, None] = Query(default=None, max_length=50)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str | None, Query(max_length=50)] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[Union[str, None], Query(max_length=50)] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: str | None = Query(default=None, max_length=50)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>\ud83d\udc65 \u2714\ufe0f \u274e \ud83d\udd22 \ud83d\udcb2 <code>None</code> \ud83d\udd22 \u23ee\ufe0f <code>Query()</code>, \ud83d\udc65 \ud83d\udcaa \ud83d\udd1c \u2692 \ud83d\udd22 \ud83d\udcb2 \u23ee\ufe0f \ud83d\udd22 <code>Query(default=None)</code>, \u26ab\ufe0f \ud83c\udf66 \ud83c\udf8f \ud83c\udfaf \u2696 \ud83d\udc48 \ud83d\udd22 \ud83d\udcb2.</p> <p>:</p> <pre><code>q: Union[str, None] = Query(default=None)\n</code></pre> <p>...\u2692 \ud83d\udd22 \ud83d\udce6, \ud83c\udf8f:</p> <pre><code>q: Union[str, None] = None\n</code></pre> <p>&amp; \ud83d\udc0d 3\ufe0f\u20e3.1\ufe0f\u20e30\ufe0f\u20e3 &amp; \ud83d\udd1b:</p> <pre><code>q: str | None = Query(default=None)\n</code></pre> <p>...\u2692 \ud83d\udd22 \ud83d\udce6, \ud83c\udf8f:</p> <pre><code>q: str | None = None\n</code></pre> <p>\u270b\ufe0f \u26ab\ufe0f \ud83d\udce3 \u26ab\ufe0f \ud83c\udfaf \ud83d\udc86\u200d\u2642 \ud83d\udd22 \ud83d\udd22.</p> <p>Info</p> <p>\u2714\ufe0f \ud83e\udd2f \ud83d\udc48 \ud83c\udf05 \u26a0 \ud83c\udf55 \u2692 \ud83d\udd22 \ud83d\udce6 \ud83c\udf55:</p> <pre><code>= None\n</code></pre> <p>\u2696\ufe0f:</p> <pre><code>= Query(default=None)\n</code></pre> <p>\u26ab\ufe0f \ud83d\udd1c \u2699\ufe0f \ud83d\udc48 <code>None</code> \ud83d\udd22 \ud83d\udcb2, &amp; \ud83d\udc48 \ud83c\udf0c \u2692 \ud83d\udd22 \ud83d\udeab \u2714.</p> <p><code>Union[str, None]</code> \ud83c\udf55 \u2714 \ud83d\udc46 \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\ude9a \ud83d\udc7b \ud83d\udc15\u200d\ud83e\uddba, \u270b\ufe0f \u26ab\ufe0f \ud83d\udeab \u26ab\ufe0f\u2754 \ud83d\udcac ReadyAPI \ud83d\udc48 \ud83d\udc49 \ud83d\udd22 \ud83d\udeab \u2714.</p> <p>\u2934\ufe0f, \ud83d\udc65 \ud83d\udcaa \ud83d\udeb6\u200d\u2640\ufe0f \ud83c\udf05 \ud83d\udd22 <code>Query</code>. \ud83d\udc49 \ud83d\udcbc, <code>max_length</code> \ud83d\udd22 \ud83d\udc48 \u2714 \ud83c\udfbb:</p> <pre><code>q: Union[str, None] = Query(default=None, max_length=50)\n</code></pre> <p>\ud83d\udc49 \ud83d\udd1c \u2714 \ud83d\udcca, \ud83c\udfa6 \ud83c\udd91 \u274c \ud83d\udd50\u2754 \ud83d\udcca \ud83d\udeab \u2611, &amp; \ud83d\udcc4 \ud83d\udd22 \ud83d\uddc4 \ud83d\udd17 \u27a1 \ud83d\udee0\ufe0f.</p>"},{"location":"tutorial/query-params-str-validations/#_3","title":"\ud83d\udeae \ud83c\udf05 \ud83d\udd2c","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udeae \ud83d\udd22 <code>min_length</code>:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Union[str, None] = Query(default=None, min_length=3, max_length=50),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[str | None, Query(min_length=3, max_length=50)] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[Union[str, None], Query(min_length=3, max_length=50)] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[Union[str, None], Query(min_length=3, max_length=50)] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: str | None = Query(default=None, min_length=3, max_length=50)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre>"},{"location":"tutorial/query-params-str-validations/#_4","title":"\ud83d\udeae \ud83e\udd54 \ud83e\uddec","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udd2c \ud83e\udd54 \ud83e\uddec \ud83d\udc48 \ud83d\udd22 \ud83d\udd1c \ud83c\udfcf:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Union[str, None] = Query(\n        default=None, min_length=3, max_length=50, pattern=\"^fixedquery$\"\n    ),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        str | None, Query(min_length=3, max_length=50, pattern=\"^fixedquery$\")\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        Union[str, None], Query(min_length=3, max_length=50, pattern=\"^fixedquery$\")\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        Union[str, None], Query(min_length=3, max_length=50, pattern=\"^fixedquery$\")\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: str | None = Query(\n        default=None, min_length=3, max_length=50, pattern=\"^fixedquery$\"\n    ),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>\ud83d\udc49 \ud83c\udfaf \ud83e\udd54 \ud83e\uddec \u2705 \ud83d\udc48 \ud83d\udce8 \ud83d\udd22 \ud83d\udcb2:</p> <ul> <li><code>^</code>: \u25b6\ufe0f \u23ee\ufe0f \ud83d\udcc4 \ud83e\uddb9, \ud83d\udeab \u2714\ufe0f \ud83e\uddb9 \u23ed.</li> <li><code>fixedquery</code>: \u2714\ufe0f \u2611 \ud83d\udcb2 <code>fixedquery</code>.</li> <li><code>$</code>: \ud83d\udd1a \ud83d\udce4, \ud83d\udeab \u2714\ufe0f \ud83d\ude46 \ud83c\udf16 \ud83e\uddb9 \u23ee\ufe0f <code>fixedquery</code>.</li> </ul> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udcad \ud83d\udcb8 \u23ee\ufe0f \ud83c\udf10 \ud83d\udc49 \"\ud83e\udd54 \ud83e\uddec\" \ud83d\udcad, \ud83d\udeab \ud83d\ude1f. \ud83d\udc6b \ud83c\udfcb\ufe0f \u2754 \ud83d\udcda \ud83d\udc6b\ud83d\udc6b. \ud83d\udc46 \ud83d\udcaa \ud83d\udcda \ud83d\udca9 \ud83c\udf75 \ud83d\udc86\u200d\u2642 \ud83e\udd54 \ud83e\uddec.</p> <p>\u270b\ufe0f \ud83d\udd50\u2754 \ud83d\udc46 \ud83d\udcaa \ud83d\udc6b &amp; \ud83d\udeb6 &amp; \ud83d\udca1 \ud83d\udc6b, \ud83d\udcad \ud83d\udc48 \ud83d\udc46 \ud83d\udcaa \u23ea \u2699\ufe0f \ud83d\udc6b \ud83d\udd17 ReadyAPI.</p>"},{"location":"tutorial/query-params-str-validations/#_5","title":"\ud83d\udd22 \ud83d\udcb2","text":"<p>\ud83c\udf8f \ud83c\udf0c \ud83d\udc48 \ud83d\udc46 \ud83d\udcaa \ud83d\udeb6\u200d\u2640\ufe0f <code>None</code> \ud83d\udcb2 <code>default</code> \ud83d\udd22, \ud83d\udc46 \ud83d\udcaa \ud83d\udeb6\u200d\u2640\ufe0f \ud83c\udf8f \ud83d\udcb2.</p> <p>\u27a1\ufe0f \ud83d\udcac \ud83d\udc48 \ud83d\udc46 \ud83d\udc9a \ud83d\udce3 <code>q</code> \ud83d\udd22 \ud83d\udd22 \u2714\ufe0f <code>min_length</code> <code>3</code>, &amp; \u2714\ufe0f \ud83d\udd22 \ud83d\udcb2 <code>\"fixedquery\"</code>:</p> Python 3.8+ - non-Annotated <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: str = Query(default=\"fixedquery\", min_length=3)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str, Query(min_length=3)] = \"fixedquery\"):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str, Query(min_length=3)] = \"fixedquery\"):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Note</p> <p>\u2714\ufe0f \ud83d\udd22 \ud83d\udcb2 \u2692 \ud83d\udd22 \ud83d\udce6.</p>"},{"location":"tutorial/query-params-str-validations/#_6","title":"\u2692 \u26ab\ufe0f \u2714","text":"<p>\ud83d\udd50\u2754 \ud83d\udc65 \ud83d\udeab \ud83d\udcaa \ud83d\udce3 \ud83c\udf05 \ud83d\udd2c \u2696\ufe0f \ud83d\uddc3, \ud83d\udc65 \ud83d\udcaa \u2692 <code>q</code> \ud83d\udd22 \ud83d\udd22 \u2714 \ud83d\udeab \ud83d\udce3 \ud83d\udd22 \ud83d\udcb2, \ud83d\udc96:</p> <pre><code>q: str\n</code></pre> <p>\u21a9\ufe0f:</p> <pre><code>q: Union[str, None] = None\n</code></pre> <p>\u270b\ufe0f \ud83d\udc65 \ud83d\udd1c \ud83d\udce3 \u26ab\ufe0f \u23ee\ufe0f <code>Query</code>, \ud83d\uddbc \ud83d\udc96:</p> <pre><code>q: Union[str, None] = Query(default=None, min_length=3)\n</code></pre> <p>, \ud83d\udd50\u2754 \ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83d\udcb2 \u2714 \u23ea \u2699\ufe0f <code>Query</code>, \ud83d\udc46 \ud83d\udcaa \ud83c\udfaf \ud83d\udeab \ud83d\udce3 \ud83d\udd22 \ud83d\udcb2:</p> Python 3.8+ - non-Annotated <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: str = Query(min_length=3)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str, Query(min_length=3)]):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str, Query(min_length=3)]):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre>"},{"location":"tutorial/query-params-str-validations/#none","title":"\u2714 \u23ee\ufe0f <code>None</code>","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83d\udc48 \ud83d\udd22 \ud83d\udcaa \ud83d\udeab <code>None</code>, \u270b\ufe0f \ud83d\udc48 \u26ab\ufe0f \u2714. \ud83d\udc49 \ud83d\udd1c \u26a1 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udce8 \ud83d\udcb2, \ud83d\udea5 \ud83d\udcb2 <code>None</code>.</p> <p>\ud83d\udc48, \ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83d\udc48 <code>None</code> \u2611 \ud83c\udd8e \u270b\ufe0f \u2699\ufe0f <code>default=...</code>:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Union[str, None] = Query(min_length=3)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str | None, Query(min_length=3)]):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[Union[str, None], Query(min_length=3)]):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[Union[str, None], Query(min_length=3)]):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: str | None = Query(min_length=3)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Pydantic, \u2754 \u26ab\ufe0f\u2754 \ud83c\udfcb\ufe0f \ud83c\udf10 \ud83d\udcbd \ud83d\udd2c &amp; \ud83d\udee0\ufe0f ReadyAPI, \u2714\ufe0f \ud83c\udf81 \ud83c\udfad \ud83d\udd50\u2754 \ud83d\udc46 \u2699\ufe0f <code>Optional</code> \u2696\ufe0f <code>Union[Something, None]</code> \ud83c\udf75 \ud83d\udd22 \ud83d\udcb2, \ud83d\udc46 \ud83d\udcaa \u270d \ud83c\udf05 \ud83d\udd03 \u26ab\ufe0f Pydantic \ud83e\ude7a \ud83d\udd03 \u2714 \ud83d\udce6 \ud83c\udfd1.</p>"},{"location":"tutorial/query-params-str-validations/#_7","title":"\ud83d\udd22 \ud83d\udd22 \ud83d\udcc7 / \ud83d\udc97 \ud83d\udcb2","text":"<p>\ud83d\udd50\u2754 \ud83d\udc46 \ud83d\udd2c \ud83d\udd22 \ud83d\udd22 \ud83c\udfaf \u23ee\ufe0f <code>Query</code> \ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \u26ab\ufe0f \ud83d\udce8 \ud83d\udcc7 \ud83d\udcb2, \u2696\ufe0f \ud83d\ude46\u200d\u2640 \ud83c\udf8f \ud83c\udf0c, \ud83d\udce8 \ud83d\udc97 \ud83d\udcb2.</p> <p>\ud83d\uddbc, \ud83d\udce3 \ud83d\udd22 \ud83d\udd22 <code>q</code> \ud83d\udc48 \ud83d\udcaa \ud83d\ude11 \ud83d\udc97 \ud83d\udd70 \ud83d\udcdb, \ud83d\udc46 \ud83d\udcaa \u270d:</p> Python 3.8+ - non-Annotated <pre><code>from typing import List, Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Union[List[str], None] = Query(default=None)):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[list[str] | None, Query()] = None):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[Union[list[str], None], Query()] = None):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[Union[List[str], None], Query()] = None):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: list[str] | None = Query(default=None)):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Union[list[str], None] = Query(default=None)):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> <p>\u2934\ufe0f, \u23ee\ufe0f \ud83d\udcdb \ud83d\udc96:</p> <pre><code>http://localhost:8000/items/?q=foo&amp;q=bar\n</code></pre> <p>\ud83d\udc46 \ud83d\udd1c \ud83d\udce8 \ud83d\udc97 <code>q</code> \ud83d\udd22 \ud83d\udd22' \ud83d\udcb2 (<code>foo</code> &amp; <code>bar</code>) \ud83d\udc0d <code>list</code> \ud83d\udd18 \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22, \ud83d\udd22 \ud83d\udd22 <code>q</code>.</p> <p>, \ud83d\udce8 \ud83d\udc48 \ud83d\udcdb \ud83d\udd1c:</p> <pre><code>{\n  \"q\": [\n    \"foo\",\n    \"bar\"\n  ]\n}\n</code></pre> <p>Tip</p> <p>\ud83d\udce3 \ud83d\udd22 \ud83d\udd22 \u23ee\ufe0f \ud83c\udd8e <code>list</code>, \ud83d\udc96 \ud83d\uddbc \ud83d\udd1b, \ud83d\udc46 \ud83d\udcaa \ud83c\udfaf \u2699\ufe0f <code>Query</code>, \u23ea \u26ab\ufe0f \ud83d\udd1c \ud83d\udd2c \ud83d\udce8 \ud83d\udcaa.</p> <p>\ud83c\udf93 \ud83d\udee0\ufe0f \ud83e\ude7a \ud83d\udd1c \u2139 \u27a1\ufe0f, \u2714 \ud83d\udc97 \ud83d\udcb2:</p> <p></p>"},{"location":"tutorial/query-params-str-validations/#_8","title":"\ud83d\udd22 \ud83d\udd22 \ud83d\udcc7 / \ud83d\udc97 \ud83d\udcb2 \u23ee\ufe0f \ud83d\udd22","text":"<p>&amp; \ud83d\udc46 \ud83d\udcaa \ud83d\udd2c \ud83d\udd22 <code>list</code> \ud83d\udcb2 \ud83d\udea5 \ud83d\udc4c \ud83d\ude9a:</p> Python 3.8+ - non-Annotated <pre><code>from typing import List\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: List[str] = Query(default=[\"foo\", \"bar\"])):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.9+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[list[str], Query()] = [\"foo\", \"bar\"]):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> <pre><code>from typing import List\n\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[List[str], Query()] = [\"foo\", \"bar\"]):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: list[str] = Query(default=[\"foo\", \"bar\"])):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udeb6:</p> <pre><code>http://localhost:8000/items/\n</code></pre> <p>\ud83d\udd22 <code>q</code> \ud83d\udd1c: <code>[\"foo\", \"bar\"]</code> &amp; \ud83d\udc46 \ud83d\udce8 \ud83d\udd1c:</p> <pre><code>{\n  \"q\": [\n    \"foo\",\n    \"bar\"\n  ]\n}\n</code></pre>"},{"location":"tutorial/query-params-str-validations/#list","title":"\u2699\ufe0f <code>list</code>","text":"<p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>list</code> \ud83d\udd17 \u21a9\ufe0f <code>List[str]</code> (\u2696\ufe0f <code>list[str]</code> \ud83d\udc0d 3\ufe0f\u20e3.9\ufe0f\u20e3 \u2795):</p> Python 3.8+ - non-Annotated <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: list = Query(default=[])):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[list, Query()] = []):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> <pre><code>from readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[list, Query()] = []):\n    query_items = {\"q\": q}\n    return query_items\n</code></pre> <p>Note</p> <p>\u2714\ufe0f \ud83e\udd2f \ud83d\udc48 \ud83d\udc49 \ud83d\udcbc, ReadyAPI \ud83c\udfc6 \ud83d\udeab \u2705 \ud83c\udf9a \ud83d\udcc7.</p> <p>\ud83d\uddbc, <code>List[int]</code> \ud83d\udd1c \u2705 (&amp; \ud83d\udcc4) \ud83d\udc48 \ud83c\udf9a \ud83d\udcc7 \ud83d\udd22. \u270b\ufe0f <code>list</code> \ud83d\ude1e \ud83d\udeab\ud83d\udd1c.</p>"},{"location":"tutorial/query-params-str-validations/#_9","title":"\ud83d\udce3 \ud83c\udf05 \ud83d\uddc3","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udeae \ud83c\udf05 \u2139 \ud83d\udd03 \ud83d\udd22.</p> <p>\ud83d\udc48 \u2139 \ud83d\udd1c \ud83d\udd0c \ud83c\udfd7 \ud83d\uddc4 &amp; \u2699\ufe0f \ud83e\uddfe \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd22 &amp; \ud83d\udd22 \ud83e\uddf0.</p> <p>Note</p> <p>\u2714\ufe0f \ud83e\udd2f \ud83d\udc48 \ud83c\udf8f \ud83e\uddf0 5\ufe0f\u20e3\ud83d\udcc6 \u2714\ufe0f \ud83c\udf8f \ud83c\udf9a \ud83d\uddc4 \ud83d\udc15\u200d\ud83e\uddba.</p> <p>\ud83d\udc6b \ud83d\udcaa \ud83d\udeab \ud83c\udfa6 \ud83c\udf10 \u2795 \u2139 \ud83d\udce3, \ud83d\udc50 \ud83c\udf05 \ud83d\udcbc, \u274c \u2692 \u23ea \ud83d\udcc4 \ud83d\udee0\ufe0f.</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udeae <code>title</code>:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Union[str, None] = Query(default=None, title=\"Query string\", min_length=3),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[str | None, Query(title=\"Query string\", min_length=3)] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[Union[str, None], Query(title=\"Query string\", min_length=3)] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[Union[str, None], Query(title=\"Query string\", min_length=3)] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: str | None = Query(default=None, title=\"Query string\", min_length=3),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>&amp; <code>description</code>:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Union[str, None] = Query(\n        default=None,\n        title=\"Query string\",\n        description=\"Query string for the items to search in the database that have a good match\",\n        min_length=3,\n    ),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        str | None,\n        Query(\n            title=\"Query string\",\n            description=\"Query string for the items to search in the database that have a good match\",\n            min_length=3,\n        ),\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        Union[str, None],\n        Query(\n            title=\"Query string\",\n            description=\"Query string for the items to search in the database that have a good match\",\n            min_length=3,\n        ),\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        Union[str, None],\n        Query(\n            title=\"Query string\",\n            description=\"Query string for the items to search in the database that have a good match\",\n            min_length=3,\n        ),\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: str | None = Query(\n        default=None,\n        title=\"Query string\",\n        description=\"Query string for the items to search in the database that have a good match\",\n        min_length=3,\n    ),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre>"},{"location":"tutorial/query-params-str-validations/#_10","title":"\ud83d\udcdb \ud83d\udd22","text":"<p>\ud83c\udf08 \ud83d\udc48 \ud83d\udc46 \ud83d\udc9a \ud83d\udd22 <code>item-query</code>.</p> <p>\ud83d\udc96:</p> <pre><code>http://127.0.0.1:8000/items/?item-query=foobaritems\n</code></pre> <p>\u270b\ufe0f <code>item-query</code> \ud83d\udeab \u2611 \ud83d\udc0d \ud83d\udd22 \ud83d\udcdb.</p> <p>\ud83d\udd10 \ud83d\udd1c <code>item_query</code>.</p> <p>\u270b\ufe0f \ud83d\udc46 \ud83d\udcaa \u26ab\ufe0f \u26ab\ufe0f\u2754 <code>item-query</code>...</p> <p>\u2934\ufe0f \ud83d\udc46 \ud83d\udcaa \ud83d\udce3 <code>alias</code>, &amp; \ud83d\udc48 \ud83d\udcdb \u26ab\ufe0f\u2754 \ud83d\udd1c \u2699\ufe0f \ud83d\udd0e \ud83d\udd22 \ud83d\udcb2:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Union[str, None] = Query(default=None, alias=\"item-query\")):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[str | None, Query(alias=\"item-query\")] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(q: str | None = Query(default=None, alias=\"item-query\")):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre>"},{"location":"tutorial/query-params-str-validations/#_11","title":"\ud83d\ude1b \ud83d\udd22","text":"<p>\ud83d\udd1c \u27a1\ufe0f \ud83d\udcac \ud83d\udc46 \ud83d\udeab \ud83d\udc96 \ud83d\udc49 \ud83d\udd22 \ud83d\udeab\ud83d\udd1c.</p> <p>\ud83d\udc46 \u2714\ufe0f \ud83d\udc48 \u26ab\ufe0f \ud83d\udce4 \u23ea \u21a9\ufe0f \ud83d\udce4 \ud83d\udc69\u200d\ud83d\udcbb \u2699\ufe0f \u26ab\ufe0f, \u270b\ufe0f \ud83d\udc46 \ud83d\udc9a \ud83e\ude7a \ud83c\udfaf \ud83c\udfa6 \u26ab\ufe0f \ud83d\ude22.</p> <p>\u2934\ufe0f \ud83d\udeb6\u200d\u2640\ufe0f \ud83d\udd22 <code>deprecated=True</code> <code>Query</code>:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Union[str, None] = Query(\n        default=None,\n        alias=\"item-query\",\n        title=\"Query string\",\n        description=\"Query string for the items to search in the database that have a good match\",\n        min_length=3,\n        max_length=50,\n        pattern=\"^fixedquery$\",\n        deprecated=True,\n    ),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        str | None,\n        Query(\n            alias=\"item-query\",\n            title=\"Query string\",\n            description=\"Query string for the items to search in the database that have a good match\",\n            min_length=3,\n            max_length=50,\n            pattern=\"^fixedquery$\",\n            deprecated=True,\n        ),\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        Union[str, None],\n        Query(\n            alias=\"item-query\",\n            title=\"Query string\",\n            description=\"Query string for the items to search in the database that have a good match\",\n            min_length=3,\n            max_length=50,\n            pattern=\"^fixedquery$\",\n            deprecated=True,\n        ),\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        Union[str, None],\n        Query(\n            alias=\"item-query\",\n            title=\"Query string\",\n            description=\"Query string for the items to search in the database that have a good match\",\n            min_length=3,\n            max_length=50,\n            pattern=\"^fixedquery$\",\n            deprecated=True,\n        ),\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    q: str | None = Query(\n        default=None,\n        alias=\"item-query\",\n        title=\"Query string\",\n        description=\"Query string for the items to search in the database that have a good match\",\n        min_length=3,\n        max_length=50,\n        pattern=\"^fixedquery$\",\n        deprecated=True,\n    ),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results\n</code></pre> <p>\ud83e\ude7a \ud83d\udd1c \ud83c\udfa6 \u26ab\ufe0f \ud83d\udc96 \ud83d\udc49:</p> <p></p>"},{"location":"tutorial/query-params-str-validations/#_12","title":"\ud83d\udeab \u26aa\ufe0f\u27a1\ufe0f \ud83d\uddc4","text":"<p>\ud83d\udeab \ud83d\udd22 \ud83d\udd22 \u26aa\ufe0f\u27a1\ufe0f \ud83c\udfd7 \ud83d\uddc4 \ud83d\udd17 (&amp; \u27a1\ufe0f, \u26aa\ufe0f\u27a1\ufe0f \ud83c\udfe7 \ud83e\uddfe \u2699\ufe0f), \u2692 \ud83d\udd22 <code>include_in_schema</code> <code>Query</code> <code>False</code>:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    hidden_query: Union[str, None] = Query(default=None, include_in_schema=False),\n):\n    if hidden_query:\n        return {\"hidden_query\": hidden_query}\n    else:\n        return {\"hidden_query\": \"Not found\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    hidden_query: Annotated[str | None, Query(include_in_schema=False)] = None,\n):\n    if hidden_query:\n        return {\"hidden_query\": hidden_query}\n    else:\n        return {\"hidden_query\": \"Not found\"}\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    hidden_query: Annotated[Union[str, None], Query(include_in_schema=False)] = None,\n):\n    if hidden_query:\n        return {\"hidden_query\": hidden_query}\n    else:\n        return {\"hidden_query\": \"Not found\"}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    hidden_query: Annotated[Union[str, None], Query(include_in_schema=False)] = None,\n):\n    if hidden_query:\n        return {\"hidden_query\": hidden_query}\n    else:\n        return {\"hidden_query\": \"Not found\"}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    hidden_query: str | None = Query(default=None, include_in_schema=False),\n):\n    if hidden_query:\n        return {\"hidden_query\": hidden_query}\n    else:\n        return {\"hidden_query\": \"Not found\"}\n</code></pre>"},{"location":"tutorial/query-params-str-validations/#_13","title":"\ud83c\udf03","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83c\udf16 \ud83d\udd2c &amp; \ud83d\uddc3 \ud83d\udc46 \ud83d\udd22.</p> <p>\ud83d\udc8a \ud83d\udd2c &amp; \ud83d\uddc3:</p> <ul> <li><code>alias</code></li> <li><code>title</code></li> <li><code>description</code></li> <li><code>deprecated</code></li> </ul> <p>\ud83d\udd2c \ud83c\udfaf \ud83c\udfbb:</p> <ul> <li><code>min_length</code></li> <li><code>max_length</code></li> <li><code>regex</code></li> </ul> <p>\ud83d\udc6b \ud83d\uddbc \ud83d\udc46 \ud83d\udc40 \u2754 \ud83d\udce3 \ud83d\udd2c <code>str</code> \ud83d\udcb2.</p> <p>\ud83d\udc40 \u23ed \ud83d\udcc3 \ud83d\udc40 \u2754 \ud83d\udce3 \ud83d\udd2c \ud83c\udf8f \ud83c\udd8e, \ud83d\udc96 \ud83d\udd22.</p>"},{"location":"tutorial/query-params/","title":"\ud83d\udd22 \ud83d\udd22","text":"<p>\ud83d\udd50\u2754 \ud83d\udc46 \ud83d\udce3 \ud83c\udf8f \ud83d\udd22 \ud83d\udd22 \ud83d\udc48 \ud83d\udeab \ud83c\udf55 \u27a1 \ud83d\udd22, \ud83d\udc6b \ud83d\udd01 \ud83d\udd2c \"\ud83d\udd22\" \ud83d\udd22.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\n@app.get(\"/items/\")\nasync def read_item(skip: int = 0, limit: int = 10):\n    return fake_items_db[skip : skip + limit]\n</code></pre> <p>\ud83d\udd22 \u2692 \ud83d\udd11-\ud83d\udcb2 \ud83d\udc6b \ud83d\udc48 \ud83d\udeb6 \u23ee\ufe0f <code>?</code> \ud83d\udcdb, \ud83c\udf8f <code>&amp;</code> \ud83e\uddb9.</p> <p>\ud83d\uddbc, \ud83d\udcdb:</p> <pre><code>http://127.0.0.1:8000/items/?skip=0&amp;limit=10\n</code></pre> <p>...\ud83d\udd22 \ud83d\udd22:</p> <ul> <li><code>skip</code>: \u23ee\ufe0f \ud83d\udcb2 <code>0</code></li> <li><code>limit</code>: \u23ee\ufe0f \ud83d\udcb2 <code>10</code></li> </ul> <p>\ud83d\udc6b \ud83c\udf55 \ud83d\udcdb, \ud83d\udc6b \"\ud83d\udece\" \ud83c\udfbb.</p> <p>\u270b\ufe0f \ud83d\udd50\u2754 \ud83d\udc46 \ud83d\udce3 \ud83d\udc6b \u23ee\ufe0f \ud83d\udc0d \ud83c\udd8e (\ud83d\uddbc \ud83d\udd1b, <code>int</code>), \ud83d\udc6b \ud83d\udddc \ud83d\udc48 \ud83c\udd8e &amp; \u2714 \ud83d\udee1 \u26ab\ufe0f.</p> <p>\ud83c\udf10 \ud83c\udf8f \ud83d\udee0\ufe0f \ud83d\udc48 \u2696 \u27a1 \ud83d\udd22 \u2714 \ud83d\udd22 \ud83d\udd22:</p> <ul> <li>\ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udc15\u200d\ud83e\uddba (\ud83c\udfb2)</li> <li>\ud83d\udcbd \"\u270d\"</li> <li>\ud83d\udcbd \ud83d\udd2c</li> <li>\ud83c\udfe7 \ud83e\uddfe</li> </ul>"},{"location":"tutorial/query-params/#_2","title":"\ud83d\udd22","text":"<p>\ud83d\udd22 \ud83d\udd22 \ud83d\udeab \ud83d\udd27 \ud83c\udf55 \u27a1, \ud83d\udc6b \ud83d\udcaa \ud83d\udce6 &amp; \ud83d\udcaa \u2714\ufe0f \ud83d\udd22 \ud83d\udcb2.</p> <p>\ud83d\uddbc \ud83d\udd1b \ud83d\udc6b \u2714\ufe0f \ud83d\udd22 \ud83d\udcb2 <code>skip=0</code> &amp; <code>limit=10</code>.</p> <p>, \ud83d\udd1c \ud83d\udcdb:</p> <pre><code>http://127.0.0.1:8000/items/\n</code></pre> <p>\ud83d\udd1c \ud83c\udf8f \ud83d\udd1c:</p> <pre><code>http://127.0.0.1:8000/items/?skip=0&amp;limit=10\n</code></pre> <p>\u270b\ufe0f \ud83d\udea5 \ud83d\udc46 \ud83d\udeb6, \ud83d\uddbc:</p> <pre><code>http://127.0.0.1:8000/items/?skip=20\n</code></pre> <p>\ud83d\udd22 \ud83d\udcb2 \ud83d\udc46 \ud83d\udd22 \ud83d\udd1c:</p> <ul> <li><code>skip=20</code>: \u21a9\ufe0f \ud83d\udc46 \u2692 \u26ab\ufe0f \ud83d\udcdb</li> <li><code>limit=10</code>: \u21a9\ufe0f \ud83d\udc48 \ud83d\udd22 \ud83d\udcb2</li> </ul>"},{"location":"tutorial/query-params/#_3","title":"\ud83d\udce6 \ud83d\udd22","text":"<p>\ud83c\udf8f \ud83c\udf0c, \ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83d\udce6 \ud83d\udd22 \ud83d\udd22, \u2692 \ud83d\udc6b \ud83d\udd22 <code>None</code>:</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str, q: Union[str, None] = None):\n    if q:\n        return {\"item_id\": item_id, \"q\": q}\n    return {\"item_id\": item_id}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str, q: str | None = None):\n    if q:\n        return {\"item_id\": item_id, \"q\": q}\n    return {\"item_id\": item_id}\n</code></pre> <p>\ud83d\udc49 \ud83d\udcbc, \ud83d\udd22 \ud83d\udd22 <code>q</code> \ud83d\udd1c \ud83d\udce6, &amp; \ud83d\udd1c <code>None</code> \ud83d\udd22.</p> <p>Check</p> <p>\ud83d\udc40 \ud83d\udc48 ReadyAPI \ud83d\ude43 \ud83e\udd43 \ud83d\udc40 \ud83d\udc48 \u27a1 \ud83d\udd22 <code>item_id</code> \u27a1 \ud83d\udd22 &amp; <code>q</code> \ud83d\udeab,, \u26ab\ufe0f \ud83d\udd22 \ud83d\udd22.</p>"},{"location":"tutorial/query-params/#_4","title":"\ud83d\udd22 \ud83d\udd22 \ud83c\udd8e \ud83d\udee0\ufe0f","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udce3 <code>bool</code> \ud83c\udd8e, &amp; \ud83d\udc6b \ud83d\udd1c \ud83d\udddc:</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str, q: Union[str, None] = None, short: bool = False):\n    item = {\"item_id\": item_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str, q: str | None = None, short: bool = False):\n    item = {\"item_id\": item_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item\n</code></pre> <p>\ud83d\udc49 \ud83d\udcbc, \ud83d\udea5 \ud83d\udc46 \ud83d\udeb6:</p> <pre><code>http://127.0.0.1:8000/items/foo?short=1\n</code></pre> <p>\u2696\ufe0f</p> <pre><code>http://127.0.0.1:8000/items/foo?short=True\n</code></pre> <p>\u2696\ufe0f</p> <pre><code>http://127.0.0.1:8000/items/foo?short=true\n</code></pre> <p>\u2696\ufe0f</p> <pre><code>http://127.0.0.1:8000/items/foo?short=on\n</code></pre> <p>\u2696\ufe0f</p> <pre><code>http://127.0.0.1:8000/items/foo?short=yes\n</code></pre> <p>\u2696\ufe0f \ud83d\ude46 \ud83c\udf8f \ud83d\udcbc \ud83d\udcc8 (\ud83d\udd20, \ud83e\udd47 \ud83d\udd24 \ud83d\udd20, \u2652\ufe0f), \ud83d\udc46 \ud83d\udd22 \ud83d\udd1c \ud83d\udc40 \ud83d\udd22 <code>short</code> \u23ee\ufe0f <code>bool</code> \ud83d\udcb2 <code>True</code>. \u23ea <code>False</code>.</p>"},{"location":"tutorial/query-params/#_5","title":"\ud83d\udc97 \u27a1 &amp; \ud83d\udd22 \ud83d\udd22","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83d\udc97 \u27a1 \ud83d\udd22 &amp; \ud83d\udd22 \ud83d\udd22 \ud83c\udf8f \ud83d\udd70, ReadyAPI \ud83d\udcad \u2754 \u2754.</p> <p>&amp; \ud83d\udc46 \ud83d\udeab \u2714\ufe0f \ud83d\udce3 \ud83d\udc6b \ud83d\ude46 \ud83c\udfaf \u2714.</p> <p>\ud83d\udc6b \ud83d\udd1c \ud83d\udd2c \ud83d\udcdb:</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/users/{user_id}/items/{item_id}\")\nasync def read_user_item(\n    user_id: int, item_id: str, q: Union[str, None] = None, short: bool = False\n):\n    item = {\"item_id\": item_id, \"owner_id\": user_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/users/{user_id}/items/{item_id}\")\nasync def read_user_item(\n    user_id: int, item_id: str, q: str | None = None, short: bool = False\n):\n    item = {\"item_id\": item_id, \"owner_id\": user_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item\n</code></pre>"},{"location":"tutorial/query-params/#_6","title":"\u2714 \ud83d\udd22 \ud83d\udd22","text":"<p>\ud83d\udd50\u2754 \ud83d\udc46 \ud83d\udce3 \ud83d\udd22 \ud83d\udcb2 \ud83d\udeab-\u27a1 \ud83d\udd22 (\ud83d\udd1c, \ud83d\udc65 \u2714\ufe0f \ud83d\udd74 \ud83d\udc40 \ud83d\udd22 \ud83d\udd22), \u2934\ufe0f \u26ab\ufe0f \ud83d\udeab \u2714.</p> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udeab \ud83d\udc9a \ud83d\udeae \ud83c\udfaf \ud83d\udcb2 \u270b\ufe0f \u2692 \u26ab\ufe0f \ud83d\udce6, \u2692 \ud83d\udd22 <code>None</code>.</p> <p>\u270b\ufe0f \ud83d\udd50\u2754 \ud83d\udc46 \ud83d\udc9a \u2692 \ud83d\udd22 \ud83d\udd22 \u2714, \ud83d\udc46 \ud83d\udcaa \ud83d\udeab \ud83d\udce3 \ud83d\ude46 \ud83d\udd22 \ud83d\udcb2:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_user_item(item_id: str, needy: str):\n    item = {\"item_id\": item_id, \"needy\": needy}\n    return item\n</code></pre> <p>\ud83d\udce5 \ud83d\udd22 \ud83d\udd22 <code>needy</code> \u2714 \ud83d\udd22 \ud83d\udd22 \ud83c\udd8e <code>str</code>.</p> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udcc2 \ud83d\udc46 \ud83d\udda5 \ud83d\udcdb \ud83d\udc96:</p> <pre><code>http://127.0.0.1:8000/items/foo-item\n</code></pre> <p>...\ud83c\udf75 \u274e \u2714 \ud83d\udd22 <code>needy</code>, \ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \u274c \ud83d\udc96:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"query\",\n                \"needy\"\n            ],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\"\n        }\n    ]\n}\n</code></pre> <p><code>needy</code> \ud83d\ude9a \ud83d\udd22, \ud83d\udc46 \ud83d\udd1c \ud83d\udcaa \u2692 \u26ab\ufe0f \ud83d\udcdb:</p> <pre><code>http://127.0.0.1:8000/items/foo-item?needy=sooooneedy\n</code></pre> <p>...\ud83d\udc49 \ud83d\udd1c \ud83d\udc77:</p> <pre><code>{\n    \"item_id\": \"foo-item\",\n    \"needy\": \"sooooneedy\"\n}\n</code></pre> <p>&amp; \u2197\ufe0f, \ud83d\udc46 \ud83d\udcaa \ud83d\udd2c \ud83d\udd22 \u2714, \u2714\ufe0f \ud83d\udd22 \ud83d\udcb2, &amp; \ud83c\udf55 \ud83d\udce6:</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_user_item(\n    item_id: str, needy: str, skip: int = 0, limit: Union[int, None] = None\n):\n    item = {\"item_id\": item_id, \"needy\": needy, \"skip\": skip, \"limit\": limit}\n    return item\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_user_item(\n    item_id: str, needy: str, skip: int = 0, limit: int | None = None\n):\n    item = {\"item_id\": item_id, \"needy\": needy, \"skip\": skip, \"limit\": limit}\n    return item\n</code></pre> <p>\ud83d\udc49 \ud83d\udcbc, \ud83d\udce4 3\ufe0f\u20e3 \ud83d\udd22 \ud83d\udd22:</p> <ul> <li><code>needy</code>, \u2714 <code>str</code>.</li> <li><code>skip</code>, <code>int</code> \u23ee\ufe0f \ud83d\udd22 \ud83d\udcb2 <code>0</code>.</li> <li><code>limit</code>, \ud83d\udce6 <code>int</code>.</li> </ul> <p>Tip</p> <p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>Enum</code>\u24c2 \ud83c\udf8f \ud83c\udf0c \u23ee\ufe0f \u27a1 \ud83d\udd22.</p>"},{"location":"tutorial/request-files/","title":"\ud83d\udce8 \ud83d\udcc1","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udd2c \ud83d\udcc1 \ud83d\udcc2 \ud83d\udc69\u200d\ud83d\udcbb \u2699\ufe0f <code>File</code>.</p> <p>Info</p> <p>\ud83d\udce8 \ud83d\udcc2 \ud83d\udcc1, \ud83e\udd47 \u274e <code>python-multipart</code>.</p> <p>\ud83e\udd36 \u24c2. <code>pip install python-multipart</code>.</p> <p>\ud83d\udc49 \u21a9\ufe0f \ud83d\udcc2 \ud83d\udcc1 \ud83d\udce8 \"\ud83d\udce8 \ud83d\udcbd\".</p>"},{"location":"tutorial/request-files/#file","title":"\ud83d\uddc4 <code>File</code>","text":"<p>\ud83d\uddc4 <code>File</code> &amp; <code>UploadFile</code> \u26aa\ufe0f\u27a1\ufe0f <code>readyapi</code>:</p> Python 3.8+ - non-Annotated <pre><code>from readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: bytes = File()):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File()]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> <pre><code>from readyapi import File, ReadyAPI, UploadFile\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File()]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre>"},{"location":"tutorial/request-files/#file_1","title":"\ud83d\udd2c <code>File</code> \ud83d\udd22","text":"<p>\u270d \ud83d\udcc1 \ud83d\udd22 \ud83c\udf8f \ud83c\udf0c \ud83d\udc46 \ud83d\udd1c <code>Body</code> \u2696\ufe0f <code>Form</code>:</p> Python 3.8+ - non-Annotated <pre><code>from readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: bytes = File()):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File()]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> <pre><code>from readyapi import File, ReadyAPI, UploadFile\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File()]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> <p>Info</p> <p><code>File</code> \ud83c\udf93 \ud83d\udc48 \ud83d\ude16 \ud83d\udd17 \u26aa\ufe0f\u27a1\ufe0f <code>Form</code>.</p> <p>\u270b\ufe0f \ud83d\udcad \ud83d\udc48 \ud83d\udd50\u2754 \ud83d\udc46 \ud83d\uddc4 <code>Query</code>, <code>Path</code>, <code>File</code> &amp; \ud83c\udf8f \u26aa\ufe0f\u27a1\ufe0f <code>readyapi</code>, \ud83d\udc48 \ud83e\udd19 \ud83d\udd22 \ud83d\udc48 \ud83d\udce8 \ud83c\udf81 \ud83c\udf93.</p> <p>Tip</p> <p>\ud83d\udce3 \ud83d\udcc1 \ud83d\udcaa, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>File</code>, \u21a9\ufe0f \u23ea \ud83d\udd22 \ud83d\udd1c \ud83d\udd2c \ud83d\udd22 \ud83d\udd22 \u2696\ufe0f \ud83d\udcaa (\ud83c\udfbb) \ud83d\udd22.</p> <p>\ud83d\udcc1 \ud83d\udd1c \ud83d\udcc2 \"\ud83d\udce8 \ud83d\udcbd\".</p> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udce3 \ud83c\udd8e \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22 \ud83d\udd22 <code>bytes</code>, ReadyAPI \ud83d\udd1c \u270d \ud83d\udcc1 \ud83d\udc46 &amp; \ud83d\udc46 \ud83d\udd1c \ud83d\udce8 \ud83c\udf9a <code>bytes</code>.</p> <p>\u2714\ufe0f \ud83e\udd2f \ud83d\udc48 \ud83d\udc49 \u26d3 \ud83d\udc48 \ud83c\udf82 \ud83c\udf9a \ud83d\udd1c \ud83c\udfea \ud83d\udcbe. \ud83d\udc49 \ud83d\udd1c \ud83d\udc77 \ud83d\udc4d \ud83e\udd2a \ud83d\udcc1.</p> <p>\u270b\ufe0f \ud83d\udce4 \ud83d\udcda \ud83d\udcbc \u2754 \ud83d\udc46 \ud83d\udcaa \ud83d\udcb0 \u26aa\ufe0f\u27a1\ufe0f \u2699\ufe0f <code>UploadFile</code>.</p>"},{"location":"tutorial/request-files/#uploadfile","title":"\ud83d\udcc1 \ud83d\udd22 \u23ee\ufe0f <code>UploadFile</code>","text":"<p>\ud83d\udd2c \ud83d\udcc1 \ud83d\udd22 \u23ee\ufe0f \ud83c\udd8e <code>UploadFile</code>:</p> Python 3.8+ - non-Annotated <pre><code>from readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: bytes = File()):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File()]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> <pre><code>from readyapi import File, ReadyAPI, UploadFile\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File()]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> <p>\u2699\ufe0f <code>UploadFile</code> \u2714\ufe0f \ud83d\udcda \ud83d\udcc8 \ud83e\udd2d <code>bytes</code>:</p> <ul> <li>\ud83d\udc46 \ud83d\udeab \u2714\ufe0f \u2699\ufe0f <code>File()</code> \ud83d\udd22 \ud83d\udcb2 \ud83d\udd22.</li> <li>\u26ab\ufe0f \u2699\ufe0f \"\ud83e\uddf5\" \ud83d\udcc1:<ul> <li>\ud83d\udcc1 \ud83c\udfea \ud83d\udcbe \ud83c\udd99 \ud83d\udd06 \ud83d\udcd0 \ud83d\udcc9, &amp; \u23ee\ufe0f \ud83d\udeb6\u200d\u2640\ufe0f \ud83d\udc49 \ud83d\udcc9 \u26ab\ufe0f \ud83d\udd1c \ud83c\udfea \ud83d\udcbe.</li> </ul> </li> <li>\ud83d\udc49 \u26d3 \ud83d\udc48 \u26ab\ufe0f \ud83d\udd1c \ud83d\udc77 \ud83d\udc4d \u2b55 \ud83d\udcc1 \ud83d\udc96 \ud83d\uddbc, \ud83d\udcf9, \u2b55 \ud83d\udcb1, \u2652\ufe0f. \ud83c\udf75 \ud83d\ude29 \ud83c\udf10 \ud83d\udcbe.</li> <li>\ud83d\udc46 \ud83d\udcaa \ud83e\udd1a \ud83d\uddc3 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udcc2 \ud83d\udcc1.</li> <li>\u26ab\ufe0f \u2714\ufe0f \ud83d\udcc1-\ud83d\udc96 <code>async</code> \ud83d\udd22.</li> <li>\u26ab\ufe0f \ud83c\udfa6 \u2611 \ud83d\udc0d <code>SpooledTemporaryFile</code> \ud83c\udf9a \ud83d\udc48 \ud83d\udc46 \ud83d\udcaa \ud83d\udeb6\u200d\u2640\ufe0f \ud83d\udd17 \ud83c\udf8f \ud83d\uddc3 \ud83d\udc48 \u231b \ud83d\udcc1-\ud83d\udc96 \ud83c\udf9a.</li> </ul>"},{"location":"tutorial/request-files/#uploadfile_1","title":"<code>UploadFile</code>","text":"<p><code>UploadFile</code> \u2714\ufe0f \ud83d\udcc4 \ud83d\udd22:</p> <ul> <li><code>filename</code>: <code>str</code> \u23ee\ufe0f \u23ee\ufe0f \ud83d\udcc1 \ud83d\udcdb \ud83d\udc48 \ud83d\udcc2 (\u2705 <code>myimage.jpg</code>).</li> <li><code>content_type</code>: <code>str</code> \u23ee\ufe0f \ud83c\udf9a \ud83c\udd8e (\ud83d\udcc1 \ud83c\udd8e / \ud83d\udcfb \ud83c\udd8e) (\u2705 <code>image/jpeg</code>).</li> <li><code>file</code>: <code>SpooledTemporaryFile</code> ( \ud83d\udcc1-\ud83d\udc96 \ud83c\udf9a). \ud83d\udc49 \u2611 \ud83d\udc0d \ud83d\udcc1 \ud83d\udc48 \ud83d\udc46 \ud83d\udcaa \ud83d\udeb6\u200d\u2640\ufe0f \ud83d\udd17 \ud83c\udf8f \ud83d\udd22 \u2696\ufe0f \ud83d\uddc3 \ud83d\udc48 \u231b \"\ud83d\udcc1-\ud83d\udc96\" \ud83c\udf9a.</li> </ul> <p><code>UploadFile</code> \u2714\ufe0f \ud83d\udcc4 <code>async</code> \ud83d\udc69\u200d\ud83d\udd2c. \ud83d\udc6b \ud83c\udf10 \ud83e\udd19 \ud83d\udd17 \ud83d\udcc1 \ud83d\udc69\u200d\ud83d\udd2c \ud83d\udd18 (\u2699\ufe0f \ud83d\udd17 <code>SpooledTemporaryFile</code>).</p> <ul> <li><code>write(data)</code>: \u270d <code>data</code> (<code>str</code> \u2696\ufe0f <code>bytes</code>) \ud83d\udcc1.</li> <li><code>read(size)</code>: \u270d <code>size</code> (<code>int</code>) \ud83d\udd22/\ud83e\uddb9 \ud83d\udcc1.</li> <li><code>seek(offset)</code>: \ud83d\udeb6 \ud83d\udd22 \ud83e\uddd8 <code>offset</code> (<code>int</code>) \ud83d\udcc1.<ul> <li>\ud83e\udd36 \u24c2., <code>await myfile.seek(0)</code> \ud83d\udd1c \ud83d\udeb6 \u25b6\ufe0f \ud83d\udcc1.</li> <li>\ud83d\udc49 \u2734\ufe0f \u26a0 \ud83d\udea5 \ud83d\udc46 \ud83c\udfc3 <code>await myfile.read()</code> \ud83d\udd50 &amp; \u2934\ufe0f \ud83d\udcaa \u270d \ud83c\udf9a \ud83d\udd04.</li> </ul> </li> <li><code>close()</code>: \ud83d\udd10 \ud83d\udcc1.</li> </ul> <p>\ud83c\udf10 \ud83d\udc6b \ud83d\udc69\u200d\ud83d\udd2c <code>async</code> \ud83d\udc69\u200d\ud83d\udd2c, \ud83d\udc46 \ud83d\udcaa \"\u231b\" \ud83d\udc6b.</p> <p>\ud83d\uddbc, \ud83d\udd18 <code>async</code> \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22 \ud83d\udc46 \ud83d\udcaa \ud83e\udd1a \ud83c\udf9a \u23ee\ufe0f:</p> <pre><code>contents = await myfile.read()\n</code></pre> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udd18 \ud83d\ude10 <code>def</code> \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22, \ud83d\udc46 \ud83d\udcaa \ud83d\udd10 <code>UploadFile.file</code> \ud83d\udd17, \ud83d\uddbc:</p> <pre><code>contents = myfile.file.read()\n</code></pre> <p><code>async</code> \ud83d\udce1 \u2139</p> <p>\ud83d\udd50\u2754 \ud83d\udc46 \u2699\ufe0f <code>async</code> \ud83d\udc69\u200d\ud83d\udd2c, ReadyAPI \ud83c\udfc3 \ud83d\udcc1 \ud83d\udc69\u200d\ud83d\udd2c \ud83e\uddf5 &amp; \u231b \ud83d\udc6b.</p> <p>\ud83d\udc83 \ud83d\udce1 \u2139</p> <p>ReadyAPI'\u24c2 <code>UploadFile</code> \ud83d\ude16 \ud83d\udd17 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc83'\u24c2 <code>UploadFile</code>, \u270b\ufe0f \ud83d\udeae \ud83d\udcaa \ud83c\udf55 \u2692 \u26ab\ufe0f \ud83d\udd17 \u23ee\ufe0f Pydantic &amp; \ud83c\udf8f \ud83c\udf55 ReadyAPI.</p>"},{"location":"tutorial/request-files/#_2","title":"\u26ab\ufe0f\u2754 \"\ud83d\udce8 \ud83d\udcbd\"","text":"<p>\ud83c\udf0c \ud83d\udd78 \ud83d\udce8 (<code>&lt;form&gt;&lt;/form&gt;</code>) \ud83d\udce8 \ud83d\udcbd \ud83d\udcbd \ud83d\udece \u2699\ufe0f \"\ud83c\udf81\" \ud83d\udd22 \ud83d\udc48 \ud83d\udcca, \u26ab\ufe0f \ud83c\udf8f \u26aa\ufe0f\u27a1\ufe0f \ud83c\udfbb.</p> <p>ReadyAPI \ud83d\udd1c \u2692 \ud83d\udcad \u270d \ud83d\udc48 \ud83d\udcca \u26aa\ufe0f\u27a1\ufe0f \u25b6\ufe0f\ufe0f \ud83e\udd49 \u21a9\ufe0f \ud83c\udfbb.</p> <p>\ud83d\udce1 \u2139</p> <p>\ud83d\udcca \u26aa\ufe0f\u27a1\ufe0f \ud83d\udce8 \ud83d\udece \ud83d\udddc \u2699\ufe0f \"\ud83d\udcfb \ud83c\udd8e\" <code>application/x-www-form-urlencoded</code> \ud83d\udd50\u2754 \u26ab\ufe0f \ud83d\udeab \ud83d\udd0c \ud83d\udcc1.</p> <p>\u270b\ufe0f \ud83d\udd50\u2754 \ud83d\udce8 \ud83d\udd0c \ud83d\udcc1, \u26ab\ufe0f \ud83d\udddc <code>multipart/form-data</code>. \ud83d\udea5 \ud83d\udc46 \u2699\ufe0f <code>File</code>, ReadyAPI \ud83d\udd1c \ud83d\udcad \u26ab\ufe0f \u2714\ufe0f \ud83e\udd1a \ud83d\udcc1 \u26aa\ufe0f\u27a1\ufe0f \u2611 \ud83c\udf55 \ud83d\udcaa.</p> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udc9a \u270d \ud83c\udf16 \ud83d\udd03 \ud83d\udc49 \ud83d\udd22 &amp; \ud83d\udce8 \ud83c\udfd1, \ud83d\udc73 \ud83c\udfc7 \ud83d\udd78 \ud83e\ude7a <code>POST</code>.</p> <p>Warning</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83d\udc97 <code>File</code> &amp; <code>Form</code> \ud83d\udd22 \u27a1 \ud83d\udee0\ufe0f, \u270b\ufe0f \ud83d\udc46 \ud83d\udcaa \ud83d\udeab \ud83d\udce3 <code>Body</code> \ud83c\udfd1 \ud83d\udc48 \ud83d\udc46 \u231b \ud83d\udce8 \ud83c\udfbb, \ud83d\udce8 \ud83d\udd1c \u2714\ufe0f \ud83d\udcaa \ud83d\udddc \u2699\ufe0f <code>multipart/form-data</code> \u21a9\ufe0f <code>application/json</code>.</p> <p>\ud83d\udc49 \ud83d\udeab \ud83d\udeab ReadyAPI, \u26ab\ufe0f \ud83c\udf55 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udee0\ufe0f.</p>"},{"location":"tutorial/request-files/#_3","title":"\ud83d\udce6 \ud83d\udcc1 \ud83d\udcc2","text":"<p>\ud83d\udc46 \ud83d\udcaa \u2692 \ud83d\udcc1 \ud83d\udce6 \u2699\ufe0f \ud83d\udc29 \ud83c\udd8e \u270d &amp; \u2692 \ud83d\udd22 \ud83d\udcb2 <code>None</code>:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Union[bytes, None] = File(default=None)):\n    if not file:\n        return {\"message\": \"No file sent\"}\n    else:\n        return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: Union[UploadFile, None] = None):\n    if not file:\n        return {\"message\": \"No upload file sent\"}\n    else:\n        return {\"filename\": file.filename}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes | None, File()] = None):\n    if not file:\n        return {\"message\": \"No file sent\"}\n    else:\n        return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile | None = None):\n    if not file:\n        return {\"message\": \"No upload file sent\"}\n    else:\n        return {\"filename\": file.filename}\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[Union[bytes, None], File()] = None):\n    if not file:\n        return {\"message\": \"No file sent\"}\n    else:\n        return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: Union[UploadFile, None] = None):\n    if not file:\n        return {\"message\": \"No upload file sent\"}\n    else:\n        return {\"filename\": file.filename}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import File, ReadyAPI, UploadFile\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[Union[bytes, None], File()] = None):\n    if not file:\n        return {\"message\": \"No file sent\"}\n    else:\n        return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: Union[UploadFile, None] = None):\n    if not file:\n        return {\"message\": \"No upload file sent\"}\n    else:\n        return {\"filename\": file.filename}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: bytes | None = File(default=None)):\n    if not file:\n        return {\"message\": \"No file sent\"}\n    else:\n        return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile | None = None):\n    if not file:\n        return {\"message\": \"No upload file sent\"}\n    else:\n        return {\"filename\": file.filename}\n</code></pre>"},{"location":"tutorial/request-files/#uploadfile_2","title":"<code>UploadFile</code> \u23ee\ufe0f \ud83c\udf16 \ud83d\uddc3","text":"<p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>File()</code> \u23ee\ufe0f <code>UploadFile</code>, \ud83d\uddbc, \u2692 \ud83c\udf16 \ud83d\uddc3:</p> Python 3.8+ - non-Annotated <pre><code>from readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: bytes = File(description=\"A file read as bytes\")):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(\n    file: UploadFile = File(description=\"A file read as UploadFile\"),\n):\n    return {\"filename\": file.filename}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import File, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File(description=\"A file read as bytes\")]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(\n    file: Annotated[UploadFile, File(description=\"A file read as UploadFile\")],\n):\n    return {\"filename\": file.filename}\n</code></pre> <pre><code>from readyapi import File, ReadyAPI, UploadFile\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File(description=\"A file read as bytes\")]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(\n    file: Annotated[UploadFile, File(description=\"A file read as UploadFile\")],\n):\n    return {\"filename\": file.filename}\n</code></pre>"},{"location":"tutorial/request-files/#_4","title":"\ud83d\udc97 \ud83d\udcc1 \ud83d\udcc2","text":"<p>\u26ab\ufe0f \ud83d\udcaa \ud83d\udcc2 \ud83d\udcda \ud83d\udcc1 \ud83c\udf8f \ud83d\udd70.</p> <p>\ud83d\udc6b \ud83d\udd1c \ud83d\udc68\u200d\ud83d\udcbc \ud83c\udf8f \"\ud83d\udce8 \ud83c\udfd1\" \ud83d\udce8 \u2699\ufe0f \"\ud83d\udce8 \ud83d\udcbd\".</p> <p>\u2699\ufe0f \ud83d\udc48, \ud83d\udce3 \ud83d\udcc7 <code>bytes</code> \u2696\ufe0f <code>UploadFile</code>:</p> Python 3.8+ - non-Annotated <pre><code>from typing import List\n\nfrom readyapi import File, ReadyAPI, UploadFile\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(files: List[bytes] = File()):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(files: List[UploadFile]):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n&lt;body&gt;\n&lt;form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n    \"\"\"\n    return HTMLResponse(content=content)\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.9+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import File, ReadyAPI, UploadFile\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(files: Annotated[list[bytes], File()]):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(files: list[UploadFile]):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n&lt;body&gt;\n&lt;form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n    \"\"\"\n    return HTMLResponse(content=content)\n</code></pre> <pre><code>from typing import List\n\nfrom readyapi import File, ReadyAPI, UploadFile\nfrom readyapi.responses import HTMLResponse\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(files: Annotated[List[bytes], File()]):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(files: List[UploadFile]):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n&lt;body&gt;\n&lt;form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n    \"\"\"\n    return HTMLResponse(content=content)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import File, ReadyAPI, UploadFile\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(files: list[bytes] = File()):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(files: list[UploadFile]):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n&lt;body&gt;\n&lt;form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n    \"\"\"\n    return HTMLResponse(content=content)\n</code></pre> <p>\ud83d\udc46 \ud83d\udd1c \ud83d\udce8, \ud83d\udce3, <code>list</code> <code>bytes</code> \u2696\ufe0f <code>UploadFile</code>\u24c2.</p> <p>\ud83d\udce1 \u2139</p> <p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>from starlette.responses import HTMLResponse</code>.</p> <p>ReadyAPI \ud83d\ude9a \ud83c\udf8f <code>starlette.responses</code> <code>readyapi.responses</code> \ud83c\udfea \ud83d\udc46, \ud83d\udc69\u200d\ud83d\udcbb. \u270b\ufe0f \ud83c\udf05 \ud83d\udcaa \ud83d\udce8 \ud83d\udc5f \ud83d\udd17 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc83.</p>"},{"location":"tutorial/request-files/#_5","title":"\ud83d\udc97 \ud83d\udcc1 \ud83d\udcc2 \u23ee\ufe0f \ud83c\udf16 \ud83d\uddc3","text":"<p>&amp; \ud83c\udf8f \ud83c\udf0c \u23ed, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>File()</code> \u2692 \ud83c\udf16 \ud83d\udd22, <code>UploadFile</code>:</p> Python 3.8+ - non-Annotated <pre><code>from typing import List\n\nfrom readyapi import File, ReadyAPI, UploadFile\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(\n    files: List[bytes] = File(description=\"Multiple files as bytes\"),\n):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(\n    files: List[UploadFile] = File(description=\"Multiple files as UploadFile\"),\n):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n&lt;body&gt;\n&lt;form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n    \"\"\"\n    return HTMLResponse(content=content)\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.9+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import File, ReadyAPI, UploadFile\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(\n    files: Annotated[list[bytes], File(description=\"Multiple files as bytes\")],\n):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(\n    files: Annotated[\n        list[UploadFile], File(description=\"Multiple files as UploadFile\")\n    ],\n):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n&lt;body&gt;\n&lt;form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n    \"\"\"\n    return HTMLResponse(content=content)\n</code></pre> <pre><code>from typing import List\n\nfrom readyapi import File, ReadyAPI, UploadFile\nfrom readyapi.responses import HTMLResponse\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(\n    files: Annotated[List[bytes], File(description=\"Multiple files as bytes\")],\n):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(\n    files: Annotated[\n        List[UploadFile], File(description=\"Multiple files as UploadFile\")\n    ],\n):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n&lt;body&gt;\n&lt;form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n    \"\"\"\n    return HTMLResponse(content=content)\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import File, ReadyAPI, UploadFile\nfrom readyapi.responses import HTMLResponse\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_files(\n    files: list[bytes] = File(description=\"Multiple files as bytes\"),\n):\n    return {\"file_sizes\": [len(file) for file in files]}\n\n\n@app.post(\"/uploadfiles/\")\nasync def create_upload_files(\n    files: list[UploadFile] = File(description=\"Multiple files as UploadFile\"),\n):\n    return {\"filenames\": [file.filename for file in files]}\n\n\n@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n&lt;body&gt;\n&lt;form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n&lt;input name=\"files\" type=\"file\" multiple&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n    \"\"\"\n    return HTMLResponse(content=content)\n</code></pre>"},{"location":"tutorial/request-files/#_6","title":"\ud83c\udf03","text":"<p>\u2699\ufe0f <code>File</code>, <code>bytes</code>, &amp; <code>UploadFile</code> \ud83d\udce3 \ud83d\udcc1 \ud83d\udcc2 \ud83d\udce8, \ud83d\udce8 \ud83d\udce8 \ud83d\udcbd.</p>"},{"location":"tutorial/request-forms-and-files/","title":"\ud83d\udce8 \ud83d\udce8 &amp; \ud83d\udcc1","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udd2c \ud83d\udcc1 &amp; \ud83d\udce8 \ud83c\udfd1 \ud83c\udf8f \ud83d\udd70 \u2699\ufe0f <code>File</code> &amp; <code>Form</code>.</p> <p>Info</p> <p>\ud83d\udce8 \ud83d\udcc2 \ud83d\udcc1 &amp; /\u2696\ufe0f \ud83d\udce8 \ud83d\udcca, \ud83e\udd47 \u274e <code>python-multipart</code>.</p> <p>\ud83e\udd36 \u24c2. <code>pip install python-multipart</code>.</p>"},{"location":"tutorial/request-forms-and-files/#file-form","title":"\ud83d\uddc4 <code>File</code> &amp; <code>Form</code>","text":"Python 3.8+ - non-Annotated <pre><code>from readyapi import File, Form, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(\n    file: bytes = File(), fileb: UploadFile = File(), token: str = Form()\n):\n    return {\n        \"file_size\": len(file),\n        \"token\": token,\n        \"fileb_content_type\": fileb.content_type,\n    }\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import File, Form, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(\n    file: Annotated[bytes, File()],\n    fileb: Annotated[UploadFile, File()],\n    token: Annotated[str, Form()],\n):\n    return {\n        \"file_size\": len(file),\n        \"token\": token,\n        \"fileb_content_type\": fileb.content_type,\n    }\n</code></pre> <pre><code>from readyapi import File, Form, ReadyAPI, UploadFile\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(\n    file: Annotated[bytes, File()],\n    fileb: Annotated[UploadFile, File()],\n    token: Annotated[str, Form()],\n):\n    return {\n        \"file_size\": len(file),\n        \"token\": token,\n        \"fileb_content_type\": fileb.content_type,\n    }\n</code></pre>"},{"location":"tutorial/request-forms-and-files/#file-form_1","title":"\ud83d\udd2c <code>File</code> &amp; <code>Form</code> \ud83d\udd22","text":"<p>\u270d \ud83d\udcc1 &amp; \ud83d\udce8 \ud83d\udd22 \ud83c\udf8f \ud83c\udf0c \ud83d\udc46 \ud83d\udd1c <code>Body</code> \u2696\ufe0f <code>Query</code>:</p> Python 3.8+ - non-Annotated <pre><code>from readyapi import File, Form, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(\n    file: bytes = File(), fileb: UploadFile = File(), token: str = Form()\n):\n    return {\n        \"file_size\": len(file),\n        \"token\": token,\n        \"fileb_content_type\": fileb.content_type,\n    }\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import File, Form, ReadyAPI, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(\n    file: Annotated[bytes, File()],\n    fileb: Annotated[UploadFile, File()],\n    token: Annotated[str, Form()],\n):\n    return {\n        \"file_size\": len(file),\n        \"token\": token,\n        \"fileb_content_type\": fileb.content_type,\n    }\n</code></pre> <pre><code>from readyapi import File, Form, ReadyAPI, UploadFile\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(\n    file: Annotated[bytes, File()],\n    fileb: Annotated[UploadFile, File()],\n    token: Annotated[str, Form()],\n):\n    return {\n        \"file_size\": len(file),\n        \"token\": token,\n        \"fileb_content_type\": fileb.content_type,\n    }\n</code></pre> <p>\ud83d\udcc1 &amp; \ud83d\udce8 \ud83c\udfd1 \ud83d\udd1c \ud83d\udcc2 \ud83d\udce8 \ud83d\udcca &amp; \ud83d\udc46 \ud83d\udd1c \ud83d\udce8 \ud83d\udcc1 &amp; \ud83d\udce8 \ud83c\udfd1.</p> <p>&amp; \ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83d\udcc1 <code>bytes</code> &amp; <code>UploadFile</code>.</p> <p>Warning</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83d\udc97 <code>File</code> &amp; <code>Form</code> \ud83d\udd22 \u27a1 \ud83d\udee0\ufe0f, \u270b\ufe0f \ud83d\udc46 \ud83d\udcaa \ud83d\udeab \ud83d\udce3 <code>Body</code> \ud83c\udfd1 \ud83d\udc48 \ud83d\udc46 \u231b \ud83d\udce8 \ud83c\udfbb, \ud83d\udce8 \ud83d\udd1c \u2714\ufe0f \ud83d\udcaa \ud83d\udddc \u2699\ufe0f <code>multipart/form-data</code> \u21a9\ufe0f <code>application/json</code>.</p> <p>\ud83d\udc49 \ud83d\udeab \ud83d\udeab ReadyAPI, \u26ab\ufe0f \ud83c\udf55 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udee0\ufe0f.</p>"},{"location":"tutorial/request-forms-and-files/#_2","title":"\ud83c\udf03","text":"<p>\u2699\ufe0f <code>File</code> &amp; <code>Form</code> \ud83d\udc6f\u200d\u2642\ufe0f \ud83d\udd50\u2754 \ud83d\udc46 \ud83d\udcaa \ud83d\udce8 \ud83d\udcbd &amp; \ud83d\udcc1 \ud83c\udf8f \ud83d\udce8.</p>"},{"location":"tutorial/request-forms/","title":"\ud83d\udce8 \ud83d\udcbd","text":"<p>\ud83d\udd50\u2754 \ud83d\udc46 \ud83d\udcaa \ud83d\udce8 \ud83d\udce8 \ud83c\udfd1 \u21a9\ufe0f \ud83c\udfbb, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>Form</code>.</p> <p>Info</p> <p>\u2699\ufe0f \ud83d\udce8, \ud83e\udd47 \u274e <code>python-multipart</code>.</p> <p>\ud83e\udd36 \u24c2. <code>pip install python-multipart</code>.</p>"},{"location":"tutorial/request-forms/#form","title":"\ud83d\uddc4 <code>Form</code>","text":"<p>\ud83d\uddc4 <code>Form</code> \u26aa\ufe0f\u27a1\ufe0f <code>readyapi</code>:</p> Python 3.8+ - non-Annotated <pre><code>from readyapi import Form, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.post(\"/login/\")\nasync def login(username: str = Form(), password: str = Form()):\n    return {\"username\": username}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import Form, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.post(\"/login/\")\nasync def login(username: Annotated[str, Form()], password: Annotated[str, Form()]):\n    return {\"username\": username}\n</code></pre> <pre><code>from readyapi import Form, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/login/\")\nasync def login(username: Annotated[str, Form()], password: Annotated[str, Form()]):\n    return {\"username\": username}\n</code></pre>"},{"location":"tutorial/request-forms/#form_1","title":"\ud83d\udd2c <code>Form</code> \ud83d\udd22","text":"<p>\u270d \ud83d\udce8 \ud83d\udd22 \ud83c\udf8f \ud83c\udf0c \ud83d\udc46 \ud83d\udd1c <code>Body</code> \u2696\ufe0f <code>Query</code>:</p> Python 3.8+ - non-Annotated <pre><code>from readyapi import Form, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.post(\"/login/\")\nasync def login(username: str = Form(), password: str = Form()):\n    return {\"username\": username}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import Form, ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.post(\"/login/\")\nasync def login(username: Annotated[str, Form()], password: Annotated[str, Form()]):\n    return {\"username\": username}\n</code></pre> <pre><code>from readyapi import Form, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\n@app.post(\"/login/\")\nasync def login(username: Annotated[str, Form()], password: Annotated[str, Form()]):\n    return {\"username\": username}\n</code></pre> <p>\ud83d\uddbc, 1\ufe0f\u20e3 \ud83c\udf0c Oauth2\ufe0f\u20e3 \ud83d\udd27 \ud83d\udcaa \u2699\ufe0f (\ud83e\udd19 \"\ud83d\udd10 \ud83d\udca7\") \u26ab\ufe0f \u2714 \ud83d\udce8 <code>username</code> &amp; <code>password</code> \ud83d\udce8 \ud83c\udfd1.</p> <p>\ud83d\udd0c \ud83d\ude9a \ud83c\udfd1 \u26ab\ufe0f\u2754 \ud83d\udcdb <code>username</code> &amp; <code>password</code>, &amp; \ud83d\udce8 \ud83d\udce8 \ud83c\udfd1, \ud83d\udeab \ud83c\udfbb.</p> <p>\u23ee\ufe0f <code>Form</code> \ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83c\udf8f \ud83d\udcf3 \u23ee\ufe0f <code>Body</code> (&amp; <code>Query</code>, <code>Path</code>, <code>Cookie</code>), \ud83d\udd0c \ud83d\udd2c, \ud83d\uddbc, \ud83d\udcdb (\u2705 <code>user-name</code> \u21a9\ufe0f <code>username</code>), \u2652\ufe0f.</p> <p>Info</p> <p><code>Form</code> \ud83c\udf93 \ud83d\udc48 \ud83d\ude16 \ud83d\udd17 \u26aa\ufe0f\u27a1\ufe0f <code>Body</code>.</p> <p>Tip</p> <p>\ud83d\udce3 \ud83d\udce8 \ud83d\udcaa, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>Form</code> \ud83c\udfaf, \u21a9\ufe0f \ud83c\udf75 \u26ab\ufe0f \ud83d\udd22 \ud83d\udd1c \ud83d\udd2c \ud83d\udd22 \ud83d\udd22 \u2696\ufe0f \ud83d\udcaa (\ud83c\udfbb) \ud83d\udd22.</p>"},{"location":"tutorial/request-forms/#_2","title":"\ud83d\udd03 \"\ud83d\udce8 \ud83c\udfd1\"","text":"<p>\ud83c\udf0c \ud83d\udd78 \ud83d\udce8 (<code>&lt;form&gt;&lt;/form&gt;</code>) \ud83d\udce8 \ud83d\udcbd \ud83d\udcbd \ud83d\udece \u2699\ufe0f \"\ud83c\udf81\" \ud83d\udd22 \ud83d\udc48 \ud83d\udcca, \u26ab\ufe0f \ud83c\udf8f \u26aa\ufe0f\u27a1\ufe0f \ud83c\udfbb.</p> <p>ReadyAPI \ud83d\udd1c \u2692 \ud83d\udcad \u270d \ud83d\udc48 \ud83d\udcca \u26aa\ufe0f\u27a1\ufe0f \u25b6\ufe0f\ufe0f \ud83e\udd49 \u21a9\ufe0f \ud83c\udfbb.</p> <p>\ud83d\udce1 \u2139</p> <p>\ud83d\udcca \u26aa\ufe0f\u27a1\ufe0f \ud83d\udce8 \ud83d\udece \ud83d\udddc \u2699\ufe0f \"\ud83d\udcfb \ud83c\udd8e\" <code>application/x-www-form-urlencoded</code>.</p> <p>\u270b\ufe0f \ud83d\udd50\u2754 \ud83d\udce8 \ud83d\udd0c \ud83d\udcc1, \u26ab\ufe0f \ud83d\udddc <code>multipart/form-data</code>. \ud83d\udc46 \ud83d\udd1c \u270d \ud83d\udd03 \ud83d\ude9a \ud83d\udcc1 \u23ed \ud83d\udcc3.</p> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udc9a \u270d \ud83c\udf16 \ud83d\udd03 \ud83d\udc49 \ud83d\udd22 &amp; \ud83d\udce8 \ud83c\udfd1, \ud83d\udc73 \ud83c\udfc7 \ud83d\udd78 \ud83e\ude7a <code>POST</code>.</p> <p>Warning</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83d\udc97 <code>Form</code> \ud83d\udd22 \u27a1 \ud83d\udee0\ufe0f, \u270b\ufe0f \ud83d\udc46 \ud83d\udcaa \ud83d\udeab \ud83d\udce3 <code>Body</code> \ud83c\udfd1 \ud83d\udc48 \ud83d\udc46 \u231b \ud83d\udce8 \ud83c\udfbb, \ud83d\udce8 \ud83d\udd1c \u2714\ufe0f \ud83d\udcaa \ud83d\udddc \u2699\ufe0f <code>application/x-www-form-urlencoded</code> \u21a9\ufe0f <code>application/json</code>.</p> <p>\ud83d\udc49 \ud83d\udeab \ud83d\udeab ReadyAPI, \u26ab\ufe0f \ud83c\udf55 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udee0\ufe0f.</p>"},{"location":"tutorial/request-forms/#_3","title":"\ud83c\udf03","text":"<p>\u2699\ufe0f <code>Form</code> \ud83d\udce3 \ud83d\udce8 \ud83d\udcbd \ud83d\udd22 \ud83d\udd22.</p>"},{"location":"tutorial/response-model/","title":"\ud83d\udce8 \ud83c\udff7 - \ud83d\udce8 \ud83c\udd8e","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83c\udd8e \u2699\ufe0f \ud83d\udce8 \u270d \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22 \ud83d\udce8 \ud83c\udd8e.</p> <p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83c\udd8e \u270d \ud83c\udf8f \ud83c\udf0c \ud83d\udc46 \ud83d\udd1c \ud83d\udd22 \ud83d\udcbd \ud83d\udd22 \ud83d\udd22, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f Pydantic \ud83c\udff7, \ud83d\udcc7, \ud83d\udcd6, \ud83d\udcca \ud83d\udcb2 \ud83d\udc96 \ud83d\udd22, \ud83c\udfbb, \u2652\ufe0f.</p> Python 3.8+ <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item) -&gt; Item:\n    return item\n\n\n@app.get(\"/items/\")\nasync def read_items() -&gt; List[Item]:\n    return [\n        Item(name=\"Portal Gun\", price=42.0),\n        Item(name=\"Plumbus\", price=32.0),\n    ]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item) -&gt; Item:\n    return item\n\n\n@app.get(\"/items/\")\nasync def read_items() -&gt; list[Item]:\n    return [\n        Item(name=\"Portal Gun\", price=42.0),\n        Item(name=\"Plumbus\", price=32.0),\n    ]\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []\n\n\n@app.post(\"/items/\")\nasync def create_item(item: Item) -&gt; Item:\n    return item\n\n\n@app.get(\"/items/\")\nasync def read_items() -&gt; list[Item]:\n    return [\n        Item(name=\"Portal Gun\", price=42.0),\n        Item(name=\"Plumbus\", price=32.0),\n    ]\n</code></pre> <p>ReadyAPI \ud83d\udd1c \u2699\ufe0f \ud83d\udc49 \ud83d\udce8 \ud83c\udd8e:</p> <ul> <li>\u2714 \ud83d\udce8 \ud83d\udcbd.<ul> <li>\ud83d\udea5 \ud83d\udcbd \u274c (\u2705 \ud83d\udc46 \u274c \ud83c\udfd1), \u26ab\ufe0f \u26d3 \ud83d\udc48 \ud83d\udc46 \ud83d\udcf1 \ud83d\udcdf \ud83d\udc94, \ud83d\udeab \ud83d\udeec \u26ab\ufe0f\u2754 \u26ab\ufe0f \ud83d\udd1c, &amp; \u26ab\ufe0f \ud83d\udd1c \ud83d\udce8 \ud83d\udcbd \u274c \u21a9\ufe0f \ud83d\udeec \u274c \ud83d\udcbd. \ud83d\udc49 \ud83c\udf0c \ud83d\udc46 &amp; \ud83d\udc46 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udcaa \ud83c\udfaf \ud83d\udc48 \ud83d\udc6b \ud83d\udd1c \ud83d\udce8 \ud83d\udcbd &amp; \ud83d\udcbd \ud83d\udca0 \ud83d\udcc8.</li> </ul> </li> <li>\ud83d\udeae \ud83c\udfbb \ud83d\udd17 \ud83d\udce8, \ud83d\uddc4 \u27a1 \ud83d\udee0\ufe0f.<ul> <li>\ud83d\udc49 \ud83d\udd1c \u2699\ufe0f \ud83c\udfe7 \ud83e\ude7a.</li> <li>\u26ab\ufe0f \ud83d\udd1c \u2699\ufe0f \ud83c\udfe7 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udcdf \u26a1 \ud83e\uddf0.</li> </ul> </li> </ul> <p>\u270b\ufe0f \ud83c\udfc6 \ud83e\udd48:</p> <ul> <li>\u26ab\ufe0f \ud83d\udd1c \ud83d\udcc9 &amp; \u26fd \ud83d\udd22 \ud83d\udcca \u26ab\ufe0f\u2754 \ud83d\udd2c \ud83d\udce8 \ud83c\udd8e.<ul> <li>\ud83d\udc49 \u2734\ufe0f \u26a0 \ud83d\udc82\u200d\u2642, \ud83d\udc65 \ud83d\udd1c \ud83d\udc40 \ud83c\udf05 \ud83d\udc48 \ud83d\udd1b.</li> </ul> </li> </ul>"},{"location":"tutorial/response-model/#response_model","title":"<code>response_model</code> \ud83d\udd22","text":"<p>\ud83d\udce4 \ud83d\udcbc \ud83c\udf10\u2754 \ud83d\udc46 \ud83d\udcaa \u2696\ufe0f \ud83d\udc9a \ud83d\udce8 \ud83d\udcbd \ud83d\udc48 \ud83d\udeab \u26ab\ufe0f\u2754 \u26ab\ufe0f\u2754 \ud83c\udd8e \ud83d\udce3.</p> <p>\ud83d\uddbc, \ud83d\udc46 \ud83d\udcaa \ud83d\udc9a \ud83d\udce8 \ud83d\udcd6 \u2696\ufe0f \ud83d\udcbd \ud83c\udf9a, \u270b\ufe0f \ud83d\udce3 \u26ab\ufe0f Pydantic \ud83c\udff7. \ud83d\udc49 \ud83c\udf0c Pydantic \ud83c\udff7 \ud83d\udd1c \ud83c\udf10 \ud83d\udcbd \ud83e\uddfe, \ud83d\udd2c, \u2652\ufe0f. \ud83c\udf9a \ud83d\udc48 \ud83d\udc46 \ud83d\udce8 (\u2705 \ud83d\udcd6 \u2696\ufe0f \ud83d\udcbd \ud83c\udf9a).</p> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udeae \ud83d\udce8 \ud83c\udd8e \u270d, \ud83e\uddf0 &amp; \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udd1c \ud83d\ude2d \u23ee\ufe0f (\u2611) \u274c \ud83d\udcac \ud83d\udc46 \ud83d\udc48 \ud83d\udc46 \ud83d\udd22 \ud83d\udeec \ud83c\udd8e (\u2705#\ufe0f\u20e3) \ud83d\udc48 \ud83c\udf8f \u26aa\ufe0f\u27a1\ufe0f \u26ab\ufe0f\u2754 \ud83d\udc46 \ud83d\udce3 (\u2705 Pydantic \ud83c\udff7).</p> <p>\ud83d\udcda \ud83d\udcbc, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \u27a1 \ud83d\udee0\ufe0f \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udd22 <code>response_model</code> \u21a9\ufe0f \ud83d\udce8 \ud83c\udd8e.</p> <p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>response_model</code> \ud83d\udd22 \ud83d\ude46 \u27a1 \ud83d\udee0\ufe0f:</p> <ul> <li><code>@app.get()</code></li> <li><code>@app.post()</code></li> <li><code>@app.put()</code></li> <li><code>@app.delete()</code></li> <li>\u2652\ufe0f.</li> </ul> Python 3.8+ <pre><code>from typing import Any, List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []\n\n\n@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item) -&gt; Any:\n    return item\n\n\n@app.get(\"/items/\", response_model=List[Item])\nasync def read_items() -&gt; Any:\n    return [\n        {\"name\": \"Portal Gun\", \"price\": 42.0},\n        {\"name\": \"Plumbus\", \"price\": 32.0},\n    ]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+ <pre><code>from typing import Any\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []\n\n\n@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item) -&gt; Any:\n    return item\n\n\n@app.get(\"/items/\", response_model=list[Item])\nasync def read_items() -&gt; Any:\n    return [\n        {\"name\": \"Portal Gun\", \"price\": 42.0},\n        {\"name\": \"Plumbus\", \"price\": 32.0},\n    ]\n</code></pre> <pre><code>from typing import Any, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []\n\n\n@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item) -&gt; Any:\n    return item\n\n\n@app.get(\"/items/\", response_model=list[Item])\nasync def read_items() -&gt; Any:\n    return [\n        {\"name\": \"Portal Gun\", \"price\": 42.0},\n        {\"name\": \"Plumbus\", \"price\": 32.0},\n    ]\n</code></pre> <p>Note</p> <p>\ud83d\udc40 \ud83d\udc48 <code>response_model</code> \ud83d\udd22 \"\ud83d\udc68\u200d\ud83c\udfa8\" \ud83d\udc69\u200d\ud83d\udd2c (<code>get</code>, <code>post</code>, \u2652\ufe0f). \ud83d\udeab \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22, \ud83d\udc96 \ud83c\udf10 \ud83d\udd22 &amp; \ud83d\udcaa.</p> <p><code>response_model</code> \ud83d\udce8 \ud83c\udf8f \ud83c\udd8e \ud83d\udc46 \ud83d\udd1c \ud83d\udce3 Pydantic \ud83c\udff7 \ud83c\udfd1,, \u26ab\ufe0f \ud83d\udcaa Pydantic \ud83c\udff7, \u270b\ufe0f \u26ab\ufe0f \ud83d\udcaa, \u2705 <code>list</code> Pydantic \ud83c\udff7, \ud83d\udc96 <code>List[Item]</code>.</p> <p>ReadyAPI \ud83d\udd1c \u2699\ufe0f \ud83d\udc49 <code>response_model</code> \ud83c\udf10 \ud83d\udcbd \ud83e\uddfe, \ud83d\udd2c, \u2652\ufe0f. &amp; \ud83d\udddc &amp; \u26fd \ud83d\udd22 \ud83d\udcca \ud83d\udeae \ud83c\udd8e \ud83d\udcc4.</p> <p>Tip</p> <p>\ud83d\udea5 \ud83d\udc46 \u2714\ufe0f \u26a0 \ud83c\udd8e \u2705 \ud83d\udc46 \ud83d\udc68\u200d\ud83c\udfa8, \u270d, \u2652\ufe0f, \ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83d\udd22 \ud83d\udce8 \ud83c\udd8e <code>Any</code>.</p> <p>\ud83d\udc48 \ud83c\udf0c \ud83d\udc46 \ud83d\udcac \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udc48 \ud83d\udc46 \ud83d\ude2b \ud83d\udeec \ud83d\udd73. \u270b\ufe0f ReadyAPI \ud83d\udd1c \ud83d\udcbd \ud83e\uddfe, \ud83d\udd2c, \ud83d\udda5, \u2652\ufe0f. \u23ee\ufe0f <code>response_model</code>.</p>"},{"location":"tutorial/response-model/#response_model_1","title":"<code>response_model</code> \ud83d\udceb","text":"<p>\ud83d\udea5 \ud83d\udc46 \ud83d\udce3 \ud83d\udc6f\u200d\u2642\ufe0f \ud83d\udce8 \ud83c\udd8e &amp; <code>response_model</code>, <code>response_model</code> \ud83d\udd1c \u270a \ud83d\udceb &amp; \u2699\ufe0f ReadyAPI.</p> <p>\ud83d\udc49 \ud83c\udf0c \ud83d\udc46 \ud83d\udcaa \ud83d\udeae \u2611 \ud83c\udd8e \u270d \ud83d\udc46 \ud83d\udd22 \ud83d\udd50\u2754 \ud83d\udc46 \ud83d\udeec \ud83c\udd8e \ud83c\udf8f \ud83c\udf18 \ud83d\udce8 \ud83c\udff7, \u2699\ufe0f \ud83d\udc68\u200d\ud83c\udfa8 &amp; \ud83e\uddf0 \ud83d\udc96 \u270d. &amp; \ud83d\udc46 \ud83d\udcaa \u2714\ufe0f ReadyAPI \ud83d\udcbd \ud83d\udd2c, \ud83e\uddfe, \u2652\ufe0f. \u2699\ufe0f <code>response_model</code>.</p> <p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>response_model=None</code> \u274e \ud83c\udfd7 \ud83d\udce8 \ud83c\udff7 \ud83d\udc48 \u27a1 \ud83d\udee0\ufe0f, \ud83d\udc46 5\ufe0f\u20e3\ud83d\udcc6 \ud83d\udcaa \u26ab\ufe0f \ud83d\udea5 \ud83d\udc46 \u274e \ud83c\udd8e \u270d \ud83d\udc5c \ud83d\udc48 \ud83d\udeab \u2611 Pydantic \ud83c\udfd1, \ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \ud83d\uddbc \ud83d\udc48 1\ufe0f\u20e3 \ud83d\udcc4 \ud83d\udd1b.</p>"},{"location":"tutorial/response-model/#_1","title":"\ud83d\udce8 \ud83c\udf8f \ud83d\udd22 \ud83d\udcbd","text":"<p>\ud83d\udce5 \ud83d\udc65 \ud83d\udce3 <code>UserIn</code> \ud83c\udff7, \u26ab\ufe0f \ud83d\udd1c \ud83d\udd0c \ud83d\udd22 \ud83d\udd10:</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n# Don't do this in production!\n@app.post(\"/user/\")\nasync def create_user(user: UserIn) -&gt; UserIn:\n    return user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+ <pre><code>from pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n# Don't do this in production!\n@app.post(\"/user/\")\nasync def create_user(user: UserIn) -&gt; UserIn:\n    return user\n</code></pre> <p>Info</p> <p>\u2699\ufe0f <code>EmailStr</code>, \ud83e\udd47 \u274e <code>email-validator</code>.</p> <p>\ud83e\udd36 \u24c2. <code>pip install email-validator</code> \u2696\ufe0f <code>pip install pydantic[email]</code>.</p> <p>&amp; \ud83d\udc65 \u2699\ufe0f \ud83d\udc49 \ud83c\udff7 \ud83d\udce3 \ud83d\udc46 \ud83d\udd22 &amp; \ud83c\udf8f \ud83c\udff7 \ud83d\udce3 \ud83d\udc46 \ud83d\udd22:</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n# Don't do this in production!\n@app.post(\"/user/\")\nasync def create_user(user: UserIn) -&gt; UserIn:\n    return user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+ <pre><code>from pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n# Don't do this in production!\n@app.post(\"/user/\")\nasync def create_user(user: UserIn) -&gt; UserIn:\n    return user\n</code></pre> <p>\ud83d\udd1c, \ud83d\udd50\u2754 \ud83d\udda5 \ud83c\udfd7 \ud83d\udc69\u200d\ud83d\udcbb \u23ee\ufe0f \ud83d\udd10, \ud83d\udee0\ufe0f \ud83d\udd1c \ud83d\udce8 \ud83c\udf8f \ud83d\udd10 \ud83d\udce8.</p> <p>\ud83d\udc49 \ud83d\udcbc, \u26ab\ufe0f \ud83d\udcaa \ud83d\udeab \u26a0, \u21a9\ufe0f \u26ab\ufe0f \ud83c\udf8f \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udce8 \ud83d\udd10.</p> <p>\u270b\ufe0f \ud83d\udea5 \ud83d\udc65 \u2699\ufe0f \ud83c\udf8f \ud83c\udff7 \u27951\ufe0f\u20e3 \u27a1 \ud83d\udee0\ufe0f, \ud83d\udc65 \ud83d\udcaa \ud83d\udce8 \ud83d\udc46 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd10 \ud83d\udd20 \ud83d\udc69\u200d\ud83d\udcbb.</p> <p>Danger</p> <p>\ud83d\ude45 \ud83c\udfea \u2705 \ud83d\udd10 \ud83d\udc69\u200d\ud83d\udcbb \u2696\ufe0f \ud83d\udce8 \u26ab\ufe0f \ud83d\udce8 \ud83d\udc96 \ud83d\udc49, \ud83d\udea5 \ud83d\udc46 \ud83d\udcad \ud83c\udf10 \u26a0 &amp; \ud83d\udc46 \ud83d\udcad \u26ab\ufe0f\u2754 \ud83d\udc46 \ud83d\udd28.</p>"},{"location":"tutorial/response-model/#_2","title":"\ud83d\udeae \ud83d\udd22 \ud83c\udff7","text":"<p>\ud83d\udc65 \ud83d\udcaa \u21a9\ufe0f \u270d \ud83d\udd22 \ud83c\udff7 \u23ee\ufe0f \ud83d\udd22 \ud83d\udd10 &amp; \ud83d\udd22 \ud83c\udff7 \ud83c\udf75 \u26ab\ufe0f:</p> Python 3.8+ <pre><code>from typing import Any, Union\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user: UserIn) -&gt; Any:\n    return user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+ <pre><code>from typing import Any\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user: UserIn) -&gt; Any:\n    return user\n</code></pre> <p>\ud83d\udce5, \u270b\ufe0f \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22 \ud83d\udeec \ud83c\udf8f \ud83d\udd22 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udc48 \ud83d\udd0c \ud83d\udd10:</p> Python 3.8+ <pre><code>from typing import Any, Union\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user: UserIn) -&gt; Any:\n    return user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+ <pre><code>from typing import Any\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user: UserIn) -&gt; Any:\n    return user\n</code></pre> <p>...\ud83d\udc65 \ud83d\udce3 <code>response_model</code> \ud83d\udc46 \ud83c\udff7 <code>UserOut</code>, \ud83d\udc48 \ud83d\udeab \ud83d\udd0c \ud83d\udd10:</p> Python 3.8+ <pre><code>from typing import Any, Union\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user: UserIn) -&gt; Any:\n    return user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+ <pre><code>from typing import Any\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\n@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user: UserIn) -&gt; Any:\n    return user\n</code></pre> <p>, ReadyAPI \ud83d\udd1c \u270a \ud83d\udc85 \ud83d\udda5 \ud83d\udc45 \ud83c\udf10 \ud83d\udcbd \ud83d\udc48 \ud83d\udeab \ud83d\udce3 \ud83d\udd22 \ud83c\udff7 (\u2699\ufe0f Pydantic).</p>"},{"location":"tutorial/response-model/#response_model_2","title":"<code>response_model</code> \u2696\ufe0f \ud83d\udce8 \ud83c\udd8e","text":"<p>\ud83d\udc49 \ud83d\udcbc, \u21a9\ufe0f 2\ufe0f\u20e3 \ud83c\udff7 \ud83c\udf8f, \ud83d\udea5 \ud83d\udc65 \u270d \ud83d\udd22 \ud83d\udce8 \ud83c\udd8e <code>UserOut</code>, \ud83d\udc68\u200d\ud83c\udfa8 &amp; \ud83e\uddf0 \ud83d\udd1c \ud83d\ude2d \ud83d\udc48 \ud83d\udc65 \ud83d\udeec \u274c \ud83c\udd8e, \ud83d\udcda \ud83c\udf8f \ud83c\udf93.</p> <p>\ud83d\udc48 \u26ab\ufe0f\u2754 \ud83d\udc49 \ud83d\uddbc \ud83d\udc65 \u2714\ufe0f \ud83d\udce3 \u26ab\ufe0f <code>response_model</code> \ud83d\udd22.</p> <p>...\u270b\ufe0f \ud83d\ude23 \ud83d\udc42 \ud83d\udd1b \ud83d\udc40 \u2754 \u274e \ud83d\udc48.</p>"},{"location":"tutorial/response-model/#_3","title":"\ud83d\udce8 \ud83c\udd8e &amp; \ud83d\udcbd \ud83d\udda5","text":"<p>\u27a1\ufe0f \ud83d\ude23 \u26aa\ufe0f\u27a1\ufe0f \u23ee\ufe0f \ud83d\uddbc. \ud83d\udc65 \ud83d\udc9a \u270d \ud83d\udd22 \u23ee\ufe0f 1\ufe0f\u20e3 \ud83c\udd8e \u270b\ufe0f \ud83d\udce8 \ud83d\udd73 \ud83d\udc48 \ud83d\udd0c \ud83c\udf05 \ud83d\udcbd.</p> <p>\ud83d\udc65 \ud83d\udc9a ReadyAPI \ud83d\udea7 \ud83d\udda5 \ud83d\udcca \u2699\ufe0f \ud83d\udce8 \ud83c\udff7.</p> <p>\u23ee\ufe0f \ud83d\uddbc, \u21a9\ufe0f \ud83c\udf93 \ud83c\udf8f, \ud83d\udc65 \u2714\ufe0f \u2699\ufe0f <code>response_model</code> \ud83d\udd22. \u270b\ufe0f \ud83d\udc48 \u26d3 \ud83d\udc48 \ud83d\udc65 \ud83d\udeab \ud83e\udd1a \ud83d\udc15\u200d\ud83e\uddba \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc68\u200d\ud83c\udfa8 &amp; \ud83e\uddf0 \u2705 \ud83d\udd22 \ud83d\udce8 \ud83c\udd8e.</p> <p>\u270b\ufe0f \ud83c\udf05 \ud83d\udcbc \ud83c\udf10\u2754 \ud83d\udc65 \ud83d\udcaa \ud83d\udd73 \ud83d\udc96 \ud83d\udc49, \ud83d\udc65 \ud83d\udc9a \ud83c\udff7 \u26fd/\u274e \ud83d\udcca \ud83d\udc49 \ud83d\uddbc.</p> <p>&amp; \ud83d\udc48 \ud83d\udcbc, \ud83d\udc65 \ud83d\udcaa \u2699\ufe0f \ud83c\udf93 &amp; \ud83e\uddec \u270a \ud83d\udcc8 \ud83d\udd22 \ud83c\udd8e \u270d \ud83e\udd1a \ud83d\udc4d \ud83d\udc15\u200d\ud83e\uddba \ud83d\udc68\u200d\ud83c\udfa8 &amp; \ud83e\uddf0, &amp; \ud83e\udd1a ReadyAPI \ud83d\udcbd \ud83d\udda5.</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass BaseUser(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None\n\n\nclass UserIn(BaseUser):\n    password: str\n\n\n@app.post(\"/user/\")\nasync def create_user(user: UserIn) -&gt; BaseUser:\n    return user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+ <pre><code>from pydantic import BaseModel, EmailStr\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass BaseUser(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None\n\n\nclass UserIn(BaseUser):\n    password: str\n\n\n@app.post(\"/user/\")\nasync def create_user(user: UserIn) -&gt; BaseUser:\n    return user\n</code></pre> <p>\u23ee\ufe0f \ud83d\udc49, \ud83d\udc65 \ud83e\udd1a \ud83c\udfed \ud83d\udc15\u200d\ud83e\uddba, \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc68\u200d\ud83c\udfa8 &amp; \u270d \ud83d\udc49 \ud83d\udcdf \u2611 \u2696 \ud83c\udd8e, \u270b\ufe0f \ud83d\udc65 \ud83e\udd1a \ud83d\udcbd \ud83d\udda5 \u26aa\ufe0f\u27a1\ufe0f ReadyAPI.</p> <p>\u2754 \ud83d\udd28 \ud83d\udc49 \ud83d\udc77 \u2753 \u27a1\ufe0f \u2705 \ud83d\udc48 \ud83d\udc45. \ud83d\udc76</p>"},{"location":"tutorial/response-model/#_4","title":"\ud83c\udd8e \u270d &amp; \ud83c\udfed","text":"<p>\ud83e\udd47 \u27a1\ufe0f \ud83d\udc40 \u2754 \ud83d\udc68\u200d\ud83c\udfa8, \u270d &amp; \ud83c\udf8f \ud83e\uddf0 \ud83d\udd1c \ud83d\udc40 \ud83d\udc49.</p> <p><code>BaseUser</code> \u2714\ufe0f \ud83e\udde2 \ud83c\udfd1. \u2934\ufe0f <code>UserIn</code> \ud83d\ude16 \u26aa\ufe0f\u27a1\ufe0f <code>BaseUser</code> &amp; \ud83d\udeae <code>password</code> \ud83c\udfd1,, \u26ab\ufe0f \ud83d\udd1c \ud83d\udd0c \ud83c\udf10 \ud83c\udfd1 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc6f\u200d\u2642\ufe0f \ud83c\udff7.</p> <p>\ud83d\udc65 \u270d \ud83d\udd22 \ud83d\udce8 \ud83c\udd8e <code>BaseUser</code>, \u270b\ufe0f \ud83d\udc65 \ud83e\udd19 \ud83d\udeec <code>UserIn</code> \ud83d\udc50.</p> <p>\ud83d\udc68\u200d\ud83c\udfa8, \u270d, &amp; \ud83c\udf8f \ud83e\uddf0 \ud83c\udfc6 \ud83d\udeab \ud83d\ude2d \ud83d\udd03 \ud83d\udc49 \u21a9\ufe0f, \u2328 \u2696, <code>UserIn</code> \ud83c\udfff <code>BaseUser</code>, \u2754 \u26d3 \u26ab\ufe0f \u2611 \ud83c\udd8e \ud83d\udd50\u2754 \u26ab\ufe0f\u2754 \u231b \ud83d\udd73 \ud83d\udc48 <code>BaseUser</code>.</p>"},{"location":"tutorial/response-model/#readyapi","title":"ReadyAPI \ud83d\udcbd \ud83d\udda5","text":"<p>\ud83d\udd1c, ReadyAPI, \u26ab\ufe0f \ud83d\udd1c \ud83d\udc40 \ud83d\udce8 \ud83c\udd8e &amp; \u2692 \ud83d\udcad \ud83d\udc48 \u26ab\ufe0f\u2754 \ud83d\udc46 \ud83d\udce8 \ud83d\udd0c \ud83d\udd74 \ud83c\udfd1 \ud83d\udc48 \ud83d\udce3 \ud83c\udd8e.</p> <p>ReadyAPI \ud83d\udd28 \ud83d\udcda \ud83d\udc5c \ud83d\udd18 \u23ee\ufe0f Pydantic \u2692 \ud83d\udcad \ud83d\udc48 \ud83d\udcda \ud83c\udf8f \ud83d\udeab \ud83c\udf93 \ud83e\uddec \ud83d\udeab \u2699\ufe0f \ud83d\udce8 \ud83d\udcbd \ud83d\udda5, \u23ea \ud83d\udc46 \ud83d\udcaa \ud83d\udd1a \ud83c\udd99 \ud83d\udeec \ud83c\udf05 \ud83c\udf05 \ud83d\udcbd \ud83c\udf18 \u26ab\ufe0f\u2754 \ud83d\udc46 \ud83d\udcc8.</p> <p>\ud83d\udc49 \ud83c\udf0c, \ud83d\udc46 \ud83d\udcaa \ud83e\udd1a \ud83c\udfc6 \ud83d\udc6f\u200d\u2642\ufe0f \ud83c\udf0f: \ud83c\udd8e \u270d \u23ee\ufe0f \ud83c\udfed \ud83d\udc15\u200d\ud83e\uddba &amp; \ud83d\udcbd \ud83d\udda5.</p>"},{"location":"tutorial/response-model/#_5","title":"\ud83d\udc40 \u26ab\ufe0f \ud83e\ude7a","text":"<p>\ud83d\udd50\u2754 \ud83d\udc46 \ud83d\udc40 \ud83c\udfe7 \ud83e\ude7a, \ud83d\udc46 \ud83d\udcaa \u2705 \ud83d\udc48 \ud83d\udd22 \ud83c\udff7 &amp; \ud83d\udd22 \ud83c\udff7 \ud83d\udd1c \ud83d\udc6f\u200d\u2642\ufe0f \u2714\ufe0f \ud83d\udc6b \ud83d\udc4d \ud83c\udfbb \ud83d\udd17:</p> <p></p> <p>&amp; \ud83d\udc6f\u200d\u2642\ufe0f \ud83c\udff7 \ud83d\udd1c \u2699\ufe0f \ud83c\udf93 \ud83d\udee0\ufe0f \ud83e\uddfe:</p> <p></p>"},{"location":"tutorial/response-model/#_6","title":"\ud83c\udf8f \ud83d\udce8 \ud83c\udd8e \u270d","text":"<p>\ud83d\udce4 5\ufe0f\u20e3\ud83d\udcc6 \ud83d\udcbc \ud83c\udf10\u2754 \ud83d\udc46 \ud83d\udce8 \ud83d\udd73 \ud83d\udc48 \ud83d\udeab \u2611 Pydantic \ud83c\udfd1 &amp; \ud83d\udc46 \u270d \u26ab\ufe0f \ud83d\udd22, \ud83d\udd74 \ud83e\udd1a \ud83d\udc15\u200d\ud83e\uddba \ud83d\ude9a \ud83c\udfed (\ud83d\udc68\u200d\ud83c\udfa8, \u270d, \u2652\ufe0f).</p>"},{"location":"tutorial/response-model/#_7","title":"\ud83d\udce8 \ud83d\udce8 \ud83d\udd17","text":"<p>\ud83c\udfc6 \u26a0 \ud83d\udcbc \ud83d\udd1c \ud83d\udeec \ud83d\udce8 \ud83d\udd17 \ud83d\udd2c \u23ea \ud83c\udfe7 \ud83e\ude7a.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, Response\nfrom readyapi.responses import JSONResponse, RedirectResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/portal\")\nasync def get_portal(teleport: bool = False) -&gt; Response:\n    if teleport:\n        return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n    return JSONResponse(content={\"message\": \"Here's your interdimensional portal.\"})\n</code></pre> <p>\ud83d\udc49 \ud83d\ude45 \ud83d\udcbc \ud83c\udf75 \ud83d\udd01 ReadyAPI \u21a9\ufe0f \ud83d\udce8 \ud83c\udd8e \u270d \ud83c\udf93 (\u2696\ufe0f \ud83c\udfff) <code>Response</code>.</p> <p>&amp; \ud83e\uddf0 \ud83d\udd1c \ud83d\ude04 \u21a9\ufe0f \ud83d\udc6f\u200d\u2642\ufe0f <code>RedirectResponse</code> &amp; <code>JSONResponse</code> \ud83c\udfff <code>Response</code>, \ud83c\udd8e \u270d \u2611.</p>"},{"location":"tutorial/response-model/#_8","title":"\u270d \ud83d\udce8 \ud83c\udfff","text":"<p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83c\udfff <code>Response</code> \ud83c\udd8e \u270d:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import RedirectResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/teleport\")\nasync def get_teleport() -&gt; RedirectResponse:\n    return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n</code></pre> <p>\ud83d\udc49 \ud83d\udd1c \ud83d\udc77 \u21a9\ufe0f <code>RedirectResponse</code> \ud83c\udfff <code>Response</code>, &amp; ReadyAPI \ud83d\udd1c \ud83d\udd01 \ud83c\udf75 \ud83d\udc49 \ud83d\ude45 \ud83d\udcbc.</p>"},{"location":"tutorial/response-model/#_9","title":"\u274c \ud83d\udce8 \ud83c\udd8e \u270d","text":"<p>\u270b\ufe0f \ud83d\udd50\u2754 \ud83d\udc46 \ud83d\udce8 \ud83c\udf8f \u274c \ud83c\udf9a \ud83d\udc48 \ud83d\udeab \u2611 Pydantic \ud83c\udd8e (\u2705 \ud83d\udcbd \ud83c\udf9a) &amp; \ud83d\udc46 \u270d \u26ab\ufe0f \ud83d\udc96 \ud83d\udc48 \ud83d\udd22, ReadyAPI \ud83d\udd1c \ud83d\udd04 \u270d Pydantic \ud83d\udce8 \ud83c\udff7 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc48 \ud83c\udd8e \u270d, &amp; \ud83d\udd1c \u274c.</p> <p>\ud83c\udf8f \ud83d\udd1c \ud83d\udd28 \ud83d\udea5 \ud83d\udc46 \u2714\ufe0f \ud83d\udd73 \ud83d\udc96 \ud83c\uddea\ud83c\uddfa \ud83d\udd96 \ud83c\udf8f \ud83c\udd8e \ud83c\udf10\u2754 1\ufe0f\u20e3 \u2696\ufe0f \ud83c\udf05 \ud83d\udc6b \ud83d\udeab \u2611 Pydantic \ud83c\udd8e, \ud83d\uddbc \ud83d\udc49 \ud83d\udd1c \u274c \ud83d\udc76:</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI, Response\nfrom readyapi.responses import RedirectResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/portal\")\nasync def get_portal(teleport: bool = False) -&gt; Union[Response, dict]:\n    if teleport:\n        return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+ <pre><code>from readyapi import ReadyAPI, Response\nfrom readyapi.responses import RedirectResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/portal\")\nasync def get_portal(teleport: bool = False) -&gt; Response | dict:\n    if teleport:\n        return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}\n</code></pre> <p>...\ud83d\udc49 \u274c \u21a9\ufe0f \ud83c\udd8e \u270d \ud83d\udeab Pydantic \ud83c\udd8e &amp; \ud83d\udeab \ud83d\udc41 <code>Response</code> \ud83c\udf93 \u2696\ufe0f \ud83c\udfff, \u26ab\ufe0f \ud83c\uddea\ud83c\uddfa (\ud83d\ude46 2\ufe0f\u20e3) \ud83d\udd96 <code>Response</code> &amp; <code>dict</code>.</p>"},{"location":"tutorial/response-model/#_10","title":"\u274e \ud83d\udce8 \ud83c\udff7","text":"<p>\u25b6\ufe0f \u26aa\ufe0f\u27a1\ufe0f \ud83d\uddbc \ud83d\udd1b, \ud83d\udc46 5\ufe0f\u20e3\ud83d\udcc6 \ud83d\udeab \ud83d\udc9a \u2714\ufe0f \ud83d\udd22 \ud83d\udcbd \ud83d\udd2c, \ud83e\uddfe, \ud83d\udda5, \u2652\ufe0f. \ud83d\udc48 \ud83c\udfad ReadyAPI.</p> <p>\u270b\ufe0f \ud83d\udc46 \ud83d\udcaa \ud83d\udc9a \ud83d\udea7 \ud83d\udce8 \ud83c\udd8e \u270d \ud83d\udd22 \ud83e\udd1a \ud83d\udc15\u200d\ud83e\uddba \u26aa\ufe0f\u27a1\ufe0f \ud83e\uddf0 \ud83d\udc96 \ud83d\udc68\u200d\ud83c\udfa8 &amp; \ud83c\udd8e \u2611 (\u2705 \u270d).</p> <p>\ud83d\udc49 \ud83d\udcbc, \ud83d\udc46 \ud83d\udcaa \u274e \ud83d\udce8 \ud83c\udff7 \u26a1 \u2692 <code>response_model=None</code>:</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI, Response\nfrom readyapi.responses import RedirectResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/portal\", response_model=None)\nasync def get_portal(teleport: bool = False) -&gt; Union[Response, dict]:\n    if teleport:\n        return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+ <pre><code>from readyapi import ReadyAPI, Response\nfrom readyapi.responses import RedirectResponse\n\napp = ReadyAPI()\n\n\n@app.get(\"/portal\", response_model=None)\nasync def get_portal(teleport: bool = False) -&gt; Response | dict:\n    if teleport:\n        return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}\n</code></pre> <p>\ud83d\udc49 \ud83d\udd1c \u2692 ReadyAPI \ud83d\udeb6 \ud83d\udce8 \ud83c\udff7 \u26a1 &amp; \ud83d\udc48 \ud83c\udf0c \ud83d\udc46 \ud83d\udcaa \u2714\ufe0f \ud83d\ude46 \ud83d\udce8 \ud83c\udd8e \u270d \ud83d\udc46 \ud83d\udcaa \ud83c\udf75 \u26ab\ufe0f \ud83e\udd15 \ud83d\udc46 ReadyAPI \ud83c\ude38. \ud83d\udc76</p>"},{"location":"tutorial/response-model/#_11","title":"\ud83d\udce8 \ud83c\udff7 \ud83d\udd22 \ud83d\udd22","text":"<p>\ud83d\udc46 \ud83d\udce8 \ud83c\udff7 \ud83d\udcaa \u2714\ufe0f \ud83d\udd22 \ud83d\udcb2, \ud83d\udc96:</p> Python 3.8+ <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]\n</code></pre> <ul> <li><code>description: Union[str, None] = None</code> (\u2696\ufe0f <code>str | None = None</code> \ud83d\udc0d 3\ufe0f\u20e3.1\ufe0f\u20e30\ufe0f\u20e3) \u2714\ufe0f \ud83d\udd22 <code>None</code>.</li> <li><code>tax: float = 10.5</code> \u2714\ufe0f \ud83d\udd22 <code>10.5</code>.</li> <li><code>tags: List[str] = []</code> \ud83d\udd22 \ud83d\udec1 \ud83d\udcc7: <code>[]</code>.</li> </ul> <p>\u270b\ufe0f \ud83d\udc46 \ud83d\udcaa \ud83d\udc9a \ud83d\udeab \ud83d\udc6b \u26aa\ufe0f\u27a1\ufe0f \ud83c\udfc1 \ud83d\udea5 \ud83d\udc6b \ud83d\udeab \ud83e\udd19 \ud83c\udfea.</p> <p>\ud83d\uddbc, \ud83d\udea5 \ud83d\udc46 \u2714\ufe0f \ud83c\udff7 \u23ee\ufe0f \ud83d\udcda \ud83d\udce6 \ud83d\udd22 \u2601 \ud83d\udcbd, \u270b\ufe0f \ud83d\udc46 \ud83d\udeab \ud83d\udc9a \ud83d\udce8 \ud83d\udcf6 \ud83d\udccf \ud83c\udfbb \ud83d\udce8 \ud83c\udf15 \ud83d\udd22 \ud83d\udcb2.</p>"},{"location":"tutorial/response-model/#response_model_exclude_unset","title":"\u2699\ufe0f <code>response_model_exclude_unset</code> \ud83d\udd22","text":"<p>\ud83d\udc46 \ud83d\udcaa \u2692 \u27a1 \ud83d\udee0\ufe0f \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udd22 <code>response_model_exclude_unset=True</code>:</p> Python 3.8+ <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: List[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}\n\n\n@app.get(\"/items/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]\n</code></pre> <p>&amp; \ud83d\udc48 \ud83d\udd22 \ud83d\udcb2 \ud83c\udfc6 \ud83d\udeab \ud83d\udd0c \ud83d\udce8, \ud83d\udd74 \ud83d\udcb2 \ud83e\udd19 \u2692.</p> <p>, \ud83d\udea5 \ud83d\udc46 \ud83d\udce8 \ud83d\udce8 \ud83d\udc48 \u27a1 \ud83d\udee0\ufe0f \ud83c\udfec \u23ee\ufe0f \ud83c\udd94 <code>foo</code>, \ud83d\udce8 (\ud83d\udeab \u2705 \ud83d\udd22 \ud83d\udcb2) \ud83d\udd1c:</p> <pre><code>{\n    \"name\": \"Foo\",\n    \"price\": 50.2\n}\n</code></pre> <p>Info</p> <p>ReadyAPI \u2699\ufe0f Pydantic \ud83c\udff7 <code>.dict()</code> \u23ee\ufe0f \ud83d\udeae <code>exclude_unset</code> \ud83d\udd22 \ud83c\udfc6 \ud83d\udc49.</p> <p>Info</p> <p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f:</p> <ul> <li><code>response_model_exclude_defaults=True</code></li> <li><code>response_model_exclude_none=True</code></li> </ul> <p>\ud83d\udd2c Pydantic \ud83e\ude7a <code>exclude_defaults</code> &amp; <code>exclude_none</code>.</p>"},{"location":"tutorial/response-model/#_12","title":"\ud83d\udcca \u23ee\ufe0f \ud83d\udcb2 \ud83c\udfd1 \u23ee\ufe0f \ud83d\udd22","text":"<p>\u270b\ufe0f \ud83d\udea5 \ud83d\udc46 \ud83d\udcca \u2714\ufe0f \ud83d\udcb2 \ud83c\udff7 \ud83c\udfd1 \u23ee\ufe0f \ud83d\udd22 \ud83d\udcb2, \ud83d\udc96 \ud83c\udfec \u23ee\ufe0f \ud83c\udd94 <code>bar</code>:</p> <pre><code>{\n    \"name\": \"Bar\",\n    \"description\": \"The bartenders\",\n    \"price\": 62,\n    \"tax\": 20.2\n}\n</code></pre> <p>\ud83d\udc6b \ud83d\udd1c \ud83d\udd0c \ud83d\udce8.</p>"},{"location":"tutorial/response-model/#_13","title":"\ud83d\udcca \u23ee\ufe0f \ud83c\udf8f \ud83d\udcb2 \ud83d\udd22","text":"<p>\ud83d\udea5 \ud83d\udcca \u2714\ufe0f \ud83c\udf8f \ud83d\udcb2 \ud83d\udd22 \ud83d\udd50, \ud83d\udc96 \ud83c\udfec \u23ee\ufe0f \ud83c\udd94 <code>baz</code>:</p> <pre><code>{\n    \"name\": \"Baz\",\n    \"description\": None,\n    \"price\": 50.2,\n    \"tax\": 10.5,\n    \"tags\": []\n}\n</code></pre> <p>ReadyAPI \ud83d\ude43 \ud83e\udd43 (\ud83e\udd19, Pydantic \ud83d\ude43 \ud83e\udd43) \ud83e\udd14 \ud83d\udc48, \u270b\ufe0f <code>description</code>, <code>tax</code>, &amp; <code>tags</code> \u2714\ufe0f \ud83c\udf8f \ud83d\udcb2 \ud83d\udd22, \ud83d\udc6b \u2692 \ud83c\udfaf (\u21a9\ufe0f \u270a \u26aa\ufe0f\u27a1\ufe0f \ud83d\udd22).</p> <p>, \ud83d\udc6b \ud83d\udd1c \ud83d\udd0c \ud83c\udfbb \ud83d\udce8.</p> <p>Tip</p> <p>\ud83d\udc40 \ud83d\udc48 \ud83d\udd22 \ud83d\udcb2 \ud83d\udcaa \ud83d\udd73, \ud83d\udeab \ud83d\udd74 <code>None</code>.</p> <p>\ud83d\udc6b \ud83d\udcaa \ud83d\udcc7 (<code>[]</code>), <code>float</code> <code>10.5</code>, \u2652\ufe0f.</p>"},{"location":"tutorial/response-model/#response_model_include-response_model_exclude","title":"<code>response_model_include</code> &amp; <code>response_model_exclude</code>","text":"<p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \u27a1 \ud83d\udee0\ufe0f \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udd22 <code>response_model_include</code> &amp; <code>response_model_exclude</code>.</p> <p>\ud83d\udc6b \u270a <code>set</code> <code>str</code> \u23ee\ufe0f \ud83d\udcdb \ud83d\udd22 \ud83d\udd0c (\u274e \ud83c\udf82) \u2696\ufe0f \ud83d\udeab (\u2705 \ud83c\udf82).</p> <p>\ud83d\udc49 \ud83d\udcaa \u2699\ufe0f \u23e9 \u2328 \ud83d\udea5 \ud83d\udc46 \u2714\ufe0f \ud83d\udd74 1\ufe0f\u20e3 Pydantic \ud83c\udff7 &amp; \ud83d\udc9a \u274e \ud83d\udcbd \u26aa\ufe0f\u27a1\ufe0f \ud83d\udd22.</p> <p>Tip</p> <p>\u270b\ufe0f \u26ab\ufe0f \ud83d\udc4d \u2699\ufe0f \ud83d\udcad \ud83d\udd1b, \u2699\ufe0f \ud83d\udc97 \ud83c\udf93, \u21a9\ufe0f \ud83d\udc6b \ud83d\udd22.</p> <p>\ud83d\udc49 \u21a9\ufe0f \ud83c\udfbb \ud83d\udd17 \ud83c\udfd7 \ud83d\udc46 \ud83d\udcf1 \ud83d\uddc4 (&amp; \ud83e\ude7a) \ud83d\udd1c 1\ufe0f\u20e3 \ud83c\udfc1 \ud83c\udff7, \ud83d\udea5 \ud83d\udc46 \u2699\ufe0f <code>response_model_include</code> \u2696\ufe0f <code>response_model_exclude</code> \ud83d\udeab \ud83d\udd22.</p> <p>\ud83d\udc49 \u2714 <code>response_model_by_alias</code> \ud83d\udc48 \ud83d\udc77 \u27a1.</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"/items/{item_id}/name\",\n    response_model=Item,\n    response_model_include={\"name\", \"description\"},\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n\n@app.get(\"/items/{item_id}/public\", response_model=Item, response_model_exclude={\"tax\"})\nasync def read_item_public_data(item_id: str):\n    return items[item_id]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"/items/{item_id}/name\",\n    response_model=Item,\n    response_model_include={\"name\", \"description\"},\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n\n@app.get(\"/items/{item_id}/public\", response_model=Item, response_model_exclude={\"tax\"})\nasync def read_item_public_data(item_id: str):\n    return items[item_id]\n</code></pre> <p>Tip</p> <p>\u2755 <code>{\"name\", \"description\"}</code> \u270d <code>set</code> \u23ee\ufe0f \ud83d\udcda 2\ufe0f\u20e3 \ud83d\udcb2.</p> <p>\u26ab\ufe0f \ud83c\udf13 <code>set([\"name\", \"description\"])</code>.</p>"},{"location":"tutorial/response-model/#listm-setm","title":"\u2699\ufe0f <code>list</code>\u24c2 \u21a9\ufe0f <code>set</code>\u24c2","text":"<p>\ud83d\udea5 \ud83d\udc46 \ud83d\udcad \u2699\ufe0f <code>set</code> &amp; \u2699\ufe0f <code>list</code> \u2696\ufe0f <code>tuple</code> \u21a9\ufe0f, ReadyAPI \ud83d\udd1c \ud83d\udddc \u26ab\ufe0f <code>set</code> &amp; \u26ab\ufe0f \ud83d\udd1c \ud83d\udc77 \u2611:</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"/items/{item_id}/name\",\n    response_model=Item,\n    response_model_include=[\"name\", \"description\"],\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n\n@app.get(\"/items/{item_id}/public\", response_model=Item, response_model_exclude=[\"tax\"])\nasync def read_item_public_data(item_id: str):\n    return items[item_id]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n\n\nitems = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}\n\n\n@app.get(\n    \"/items/{item_id}/name\",\n    response_model=Item,\n    response_model_include=[\"name\", \"description\"],\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]\n\n\n@app.get(\"/items/{item_id}/public\", response_model=Item, response_model_exclude=[\"tax\"])\nasync def read_item_public_data(item_id: str):\n    return items[item_id]\n</code></pre>"},{"location":"tutorial/response-model/#_14","title":"\ud83c\udf03","text":"<p>\u2699\ufe0f \u27a1 \ud83d\udee0\ufe0f \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udd22 <code>response_model</code> \ud83d\udd2c \ud83d\udce8 \ud83c\udff7 &amp; \u2734\ufe0f \ud83d\ude9a \ud83d\udce2 \ud83d\udcbd \u26fd \ud83d\udc45.</p> <p>\u2699\ufe0f <code>response_model_exclude_unset</code> \ud83d\udce8 \ud83d\udd74 \ud83d\udcb2 \ud83c\udfaf \u2692.</p>"},{"location":"tutorial/response-status-code/","title":"\ud83d\udce8 \ud83d\udc54 \ud83d\udcdf","text":"<p>\ud83c\udf8f \ud83c\udf0c \ud83d\udc46 \ud83d\udcaa \u2714 \ud83d\udce8 \ud83c\udff7, \ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udc54 \ud83d\udcdf \u2699\ufe0f \ud83d\udce8 \u23ee\ufe0f \ud83d\udd22 <code>status_code</code> \ud83d\ude46 \u27a1 \ud83d\udee0\ufe0f:</p> <ul> <li><code>@app.get()</code></li> <li><code>@app.post()</code></li> <li><code>@app.put()</code></li> <li><code>@app.delete()</code></li> <li>\u2652\ufe0f.</li> </ul> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\", status_code=201)\nasync def create_item(name: str):\n    return {\"name\": name}\n</code></pre> <p>Note</p> <p>\ud83d\udc40 \ud83d\udc48 <code>status_code</code> \ud83d\udd22 \"\ud83d\udc68\u200d\ud83c\udfa8\" \ud83d\udc69\u200d\ud83d\udd2c (<code>get</code>, <code>post</code>, \u2652\ufe0f). \ud83d\udeab \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22, \ud83d\udc96 \ud83c\udf10 \ud83d\udd22 &amp; \ud83d\udcaa.</p> <p><code>status_code</code> \ud83d\udd22 \ud83d\udce8 \ud83d\udd22 \u23ee\ufe0f \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udc54 \ud83d\udcdf.</p> <p>Info</p> <p><code>status_code</code> \ud83d\udcaa \ud83d\udc50 \ud83d\udce8 <code>IntEnum</code>, \u2705 \ud83d\udc0d <code>http.HTTPStatus</code>.</p> <p>\u26ab\ufe0f \ud83d\udd1c:</p> <ul> <li>\ud83d\udce8 \ud83d\udc48 \ud83d\udc54 \ud83d\udcdf \ud83d\udce8.</li> <li>\ud83d\udcc4 \u26ab\ufe0f \u2705 \ud83d\uddc4 \ud83d\udd17 ( &amp; , \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd22):</li> </ul> <p></p> <p>Note</p> <p>\ud83d\udce8 \ud83d\udcdf (\ud83d\udc40 \u23ed \ud83d\udcc4) \ud83c\udfa6 \ud83d\udc48 \ud83d\udce8 \ud83d\udd28 \ud83d\udeab \u2714\ufe0f \ud83d\udcaa.</p> <p>ReadyAPI \ud83d\udcad \ud83d\udc49, &amp; \ud83d\udd1c \ud83c\udfed \ud83d\uddc4 \ud83e\ude7a \ud83d\udc48 \ud83c\uddf5\ud83c\uddf8 \ud83d\udce4 \ud83d\ude45\u200d\u2642 \ud83d\udce8 \ud83d\udcaa.</p>"},{"location":"tutorial/response-status-code/#_2","title":"\ud83d\udd03 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udc54 \ud83d\udcdf","text":"<p>Note</p> <p>\ud83d\udea5 \ud83d\udc46 \u23ea \ud83d\udcad \u26ab\ufe0f\u2754 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udc54 \ud83d\udcdf, \ud83d\udeb6 \u23ed \ud83d\udcc4.</p> <p>\ud83c\uddfa\ud83c\uddf8\ud83d\udd0d, \ud83d\udc46 \ud83d\udce8 \ud83d\udd22 \ud83d\udc54 \ud83d\udcdf 3\ufe0f\u20e3 9\ufe0f\u20e3 \ud83c\udf55 \ud83d\udce8.</p> <p>\ud83d\udc6b \ud83d\udc54 \ud83d\udcdf \u2714\ufe0f \ud83d\udcdb \ud83d\udd17 \ud83e\udd14 \ud83d\udc6b, \u270b\ufe0f \u26a0 \ud83c\udf55 \ud83d\udd22.</p> <p>\ud83d\udccf:</p> <ul> <li><code>100</code> &amp; \ud83d\udd1b \"\u2139\". \ud83d\udc46 \ud83d\udece \u2699\ufe0f \ud83d\udc6b \ud83d\udd17. \ud83d\udce8 \u23ee\ufe0f \ud83d\udc6b \ud83d\udc54 \ud83d\udcdf \ud83d\udeab\ud83d\udd1c \u2714\ufe0f \ud83d\udcaa.</li> <li><code>200</code> &amp; \ud83d\udd1b \"\ud83c\udfc6\" \ud83d\udce8. \ud83d\udc6b \ud83d\udd50 \ud83d\udc46 \ud83d\udd1c \u2699\ufe0f \ud83c\udfc6.<ul> <li><code>200</code> \ud83d\udd22 \ud83d\udc54 \ud83d\udcdf, \u2754 \u26d3 \ud83c\udf10 \"\ud83d\udc4c\".</li> <li>\u27951\ufe0f\u20e3 \ud83d\uddbc \ud83d\udd1c <code>201</code>, \"\u270d\". \u26ab\ufe0f \ud83d\udece \u2699\ufe0f \u23ee\ufe0f \ud83c\udfd7 \ud83c\udd95 \u23fa \ud83d\udcbd.</li> <li>\ud83c\udf81 \ud83d\udcbc <code>204</code>, \"\ud83d\ude45\u200d\u2642 \ud83c\udf9a\". \ud83d\udc49 \ud83d\udce8 \u2699\ufe0f \ud83d\udd50\u2754 \ud83d\udce4 \ud83d\ude45\u200d\u2642 \ud83c\udf9a \ud83d\udce8 \ud83d\udc69\u200d\ud83d\udcbb, &amp; \ud83d\udce8 \ud83d\udd1c \ud83d\udeab \u2714\ufe0f \ud83d\udcaa.</li> </ul> </li> <li><code>300</code> &amp; \ud83d\udd1b \"\u274e\". \ud83d\udce8 \u23ee\ufe0f \ud83d\udc6b \ud83d\udc54 \ud83d\udcdf 5\ufe0f\u20e3\ud83d\udcc6 \u2696\ufe0f 5\ufe0f\u20e3\ud83d\udcc6 \ud83d\udeab \u2714\ufe0f \ud83d\udcaa, \ud83c\udf16 <code>304</code>, \"\ud83d\udeab \ud83d\udd00\", \u2754 \ud83d\udd1c \ud83d\udeab \u2714\ufe0f 1\ufe0f\u20e3.</li> <li><code>400</code> &amp; \ud83d\udd1b \"\ud83d\udc69\u200d\ud83d\udcbb \u274c\" \ud83d\udce8. \ud83d\udc6b \ud83e\udd48 \ud83c\udd8e \ud83d\udc46 \ud83d\udd1c \ud83c\udfb2 \u2699\ufe0f \ud83c\udfc6.<ul> <li>\ud83d\uddbc <code>404</code>, \"\ud83d\udeab \ud83d\udd0e\" \ud83d\udce8.</li> <li>\ud83d\udc8a \u274c \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc69\u200d\ud83d\udcbb, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>400</code>.</li> </ul> </li> <li><code>500</code> &amp; \ud83d\udd1b \ud83d\udcbd \u274c. \ud83d\udc46 \ud83c\udf16 \ud83d\ude45 \u2699\ufe0f \ud83d\udc6b \ud83d\udd17. \ud83d\udd50\u2754 \ud83d\udd73 \ud83d\udeb6 \u274c \ud83c\udf55 \ud83d\udc46 \ud83c\ude38 \ud83d\udcdf, \u2696\ufe0f \ud83d\udcbd, \u26ab\ufe0f \ud83d\udd1c \ud83d\udd01 \ud83d\udce8 1\ufe0f\u20e3 \ud83d\udc6b \ud83d\udc54 \ud83d\udcdf.</li> </ul> <p>Tip</p> <p>\ud83d\udcad \ud83c\udf05 \ud83d\udd03 \ud83d\udd20 \ud83d\udc54 \ud83d\udcdf &amp; \u2754 \ud83d\udcdf \u26ab\ufe0f\u2754, \u2705 \ud83c\udfc7 \ud83e\uddfe \ud83d\udd03 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udc54 \ud83d\udcdf.</p>"},{"location":"tutorial/response-status-code/#_3","title":"\u2328 \ud83d\udcad \ud83d\udcdb","text":"<p>\u27a1\ufe0f \ud83d\udc40 \u23ee\ufe0f \ud83d\uddbc \ud83d\udd04:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\", status_code=201)\nasync def create_item(name: str):\n    return {\"name\": name}\n</code></pre> <p><code>201</code> \ud83d\udc54 \ud83d\udcdf \"\u270d\".</p> <p>\u270b\ufe0f \ud83d\udc46 \ud83d\udeab \u2714\ufe0f \u270d \u26ab\ufe0f\u2754 \ud83d\udd20 \ud83d\udc49 \ud83d\udcdf \u26d3.</p> <p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83c\udfea \ud83d\udd22 \u26aa\ufe0f\u27a1\ufe0f <code>readyapi.status</code>.</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI, status\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\", status_code=status.HTTP_201_CREATED)\nasync def create_item(name: str):\n    return {\"name\": name}\n</code></pre> <p>\ud83d\udc6b \ud83c\udfea, \ud83d\udc6b \ud83e\uddd1\u200d\ud83e\udd1d\u200d\ud83e\uddd1 \ud83c\udf8f \ud83d\udd22, \u270b\ufe0f \ud83d\udc48 \ud83c\udf0c \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udccb \ud83d\udd0e \ud83d\udc6b:</p> <p></p> <p>\ud83d\udce1 \u2139</p> <p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>from starlette import status</code>.</p> <p>ReadyAPI \ud83d\ude9a \ud83c\udf8f <code>starlette.status</code> <code>readyapi.status</code> \ud83c\udfea \ud83d\udc46, \ud83d\udc69\u200d\ud83d\udcbb. \u270b\ufe0f \u26ab\ufe0f \ud83d\udc5f \ud83d\udd17 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc83.</p>"},{"location":"tutorial/response-status-code/#_4","title":"\ud83d\udd00 \ud83d\udd22","text":"<p>\u23ea, \ud83c\udfe7 \ud83d\udc69\u200d\ud83d\udcbb \ud83e\uddae, \ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \u2754 \ud83d\udce8 \ud83c\udf8f \ud83d\udc54 \ud83d\udcdf \ud83c\udf18 \ud83d\udd22 \ud83d\udc46 \ud83d\udce3 \ud83d\udce5.</p>"},{"location":"tutorial/schema-extra-example/","title":"\ud83d\udce3 \ud83d\udce8 \ud83d\uddbc \ud83d\udcbd","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83d\uddbc \ud83d\udcbd \ud83d\udc46 \ud83d\udcf1 \ud83d\udcaa \ud83d\udce8.</p> <p>\ud83d\udce5 \ud83d\udcda \ud83c\udf0c \u26ab\ufe0f.</p>"},{"location":"tutorial/schema-extra-example/#pydantic-schema_extra","title":"Pydantic <code>schema_extra</code>","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udce3 <code>example</code> Pydantic \ud83c\udff7 \u2699\ufe0f <code>Config</code> &amp; <code>schema_extra</code>, \ud83d\udd2c Pydantic \ud83e\ude7a: \ud83d\udd17 \ud83d\udec3:</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n    model_config = {\n        \"json_schema_extra\": {\n            \"examples\": [\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                }\n            ]\n        }\n    }\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n    model_config = {\n        \"json_schema_extra\": {\n            \"examples\": [\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                }\n            ]\n        }\n    }\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>\ud83d\udc48 \u2795 \u2139 \ud83d\udd1c \ud83d\udeae-\ud83d\udd22 \ud83c\udfbb \ud83d\udd17 \ud83d\udc48 \ud83c\udff7, &amp; \u26ab\ufe0f \ud83d\udd1c \u2699\ufe0f \ud83d\udee0\ufe0f \ud83e\ude7a.</p> <p>Tip</p> <p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83c\udf8f \u2692 \u2194 \ud83c\udfbb \ud83d\udd17 &amp; \ud83d\udeae \ud83d\udc46 \ud83d\udc4d \ud83d\udec3 \u2795 \u2139.</p> <p>\ud83d\uddbc \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \u26ab\ufe0f \ud83d\udeae \ud83d\uddc3 \ud83d\udd78 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd22, \u2652\ufe0f.</p>"},{"location":"tutorial/schema-extra-example/#field","title":"<code>Field</code> \ud83c\udf16 \u274c","text":"<p>\ud83d\udd50\u2754 \u2699\ufe0f <code>Field()</code> \u23ee\ufe0f Pydantic \ud83c\udff7, \ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \u2795 \u2139 \ud83c\udfbb \ud83d\udd17 \ud83d\udeb6\u200d\u2640\ufe0f \ud83d\ude46 \ud83c\udf8f \u274c \u274c \ud83d\udd22.</p> <p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83d\udc49 \ud83d\udeae <code>example</code> \ud83d\udd20 \ud83c\udfd1:</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str = Field(examples=[\"Foo\"])\n    description: Union[str, None] = Field(default=None, examples=[\"A very nice Item\"])\n    price: float = Field(examples=[35.4])\n    tax: Union[float, None] = Field(default=None, examples=[3.2])\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+ <pre><code>from pydantic import BaseModel, Field\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str = Field(examples=[\"Foo\"])\n    description: str | None = Field(default=None, examples=[\"A very nice Item\"])\n    price: float = Field(examples=[35.4])\n    tax: float | None = Field(default=None, examples=[3.2])\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Warning</p> <p>\ud83d\udea7 \ud83e\udd2f \ud83d\udc48 \ud83d\udcda \u2795 \u274c \ud83d\udeb6\u200d\u2640\ufe0f \ud83c\udfc6 \ud83d\udeab \ud83d\udeae \ud83d\ude46 \ud83d\udd2c, \ud83d\udd74 \u2795 \u2139, \ud83e\uddfe \ud83c\udfaf.</p>"},{"location":"tutorial/schema-extra-example/#example-examples","title":"<code>example</code> &amp; <code>examples</code> \ud83d\uddc4","text":"<p>\ud83d\udd50\u2754 \u2699\ufe0f \ud83d\ude46:</p> <ul> <li><code>Path()</code></li> <li><code>Query()</code></li> <li><code>Header()</code></li> <li><code>Cookie()</code></li> <li><code>Body()</code></li> <li><code>Form()</code></li> <li><code>File()</code></li> </ul> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83d\udcbd <code>example</code> \u2696\ufe0f \ud83d\udc6a <code>examples</code> \u23ee\ufe0f \ud83c\udf16 \u2139 \ud83d\udc48 \ud83d\udd1c \ud83d\udeae \ud83d\uddc4.</p>"},{"location":"tutorial/schema-extra-example/#body-example","title":"<code>Body</code> \u23ee\ufe0f <code>example</code>","text":"<p>\ud83d\udce5 \ud83d\udc65 \ud83d\udeb6\u200d\u2640\ufe0f <code>example</code> \ud83d\udcca \u231b <code>Body()</code>:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int,\n    item: Item = Body(\n        examples=[\n            {\n                \"name\": \"Foo\",\n                \"description\": \"A very nice Item\",\n                \"price\": 35.4,\n                \"tax\": 3.2,\n            }\n        ],\n    ),\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int,\n    item: Annotated[\n        Item,\n        Body(\n            examples=[\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                }\n            ],\n        ),\n    ],\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int,\n    item: Annotated[\n        Item,\n        Body(\n            examples=[\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                }\n            ],\n        ),\n    ],\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int,\n    item: Annotated[\n        Item,\n        Body(\n            examples=[\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                }\n            ],\n        ),\n    ],\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int,\n    item: Item = Body(\n        examples=[\n            {\n                \"name\": \"Foo\",\n                \"description\": \"A very nice Item\",\n                \"price\": 35.4,\n                \"tax\": 3.2,\n            }\n        ],\n    ),\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre>"},{"location":"tutorial/schema-extra-example/#_2","title":"\ud83d\uddbc \ud83e\ude7a \ud83c\udf9a","text":"<p>\u23ee\ufe0f \ud83d\ude46 \ud83d\udc69\u200d\ud83d\udd2c \ud83d\udd1b \u26ab\ufe0f \ud83d\udd1c \ud83d\udc40 \ud83d\udc96 \ud83d\udc49 <code>/docs</code>:</p> <p></p>"},{"location":"tutorial/schema-extra-example/#body-examples","title":"<code>Body</code> \u23ee\ufe0f \ud83d\udc97 <code>examples</code>","text":"<p>\ud83d\udc50 \ud83d\udc41 <code>example</code>, \ud83d\udc46 \ud83d\udcaa \ud83d\udeb6\u200d\u2640\ufe0f <code>examples</code> \u2699\ufe0f <code>dict</code> \u23ee\ufe0f \ud83d\udc97 \ud83d\uddbc, \ud83d\udd20 \u23ee\ufe0f \u2795 \u2139 \ud83d\udc48 \ud83d\udd1c \ud83d\udeae \ud83d\uddc4 \ud83d\udc81\u200d\u2642\ufe0f.</p> <p>\ud83d\udd11 <code>dict</code> \ud83d\udd2c \ud83d\udd20 \ud83d\uddbc, &amp; \ud83d\udd20 \ud83d\udcb2 \u27951\ufe0f\u20e3 <code>dict</code>.</p> <p>\ud83d\udd20 \ud83c\udfaf \ud83d\uddbc <code>dict</code> <code>examples</code> \ud83d\udcaa \ud83d\udd0c:</p> <ul> <li><code>summary</code>: \ud83d\udccf \ud83d\udcdb \ud83d\uddbc.</li> <li><code>description</code>: \ud83d\udccf \ud83d\udcdb \ud83d\udc48 \ud83d\udcaa \ud83d\udd0c \u270d \u270d.</li> <li><code>value</code>: \ud83d\udc49 \u2611 \ud83d\uddbc \ud83c\udfa6, \u2705 <code>dict</code>.</li> <li><code>externalValue</code>: \ud83c\udf9b <code>value</code>, \ud83d\udcdb \u261d \ud83d\uddbc. \ud83d\udc50 \ud83d\udc49 5\ufe0f\u20e3\ud83d\udcc6 \ud83d\udeab \ud83d\udc15\u200d\ud83e\uddba \ud83d\udcda \ud83e\uddf0 <code>value</code>.</li> </ul> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item = Body(\n        examples=[\n            {\n                \"name\": \"Foo\",\n                \"description\": \"A very nice Item\",\n                \"price\": 35.4,\n                \"tax\": 3.2,\n            },\n            {\n                \"name\": \"Bar\",\n                \"price\": \"35.4\",\n            },\n            {\n                \"name\": \"Baz\",\n                \"price\": \"thirty five point four\",\n            },\n        ],\n    ),\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Annotated[\n        Item,\n        Body(\n            examples=[\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                },\n                {\n                    \"name\": \"Bar\",\n                    \"price\": \"35.4\",\n                },\n                {\n                    \"name\": \"Baz\",\n                    \"price\": \"thirty five point four\",\n                },\n            ],\n        ),\n    ],\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Annotated[\n        Item,\n        Body(\n            examples=[\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                },\n                {\n                    \"name\": \"Bar\",\n                    \"price\": \"35.4\",\n                },\n                {\n                    \"name\": \"Baz\",\n                    \"price\": \"thirty five point four\",\n                },\n            ],\n        ),\n    ],\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Annotated[\n        Item,\n        Body(\n            examples=[\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                },\n                {\n                    \"name\": \"Bar\",\n                    \"price\": \"35.4\",\n                },\n                {\n                    \"name\": \"Baz\",\n                    \"price\": \"thirty five point four\",\n                },\n            ],\n        ),\n    ],\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Body, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\n@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item = Body(\n        examples=[\n            {\n                \"name\": \"Foo\",\n                \"description\": \"A very nice Item\",\n                \"price\": 35.4,\n                \"tax\": 3.2,\n            },\n            {\n                \"name\": \"Bar\",\n                \"price\": \"35.4\",\n            },\n            {\n                \"name\": \"Baz\",\n                \"price\": \"thirty five point four\",\n            },\n        ],\n    ),\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results\n</code></pre>"},{"location":"tutorial/schema-extra-example/#_3","title":"\ud83d\uddbc \ud83e\ude7a \ud83c\udf9a","text":"<p>\u23ee\ufe0f <code>examples</code> \ud83d\udeae <code>Body()</code> <code>/docs</code> \ud83d\udd1c \ud83d\udc40 \ud83d\udc96:</p> <p></p>"},{"location":"tutorial/schema-extra-example/#i","title":"\ud83d\udce1 \u2139","text":"<p>Warning</p> <p>\ud83d\udc49 \ud83d\udcf6 \ud83d\udce1 \u2139 \ud83d\udd03 \ud83d\udc29 \ud83c\udfbb \ud83d\udd17 &amp; \ud83d\uddc4.</p> <p>\ud83d\udea5 \ud83d\udcad \ud83d\udd1b \u23ea \ud83d\udc77 \ud83d\udc46, \ud83d\udc48 \ud83d\udcaa \ud83e\udd43, &amp; \ud83d\udc46 \ud83c\udfb2 \ud83d\udeab \ud83d\udcaa \ud83d\udc49 \u2139, \ud83d\udcad \ud83c\udd93 \ud83d\udeb6 \ud83d\udc6b.</p> <p>\ud83d\udd50\u2754 \ud83d\udc46 \ud83d\udeae \ud83d\uddbc \ud83d\udd18 Pydantic \ud83c\udff7, \u2699\ufe0f <code>schema_extra</code> \u2696\ufe0f <code>Field(example=\"something\")</code> \ud83d\udc48 \ud83d\uddbc \ud83d\udeae \ud83c\udfbb \ud83d\udd17 \ud83d\udc48 Pydantic \ud83c\udff7.</p> <p>&amp; \ud83d\udc48 \ud83c\udfbb \ud83d\udd17 Pydantic \ud83c\udff7 \ud83d\udd0c \ud83d\uddc4 \ud83d\udc46 \ud83d\udee0\ufe0f, &amp; \u2934\ufe0f \u26ab\ufe0f \u2699\ufe0f \ud83e\ude7a \ud83c\udf9a.</p> <p>\ud83c\udfbb \ud83d\udd17 \ud83d\udeab \ud83e\udd19 \u2714\ufe0f \ud83c\udfd1 <code>example</code> \ud83d\udc29. \u23ee\ufe0f \u23ec \ud83c\udfbb \ud83d\udd17 \ud83d\udd2c \ud83c\udfd1 <code>examples</code>, \u270b\ufe0f \ud83d\uddc4 3\ufe0f\u20e3.0\ufe0f\u20e3.3\ufe0f\u20e3 \u2693\ufe0f \ud83d\udd1b \ud83d\udddd \u23ec \ud83c\udfbb \ud83d\udd17 \ud83d\udc48 \ud83d\udeab \u2714\ufe0f <code>examples</code>.</p> <p>, \ud83d\uddc4 3\ufe0f\u20e3.0\ufe0f\u20e3.3\ufe0f\u20e3 \ud83d\udd2c \ud83d\udeae \ud83d\udc4d <code>example</code> \ud83d\udd00 \u23ec \ud83c\udfbb \ud83d\udd17 \u26ab\ufe0f \u2699\ufe0f, \ud83c\udf8f \ud83c\udfaf (\u270b\ufe0f \u26ab\ufe0f \ud83d\udc41 <code>example</code>, \ud83d\udeab <code>examples</code>), &amp; \ud83d\udc48 \u26ab\ufe0f\u2754 \u2699\ufe0f \ud83d\udee0\ufe0f \ud83e\ude7a \ud83c\udf9a (\u2699\ufe0f \ud83e\udd81 \ud83c\udf9a).</p> <p>, \ud83d\udc50 <code>example</code> \ud83d\udeab \ud83c\udf55 \ud83c\udfbb \ud83d\udd17, \u26ab\ufe0f \ud83c\udf55 \ud83d\uddc4 \ud83d\udec3 \u23ec \ud83c\udfbb \ud83d\udd17, &amp; \ud83d\udc48 \u26ab\ufe0f\u2754 \ud83d\udd1c \u2699\ufe0f \ud83e\ude7a \ud83c\udf9a.</p> <p>\u270b\ufe0f \ud83d\udd50\u2754 \ud83d\udc46 \u2699\ufe0f <code>example</code> \u2696\ufe0f <code>examples</code> \u23ee\ufe0f \ud83d\ude46 \ud83c\udf8f \ud83d\ude99 (<code>Query()</code>, <code>Body()</code>, \u2652\ufe0f.) \ud83d\udcda \ud83d\uddbc \ud83d\udeab \ud83d\udeae \ud83c\udfbb \ud83d\udd17 \ud83d\udc48 \ud83d\udd2c \ud83d\udc48 \ud83d\udcbd (\ud83d\udeab \ud83d\uddc4 \ud83d\udc4d \u23ec \ud83c\udfbb \ud83d\udd17), \ud83d\udc6b \ud83d\udeae \ud83d\udd17 \u27a1 \ud83d\udee0\ufe0f \ud83d\udcc4 \ud83d\uddc4 (\ud83c\udfde \ud83c\udf55 \ud83d\uddc4 \ud83d\udc48 \u2699\ufe0f \ud83c\udfbb \ud83d\udd17).</p> <p><code>Path()</code>, <code>Query()</code>, <code>Header()</code>, &amp; <code>Cookie()</code>, <code>example</code> \u2696\ufe0f <code>examples</code> \ud83d\udeae \ud83d\uddc4 \ud83d\udd11, <code>Parameter Object</code> (\ud83d\udd27).</p> <p>&amp; <code>Body()</code>, <code>File()</code>, &amp; <code>Form()</code>, <code>example</code> \u2696\ufe0f <code>examples</code> \ud83d\udcca \ud83d\udeae \ud83d\uddc4 \ud83d\udd11, <code>Request Body Object</code>, \ud83c\udfd1 <code>content</code>, \ud83d\udd1b <code>Media Type Object</code> (\ud83d\udd27).</p> <p>\ud83d\udd1b \ud83c\udf8f \u270b, \ud83d\udce4 \ud83c\udd95 \u23ec \ud83d\uddc4: 3\ufe0f\u20e3.1\ufe0f\u20e3.0\ufe0f\u20e3, \u23f3 \ud83d\ude80. \u26ab\ufe0f \u2693\ufe0f \ud83d\udd1b \u23ea \ud83c\udfbb \ud83d\udd17 &amp; \ud83c\udfc6 \ud83d\udee0\ufe0f \u26aa\ufe0f\u27a1\ufe0f \ud83d\uddc4 \ud83d\udec3 \u23ec \ud83c\udfbb \ud83d\udd17 \u274e, \ud83d\udcb1 \u2692 \u26aa\ufe0f\u27a1\ufe0f \u23ee\ufe0f \u23ec \ud83c\udfbb \ud83d\udd17, \ud83c\udf10 \ud83d\udc6b \ud83e\udd2a \ud83d\udd3a \ud83d\udcc9. \ud83d\udc50, \ud83e\udd81 \ud83c\udf9a \u23f3 \ud83d\udeab \ud83d\udc15\u200d\ud83e\uddba \ud83d\uddc4 3\ufe0f\u20e3.1\ufe0f\u20e3.0\ufe0f\u20e3,, \ud83d\udd1c, \u26ab\ufe0f \ud83d\udc4d \ud83d\ude23 \u2699\ufe0f \ud83d\udcad \ud83d\udd1b.</p>"},{"location":"tutorial/static-files/","title":"\ud83c\udfbb \ud83d\udcc1","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83c\udf66 \ud83c\udfbb \ud83d\udcc1 \ud83d\udd01 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udcc1 \u2699\ufe0f <code>StaticFiles</code>.</p>"},{"location":"tutorial/static-files/#staticfiles","title":"\u2699\ufe0f <code>StaticFiles</code>","text":"<ul> <li>\ud83d\uddc4 <code>StaticFiles</code>.</li> <li>\"\ud83d\uddfb\" <code>StaticFiles()</code> \ud83d\udc50 \ud83c\udfaf \u27a1.</li> </ul> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.staticfiles import StaticFiles\n\napp = ReadyAPI()\n\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n</code></pre> <p>\ud83d\udce1 \u2139</p> <p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>from starlette.staticfiles import StaticFiles</code>.</p> <p>ReadyAPI \ud83d\ude9a \ud83c\udf8f <code>starlette.staticfiles</code> <code>readyapi.staticfiles</code> \ud83c\udfea \ud83d\udc46, \ud83d\udc69\u200d\ud83d\udcbb. \u270b\ufe0f \u26ab\ufe0f \ud83e\udd19 \ud83d\udc5f \ud83d\udd17 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc83.</p>"},{"location":"tutorial/static-files/#_2","title":"\u26ab\ufe0f\u2754 \"\ud83d\udddc\"","text":"<p>\"\ud83d\udddc\" \u26d3 \u274e \ud83c\udfc1 \"\ud83d\udd2c\" \ud83c\ude38 \ud83c\udfaf \u27a1, \ud83d\udc48 \u2934\ufe0f \u270a \ud83d\udc85 \ud83d\ude9a \ud83c\udf10 \ud83c\udfa7-\u27a1.</p> <p>\ud83d\udc49 \ud83c\udf8f \u26aa\ufe0f\u27a1\ufe0f \u2699\ufe0f <code>APIRouter</code> \ud83d\uddfb \ud83c\ude38 \ud83c\udf55 \ud83d\udd2c. \ud83d\uddc4 &amp; \ud83e\ude7a \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc46 \ud83d\udc51 \ud83c\ude38 \ud83c\udfc6 \ud83d\udeab \ud83d\udd0c \ud83d\udd73 \u26aa\ufe0f\u27a1\ufe0f \ud83d\uddfb \ud83c\ude38, \u2652\ufe0f.</p> <p>\ud83d\udc46 \ud83d\udcaa \u270d \ud83c\udf05 \ud83d\udd03 \ud83d\udc49 \ud83c\udfe7 \ud83d\udc69\u200d\ud83d\udcbb \ud83e\uddae.</p>"},{"location":"tutorial/static-files/#i","title":"\u2139","text":"<p>\ud83e\udd47 <code>\"/static\"</code> \ud83d\udd17 \ud83c\udfa7-\u27a1 \ud83d\udc49 \"\ud83c\udfa7-\ud83c\ude38\" \ud83d\udd1c \"\ud83d\uddfb\" \ud83d\udd1b. , \ud83d\ude46 \u27a1 \ud83d\udc48 \u25b6\ufe0f \u23ee\ufe0f <code>\"/static\"</code> \ud83d\udd1c \ud83c\udf75 \u26ab\ufe0f.</p> <p><code>directory=\"static\"</code> \ud83d\udd17 \ud83d\udcdb \ud83d\udcc1 \ud83d\udc48 \ud83d\udd0c \ud83d\udc46 \ud83c\udfbb \ud83d\udcc1.</p> <p><code>name=\"static\"</code> \ud83e\udd1d \u26ab\ufe0f \ud83d\udcdb \ud83d\udc48 \ud83d\udcaa \u2699\ufe0f \ud83d\udd18 ReadyAPI.</p> <p>\ud83c\udf10 \ud83d\udc6b \ud83d\udd22 \ud83d\udcaa \ud83c\udf8f \ud83c\udf18 \"<code>static</code>\", \ud83d\udd06 \ud83d\udc6b \u23ee\ufe0f \ud83d\udcaa &amp; \ud83c\udfaf \u2139 \ud83d\udc46 \ud83d\udc4d \ud83c\ude38.</p>"},{"location":"tutorial/static-files/#i_1","title":"\ud83c\udf05 \u2139","text":"<p>\ud83c\udf16 \u2139 &amp; \ud83c\udf9b \u2705 \ud83d\udc83 \ud83e\ude7a \ud83d\udd03 \ud83c\udfbb \ud83d\udcc1.</p>"},{"location":"tutorial/testing/","title":"\ud83d\udd2c","text":"<p>\ud83d\udc4f \ud83d\udc83, \ud83d\udd2c ReadyAPI \ud83c\ude38 \u23e9 &amp; \ud83d\ude0c.</p> <p>\u26ab\ufe0f \u2693\ufe0f \ud83d\udd1b \ud83c\uddf8\ud83c\uddf2, \u2754 \ud83d\udd04 \ud83c\udfd7 \u2693\ufe0f \ud83d\udd1b \ud83d\udce8, \u26ab\ufe0f \ud83d\udcf6 \ud83d\ude30 &amp; \ud83c\udfcb\ufe0f.</p> <p>\u23ee\ufe0f \u26ab\ufe0f, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \u2733 \ud83d\udd17 \u23ee\ufe0f ReadyAPI.</p>"},{"location":"tutorial/testing/#testclient","title":"\u2699\ufe0f <code>TestClient</code>","text":"<p>Info</p> <p>\u2699\ufe0f <code>TestClient</code>, \ud83e\udd47 \u274e <code>httpx</code>.</p> <p>\ud83e\udd36 \u24c2. <code>pip install httpx</code>.</p> <p>\ud83d\uddc4 <code>TestClient</code>.</p> <p>\u270d <code>TestClient</code> \ud83d\udeb6\u200d\u2640\ufe0f \ud83d\udc46 ReadyAPI \ud83c\ude38 \u26ab\ufe0f.</p> <p>\u270d \ud83d\udd22 \u23ee\ufe0f \ud83d\udcdb \ud83d\udc48 \u25b6\ufe0f \u23ee\ufe0f <code>test_</code> (\ud83d\udc49 \ud83d\udc29 <code>pytest</code> \ud83c\udfdb).</p> <p>\u2699\ufe0f <code>TestClient</code> \ud83c\udf9a \ud83c\udf8f \ud83c\udf0c \ud83d\udc46 \u23ee\ufe0f <code>httpx</code>.</p> <p>\u270d \ud83d\ude45 <code>assert</code> \ud83d\udcc4 \u23ee\ufe0f \ud83d\udc29 \ud83d\udc0d \ud83e\uddec \ud83d\udc48 \ud83d\udc46 \ud83d\udcaa \u2705 (\ud83d\udd04, \ud83d\udc29 <code>pytest</code>).</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.testclient import TestClient\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def read_main():\n    return {\"msg\": \"Hello World\"}\n\n\nclient = TestClient(app)\n\n\ndef test_read_main():\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"msg\": \"Hello World\"}\n</code></pre> <p>Tip</p> <p>\ud83d\udc40 \ud83d\udc48 \ud83d\udd2c \ud83d\udd22 \ud83d\ude10 <code>def</code>, \ud83d\udeab <code>async def</code>.</p> <p>&amp; \ud83e\udd19 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\ude10 \ud83e\udd19, \ud83d\udeab \u2699\ufe0f <code>await</code>.</p> <p>\ud83d\udc49 \u2714 \ud83d\udc46 \u2699\ufe0f <code>pytest</code> \ud83d\udd17 \ud83c\udf75 \ud83e\udd22.</p> <p>\ud83d\udce1 \u2139</p> <p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>from starlette.testclient import TestClient</code>.</p> <p>ReadyAPI \ud83d\ude9a \ud83c\udf8f <code>starlette.testclient</code> <code>readyapi.testclient</code> \ud83c\udfea \ud83d\udc46, \ud83d\udc69\u200d\ud83d\udcbb. \u270b\ufe0f \u26ab\ufe0f \ud83d\udc5f \ud83d\udd17 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc83.</p> <p>Tip</p> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udc9a \ud83e\udd19 <code>async</code> \ud83d\udd22 \ud83d\udc46 \ud83d\udcaf \u2196\ufe0f \u26aa\ufe0f\u27a1\ufe0f \ud83d\udce8 \ud83d\udce8 \ud83d\udc46 ReadyAPI \ud83c\ude38 (\u2705 \ud83d\udd01 \ud83d\udcbd \ud83d\udd22), \u2714\ufe0f \ud83d\udc40 \ud83d\udd01 \ud83d\udcaf \ud83c\udfe7 \ud83d\udd30.</p>"},{"location":"tutorial/testing/#_2","title":"\ud83c\udf8f \ud83d\udcaf","text":"<p>\ud83c\udfb0 \ud83c\ude38, \ud83d\udc46 \ud83c\udfb2 \ud83d\udd1c \u2714\ufe0f \ud83d\udc46 \ud83d\udcaf \ud83c\udf8f \ud83d\udcc1.</p> <p>&amp; \ud83d\udc46 ReadyAPI \ud83c\ude38 5\ufe0f\u20e3\ud83d\udcc6 \u270d \ud83d\udcda \ud83d\udcc1/\ud83d\udd79, \u2652\ufe0f.</p>"},{"location":"tutorial/testing/#readyapi","title":"ReadyAPI \ud83d\udcf1 \ud83d\udcc1","text":"<p>\u27a1\ufe0f \ud83d\udcac \ud83d\udc46 \u2714\ufe0f \ud83d\udcc1 \ud83d\udcca \ud83d\udd2c \ud83e\udd8f \ud83c\ude38:</p> <pre><code>.\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 main.py\n</code></pre> <p>\ud83d\udcc1 <code>main.py</code> \ud83d\udc46 \u2714\ufe0f \ud83d\udc46 ReadyAPI \ud83d\udcf1:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\n@app.get(\"/\")\nasync def read_main():\n    return {\"msg\": \"Hello World\"}\n</code></pre>"},{"location":"tutorial/testing/#_3","title":"\ud83d\udd2c \ud83d\udcc1","text":"<p>\u2934\ufe0f \ud83d\udc46 \ud83d\udcaa \u2714\ufe0f \ud83d\udcc1 <code>test_main.py</code> \u23ee\ufe0f \ud83d\udc46 \ud83d\udcaf. \u26ab\ufe0f \ud83d\udcaa \ud83d\udd96 \ud83d\udd1b \ud83c\udf8f \ud83d\udc0d \ud83d\udce6 (\ud83c\udf8f \ud83d\udcc1 \u23ee\ufe0f <code>__init__.py</code> \ud83d\udcc1):</p> <pre><code>.\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 test_main.py\n</code></pre> <p>\u21a9\ufe0f \ud83d\udc49 \ud83d\udcc1 \ud83c\udf8f \ud83d\udce6, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \u2696 \ud83d\uddc4 \ud83d\uddc4 \ud83c\udf9a <code>app</code> \u26aa\ufe0f\u27a1\ufe0f <code>main</code> \ud83d\udd79 (<code>main.py</code>):</p> Python 3.8+ <pre><code>from readyapi.testclient import TestClient\n\nfrom .main import app\n\nclient = TestClient(app)\n\n\ndef test_read_main():\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"msg\": \"Hello World\"}\n</code></pre> <p>...&amp; \u2714\ufe0f \ud83d\udcdf \ud83d\udcaf \ud83d\udc96 \u23ed.</p>"},{"location":"tutorial/testing/#_4","title":"\ud83d\udd2c: \u2194 \ud83d\uddbc","text":"<p>\ud83d\udd1c \u27a1\ufe0f \u2194 \ud83d\udc49 \ud83d\uddbc &amp; \ud83d\udeae \ud83c\udf16 \u2139 \ud83d\udc40 \u2754 \ud83d\udcaf \ud83c\udf8f \ud83c\udf55.</p>"},{"location":"tutorial/testing/#readyapi_1","title":"\u2194 ReadyAPI \ud83d\udcf1 \ud83d\udcc1","text":"<p>\u27a1\ufe0f \ud83d\ude23 \u23ee\ufe0f \ud83c\udf8f \ud83d\udcc1 \ud83d\udcca \u23ed:</p> <pre><code>.\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 test_main.py\n</code></pre> <p>\u27a1\ufe0f \ud83d\udcac \ud83d\udc48 \ud83d\udd1c \ud83d\udcc1 <code>main.py</code> \u23ee\ufe0f \ud83d\udc46 ReadyAPI \ud83d\udcf1 \u2714\ufe0f \ud83c\udf8f \u27a1 \ud83d\udee0\ufe0f.</p> <p>\u26ab\ufe0f \u2714\ufe0f <code>GET</code> \ud83d\udee0\ufe0f \ud83d\udc48 \ud83d\udcaa \ud83d\udce8 \u274c.</p> <p>\u26ab\ufe0f \u2714\ufe0f <code>POST</code> \ud83d\udee0\ufe0f \ud83d\udc48 \ud83d\udcaa \ud83d\udce8 \ud83d\udcda \u274c.</p> <p>\ud83d\udc6f\u200d\u2642\ufe0f \u27a1 \ud83d\udee0\ufe0f \ud83d\ude9a <code>X-Token</code> \ud83c\udf9a.</p> Python 3.8+ <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, HTTPException, ReadyAPI\n\nfake_secret_token = \"coneofsilence\"\n\nfake_db = {\n    \"foo\": {\"id\": \"foo\", \"title\": \"Foo\", \"description\": \"There goes my hero\"},\n    \"bar\": {\"id\": \"bar\", \"title\": \"Bar\", \"description\": \"The bartenders\"},\n}\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    id: str\n    title: str\n    description: Union[str, None] = None\n\n\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_main(item_id: str, x_token: str = Header()):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item_id not in fake_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return fake_db[item_id]\n\n\n@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item, x_token: str = Header()):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item.id in fake_db:\n        raise HTTPException(status_code=409, detail=\"Item already exists\")\n    fake_db[item.id] = item\n    return item\n</code></pre>"},{"location":"tutorial/testing/#_5","title":"\u2194 \ud83d\udd2c \ud83d\udcc1","text":"<p>\ud83d\udc46 \ud83d\udcaa \u2934\ufe0f \u2139 <code>test_main.py</code> \u23ee\ufe0f \u2194 \ud83d\udcaf:</p> Python 3.8+ <pre><code>from readyapi.testclient import TestClient\n\nfrom .main import app\n\nclient = TestClient(app)\n\n\ndef test_read_item():\n    response = client.get(\"/items/foo\", headers={\"X-Token\": \"coneofsilence\"})\n    assert response.status_code == 200\n    assert response.json() == {\n        \"id\": \"foo\",\n        \"title\": \"Foo\",\n        \"description\": \"There goes my hero\",\n    }\n\n\ndef test_read_item_bad_token():\n    response = client.get(\"/items/foo\", headers={\"X-Token\": \"hailhydra\"})\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid X-Token header\"}\n\n\ndef test_read_nonexistent_item():\n    response = client.get(\"/items/baz\", headers={\"X-Token\": \"coneofsilence\"})\n    assert response.status_code == 404\n    assert response.json() == {\"detail\": \"Item not found\"}\n\n\ndef test_create_item():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"coneofsilence\"},\n        json={\"id\": \"foobar\", \"title\": \"Foo Bar\", \"description\": \"The Foo Barters\"},\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"id\": \"foobar\",\n        \"title\": \"Foo Bar\",\n        \"description\": \"The Foo Barters\",\n    }\n\n\ndef test_create_item_bad_token():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"hailhydra\"},\n        json={\"id\": \"bazz\", \"title\": \"Bazz\", \"description\": \"Drop the bazz\"},\n    )\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid X-Token header\"}\n\n\ndef test_create_existing_item():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"coneofsilence\"},\n        json={\n            \"id\": \"foo\",\n            \"title\": \"The Foo ID Stealers\",\n            \"description\": \"There goes my stealer\",\n        },\n    )\n    assert response.status_code == 409\n    assert response.json() == {\"detail\": \"Item already exists\"}\n</code></pre> <p>\ud83d\udd50\u2754 \ud83d\udc46 \ud83d\udcaa \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udeb6\u200d\u2640\ufe0f \u2139 \ud83d\udce8 &amp; \ud83d\udc46 \ud83d\udeab \ud83d\udcad \u2754, \ud83d\udc46 \ud83d\udcaa \ud83d\udd0e (\ud83c\uddfa\ud83c\uddf8\ud83d\udd0d) \u2754 \u26ab\ufe0f <code>httpx</code>, \u2696\ufe0f \u2754 \u26ab\ufe0f \u23ee\ufe0f <code>requests</code>, \ud83c\uddf8\ud83c\uddf2 \ud83d\udd27 \u2693\ufe0f \ud83d\udd1b \ud83d\udce8' \ud83d\udd27.</p> <p>\u2934\ufe0f \ud83d\udc46 \ud83c\udf8f \ud83d\udc46 \ud83d\udcaf.</p> <p>\ud83e\udd36 \u24c2.:</p> <ul> <li>\ud83d\udeb6\u200d\u2640\ufe0f \u27a1 \u2696\ufe0f \ud83d\udd22 \ud83d\udd22, \ud83d\udeae \u26ab\ufe0f \ud83d\udcdb \u26ab\ufe0f.</li> <li>\ud83d\udeb6\u200d\u2640\ufe0f \ud83c\udfbb \ud83d\udcaa, \ud83d\udeb6\u200d\u2640\ufe0f \ud83d\udc0d \ud83c\udf9a (\u2705 <code>dict</code>) \ud83d\udd22 <code>json</code>.</li> <li>\ud83d\udea5 \ud83d\udc46 \ud83d\udcaa \ud83d\udce8 \ud83d\udce8 \ud83d\udcbd \u21a9\ufe0f \ud83c\udfbb, \u2699\ufe0f <code>data</code> \ud83d\udd22 \u21a9\ufe0f.</li> <li>\ud83d\udeb6\u200d\u2640\ufe0f \ud83c\udf9a, \u2699\ufe0f <code>dict</code> <code>headers</code> \ud83d\udd22.</li> <li>\ud83c\udf6a, <code>dict</code> <code>cookies</code> \ud83d\udd22.</li> </ul> <p>\ud83c\udf16 \u2139 \ud83d\udd03 \u2754 \ud83d\udeb6\u200d\u2640\ufe0f \ud83d\udcbd \ud83d\udc69\u200d\ud83d\udcbb (\u2699\ufe0f <code>httpx</code> \u2696\ufe0f <code>TestClient</code>) \u2705 \ud83c\uddf8\ud83c\uddf2 \ud83e\uddfe.</p> <p>Info</p> <p>\ud83d\uddd2 \ud83d\udc48 <code>TestClient</code> \ud83d\udce8 \ud83d\udcbd \ud83d\udc48 \ud83d\udcaa \ud83d\udddc \ud83c\udfbb, \ud83d\udeab Pydantic \ud83c\udff7.</p> <p>\ud83d\udea5 \ud83d\udc46 \u2714\ufe0f Pydantic \ud83c\udff7 \ud83d\udc46 \ud83d\udcaf &amp; \ud83d\udc46 \ud83d\udc9a \ud83d\udce8 \ud83d\udeae \ud83d\udcbd \ud83c\ude38 \u23ee\ufe0f \ud83d\udd2c, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>jsonable_encoder</code> \ud83d\udd2c \ud83c\udfbb \ud83d\udd17 \ud83d\udd22.</p>"},{"location":"tutorial/testing/#_6","title":"\ud83c\udfc3 \u26ab\ufe0f","text":"<p>\u23ee\ufe0f \ud83d\udc48, \ud83d\udc46 \ud83d\udcaa \u274e <code>pytest</code>:</p> <pre><code>$ pip install pytest\n\n---&gt; 100%\n</code></pre> <p>\u26ab\ufe0f \ud83d\udd1c \ud83d\udd0d \ud83d\udcc1 &amp; \ud83d\udcaf \ud83d\udd01, \ud83d\udee0\ufe0f \ud83d\udc6b, &amp; \ud83d\udcc4 \ud83c\udfc1 \ud83d\udd19 \ud83d\udc46.</p> <p>\ud83c\udfc3 \ud83d\udcaf \u23ee\ufe0f:</p> <pre><code>$ pytest\n\n================ test session starts ================\nplatform linux -- Python 3.6.9, pytest-5.3.5, py-1.8.1, pluggy-0.13.1\nrootdir: /home/user/code/superawesome-cli/app\nplugins: forked-1.1.3, xdist-1.31.0, cov-2.8.1\ncollected 6 items\n\n---&gt; 100%\n\ntest_main.py &lt;span style=\"color: green; white-space: pre;\"&gt;......                            [100%]&lt;/span&gt;\n\n&lt;span style=\"color: green;\"&gt;================= 1 passed in 0.03s =================&lt;/span&gt;\n</code></pre>"},{"location":"tutorial/dependencies/","title":"\ud83d\udd17","text":"<p>ReadyAPI \u2714\ufe0f \ud83d\udcf6 \ud83c\udfcb\ufe0f \u270b\ufe0f \ud83c\udfcb\ufe0f \ud83d\udd17 \ud83d\udc89 \u2699\ufe0f.</p> <p>\u26ab\ufe0f \ud83c\udfd7 \ud83d\udcf6 \ud83d\ude45 \u2699\ufe0f, &amp; \u2692 \u26ab\ufe0f \ud83d\udcf6 \u23e9 \ud83d\ude46 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udee0\ufe0f \ud83c\udf8f \ud83e\uddb2 \u23ee\ufe0f ReadyAPI.</p>"},{"location":"tutorial/dependencies/#_2","title":"\u26ab\ufe0f\u2754 \"\ud83d\udd17 \ud83d\udc89\"","text":"<p>\"\ud83d\udd17 \ud83d\udc89\" \u26d3, \ud83d\udccb, \ud83d\udc48 \ud83d\udce4 \ud83c\udf0c \ud83d\udc46 \ud83d\udcdf (\ud83d\udc49 \ud83d\udcbc, \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22) \ud83d\udce3 \ud83d\udc5c \ud83d\udc48 \u26ab\ufe0f \ud83d\ude9a \ud83d\udc77 &amp; \u2699\ufe0f: \"\ud83d\udd17\".</p> <p>&amp; \u2934\ufe0f, \ud83d\udc48 \u2699\ufe0f (\ud83d\udc49 \ud83d\udcbc ReadyAPI) \ud83d\udd1c \u270a \ud83d\udc85 \ud83d\udd28 \u26ab\ufe0f\u2754 \ud83d\udcaa \ud83d\ude9a \ud83d\udc46 \ud83d\udcdf \u23ee\ufe0f \ud83d\udcda \ud83d\udcaa \ud83d\udd17 (\"\ud83d\udc89\" \ud83d\udd17).</p> <p>\ud83d\udc49 \ud83d\udcf6 \u26a0 \ud83d\udd50\u2754 \ud83d\udc46 \ud83d\udcaa:</p> <ul> <li>\u2714\ufe0f \ud83d\udcb0 \u269b (\ud83c\udf8f \ud83d\udcdf \u269b \ud83d\udd04 &amp; \ud83d\udd04).</li> <li>\ud83d\udcb0 \ud83d\udcbd \ud83d\udd17.</li> <li>\ud83d\udee0\ufe0f \ud83d\udc82\u200d\u2642, \ud83e\udd1d, \ud83d\udd11 \ud83d\udcc4, \u2652\ufe0f.</li> <li>&amp; \ud83d\udcda \ud83c\udf8f \ud83d\udc5c...</li> </ul> <p>\ud83c\udf10 \ud83d\udc6b, \u23ea \ud83d\udcc9 \ud83d\udcdf \ud83d\udd01.</p>"},{"location":"tutorial/dependencies/#_3","title":"\ud83e\udd47 \ud83d\udd01","text":"<p>\u27a1\ufe0f \ud83d\udc40 \ud83d\udcf6 \ud83d\ude45 \ud83d\uddbc. \u26ab\ufe0f \ud83d\udd1c \ud83d\ude45 \ud83d\udc48 \u26ab\ufe0f \ud83d\udeab \ud83d\udcf6 \u26a0, \ud83d\udd1c.</p> <p>\u270b\ufe0f \ud83d\udc49 \ud83c\udf0c \ud83d\udc65 \ud83d\udcaa \ud83c\udfaf \ud83d\udd1b \u2754 \ud83d\udd17 \ud83d\udc89 \u2699\ufe0f \ud83d\udc77.</p>"},{"location":"tutorial/dependencies/#_4","title":"\u270d \ud83d\udd17, \u2696\ufe0f \"\u2611\"","text":"<p>\u27a1\ufe0f \ud83e\udd47 \ud83c\udfaf \ud83d\udd1b \ud83d\udd17.</p> <p>\u26ab\ufe0f \ud83d\udd22 \ud83d\udc48 \ud83d\udcaa \u270a \ud83c\udf10 \ud83c\udf8f \ud83d\udd22 \ud83d\udc48 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22 \ud83d\udcaa \u270a:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre> <p>\ud83d\udc48 \u26ab\ufe0f.</p> <p>2\ufe0f\u20e3 \u23f8.</p> <p>&amp; \u26ab\ufe0f \u2714\ufe0f \ud83c\udf8f \ud83d\udca0 &amp; \ud83d\udcca \ud83d\udc48 \ud83c\udf10 \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22 \u2714\ufe0f.</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udcad \u26ab\ufe0f \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22 \ud83c\udf75 \"\ud83d\udc68\u200d\ud83c\udfa8\" (\ud83c\udf75 <code>@app.get(\"/some-path\")</code>).</p> <p>&amp; \u26ab\ufe0f \ud83d\udcaa \ud83d\udce8 \ud83d\udd73 \ud83d\udc46 \ud83d\udc9a.</p> <p>\ud83d\udc49 \ud83d\udcbc, \ud83d\udc49 \ud83d\udd17 \u231b:</p> <ul> <li>\ud83d\udce6 \ud83d\udd22 \ud83d\udd22 <code>q</code> \ud83d\udc48 <code>str</code>.</li> <li>\ud83d\udce6 \ud83d\udd22 \ud83d\udd22 <code>skip</code> \ud83d\udc48 <code>int</code>, &amp; \ud83d\udd22 <code>0</code>.</li> <li>\ud83d\udce6 \ud83d\udd22 \ud83d\udd22 <code>limit</code> \ud83d\udc48 <code>int</code>, &amp; \ud83d\udd22 <code>100</code>.</li> </ul> <p>&amp; \u2934\ufe0f \u26ab\ufe0f \ud83d\udce8 <code>dict</code> \u2697 \ud83d\udcda \ud83d\udcb2.</p>"},{"location":"tutorial/dependencies/#depends","title":"\ud83d\uddc4 <code>Depends</code>","text":"Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre>"},{"location":"tutorial/dependencies/#_5","title":"\ud83d\udce3 \ud83d\udd17, \"\u2693\ufe0f\"","text":"<p>\ud83c\udf8f \ud83c\udf0c \ud83d\udc46 \u2699\ufe0f <code>Body</code>, <code>Query</code>, \u2652\ufe0f. \u23ee\ufe0f \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22 \ud83d\udd22, \u2699\ufe0f <code>Depends</code> \u23ee\ufe0f \ud83c\udd95 \ud83d\udd22:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre> <p>\ud83d\udc50 \ud83d\udc46 \u2699\ufe0f <code>Depends</code> \ud83d\udd22 \ud83d\udc46 \ud83d\udd22 \ud83c\udf8f \ud83c\udf0c \ud83d\udc46 \u2699\ufe0f <code>Body</code>, <code>Query</code>, \u2652\ufe0f, <code>Depends</code> \ud83d\udc77 \ud83d\udc44 \ud83c\udf8f.</p> <p>\ud83d\udc46 \ud83d\udd74 \ud83e\udd1d <code>Depends</code> \ud83d\udc41 \ud83d\udd22.</p> <p>\ud83d\udc49 \ud83d\udd22 \ud83d\udd1c \ud83d\udd73 \ud83d\udc96 \ud83d\udd22.</p> <p>&amp; \ud83d\udc48 \ud83d\udd22 \u270a \ud83d\udd22 \ud83c\udf8f \ud83c\udf0c \ud83d\udc48 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22 .</p> <p>Tip</p> <p>\ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \u26ab\ufe0f\u2754 \ud83c\udf8f \"\ud83d\udc5c\", \u2196\ufe0f \u26aa\ufe0f\u27a1\ufe0f \ud83d\udd22, \ud83d\udcaa \u2699\ufe0f \ud83d\udd17 \u23ed \ud83d\udcc3.</p> <p>\ud83d\udd50\u2754 \ud83c\udd95 \ud83d\udce8 \ud83d\udeec, ReadyAPI \ud83d\udd1c \u270a \ud83d\udc85:</p> <ul> <li>\ud83e\udd19 \ud83d\udc46 \ud83d\udd17 (\"\u2611\") \ud83d\udd22 \u23ee\ufe0f \u2611 \ud83d\udd22.</li> <li>\ud83e\udd1a \ud83c\udfc1 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc46 \ud83d\udd22.</li> <li>\ud83d\udee0\ufe0f \ud83d\udc48 \ud83c\udfc1 \ud83d\udd22 \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22.</li> </ul> <pre><code>graph TB\n\ncommon_parameters([\"common_parameters\"])\nread_items[\"/items/\"]\nread_users[\"/users/\"]\n\ncommon_parameters --&gt; read_items\ncommon_parameters --&gt; read_users</code></pre> <p>\ud83d\udc49 \ud83c\udf0c \ud83d\udc46 \u270d \ud83d\udd17 \ud83d\udcdf \ud83d\udd50 &amp; ReadyAPI \u270a \ud83d\udc85 \ud83e\udd19 \u26ab\ufe0f \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f.</p> <p>Check</p> <p>\ud83d\udc40 \ud83d\udc48 \ud83d\udc46 \ud83d\udeab \u2714\ufe0f \u270d \ud83c\udf81 \ud83c\udf93 &amp; \ud83d\udeb6\u200d\u2640\ufe0f \u26ab\ufe0f \ud83d\udc71 ReadyAPI \"\u00ae\" \u26ab\ufe0f \u2696\ufe0f \ud83d\udd73 \ud83c\udf8f.</p> <p>\ud83d\udc46 \ud83d\udeb6\u200d\u2640\ufe0f \u26ab\ufe0f <code>Depends</code> &amp; ReadyAPI \ud83d\udcad \u2754 \ud83c\udf82.</p>"},{"location":"tutorial/dependencies/#async-async","title":"<code>async</code> \u2696\ufe0f \ud83d\udeab <code>async</code>","text":"<p>\ud83d\udd17 \ud83d\udd1c \ud83e\udd19 ReadyAPI (\ud83c\udf8f \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22), \ud83c\udf8f \ud83d\udeab \u2714 \u23ea \ud83d\udd2c \ud83d\udc46 \ud83d\udd22.</p> <p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>async def</code> \u2696\ufe0f \ud83d\ude10 <code>def</code>.</p> <p>&amp; \ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83d\udd17 \u23ee\ufe0f <code>async def</code> \ud83d\udd18 \ud83d\ude10 <code>def</code> \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22, \u2696\ufe0f <code>def</code> \ud83d\udd17 \ud83d\udd18 <code>async def</code> \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22, \u2652\ufe0f.</p> <p>\u26ab\ufe0f \ud83d\udeab \ud83e\udd14. ReadyAPI \ud83d\udd1c \ud83d\udcad \u26ab\ufe0f\u2754.</p> <p>Note</p> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udeab \ud83d\udcad, \u2705 \ud83d\udd01: *\"\ud83c\udfc3 \u2753\" * \ud83d\udcc4 \ud83d\udd03 <code>async</code> &amp; <code>await</code> \ud83e\ude7a.</p>"},{"location":"tutorial/dependencies/#_6","title":"\ud83d\udee0\ufe0f \u23ee\ufe0f \ud83d\uddc4","text":"<p>\ud83c\udf10 \ud83d\udce8 \ud83d\udcc4, \ud83d\udd2c &amp; \ud83d\udcc4 \ud83d\udc46 \ud83d\udd17 (&amp; \ud83c\udfa7-\ud83d\udd17) \ud83d\udd1c \ud83d\udee0\ufe0f \ud83c\udf8f \ud83d\uddc4 \ud83d\udd17.</p> <p>, \ud83c\udf93 \ud83e\ude7a \ud83d\udd1c \u2714\ufe0f \ud83c\udf10 \u2139 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc6b \ud83d\udd17 \ud83d\udc81\u200d\u2642\ufe0f:</p> <p></p>"},{"location":"tutorial/dependencies/#_7","title":"\ud83d\ude45 \u2699\ufe0f","text":"<p>\ud83d\udea5 \ud83d\udc46 \ud83d\udc40 \u26ab\ufe0f, \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22 \ud83d\udce3 \u2699\ufe0f \ud83d\udd50\u2754 \u27a1 &amp; \ud83d\udee0\ufe0f \ud83c\udfcf, &amp; \u2934\ufe0f ReadyAPI \u270a \ud83d\udc85 \ud83e\udd19 \ud83d\udd22 \u23ee\ufe0f \u2611 \ud83d\udd22, \u274e \ud83d\udcca \u26aa\ufe0f\u27a1\ufe0f \ud83d\udce8.</p> <p>\ud83e\udd19, \ud83c\udf10 (\u2696\ufe0f \ud83c\udfc6) \ud83d\udd78 \ud83d\udee0\ufe0f \ud83d\udc77 \ud83d\udc49 \ud83c\udf8f \ud83c\udf0c.</p> <p>\ud83d\udc46 \ud83d\ude45 \ud83e\udd19 \ud83d\udc48 \ud83d\udd22 \ud83d\udd17. \ud83d\udc6b \ud83e\udd19 \ud83d\udc46 \ud83d\udee0\ufe0f (\ud83d\udc49 \ud83d\udcbc, ReadyAPI).</p> <p>\u23ee\ufe0f \ud83d\udd17 \ud83d\udc89 \u2699\ufe0f, \ud83d\udc46 \ud83d\udcaa \ud83d\udcac ReadyAPI \ud83d\udc48 \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22 \"\ud83e\ude80\" \ud83d\udd1b \ud83d\udd73 \ud83d\ude46 \ud83d\udc48 \ud83d\udd1c \ud83d\udee0\ufe0f \u23ed \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22, &amp; ReadyAPI \ud83d\udd1c \u270a \ud83d\udc85 \ud83d\udee0\ufe0f \u26ab\ufe0f &amp; \"\ud83d\udc89\" \ud83c\udfc1.</p> <p>\ud83c\udf8f \u26a0 \u2696 \ud83d\udc49 \ud83c\udf8f \ud83d\udcad \"\ud83d\udd17 \ud83d\udc89\":</p> <ul> <li>\u2139</li> <li>\ud83d\udc15\u200d\ud83e\uddba</li> <li>\ud83d\udc15\u200d\ud83e\uddba</li> <li>\ud83d\udc89</li> <li>\ud83e\uddb2</li> </ul>"},{"location":"tutorial/dependencies/#readyapi-","title":"ReadyAPI \ud83d\udd0c-\ud83d\udd0c","text":"<p>\ud83d\udee0\ufe0f &amp; \"\ud83d\udd0c-\"\u24c2 \ud83d\udcaa \ud83c\udfd7 \u2699\ufe0f \ud83d\udd17 \ud83d\udc89 \u2699\ufe0f. \u270b\ufe0f \ud83d\udc50, \ud83d\udce4 \ud83e\udd19 \ud83d\ude45\u200d\u2642 \ud83d\udcaa \u270d \"\ud83d\udd0c-\ud83d\udd0c\", \u2699\ufe0f \ud83d\udd17 \u26ab\ufe0f \ud83d\udcaa \ud83d\udce3 \u267e \ud83d\udd22 \ud83d\udee0\ufe0f &amp; \ud83d\udd17 \ud83d\udc48 \u25b6\ufe0f\ufe0f \ud83d\udcaa \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22.</p> <p>&amp; \ud83d\udd17 \ud83d\udcaa \u270d \ud83d\udcf6 \ud83d\ude45 &amp; \ud83c\udfcb\ufe0f \ud83c\udf0c \ud83d\udc48 \u2714 \ud83d\udc46 \ud83d\uddc4 \ud83d\udc0d \ud83d\udce6 \ud83d\udc46 \ud83d\udcaa, &amp; \ud83d\udee0\ufe0f \ud83d\udc6b \u23ee\ufe0f \ud83d\udc46 \ud83d\udee0\ufe0f \ud83d\udd22 \ud83d\udc69\u200d\u2764\u200d\ud83d\udc68 \u23f8 \ud83d\udcdf, \ud83c\udf16.</p> <p>\ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \ud83d\uddbc \ud83d\udc49 \u23ed \ud83d\udcc3, \ud83d\udd03 \ud83d\udd17 &amp; \u2601 \ud83d\udcbd, \ud83d\udc82\u200d\u2642, \u2652\ufe0f.</p>"},{"location":"tutorial/dependencies/#readyapi","title":"ReadyAPI \ud83d\udd17","text":"<p>\ud83e\udd81 \ud83d\udd17 \ud83d\udc89 \u2699\ufe0f \u2692 ReadyAPI \ud83d\udd17 \u23ee\ufe0f:</p> <ul> <li>\ud83c\udf10 \ud83d\udd17 \ud83d\udcbd</li> <li>\u2601 \ud83d\udcbd</li> <li>\ud83d\udd22 \ud83d\udce6</li> <li>\ud83d\udd22 \ud83d\udd17</li> <li>\ud83e\udd1d &amp; \u2714 \u2699\ufe0f</li> <li>\ud83d\udee0\ufe0f \u2699\ufe0f \u2696 \u2699\ufe0f</li> <li>\ud83d\udce8 \ud83d\udcbd \ud83d\udc89 \u2699\ufe0f</li> <li>\u2652\ufe0f.</li> </ul>"},{"location":"tutorial/dependencies/#_8","title":"\ud83d\ude45 &amp; \ud83c\udfcb\ufe0f","text":"<p>\ud83d\udc50 \ud83d\udd17 \ud83d\udd17 \ud83d\udc89 \u2699\ufe0f \ud83d\udcf6 \ud83d\ude45 \ud83d\udd2c &amp; \u2699\ufe0f, \u26ab\ufe0f \ud83d\udcf6 \ud83c\udfcb\ufe0f.</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udd2c \ud83d\udd17 \ud83d\udc48 \ud83d\udd04 \ud83d\udcaa \ud83d\udd2c \ud83d\udd17 \ud83d\udc6b.</p> <p>\ud83d\udd1a, \ud83d\udd17 \ud83c\udf32 \ud83d\udd17 \ud83c\udfd7, &amp; \ud83d\udd17 \ud83d\udc89 \u2699\ufe0f \u270a \ud83d\udc85 \ud83d\udd2c \ud83c\udf10 \ud83d\udc49 \ud83d\udd17 \ud83d\udc46 (&amp; \ud83d\udc6b \ud83c\udfa7-\ud83d\udd17) &amp; \ud83d\ude9a (\ud83d\udc89) \ud83c\udfc1 \ud83d\udd20 \ud83d\udd01.</p> <p>\ud83d\uddbc, \u27a1\ufe0f \ud83d\udcac \ud83d\udc46 \u2714\ufe0f 4\ufe0f\u20e3 \ud83d\udee0\ufe0f \ud83d\udd17 (\u27a1 \ud83d\udee0\ufe0f):</p> <ul> <li><code>/items/public/</code></li> <li><code>/items/private/</code></li> <li><code>/users/{user_id}/activate</code></li> <li><code>/items/pro/</code></li> </ul> <p>\u2934\ufe0f \ud83d\udc46 \ud83d\udcaa \ud83d\udeae \ud83c\udf8f \u2714 \ud83d\udcc4 \ud83d\udd20 \ud83d\udc6b \u23ee\ufe0f \ud83d\udd17 &amp; \ud83c\udfa7-\ud83d\udd17:</p> <pre><code>graph TB\n\ncurrent_user([\"current_user\"])\nactive_user([\"active_user\"])\nadmin_user([\"admin_user\"])\npaying_user([\"paying_user\"])\n\npublic[\"/items/public/\"]\nprivate[\"/items/private/\"]\nactivate_user[\"/users/{user_id}/activate\"]\npro_items[\"/items/pro/\"]\n\ncurrent_user --&gt; active_user\nactive_user --&gt; admin_user\nactive_user --&gt; paying_user\n\ncurrent_user --&gt; public\nactive_user --&gt; private\nadmin_user --&gt; activate_user\npaying_user --&gt; pro_items</code></pre>"},{"location":"tutorial/dependencies/#_9","title":"\ud83d\udee0\ufe0f \u23ee\ufe0f \ud83d\uddc4","text":"<p>\ud83c\udf10 \ud83d\udc6b \ud83d\udd17, \u23ea \ud83d\udce3 \ud83d\udc6b \ud83d\udcc4, \ud83d\udeae \ud83d\udd22, \ud83d\udd2c, \u2652\ufe0f. \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f.</p> <p>ReadyAPI \ud83d\udd1c \u270a \ud83d\udc85 \ud83d\udeae \u26ab\ufe0f \ud83c\udf10 \ud83d\uddc4 \ud83d\udd17, \ud83d\udc48 \u26ab\ufe0f \ud83c\udfa6 \ud83c\udf93 \ud83e\uddfe \u2699\ufe0f.</p>"},{"location":"tutorial/dependencies/classes-as-dependencies/","title":"\ud83c\udf93 \ud83d\udd17","text":"<p>\u23ed \ud83e\udd3f \u23ec \ud83d\udd18 \ud83d\udd17 \ud83d\udc89 \u2699\ufe0f, \u27a1\ufe0f \u267b \u23ee\ufe0f \ud83d\uddbc.</p>"},{"location":"tutorial/dependencies/classes-as-dependencies/#dict","title":"<code>dict</code> \u26aa\ufe0f\u27a1\ufe0f \u23ee\ufe0f \ud83d\uddbc","text":"<p>\u23ee\ufe0f \ud83d\uddbc, \ud83d\udc65 \ud83d\udeec <code>dict</code> \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc46 \ud83d\udd17 (\"\u2611\"):</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre> <p>\u270b\ufe0f \u2934\ufe0f \ud83d\udc65 \ud83e\udd1a <code>dict</code> \ud83d\udd22 <code>commons</code> \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22.</p> <p>&amp; \ud83d\udc65 \ud83d\udcad \ud83d\udc48 \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udcaa \ud83d\udeab \ud83d\ude9a \ud83d\udcda \ud83d\udc15\u200d\ud83e\uddba (\ud83d\udc96 \ud83d\udee0\ufe0f) <code>dict</code>\u24c2, \u21a9\ufe0f \ud83d\udc6b \ud83d\udcaa \ud83d\udeab \ud83d\udcad \ud83d\udc6b \ud83d\udd11 &amp; \ud83d\udcb2 \ud83c\udd8e.</p> <p>\ud83d\udc65 \ud83d\udcaa \ud83d\udc4d...</p>"},{"location":"tutorial/dependencies/classes-as-dependencies/#_2","title":"\u26ab\ufe0f\u2754 \u2692 \ud83d\udd17","text":"<p>\ud83c\udd99 \ud83d\udd1c \ud83d\udc46 \u2714\ufe0f \ud83d\udc40 \ud83d\udd17 \ud83d\udce3 \ud83d\udd22.</p> <p>\u270b\ufe0f \ud83d\udc48 \ud83d\udeab \ud83d\udd74 \ud83c\udf0c \ud83d\udce3 \ud83d\udd17 (\ud83d\udc50 \u26ab\ufe0f \ud83d\udd1c \ud83c\udfb2 \ud83c\udf16 \u26a0).</p> <p>\ud83d\udd11 \u2696 \ud83d\udc48 \ud83d\udd17 \ud83d\udd1c \"\ud83c\udde7\ud83c\uddf2\".</p> <p>\"\ud83c\udde7\ud83c\uddf2\" \ud83d\udc0d \ud83d\udd73 \ud83d\udc48 \ud83d\udc0d \ud83d\udcaa \"\ud83e\udd19\" \ud83d\udc96 \ud83d\udd22.</p> <p>, \ud83d\udea5 \ud83d\udc46 \u2714\ufe0f \ud83c\udf9a <code>something</code> (\ud83d\udc48 \ud83d\udcaa \ud83d\udeab \ud83d\udd22) &amp; \ud83d\udc46 \ud83d\udcaa \"\ud83e\udd19\" \u26ab\ufe0f (\ud83d\udee0\ufe0f \u26ab\ufe0f) \ud83d\udc96:</p> <pre><code>something()\n</code></pre> <p>\u2696\ufe0f</p> <pre><code>something(some_argument, some_keyword_argument=\"foo\")\n</code></pre> <p>\u2934\ufe0f \u26ab\ufe0f \"\ud83c\udde7\ud83c\uddf2\".</p>"},{"location":"tutorial/dependencies/classes-as-dependencies/#_3","title":"\ud83c\udf93 \ud83d\udd17","text":"<p>\ud83d\udc46 5\ufe0f\u20e3\ud83d\udcc6 \ud83d\udc40 \ud83d\udc48 \u270d \ud83d\udc50 \ud83d\udc0d \ud83c\udf93, \ud83d\udc46 \u2699\ufe0f \ud83d\udc48 \ud83c\udf8f \u2755.</p> <p>\ud83d\uddbc:</p> <pre><code>class Cat:\n    def __init__(self, name: str):\n        self.name = name\n\n\nfluffy = Cat(name=\"Mr Fluffy\")\n</code></pre> <p>\ud83d\udc49 \ud83d\udcbc, <code>fluffy</code> \ud83d\udc50 \ud83c\udf93 <code>Cat</code>.</p> <p>&amp; \u270d <code>fluffy</code>, \ud83d\udc46 \"\ud83e\udd19\" <code>Cat</code>.</p> <p>, \ud83d\udc0d \ud83c\udf93 \ud83c\udde7\ud83c\uddf2.</p> <p>\u2934\ufe0f, ReadyAPI, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83d\udc0d \ud83c\udf93 \ud83d\udd17.</p> <p>\u26ab\ufe0f\u2754 ReadyAPI \ud83e\udd19 \u2705 \ud83d\udc48 \u26ab\ufe0f \"\ud83c\udde7\ud83c\uddf2\" (\ud83d\udd22, \ud83c\udf93 \u2696\ufe0f \ud83d\udd73 \ud83d\ude46) &amp; \ud83d\udd22 \ud83d\udd2c.</p> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udeb6\u200d\u2640\ufe0f \"\ud83c\udde7\ud83c\uddf2\" \ud83d\udd17 ReadyAPI, \u26ab\ufe0f \ud83d\udd1c \ud83d\udd2c \ud83d\udd22 \ud83d\udc48 \"\ud83c\udde7\ud83c\uddf2\", &amp; \ud83d\udee0\ufe0f \ud83d\udc6b \ud83c\udf8f \ud83c\udf0c \ud83d\udd22 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22. \u2705 \ud83c\udfa7-\ud83d\udd17.</p> <p>\ud83d\udc48 \u2714 \ud83c\udde7\ud83c\uddf2 \u23ee\ufe0f \ud83d\ude45\u200d\u2642 \ud83d\udd22 \ud83c\udf10. \ud83c\udf8f \u26ab\ufe0f \ud83d\udd1c \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22 \u23ee\ufe0f \ud83d\ude45\u200d\u2642 \ud83d\udd22.</p> <p>\u2934\ufe0f, \ud83d\udc65 \ud83d\udcaa \ud83d\udd00 \ud83d\udd17 \"\u2611\" <code>common_parameters</code> \u26aa\ufe0f\u27a1\ufe0f \ud83d\udd1b \ud83c\udf93 <code>CommonQueryParams</code>:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends(CommonQueryParams)):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends(CommonQueryParams)):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>\ud83d\udcb8 \ud83d\ude4b <code>__init__</code> \ud83d\udc69\u200d\ud83d\udd2c \u2699\ufe0f \u270d \ud83d\udc50 \ud83c\udf93:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends(CommonQueryParams)):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends(CommonQueryParams)):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>...\u26ab\ufe0f \u2714\ufe0f \ud83c\udf8f \ud83d\udd22 \ud83d\udc46 \u23ee\ufe0f <code>common_parameters</code>:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons\n\n\n@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons\n</code></pre> <p>\ud83d\udcda \ud83d\udd22 \u26ab\ufe0f\u2754 ReadyAPI \ud83d\udd1c \u2699\ufe0f \"\u274e\" \ud83d\udd17.</p> <p>\ud83d\udc6f\u200d\u2642\ufe0f \ud83d\udcbc, \u26ab\ufe0f \ud83d\udd1c \u2714\ufe0f:</p> <ul> <li>\ud83d\udce6 <code>q</code> \ud83d\udd22 \ud83d\udd22 \ud83d\udc48 <code>str</code>.</li> <li><code>skip</code> \ud83d\udd22 \ud83d\udd22 \ud83d\udc48 <code>int</code>, \u23ee\ufe0f \ud83d\udd22 <code>0</code>.</li> <li><code>limit</code> \ud83d\udd22 \ud83d\udd22 \ud83d\udc48 <code>int</code>, \u23ee\ufe0f \ud83d\udd22 <code>100</code>.</li> </ul> <p>\ud83d\udc6f\u200d\u2642\ufe0f \ud83d\udcbc \ud83d\udcbd \ud83d\udd1c \ud83d\udddc, \u2714, \ud83d\udcc4 \ud83d\udd1b \ud83d\uddc4 \ud83d\udd17, \u2652\ufe0f.</p>"},{"location":"tutorial/dependencies/classes-as-dependencies/#_4","title":"\u2699\ufe0f \u26ab\ufe0f","text":"<p>\ud83d\udd1c \ud83d\udc46 \ud83d\udcaa \ud83d\udce3 \ud83d\udc46 \ud83d\udd17 \u2699\ufe0f \ud83d\udc49 \ud83c\udf93.</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends(CommonQueryParams)):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends(CommonQueryParams)):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>ReadyAPI \ud83e\udd19 <code>CommonQueryParams</code> \ud83c\udf93. \ud83d\udc49 \u270d \"\ud83d\udc50\" \ud83d\udc48 \ud83c\udf93 &amp; \ud83d\udc50 \ud83d\udd1c \ud83d\udeb6\u200d\u2640\ufe0f \ud83d\udd22 <code>commons</code> \ud83d\udc46 \ud83d\udd22.</p>"},{"location":"tutorial/dependencies/classes-as-dependencies/#depends","title":"\ud83c\udd8e \u270d \ud83c\udd9a <code>Depends</code>","text":"<p>\ud83d\udc40 \u2754 \ud83d\udc65 \u270d <code>CommonQueryParams</code> \ud83d\udd50 \ud83d\udd1b \ud83d\udcdf:</p> <pre><code>commons: CommonQueryParams = Depends(CommonQueryParams)\n</code></pre> <p>\ud83c\udfc1 <code>CommonQueryParams</code>,:</p> <pre><code>... = Depends(CommonQueryParams)\n</code></pre> <p>...\u26ab\ufe0f\u2754 ReadyAPI \ud83d\udd1c \ud83e\udd19 \u2699\ufe0f \ud83d\udcad \u26ab\ufe0f\u2754 \ud83d\udd17.</p> <p>\u26aa\ufe0f\u27a1\ufe0f \u26ab\ufe0f \ud83d\udc48 ReadyAPI \ud83d\udd1c \u2697 \ud83d\udce3 \ud83d\udd22 &amp; \ud83d\udc48 \u26ab\ufe0f\u2754 ReadyAPI \ud83d\udd1c \ud83e\udd19 \ud83e\udd19.</p> <p>\ud83d\udc49 \ud83d\udcbc, \ud83e\udd47 <code>CommonQueryParams</code>,:</p> <pre><code>commons: CommonQueryParams ...\n</code></pre> <p>...\ud83d\udeab \u2714\ufe0f \ud83d\ude46 \ud83c\udf81 \ud83d\udd11 ReadyAPI. ReadyAPI \ud83c\udfc6 \ud83d\udeab \u2699\ufe0f \u26ab\ufe0f \ud83d\udcbd \ud83d\udee0\ufe0f, \ud83d\udd2c, \u2652\ufe0f. (\u26ab\ufe0f \u2699\ufe0f <code>= Depends(CommonQueryParams)</code> \ud83d\udc48).</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83e\udd19 \u270d:</p> <pre><code>commons = Depends(CommonQueryParams)\n</code></pre> <p>...:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons=Depends(CommonQueryParams)):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated, Any\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[Any, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <pre><code>from typing import Annotated, Any, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[Any, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <pre><code>from typing import Any, Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[Any, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons=Depends(CommonQueryParams)):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>\u270b\ufe0f \ud83d\udce3 \ud83c\udd8e \ud83d\udca1 \ud83d\udc48 \ud83c\udf0c \ud83d\udc46 \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udd1c \ud83d\udcad \u26ab\ufe0f\u2754 \ud83d\udd1c \ud83d\udeb6\u200d\u2640\ufe0f \ud83d\udd22 <code>commons</code>, &amp; \u2934\ufe0f \u26ab\ufe0f \ud83d\udcaa \u2139 \ud83d\udc46 \u23ee\ufe0f \ud83d\udcdf \ud83d\udee0\ufe0f, \ud83c\udd8e \u2705, \u2652\ufe0f:</p> <p></p>"},{"location":"tutorial/dependencies/classes-as-dependencies/#_5","title":"\u2328","text":"<p>\u270b\ufe0f \ud83d\udc46 \ud83d\udc40 \ud83d\udc48 \ud83d\udc65 \u2714\ufe0f \ud83d\udcdf \ud83d\udd01 \ud83d\udce5, \u270d <code>CommonQueryParams</code> \ud83d\udd50:</p> <pre><code>commons: CommonQueryParams = Depends(CommonQueryParams)\n</code></pre> <p>ReadyAPI \ud83d\ude9a \u2328 \ud83d\udc6b \ud83d\udcbc, \ud83c\udf10\u2754 \ud83d\udd17 \ud83c\udfaf \ud83c\udf93 \ud83d\udc48 ReadyAPI \ud83d\udd1c \"\ud83e\udd19\" \u270d \ud83d\udc50 \ud83c\udf93 \u26ab\ufe0f.</p> <p>\ud83d\udcda \ud83c\udfaf \ud83d\udcbc, \ud83d\udc46 \ud83d\udcaa \ud83d\udcc4:</p> <p>\u21a9\ufe0f \u270d:</p> <pre><code>commons: CommonQueryParams = Depends(CommonQueryParams)\n</code></pre> <p>...\ud83d\udc46 \u270d:</p> <pre><code>commons: CommonQueryParams = Depends()\n</code></pre> <p>\ud83d\udc46 \ud83d\udce3 \ud83d\udd17 \ud83c\udd8e \ud83d\udd22, &amp; \ud83d\udc46 \u2699\ufe0f <code>Depends()</code> \ud83d\udeae \"\ud83d\udd22\" \ud83d\udcb2 (\ud83d\udc48 \u23ee\ufe0f <code>=</code>) \ud83d\udc48 \ud83d\udd22 \ud83d\udd22, \ud83c\udf75 \ud83d\ude46 \ud83d\udd22 <code>Depends()</code>, \u21a9\ufe0f \u2714\ufe0f \u270d \ud83c\udf15 \ud83c\udf93 \ud83d\udd04 \ud83d\udd18 <code>Depends(CommonQueryParams)</code>.</p> <p>\ud83c\udf8f \ud83d\uddbc \ud83d\udd1c \u2934\ufe0f \ud83d\udc40 \ud83d\udc96:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends()):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends()]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends()]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends()]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\n\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends()):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response\n</code></pre> <p>...&amp; ReadyAPI \ud83d\udd1c \ud83d\udcad \u26ab\ufe0f\u2754.</p> <p>Tip</p> <p>\ud83d\udea5 \ud83d\udc48 \ud83d\ude11 \ud83c\udf05 \ud83d\ude28 \ud83c\udf18 \ud83d\udc4d, \ud83e\udd37\u200d\u2642 \u26ab\ufe0f, \ud83d\udc46 \ud83d\udeab \ud83d\udcaa \u26ab\ufe0f.</p> <p>\u26ab\ufe0f \u2328. \u21a9\ufe0f ReadyAPI \ud83d\udc85 \ud83d\udd03 \ud83e\udd1d \ud83d\udc46 \ud83d\udcc9 \ud83d\udcdf \ud83d\udd01.</p>"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/","title":"\ud83d\udd17 \u27a1 \ud83d\udee0\ufe0f \ud83d\udc68\u200d\ud83c\udfa8","text":"<p>\ud83d\udcbc \ud83d\udc46 \ud83d\udeab \ud83e\udd19 \ud83d\udcaa \ud83d\udce8 \ud83d\udcb2 \ud83d\udd17 \ud83d\udd18 \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22.</p> <p>\u2696\ufe0f \ud83d\udd17 \ud83d\udeab \ud83d\udce8 \ud83d\udcb2.</p> <p>\u270b\ufe0f \ud83d\udc46 \ud83d\udcaa \u26ab\ufe0f \ud83d\udee0\ufe0f/\u274e.</p> <p>\ud83d\udcda \ud83d\udcbc, \u21a9\ufe0f \ud83d\udce3 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22 \ud83d\udd22 \u23ee\ufe0f <code>Depends</code>, \ud83d\udc46 \ud83d\udcaa \ud83d\udeae <code>list</code> <code>dependencies</code> \u27a1 \ud83d\udee0\ufe0f \ud83d\udc68\u200d\ud83c\udfa8.</p>"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#dependencies","title":"\ud83d\udeae <code>dependencies</code> \u27a1 \ud83d\udee0\ufe0f \ud83d\udc68\u200d\ud83c\udfa8","text":"<p>\u27a1 \ud83d\udee0\ufe0f \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udce8 \ud83d\udce6 \u274c <code>dependencies</code>.</p> <p>\u26ab\ufe0f \ud83d\udd1c <code>list</code> <code>Depends()</code>:</p> Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: str = Header()):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: str = Header()):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, Header, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre> <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre> <p>\ud83d\udc49 \ud83d\udd17 \ud83d\udd1c \ud83d\udee0\ufe0f/\u274e \ud83c\udf8f \ud83c\udf0c \ud83d\ude10 \ud83d\udd17. \u270b\ufe0f \ud83d\udc6b \ud83d\udcb2 (\ud83d\udea5 \ud83d\udc6b \ud83d\udce8 \ud83d\ude46) \ud83c\udfc6 \ud83d\udeab \ud83d\udeb6\u200d\u2640\ufe0f \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22.</p> <p>Tip</p> <p>\ud83d\udc68\u200d\ud83c\udfa8 \u2705 \u267b \ud83d\udd22 \ud83d\udd22, &amp; \ud83c\udfa6 \ud83d\udc6b \u274c.</p> <p>\u2699\ufe0f \ud83d\udc49 <code>dependencies</code> \u27a1 \ud83d\udee0\ufe0f \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udc46 \ud83d\udcaa \u2692 \ud83d\udcad \ud83d\udc6b \ud83d\udee0\ufe0f \u23ea \u274e \ud83d\udc68\u200d\ud83c\udfa8/\ud83c\udfed \u274c.</p> <p>\u26ab\ufe0f \ud83d\udcaa \u2139 \u274e \ud83d\ude28 \ud83c\udd95 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udc48 \ud83d\udc40 \u267b \ud83d\udd22 \ud83d\udc46 \ud83d\udcdf &amp; \ud83d\udcaa \ud83d\udcad \u26ab\ufe0f \ud83d\ude43.</p> <p>Info</p> <p>\ud83d\udc49 \ud83d\uddbc \ud83d\udc65 \u2699\ufe0f \ud83d\udcad \ud83d\udec3 \ud83c\udf9a <code>X-Key</code> &amp; <code>X-Token</code>.</p> <p>\u270b\ufe0f \ud83c\udfb0 \ud83d\udcbc, \ud83d\udd50\u2754 \ud83d\udee0\ufe0f \ud83d\udc82\u200d\u2642, \ud83d\udc46 \ud83d\udd1c \ud83e\udd1a \ud83c\udf16 \ud83d\udcb0 \u26aa\ufe0f\u27a1\ufe0f \u2699\ufe0f \ud83d\udee0\ufe0f \ud83d\udc82\u200d\u2642 \ud83d\ude99 (\u23ed \ud83d\udcc3).</p>"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#_2","title":"\ud83d\udd17 \u274c &amp; \ud83d\udce8 \ud83d\udcb2","text":"<p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83c\udf8f \ud83d\udd17 \ud83d\udd22 \ud83d\udc46 \u2699\ufe0f \ud83d\udece.</p>"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#_3","title":"\ud83d\udd17 \ud83d\udcc4","text":"<p>\ud83d\udc6b \ud83d\udcaa \ud83d\udce3 \ud83d\udce8 \ud83d\udcc4 (\ud83d\udc96 \ud83c\udf9a) \u2696\ufe0f \ud83c\udf8f \ud83c\udfa7-\ud83d\udd17:</p> Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: str = Header()):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: str = Header()):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, Header, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre> <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre>"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#_4","title":"\ud83e\udd1a \u26a0","text":"<p>\ud83d\udc6b \ud83d\udd17 \ud83d\udcaa <code>raise</code> \u26a0, \ud83c\udf8f \ud83d\ude10 \ud83d\udd17:</p> Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: str = Header()):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: str = Header()):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, Header, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre> <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre>"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#_5","title":"\ud83d\udce8 \ud83d\udcb2","text":"<p>&amp; \ud83d\udc6b \ud83d\udcaa \ud83d\udce8 \ud83d\udcb2 \u2696\ufe0f \ud83d\udeab, \ud83d\udcb2 \ud83c\udfc6 \ud83d\udeab \u2699\ufe0f.</p> <p>, \ud83d\udc46 \ud83d\udcaa \ud83c\udfe4-\u2699\ufe0f \ud83d\ude10 \ud83d\udd17 (\ud83d\udc48 \ud83d\udce8 \ud83d\udcb2) \ud83d\udc46 \u23ea \u2699\ufe0f \ud83d\udc71 \ud83d\ude46, &amp; \u270b\ufe0f \ud83d\udcb2 \ud83c\udfc6 \ud83d\udeab \u2699\ufe0f, \ud83d\udd17 \ud83d\udd1c \ud83d\udee0\ufe0f:</p> Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: str = Header()):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: str = Header()):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, Header, HTTPException, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre> <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\n@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n</code></pre>"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#_6","title":"\ud83d\udd17 \ud83d\udc6a \u27a1 \ud83d\udee0\ufe0f","text":"<p>\u23ea, \ud83d\udd50\u2754 \ud83d\udc42 \ud83d\udd03 \u2754 \ud83d\udcca \ud83e\udd8f \ud83c\ude38 (\ud83e\udd8f \ud83c\ude38 - \ud83d\udc97 \ud83d\udcc1), \ud83c\udfb2 \u23ee\ufe0f \ud83d\udc97 \ud83d\udcc1, \ud83d\udc46 \ud83d\udd1c \ud83d\udca1 \u2754 \ud83d\udce3 \ud83d\udc41 <code>dependencies</code> \ud83d\udd22 \ud83d\udc6a \u27a1 \ud83d\udee0\ufe0f.</p>"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#_7","title":"\ud83c\udf10 \ud83d\udd17","text":"<p>\u23ed \ud83d\udc65 \ud83d\udd1c \ud83d\udc40 \u2754 \ud83d\udeae \ud83d\udd17 \ud83c\udf82 <code>ReadyAPI</code> \ud83c\ude38, \ud83d\udc48 \ud83d\udc6b \u2714 \ud83d\udd20 \u27a1 \ud83d\udee0\ufe0f.</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/","title":"\ud83d\udd17 \u23ee\ufe0f \ud83c\udf3e","text":"<p>ReadyAPI \ud83d\udc15\u200d\ud83e\uddba \ud83d\udd17 \ud83d\udc48 \u2795 \ud83d\udd01 \u23ee\ufe0f \ud83c\udfc1.</p> <p>\ud83d\udc49, \u2699\ufe0f <code>yield</code> \u21a9\ufe0f <code>return</code>, &amp; \u270d \u2795 \ud83d\udd01 \u23ee\ufe0f.</p> <p>Tip</p> <p>\u2692 \ud83d\udcad \u2699\ufe0f <code>yield</code> 1\ufe0f\u20e3 \ud83d\udc41 \ud83d\udd70.</p> <p>\ud83d\udce1 \u2139</p> <p>\ud83d\ude46 \ud83d\udd22 \ud83d\udc48 \u2611 \u2699\ufe0f \u23ee\ufe0f:</p> <ul> <li><code>@contextlib.contextmanager</code> \u2696\ufe0f</li> <li><code>@contextlib.asynccontextmanager</code></li> </ul> <p>\ud83d\udd1c \u2611 \u2699\ufe0f ReadyAPI \ud83d\udd17.</p> <p>\ud83d\udc50, ReadyAPI \u2699\ufe0f \ud83d\udcda 2\ufe0f\u20e3 \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udd18.</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/#yield","title":"\ud83d\udcbd \ud83d\udd17 \u23ee\ufe0f <code>yield</code>","text":"<p>\ud83d\uddbc, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83d\udc49 \u270d \ud83d\udcbd \ud83c\udf89 &amp; \ud83d\udd10 \u26ab\ufe0f \u23ee\ufe0f \ud83c\udfc1.</p> <p>\ud83d\udd74 \ud83d\udcdf \u23ed &amp; \ud83d\udd0c <code>yield</code> \ud83d\udcc4 \ud83d\udee0\ufe0f \u23ed \ud83d\udce8 \ud83d\udce8:</p> Python 3.8+ <pre><code>async def get_db():\n    db = DBSession()\n    try:\n        yield db\n    finally:\n        db.close()\n</code></pre> <p>\ud83c\udf3e \ud83d\udcb2 \u26ab\ufe0f\u2754 \ud83d\udc89 \ud83d\udd18 \u27a1 \ud83d\udee0\ufe0f &amp; \ud83c\udf8f \ud83d\udd17:</p> Python 3.8+ <pre><code>async def get_db():\n    db = DBSession()\n    try:\n        yield db\n    finally:\n        db.close()\n</code></pre> <p>\ud83d\udcdf \ud83d\udcc4 <code>yield</code> \ud83d\udcc4 \ud83d\udee0\ufe0f \u23ee\ufe0f \ud83d\udce8 \u2714\ufe0f \ud83d\ude9a:</p> Python 3.8+ <pre><code>async def get_db():\n    db = DBSession()\n    try:\n        yield db\n    finally:\n        db.close()\n</code></pre> <p>Tip</p> <p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>async</code> \u2696\ufe0f \ud83d\ude10 \ud83d\udd22.</p> <p>ReadyAPI \ud83d\udd1c \u25b6\ufe0f\ufe0f \ud83d\udc5c \u23ee\ufe0f \ud83d\udd20, \ud83c\udf8f \u23ee\ufe0f \ud83d\ude10 \ud83d\udd17.</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/#yield-try","title":"\ud83d\udd17 \u23ee\ufe0f <code>yield</code> &amp; <code>try</code>","text":"<p>\ud83d\udea5 \ud83d\udc46 \u2699\ufe0f <code>try</code> \ud83c\udf6b \ud83d\udd17 \u23ee\ufe0f <code>yield</code>, \ud83d\udc46 \ud83d\udd1c \ud83d\udce8 \ud83d\ude46 \u26a0 \ud83d\udc48 \ud83d\udeae \ud83d\udd50\u2754 \u2699\ufe0f \ud83d\udd17.</p> <p>\ud83d\uddbc, \ud83d\udea5 \ud83d\udcdf \u261d \ud83d\udd95, \u27951\ufe0f\u20e3 \ud83d\udd17 \u2696\ufe0f \u27a1 \ud83d\udee0\ufe0f, \u2692 \ud83d\udcbd \ud83d\udcb5 \"\ud83d\udcbe\" \u2696\ufe0f \u270d \ud83d\ude46 \ud83c\udf8f \u274c, \ud83d\udc46 \ud83d\udd1c \ud83d\udce8 \u26a0 \ud83d\udc46 \ud83d\udd17.</p> <p>, \ud83d\udc46 \ud83d\udcaa \ud83d\udc40 \ud83d\udc48 \ud83c\udfaf \u26a0 \ud83d\udd18 \ud83d\udd17 \u23ee\ufe0f <code>except SomeException</code>.</p> <p>\ud83c\udf8f \ud83c\udf0c, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>finally</code> \u2692 \ud83d\udcad \ud83d\udeaa \ud83d\udcf6 \ud83d\udee0\ufe0f, \ud83d\ude45\u200d\u2642 \ud83e\udd14 \ud83d\udea5 \ud83d\udce4 \u26a0 \u2696\ufe0f \ud83d\udeab.</p> Python 3.8+ <pre><code>async def get_db():\n    db = DBSession()\n    try:\n        yield db\n    finally:\n        db.close()\n</code></pre>"},{"location":"tutorial/dependencies/dependencies-with-yield/#-yield","title":"\ud83c\udfa7-\ud83d\udd17 \u23ee\ufe0f <code>yield</code>","text":"<p>\ud83d\udc46 \ud83d\udcaa \u2714\ufe0f \ud83c\udfa7-\ud83d\udd17 &amp; \"\ud83c\udf32\" \ud83c\udfa7-\ud83d\udd17 \ud83d\ude46 \ud83d\udcd0 &amp; \ud83d\udca0, &amp; \ud83d\ude46 \u2696\ufe0f \ud83c\udf10 \ud83d\udc6b \ud83d\udcaa \u2699\ufe0f <code>yield</code>.</p> <p>ReadyAPI \ud83d\udd1c \u2692 \ud83d\udcad \ud83d\udc48 \"\ud83d\udeaa \ud83d\udcdf\" \ud83d\udd20 \ud83d\udd17 \u23ee\ufe0f <code>yield</code> \ud83c\udfc3 \u2611 \u2714.</p> <p>\ud83d\uddbc, <code>dependency_c</code> \ud83d\udcaa \u2714\ufe0f \ud83d\udd17 \ud83d\udd1b <code>dependency_b</code>, &amp; <code>dependency_b</code> \ud83d\udd1b <code>dependency_a</code>:</p> Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends\n\n\nasync def dependency_a():\n    dep_a = generate_dep_a()\n    try:\n        yield dep_a\n    finally:\n        dep_a.close()\n\n\nasync def dependency_b(dep_a=Depends(dependency_a)):\n    dep_b = generate_dep_b()\n    try:\n        yield dep_b\n    finally:\n        dep_b.close(dep_a)\n\n\nasync def dependency_c(dep_b=Depends(dependency_b)):\n    dep_c = generate_dep_c()\n    try:\n        yield dep_c\n    finally:\n        dep_c.close(dep_b)\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends\n\n\nasync def dependency_a():\n    dep_a = generate_dep_a()\n    try:\n        yield dep_a\n    finally:\n        dep_a.close()\n\n\nasync def dependency_b(dep_a: Annotated[DepA, Depends(dependency_a)]):\n    dep_b = generate_dep_b()\n    try:\n        yield dep_b\n    finally:\n        dep_b.close(dep_a)\n\n\nasync def dependency_c(dep_b: Annotated[DepB, Depends(dependency_b)]):\n    dep_c = generate_dep_c()\n    try:\n        yield dep_c\n    finally:\n        dep_c.close(dep_b)\n</code></pre> <pre><code>from readyapi import Depends\nfrom typing_extensions import Annotated\n\n\nasync def dependency_a():\n    dep_a = generate_dep_a()\n    try:\n        yield dep_a\n    finally:\n        dep_a.close()\n\n\nasync def dependency_b(dep_a: Annotated[DepA, Depends(dependency_a)]):\n    dep_b = generate_dep_b()\n    try:\n        yield dep_b\n    finally:\n        dep_b.close(dep_a)\n\n\nasync def dependency_c(dep_b: Annotated[DepB, Depends(dependency_b)]):\n    dep_c = generate_dep_c()\n    try:\n        yield dep_c\n    finally:\n        dep_c.close(dep_b)\n</code></pre> <p>&amp; \ud83c\udf10 \ud83d\udc6b \ud83d\udcaa \u2699\ufe0f <code>yield</code>.</p> <p>\ud83d\udc49 \ud83d\udcbc <code>dependency_c</code>, \ud83d\udee0\ufe0f \ud83d\udeae \ud83d\udeaa \ud83d\udcdf, \ud83d\udcaa \ud83d\udcb2 \u26aa\ufe0f\u27a1\ufe0f <code>dependency_b</code> (\ud83d\udce5 \ud83d\udcdb <code>dep_b</code>) \ud83d\udcaa.</p> <p>&amp; , \ud83d\udd04, <code>dependency_b</code> \ud83d\udcaa \ud83d\udcb2 \u26aa\ufe0f\u27a1\ufe0f <code>dependency_a</code> (\ud83d\udce5 \ud83d\udcdb <code>dep_a</code>) \ud83d\udcaa \ud83d\udeae \ud83d\udeaa \ud83d\udcdf.</p> Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends\n\n\nasync def dependency_a():\n    dep_a = generate_dep_a()\n    try:\n        yield dep_a\n    finally:\n        dep_a.close()\n\n\nasync def dependency_b(dep_a=Depends(dependency_a)):\n    dep_b = generate_dep_b()\n    try:\n        yield dep_b\n    finally:\n        dep_b.close(dep_a)\n\n\nasync def dependency_c(dep_b=Depends(dependency_b)):\n    dep_c = generate_dep_c()\n    try:\n        yield dep_c\n    finally:\n        dep_c.close(dep_b)\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends\n\n\nasync def dependency_a():\n    dep_a = generate_dep_a()\n    try:\n        yield dep_a\n    finally:\n        dep_a.close()\n\n\nasync def dependency_b(dep_a: Annotated[DepA, Depends(dependency_a)]):\n    dep_b = generate_dep_b()\n    try:\n        yield dep_b\n    finally:\n        dep_b.close(dep_a)\n\n\nasync def dependency_c(dep_b: Annotated[DepB, Depends(dependency_b)]):\n    dep_c = generate_dep_c()\n    try:\n        yield dep_c\n    finally:\n        dep_c.close(dep_b)\n</code></pre> <pre><code>from readyapi import Depends\nfrom typing_extensions import Annotated\n\n\nasync def dependency_a():\n    dep_a = generate_dep_a()\n    try:\n        yield dep_a\n    finally:\n        dep_a.close()\n\n\nasync def dependency_b(dep_a: Annotated[DepA, Depends(dependency_a)]):\n    dep_b = generate_dep_b()\n    try:\n        yield dep_b\n    finally:\n        dep_b.close(dep_a)\n\n\nasync def dependency_c(dep_b: Annotated[DepB, Depends(dependency_b)]):\n    dep_c = generate_dep_c()\n    try:\n        yield dep_c\n    finally:\n        dep_c.close(dep_b)\n</code></pre> <p>\ud83c\udf8f \ud83c\udf0c, \ud83d\udc46 \ud83d\udcaa \u2714\ufe0f \ud83d\udd17 \u23ee\ufe0f <code>yield</code> &amp; <code>return</code> \ud83c\udf00.</p> <p>&amp; \ud83d\udc46 \ud83d\udcaa \u2714\ufe0f \ud83d\udc41 \ud83d\udd17 \ud83d\udc48 \ud83d\ude9a \ud83d\udcda \ud83c\udf8f \ud83d\udd17 \u23ee\ufe0f <code>yield</code>, \u2652\ufe0f.</p> <p>\ud83d\udc46 \ud83d\udcaa \u2714\ufe0f \ud83d\ude46 \ud83c\udf00 \ud83d\udd17 \ud83d\udc48 \ud83d\udc46 \ud83d\udc9a.</p> <p>ReadyAPI \ud83d\udd1c \u2692 \ud83d\udcad \ud83c\udf10 \ud83c\udfc3 \u2611 \u2714.</p> <p>\ud83d\udce1 \u2139</p> <p>\ud83d\udc49 \ud83d\udc77 \ud83d\udc4f \ud83d\udc0d \ud83d\udd11 \ud83d\udc68\u200d\ud83d\udcbc.</p> <p>ReadyAPI \u2699\ufe0f \ud83d\udc6b \ud83d\udd18 \ud83c\udfc6 \ud83d\udc49.</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/#yield-httpexception","title":"\ud83d\udd17 \u23ee\ufe0f <code>yield</code> &amp; <code>HTTPException</code>","text":"<p>\ud83d\udc46 \ud83d\udc40 \ud83d\udc48 \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83d\udd17 \u23ee\ufe0f <code>yield</code> &amp; \u2714\ufe0f <code>try</code> \ud83c\udf6b \ud83d\udc48 \u270a \u26a0.</p> <p>\u26ab\ufe0f 5\ufe0f\u20e3\ud83d\udcc6 \ud83d\ude0b \ud83e\udd1a <code>HTTPException</code> \u2696\ufe0f \ud83c\udf8f \ud83d\udeaa \ud83d\udcdf, \u23ee\ufe0f <code>yield</code>. \u270b\ufe0f \u26ab\ufe0f \ud83c\udfc6 \ud83d\udeab \ud83d\udc77.</p> <p>\ud83d\udeaa \ud83d\udcdf \ud83d\udd17 \u23ee\ufe0f <code>yield</code> \ud83d\udee0\ufe0f \u23ee\ufe0f \ud83d\udce8 \ud83d\udce8, \u26a0 \ud83d\udc15\u200d\ud83e\uddba \ud83d\udd1c \u2714\ufe0f \u23ea \ud83c\udfc3. \ud83d\udce4 \ud83d\udd73 \ud83d\ude3d \u26a0 \ud83d\udeae \ud83d\udc46 \ud83d\udd17 \ud83d\udeaa \ud83d\udcdf (\u23ee\ufe0f <code>yield</code>).</p> <p>, \ud83d\udea5 \ud83d\udc46 \ud83e\udd1a <code>HTTPException</code> \u23ee\ufe0f <code>yield</code>, \ud83d\udd22 (\u2696\ufe0f \ud83d\ude46 \ud83d\udec3) \u26a0 \ud83d\udc15\u200d\ud83e\uddba \ud83d\udc48 \u270a <code>HTTPException</code>\u24c2 &amp; \ud83d\udce8 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d 4\ufe0f\u20e30\ufe0f\u20e30\ufe0f\u20e3 \ud83d\udce8 \ud83c\udfc6 \ud83d\udeab \ud83d\udce4 \u270a \ud83d\udc48 \u26a0 \ud83d\udeab\ud83d\udd1c.</p> <p>\ud83d\udc49 \u26ab\ufe0f\u2754 \u2714 \ud83d\udd73 \u2692 \ud83d\udd17 (\u2705 \ud83d\udcbd \ud83c\udf89), \ud83d\uddbc, \u2699\ufe0f \ud83d\udda5 \ud83d\udccb.</p> <p>\ud83d\udda5 \ud83d\udccb \ud83c\udfc3 \u23ee\ufe0f \ud83d\udce8 \u2714\ufe0f \ud83d\udce8. \ud83d\udce4 \ud83d\ude45\u200d\u2642 \ud83c\udf0c \ud83e\udd1a <code>HTTPException</code> \u21a9\ufe0f \ud83d\udce4 \ud83d\udeab \ud83c\udf0c \ud83d\udd00 \ud83d\udce8 \ud83d\udc48 \u23ea \ud83d\udce8.</p> <p>\u270b\ufe0f \ud83d\udea5 \ud83d\udda5 \ud83d\udccb \u270d \ud83d\udcbd \u274c, \ud83c\udf18 \ud83d\udc46 \ud83d\udcaa \ud83d\udcbe \u2696\ufe0f \ud83d\ude2c \ud83d\udd10 \ud83c\udf89 \ud83d\udd17 \u23ee\ufe0f <code>yield</code>, &amp; \ud83c\udfb2 \ud83d\udd79 \u274c \u2696\ufe0f \ud83d\udcc4 \u26ab\ufe0f \ud83d\udef0 \ud83d\udd75 \u2699\ufe0f.</p> <p>\ud83d\udea5 \ud83d\udc46 \u2714\ufe0f \ud83d\udcdf \ud83d\udc48 \ud83d\udc46 \ud83d\udcad \ud83d\udcaa \ud83e\udd1a \u26a0, \ud83c\udfc6 \ud83d\ude10/\"\ud83d\ude43\" \ud83d\udc5c &amp; \ud83d\udeae <code>try</code> \ud83c\udf6b \ud83d\udc48 \ud83d\udcc4 \ud83d\udcdf.</p> <p>\ud83d\udea5 \ud83d\udc46 \u2714\ufe0f \ud83d\udec3 \u26a0 \ud83d\udc48 \ud83d\udc46 \ud83d\udd1c \ud83d\udc96 \ud83c\udf75 \u23ed \ud83d\udeec \ud83d\udce8 &amp; \ud83c\udfb2 \u274e \ud83d\udce8, \ud83c\udfb2 \ud83d\ude4b\u200d\u2640 <code>HTTPException</code>, \u270d \ud83d\udec3 \u26a0 \ud83d\udc15\u200d\ud83e\uddba.</p> <p>Tip</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83e\udd1a \u26a0 \ud83d\udd0c <code>HTTPException</code> \u23ed <code>yield</code>. \u270b\ufe0f \ud83d\udeab \u23ee\ufe0f.</p> <p>\ud83d\udd01 \ud83d\udee0\ufe0f \ud83c\udf05 \u2696\ufe0f \ud83c\udf18 \ud83d\udc96 \ud83d\udc49 \ud83d\udcca. \ud83d\udd70 \ud83d\udca7 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udd1d \ud83d\udd1d. &amp; \ud83d\udd20 \ud83c\udfd3 1\ufe0f\u20e3 \ud83c\udf55 \ud83d\udd17 \u2696\ufe0f \ud83d\udee0\ufe0f \ud83d\udcdf.</p> <pre><code>sequenceDiagram\n\nparticipant client as Client\nparticipant handler as Exception handler\nparticipant dep as Dep with yield\nparticipant operation as Path Operation\nparticipant tasks as Background tasks\n\n    Note over client,tasks: Can raise exception for dependency, handled after response is sent\n    Note over client,operation: Can raise HTTPException and can change the response\n    client -&gt;&gt; dep: Start request\n    Note over dep: Run code up to yield\n    opt raise\n        dep --&gt;&gt; handler: Raise HTTPException\n        handler --&gt;&gt; client: HTTP error response\n        dep --&gt;&gt; dep: Raise other exception\n    end\n    dep -&gt;&gt; operation: Run dependency, e.g. DB session\n    opt raise\n        operation --&gt;&gt; dep: Raise HTTPException\n        dep --&gt;&gt; handler: Auto forward exception\n        handler --&gt;&gt; client: HTTP error response\n        operation --&gt;&gt; dep: Raise other exception\n        dep --&gt;&gt; handler: Auto forward exception\n    end\n    operation -&gt;&gt; client: Return response to client\n    Note over client,operation: Response is already sent, can't change it anymore\n    opt Tasks\n        operation --&gt;&gt; tasks: Send background tasks\n    end\n    opt Raise other exception\n        tasks --&gt;&gt; dep: Raise other exception\n    end\n    Note over dep: After yield\n    opt Handle other exception\n        dep --&gt;&gt; dep: Handle exception, can't change response. E.g. close DB session.\n    end</code></pre> <p>Info</p> <p>\ud83d\udd74 1\ufe0f\u20e3 \ud83d\udce8 \ud83d\udd1c \ud83d\udce8 \ud83d\udc69\u200d\ud83d\udcbb. \u26ab\ufe0f \ud83d\udcaa 1\ufe0f\u20e3 \u274c \ud83d\udce8 \u2696\ufe0f \u26ab\ufe0f \ud83d\udd1c \ud83d\udce8 \u26aa\ufe0f\u27a1\ufe0f \u27a1 \ud83d\udee0\ufe0f.</p> <p>\u23ee\ufe0f 1\ufe0f\u20e3 \ud83d\udcda \ud83d\udce8 \ud83d\udce8, \ud83d\ude45\u200d\u2642 \ud83c\udf8f \ud83d\udce8 \ud83d\udcaa \ud83d\udce8.</p> <p>Tip</p> <p>\ud83d\udc49 \ud83d\udcca \ud83c\udfa6 <code>HTTPException</code>, \u270b\ufe0f \ud83d\udc46 \ud83d\udcaa \ud83e\udd1a \ud83d\ude46 \ud83c\udf8f \u26a0 \u2754 \ud83d\udc46 \u270d \ud83d\udec3 \u26a0 \ud83d\udc15\u200d\ud83e\uddba.</p> <p>\ud83d\udea5 \ud83d\udc46 \ud83e\udd1a \ud83d\ude46 \u26a0, \u26ab\ufe0f \ud83d\udd1c \ud83d\udeb6\u200d\u2640\ufe0f \ud83d\udd17 \u23ee\ufe0f \ud83c\udf3e, \ud83d\udd0c <code>HTTPException</code>, &amp; \u2934\ufe0f \ud83d\udd04 \u26a0 \ud83d\udc15\u200d\ud83e\uddba. \ud83d\udea5 \ud83d\udce4 \ud83d\ude45\u200d\u2642 \u26a0 \ud83d\udc15\u200d\ud83e\uddba \ud83d\udc48 \u26a0, \u26ab\ufe0f \ud83d\udd1c \u2934\ufe0f \ud83c\udf75 \ud83d\udd22 \ud83d\udd17 <code>ServerErrorMiddleware</code>, \ud83d\udeec 5\ufe0f\u20e30\ufe0f\u20e30\ufe0f\u20e3 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udc54 \ud83d\udcdf, \u27a1\ufe0f \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udcad \ud83d\udc48 \ud83d\udce4 \u274c \ud83d\udcbd.</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/#_2","title":"\ud83d\udd11 \ud83d\udc68\u200d\ud83d\udcbc","text":""},{"location":"tutorial/dependencies/dependencies-with-yield/#_3","title":"\u26ab\ufe0f\u2754 \"\ud83d\udd11 \ud83d\udc68\u200d\ud83d\udcbc\"","text":"<p>\"\ud83d\udd11 \ud83d\udc68\u200d\ud83d\udcbc\" \ud83d\ude46 \ud83d\udc48 \ud83d\udc0d \ud83c\udf9a \ud83d\udc48 \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>with</code> \ud83d\udcc4.</p> <p>\ud83d\uddbc, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f <code>with</code> \u270d \ud83d\udcc1:</p> <pre><code>with open(\"./somefile.txt\") as f:\n    contents = f.read()\n    print(contents)\n</code></pre> <p>\ud83d\udd18, <code>open(\"./somefile.txt\")</code> \u270d \ud83c\udf9a \ud83d\udc48 \ud83e\udd19 \"\ud83d\udd11 \ud83d\udc68\u200d\ud83d\udcbc\".</p> <p>\ud83d\udd50\u2754 <code>with</code> \ud83c\udf6b \ud83c\udfc1, \u26ab\ufe0f \u2692 \ud83d\udcad \ud83d\udd10 \ud83d\udcc1, \ud83d\udea5 \ud83d\udce4 \u26a0.</p> <p>\ud83d\udd50\u2754 \ud83d\udc46 \u270d \ud83d\udd17 \u23ee\ufe0f <code>yield</code>, ReadyAPI \ud83d\udd1c \ud83d\udd18 \ud83d\udddc \u26ab\ufe0f \ud83d\udd11 \ud83d\udc68\u200d\ud83d\udcbc, &amp; \ud83c\udf00 \u26ab\ufe0f \u23ee\ufe0f \ud83c\udf8f \ud83d\udd17 \ud83e\uddf0.</p>"},{"location":"tutorial/dependencies/dependencies-with-yield/#yield_1","title":"\u2699\ufe0f \ud83d\udd11 \ud83d\udc68\u200d\ud83d\udcbc \ud83d\udd17 \u23ee\ufe0f <code>yield</code>","text":"<p>Warning</p> <p>\ud83d\udc49, \ud83c\udf05 \u2696\ufe0f \ud83c\udf18, \"\ud83c\udfe7\" \ud83d\udcad.</p> <p>\ud83d\udea5 \ud83d\udc46 \u25b6\ufe0f \u23ee\ufe0f ReadyAPI \ud83d\udc46 \ud83d\udcaa \ud83d\udc9a \ud83d\udeb6 \u26ab\ufe0f \ud83d\udd1c.</p> <p>\ud83d\udc0d, \ud83d\udc46 \ud83d\udcaa \u270d \ud83d\udd11 \ud83d\udc68\u200d\ud83d\udcbc \ud83c\udfd7 \ud83c\udf93 \u23ee\ufe0f 2\ufe0f\u20e3 \ud83d\udc69\u200d\ud83d\udd2c: <code>__enter__()</code> &amp; <code>__exit__()</code>.</p> <p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83d\udc6b \ud83d\udd18 ReadyAPI \ud83d\udd17 \u23ee\ufe0f <code>yield</code> \u2699\ufe0f <code>with</code> \u2696\ufe0f <code>async with</code> \ud83d\udcc4 \ud83d\udd18 \ud83d\udd17 \ud83d\udd22:</p> Python 3.8+ <pre><code>class MySuperContextManager:\n    def __init__(self):\n        self.db = DBSession()\n\n    def __enter__(self):\n        return self.db\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        self.db.close()\n\n\nasync def get_db():\n    with MySuperContextManager() as db:\n        yield db\n</code></pre> <p>Tip</p> <p>\u27951\ufe0f\u20e3 \ud83c\udf0c \u270d \ud83d\udd11 \ud83d\udc68\u200d\ud83d\udcbc \u23ee\ufe0f:</p> <ul> <li><code>@contextlib.contextmanager</code> \u2696\ufe0f</li> <li><code>@contextlib.asynccontextmanager</code></li> </ul> <p>\u2699\ufe0f \ud83d\udc6b \ud83c\udf80 \ud83d\udd22 \u23ee\ufe0f \ud83d\udc41 <code>yield</code>.</p> <p>\ud83d\udc48 \u26ab\ufe0f\u2754 ReadyAPI \u2699\ufe0f \ud83d\udd18 \ud83d\udd17 \u23ee\ufe0f <code>yield</code>.</p> <p>\u270b\ufe0f \ud83d\udc46 \ud83d\udeab \u2714\ufe0f \u2699\ufe0f \ud83d\udc68\u200d\ud83c\udfa8 ReadyAPI \ud83d\udd17 (&amp; \ud83d\udc46 \ud83d\udeab\ud83d\udd1c \ud83d\udeab).</p> <p>ReadyAPI \ud83d\udd1c \u26ab\ufe0f \ud83d\udc46 \ud83d\udd18.</p>"},{"location":"tutorial/dependencies/global-dependencies/","title":"\ud83c\udf10 \ud83d\udd17","text":"<p>\ud83c\udd8e \ud83c\ude38 \ud83d\udc46 \ud83d\udcaa \ud83d\udc9a \ud83d\udeae \ud83d\udd17 \ud83c\udf82 \ud83c\ude38.</p> <p>\ud83c\udf8f \ud83c\udf0c \ud83d\udc46 \ud83d\udcaa \ud83d\udeae <code>dependencies</code> \u27a1 \ud83d\udee0\ufe0f \ud83d\udc68\u200d\ud83c\udfa8, \ud83d\udc46 \ud83d\udcaa \ud83d\udeae \ud83d\udc6b <code>ReadyAPI</code> \ud83c\ude38.</p> <p>\ud83d\udc48 \ud83d\udcbc, \ud83d\udc6b \ud83d\udd1c \u2714 \ud83c\udf10 \u27a1 \ud83d\udee0\ufe0f \ud83c\ude38:</p> Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\n\n\nasync def verify_token(x_token: str = Header()):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: str = Header()):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\napp = ReadyAPI(dependencies=[Depends(verify_token), Depends(verify_key)])\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"item\": \"Portal Gun\"}, {\"item\": \"Plumbus\"}]\n\n\n@app.get(\"/users/\")\nasync def read_users():\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\nfrom typing_extensions import Annotated\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\napp = ReadyAPI(dependencies=[Depends(verify_token), Depends(verify_key)])\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"item\": \"Portal Gun\"}, {\"item\": \"Plumbus\"}]\n\n\n@app.get(\"/users/\")\nasync def read_users():\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n</code></pre> <pre><code>from readyapi import Depends, Header, HTTPException, ReadyAPI\nfrom typing_extensions import Annotated\n\n\nasync def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nasync def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key\n\n\napp = ReadyAPI(dependencies=[Depends(verify_token), Depends(verify_key)])\n\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"item\": \"Portal Gun\"}, {\"item\": \"Plumbus\"}]\n\n\n@app.get(\"/users/\")\nasync def read_users():\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n</code></pre> <p>&amp; \ud83c\udf10 \ud83d\udcad \ud83d\udcc4 \ud83d\udd03 \u274e <code>dependencies</code> \u27a1 \ud83d\udee0\ufe0f \ud83d\udc68\u200d\ud83c\udfa8 \u2714, \u270b\ufe0f \ud83d\udc49 \ud83d\udcbc, \ud83c\udf10 \u27a1 \ud83d\udee0\ufe0f \ud83d\udcf1.</p>"},{"location":"tutorial/dependencies/global-dependencies/#_2","title":"\ud83d\udd17 \ud83d\udc6a \u27a1 \ud83d\udee0\ufe0f","text":"<p>\u23ea, \ud83d\udd50\u2754 \ud83d\udc42 \ud83d\udd03 \u2754 \ud83d\udcca \ud83e\udd8f \ud83c\ude38 (\ud83e\udd8f \ud83c\ude38 - \ud83d\udc97 \ud83d\udcc1), \ud83c\udfb2 \u23ee\ufe0f \ud83d\udc97 \ud83d\udcc1, \ud83d\udc46 \ud83d\udd1c \ud83d\udca1 \u2754 \ud83d\udce3 \ud83d\udc41 <code>dependencies</code> \ud83d\udd22 \ud83d\udc6a \u27a1 \ud83d\udee0\ufe0f.</p>"},{"location":"tutorial/dependencies/sub-dependencies/","title":"\ud83c\udfa7-\ud83d\udd17","text":"<p>\ud83d\udc46 \ud83d\udcaa \u270d \ud83d\udd17 \ud83d\udc48 \u2714\ufe0f \ud83c\udfa7-\ud83d\udd17.</p> <p>\ud83d\udc6b \ud83d\udcaa \u23ec \ud83d\udc46 \ud83d\udcaa \ud83d\udc6b.</p> <p>ReadyAPI \ud83d\udd1c \u270a \ud83d\udc85 \ud83d\udd2c \ud83d\udc6b.</p>"},{"location":"tutorial/dependencies/sub-dependencies/#_1","title":"\ud83e\udd47 \ud83d\udd17 \"\u2611\"","text":"<p>\ud83d\udc46 \ud83d\udcaa \u270d \ud83e\udd47 \ud83d\udd17 (\"\u2611\") \ud83d\udc96:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: Union[str, None] = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: str = Depends(query_extractor),\n    last_query: Union[str, None] = Cookie(default=None),\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(query_or_default: str = Depends(query_or_cookie_extractor)):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: str | None = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[str | None, Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: Union[str, None] = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[Union[str, None], Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Cookie, Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: Union[str, None] = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[Union[str, None], Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: str | None = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: str = Depends(query_extractor), last_query: str | None = Cookie(default=None)\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(query_or_default: str = Depends(query_or_cookie_extractor)):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <p>\u26ab\ufe0f \ud83d\udce3 \ud83d\udce6 \ud83d\udd22 \ud83d\udd22 <code>q</code> <code>str</code>, &amp; \u2934\ufe0f \u26ab\ufe0f \ud83d\udce8 \u26ab\ufe0f.</p> <p>\ud83d\udc49 \ud83d\ude45 (\ud83d\udeab \ud83d\udcf6 \u26a0), \u270b\ufe0f \ud83d\udd1c \u2139 \ud83d\udc65 \ud83c\udfaf \ud83d\udd1b \u2754 \ud83c\udfa7-\ud83d\udd17 \ud83d\udc77.</p>"},{"location":"tutorial/dependencies/sub-dependencies/#_2","title":"\ud83e\udd48 \ud83d\udd17, \"\u2611\" &amp; \"\u2693\ufe0f\"","text":"<p>\u2934\ufe0f \ud83d\udc46 \ud83d\udcaa \u270d \u27951\ufe0f\u20e3 \ud83d\udd17 \ud83d\udd22 (\"\u2611\") \ud83d\udc48 \ud83c\udf8f \ud83d\udd70 \ud83d\udce3 \ud83d\udd17 \ud83d\udeae \ud83d\udc4d (\u26ab\ufe0f \"\u2693\ufe0f\" \ud83d\udc81\u200d\u2642\ufe0f):</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: Union[str, None] = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: str = Depends(query_extractor),\n    last_query: Union[str, None] = Cookie(default=None),\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(query_or_default: str = Depends(query_or_cookie_extractor)):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: str | None = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[str | None, Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: Union[str, None] = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[Union[str, None], Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Cookie, Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: Union[str, None] = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[Union[str, None], Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: str | None = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: str = Depends(query_extractor), last_query: str | None = Cookie(default=None)\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(query_or_default: str = Depends(query_or_cookie_extractor)):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <p>\u27a1\ufe0f \ud83c\udfaf \ud83d\udd1b \ud83d\udd22 \ud83d\udce3:</p> <ul> <li>\u270b\ufe0f \ud83d\udc49 \ud83d\udd22 \ud83d\udd17 (\"\u2611\") \u26ab\ufe0f, \u26ab\ufe0f \ud83d\udce3 \u27951\ufe0f\u20e3 \ud83d\udd17 (\u26ab\ufe0f \"\ud83e\ude80\" \ud83d\udd1b \ud83d\udd73 \ud83d\ude46).<ul> <li>\u26ab\ufe0f \ud83e\ude80 \ud83d\udd1b <code>query_extractor</code>, &amp; \ud83d\udee0\ufe0f \ud83d\udcb2 \ud83d\udce8 \u26ab\ufe0f \ud83d\udd22 <code>q</code>.</li> </ul> </li> <li>\u26ab\ufe0f \ud83d\udce3 \ud83d\udce6 <code>last_query</code> \ud83c\udf6a, <code>str</code>.<ul> <li>\ud83d\udea5 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udeab \ud83d\ude9a \ud83d\ude46 \ud83d\udd22 <code>q</code>, \ud83d\udc65 \u2699\ufe0f \ud83c\udfc1 \ud83d\udd22 \u2699\ufe0f, \u2754 \ud83d\udc65 \ud83d\udd8a \ud83c\udf6a \u23ed.</li> </ul> </li> </ul>"},{"location":"tutorial/dependencies/sub-dependencies/#_3","title":"\u2699\ufe0f \ud83d\udd17","text":"<p>\u2934\ufe0f \ud83d\udc65 \ud83d\udcaa \u2699\ufe0f \ud83d\udd17 \u23ee\ufe0f:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: Union[str, None] = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: str = Depends(query_extractor),\n    last_query: Union[str, None] = Cookie(default=None),\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(query_or_default: str = Depends(query_or_cookie_extractor)):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: str | None = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[str | None, Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: Union[str, None] = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[Union[str, None], Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <pre><code>from typing import Union\n\nfrom readyapi import Cookie, Depends, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: Union[str, None] = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[Union[str, None], Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Cookie, Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef query_extractor(q: str | None = None):\n    return q\n\n\ndef query_or_cookie_extractor(\n    q: str = Depends(query_extractor), last_query: str | None = Cookie(default=None)\n):\n    if not q:\n        return last_query\n    return q\n\n\n@app.get(\"/items/\")\nasync def read_query(query_or_default: str = Depends(query_or_cookie_extractor)):\n    return {\"q_or_cookie\": query_or_default}\n</code></pre> <p>Info</p> <p>\ud83d\udc40 \ud83d\udc48 \ud83d\udc65 \ud83d\udd74 \ud83d\udce3 1\ufe0f\u20e3 \ud83d\udd17 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22, <code>query_or_cookie_extractor</code>.</p> <p>\u270b\ufe0f ReadyAPI \ud83d\udd1c \ud83d\udcad \ud83d\udc48 \u26ab\ufe0f \u2714\ufe0f \u274e <code>query_extractor</code> \ud83e\udd47, \ud83d\udeb6\u200d\u2640\ufe0f \ud83c\udfc1 \ud83d\udc48 <code>query_or_cookie_extractor</code> \u23ea \ud83e\udd19 \u26ab\ufe0f.</p> <pre><code>graph TB\n\nquery_extractor([\"query_extractor\"])\nquery_or_cookie_extractor([\"query_or_cookie_extractor\"])\n\nread_query[\"/items/\"]\n\nquery_extractor --&gt; query_or_cookie_extractor --&gt; read_query</code></pre>"},{"location":"tutorial/dependencies/sub-dependencies/#_4","title":"\u2699\ufe0f \ud83c\udf8f \ud83d\udd17 \ud83d\udc97 \ud83d\udd70","text":"<p>\ud83d\udea5 1\ufe0f\u20e3 \ud83d\udc46 \ud83d\udd17 \ud83d\udce3 \ud83d\udc97 \ud83d\udd70 \ud83c\udf8f \u27a1 \ud83d\udee0\ufe0f, \ud83d\uddbc, \ud83d\udc97 \ud83d\udd17 \u2714\ufe0f \u26a0 \ud83c\udfa7-\ud83d\udd17, ReadyAPI \ud83d\udd1c \ud83d\udcad \ud83e\udd19 \ud83d\udc48 \ud83c\udfa7-\ud83d\udd17 \ud83d\udd74 \ud83d\udd50 \ud83d\udccd \ud83d\udce8.</p> <p>&amp; \u26ab\ufe0f \ud83d\udd1c \ud83d\udd8a \ud83d\udce8 \ud83d\udcb2 \"\ud83d\udcbe\" &amp; \ud83d\udeb6\u200d\u2640\ufe0f \u26ab\ufe0f \ud83c\udf10 \"\u2693\ufe0f\" \ud83d\udc48 \ud83d\udcaa \u26ab\ufe0f \ud83d\udc48 \ud83c\udfaf \ud83d\udce8, \u21a9\ufe0f \ud83e\udd19 \ud83d\udd17 \ud83d\udc97 \ud83d\udd70 \ud83c\udf8f \ud83d\udce8.</p> <p>\ud83c\udfe7 \ud83d\ude10 \ud83c\udf10\u2754 \ud83d\udc46 \ud83d\udcad \ud83d\udc46 \ud83d\udcaa \ud83d\udd17 \ud83e\udd19 \ud83d\udd20 \ud83d\udd01 (\ud83c\udfb2 \ud83d\udc97 \ud83d\udd70) \ud83c\udf8f \ud83d\udce8 \u21a9\ufe0f \u2699\ufe0f \"\ud83d\udcbe\" \ud83d\udcb2, \ud83d\udc46 \ud83d\udcaa \u2692 \ud83d\udd22 <code>use_cache=False</code> \ud83d\udd50\u2754 \u2699\ufe0f <code>Depends</code>:</p> <pre><code>async def needy_dependency(fresh_value: str = Depends(get_value, use_cache=False)):\n    return {\"fresh_value\": fresh_value}\n</code></pre>"},{"location":"tutorial/dependencies/sub-dependencies/#_5","title":"\ud83c\udf03","text":"<p>\u2196\ufe0f \u26aa\ufe0f\u27a1\ufe0f \ud83c\udf10 \ud83c\udf80 \ud83d\udd24 \u2699\ufe0f \ud83d\udce5, \ud83d\udd17 \ud83d\udc89 \u2699\ufe0f \ud83d\ude45.</p> <p>\ud83d\udd22 \ud83d\udc48 \ud83d\udc40 \ud83c\udf8f \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22.</p> <p>\u270b\ufe0f, \u26ab\ufe0f \ud83d\udcf6 \ud83c\udfcb\ufe0f, &amp; \u2714 \ud83d\udc46 \ud83d\udce3 \ud83c\udfb2 \ud83d\ude47 \ud83d\udc26 \ud83d\udd17 \"\ud83d\udcca\" (\ud83c\udf32).</p> <p>Tip</p> <p>\ud83c\udf10 \ud83d\udc49 \ud83d\udcaa \ud83d\udeab \ud83d\ude11 \u26a0 \u23ee\ufe0f \ud83d\udc6b \ud83d\ude45 \ud83d\uddbc.</p> <p>\u270b\ufe0f \ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \u2754 \u26a0 \u26ab\ufe0f \ud83d\udcc3 \ud83d\udd03 \ud83d\udc82\u200d\u2642.</p> <p>&amp; \ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \ud83d\udcb8 \ud83d\udcdf \u26ab\ufe0f \ud83d\udd1c \ud83d\udd8a \ud83d\udc46.</p>"},{"location":"tutorial/security/","title":"\ud83d\udc82\u200d\u2642","text":"<p>\ud83d\udce4 \ud83d\udcda \ud83c\udf0c \ud83c\udf75 \ud83d\udc82\u200d\u2642, \ud83e\udd1d &amp; \u2714.</p> <p>&amp; \u26ab\ufe0f \ud83d\udece \ud83c\udfd7 &amp; \"\u26a0\" \u2754.</p> <p>\ud83d\udcda \ud83d\udee0\ufe0f &amp; \u2699\ufe0f \ud83c\udf75 \ud83d\udc82\u200d\u2642 &amp; \ud83e\udd1d \u270a \ud83e\udd8f \ud83d\udcb8 \ud83c\udfaf &amp; \ud83d\udcdf (\ud83d\udcda \ud83d\udcbc \u26ab\ufe0f \ud83d\udcaa 5\ufe0f\u20e30\ufe0f\u20e3 \ud83d\udcaf \u2696\ufe0f \ud83c\udf05 \ud83c\udf10 \ud83d\udcdf \u270d).</p> <p>ReadyAPI \ud83d\ude9a \ud83d\udcda \ud83e\uddf0 \u2139 \ud83d\udc46 \ud83d\ude45 \u23ee\ufe0f \ud83d\udc82\u200d\u2642 \ud83d\udcaa, \ud83d\udcc9, \ud83d\udc29 \ud83c\udf0c, \ud83c\udf75 \u2714\ufe0f \ud83d\udd2c &amp; \ud83d\udca1 \ud83c\udf10 \ud83d\udc82\u200d\u2642 \ud83d\udd27.</p> <p>\u270b\ufe0f \ud83e\udd47, \u27a1\ufe0f \u2705 \ud83e\udd2a \ud83d\udd27.</p>"},{"location":"tutorial/security/#_2","title":"\ud83c\udfc3 \u2753","text":"<p>\ud83d\udea5 \ud83d\udc46 \ud83d\udeab \ud83d\udc85 \ud83d\udd03 \ud83d\ude46 \ud83d\udc49 \u2696 &amp; \ud83d\udc46 \ud83d\udcaa \ud83d\udeae \ud83d\udc82\u200d\u2642 \u23ee\ufe0f \ud83e\udd1d \u2693\ufe0f \ud83d\udd1b \ud83c\udd94 &amp; \ud83d\udd10 \u25b6\ufe0f\ufe0f \ud83d\udd1c, \ud83d\udeb6 \u23ed \ud83d\udcc3.</p>"},{"location":"tutorial/security/#oauth2","title":"Oauth2\ufe0f\u20e3","text":"<p>Oauth2\ufe0f\u20e3 \ud83d\udd27 \ud83d\udc48 \ud83d\udd2c \ud83d\udcda \ud83c\udf0c \ud83c\udf75 \ud83e\udd1d &amp; \u2714.</p> <p>\u26ab\ufe0f \ud83d\udd2c \ud83d\udd27 &amp; \ud83d\udcd4 \ud83d\udcda \ud83c\udfd7 \u2699\ufe0f \ud83d\udcbc.</p> <p>\u26ab\ufe0f \ud83d\udd0c \ud83c\udf0c \ud83d\udd13 \u2699\ufe0f \"\ud83e\udd49 \ud83e\udd73\".</p> <p>\ud83d\udc48 \u26ab\ufe0f\u2754 \ud83c\udf10 \u2699\ufe0f \u23ee\ufe0f \"\ud83d\udcb3 \u23ee\ufe0f \ud83d\udc71\ud83d\udcd4, \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d, \ud83d\udc71\ud83d\udcd4, \ud83d\udcc2\" \u2699\ufe0f \ud83d\udd18.</p>"},{"location":"tutorial/security/#1","title":"\u2733 1\ufe0f\u20e3","text":"<p>\ud83d\udce4 \u2733 1\ufe0f\u20e3, \u2754 \ud83d\udcf6 \ud83c\udf8f \u26aa\ufe0f\u27a1\ufe0f Oauth2\ufe0f\u20e3, &amp; \ud83c\udf16 \ud83c\udfd7, \u26ab\ufe0f \ud83d\udd0c \ud83d\udd17 \ud83d\udd27 \ud83d\udd1b \u2754 \ud83d\udddc \ud83d\udcfb.</p> <p>\u26ab\ufe0f \ud83d\udeab \ud83d\udcf6 \ud83c\udf1f \u2696\ufe0f \u2699\ufe0f \ud83d\udece.</p> <p>Oauth2\ufe0f\u20e3 \ud83d\udeab \u2714 \u2754 \ud83d\udddc \ud83d\udcfb, \u26ab\ufe0f \u231b \ud83d\udc46 \u2714\ufe0f \ud83d\udc46 \ud83c\ude38 \ud83c\udf66 \u23ee\ufe0f \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d.</p> <p>Tip</p> <p>\ud83d\udcc4 \ud83d\udd03 \ud83d\udee0\ufe0f \ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \u2754 \u2692 \ud83c\udd99 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83c\udd93, \u2699\ufe0f Traefik &amp; \u27a1\ufe0f \ud83d\udddc.</p>"},{"location":"tutorial/security/#_3","title":"\ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd17","text":"<p>\ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd17 \u27951\ufe0f\u20e3 \ud83d\udd27, \ud83e\udde2 \ud83d\udd1b Oauth2\ufe0f\u20e3.</p> <p>\u26ab\ufe0f \u2194 Oauth2\ufe0f\u20e3 \u2714 \ud83d\udc5c \ud83d\udc48 \ud83d\udcf6 \ud83c\udf0c Oauth2\ufe0f\u20e3, \ud83d\udd04 \u2692 \u26ab\ufe0f \ud83c\udf05 \ud83d\udee0\ufe0f.</p> <p>\ud83d\uddbc, \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udcb3 \u2699\ufe0f \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd17 (\u2754 \ud83d\udd18 \u2699\ufe0f Oauth2\ufe0f\u20e3).</p> <p>\u270b\ufe0f \ud83d\udc71\ud83d\udcd4 \ud83d\udcb3 \ud83d\udeab \ud83d\udc15\u200d\ud83e\uddba \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd17. \u26ab\ufe0f \u2714\ufe0f \ud83d\udeae \ud83d\udc4d \ud83c\udf5b Oauth2\ufe0f\u20e3.</p>"},{"location":"tutorial/security/#_4","title":"\ud83d\udc69\u200d\ud83d\udcbb (\ud83d\udeab \"\ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd17\")","text":"<p>\ud83d\udce4 \"\ud83d\udc69\u200d\ud83d\udcbb\" \ud83d\udd27. \ud83d\udc48 \ud83d\udd04 \u274e \ud83c\udf8f \ud83d\udc5c \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd17, \u270b\ufe0f \ud83d\udeab \u2693\ufe0f \ud83d\udd1b Oauth2\ufe0f\u20e3.</p> <p>, \u26ab\ufe0f \ud83c\udfc1 \ud83c\udf16 \u2699\ufe0f.</p> <p>\u26ab\ufe0f \ud83d\udeab \ud83d\udcf6 \ud83c\udf1f \u2696\ufe0f \u2699\ufe0f \ud83d\udece.</p>"},{"location":"tutorial/security/#_5","title":"\ud83d\uddc4","text":"<p>\ud83d\uddc4 (\u23ea \ud83d\udcad \ud83e\udd81) \ud83d\udcc2 \ud83d\udd27 \ud83c\udfd7 \ud83d\udd17 (\ud83d\udd1c \ud83c\udf55 \ud83d\udcbe \ud83c\udfdb).</p> <p>ReadyAPI \u2693\ufe0f \ud83d\udd1b \ud83d\uddc4.</p> <p>\ud83d\udc48 \u26ab\ufe0f\u2754 \u2692 \u26ab\ufe0f \ud83d\udcaa \u2714\ufe0f \ud83d\udc97 \ud83c\udfe7 \ud83c\udf93 \ud83e\uddfe \ud83d\udd22, \ud83d\udcdf \u26a1, \u2652\ufe0f.</p> <p>\ud83d\uddc4 \u2714\ufe0f \ud83c\udf0c \ud83d\udd2c \ud83d\udc97 \ud83d\udc82\u200d\u2642 \"\u2696\".</p> <p>\u2699\ufe0f \ud83d\udc6b, \ud83d\udc46 \ud83d\udcaa \u270a \ud83d\udcc8 \ud83c\udf10 \ud83d\udc6b \ud83d\udc29-\u2693\ufe0f \ud83e\uddf0, \ud83d\udd0c \ud83d\udc49 \ud83c\udf93 \ud83e\uddfe \u2699\ufe0f.</p> <p>\ud83d\uddc4 \ud83d\udd2c \ud83d\udcc4 \ud83d\udc82\u200d\u2642 \u2696:</p> <ul> <li><code>apiKey</code>: \ud83c\ude38 \ud83c\udfaf \ud83d\udd11 \ud83d\udc48 \ud83d\udcaa \ud83d\udc5f \u26aa\ufe0f\u27a1\ufe0f:<ul> <li>\ud83d\udd22 \ud83d\udd22.</li> <li>\ud83c\udf9a.</li> <li>\ud83c\udf6a.</li> </ul> </li> <li><code>http</code>: \ud83d\udc29 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83e\udd1d \u2699\ufe0f, \ud83d\udd0c:<ul> <li><code>bearer</code>: \ud83c\udf9a <code>Authorization</code> \u23ee\ufe0f \ud83d\udcb2 <code>Bearer</code> \u2795 \ud83e\udd1d. \ud83d\udc49 \ud83d\ude16 \u26aa\ufe0f\u27a1\ufe0f Oauth2\ufe0f\u20e3.</li> <li>\ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udd30 \ud83e\udd1d.</li> <li>\ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \ud83d\udcf0, \u2652\ufe0f.</li> </ul> </li> <li><code>oauth2</code>: \ud83c\udf10 Oauth2\ufe0f\u20e3 \ud83c\udf0c \ud83c\udf75 \ud83d\udc82\u200d\u2642 (\ud83e\udd19 \"\ud83d\udca7\").<ul> <li>\ud83d\udcda \ud83d\udc6b \ud83d\udca7 \u2611 \ud83c\udfd7 \u2733 2\ufe0f\u20e3.0\ufe0f\u20e3 \ud83e\udd1d \ud83d\udc15\u200d\ud83e\uddba (\ud83d\udc96 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d, \ud83d\udc71\ud83d\udcd4, \ud83d\udc71\ud83d\udcd4, \ud83d\udcc2, \u2652\ufe0f):<ul> <li><code>implicit</code></li> <li><code>clientCredentials</code></li> <li><code>authorizationCode</code></li> </ul> </li> <li>\u270b\ufe0f \ud83d\udce4 1\ufe0f\u20e3 \ud83c\udfaf \"\ud83d\udca7\" \ud83d\udc48 \ud83d\udcaa \ud83d\udc4c \u2699\ufe0f \ud83d\ude9a \ud83e\udd1d \ud83c\udf8f \ud83c\ude38 \ud83d\udd17:<ul> <li><code>password</code>: \u23ed \ud83d\udcc3 \ud83d\udd1c \ud83d\udcd4 \ud83d\uddbc \ud83d\udc49.</li> </ul> </li> </ul> </li> <li><code>openIdConnect</code>: \u2714\ufe0f \ud83c\udf0c \ud83d\udd2c \u2754 \ud83d\udd0e Oauth2\ufe0f\u20e3 \ud83e\udd1d \ud83d\udcca \ud83d\udd01.<ul> <li>\ud83d\udc49 \ud83c\udfe7 \ud83d\udd0d \u26ab\ufe0f\u2754 \ud83d\udd2c \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd17 \ud83d\udd27.</li> </ul> </li> </ul> <p>Tip</p> <p>\ud83d\udee0\ufe0f \ud83c\udf8f \ud83e\udd1d/\u2714 \ud83d\udc15\u200d\ud83e\uddba \ud83d\udc96 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d, \ud83d\udc71\ud83d\udcd4, \ud83d\udc71\ud83d\udcd4, \ud83d\udcc2, \u2652\ufe0f. \ud83d\udcaa &amp; \ud83d\udcf6 \u23e9.</p> <p>\ud83c\udf05 \ud83c\udfd7 \u26a0 \ud83c\udfd7 \ud83e\udd1d/\u2714 \ud83d\udc15\u200d\ud83e\uddba \ud83d\udc96 \ud83d\udc48, \u270b\ufe0f ReadyAPI \ud83e\udd1d \ud83d\udc46 \ud83e\uddf0 \u26ab\ufe0f \ud83d\udcaa, \u23ea \ud83d\udd28 \ud83c\udfcb\ufe0f \ud83c\udfcb\u200d\u2642 \ud83d\udc46.</p>"},{"location":"tutorial/security/#readyapi","title":"ReadyAPI \ud83d\ude99","text":"<p>ReadyAPI \ud83d\ude9a \ud83d\udcda \ud83e\uddf0 \ud83d\udd20 \ud83d\udc49 \ud83d\udc82\u200d\u2642 \u2696 <code>readyapi.security</code> \ud83d\udd79 \ud83d\udc48 \ud83d\udcc9 \u2699\ufe0f \ud83d\udc49 \ud83d\udc82\u200d\u2642 \ud83d\udee0\ufe0f.</p> <p>\u23ed \ud83d\udcc3 \ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \u2754 \ud83d\udeae \ud83d\udc82\u200d\u2642 \ud83d\udc46 \ud83d\udee0\ufe0f \u2699\ufe0f \ud83d\udcda \ud83e\uddf0 \ud83d\ude9a ReadyAPI.</p> <p>&amp; \ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \u2754 \u26ab\ufe0f \ud83e\udd1a \ud83d\udd01 \ud83d\udee0\ufe0f \ud83d\udd18 \ud83c\udf93 \ud83e\uddfe \u2699\ufe0f.</p>"},{"location":"tutorial/security/first-steps/","title":"\ud83d\udc82\u200d\u2642 - \ud83e\udd47 \ud83d\udd01","text":"<p>\u27a1\ufe0f \ud83c\udf08 \ud83d\udc48 \ud83d\udc46 \u2714\ufe0f \ud83d\udc46 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udee0\ufe0f \ud83c\udd94.</p> <p>&amp; \ud83d\udc46 \u2714\ufe0f \ud83d\udd78 \u27951\ufe0f\u20e3 \ud83c\udd94 \u2696\ufe0f \ud83c\udf8f \u27a1 \ud83c\udf8f \ud83c\udd94 (\u2696\ufe0f \ud83d\udcf1 \ud83c\ude38).</p> <p>&amp; \ud83d\udc46 \ud83d\udc9a \u2714\ufe0f \ud83c\udf0c \ud83d\udd78 \ud83d\udd13 \u23ee\ufe0f \ud83d\udc69\u200d\ud83d\udcbb, \u2699\ufe0f \ud83c\udd94 &amp; \ud83d\udd10.</p> <p>\ud83d\udc65 \ud83d\udcaa \u2699\ufe0f Oauth2\ufe0f\u20e3 \ud83c\udfd7 \ud83d\udc48 \u23ee\ufe0f ReadyAPI.</p> <p>\u270b\ufe0f \u27a1\ufe0f \ud83d\udd8a \ud83d\udc46 \ud83d\udd70 \ud83d\udc42 \ud83c\udf15 \ud83d\udccf \ud83d\udd27 \ud83d\udd0e \ud83d\udc48 \ud83d\udc25 \ud83c\udf56 \u2139 \ud83d\udc46 \ud83d\udcaa.</p> <p>\u27a1\ufe0f \u2699\ufe0f \ud83e\uddf0 \ud83d\ude9a ReadyAPI \ud83c\udf75 \ud83d\udc82\u200d\u2642.</p>"},{"location":"tutorial/security/first-steps/#_1","title":"\u2754 \u26ab\ufe0f \ud83d\udc40","text":"<p>\u27a1\ufe0f \ud83e\udd47 \u2699\ufe0f \ud83d\udcdf &amp; \ud83d\udc40 \u2754 \u26ab\ufe0f \ud83d\udc77, &amp; \u2934\ufe0f \ud83d\udc65 \ud83d\udd1c \ud83d\udc5f \ud83d\udd19 \ud83e\udd14 \u26ab\ufe0f\u2754 \ud83d\ude25.</p>"},{"location":"tutorial/security/first-steps/#mainpy","title":"\u270d <code>main.py</code>","text":"<p>\ud83d\udcc1 \ud83d\uddbc \ud83d\udcc1 <code>main.py</code>:</p> Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: str = Depends(oauth2_scheme)):\n    return {\"token\": token}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: Annotated[str, Depends(oauth2_scheme)]):\n    return {\"token\": token}\n</code></pre> <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: Annotated[str, Depends(oauth2_scheme)]):\n    return {\"token\": token}\n</code></pre>"},{"location":"tutorial/security/first-steps/#_2","title":"\ud83c\udfc3 \u26ab\ufe0f","text":"<p>Info</p> <p>\ud83e\udd47 \u274e <code>python-multipart</code>.</p> <p>\ud83e\udd36 \u24c2. <code>pip install python-multipart</code>.</p> <p>\ud83d\udc49 \u21a9\ufe0f Oauth2\ufe0f\u20e3 \u2699\ufe0f \"\ud83d\udce8 \ud83d\udcca\" \ud83d\udce8 <code>username</code> &amp; <code>password</code>.</p> <p>\ud83c\udfc3 \ud83d\uddbc \u23ee\ufe0f:</p> <pre><code>$ uvicorn main:app --reload\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre>"},{"location":"tutorial/security/first-steps/#_3","title":"\u2705 \u26ab\ufe0f","text":"<p>\ud83d\udeb6 \ud83c\udf93 \ud83e\ude7a: http://127.0.0.1:8000/docs.</p> <p>\ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \ud83d\udd73 \ud83d\udc96 \ud83d\udc49:</p> <p></p> <p>\u2714 \ud83d\udd3c \u2757</p> <p>\ud83d\udc46 \u23ea \u2714\ufe0f \u2728 \ud83c\udd95 \"\u2714\" \ud83d\udd3c.</p> <p>&amp; \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f \u2714\ufe0f \ud83d\udc25 \ud83d\udd12 \ud83d\udd1d-\u25b6\ufe0f\ufe0f \u21a9 \ud83d\udc48 \ud83d\udc46 \ud83d\udcaa \ud83d\udd8a.</p> <p>&amp; \ud83d\udea5 \ud83d\udc46 \ud83d\udd8a \u26ab\ufe0f, \ud83d\udc46 \u2714\ufe0f \ud83d\udc25 \u2714 \ud83d\udce8 \ud83c\udd8e <code>username</code> &amp; <code>password</code> (&amp; \ud83c\udf8f \ud83d\udce6 \ud83c\udfd1):</p> <p></p> <p>Note</p> <p>\u26ab\ufe0f \ud83d\udeab \ud83e\udd14 \u26ab\ufe0f\u2754 \ud83d\udc46 \ud83c\udd8e \ud83d\udce8, \u26ab\ufe0f \ud83c\udfc6 \ud83d\udeab \ud83d\udc77. \u270b\ufe0f \ud83d\udc65 \ud83d\udd1c \ud83e\udd1a \ud83d\udce4.</p> <p>\ud83d\udc49 \u2197\ufe0f \ud83d\udeab \ud83d\udd78 \ud83c\udfc1 \ud83d\udc69\u200d\ud83d\udcbb, \u270b\ufe0f \u26ab\ufe0f \ud83d\udc51 \ud83c\udfe7 \ud83e\uddf0 \ud83d\udcc4 \ud83d\udda5 \ud83c\udf10 \ud83d\udc46 \ud83d\udee0\ufe0f.</p> <p>\u26ab\ufe0f \ud83d\udcaa \u2699\ufe0f \ud83d\udd78 \ud83c\udfc9 (\ud83d\udc48 \ud83d\udcaa \ud83d\udc46).</p> <p>\u26ab\ufe0f \ud83d\udcaa \u2699\ufe0f \ud83e\udd49 \ud83e\udd73 \ud83c\ude38 &amp; \u2699\ufe0f.</p> <p>&amp; \u26ab\ufe0f \ud83d\udcaa \u2699\ufe0f \ud83d\udc46, \u2139, \u2705 &amp; \ud83d\udcaf \ud83c\udf8f \ud83c\ude38.</p>"},{"location":"tutorial/security/first-steps/#password","title":"<code>password</code> \ud83d\udca7","text":"<p>\ud83d\udd1c \u27a1\ufe0f \ud83d\udeb6 \ud83d\udd19 \ud83d\udc44 &amp; \ud83e\udd14 \u26ab\ufe0f\u2754 \ud83c\udf10 \ud83d\udc48.</p> <p><code>password</code> \"\ud83d\udca7\" 1\ufe0f\u20e3 \ud83c\udf0c (\"\ud83d\udca7\") \ud83d\udd2c Oauth2\ufe0f\u20e3, \ud83c\udf75 \ud83d\udc82\u200d\u2642 &amp; \ud83e\udd1d.</p> <p>Oauth2\ufe0f\u20e3 \ud83d\udd27 \ud83d\udc48 \ud83d\udc69\u200d\ud83d\udcbb \u2696\ufe0f \ud83d\udee0\ufe0f \ud83d\udcaa \ud83d\udd2c \ud83d\udcbd \ud83d\udc48 \ud83d\udd13 \ud83d\udc69\u200d\ud83d\udcbb.</p> <p>\u270b\ufe0f \ud83d\udc49 \ud83d\udcbc, \ud83c\udf8f ReadyAPI \ud83c\ude38 \ud83d\udd1c \ud83c\udf75 \ud83d\udee0\ufe0f &amp; \ud83e\udd1d.</p> <p>, \u27a1\ufe0f \ud83d\udcc4 \u26ab\ufe0f \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc48 \ud83d\udcc9 \u261d \ud83c\udf91:</p> <ul> <li>\ud83d\udc69\u200d\ud83d\udcbb \ud83c\udd8e <code>username</code> &amp; <code>password</code> \ud83d\udd78, &amp; \ud83c\udfaf <code>Enter</code>.</li> <li>\ud83d\udd78 (\ud83c\udfc3\u200d\u2642 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udda5) \ud83d\udce8 \ud83d\udc48 <code>username</code> &amp; <code>password</code> \ud83c\udfaf \ud83d\udcdb \ud83d\udc46 \ud83d\udee0\ufe0f (\ud83d\udce3 \u23ee\ufe0f <code>tokenUrl=\"token\"</code>).</li> <li>\ud83d\udee0\ufe0f \u2705 \ud83d\udc48 <code>username</code> &amp; <code>password</code>, &amp; \ud83d\udce8 \u23ee\ufe0f \"\ud83e\udd1d\" (\ud83d\udc65 \ud83d\udeab \ud83d\udee0\ufe0f \ud83d\ude46 \ud83d\udc49).<ul> <li>\"\ud83e\udd1d\" \ud83c\udfbb \u23ee\ufe0f \ud83c\udf9a \ud83d\udc48 \ud83d\udc65 \ud83d\udcaa \u2699\ufe0f \u23ea \u2714 \ud83d\udc49 \ud83d\udc69\u200d\ud83d\udcbb.</li> <li>\ud83d\udece, \ud83e\udd1d \u2692 \ud83d\udd5b \u23ee\ufe0f \ud83d\udd70.<ul> <li>, \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd1c \u2714\ufe0f \ud83d\udd79 \ud83d\udd04 \u261d \u23ea.</li> <li>&amp; \ud83d\udea5 \ud83e\udd1d \ud83d\udcce, \u26a0 \ud83c\udf18. \u26ab\ufe0f \ud83d\udeab \ud83d\udc96 \ud83e\uddf2 \ud83d\udd11 \ud83d\udc48 \ud83d\udd1c \ud83d\udc77 \u267e (\ud83c\udfc6 \ud83d\udcbc).</li> </ul> </li> </ul> </li> <li>\ud83d\udd78 \ud83c\udfea \ud83d\udc48 \ud83e\udd1d \ud83c\udf55 \ud83d\udc71.</li> <li>\ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd8a \ud83d\udd78 \ud83d\udeb6 \u27951\ufe0f\u20e3 \ud83d\udcc4 \ud83d\udd78 \ud83d\udd78 \ud83d\udcf1.</li> <li>\ud83d\udd78 \ud83d\udcaa \u2615 \ud83c\udf05 \ud83d\udcbd \u26aa\ufe0f\u27a1\ufe0f \ud83d\udee0\ufe0f.<ul> <li>\u270b\ufe0f \u26ab\ufe0f \ud83d\udcaa \ud83e\udd1d \ud83d\udc48 \ud83c\udfaf \ud83d\udd17.</li> <li>, \ud83d\udd13 \u23ee\ufe0f \ud83d\udc46 \ud83d\udee0\ufe0f, \u26ab\ufe0f \ud83d\udce8 \ud83c\udf9a <code>Authorization</code> \u23ee\ufe0f \ud83d\udcb2 <code>Bearer</code> \u2795 \ud83e\udd1d.</li> <li>\ud83d\udea5 \ud83e\udd1d \ud83d\udd0c <code>foobar</code>, \ud83c\udf9a <code>Authorization</code> \ud83c\udf9a \ud83d\udd1c: <code>Bearer foobar</code>.</li> </ul> </li> </ul>"},{"location":"tutorial/security/first-steps/#readyapim-oauth2passwordbearer","title":"ReadyAPI'\u24c2 <code>OAuth2PasswordBearer</code>","text":"<p>ReadyAPI \ud83d\ude9a \ud83d\udcda \ud83e\uddf0, \ud83c\udf8f \ud83c\udf9a \u269b, \ud83d\udee0\ufe0f \ud83d\udc6b \ud83d\udc82\u200d\u2642 \u2692.</p> <p>\ud83d\udc49 \ud83d\uddbc \ud83d\udc65 \ud83d\udd1c \u2699\ufe0f Oauth2\ufe0f\u20e3, \u23ee\ufe0f \ud83d\udd10 \ud83d\udca7, \u2699\ufe0f \ud83d\udce8 \ud83e\udd1d. \ud83d\udc65 \ud83d\udc48 \u2699\ufe0f <code>OAuth2PasswordBearer</code> \ud83c\udf93.</p> <p>Info</p> <p>\"\ud83d\udce8\" \ud83e\udd1d \ud83d\udeab \ud83d\udd74 \ud83c\udf9b.</p> <p>\u270b\ufe0f \u26ab\ufe0f \ud83c\udfc6 1\ufe0f\u20e3 \ud83d\udc46 \u2699\ufe0f \ud83d\udcbc.</p> <p>&amp; \u26ab\ufe0f \ud83d\udcaa \ud83c\udfc6 \ud83c\udfc6 \u2699\ufe0f \ud83d\udcbc, \ud83d\udea5 \ud83d\udc46 Oauth2\ufe0f\u20e3 \ud83d\udd74 &amp; \ud83d\udcad \u26ab\ufe0f\u2754 \u26ab\ufe0f\u2754 \ud83d\udce4 \u27951\ufe0f\u20e3 \ud83c\udf9b \ud83d\udc48 \u2663 \ud83d\udc7b \ud83d\udc46 \ud83d\udcaa.</p> <p>\ud83d\udc48 \ud83d\udcbc, ReadyAPI \ud83d\ude9a \ud83d\udc46 \u23ee\ufe0f \ud83e\uddf0 \ud83c\udfd7 \u26ab\ufe0f.</p> <p>\ud83d\udd50\u2754 \ud83d\udc65 \u270d \ud83d\udc50 <code>OAuth2PasswordBearer</code> \ud83c\udf93 \ud83d\udc65 \ud83d\udeb6\u200d\u2640\ufe0f <code>tokenUrl</code> \ud83d\udd22. \ud83d\udc49 \ud83d\udd22 \ud83d\udd0c \ud83d\udcdb \ud83d\udc48 \ud83d\udc69\u200d\ud83d\udcbb (\ud83d\udd78 \ud83c\udfc3 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udda5) \ud83d\udd1c \u2699\ufe0f \ud83d\udce8 <code>username</code> &amp; <code>password</code> \u2714 \ud83e\udd1a \ud83e\udd1d.</p> Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: str = Depends(oauth2_scheme)):\n    return {\"token\": token}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: Annotated[str, Depends(oauth2_scheme)]):\n    return {\"token\": token}\n</code></pre> <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: Annotated[str, Depends(oauth2_scheme)]):\n    return {\"token\": token}\n</code></pre> <p>Tip</p> <p>\ud83d\udce5 <code>tokenUrl=\"token\"</code> \ud83d\udd17 \u2696 \ud83d\udcdb <code>token</code> \ud83d\udc48 \ud83d\udc65 \ud83d\udeab \u270d. \u26ab\ufe0f \u2696 \ud83d\udcdb, \u26ab\ufe0f \ud83c\udf13 <code>./token</code>.</p> <p>\u21a9\ufe0f \ud83d\udc65 \u2699\ufe0f \u2696 \ud83d\udcdb, \ud83d\udea5 \ud83d\udc46 \ud83d\udee0\ufe0f \ud83d\udd0e <code>https://example.com/</code>, \u2934\ufe0f \u26ab\ufe0f \ud83d\udd1c \ud83d\udd17 <code>https://example.com/token</code>. \u270b\ufe0f \ud83d\udea5 \ud83d\udc46 \ud83d\udee0\ufe0f \ud83d\udd0e <code>https://example.com/api/v1/</code>, \u2934\ufe0f \u26ab\ufe0f \ud83d\udd1c \ud83d\udd17 <code>https://example.com/api/v1/token</code>.</p> <p>\u2699\ufe0f \u2696 \ud83d\udcdb \u26a0 \u2692 \ud83d\udcad \ud83d\udc46 \ud83c\ude38 \ud83d\udea7 \ud83d\udc77 \ud83c\udfe7 \u2699\ufe0f \ud83d\udcbc \ud83d\udc96 \u26c5 \ud83d\uddf3.</p> <p>\ud83d\udc49 \ud83d\udd22 \ud83d\udeab \u270d \ud83d\udc48 \ud83d\udd17 / \u27a1 \ud83d\udee0\ufe0f, \u270b\ufe0f \ud83d\udce3 \ud83d\udc48 \ud83d\udcdb <code>/token</code> \ud83d\udd1c 1\ufe0f\u20e3 \ud83d\udc48 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd1c \u2699\ufe0f \ud83e\udd1a \ud83e\udd1d. \ud83d\udc48 \u2139 \u2699\ufe0f \ud83d\uddc4, &amp; \u2934\ufe0f \ud83c\udf93 \ud83d\udee0\ufe0f \ud83e\uddfe \u2699\ufe0f.</p> <p>\ud83d\udc65 \ud83d\udd1c \ud83d\udd1c \u270d \u2611 \u27a1 \ud83d\udee0\ufe0f.</p> <p>Info</p> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udcf6 \u26a0 \"\u270d\" \ud83d\udc46 \ud83d\udcaa \ud83d\udc4e \ud83d\udc57 \ud83d\udd22 \ud83d\udcdb <code>tokenUrl</code> \u21a9\ufe0f <code>token_url</code>.</p> <p>\ud83d\udc48 \u21a9\ufe0f \u26ab\ufe0f \u2699\ufe0f \ud83c\udf8f \ud83d\udcdb \ud83d\uddc4 \ud83d\udd0c. \ud83d\udc48 \ud83d\udea5 \ud83d\udc46 \ud83d\udcaa \ud83d\udd2c \ud83c\udf05 \ud83d\udd03 \ud83d\ude46 \ud83d\udc6b \ud83d\udc82\u200d\u2642 \u2696 \ud83d\udc46 \ud83d\udcaa \ud83d\udcc1 &amp; \ud83d\udccb \u26ab\ufe0f \ud83d\udd0e \ud83c\udf16 \u2139 \ud83d\udd03 \u26ab\ufe0f.</p> <p><code>oauth2_scheme</code> \ud83d\udd22 \ud83d\udc50 <code>OAuth2PasswordBearer</code>, \u270b\ufe0f \u26ab\ufe0f \"\ud83c\udde7\ud83c\uddf2\".</p> <p>\u26ab\ufe0f \ud83d\udcaa \ud83e\udd19:</p> <pre><code>oauth2_scheme(some, parameters)\n</code></pre> <p>, \u26ab\ufe0f \ud83d\udcaa \u2699\ufe0f \u23ee\ufe0f <code>Depends</code>.</p>"},{"location":"tutorial/security/first-steps/#_4","title":"\u2699\ufe0f \u26ab\ufe0f","text":"<p>\ud83d\udd1c \ud83d\udc46 \ud83d\udcaa \ud83d\udeb6\u200d\u2640\ufe0f \ud83d\udc48 <code>oauth2_scheme</code> \ud83d\udd17 \u23ee\ufe0f <code>Depends</code>.</p> Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: str = Depends(oauth2_scheme)):\n    return {\"token\": token}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: Annotated[str, Depends(oauth2_scheme)]):\n    return {\"token\": token}\n</code></pre> <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: Annotated[str, Depends(oauth2_scheme)]):\n    return {\"token\": token}\n</code></pre> <p>\ud83d\udc49 \ud83d\udd17 \ud83d\udd1c \ud83d\ude9a <code>str</code> \ud83d\udc48 \ud83d\udee0\ufe0f \ud83d\udd22 <code>token</code> \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22.</p> <p>ReadyAPI \ud83d\udd1c \ud83d\udcad \ud83d\udc48 \u26ab\ufe0f \ud83d\udcaa \u2699\ufe0f \ud83d\udc49 \ud83d\udd17 \ud83d\udd2c \"\ud83d\udc82\u200d\u2642 \u2696\" \ud83d\uddc4 \ud83d\udd17 (&amp; \ud83c\udfe7 \ud83d\udee0\ufe0f \ud83e\ude7a).</p> <p>\ud83d\udce1 \u2139</p> <p>ReadyAPI \ud83d\udd1c \ud83d\udcad \ud83d\udc48 \u26ab\ufe0f \ud83d\udcaa \u2699\ufe0f \ud83c\udf93 <code>OAuth2PasswordBearer</code> (\ud83d\udce3 \ud83d\udd17) \ud83d\udd2c \ud83d\udc82\u200d\u2642 \u2696 \ud83d\uddc4 \u21a9\ufe0f \u26ab\ufe0f \ud83d\ude16 \u26aa\ufe0f\u27a1\ufe0f <code>readyapi.security.oauth2.OAuth2</code>, \u2754 \ud83d\udd04 \ud83d\ude16 \u26aa\ufe0f\u27a1\ufe0f <code>readyapi.security.base.SecurityBase</code>.</p> <p>\ud83c\udf10 \ud83d\udc82\u200d\u2642 \ud83d\ude99 \ud83d\udc48 \ud83d\udee0\ufe0f \u23ee\ufe0f \ud83d\uddc4 (&amp; \ud83c\udfe7 \ud83d\udee0\ufe0f \ud83e\ude7a) \ud83d\ude16 \u26aa\ufe0f\u27a1\ufe0f <code>SecurityBase</code>, \ud83d\udc48 \u2754 ReadyAPI \ud83d\udcaa \ud83d\udcad \u2754 \ud83d\udee0\ufe0f \ud83d\udc6b \ud83d\uddc4.</p>"},{"location":"tutorial/security/first-steps/#_5","title":"\u26ab\ufe0f\u2754 \u26ab\ufe0f \ud83d\udd28","text":"<p>\u26ab\ufe0f \ud83d\udd1c \ud83d\udeb6 &amp; \ud83d\udc40 \ud83d\udce8 \ud83d\udc48 <code>Authorization</code> \ud83c\udf9a, \u2705 \ud83d\udea5 \ud83d\udcb2 <code>Bearer</code> \u2795 \ud83e\udd1d, &amp; \ud83d\udd1c \ud83d\udce8 \ud83e\udd1d <code>str</code>.</p> <p>\ud83d\udea5 \u26ab\ufe0f \ud83d\udeab \ud83d\udc40 <code>Authorization</code> \ud83c\udf9a, \u2696\ufe0f \ud83d\udcb2 \ud83d\udeab \u2714\ufe0f <code>Bearer</code> \ud83e\udd1d, \u26ab\ufe0f \ud83d\udd1c \ud83d\udce8 \u23ee\ufe0f 4\ufe0f\u20e30\ufe0f\u20e31\ufe0f\u20e3 \ud83d\udc54 \ud83d\udcdf \u274c (<code>UNAUTHORIZED</code>) \ud83d\udd17.</p> <p>\ud83d\udc46 \ud83d\udeab \u2714\ufe0f \u2705 \ud83d\udea5 \ud83e\udd1d \ud83d\udd00 \ud83d\udce8 \u274c. \ud83d\udc46 \ud83d\udcaa \ud83d\udcad \ud83d\udc48 \ud83d\udea5 \ud83d\udc46 \ud83d\udd22 \ud83d\udee0\ufe0f, \u26ab\ufe0f \ud83d\udd1c \u2714\ufe0f <code>str</code> \ud83d\udc48 \ud83e\udd1d.</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udd04 \u26ab\ufe0f \u23ea \ud83c\udf93 \ud83e\ude7a:</p> <p></p> <p>\ud83d\udc65 \ud83d\udeab \u2714 \ud83d\udd2c \ud83e\udd1d, \u270b\ufe0f \ud83d\udc48 \u25b6\ufe0f \u23ea.</p>"},{"location":"tutorial/security/first-steps/#_6","title":"\ud83c\udf03","text":"<p>, 3\ufe0f\u20e3 \u2696\ufe0f 4\ufe0f\u20e3 \u2795 \u23f8, \ud83d\udc46 \u23ea \u2714\ufe0f \ud83d\udc12 \ud83d\udce8 \ud83d\udc82\u200d\u2642.</p>"},{"location":"tutorial/security/get-current-user/","title":"\ud83e\udd1a \u23ee\ufe0f \ud83d\udc69\u200d\ud83d\udcbb","text":"<p>\u23ee\ufe0f \ud83d\udcc3 \ud83d\udc82\u200d\u2642 \u2699\ufe0f (\u2754 \ud83e\udde2 \ud83d\udd1b \ud83d\udd17 \ud83d\udc89 \u2699\ufe0f) \ud83e\udd1d \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22 <code>token</code> <code>str</code>:</p> Python 3.8+ - non-Annotated <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: str = Depends(oauth2_scheme)):\n    return {\"token\": token}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: Annotated[str, Depends(oauth2_scheme)]):\n    return {\"token\": token}\n</code></pre> <pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: Annotated[str, Depends(oauth2_scheme)]):\n    return {\"token\": token}\n</code></pre> <p>\u270b\ufe0f \ud83d\udc48 \ud83d\udeab \ud83d\udc48 \u26a0.</p> <p>\u27a1\ufe0f \u2692 \u26ab\ufe0f \ud83e\udd1d \ud83d\udc65 \u23ee\ufe0f \ud83d\udc69\u200d\ud83d\udcbb.</p>"},{"location":"tutorial/security/get-current-user/#_2","title":"\u270d \ud83d\udc69\u200d\ud83d\udcbb \ud83c\udff7","text":"<p>\ud83e\udd47, \u27a1\ufe0f \u270d Pydantic \ud83d\udc69\u200d\ud83d\udcbb \ud83c\udff7.</p> <p>\ud83c\udf8f \ud83c\udf0c \ud83d\udc65 \u2699\ufe0f Pydantic \ud83d\udce3 \ud83d\udcaa, \ud83d\udc65 \ud83d\udcaa \u2699\ufe0f \u26ab\ufe0f \ud83d\ude46 \ud83d\ude46:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre>"},{"location":"tutorial/security/get-current-user/#get_current_user","title":"\u270d <code>get_current_user</code> \ud83d\udd17","text":"<p>\u27a1\ufe0f \u270d \ud83d\udd17 <code>get_current_user</code>.</p> <p>\ud83d\udcad \ud83d\udc48 \ud83d\udd17 \ud83d\udcaa \u2714\ufe0f \ud83c\udfa7-\ud83d\udd17 \u2753</p> <p><code>get_current_user</code> \ud83d\udd1c \u2714\ufe0f \ud83d\udd17 \u23ee\ufe0f \ud83c\udf8f <code>oauth2_scheme</code> \ud83d\udc65 \u270d \u23ed.</p> <p>\ud83c\udf8f \ud83d\udc65 \ud83d\udd28 \u23ed \u27a1 \ud83d\udee0\ufe0f \ud83d\udd17, \ud83d\udc46 \ud83c\udd95 \ud83d\udd17 <code>get_current_user</code> \ud83d\udd1c \ud83d\udce8 <code>token</code> <code>str</code> \u26aa\ufe0f\u27a1\ufe0f \ud83c\udfa7-\ud83d\udd17 <code>oauth2_scheme</code>:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre>"},{"location":"tutorial/security/get-current-user/#_3","title":"\ud83e\udd1a \ud83d\udc69\u200d\ud83d\udcbb","text":"<p><code>get_current_user</code> \ud83d\udd1c \u2699\ufe0f (\u274c) \ud83d\ude99 \ud83d\udd22 \ud83d\udc65 \u270d, \ud83d\udc48 \u270a \ud83e\udd1d <code>str</code> &amp; \ud83d\udce8 \ud83d\udc46 Pydantic <code>User</code> \ud83c\udff7:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre>"},{"location":"tutorial/security/get-current-user/#_4","title":"\ud83d\udc89 \u23ee\ufe0f \ud83d\udc69\u200d\ud83d\udcbb","text":"<p>\ud83d\udd1c \ud83d\udc65 \ud83d\udcaa \u2699\ufe0f \ud83c\udf8f <code>Depends</code> \u23ee\ufe0f \ud83d\udc46 <code>get_current_user</code> \u27a1 \ud83d\udee0\ufe0f:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre> <p>\ud83d\udc40 \ud83d\udc48 \ud83d\udc65 \ud83d\udce3 \ud83c\udd8e <code>current_user</code> Pydantic \ud83c\udff7 <code>User</code>.</p> <p>\ud83d\udc49 \ud83d\udd1c \u2139 \ud83c\uddfa\ud83c\uddf2 \ud83d\udd18 \ud83d\udd22 \u23ee\ufe0f \ud83c\udf10 \ud83d\udee0\ufe0f &amp; \ud83c\udd8e \u2705.</p> <p>Tip</p> <p>\ud83d\udc46 5\ufe0f\u20e3\ud83d\udcc6 \ud83d\udcad \ud83d\udc48 \ud83d\udce8 \ud83d\udcaa \ud83d\udce3 \u23ee\ufe0f Pydantic \ud83c\udff7.</p> <p>\ud83d\udce5 ReadyAPI \ud83c\udfc6 \ud83d\udeab \ud83e\udd1a \ud83d\ude28 \u21a9\ufe0f \ud83d\udc46 \u2699\ufe0f <code>Depends</code>.</p> <p>Check</p> <p>\ud83c\udf0c \ud83d\udc49 \ud83d\udd17 \u2699\ufe0f \ud83c\udfd7 \u2714 \ud83d\udc65 \u2714\ufe0f \ud83c\udf8f \ud83d\udd17 (\ud83c\udf8f \"\u2611\") \ud83d\udc48 \ud83c\udf10 \ud83d\udce8 <code>User</code> \ud83c\udff7.</p> <p>\ud83d\udc65 \ud83d\udeab \ud83d\udeab \u2714\ufe0f \ud83d\udd74 1\ufe0f\u20e3 \ud83d\udd17 \ud83d\udc48 \ud83d\udcaa \ud83d\udce8 \ud83d\udc48 \ud83c\udd8e \ud83d\udcbd.</p>"},{"location":"tutorial/security/get-current-user/#_5","title":"\ud83c\udf8f \ud83c\udff7","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udd1c \ud83e\udd1a \u23ee\ufe0f \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd17 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22 &amp; \ud83d\ude45 \u23ee\ufe0f \ud83d\udc82\u200d\u2642 \ud83d\udee0\ufe0f \ud83d\udd17 \ud83d\udc89 \ud83c\udf9a, \u2699\ufe0f <code>Depends</code>.</p> <p>&amp; \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83d\ude46 \ud83c\udff7 \u2696\ufe0f \ud83d\udcbd \ud83d\udc82\u200d\u2642 \ud83d\udcc4 (\ud83d\udc49 \ud83d\udcbc, Pydantic \ud83c\udff7 <code>User</code>).</p> <p>\u270b\ufe0f \ud83d\udc46 \ud83d\udeab \ud83d\udeab \u2699\ufe0f \ud83c\udfaf \ud83d\udcbd \ud83c\udff7, \ud83c\udf93 \u2696\ufe0f \ud83c\udd8e.</p> <p>\ud83d\udc46 \ud83d\udc9a \u2714\ufe0f <code>id</code> &amp; <code>email</code> &amp; \ud83d\udeab \u2714\ufe0f \ud83d\ude46 <code>username</code> \ud83d\udc46 \ud83c\udff7 \u2753 \ud83d\udcad. \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83d\udc49 \ud83c\udf8f \ud83e\uddf0.</p> <p>\ud83d\udc46 \ud83d\udc9a \u2714\ufe0f <code>str</code>\u2753 \u2696\ufe0f <code>dict</code>\u2753 \u2696\ufe0f \ud83d\udcbd \ud83c\udf93 \ud83c\udff7 \ud83d\udc50 \ud83d\udd17 \u2753 \u26ab\ufe0f \ud83c\udf10 \ud83d\udc77 \ud83c\udf8f \ud83c\udf0c.</p> <p>\ud83d\udc46 \ud83e\udd19 \ud83d\udeab \u2714\ufe0f \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udc48 \ud83d\udd79 \ud83d\udc46 \ud83c\ude38 \u270b\ufe0f \ud83e\udd16, \ud83e\udd16, \u2696\ufe0f \ud83c\udf8f \u2699\ufe0f, \ud83d\udc48 \u2714\ufe0f \ud83d\udd10 \ud83e\udd1d \u2753 \ud83d\udd04, \u26ab\ufe0f \ud83c\udf10 \ud83d\udc77 \ud83c\udf8f.</p> <p>\u2699\ufe0f \ud83d\ude46 \ud83d\ude07 \ud83c\udff7, \ud83d\ude46 \ud83d\ude07 \ud83c\udf93, \ud83d\ude46 \ud83d\ude07 \ud83d\udcbd \ud83d\udc48 \ud83d\udc46 \ud83d\udcaa \ud83d\udc46 \ud83c\ude38. ReadyAPI \u2714\ufe0f \ud83d\udc46 \ud83d\udcd4 \u23ee\ufe0f \ud83d\udd17 \ud83d\udc89 \u2699\ufe0f.</p>"},{"location":"tutorial/security/get-current-user/#_6","title":"\ud83d\udcdf \ud83d\udcd0","text":"<p>\ud83d\udc49 \ud83d\uddbc 5\ufe0f\u20e3\ud83d\udcc6 \ud83d\ude11 \ud83d\udd01. \u2714\ufe0f \ud83e\udd2f \ud83d\udc48 \ud83d\udc65 \ud83c\udf00 \ud83d\udc82\u200d\u2642, \ud83d\udcca \ud83c\udff7, \ud83d\ude99 \ud83d\udd22 &amp; \u27a1 \ud83d\udee0\ufe0f \ud83c\udf8f \ud83d\udcc1.</p> <p>\u270b\ufe0f \ud83d\udce5 \ud83d\udd11 \u261d.</p> <p>\ud83d\udc82\u200d\u2642 &amp; \ud83d\udd17 \ud83d\udc89 \ud83d\udca9 \u270d \ud83d\udd50.</p> <p>&amp; \ud83d\udc46 \ud83d\udcaa \u2692 \u26ab\ufe0f \ud83c\udfd7 \ud83d\udc46 \ud83d\udc9a. &amp; , \u2714\ufe0f \u26ab\ufe0f \u270d \ud83d\udd74 \ud83d\udd50, \ud83d\udc41 \ud83e\udd49. \u23ee\ufe0f \ud83c\udf10 \ud83d\udcaa.</p> <p>\u270b\ufe0f \ud83d\udc46 \ud83d\udcaa \u2714\ufe0f \ud83d\udcaf \ud83d\udd17 (\u27a1 \ud83d\udee0\ufe0f) \u2699\ufe0f \ud83c\udf8f \ud83d\udc82\u200d\u2642 \u2699\ufe0f.</p> <p>&amp; \ud83c\udf10 \ud83d\udc6b (\u2696\ufe0f \ud83d\ude46 \u2194 \ud83d\udc6b \ud83d\udc48 \ud83d\udc46 \ud83d\udc9a) \ud83d\udcaa \u270a \ud83d\udcc8 \ud83c\udfe4-\u2699\ufe0f \ud83d\udc6b \ud83d\udd17 \u2696\ufe0f \ud83d\ude46 \ud83c\udf8f \ud83d\udd17 \ud83d\udc46 \u270d.</p> <p>&amp; \ud83c\udf10 \ud83d\udc49 \ud83d\udcaf \u27a1 \ud83d\udee0\ufe0f \ud83d\udcaa \ud83e\udd2a 3\ufe0f\u20e3 \u23f8:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordBearer\n\napp = ReadyAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n</code></pre>"},{"location":"tutorial/security/get-current-user/#_7","title":"\ud83c\udf03","text":"<p>\ud83d\udc46 \ud83d\udcaa \ud83d\udd1c \ud83e\udd1a \u23ee\ufe0f \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd17 \ud83d\udc46 \u27a1 \ud83d\udee0\ufe0f \ud83d\udd22.</p> <p>\ud83d\udc65 \u23ea \ud83d\ude2c \ud83d\udce4.</p> <p>\ud83d\udc65 \ud83d\udcaa \ud83d\udeae \u27a1 \ud83d\udee0\ufe0f \ud83d\udc69\u200d\ud83d\udcbb/\ud83d\udc69\u200d\ud83d\udcbb \ud83e\udd19 \ud83d\udce8 <code>username</code> &amp; <code>password</code>.</p> <p>\ud83d\udc48 \ud83d\udc5f \u23ed.</p>"},{"location":"tutorial/security/oauth2-jwt/","title":"Oauth2\ufe0f\u20e3 \u23ee\ufe0f \ud83d\udd10 (&amp; \ud83d\udd01), \ud83d\udce8 \u23ee\ufe0f \ud83e\udd59 \ud83e\udd1d","text":"<p>\ud83d\udd1c \ud83d\udc48 \ud83d\udc65 \u2714\ufe0f \ud83c\udf10 \ud83d\udc82\u200d\u2642 \ud83d\udca7, \u27a1\ufe0f \u2692 \ud83c\ude38 \ud83e\udd19 \ud83d\udd10, \u2699\ufe0f \ud83e\udd59 \ud83e\udd1d &amp; \ud83d\udd10 \ud83d\udd10 \ud83d\udd01.</p> <p>\ud83d\udc49 \ud83d\udcdf \ud83d\udd73 \ud83d\udc46 \ud83d\udcaa \ud83e\udd19 \u2699\ufe0f \ud83d\udc46 \ud83c\ude38, \ud83d\udd8a \ud83d\udd10 #\ufe0f\u20e3 \ud83d\udc46 \ud83d\udcbd, \u2652\ufe0f.</p> <p>\ud83d\udc65 \ud83d\udd1c \u25b6\ufe0f \u26aa\ufe0f\u27a1\ufe0f \ud83c\udf10\u2754 \ud83d\udc65 \u25c0\ufe0f \u23ee\ufe0f \ud83d\udcc3 &amp; \ud83d\udcc8 \u26ab\ufe0f.</p>"},{"location":"tutorial/security/oauth2-jwt/#_1","title":"\ud83d\udd03 \ud83e\udd59","text":"<p>\ud83e\udd59 \u26d3 \"\ud83c\udfbb \ud83d\udd78 \ud83e\udd1d\".</p> <p>\u26ab\ufe0f \ud83d\udc29 \ud83d\udeab \ud83c\udfbb \ud83c\udf9a \ud83d\udccf \ud83d\udca7 \ud83c\udfbb \ud83c\udf75 \ud83d\ude80. \u26ab\ufe0f \ud83d\udc40 \ud83d\udc96 \ud83d\udc49:</p> <pre><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\n</code></pre> <p>\u26ab\ufe0f \ud83d\udeab \ud83d\udddc,, \ud83d\ude46 \ud83d\udcaa \ud83d\udee1 \u2139 \u26aa\ufe0f\u27a1\ufe0f \ud83c\udf9a.</p> <p>\u270b\ufe0f \u26ab\ufe0f \ud83d\uded1. , \ud83d\udd50\u2754 \ud83d\udc46 \ud83d\udce8 \ud83e\udd1d \ud83d\udc48 \ud83d\udc46 \u2668, \ud83d\udc46 \ud83d\udcaa \u2714 \ud83d\udc48 \ud83d\udc46 \ud83e\udd19 \u2668 \u26ab\ufe0f.</p> <p>\ud83d\udc48 \ud83c\udf0c, \ud83d\udc46 \ud83d\udcaa \u270d \ud83e\udd1d \u23ee\ufe0f \ud83d\udc54, \u27a1\ufe0f \ud83d\udcac, 1\ufe0f\u20e3 \ud83d\uddd3\ufe0f. &amp; \u2934\ufe0f \ud83d\udd50\u2754 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udc5f \ud83d\udd19 \u23ed \ud83d\udcc6 \u23ee\ufe0f \ud83e\udd1d, \ud83d\udc46 \ud83d\udcad \ud83d\udc48 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd79 \ud83d\udc46 \u2699\ufe0f.</p> <p>\u23ee\ufe0f \ud83d\uddd3\ufe0f, \ud83e\udd1d \ud83d\udd1c \ud83d\udd5b &amp; \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd1c \ud83d\udeab \u2714 &amp; \ud83d\udd1c \u2714\ufe0f \ud83d\uded1 \ud83d\udd04 \ud83e\udd1a \ud83c\udd95 \ud83e\udd1d. &amp; \ud83d\udea5 \ud83d\udc69\u200d\ud83d\udcbb (\u2696\ufe0f \ud83e\udd49 \ud83e\udd73) \ud83d\udd04 \ud83d\udd00 \ud83e\udd1d \ud83d\udd00 \ud83d\udc54, \ud83d\udc46 \ud83d\udd1c \ud83d\udcaa \ud83d\udd0e \u26ab\ufe0f, \u21a9\ufe0f \ud83d\udcb3 \ud83d\udd1c \ud83d\udeab \ud83c\udfcf.</p> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udc9a \ud83e\udd3e \u23ee\ufe0f \ud83e\udd59 \ud83e\udd1d &amp; \ud83d\udc40 \u2754 \ud83d\udc6b \ud83d\udc77, \u2705 https://jwt.io.</p>"},{"location":"tutorial/security/oauth2-jwt/#python-jose","title":"\u274e <code>python-jose</code>","text":"<p>\ud83d\udc65 \ud83d\udcaa \u274e <code>python-jose</code> \ud83c\udfd7 &amp; \u2714 \ud83e\udd59 \ud83e\udd1d \ud83d\udc0d:</p> <pre><code>$ pip install \"python-jose[cryptography]\"\n\n---&gt; 100%\n</code></pre> <p>\ud83d\udc0d-\ud83c\udde9\ud83c\uddec \ud83d\ude9a \ud83d\udd10 \ud83d\udc69\u200d\ud83d\udcbb \u2795.</p> <p>\ud83d\udce5 \ud83d\udc65 \u2699\ufe0f \ud83d\udc4d 1\ufe0f\u20e3: )/\u269b.</p> <p>Tip</p> <p>\ud83d\udc49 \ud83d\udd30 \u23ea \u2699\ufe0f PyJWT.</p> <p>\u270b\ufe0f \u26ab\ufe0f \u2139 \u2699\ufe0f \ud83d\udc0d-\ud83c\udde9\ud83c\uddec \u21a9\ufe0f \u26ab\ufe0f \ud83d\ude9a \ud83c\udf10 \u2692 \u26aa\ufe0f\u27a1\ufe0f PyJWT \u2795 \u2795 \ud83d\udc48 \ud83d\udc46 \ud83d\udcaa \ud83d\udcaa \u23ea \ud83d\udd50\u2754 \ud83c\udfd7 \ud83d\udee0\ufe0f \u23ee\ufe0f \ud83c\udf8f \ud83e\uddf0.</p>"},{"location":"tutorial/security/oauth2-jwt/#_2","title":"\ud83d\udd10 \ud83d\udd01","text":"<p>\"\ud83d\udd01\" \u26d3 \ud83c\udfed \ud83c\udf9a (\ud83d\udd10 \ud83d\udc49 \ud83d\udcbc) \ud83d\udd18 \ud83d\udd01 \ud83d\udd22 (\ud83c\udfbb) \ud83d\udc48 \ud83d\udc40 \ud83d\udc96 \ud83d\ude43.</p> <p>\ud83d\udd50\u2754 \ud83d\udc46 \ud83d\udeb6\u200d\u2640\ufe0f \u26ab\ufe0f\u2754 \ud83c\udf8f \ud83c\udf9a (\u26ab\ufe0f\u2754 \ud83c\udf8f \ud83d\udd10) \ud83d\udc46 \ud83e\udd1a \u26ab\ufe0f\u2754 \ud83c\udf8f \ud83d\ude43.</p> <p>\u270b\ufe0f \ud83d\udc46 \ud83d\udeab\ud83d\udd1c \ud83d\udddc \u26aa\ufe0f\u27a1\ufe0f \ud83d\ude43 \ud83d\udd19 \ud83d\udd10.</p>"},{"location":"tutorial/security/oauth2-jwt/#_3","title":"\u26ab\ufe0f\u2754 \u2699\ufe0f \ud83d\udd10 \ud83d\udd01","text":"<p>\ud83d\udea5 \ud83d\udc46 \ud83d\udcbd \ud83d\udcce, \ud83e\uddd9\u200d\u2640 \ud83c\udfc6 \ud83d\udeab \u2714\ufe0f \ud83d\udc46 \ud83d\udc69\u200d\ud83d\udcbb' \ud83d\udd22 \ud83d\udd10, \ud83d\udd74#\ufe0f\u20e3.</p> <p>, \ud83e\uddd9\u200d\u2640 \ud83c\udfc6 \ud83d\udeab \ud83d\udcaa \ud83d\udd04 \u2699\ufe0f \ud83d\udc48 \ud83d\udd10 \u27951\ufe0f\u20e3 \u2699\ufe0f (\ud83d\udcda \ud83d\udc69\u200d\ud83d\udcbb \u2699\ufe0f \ud83c\udf8f \ud83d\udd10 \ud83c\udf10, \ud83d\udc49 \ud83d\udd1c \u26a0).</p>"},{"location":"tutorial/security/oauth2-jwt/#passlib","title":"\u274e <code>passlib</code>","text":"<p>\ud83c\uddf8\ud83c\uddf2 \ud83d\udc51 \ud83d\udc0d \ud83d\udce6 \ud83c\udf75 \ud83d\udd10#\ufe0f\u20e3.</p> <p>\u26ab\ufe0f \ud83d\udc15\u200d\ud83e\uddba \ud83d\udcda \ud83d\udd10 \ud83d\udd01 \ud83d\udcca &amp; \ud83d\ude99 \ud83d\udc77 \u23ee\ufe0f \ud83d\udc6b.</p> <p>\ud83d\udc4d \ud83d\udcca \"\ud83d\udc21\".</p> <p>, \u274e \ud83c\uddf8\ud83c\uddf2 \u23ee\ufe0f \ud83d\udc21:</p> <pre><code>$ pip install \"passlib[bcrypt]\"\n\n---&gt; 100%\n</code></pre> <p>Tip</p> <p>\u23ee\ufe0f <code>passlib</code>, \ud83d\udc46 \ud83d\udcaa \ud83d\udd17 \u26ab\ufe0f \ud83d\udcaa \u270d \ud83d\udd10 \u270d \u2733, \ud83c\udffa \ud83d\udc82\u200d\u2642 \ud83d\udd0c-\u2696\ufe0f \ud83d\udcda \ud83c\udf8f.</p> <p>, \ud83d\udc46 \ud83d\udd1c \ud83d\udcaa, \ud83d\uddbc, \ud83d\udcb0 \ud83c\udf8f \ud83d\udcca \u26aa\ufe0f\u27a1\ufe0f \u2733 \ud83c\ude38 \ud83d\udcbd \u23ee\ufe0f ReadyAPI \ud83c\ude38. \u2696\ufe0f \ud83d\udcc9 \u2194 \u2733 \ud83c\ude38 \u2699\ufe0f \ud83c\udf8f \ud83d\udcbd.</p> <p>&amp; \ud83d\udc46 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd1c \ud83d\udcaa \ud83d\udcb3 \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc46 \u2733 \ud83d\udcf1 \u2696\ufe0f \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc46 ReadyAPI \ud83d\udcf1, \ud83c\udf8f \ud83d\udd70.</p>"},{"location":"tutorial/security/oauth2-jwt/#_4","title":"#\ufe0f\u20e3 &amp; \u2714 \ud83d\udd10","text":"<p>\ud83d\uddc4 \ud83e\uddf0 \ud83d\udc65 \ud83d\udcaa \u26aa\ufe0f\u27a1\ufe0f <code>passlib</code>.</p> <p>\u270d \ud83c\uddf8\ud83c\uddf2 \"\ud83d\udd11\". \ud83d\udc49 \u26ab\ufe0f\u2754 \ud83d\udd1c \u2699\ufe0f #\ufe0f\u20e3 &amp; \u2714 \ud83d\udd10.</p> <p>Tip</p> <p>\ud83c\uddf8\ud83c\uddf2 \ud83d\udd11 \u2714\ufe0f \ud83d\udee0\ufe0f \u2699\ufe0f \ud83c\udf8f \ud83d\udd01 \ud83d\udcca, \ud83d\udd0c \ud83d\ude22 \ud83d\udddd \ud83d\udd50 \ud83d\udd74 \u2714 \u2714 \ud83d\udc6b, \u2652\ufe0f.</p> <p>\ud83d\uddbc, \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \u26ab\ufe0f \u270d &amp; \u2714 \ud83d\udd10 \ud83c\udfd7 \u27951\ufe0f\u20e3 \u2699\ufe0f (\ud83d\udc96 \u2733) \u270b\ufe0f #\ufe0f\u20e3 \ud83d\ude46 \ud83c\udd95 \ud83d\udd10 \u23ee\ufe0f \ud83c\udf8f \ud83d\udcca \ud83d\udc96 \ud83d\udc21.</p> <p>&amp; \ud83d\udd17 \u23ee\ufe0f \ud83c\udf10 \ud83d\udc6b \ud83c\udf8f \ud83d\udd70.</p> <p>\u270d \ud83d\ude99 \ud83d\udd22 #\ufe0f\u20e3 \ud83d\udd10 \ud83d\udc5f \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc69\u200d\ud83d\udcbb.</p> <p>&amp; \u27951\ufe0f\u20e3 \ud83d\ude99 \u2714 \ud83d\udea5 \ud83d\udce8 \ud83d\udd10 \ud83c\udfcf #\ufe0f\u20e3 \ud83c\udfea.</p> <p>&amp; \u27951\ufe0f\u20e3 1\ufe0f\u20e3 \ud83d\udd13 &amp; \ud83d\udce8 \ud83d\udc69\u200d\ud83d\udcbb.</p> Python 3.8+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(current_user: User = Depends(get_current_active_user)):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(current_user: User = Depends(get_current_active_user)):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <p>Note</p> <p>\ud83d\udea5 \ud83d\udc46 \u2705 \ud83c\udd95 (\u274c) \ud83d\udcbd <code>fake_users_db</code>, \ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \u2754 #\ufe0f\u20e3 \ud83d\udd10 \ud83d\udc40 \ud83d\udc96 \ud83d\udd1c: <code>\"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\"</code>.</p>"},{"location":"tutorial/security/oauth2-jwt/#_5","title":"\ud83c\udf75 \ud83e\udd59 \ud83e\udd1d","text":"<p>\ud83d\uddc4 \ud83d\udd79 \u274e.</p> <p>\u270d \ud83c\udfb2 \u3299 \ud83d\udd11 \ud83d\udc48 \ud83d\udd1c \u2699\ufe0f \ud83d\uded1 \ud83e\udd59 \ud83e\udd1d.</p> <p>\ud83c\udfd7 \ud83d\udd10 \ud83c\udfb2 \u3299 \ud83d\udd11 \u2699\ufe0f \ud83d\udccb:</p> <pre><code>$ openssl rand -hex 32\n\n09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\n</code></pre> <p>&amp; \ud83d\udcc1 \ud83d\udd22 \ud83d\udd22 <code>SECRET_KEY</code> (\ud83d\udeab \u2699\ufe0f 1\ufe0f\u20e3 \ud83d\uddbc).</p> <p>\u270d \ud83d\udd22 <code>ALGORITHM</code> \u23ee\ufe0f \ud83d\udcca \u2699\ufe0f \ud83d\uded1 \ud83e\udd59 \ud83e\udd1d &amp; \u2692 \u26ab\ufe0f <code>\"HS256\"</code>.</p> <p>\u270d \ud83d\udd22 \ud83d\udc54 \ud83e\udd1d.</p> <p>\ud83d\udd2c Pydantic \ud83c\udff7 \ud83d\udc48 \ud83d\udd1c \u2699\ufe0f \ud83e\udd1d \ud83d\udd17 \ud83d\udce8.</p> <p>\u270d \ud83d\ude99 \ud83d\udd22 \ud83c\udfd7 \ud83c\udd95 \ud83d\udd10 \ud83e\udd1d.</p> Python 3.8+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(current_user: User = Depends(get_current_active_user)):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(current_user: User = Depends(get_current_active_user)):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre>"},{"location":"tutorial/security/oauth2-jwt/#i","title":"\u2139 \ud83d\udd17","text":"<p>\u2139 <code>get_current_user</code> \ud83d\udce8 \ud83c\udf8f \ud83e\udd1d \u23ed, \u270b\ufe0f \ud83d\udc49 \ud83d\udd70, \u2699\ufe0f \ud83e\udd59 \ud83e\udd1d.</p> <p>\ud83d\udd23 \ud83d\udce8 \ud83e\udd1d, \u2714 \u26ab\ufe0f, &amp; \ud83d\udce8 \u23ee\ufe0f \ud83d\udc69\u200d\ud83d\udcbb.</p> <p>\ud83d\udea5 \ud83e\udd1d \u274c, \ud83d\udce8 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \u274c \u25b6\ufe0f\ufe0f \u2196\ufe0f.</p> Python 3.8+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(current_user: User = Depends(get_current_active_user)):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(current_user: User = Depends(get_current_active_user)):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre>"},{"location":"tutorial/security/oauth2-jwt/#i-token","title":"\u2139 <code>/token</code> \u27a1 \ud83d\udee0\ufe0f","text":"<p>\u270d <code>timedelta</code> \u23ee\ufe0f \ud83d\udc54 \ud83d\udd70 \ud83e\udd1d.</p> <p>\u270d \ud83c\udfb0 \ud83e\udd59 \ud83d\udd10 \ud83e\udd1d &amp; \ud83d\udce8 \u26ab\ufe0f.</p> Python 3.8+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(current_user: User = Depends(get_current_active_user)):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <pre><code>from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom typing_extensions import Annotated\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: str | None = None\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = ReadyAPI()\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -&gt; Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")\n\n\n@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(current_user: User = Depends(get_current_active_user)):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre>"},{"location":"tutorial/security/oauth2-jwt/#i-sub","title":"\ud83d\udce1 \u2139 \ud83d\udd03 \ud83e\udd59 \"\ud83d\udcc4\" <code>sub</code>","text":"<p>\ud83e\udd59 \ud83d\udd27 \ud83d\udcac \ud83d\udc48 \ud83d\udce4 \ud83d\udd11 <code>sub</code>, \u23ee\ufe0f \ud83d\udcc4 \ud83e\udd1d.</p> <p>\u26ab\ufe0f \ud83d\udce6 \u2699\ufe0f \u26ab\ufe0f, \u270b\ufe0f \ud83d\udc48 \ud83c\udf10\u2754 \ud83d\udc46 \ud83d\udd1c \ud83d\udeae \ud83d\udc69\u200d\ud83d\udcbb \ud83c\udd94, \ud83d\udc65 \u2699\ufe0f \u26ab\ufe0f \ud83d\udce5.</p> <p>\ud83e\udd59 5\ufe0f\u20e3\ud83d\udcc6 \u2699\ufe0f \ud83c\udf8f \ud83d\udc5c \u2196\ufe0f \u26aa\ufe0f\u27a1\ufe0f \u2696 \ud83d\udc69\u200d\ud83d\udcbb &amp; \ud83e\udd1d \ud83d\udc6b \ud83c\udfad \ud83d\udee0\ufe0f \ud83d\udd17 \ud83d\udd1b \ud83d\udc46 \ud83d\udee0\ufe0f.</p> <p>\ud83d\uddbc, \ud83d\udc46 \ud83d\udcaa \ud83d\udd2c \"\ud83d\ude98\" \u2696\ufe0f \"\ud83d\udcf0 \ud83c\udfe4\".</p> <p>\u2934\ufe0f \ud83d\udc46 \ud83d\udcaa \ud83d\udeae \u2714 \ud83d\udd03 \ud83d\udc48 \ud83d\udc68\u200d\ud83d\udcbc, \ud83d\udc96 \"\ud83d\udcbe\" (\ud83d\ude98) \u2696\ufe0f \"\u270d\" (\ud83d\udcf0).</p> <p>&amp; \u2934\ufe0f, \ud83d\udc46 \ud83d\udcaa \ud83e\udd1d \ud83d\udc48 \ud83e\udd59 \ud83e\udd1d \ud83d\udc69\u200d\ud83d\udcbb (\u2696\ufe0f \ud83e\udd16), &amp; \ud83d\udc6b \ud83d\udcaa \u2699\ufe0f \u26ab\ufe0f \ud83c\udfad \ud83d\udc48 \ud83c\udfaf (\ud83d\udcbe \ud83d\ude98, \u2696\ufe0f \u270d \ud83d\udcf0 \ud83c\udfe4) \ud83c\udf75 \ud83d\udc86\u200d\u2642 \u2714\ufe0f \ud83c\udfe7, \u23ee\ufe0f \ud83e\udd59 \ud83e\udd1d \ud83d\udc46 \ud83d\udee0\ufe0f \ud83c\udfd7 \ud83d\udc48.</p> <p>\u2699\ufe0f \ud83d\udc6b \ud83d\udcad, \ud83e\udd59 \ud83d\udcaa \u2699\ufe0f \ud83c\udf0c \ud83c\udf16 \ud83e\udd13 \ud83d\ude10.</p> <p>\ud83d\udcda \ud83d\udcbc, \ud83d\udcda \ud83d\udc48 \ud83d\udc68\u200d\ud83d\udcbc \ud83d\udcaa \u2714\ufe0f \ud83c\udf8f \ud83c\udd94, \u27a1\ufe0f \ud83d\udcac <code>foo</code> (\ud83d\udc69\u200d\ud83d\udcbb <code>foo</code>, \ud83d\ude98 <code>foo</code>, &amp; \ud83d\udcf0 \ud83c\udfe4 <code>foo</code>).</p> <p>, \u274e \ud83c\udd94 \ud83d\udca5, \ud83d\udd50\u2754 \ud83c\udfd7 \ud83e\udd59 \ud83e\udd1d \ud83d\udc69\u200d\ud83d\udcbb, \ud83d\udc46 \ud83d\udcaa \ud83d\udd21 \ud83d\udcb2 <code>sub</code> \ud83d\udd11, \u2705 \u23ee\ufe0f <code>username:</code>. , \ud83d\udc49 \ud83d\uddbc, \ud83d\udcb2 <code>sub</code> \ud83d\udcaa \u2714\ufe0f: <code>username:johndoe</code>.</p> <p>\u26a0 \ud83d\udc5c \u2714\ufe0f \ud83e\udd2f \ud83d\udc48 <code>sub</code> \ud83d\udd11 \ud83d\udd1c \u2714\ufe0f \ud83d\ude0d \ud83c\udd94 \ud83e\udd2d \ud83c\udf82 \ud83c\ude38, &amp; \u26ab\ufe0f \ud83d\udd1c \ud83c\udfbb.</p>"},{"location":"tutorial/security/oauth2-jwt/#_6","title":"\u2705 \u26ab\ufe0f","text":"<p>\ud83c\udfc3 \ud83d\udcbd &amp; \ud83d\udeb6 \ud83e\ude7a: http://127.0.0.1:8000/docs.</p> <p>\ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd22 \ud83d\udc96:</p> <p></p> <p>\u2714 \ud83c\ude38 \ud83c\udf8f \ud83c\udf0c \u23ed.</p> <p>\u2699\ufe0f \ud83c\udf93:</p> <p>\ud83c\udd94: <code>johndoe</code> \ud83d\udd10: <code>secret</code></p> <p>Check</p> <p>\ud83d\udc40 \ud83d\udc48 \ud83d\udd73 \ud83d\udcdf \ud83d\udd22 \ud83d\udd10 \"<code>secret</code>\", \ud83d\udc65 \ud83d\udd74 \u2714\ufe0f #\ufe0f\u20e3 \u23ec.</p> <p></p> <p>\ud83e\udd19 \ud83d\udd17 <code>/users/me/</code>, \ud83d\udc46 \ud83d\udd1c \ud83e\udd1a \ud83d\udce8:</p> <pre><code>{\n  \"username\": \"johndoe\",\n  \"email\": \"johndoe@example.com\",\n  \"full_name\": \"John Doe\",\n  \"disabled\": false\n}\n</code></pre> <p></p> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udcc2 \ud83d\udc69\u200d\ud83d\udcbb \ud83e\uddf0, \ud83d\udc46 \ud83d\udcaa \ud83d\udc40 \u2754 \ud83d\udcca \ud83d\udce8 \ud83d\udd74 \ud83d\udd0c \ud83e\udd1d, \ud83d\udd10 \ud83d\udd74 \ud83d\udce8 \ud83e\udd47 \ud83d\udce8 \ud83d\udd13 \ud83d\udc69\u200d\ud83d\udcbb &amp; \ud83e\udd1a \ud83d\udc48 \ud83d\udd10 \ud83e\udd1d, \u270b\ufe0f \ud83d\udeab \u23ee\ufe0f:</p> <p></p> <p>Note</p> <p>\ud83d\udc40 \ud83c\udf9a <code>Authorization</code>, \u23ee\ufe0f \ud83d\udcb2 \ud83d\udc48 \u25b6\ufe0f \u23ee\ufe0f <code>Bearer</code>.</p>"},{"location":"tutorial/security/oauth2-jwt/#scopes","title":"\ud83c\udfe7 \u2699\ufe0f \u23ee\ufe0f <code>scopes</code>","text":"<p>Oauth2\ufe0f\u20e3 \u2714\ufe0f \ud83d\udd11 \"\u2194\".</p> <p>\ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83d\udc6b \ud83d\udeae \ud83c\udfaf \u2692 \u2714 \ud83e\udd59 \ud83e\udd1d.</p> <p>\u2934\ufe0f \ud83d\udc46 \ud83d\udcaa \ud83e\udd1d \ud83d\udc49 \ud83e\udd1d \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd17 \u2696\ufe0f \ud83e\udd49 \ud83e\udd73, \ud83d\udd17 \u23ee\ufe0f \ud83d\udc46 \ud83d\udee0\ufe0f \u23ee\ufe0f \u2692 \ud83d\udeab.</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udca1 \u2754 \u2699\ufe0f \ud83d\udc6b &amp; \u2754 \ud83d\udc6b \ud83d\udee0\ufe0f \ud83d\udd18 ReadyAPI \u23ea \ud83c\udfe7 \ud83d\udc69\u200d\ud83d\udcbb \ud83e\uddae.</p>"},{"location":"tutorial/security/oauth2-jwt/#_7","title":"\ud83c\udf03","text":"<p>\u23ee\ufe0f \u26ab\ufe0f\u2754 \ud83d\udc46 \u2714\ufe0f \ud83d\udc40 \ud83c\udd99 \ud83d\udd1c, \ud83d\udc46 \ud83d\udcaa \u2692 \ud83c\udd99 \ud83d\udd10 ReadyAPI \ud83c\ude38 \u2699\ufe0f \ud83d\udc29 \ud83d\udc96 Oauth2\ufe0f\u20e3 &amp; \ud83e\udd59.</p> <p>\ud83c\udf16 \ud83d\ude46 \ud83d\udee0\ufe0f \ud83d\ude9a \ud83d\udc82\u200d\u2642 \u25b6\ufe0f\ufe0f \ud83d\udc4d \ud83c\udfd7 \ud83d\udcc4 \ud83d\udd1c.</p> <p>\ud83d\udcda \ud83d\udce6 \ud83d\udc48 \ud83d\udcc9 \u26ab\ufe0f \ud83d\udcda \u2714\ufe0f \u2692 \ud83d\udcda \u26a0 \u23ee\ufe0f \ud83d\udcbd \ud83c\udff7, \ud83d\udcbd, &amp; \ud83d\udcaa \u2692. &amp; \ud83d\udc49 \ud83d\udce6 \ud83d\udc48 \ud83d\udcc9 \ud83d\udc5c \ud83d\udc81\u200d\u2642\ufe0f \ud83c\udf05 \ud83e\udd19 \u2714\ufe0f \ud83d\udc82\u200d\u2642 \u26a0 \ud83d\udd18.</p> <p>ReadyAPI \ud83d\udeab \u2692 \ud83d\ude46 \u26a0 \u23ee\ufe0f \ud83d\ude46 \ud83d\udcbd, \ud83d\udcbd \ud83c\udff7 \u2696\ufe0f \ud83e\uddf0.</p> <p>\u26ab\ufe0f \ud83e\udd1d \ud83d\udc46 \ud83c\udf10 \ud83d\udcaa \u2692 \ud83d\udd50 \ud83d\udc48 \ud83d\udc56 \ud83d\udc46 \ud83c\udfd7 \ud83c\udfc6.</p> <p>&amp; \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f \ud83d\udd17 \ud83d\udcda \ud83d\udc4d \ud83d\udea7 &amp; \ud83d\udece \u2699\ufe0f \ud83d\udce6 \ud83d\udc96 <code>passlib</code> &amp; <code>python-jose</code>, \u21a9\ufe0f ReadyAPI \ud83d\udeab \ud83d\ude9a \ud83d\ude46 \ud83c\udfd7 \ud83d\udee0\ufe0f \ud83d\udee0\ufe0f \ud83d\udd22 \ud83d\udce6.</p> <p>\u270b\ufe0f \u26ab\ufe0f \ud83d\ude9a \ud83d\udc46 \ud83e\uddf0 \ud83d\udcc9 \ud83d\udee0\ufe0f \ud83c\udf05 \ud83d\udcaa \ud83c\udf75 \ud83c\udfaf \ud83d\udcaa, \u2696, \u2696\ufe0f \ud83d\udc82\u200d\u2642.</p> <p>&amp; \ud83d\udc46 \ud83d\udcaa \u2699\ufe0f &amp; \ud83d\udee0\ufe0f \ud83d\udd10, \ud83d\udc29 \ud83d\udee0\ufe0f, \ud83d\udc96 Oauth2\ufe0f\u20e3 \ud83d\udcf6 \ud83d\ude45 \ud83c\udf0c.</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83d\udca1 \ud83c\udf05 \ud83c\udfe7 \ud83d\udc69\u200d\ud83d\udcbb \ud83e\uddae \ud83d\udd03 \u2754 \u2699\ufe0f Oauth2\ufe0f\u20e3 \"\u2194\", \ud83c\udf16 \ud83d\udc4c-\ud83e\uddfd \u2714 \u2699\ufe0f, \ud83d\udcc4 \ud83d\udc6b \ud83c\udf8f \ud83d\udc29. Oauth2\ufe0f\u20e3 \u23ee\ufe0f \u2194 \ud83d\udee0\ufe0f \u2699\ufe0f \ud83d\udcda \ud83e\udd8f \ud83e\udd1d \ud83d\udc15\u200d\ud83e\uddba, \ud83d\udc96 \ud83d\udc71\ud83d\udcd4, \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d, \ud83d\udcc2, \ud83e\udd38\u200d\u2642, \ud83d\udc71\ud83d\udcd4, \u2652\ufe0f. \u2714 \ud83e\udd49 \ud83e\udd73 \ud83c\ude38 \ud83d\udd17 \u23ee\ufe0f \ud83d\udc6b \ud83d\udd17 \ud83d\udd1b \ud83d\udc68\u200d\ud83d\udcbc \ud83d\udc6b \ud83d\udc69\u200d\ud83d\udcbb.</p>"},{"location":"tutorial/security/simple-oauth2/","title":"\ud83d\ude45 Oauth2\ufe0f\u20e3 \u23ee\ufe0f \ud83d\udd10 &amp; \ud83d\udce8","text":"<p>\ud83d\udd1c \u27a1\ufe0f \ud83c\udfd7 \u26aa\ufe0f\u27a1\ufe0f \u23ee\ufe0f \ud83d\udcc3 &amp; \ud83d\udeae \u274c \ud83c\udf55 \u2714\ufe0f \ud83c\udfc1 \ud83d\udc82\u200d\u2642 \ud83d\udca7.</p>"},{"location":"tutorial/security/simple-oauth2/#username-password","title":"\ud83e\udd1a <code>username</code> &amp; <code>password</code>","text":"<p>\ud83d\udc65 \ud83d\udd1c \u2699\ufe0f ReadyAPI \ud83d\udc82\u200d\u2642 \ud83d\ude99 \ud83e\udd1a <code>username</code> &amp; <code>password</code>.</p> <p>Oauth2\ufe0f\u20e3 \u2714 \ud83d\udc48 \ud83d\udd50\u2754 \u2699\ufe0f \"\ud83d\udd10 \ud83d\udca7\" (\ud83d\udc48 \ud83d\udc65 \u2699\ufe0f) \ud83d\udc69\u200d\ud83d\udcbb/\ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd1c \ud83d\udce8 <code>username</code> &amp; <code>password</code> \ud83c\udfd1 \ud83d\udce8 \ud83d\udcbd.</p> <p>&amp; \ud83d\udd0c \ud83d\udcac \ud83d\udc48 \ud83c\udfd1 \u2714\ufe0f \ud83c\udf1f \ud83d\udc96 \ud83d\udc48. <code>user-name</code> \u2696\ufe0f <code>email</code> \ud83d\udeab\ud83d\udd1c \ud83d\udc77.</p> <p>\u270b\ufe0f \ud83d\udeab \ud83d\ude1f, \ud83d\udc46 \ud83d\udcaa \ud83c\udfa6 \u26ab\ufe0f \ud83d\udc46 \ud83c\udf8b \ud83d\udc46 \ud83c\udfc1 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd78.</p> <p>&amp; \ud83d\udc46 \ud83d\udcbd \ud83c\udff7 \ud83d\udcaa \u2699\ufe0f \ud83d\ude46 \ud83c\udf8f \ud83d\udcdb \ud83d\udc46 \ud83d\udc9a.</p> <p>\u270b\ufe0f \ud83d\udcb3 \u27a1 \ud83d\udee0\ufe0f, \ud83d\udc65 \ud83d\udcaa \u2699\ufe0f \ud83d\udc49 \ud83d\udcdb \ud83d\udd17 \u23ee\ufe0f \ud83d\udd0c (&amp; \ud83d\udcaa, \ud83d\uddbc, \u2699\ufe0f \ud83d\udee0\ufe0f \ud83d\udee0\ufe0f \ud83e\uddfe \u2699\ufe0f).</p> <p>\ud83d\udd0c \ud83c\uddf5\ud83c\uddf8 \ud83d\udc48 <code>username</code> &amp; <code>password</code> \ud83d\udd1c \ud83d\udce8 \ud83d\udce8 \ud83d\udcbd (, \ud83d\ude45\u200d\u2642 \ud83c\udfbb \ud83d\udce5).</p>"},{"location":"tutorial/security/simple-oauth2/#scope","title":"<code>scope</code>","text":"<p>\ud83d\udd0c \ud83d\udcac \ud83d\udc48 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udcaa \ud83d\udce8 \u27951\ufe0f\u20e3 \ud83d\udce8 \ud83c\udfd1 \"<code>scope</code>\".</p> <p>\ud83d\udce8 \ud83c\udfd1 \ud83d\udcdb <code>scope</code> (\u2b50), \u270b\ufe0f \u26ab\ufe0f \ud83e\udd19 \ud83d\udccf \ud83c\udfbb \u23ee\ufe0f \"\u2194\" \ud83c\udf8f \ud83d\ude80.</p> <p>\ud83d\udd20 \"\u2194\" \ud83c\udfbb (\ud83c\udf75 \ud83d\ude80).</p> <p>\ud83d\udc6b \ud83d\udece \u2699\ufe0f \ud83d\udce3 \ud83c\udfaf \ud83d\udc82\u200d\u2642 \u2714, \ud83d\uddbc:</p> <ul> <li><code>users:read</code> \u2696\ufe0f <code>users:write</code> \u26a0 \ud83d\uddbc.</li> <li><code>instagram_basic</code> \u2699\ufe0f \ud83d\udc71\ud83d\udcd4 / \ud83d\udc71\ud83d\udcd4.</li> <li><code>https://www.googleapis.com/auth/drive</code> \u2699\ufe0f \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d.</li> </ul> <p>Info</p> <p>Oauth2\ufe0f\u20e3 \"\u2194\" \ud83c\udfbb \ud83d\udc48 \ud83d\udce3 \ud83c\udfaf \u2714 \u2714.</p> <p>\u26ab\ufe0f \ud83d\udeab \ud83e\udd14 \ud83d\udea5 \u26ab\ufe0f \u2714\ufe0f \ud83c\udf8f \ud83e\uddb9 \ud83d\udc96 <code>:</code> \u2696\ufe0f \ud83d\udea5 \u26ab\ufe0f \ud83d\udcdb.</p> <p>\ud83d\udc48 \u2139 \ud83d\udee0\ufe0f \ud83c\udfaf.</p> <p>Oauth2\ufe0f\u20e3 \ud83d\udc6b \ud83c\udfbb.</p>"},{"location":"tutorial/security/simple-oauth2/#username-password_1","title":"\ud83d\udcdf \ud83e\udd1a <code>username</code> &amp; <code>password</code>","text":"<p>\ud83d\udd1c \u27a1\ufe0f \u2699\ufe0f \ud83d\ude99 \ud83d\ude9a ReadyAPI \ud83c\udf75 \ud83d\udc49.</p>"},{"location":"tutorial/security/simple-oauth2/#oauth2passwordrequestform","title":"<code>OAuth2PasswordRequestForm</code>","text":"<p>\ud83e\udd47, \ud83d\uddc4 <code>OAuth2PasswordRequestForm</code>, &amp; \u2699\ufe0f \u26ab\ufe0f \ud83d\udd17 \u23ee\ufe0f <code>Depends</code> \u27a1 \ud83d\udee0\ufe0f <code>/token</code>:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom typing_extensions import Annotated\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre> <p><code>OAuth2PasswordRequestForm</code> \ud83c\udf93 \ud83d\udd17 \ud83d\udc48 \ud83d\udce3 \ud83d\udce8 \ud83d\udcaa \u23ee\ufe0f:</p> <ul> <li><code>username</code>.</li> <li><code>password</code>.</li> <li>\ud83d\udce6 <code>scope</code> \ud83c\udfd1 \ud83e\udd8f \ud83c\udfbb, \u270d \ud83c\udfbb \ud83c\udf8f \ud83d\ude80.</li> <li>\ud83d\udce6 <code>grant_type</code>.</li> </ul> <p>Tip</p> <p>Oauth2\ufe0f\u20e3 \ud83d\udd0c \ud83e\udd19 \ud83d\ude9a \ud83c\udfd1 <code>grant_type</code> \u23ee\ufe0f \ud83d\udd27 \ud83d\udcb2 <code>password</code>, \u270b\ufe0f <code>OAuth2PasswordRequestForm</code> \ud83d\udeab \ud83d\udee0\ufe0f \u26ab\ufe0f.</p> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udcaa \ud83d\udee0\ufe0f \u26ab\ufe0f, \u2699\ufe0f <code>OAuth2PasswordRequestFormStrict</code> \u21a9\ufe0f <code>OAuth2PasswordRequestForm</code>.</p> <ul> <li>\ud83d\udce6 <code>client_id</code> (\ud83d\udc65 \ud83d\udeab \ud83d\udcaa \u26ab\ufe0f \ud83d\udc46 \ud83d\uddbc).</li> <li>\ud83d\udce6 <code>client_secret</code> (\ud83d\udc65 \ud83d\udeab \ud83d\udcaa \u26ab\ufe0f \ud83d\udc46 \ud83d\uddbc).</li> </ul> <p>Info</p> <p><code>OAuth2PasswordRequestForm</code> \ud83d\udeab \ud83c\udf81 \ud83c\udf93 ReadyAPI <code>OAuth2PasswordBearer</code>.</p> <p><code>OAuth2PasswordBearer</code> \u2692 ReadyAPI \ud83d\udcad \ud83d\udc48 \u26ab\ufe0f \ud83d\udc82\u200d\u2642 \u2696. \u26ab\ufe0f \ud83d\udeae \ud83d\udc48 \ud83c\udf0c \ud83d\uddc4.</p> <p>\u270b\ufe0f <code>OAuth2PasswordRequestForm</code> \ud83c\udf93 \ud83d\udd17 \ud83d\udc48 \ud83d\udc46 \ud83d\udcaa \u2714\ufe0f \u270d \ud83d\udc46, \u2696\ufe0f \ud83d\udc46 \ud83d\udcaa \u2714\ufe0f \ud83d\udce3 <code>Form</code> \ud83d\udd22 \ud83d\udd17.</p> <p>\u270b\ufe0f \u26ab\ufe0f \u26a0 \u2699\ufe0f \ud83d\udcbc, \u26ab\ufe0f \ud83d\ude9a ReadyAPI \ud83d\udd17, \u2692 \u26ab\ufe0f \u23e9.</p>"},{"location":"tutorial/security/simple-oauth2/#_1","title":"\u2699\ufe0f \ud83d\udce8 \ud83d\udcbd","text":"<p>Tip</p> <p>\ud83d\udc50 \ud83d\udd17 \ud83c\udf93 <code>OAuth2PasswordRequestForm</code> \ud83c\udfc6 \ud83d\udeab \u2714\ufe0f \ud83d\udd22 <code>scope</code> \u23ee\ufe0f \ud83d\udccf \ud83c\udfbb \ud83d\udc7d \ud83d\ude80, \u21a9\ufe0f, \u26ab\ufe0f \ud83d\udd1c \u2714\ufe0f <code>scopes</code> \ud83d\udd22 \u23ee\ufe0f \u2611 \ud83d\udcc7 \ud83c\udfbb \ud83d\udd20 \u2194 \ud83d\udce8.</p> <p>\ud83d\udc65 \ud83d\udeab \u2699\ufe0f <code>scopes</code> \ud83d\udc49 \ud83d\uddbc, \u270b\ufe0f \ud83d\udee0\ufe0f \ud83d\udce4 \ud83d\udea5 \ud83d\udc46 \ud83d\udcaa \u26ab\ufe0f.</p> <p>\ud83d\udd1c, \ud83e\udd1a \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udcca \u26aa\ufe0f\u27a1\ufe0f (\u274c) \ud83d\udcbd, \u2699\ufe0f <code>username</code> \u26aa\ufe0f\u27a1\ufe0f \ud83d\udce8 \ud83c\udfd1.</p> <p>\ud83d\udea5 \ud83d\udce4 \ud83d\ude45\u200d\u2642 \u2705 \ud83d\udc69\u200d\ud83d\udcbb, \ud83d\udc65 \ud83d\udce8 \u274c \ud83d\udcac \"\u274c \ud83c\udd94 \u2696\ufe0f \ud83d\udd10\".</p> <p>\u274c, \ud83d\udc65 \u2699\ufe0f \u26a0 <code>HTTPException</code>:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom typing_extensions import Annotated\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre>"},{"location":"tutorial/security/simple-oauth2/#_2","title":"\u2705 \ud83d\udd10","text":"<p>\ud83d\udc49 \u261d \ud83d\udc65 \u2714\ufe0f \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udcca \u26aa\ufe0f\u27a1\ufe0f \ud83d\udc46 \ud83d\udcbd, \u270b\ufe0f \ud83d\udc65 \ud83d\udeab \u2705 \ud83d\udd10.</p> <p>\u27a1\ufe0f \ud83d\udeae \ud83d\udc48 \ud83d\udcbd Pydantic <code>UserInDB</code> \ud83c\udff7 \ud83e\udd47.</p> <p>\ud83d\udc46 \ud83d\udd1c \ud83d\ude45 \ud83d\udd8a \ud83d\udd22 \ud83d\udd10,, \ud83d\udc65 \ud83d\udd1c \u2699\ufe0f (\u274c) \ud83d\udd10 \ud83d\udd01 \u2699\ufe0f.</p> <p>\ud83d\udea5 \ud83d\udd10 \ud83d\udeab \ud83c\udfcf, \ud83d\udc65 \ud83d\udce8 \ud83c\udf8f \u274c.</p>"},{"location":"tutorial/security/simple-oauth2/#_3","title":"\ud83d\udd10 \ud83d\udd01","text":"<p>\"\ud83d\udd01\" \u26d3: \ud83c\udfed \ud83c\udf9a (\ud83d\udd10 \ud83d\udc49 \ud83d\udcbc) \ud83d\udd18 \ud83d\udd01 \ud83d\udd22 (\ud83c\udfbb) \ud83d\udc48 \ud83d\udc40 \ud83d\udc96 \ud83d\ude43.</p> <p>\ud83d\udd50\u2754 \ud83d\udc46 \ud83d\udeb6\u200d\u2640\ufe0f \u26ab\ufe0f\u2754 \ud83c\udf8f \ud83c\udf9a (\u26ab\ufe0f\u2754 \ud83c\udf8f \ud83d\udd10) \ud83d\udc46 \ud83e\udd1a \u26ab\ufe0f\u2754 \ud83c\udf8f \ud83d\ude43.</p> <p>\u270b\ufe0f \ud83d\udc46 \ud83d\udeab\ud83d\udd1c \ud83d\udddc \u26aa\ufe0f\u27a1\ufe0f \ud83d\ude43 \ud83d\udd19 \ud83d\udd10.</p>"},{"location":"tutorial/security/simple-oauth2/#_4","title":"\u26ab\ufe0f\u2754 \u2699\ufe0f \ud83d\udd10 \ud83d\udd01","text":"<p>\ud83d\udea5 \ud83d\udc46 \ud83d\udcbd \ud83d\udcce, \ud83e\uddd9\u200d\u2640 \ud83c\udfc6 \ud83d\udeab \u2714\ufe0f \ud83d\udc46 \ud83d\udc69\u200d\ud83d\udcbb' \ud83d\udd22 \ud83d\udd10, \ud83d\udd74#\ufe0f\u20e3.</p> <p>, \ud83e\uddd9\u200d\u2640 \ud83c\udfc6 \ud83d\udeab \ud83d\udcaa \ud83d\udd04 \u2699\ufe0f \ud83d\udc48 \ud83c\udf8f \ud83d\udd10 \u27951\ufe0f\u20e3 \u2699\ufe0f (\ud83d\udcda \ud83d\udc69\u200d\ud83d\udcbb \u2699\ufe0f \ud83c\udf8f \ud83d\udd10 \ud83c\udf10, \ud83d\udc49 \ud83d\udd1c \u26a0).</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom typing_extensions import Annotated\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre>"},{"location":"tutorial/security/simple-oauth2/#user_dict","title":"\ud83d\udd03 <code>**user_dict</code>","text":"<p><code>UserInDB(**user_dict)</code> \u26d3:</p> <p>\ud83d\udeb6\u200d\u2640\ufe0f \ud83d\udd11 &amp; \ud83d\udcb2 <code>user_dict</code> \ud83d\udd17 \ud83d\udd11-\ud83d\udcb2 \u274c, \ud83c\udf13:</p> <pre><code>UserInDB(\n    username = user_dict[\"username\"],\n    email = user_dict[\"email\"],\n    full_name = user_dict[\"full_name\"],\n    disabled = user_dict[\"disabled\"],\n    hashed_password = user_dict[\"hashed_password\"],\n)\n</code></pre> <p>Info</p> <p>\ud83c\udf05 \ud83c\udfc1 \ud83d\udd11 <code>**\ud83d\udc69\u200d\ud83d\udcbb_ #\ufe0f\u20e3</code> \u2705 \ud83d\udd19 \ud83e\uddfe \u2795 \ud83c\udff7.</p>"},{"location":"tutorial/security/simple-oauth2/#_5","title":"\ud83d\udce8 \ud83e\udd1d","text":"<p>\ud83d\udce8 <code>token</code> \ud83d\udd17 \ud83d\udd1c \ud83c\udfbb \ud83c\udf9a.</p> <p>\u26ab\ufe0f \ud83d\udd1c \u2714\ufe0f <code>token_type</code>. \ud83d\udc46 \ud83d\udcbc, \ud83d\udc65 \u2699\ufe0f \"\ud83d\udce8\" \ud83e\udd1d, \ud83e\udd1d \ud83c\udd8e \ud83d\udd1c \"<code>bearer</code>\".</p> <p>&amp; \u26ab\ufe0f \ud83d\udd1c \u2714\ufe0f <code>access_token</code>, \u23ee\ufe0f \ud83c\udfbb \u2697 \ud83d\udc46 \ud83d\udd10 \ud83e\udd1d.</p> <p>\ud83d\udc49 \ud83d\ude45 \ud83d\uddbc, \ud83d\udc65 \ud83d\udd1c \ud83c\udf55 \ud83d\ude1f &amp; \ud83d\udce8 \ud83c\udf8f <code>username</code> \ud83e\udd1d.</p> <p>Tip</p> <p>\u23ed \ud83d\udcc3, \ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \ud83c\udfb0 \ud83d\udd10 \ud83d\udee0\ufe0f, \u23ee\ufe0f \ud83d\udd10 #\ufe0f\u20e3 &amp; \ud83e\udd59 \ud83e\udd1d.</p> <p>\u270b\ufe0f \ud83d\udd1c, \u27a1\ufe0f \ud83c\udfaf \ud83d\udd1b \ud83c\udfaf \u2139 \ud83d\udc65 \ud83d\udcaa.</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom typing_extensions import Annotated\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre> <p>Tip</p> <p>\ud83d\udd0c, \ud83d\udc46 \ud83d\udd1c \ud83d\udce8 \ud83c\udfbb \u23ee\ufe0f <code>access_token</code> &amp; <code>token_type</code>, \ud83c\udf8f \ud83d\udc49 \ud83d\uddbc.</p> <p>\ud83d\udc49 \ud83d\udd73 \ud83d\udc48 \ud83d\udc46 \u2714\ufe0f \ud83d\udc46 \ud83d\udc46 \ud83d\udcdf, &amp; \u2692 \ud83d\udcad \ud83d\udc46 \u2699\ufe0f \ud83d\udcda \ud83c\udfbb \ud83d\udd11.</p> <p>\u26ab\ufe0f \ud83c\udf16 \ud83d\udd74 \ud83d\udc5c \ud83d\udc48 \ud83d\udc46 \u2714\ufe0f \ud83d\udcad \u2611 \ud83d\udc46, \ud83d\udee0\ufe0f \u23ee\ufe0f \ud83d\udd27.</p> <p>\ud83c\udf82, ReadyAPI \ud83c\udf75 \u26ab\ufe0f \ud83d\udc46.</p>"},{"location":"tutorial/security/simple-oauth2/#i","title":"\u2139 \ud83d\udd17","text":"<p>\ud83d\udd1c \ud83d\udc65 \ud83d\udd1c \u2139 \ud83d\udc46 \ud83d\udd17.</p> <p>\ud83d\udc65 \ud83d\udc9a \ud83e\udd1a <code>current_user</code> \ud83d\udd74 \ud83d\udea5 \ud83d\udc49 \ud83d\udc69\u200d\ud83d\udcbb \ud83e\udd81.</p> <p>, \ud83d\udc65 \u270d \ud83c\udf16 \ud83d\udd17 <code>get_current_active_user</code> \ud83d\udc48 \ud83d\udd04 \u2699\ufe0f <code>get_current_user</code> \ud83d\udd17.</p> <p>\ud83d\udc6f\u200d\u2642\ufe0f \ud83d\udc49 \ud83d\udd17 \ud83d\udd1c \ud83d\udce8 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d \u274c \ud83d\udea5 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udeab \ud83d\udd00, \u2696\ufe0f \ud83d\udea5 \ud83d\udd15.</p> <p>, \ud83d\udc46 \ud83d\udd17, \ud83d\udc65 \ud83d\udd1c \ud83d\udd74 \ud83e\udd1a \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udea5 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udd00, \u2611 \ud83d\udd13, &amp; \ud83e\udd81:</p> Python 3.8+ - non-Annotated <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.9+Python 3.8+Python 3.10+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom typing_extensions import Annotated\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Depends, HTTPException, ReadyAPI, status\nfrom readyapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = ReadyAPI()\n\n\ndef fake_hash_password(password: str):\n    return \"fakehashed\" + password\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\n\nclass UserInDB(User):\n    hashed_password: str\n\n\ndef get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)\n\n\ndef fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n\n\nasync def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user\n\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n\n\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user\n</code></pre> <p>Info</p> <p>\ud83c\udf16 \ud83c\udf9a <code>WWW-Authenticate</code> \u23ee\ufe0f \ud83d\udcb2 <code>Bearer</code> \ud83d\udc65 \ud83d\udeec \ud83d\udce5 \ud83c\udf55 \ud83d\udd0c.</p> <p>\ud83d\ude46 \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d (\u274c) \ud83d\udc54 \ud83d\udcdf 4\ufe0f\u20e30\ufe0f\u20e31\ufe0f\u20e3 \"\u26d4\" \ud83e\udd14 \ud83d\udce8 <code>WWW-Authenticate</code> \ud83c\udf9a.</p> <p>\ud83d\udcbc \ud83d\udce8 \ud83e\udd1d (\ud83d\udc46 \ud83d\udcbc), \ud83d\udcb2 \ud83d\udc48 \ud83c\udf9a \ud83d\udd1c <code>Bearer</code>.</p> <p>\ud83d\udc46 \ud83d\udcaa \ud83e\udd19 \ud83d\udeb6 \ud83d\udc48 \u2795 \ud83c\udf9a &amp; \u26ab\ufe0f \ud83d\udd1c \ud83d\udc77.</p> <p>\u270b\ufe0f \u26ab\ufe0f \ud83d\ude9a \ud83d\udce5 \ud83d\udee0\ufe0f \u23ee\ufe0f \ud83d\udd27.</p> <p>, \ud83d\udce4 5\ufe0f\u20e3\ud83d\udcc6 \ud83e\uddf0 \ud83d\udc48 \u231b &amp; \u2699\ufe0f \u26ab\ufe0f (\ud83d\udd1c \u2696\ufe0f \ud83d\udd2e) &amp; \ud83d\udc48 \ud83d\udcaa \u26a0 \ud83d\udc46 \u2696\ufe0f \ud83d\udc46 \ud83d\udc69\u200d\ud83d\udcbb, \ud83d\udd1c \u2696\ufe0f \ud83d\udd2e.</p> <p>\ud83d\udc48 \ud83d\udcb0 \ud83d\udc29...</p>"},{"location":"tutorial/security/simple-oauth2/#_6","title":"\ud83d\udc40 \u26ab\ufe0f \ud83c\udfaf","text":"<p>\ud83d\udcc2 \ud83c\udf93 \ud83e\ude7a: http://127.0.0.1:8000/docs.</p>"},{"location":"tutorial/security/simple-oauth2/#_7","title":"\ud83d\udd13","text":"<p>\ud83d\udd8a \"\u2714\" \ud83d\udd3c.</p> <p>\u2699\ufe0f \ud83c\udf93:</p> <p>\ud83d\udc69\u200d\ud83d\udcbb: <code>johndoe</code></p> <p>\ud83d\udd10: <code>secret</code></p> <p></p> <p>\u23ee\ufe0f \ud83d\udd17 \u2699\ufe0f, \ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \u26ab\ufe0f \ud83d\udc96:</p> <p></p>"},{"location":"tutorial/security/simple-oauth2/#_8","title":"\ud83e\udd1a \ud83d\udc46 \ud83d\udc4d \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udcbd","text":"<p>\ud83d\udd1c \u2699\ufe0f \ud83d\udee0\ufe0f <code>GET</code> \u23ee\ufe0f \u27a1 <code>/users/me</code>.</p> <p>\ud83d\udc46 \ud83d\udd1c \ud83e\udd1a \ud83d\udc46 \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udcca, \ud83d\udc96:</p> <pre><code>{\n  \"username\": \"johndoe\",\n  \"email\": \"johndoe@example.com\",\n  \"full_name\": \"John Doe\",\n  \"disabled\": false,\n  \"hashed_password\": \"fakehashedsecret\"\n}\n</code></pre> <p></p> <p>\ud83d\udea5 \ud83d\udc46 \ud83d\udd8a \ud83d\udd12 \u2139 &amp; \u23cf, &amp; \u2934\ufe0f \ud83d\udd04 \ud83c\udf8f \ud83d\udee0\ufe0f \ud83d\udd04, \ud83d\udc46 \ud83d\udd1c \ud83e\udd1a \ud83c\uddfa\ud83c\uddf8\ud83d\udd0d 4\ufe0f\u20e30\ufe0f\u20e31\ufe0f\u20e3 \u274c:</p> <pre><code>{\n  \"detail\": \"Not authenticated\"\n}\n</code></pre>"},{"location":"tutorial/security/simple-oauth2/#_9","title":"\ud83d\udd15 \ud83d\udc69\u200d\ud83d\udcbb","text":"<p>\ud83d\udd1c \ud83d\udd04 \u23ee\ufe0f \ud83d\udd15 \ud83d\udc69\u200d\ud83d\udcbb, \ud83d\udd13 \u23ee\ufe0f:</p> <p>\ud83d\udc69\u200d\ud83d\udcbb: <code>alice</code></p> <p>\ud83d\udd10: <code>secret2</code></p> <p>&amp; \ud83d\udd04 \u2699\ufe0f \ud83d\udee0\ufe0f <code>GET</code> \u23ee\ufe0f \u27a1 <code>/users/me</code>.</p> <p>\ud83d\udc46 \ud83d\udd1c \ud83e\udd1a \"\ud83d\udd15 \ud83d\udc69\u200d\ud83d\udcbb\" \u274c, \ud83d\udc96:</p> <pre><code>{\n  \"detail\": \"Inactive user\"\n}\n</code></pre>"},{"location":"tutorial/security/simple-oauth2/#_10","title":"\ud83c\udf03","text":"<p>\ud83d\udc46 \ud83d\udd1c \u2714\ufe0f \ud83e\uddf0 \ud83d\udee0\ufe0f \ud83c\udfc1 \ud83d\udc82\u200d\u2642 \u2699\ufe0f \u2693\ufe0f \ud83d\udd1b <code>username</code> &amp; <code>password</code> \ud83d\udc46 \ud83d\udee0\ufe0f.</p> <p>\u2699\ufe0f \ud83d\udc6b \ud83e\uddf0, \ud83d\udc46 \ud83d\udcaa \u2692 \ud83d\udc82\u200d\u2642 \u2699\ufe0f \ud83d\udd17 \u23ee\ufe0f \ud83d\ude46 \ud83d\udcbd &amp; \u23ee\ufe0f \ud83d\ude46 \ud83d\udc69\u200d\ud83d\udcbb \u2696\ufe0f \ud83d\udcbd \ud83c\udff7.</p> <p>\ud83d\udd74 \u2139 \u274c \ud83d\udc48 \u26ab\ufe0f \ud83d\udeab \ud83e\udd19 \"\ud83d\udd10\".</p> <p>\u23ed \ud83d\udcc3 \ud83d\udc46 \ud83d\udd1c \ud83d\udc40 \u2754 \u2699\ufe0f \ud83d\udd10 \ud83d\udd10 \ud83d\udd01 \ud83d\uddc3 &amp; \ud83e\udd59 \ud83e\udd1d.</p>"},{"location":"learn/","title":"Learn","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>Here are the introductory sections and the tutorials to learn ReadyAPI.</p> <p>You could consider this a book, a course, the official and recommended way to learn ReadyAPI. \ud83d\ude0e</p>"},{"location":"environment-variables/","title":"Environment Variables","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>Tip</p> <p>If you already know what \"environment variables\" are and how to use them, feel free to skip this.</p> <p>An environment variable (also known as \"env var\") is a variable that lives outside of the Python code, in the operating system, and could be read by your Python code (or by other programs as well).</p> <p>Environment variables could be useful for handling application settings, as part of the installation of Python, etc.</p>"},{"location":"environment-variables/#create-and-use-env-vars","title":"Create and Use Env Vars","text":"<p>You can create and use environment variables in the shell (terminal), without needing Python:</p> Linux, macOS, Windows BashWindows PowerShell <pre><code>// You could create an env var MY_NAME with\n$ export MY_NAME=\"Wade Wilson\"\n\n// Then you could use it with other programs, like\n$ echo \"Hello $MY_NAME\"\n\nHello Wade Wilson\n</code></pre> <pre><code>// Create an env var MY_NAME\n$ $Env:MY_NAME = \"Wade Wilson\"\n\n// Use it with other programs, like\n$ echo \"Hello $Env:MY_NAME\"\n\nHello Wade Wilson\n</code></pre>"},{"location":"environment-variables/#read-env-vars-in-python","title":"Read env vars in Python","text":"<p>You could also create environment variables outside of Python, in the terminal (or with any other method), and then read them in Python.</p> <p>For example you could have a file <code>main.py</code> with:</p> <pre><code>import os\n\nname = os.getenv(\"MY_NAME\", \"World\")\nprint(f\"Hello {name} from Python\")\n</code></pre> <p>Tip</p> <p>The second argument to <code>os.getenv()</code> is the default value to return.</p> <p>If not provided, it's <code>None</code> by default, here we provide <code>\"World\"</code> as the default value to use.</p> <p>Then you could call that Python program:</p> Linux, macOS, Windows BashWindows PowerShell <pre><code>// Here we don't set the env var yet\n$ python main.py\n\n// As we didn't set the env var, we get the default value\n\nHello World from Python\n\n// But if we create an environment variable first\n$ export MY_NAME=\"Wade Wilson\"\n\n// And then call the program again\n$ python main.py\n\n// Now it can read the environment variable\n\nHello Wade Wilson from Python\n</code></pre> <pre><code>// Here we don't set the env var yet\n$ python main.py\n\n// As we didn't set the env var, we get the default value\n\nHello World from Python\n\n// But if we create an environment variable first\n$ $Env:MY_NAME = \"Wade Wilson\"\n\n// And then call the program again\n$ python main.py\n\n// Now it can read the environment variable\n\nHello Wade Wilson from Python\n</code></pre> <p>As environment variables can be set outside of the code, but can be read by the code, and don't have to be stored (committed to <code>git</code>) with the rest of the files, it's common to use them for configurations or settings.</p> <p>You can also create an environment variable only for a specific program invocation, that is only available to that program, and only for its duration.</p> <p>To do that, create it right before the program itself, on the same line:</p> <pre><code>// Create an env var MY_NAME in line for this program call\n$ MY_NAME=\"Wade Wilson\" python main.py\n\n// Now it can read the environment variable\n\nHello Wade Wilson from Python\n\n// The env var no longer exists afterwards\n$ python main.py\n\nHello World from Python\n</code></pre> <p>Tip</p> <p>You can read more about it at The Twelve-Factor App: Config.</p>"},{"location":"environment-variables/#types-and-validation","title":"Types and Validation","text":"<p>These environment variables can only handle text strings, as they are external to Python and have to be compatible with other programs and the rest of the system (and even with different operating systems, as Linux, Windows, macOS).</p> <p>That means that any value read in Python from an environment variable will be a <code>str</code>, and any conversion to a different type or any validation has to be done in code.</p> <p>You will learn more about using environment variables for handling application settings in the Advanced User Guide - Settings and Environment Variables.</p>"},{"location":"environment-variables/#path-environment-variable","title":"<code>PATH</code> Environment Variable","text":"<p>There is a special environment variable called <code>PATH</code> that is used by the operating systems (Linux, macOS, Windows) to find programs to run.</p> <p>The value of the variable <code>PATH</code> is a long string that is made of directories separated by a colon <code>:</code> on Linux and macOS, and by a semicolon <code>;</code> on Windows.</p> <p>For example, the <code>PATH</code> environment variable could look like this:</p> Linux, macOSWindows <pre><code>/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\n</code></pre> <p>This means that the system should look for programs in the directories:</p> <ul> <li><code>/usr/local/bin</code></li> <li><code>/usr/bin</code></li> <li><code>/bin</code></li> <li><code>/usr/sbin</code></li> <li><code>/sbin</code></li> </ul> <pre><code>C:\\Program Files\\Python312\\Scripts;C:\\Program Files\\Python312;C:\\Windows\\System32\n</code></pre> <p>This means that the system should look for programs in the directories:</p> <ul> <li><code>C:\\Program Files\\Python312\\Scripts</code></li> <li><code>C:\\Program Files\\Python312</code></li> <li><code>C:\\Windows\\System32</code></li> </ul> <p>When you type a command in the terminal, the operating system looks for the program in each of those directories listed in the <code>PATH</code> environment variable.</p> <p>For example, when you type <code>python</code> in the terminal, the operating system looks for a program called <code>python</code> in the first directory in that list.</p> <p>If it finds it, then it will use it. Otherwise it keeps looking in the other directories.</p>"},{"location":"environment-variables/#installing-python-and-updating-the-path","title":"Installing Python and Updating the <code>PATH</code>","text":"<p>When you install Python, you might be asked if you want to update the <code>PATH</code> environment variable.</p> Linux, macOSWindows <p>Let's say you install Python and it ends up in a directory <code>/opt/custompython/bin</code>.</p> <p>If you say yes to update the <code>PATH</code> environment variable, then the installer will add <code>/opt/custompython/bin</code> to the <code>PATH</code> environment variable.</p> <p>It could look like this:</p> <pre><code>/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/custompython/bin\n</code></pre> <p>This way, when you type <code>python</code> in the terminal, the system will find the Python program in <code>/opt/custompython/bin</code> (the last directory) and use that one.</p> <p>Let's say you install Python and it ends up in a directory <code>C:\\opt\\custompython\\bin</code>.</p> <p>If you say yes to update the <code>PATH</code> environment variable, then the installer will add <code>C:\\opt\\custompython\\bin</code> to the <code>PATH</code> environment variable.</p> <pre><code>C:\\Program Files\\Python312\\Scripts;C:\\Program Files\\Python312;C:\\Windows\\System32;C:\\opt\\custompython\\bin\n</code></pre> <p>This way, when you type <code>python</code> in the terminal, the system will find the Python program in <code>C:\\opt\\custompython\\bin</code> (the last directory) and use that one.</p> <p>So, if you type:</p> <pre><code>$ python\n</code></pre> Linux, macOSWindows <p>The system will find the <code>python</code> program in <code>/opt/custompython/bin</code> and run it.</p> <p>It would be roughly equivalent to typing:</p> <pre><code>$ /opt/custompython/bin/python\n</code></pre> <p>The system will find the <code>python</code> program in <code>C:\\opt\\custompython\\bin\\python</code> and run it.</p> <p>It would be roughly equivalent to typing:</p> <pre><code>$ C:\\opt\\custompython\\bin\\python\n</code></pre> <p>This information will be useful when learning about Virtual Environments.</p>"},{"location":"environment-variables/#conclusion","title":"Conclusion","text":"<p>With this you should have a basic understanding of what environment variables are and how to use them in Python.</p> <p>You can also read more about them in the Wikipedia for Environment Variable.</p> <p>In many cases it's not very obvious how environment variables would be useful and applicable right away. But they keep showing up in many different scenarios when you are developing, so it's good to know about them.</p> <p>For example, you will need this information in the next section, about Virtual Environments.</p>"},{"location":"virtual-environments/","title":"Virtual Environments","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>When you work in Python projects you probably should use a virtual environment (or a similar mechanism) to isolate the packages you install for each project.</p> <p>Info</p> <p>If you already know about virtual environments, how to create them and use them, you might want to skip this section. \ud83e\udd13</p> <p>Tip</p> <p>A virtual environment is different than an environment variable.</p> <p>An environment variable is a variable in the system that can be used by programs.</p> <p>A virtual environment is a directory with some files in it.</p> <p>Info</p> <p>This page will teach you how to use virtual environments and how they work.</p> <p>If you are ready to adopt a tool that manages everything for you (including installing Python), try uv.</p>"},{"location":"virtual-environments/#create-a-project","title":"Create a Project","text":"<p>First, create a directory for your project.</p> <p>What I normally do is that I create a directory named <code>code</code> inside my home/user directory.</p> <p>And inside of that I create one directory per project.</p> <pre><code>// Go to the home directory\n$ cd\n// Create a directory for all your code projects\n$ mkdir code\n// Enter into that code directory\n$ cd code\n// Create a directory for this project\n$ mkdir awesome-project\n// Enter into that project directory\n$ cd awesome-project\n</code></pre>"},{"location":"virtual-environments/#create-a-virtual-environment","title":"Create a Virtual Environment","text":"<p>When you start working on a Python project for the first time, create a virtual environment inside your project.</p> <p>Tip</p> <p>You only need to do this once per project, not every time you work.</p> <code>venv</code><code>uv</code> <p>To create a virtual environment, you can use the <code>venv</code> module that comes with Python.</p> <pre><code>$ python -m venv .venv\n</code></pre> What that command means <ul> <li><code>python</code>: use the program called <code>python</code></li> <li><code>-m</code>: call a module as a script, we'll tell it which module next</li> <li><code>venv</code>: use the module called <code>venv</code> that normally comes installed with Python</li> <li><code>.venv</code>: create the virtual environment in the new directory <code>.venv</code></li> </ul> <p>If you have <code>uv</code> installed, you can use it to create a virtual environment.</p> <pre><code>$ uv venv\n</code></pre> <p>Tip</p> <p>By default, <code>uv</code> will create a virtual environment in a directory called <code>.venv</code>.</p> <p>But you could customize it passing an additional argument with the directory name.</p> <p>That command creates a new virtual environment in a directory called <code>.venv</code>.</p> <code>.venv</code> or other name <p>You could create the virtual environment in a different directory, but there's a convention of calling it <code>.venv</code>.</p>"},{"location":"virtual-environments/#activate-the-virtual-environment","title":"Activate the Virtual Environment","text":"<p>Activate the new virtual environment so that any Python command you run or package you install uses it.</p> <p>Tip</p> <p>Do this every time you start a new terminal session to work on the project.</p> Linux, macOSWindows PowerShellWindows Bash <pre><code>$ source .venv/bin/activate\n</code></pre> <pre><code>$ .venv\\Scripts\\Activate.ps1\n</code></pre> <p>Or if you use Bash for Windows (e.g. Git Bash):</p> <pre><code>$ source .venv/Scripts/activate\n</code></pre> <p>Tip</p> <p>Every time you install a new package in that environment, activate the environment again.</p> <p>This makes sure that if you use a terminal (CLI) program installed by that package, you use the one from your virtual environment and not any other that could be installed globally, probably with a different version than what you need.</p>"},{"location":"virtual-environments/#check-the-virtual-environment-is-active","title":"Check the Virtual Environment is Active","text":"<p>Check that the virtual environment is active (the previous command worked).</p> <p>Tip</p> <p>This is optional, but it's a good way to check that everything is working as expected and you are using the virtual environment you intended.</p> Linux, macOS, Windows BashWindows PowerShell <pre><code>$ which python\n\n/home/user/code/awesome-project/.venv/bin/python\n</code></pre> <p>If it shows the <code>python</code> binary at <code>.venv/bin/python</code>, inside of your project (in this case <code>awesome-project</code>), then it worked. \ud83c\udf89</p> <pre><code>$ Get-Command python\n\nC:\\Users\\user\\code\\awesome-project\\.venv\\Scripts\\python\n</code></pre> <p>If it shows the <code>python</code> binary at <code>.venv\\Scripts\\python</code>, inside of your project (in this case <code>awesome-project</code>), then it worked. \ud83c\udf89</p>"},{"location":"virtual-environments/#upgrade-pip","title":"Upgrade <code>pip</code>","text":"<p>Tip</p> <p>If you use <code>uv</code> you would use it to install things instead of <code>pip</code>, so you don't need to upgrade <code>pip</code>. \ud83d\ude0e</p> <p>If you are using <code>pip</code> to install packages (it comes by default with Python), you should upgrade it to the latest version.</p> <p>Many exotic errors while installing a package are solved by just upgrading <code>pip</code> first.</p> <p>Tip</p> <p>You would normally do this once, right after you create the virtual environment.</p> <p>Make sure the virtual environment is active (with the command above) and then run:</p> <pre><code>$ python -m pip install --upgrade pip\n\n---&gt; 100%\n</code></pre>"},{"location":"virtual-environments/#add-gitignore","title":"Add <code>.gitignore</code>","text":"<p>If you are using Git (you should), add a <code>.gitignore</code> file to exclude everything in your <code>.venv</code> from Git.</p> <p>Tip</p> <p>If you used <code>uv</code> to create the virtual environment, it already did this for you, you can skip this step. \ud83d\ude0e</p> <p>Tip</p> <p>Do this once, right after you create the virtual environment.</p> <pre><code>$ echo \"*\" &gt; .venv/.gitignore\n</code></pre> What that command means <ul> <li><code>echo \"*\"</code>: will \"print\" the text <code>*</code> in the terminal (the next part changes that a bit)</li> <li><code>&gt;</code>: anything printed to the terminal by the command to the left of <code>&gt;</code> should not be printed but instead written to the file that goes to the right of <code>&gt;</code></li> <li><code>.gitignore</code>: the name of the file where the text should be written</li> </ul> <p>And <code>*</code> for Git means \"everything\". So, it will ignore everything in the <code>.venv</code> directory.</p> <p>That command will create a file <code>.gitignore</code> with the content:</p> <pre><code>*\n</code></pre>"},{"location":"virtual-environments/#install-packages","title":"Install Packages","text":"<p>After activating the environment, you can install packages in it.</p> <p>Tip</p> <p>Do this once when installing or upgrading the packages your project needs.</p> <p>If you need to upgrade a version or add a new package you would do this again.</p>"},{"location":"virtual-environments/#install-packages-directly","title":"Install Packages Directly","text":"<p>If you're in a hurry and don't want to use a file to declare your project's package requirements, you can install them directly.</p> <p>Tip</p> <p>It's a (very) good idea to put the packages and versions your program needs in a file (for example <code>requirements.txt</code> or <code>pyproject.toml</code>).</p> <code>pip</code><code>uv</code> <pre><code>$ pip install \"readyapi[standard]\"\n\n---&gt; 100%\n</code></pre> <p>If you have <code>uv</code>:</p> <pre><code>$ uv pip install \"readyapi[standard]\"\n---&gt; 100%\n</code></pre>"},{"location":"virtual-environments/#install-from-requirementstxt","title":"Install from <code>requirements.txt</code>","text":"<p>If you have a <code>requirements.txt</code>, you can now use it to install its packages.</p> <code>pip</code><code>uv</code> <pre><code>$ pip install -r requirements.txt\n---&gt; 100%\n</code></pre> <p>If you have <code>uv</code>:</p> <pre><code>$ uv pip install -r requirements.txt\n---&gt; 100%\n</code></pre> <code>requirements.txt</code> <p>A <code>requirements.txt</code> with some packages could look like:</p> <pre><code>readyapi[standard]==0.113.0\npydantic==2.8.0\n</code></pre>"},{"location":"virtual-environments/#run-your-program","title":"Run Your Program","text":"<p>After you activated the virtual environment, you can run your program, and it will use the Python inside of your virtual environment with the packages you installed there.</p> <pre><code>$ python main.py\n\nHello World\n</code></pre>"},{"location":"virtual-environments/#configure-your-editor","title":"Configure Your Editor","text":"<p>You would probably use an editor, make sure you configure it to use the same virtual environment you created (it will probably autodetect it) so that you can get autocompletion and inline errors.</p> <p>For example:</p> <ul> <li>VS Code</li> <li>PyCharm</li> </ul> <p>Tip</p> <p>You normally have to do this only once, when you create the virtual environment.</p>"},{"location":"virtual-environments/#deactivate-the-virtual-environment","title":"Deactivate the Virtual Environment","text":"<p>Once you are done working on your project you can deactivate the virtual environment.</p> <pre><code>$ deactivate\n</code></pre> <p>This way, when you run <code>python</code> it won't try to run it from that virtual environment with the packages installed there.</p>"},{"location":"virtual-environments/#ready-to-work","title":"Ready to Work","text":"<p>Now you're ready to start working on your project.</p> <p>Tip</p> <p>Do you want to understand what's all that above?</p> <p>Continue reading. \ud83d\udc47\ud83e\udd13</p>"},{"location":"virtual-environments/#why-virtual-environments","title":"Why Virtual Environments","text":"<p>To work with ReadyAPI you need to install Python.</p> <p>After that, you would need to install ReadyAPI and any other packages you want to use.</p> <p>To install packages you would normally use the <code>pip</code> command that comes with Python (or similar alternatives).</p> <p>Nevertheless, if you just use <code>pip</code> directly, the packages would be installed in your global Python environment (the global installation of Python).</p>"},{"location":"virtual-environments/#the-problem","title":"The Problem","text":"<p>So, what's the problem with installing packages in the global Python environment?</p> <p>At some point, you will probably end up writing many different programs that depend on different packages. And some of these projects you work on will depend on different versions of the same package. \ud83d\ude31</p> <p>For example, you could create a project called <code>philosophers-stone</code>, this program depends on another package called <code>harry</code>, using the version <code>1</code>. So, you need to install <code>harry</code>.</p> <pre><code>flowchart LR\n    stone(philosophers-stone) --&gt;|requires| harry-1[harry v1]</code></pre> <p>Then, at some point later, you create another project called <code>prisoner-of-azkaban</code>, and this project also depends on <code>harry</code>, but this project needs <code>harry</code> version <code>3</code>.</p> <pre><code>flowchart LR\n    azkaban(prisoner-of-azkaban) --&gt; |requires| harry-3[harry v3]</code></pre> <p>But now the problem is, if you install the packages globally (in the global environment) instead of in a local virtual environment, you will have to choose which version of <code>harry</code> to install.</p> <p>If you want to run <code>philosophers-stone</code> you will need to first install <code>harry</code> version <code>1</code>, for example with:</p> <pre><code>$ pip install \"harry==1\"\n</code></pre> <p>And then you would end up with <code>harry</code> version <code>1</code> installed in your global Python environment.</p> <pre><code>flowchart LR\n    subgraph global[global env]\n        harry-1[harry v1]\n    end\n    subgraph stone-project[philosophers-stone project]\n        stone(philosophers-stone) --&gt;|requires| harry-1\n    end</code></pre> <p>But then if you want to run <code>prisoner-of-azkaban</code>, you will need to uninstall <code>harry</code> version <code>1</code> and install <code>harry</code> version <code>3</code> (or just installing version <code>3</code> would automatically uninstall version <code>1</code>).</p> <pre><code>$ pip install \"harry==3\"\n</code></pre> <p>And then you would end up with <code>harry</code> version <code>3</code> installed in your global Python environment.</p> <p>And if you try to run <code>philosophers-stone</code> again, there's a chance it would not work because it needs <code>harry</code> version <code>1</code>.</p> <pre><code>flowchart LR\n    subgraph global[global env]\n        harry-1[&lt;strike&gt;harry v1&lt;/strike&gt;]\n        style harry-1 fill:#ccc,stroke-dasharray: 5 5\n        harry-3[harry v3]\n    end\n    subgraph stone-project[philosophers-stone project]\n        stone(philosophers-stone) -.-x|\u26d4\ufe0f| harry-1\n    end\n    subgraph azkaban-project[prisoner-of-azkaban project]\n        azkaban(prisoner-of-azkaban) --&gt; |requires| harry-3\n    end</code></pre> <p>Tip</p> <p>It's very common in Python packages to try the best to avoid breaking changes in new versions, but it's better to be safe, and install newer versions intentionally and when you can run the tests to check everything is working correctly.</p> <p>Now, imagine that with many other packages that all your projects depend on. That's very difficult to manage. And you would probably end up running some projects with some incompatible versions of the packages, and not knowing why something isn't working.</p> <p>Also, depending on your operating system (e.g. Linux, Windows, macOS), it could have come with Python already installed. And in that case it probably had some packages pre-installed with some specific versions needed by your system. If you install packages in the global Python environment, you could end up breaking some of the programs that came with your operating system.</p>"},{"location":"virtual-environments/#where-are-packages-installed","title":"Where are Packages Installed","text":"<p>When you install Python, it creates some directories with some files in your computer.</p> <p>Some of these directories are the ones in charge of having all the packages you install.</p> <p>When you run:</p> <pre><code>// Don't run this now, it's just an example \ud83e\udd13\n$ pip install \"readyapi[standard]\"\n---&gt; 100%\n</code></pre> <p>That will download a compressed file with the ReadyAPI code, normally from PyPI.</p> <p>It will also download files for other packages that ReadyAPI depends on.</p> <p>Then it will extract all those files and put them in a directory in your computer.</p> <p>By default, it will put those files downloaded and extracted in the directory that comes with your Python installation, that's the global environment.</p>"},{"location":"virtual-environments/#what-are-virtual-environments","title":"What are Virtual Environments","text":"<p>The solution to the problems of having all the packages in the global environment is to use a virtual environment for each project you work on.</p> <p>A virtual environment is a directory, very similar to the global one, where you can install the packages for a project.</p> <p>This way, each project will have its own virtual environment (<code>.venv</code> directory) with its own packages.</p> <pre><code>flowchart TB\n    subgraph stone-project[philosophers-stone project]\n        stone(philosophers-stone) ---&gt;|requires| harry-1\n        subgraph venv1[.venv]\n            harry-1[harry v1]\n        end\n    end\n    subgraph azkaban-project[prisoner-of-azkaban project]\n        azkaban(prisoner-of-azkaban) ---&gt;|requires| harry-3\n        subgraph venv2[.venv]\n            harry-3[harry v3]\n        end\n    end\n    stone-project ~~~ azkaban-project</code></pre>"},{"location":"virtual-environments/#what-does-activating-a-virtual-environment-mean","title":"What Does Activating a Virtual Environment Mean","text":"<p>When you activate a virtual environment, for example with:</p> Linux, macOSWindows PowerShellWindows Bash <pre><code>$ source .venv/bin/activate\n</code></pre> <pre><code>$ .venv\\Scripts\\Activate.ps1\n</code></pre> <p>Or if you use Bash for Windows (e.g. Git Bash):</p> <pre><code>$ source .venv/Scripts/activate\n</code></pre> <p>That command will create or modify some environment variables that will be available for the next commands.</p> <p>One of those variables is the <code>PATH</code> variable.</p> <p>Tip</p> <p>You can learn more about the <code>PATH</code> environment variable in the Environment Variables section.</p> <p>Activating a virtual environment adds its path <code>.venv/bin</code> (on Linux and macOS) or <code>.venv\\Scripts</code> (on Windows) to the <code>PATH</code> environment variable.</p> <p>Let's say that before activating the environment, the <code>PATH</code> variable looked like this:</p> Linux, macOSWindows <pre><code>/usr/bin:/bin:/usr/sbin:/sbin\n</code></pre> <p>That means that the system would look for programs in:</p> <ul> <li><code>/usr/bin</code></li> <li><code>/bin</code></li> <li><code>/usr/sbin</code></li> <li><code>/sbin</code></li> </ul> <pre><code>C:\\Windows\\System32\n</code></pre> <p>That means that the system would look for programs in:</p> <ul> <li><code>C:\\Windows\\System32</code></li> </ul> <p>After activating the virtual environment, the <code>PATH</code> variable would look something like this:</p> Linux, macOSWindows <pre><code>/home/user/code/awesome-project/.venv/bin:/usr/bin:/bin:/usr/sbin:/sbin\n</code></pre> <p>That means that the system will now start looking first for programs in:</p> <pre><code>/home/user/code/awesome-project/.venv/bin\n</code></pre> <p>before looking in the other directories.</p> <p>So, when you type <code>python</code> in the terminal, the system will find the Python program in</p> <pre><code>/home/user/code/awesome-project/.venv/bin/python\n</code></pre> <p>and use that one.</p> <pre><code>C:\\Users\\user\\code\\awesome-project\\.venv\\Scripts;C:\\Windows\\System32\n</code></pre> <p>That means that the system will now start looking first for programs in:</p> <pre><code>C:\\Users\\user\\code\\awesome-project\\.venv\\Scripts\n</code></pre> <p>before looking in the other directories.</p> <p>So, when you type <code>python</code> in the terminal, the system will find the Python program in</p> <pre><code>C:\\Users\\user\\code\\awesome-project\\.venv\\Scripts\\python\n</code></pre> <p>and use that one.</p> <p>An important detail is that it will put the virtual environment path at the beginning of the <code>PATH</code> variable. The system will find it before finding any other Python available. This way, when you run <code>python</code>, it will use the Python from the virtual environment instead of any other <code>python</code> (for example, a <code>python</code> from a global environment).</p> <p>Activating a virtual environment also changes a couple of other things, but this is one of the most important things it does.</p>"},{"location":"virtual-environments/#checking-a-virtual-environment","title":"Checking a Virtual Environment","text":"<p>When you check if a virtual environment is active, for example with:</p> Linux, macOS, Windows BashWindows PowerShell <pre><code>$ which python\n\n/home/user/code/awesome-project/.venv/bin/python\n</code></pre> <pre><code>$ Get-Command python\n\nC:\\Users\\user\\code\\awesome-project\\.venv\\Scripts\\python\n</code></pre> <p>That means that the <code>python</code> program that will be used is the one in the virtual environment.</p> <p>You use <code>which</code> in Linux and macOS and <code>Get-Command</code> in Windows PowerShell.</p> <p>The way that command works is that it will go and check in the <code>PATH</code> environment variable, going through each path in order, looking for the program called <code>python</code>. Once it finds it, it will show you the path to that program.</p> <p>The most important part is that when you call <code>python</code>, that is the exact \"<code>python</code>\" that will be executed.</p> <p>So, you can confirm if you are in the correct virtual environment.</p> <p>Tip</p> <p>It's easy to activate one virtual environment, get one Python, and then go to another project.</p> <p>And the second project wouldn't work because you are using the incorrect Python, from a virtual environment for another project.</p> <p>It's useful being able to check what <code>python</code> is being used. \ud83e\udd13</p>"},{"location":"virtual-environments/#why-deactivate-a-virtual-environment","title":"Why Deactivate a Virtual Environment","text":"<p>For example, you could be working on a project <code>philosophers-stone</code>, activate that virtual environment, install packages and work with that environment.</p> <p>And then you want to work on another project <code>prisoner-of-azkaban</code>.</p> <p>You go to that project:</p> <pre><code>$ cd ~/code/prisoner-of-azkaban\n</code></pre> <p>If you don't deactivate the virtual environment for <code>philosophers-stone</code>, when you run <code>python</code> in the terminal, it will try to use the Python from <code>philosophers-stone</code>.</p> <pre><code>$ cd ~/code/prisoner-of-azkaban\n\n$ python main.py\n\n// Error importing sirius, it's not installed \ud83d\ude31\nTraceback (most recent call last):\n    File \"main.py\", line 1, in &lt;module&gt;\n        import sirius\n</code></pre> <p>But if you deactivate the virtual environment and activate the new one for <code>prisoner-of-askaban</code> then when you run <code>python</code> it will use the Python from the virtual environment in <code>prisoner-of-azkaban</code>.</p> <pre><code>$ cd ~/code/prisoner-of-azkaban\n\n// You don't need to be in the old directory to deactivate, you can do it wherever you are, even after going to the other project \ud83d\ude0e\n$ deactivate\n\n// Activate the virtual environment in prisoner-of-azkaban/.venv \ud83d\ude80\n$ source .venv/bin/activate\n\n// Now when you run python, it will find the package sirius installed in this virtual environment \u2728\n$ python main.py\n\nI solemnly swear \ud83d\udc3a\n</code></pre>"},{"location":"virtual-environments/#alternatives","title":"Alternatives","text":"<p>This is a simple guide to get you started and teach you how everything works underneath.</p> <p>There are many alternatives to managing virtual environments, package dependencies (requirements), projects.</p> <p>Once you are ready and want to use a tool to manage the entire project, packages dependencies, virtual environments, etc. I would suggest you try uv.</p> <p><code>uv</code> can do a lot of things, it can:</p> <ul> <li>Install Python for you, including different versions</li> <li>Manage the virtual environment for your projects</li> <li>Install packages</li> <li>Manage package dependencies and versions for your project</li> <li>Make sure you have an exact set of packages and versions to install, including their dependencies, so that you can be sure that you can run your project in production exactly the same as in your computer while developing, this is called locking</li> <li>And many other things</li> </ul>"},{"location":"virtual-environments/#conclusion","title":"Conclusion","text":"<p>If you read and understood all this, now you know much more about virtual environments than many developers out there. \ud83e\udd13</p> <p>Knowing these details will most probably be useful in a future time when you are debugging something that seems complex, but you will know how it all works underneath. \ud83d\ude0e</p>"},{"location":"tutorial/query-param-models/","title":"Query Parameter Models","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>If you have a group of query parameters that are related, you can create a Pydantic model to declare them.</p> <p>This would allow you to re-use the model in multiple places and also to declare validations and metadata for all the parameters at once. \ud83d\ude0e</p> <p>Note</p> <p>This is supported since ReadyAPI version <code>0.115.0</code>. \ud83e\udd13</p>"},{"location":"tutorial/query-param-models/#query-parameters-with-a-pydantic-model","title":"Query Parameters with a Pydantic Model","text":"<p>Declare the query parameters that you need in a Pydantic model, and then declare the parameter as <code>Query</code>:</p> Python 3.10+ <pre><code>from typing import Annotated, Literal\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: Annotated[FilterParams, Query()]):\n    return filter_query\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from pydantic import BaseModel, Field\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated, Literal\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: Annotated[FilterParams, Query()]):\n    return filter_query\n</code></pre> <pre><code>from typing import List\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated, Literal\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: List[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: Annotated[FilterParams, Query()]):\n    return filter_query\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Literal\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: FilterParams = Query()):\n    return filter_query\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel, Field\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Literal\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: FilterParams = Query()):\n    return filter_query\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Literal\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: List[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: FilterParams = Query()):\n    return filter_query\n</code></pre> <p>ReadyAPI will extract the data for each field from the query parameters in the request and give you the Pydantic model you defined.</p>"},{"location":"tutorial/query-param-models/#check-the-docs","title":"Check the Docs","text":"<p>You can see the query parameters in the docs UI at <code>/docs</code>:</p>"},{"location":"tutorial/query-param-models/#forbid-extra-query-parameters","title":"Forbid Extra Query Parameters","text":"<p>In some special use cases (probably not very common), you might want to restrict the query parameters that you want to receive.</p> <p>You can use Pydantic's model configuration to <code>forbid</code> any <code>extra</code> fields:</p> Python 3.10+ <pre><code>from typing import Annotated, Literal\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: Annotated[FilterParams, Query()]):\n    return filter_query\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from pydantic import BaseModel, Field\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated, Literal\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: Annotated[FilterParams, Query()]):\n    return filter_query\n</code></pre> <pre><code>from typing import List\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Annotated, Literal\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: List[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: Annotated[FilterParams, Query()]):\n    return filter_query\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Literal\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Query, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: FilterParams = Query()):\n    return filter_query\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel, Field\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Literal\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: FilterParams = Query()):\n    return filter_query\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List\n\nfrom pydantic import BaseModel, Field\nfrom readyapi import Query, ReadyAPI\nfrom typing_extensions import Literal\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: List[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: FilterParams = Query()):\n    return filter_query\n</code></pre> <p>If a client tries to send some extra data in the query parameters, they will receive an error response.</p> <p>For example, if the client tries to send a <code>tool</code> query parameter with a value of <code>plumbus</code>, like:</p> <pre><code>https://example.com/items/?limit=10&amp;tool=plumbus\n</code></pre> <p>They will receive an error response telling them that the query parameter <code>tool</code> is not allowed:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"type\": \"extra_forbidden\",\n            \"loc\": [\"query\", \"tool\"],\n            \"msg\": \"Extra inputs are not permitted\",\n            \"input\": \"plumbus\"\n        }\n    ]\n}\n</code></pre>"},{"location":"tutorial/query-param-models/#summary","title":"Summary","text":"<p>You can use Pydantic models to declare query parameters in ReadyAPI. \ud83d\ude0e</p> <p>Tip</p> <p>Spoiler alert: you can also use Pydantic models to declare cookies and headers, but you will read about that later in the tutorial. \ud83e\udd2b</p>"},{"location":"tutorial/cookie-param-models/","title":"Cookie Parameter Models","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>If you have a group of cookies that are related, you can create a Pydantic model to declare them. \ud83c\udf6a</p> <p>This would allow you to re-use the model in multiple places and also to declare validations and metadata for all the parameters at once. \ud83d\ude0e</p> <p>Note</p> <p>This is supported since ReadyAPI version <code>0.115.0</code>. \ud83e\udd13</p> <p>Tip</p> <p>This same technique applies to <code>Query</code>, <code>Cookie</code>, and <code>Header</code>. \ud83d\ude0e</p>"},{"location":"tutorial/cookie-param-models/#cookies-with-a-pydantic-model","title":"Cookies with a Pydantic Model","text":"<p>Declare the cookie parameters that you need in a Pydantic model, and then declare the parameter as <code>Cookie</code>:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Cookies(BaseModel):\n    session_id: str\n    fatebook_tracker: str | None = None\n    googall_tracker: str | None = None\n\n\n@app.get(\"/items/\")\nasync def read_items(cookies: Annotated[Cookies, Cookie()]):\n    return cookies\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Cookies(BaseModel):\n    session_id: str\n    fatebook_tracker: Union[str, None] = None\n    googall_tracker: Union[str, None] = None\n\n\n@app.get(\"/items/\")\nasync def read_items(cookies: Annotated[Cookies, Cookie()]):\n    return cookies\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Cookie, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass Cookies(BaseModel):\n    session_id: str\n    fatebook_tracker: Union[str, None] = None\n    googall_tracker: Union[str, None] = None\n\n\n@app.get(\"/items/\")\nasync def read_items(cookies: Annotated[Cookies, Cookie()]):\n    return cookies\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Cookies(BaseModel):\n    session_id: str\n    fatebook_tracker: str | None = None\n    googall_tracker: str | None = None\n\n\n@app.get(\"/items/\")\nasync def read_items(cookies: Cookies = Cookie()):\n    return cookies\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Cookies(BaseModel):\n    session_id: str\n    fatebook_tracker: Union[str, None] = None\n    googall_tracker: Union[str, None] = None\n\n\n@app.get(\"/items/\")\nasync def read_items(cookies: Cookies = Cookie()):\n    return cookies\n</code></pre> <p>ReadyAPI will extract the data for each field from the cookies received in the request and give you the Pydantic model you defined.</p>"},{"location":"tutorial/cookie-param-models/#check-the-docs","title":"Check the Docs","text":"<p>You can see the defined cookies in the docs UI at <code>/docs</code>:</p> <p>Info</p> <p>Have in mind that, as browsers handle cookies in special ways and behind the scenes, they don't easily allow JavaScript to touch them.</p> <p>If you go to the API docs UI at <code>/docs</code> you will be able to see the documentation for cookies for your path operations.</p> <p>But even if you fill the data and click \"Execute\", because the docs UI works with JavaScript, the cookies won't be sent, and you will see an error message as if you didn't write any values.</p>"},{"location":"tutorial/cookie-param-models/#forbid-extra-cookies","title":"Forbid Extra Cookies","text":"<p>In some special use cases (probably not very common), you might want to restrict the cookies that you want to receive.</p> <p>Your API now has the power to control its own cookie consent. \ud83e\udd2a\ud83c\udf6a</p> <p>You can use Pydantic's model configuration to <code>forbid</code> any <code>extra</code> fields:</p> Python 3.9+ <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Cookies(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    session_id: str\n    fatebook_tracker: Union[str, None] = None\n    googall_tracker: Union[str, None] = None\n\n\n@app.get(\"/items/\")\nasync def read_items(cookies: Annotated[Cookies, Cookie()]):\n    return cookies\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.10+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Cookies(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    session_id: str\n    fatebook_tracker: str | None = None\n    googall_tracker: str | None = None\n\n\n@app.get(\"/items/\")\nasync def read_items(cookies: Annotated[Cookies, Cookie()]):\n    return cookies\n</code></pre> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Cookie, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass Cookies(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    session_id: str\n    fatebook_tracker: Union[str, None] = None\n    googall_tracker: Union[str, None] = None\n\n\n@app.get(\"/items/\")\nasync def read_items(cookies: Annotated[Cookies, Cookie()]):\n    return cookies\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Cookies(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    session_id: str\n    fatebook_tracker: str | None = None\n    googall_tracker: str | None = None\n\n\n@app.get(\"/items/\")\nasync def read_items(cookies: Cookies = Cookie()):\n    return cookies\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Cookie, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Cookies(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    session_id: str\n    fatebook_tracker: Union[str, None] = None\n    googall_tracker: Union[str, None] = None\n\n\n@app.get(\"/items/\")\nasync def read_items(cookies: Cookies = Cookie()):\n    return cookies\n</code></pre> <p>If a client tries to send some extra cookies, they will receive an error response.</p> <p>Poor cookie banners with all their effort to get your consent for the API to reject it. \ud83c\udf6a</p> <p>For example, if the client tries to send a <code>santa_tracker</code> cookie with a value of <code>good-list-please</code>, the client will receive an error response telling them that the <code>santa_tracker</code> cookie is not allowed:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"type\": \"extra_forbidden\",\n            \"loc\": [\"cookie\", \"santa_tracker\"],\n            \"msg\": \"Extra inputs are not permitted\",\n            \"input\": \"good-list-please\",\n        }\n    ]\n}\n</code></pre>"},{"location":"tutorial/cookie-param-models/#summary","title":"Summary","text":"<p>You can use Pydantic models to declare cookies in ReadyAPI. \ud83d\ude0e</p>"},{"location":"tutorial/header-param-models/","title":"Header Parameter Models","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>If you have a group of related header parameters, you can create a Pydantic model to declare them.</p> <p>This would allow you to re-use the model in multiple places and also to declare validations and metadata for all the parameters at once. \ud83d\ude0e</p> <p>Note</p> <p>This is supported since ReadyAPI version <code>0.115.0</code>. \ud83e\udd13</p>"},{"location":"tutorial/header-param-models/#header-parameters-with-a-pydantic-model","title":"Header Parameters with a Pydantic Model","text":"<p>Declare the header parameters that you need in a Pydantic model, and then declare the parameter as <code>Header</code>:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    host: str\n    save_data: bool\n    if_modified_since: str | None = None\n    traceparent: str | None = None\n    x_tag: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: Annotated[CommonHeaders, Header()]):\n    return headers\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: Annotated[CommonHeaders, Header()]):\n    return headers\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: List[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: Annotated[CommonHeaders, Header()]):\n    return headers\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    host: str\n    save_data: bool\n    if_modified_since: str | None = None\n    traceparent: str | None = None\n    x_tag: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: CommonHeaders = Header()):\n    return headers\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: CommonHeaders = Header()):\n    return headers\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: List[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: CommonHeaders = Header()):\n    return headers\n</code></pre> <p>ReadyAPI will extract the data for each field from the headers in the request and give you the Pydantic model you defined.</p>"},{"location":"tutorial/header-param-models/#check-the-docs","title":"Check the Docs","text":"<p>You can see the required headers in the docs UI at <code>/docs</code>:</p>"},{"location":"tutorial/header-param-models/#forbid-extra-headers","title":"Forbid Extra Headers","text":"<p>In some special use cases (probably not very common), you might want to restrict the headers that you want to receive.</p> <p>You can use Pydantic's model configuration to <code>forbid</code> any <code>extra</code> fields:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    host: str\n    save_data: bool\n    if_modified_since: str | None = None\n    traceparent: str | None = None\n    x_tag: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: Annotated[CommonHeaders, Header()]):\n    return headers\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: Annotated[CommonHeaders, Header()]):\n    return headers\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: List[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: Annotated[CommonHeaders, Header()]):\n    return headers\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    host: str\n    save_data: bool\n    if_modified_since: str | None = None\n    traceparent: str | None = None\n    x_tag: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: CommonHeaders = Header()):\n    return headers\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: CommonHeaders = Header()):\n    return headers\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: List[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: CommonHeaders = Header()):\n    return headers\n</code></pre> <p>If a client tries to send some extra headers, they will receive an error response.</p> <p>For example, if the client tries to send a <code>tool</code> header with a value of <code>plumbus</code>, they will receive an error response telling them that the header parameter <code>tool</code> is not allowed:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"type\": \"extra_forbidden\",\n            \"loc\": [\"header\", \"tool\"],\n            \"msg\": \"Extra inputs are not permitted\",\n            \"input\": \"plumbus\",\n        }\n    ]\n}\n</code></pre>"},{"location":"tutorial/header-param-models/#disable-convert-underscores","title":"Disable Convert Underscores","text":"<p>The same way as with regular header parameters, when you have underscore characters in the parameter names, they are automatically converted to hyphens.</p> <p>For example, if you have a header parameter <code>save_data</code> in the code, the expected HTTP header will be <code>save-data</code>, and it will show up like that in the docs.</p> <p>If for some reason you need to disable this automatic conversion, you can do it as well for Pydantic models for header parameters.</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    host: str\n    save_data: bool\n    if_modified_since: str | None = None\n    traceparent: str | None = None\n    x_tag: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    headers: Annotated[CommonHeaders, Header(convert_underscores=False)],\n):\n    return headers\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    headers: Annotated[CommonHeaders, Header(convert_underscores=False)],\n):\n    return headers\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: List[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(\n    headers: Annotated[CommonHeaders, Header(convert_underscores=False)],\n):\n    return headers\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    host: str\n    save_data: bool\n    if_modified_since: str | None = None\n    traceparent: str | None = None\n    x_tag: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: CommonHeaders = Header(convert_underscores=False)):\n    return headers\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: CommonHeaders = Header(convert_underscores=False)):\n    return headers\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import Header, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: List[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: CommonHeaders = Header(convert_underscores=False)):\n    return headers\n</code></pre> <p>Warning</p> <p>Before setting <code>convert_underscores</code> to <code>False</code>, bear in mind that some HTTP proxies and servers disallow the usage of headers with underscores.</p>"},{"location":"tutorial/header-param-models/#summary","title":"Summary","text":"<p>You can use Pydantic models to declare headers in ReadyAPI. \ud83d\ude0e</p>"},{"location":"tutorial/request-form-models/","title":"Form Models","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>You can use Pydantic models to declare form fields in ReadyAPI.</p> <p>Info</p> <p>To use forms, first install <code>python-multipart</code>.</p> <p>Make sure you create a virtual environment, activate it, and then install it, for example:</p> <pre><code>$ pip install python-multipart\n</code></pre> <p>Note</p> <p>This is supported since ReadyAPI version <code>0.113.0</code>. \ud83e\udd13</p>"},{"location":"tutorial/request-form-models/#pydantic-models-for-forms","title":"Pydantic Models for Forms","text":"<p>You just need to declare a Pydantic model with the fields you want to receive as form fields, and then declare the parameter as <code>Form</code>:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Form, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FormData(BaseModel):\n    username: str\n    password: str\n\n\n@app.post(\"/login/\")\nasync def login(data: Annotated[FormData, Form()]):\n    return data\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from pydantic import BaseModel\nfrom readyapi import Form, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass FormData(BaseModel):\n    username: str\n    password: str\n\n\n@app.post(\"/login/\")\nasync def login(data: Annotated[FormData, Form()]):\n    return data\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Form, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FormData(BaseModel):\n    username: str\n    password: str\n\n\n@app.post(\"/login/\")\nasync def login(data: FormData = Form()):\n    return data\n</code></pre> <p>ReadyAPI will extract the data for each field from the form data in the request and give you the Pydantic model you defined.</p>"},{"location":"tutorial/request-form-models/#check-the-docs","title":"Check the Docs","text":"<p>You can verify it in the docs UI at <code>/docs</code>:</p>"},{"location":"tutorial/request-form-models/#forbid-extra-form-fields","title":"Forbid Extra Form Fields","text":"<p>In some special use cases (probably not very common), you might want to restrict the form fields to only those declared in the Pydantic model. And forbid any extra fields.</p> <p>Note</p> <p>This is supported since ReadyAPI version <code>0.114.0</code>. \ud83e\udd13</p> <p>You can use Pydantic's model configuration to <code>forbid</code> any <code>extra</code> fields:</p> Python 3.9+ <pre><code>from typing import Annotated\n\nfrom pydantic import BaseModel\nfrom readyapi import Form, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FormData(BaseModel):\n    username: str\n    password: str\n    model_config = {\"extra\": \"forbid\"}\n\n\n@app.post(\"/login/\")\nasync def login(data: Annotated[FormData, Form()]):\n    return data\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.8+Python 3.8+ - non-Annotated <pre><code>from pydantic import BaseModel\nfrom readyapi import Form, ReadyAPI\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\nclass FormData(BaseModel):\n    username: str\n    password: str\n    model_config = {\"extra\": \"forbid\"}\n\n\n@app.post(\"/login/\")\nasync def login(data: Annotated[FormData, Form()]):\n    return data\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from pydantic import BaseModel\nfrom readyapi import Form, ReadyAPI\n\napp = ReadyAPI()\n\n\nclass FormData(BaseModel):\n    username: str\n    password: str\n    model_config = {\"extra\": \"forbid\"}\n\n\n@app.post(\"/login/\")\nasync def login(data: FormData = Form()):\n    return data\n</code></pre> <p>If a client tries to send some extra data, they will receive an error response.</p> <p>For example, if the client tries to send the form fields:</p> <ul> <li><code>username</code>: <code>Rick</code></li> <li><code>password</code>: <code>Portal Gun</code></li> <li><code>extra</code>: <code>Mr. Poopybutthole</code></li> </ul> <p>They will receive an error response telling them that the field <code>extra</code> is not allowed:</p> <pre><code>{\n    \"detail\": [\n        {\n            \"type\": \"extra_forbidden\",\n            \"loc\": [\"body\", \"extra\"],\n            \"msg\": \"Extra inputs are not permitted\",\n            \"input\": \"Mr. Poopybutthole\"\n        }\n    ]\n}\n</code></pre>"},{"location":"tutorial/request-form-models/#summary","title":"Summary","text":"<p>You can use Pydantic models to declare form fields in ReadyAPI. \ud83d\ude0e</p>"},{"location":"tutorial/sql-databases/","title":"SQL (Relational) Databases","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>ReadyAPI doesn't require you to use a SQL (relational) database. But you can use any database that you want.</p> <p>Here we'll see an example using SQLDev.</p> <p>SQLDev is built on top of SQLAlchemy and Pydantic. It was made by the same author of ReadyAPI to be the perfect match for ReadyAPI applications that need to use SQL databases.</p> <p>Tip</p> <p>You could use any other SQL or NoSQL database library you want (in some cases called \"ORMs\"), ReadyAPI doesn't force you to use anything. \ud83d\ude0e</p> <p>As SQLDev is based on SQLAlchemy, you can easily use any database supported by SQLAlchemy (which makes them also supported by SQLDev), like:</p> <ul> <li>PostgreSQL</li> <li>MySQL</li> <li>SQLite</li> <li>Oracle</li> <li>Microsoft SQL Server, etc.</li> </ul> <p>In this example, we'll use SQLite, because it uses a single file and Python has integrated support. So, you can copy this example and run it as is.</p> <p>Later, for your production application, you might want to use a database server like PostgreSQL.</p> <p>Tip</p> <p>There is an official project generator with ReadyAPI and PostgreSQL including a frontend and more tools: https://github.com/readyapi/full-stack-readyapi-template</p> <p>This is a very simple and short tutorial, if you want to learn about databases in general, about SQL, or more advanced features, go to the SQLDev docs.</p>"},{"location":"tutorial/sql-databases/#install-sqldev","title":"Install <code>SQLDev</code>","text":"<p>First, make sure you create your virtual environment, activate it, and then install <code>sqldev</code>:</p> <pre><code>$ pip install sqldev\n---&gt; 100%\n</code></pre>"},{"location":"tutorial/sql-databases/#create-the-app-with-a-single-model","title":"Create the App with a Single Model","text":"<p>We'll create the simplest first version of the app with a single SQLDev model first.</p> <p>Later we'll improve it increasing security and versatility with multiple models below. \ud83e\udd13</p>"},{"location":"tutorial/sql-databases/#create-models","title":"Create Models","text":"<p>Import <code>SQLDev</code> and create a database model:</p> Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>The <code>Hero</code> class is very similar to a Pydantic model (in fact, underneath, it actually is a Pydantic model).</p> <p>There are a few differences:</p> <ul> <li> <p><code>table=True</code> tells SQLDev that this is a table model, it should represent a table in the SQL database, it's not just a data model (as would be any other regular Pydantic class).</p> </li> <li> <p><code>Field(primary_key=True)</code> tells SQLDev that the <code>id</code> is the primary key in the SQL database (you can learn more about SQL primary keys in the SQLDev docs).</p> <p>By having the type as <code>int | None</code>, SQLDev will know that this column should be an <code>INTEGER</code> in the SQL database and that it should be <code>NULLABLE</code>.</p> </li> <li> <p><code>Field(index=True)</code> tells SQLDev that it should create a SQL index for this column, that would allow faster lookups in the database when reading data filtered by this column.</p> <p>SQLDev will know that something declared as <code>str</code> will be a SQL column of type <code>TEXT</code> (or <code>VARCHAR</code>, depending on the database).</p> </li> </ul>"},{"location":"tutorial/sql-databases/#create-an-engine","title":"Create an Engine","text":"<p>A SQLDev <code>engine</code> (underneath it's actually a SQLAlchemy <code>engine</code>) is what holds the connections to the database.</p> <p>You would have one single <code>engine</code> object for all your code to connect to the same database.</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Using <code>check_same_thread=False</code> allows ReadyAPI to use the same SQLite database in different threads. This is necessary as one single request could use more than one thread (for example in dependencies).</p> <p>Don't worry, with the way the code is structured, we'll make sure we use a single SQLDev session per request later, this is actually what the <code>check_same_thread</code> is trying to achieve.</p>"},{"location":"tutorial/sql-databases/#create-the-tables","title":"Create the Tables","text":"<p>We then add a function that uses <code>SQLDev.metadata.create_all(engine)</code> to create the tables for all the table models.</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#create-a-session-dependency","title":"Create a Session Dependency","text":"<p>A <code>Session</code> is what stores the objects in memory and keeps track of any changes needed in the data, then it uses the <code>engine</code> to communicate with the database.</p> <p>We will create a ReadyAPI dependency with <code>yield</code> that will provide a new <code>Session</code> for each request. This is what ensures that we use a single session per request. \ud83e\udd13</p> <p>Then we create an <code>Annotated</code> dependency <code>SessionDep</code> to simplify the rest of the code that will use this dependency.</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#create-database-tables-on-startup","title":"Create Database Tables on Startup","text":"<p>We will create the database tables when the application starts.</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Here we create the tables on an application startup event.</p> <p>For production you would probably use a migration script that runs before you start your app. \ud83e\udd13</p> <p>Tip</p> <p>SQLDev will have migration utilities wrapping Alembic, but for now, you can use Alembic directly.</p>"},{"location":"tutorial/sql-databases/#create-a-hero","title":"Create a Hero","text":"<p>Because each SQLDev model is also a Pydantic model, you can use it in the same type annotations that you could use Pydantic models.</p> <p>For example, if you declare a parameter of type <code>Hero</code>, it will be read from the JSON body.</p> <p>The same way, you can declare it as the function's return type, and then the shape of the data will show up in the automatic API docs UI.</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Here we use the <code>SessionDep</code> dependency (a <code>Session</code>) to add the new <code>Hero</code> to the <code>Session</code> instance, commit the changes to the database, refresh the data in the <code>hero</code>, and then return it.</p>"},{"location":"tutorial/sql-databases/#read-heroes","title":"Read Heroes","text":"<p>We can read <code>Hero</code>s from the database using a <code>select()</code>. We can include a <code>limit</code> and <code>offset</code> to paginate the results.</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#read-one-hero","title":"Read One Hero","text":"<p>We can read a single <code>Hero</code>.</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#delete-a-hero","title":"Delete a Hero","text":"<p>We can also delete a <code>Hero</code>.</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass Hero(SQLDev, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -&gt; Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -&gt; List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -&gt; Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#run-the-app","title":"Run the App","text":"<p>You can run the app:</p> <pre><code>$ readyapi dev main.py\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>Then go to the <code>/docs</code> UI, you will see that ReadyAPI is using these models to document the API, and it will use them to serialize and validate the data too.</p>"},{"location":"tutorial/sql-databases/#update-the-app-with-multiple-models","title":"Update the App with Multiple Models","text":"<p>Now let's refactor this app a bit to increase security and versatility.</p> <p>If you check the previous app, in the UI you can see that, up to now, it lets the client decide the <code>id</code> of the <code>Hero</code> to create. \ud83d\ude31</p> <p>We shouldn't let that happen, they could overwrite an <code>id</code> we already have assigned in the DB. Deciding the <code>id</code> should be done by the backend or the database, not by the client.</p> <p>Additionally, we create a <code>secret_name</code> for the hero, but so far, we are returning it everywhere, that's not very secret... \ud83d\ude05</p> <p>We'll fix these things by adding a few extra models. Here's where SQLDev will shine. \u2728</p>"},{"location":"tutorial/sql-databases/#create-multiple-models","title":"Create Multiple Models","text":"<p>In SQLDev, any model class that has <code>table=True</code> is a table model.</p> <p>And any model class that doesn't have <code>table=True</code> is a data model, these ones are actually just Pydantic models (with a couple of small extra features). \ud83e\udd13</p> <p>With SQLDev, we can use inheritance to avoid duplicating all the fields in all the cases.</p>"},{"location":"tutorial/sql-databases/#herobase-the-base-class","title":"<code>HeroBase</code> - the base class","text":"<p>Let's start with a <code>HeroBase</code> model that has all the fields that are shared by all the models:</p> <ul> <li><code>name</code></li> <li><code>age</code></li> </ul> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#hero-the-table-model","title":"<code>Hero</code> - the table model","text":"<p>Then let's create <code>Hero</code>, the actual table model, with the extra fields that are not always in the other models:</p> <ul> <li><code>id</code></li> <li><code>secret_name</code></li> </ul> <p>Because <code>Hero</code> inherits form <code>HeroBase</code>, it also has the fields declared in <code>HeroBase</code>, so all the fields for <code>Hero</code> are:</p> <ul> <li><code>id</code></li> <li><code>name</code></li> <li><code>age</code></li> <li><code>secret_name</code></li> </ul> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#heropublic-the-public-data-model","title":"<code>HeroPublic</code> - the public data model","text":"<p>Next, we create a <code>HeroPublic</code> model, this is the one that will be returned to the clients of the API.</p> <p>It has the same fields as <code>HeroBase</code>, so it won't include <code>secret_name</code>.</p> <p>Finally, the identity of our heroes is protected! \ud83e\udd77</p> <p>It also re-declares <code>id: int</code>. By doing this, we are making a contract with the API clients, so that they can always expect the <code>id</code> to be there and to be an <code>int</code> (it will never be <code>None</code>).</p> <p>Tip</p> <p>Having the return model ensure that a value is always available and always <code>int</code> (not <code>None</code>) is very useful for the API clients, they can write much simpler code having this certainty.</p> <p>Also, automatically generated clients will have simpler interfaces, so that the developers communicating with your API can have a much better time working with your API. \ud83d\ude0e</p> <p>All the fields in <code>HeroPublic</code> are the same as in <code>HeroBase</code>, with <code>id</code> declared as <code>int</code> (not <code>None</code>):</p> <ul> <li><code>id</code></li> <li><code>name</code></li> <li><code>age</code></li> </ul> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#herocreate-the-data-model-to-create-a-hero","title":"<code>HeroCreate</code> - the data model to create a hero","text":"<p>Now we create a <code>HeroCreate</code> model, this is the one that will validate the data from the clients.</p> <p>It has the same fields as <code>HeroBase</code>, and it also has <code>secret_name</code>.</p> <p>Now, when the clients create a new hero, they will send the <code>secret_name</code>, it will be stored in the database, but those secret names won't be returned in the API to the clients.</p> <p>Tip</p> <p>This is how you would handle passwords. Receive them, but don't return them in the API.</p> <p>You would also hash the values of the passwords before storing them, never store them in plain text.</p> <p>The fields of <code>HeroCreate</code> are:</p> <ul> <li><code>name</code></li> <li><code>age</code></li> <li><code>secret_name</code></li> </ul> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#heroupdate-the-data-model-to-update-a-hero","title":"<code>HeroUpdate</code> - the data model to update a hero","text":"<p>We didn't have a way to update a hero in the previous version of the app, but now with multiple models, we can do it. \ud83c\udf89</p> <p>The <code>HeroUpdate</code> data model is somewhat special, it has all the same fields that would be needed to create a new hero, but all the fields are optional (they all have a default value). This way, when you update a hero, you can send just the fields that you want to update.</p> <p>Because all the fields actually change (the type now includes <code>None</code> and they now have a default value of <code>None</code>), we need to re-declare them.</p> <p>We don't really need to inherit from <code>HeroBase</code> because we are re-declaring all the fields. I'll leave it inheriting just for consistency, but this is not necessary. It's more a matter of personal taste. \ud83e\udd37</p> <p>The fields of <code>HeroUpdate</code> are:</p> <ul> <li><code>name</code></li> <li><code>age</code></li> <li><code>secret_name</code></li> </ul> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#create-with-herocreate-and-return-a-heropublic","title":"Create with <code>HeroCreate</code> and return a <code>HeroPublic</code>","text":"<p>Now that we have multiple models, we can update the parts of the app that use them.</p> <p>We receive in the request a <code>HeroCreate</code> data model, and from it, we create a <code>Hero</code> table model.</p> <p>This new table model <code>Hero</code> will have the fields sent by the client, and will also have an <code>id</code> generated by the database.</p> <p>Then we return the same table model <code>Hero</code> as is from the function. But as we declare the <code>response_model</code> with the <code>HeroPublic</code> data model, ReadyAPI will use <code>HeroPublic</code> to validate and serialize the data.</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Now we use <code>response_model=HeroPublic</code> instead of the return type annotation <code>-&gt; HeroPublic</code> because the value that we are returning is actually not a <code>HeroPublic</code>.</p> <p>If we had declared <code>-&gt; HeroPublic</code>, your editor and linter would complain (rightfully so) that you are returning a <code>Hero</code> instead of a <code>HeroPublic</code>.</p> <p>By declaring it in <code>response_model</code> we are telling ReadyAPI to do its thing, without interfering with the type annotations and the help from your editor and other tools.</p>"},{"location":"tutorial/sql-databases/#read-heroes-with-heropublic","title":"Read Heroes with <code>HeroPublic</code>","text":"<p>We can do the same as before to read <code>Hero</code>s, again, we use <code>response_model=list[HeroPublic]</code> to ensure that the data is validated and serialized correctly.</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#read-one-hero-with-heropublic","title":"Read One Hero with <code>HeroPublic</code>","text":"<p>We can read a single hero:</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#update-a-hero-with-heroupdate","title":"Update a Hero with <code>HeroUpdate</code>","text":"<p>We can update a hero. For this we use an HTTP <code>PATCH</code> operation.</p> <p>And in the code, we get a <code>dict</code> with all the data sent by the client, only the data sent by the client, excluding any values that would be there just for being the default values. To do it we use <code>exclude_unset=True</code>. This is the main trick. \ud83e\ude84</p> <p>Then we use <code>hero_db.sqldev_update(hero_data)</code> to update the <code>hero_db</code> with the data from <code>hero_data</code>.</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#delete-a-hero-again","title":"Delete a Hero Again","text":"<p>Deleting a hero stays pretty much the same.</p> <p>We won't satisfy the desire to refactor everything in this one. \ud83d\ude05</p> Python 3.10+ <pre><code># Code above omitted \ud83d\udc46\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+Python 3.10+ - non-AnnotatedPython 3.9+ - non-AnnotatedPython 3.8+ - non-Annotated <pre><code>from typing import Annotated, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\nfrom typing_extensions import Annotated\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\nSessionDep = Annotated[Session, Depends(get_session)]\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <p>Tip</p> <p>Prefer to use the <code>Annotated</code> version if possible.</p> <pre><code>from typing import List, Union\n\nfrom readyapi import Depends, HTTPException, Query, ReadyAPI\nfrom sqldev import Field, Session, SQLDev, create_engine, select\n\n\nclass HeroBase(SQLDev):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n\n\nclass Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str\n\n\nclass HeroPublic(HeroBase):\n    id: int\n\n\nclass HeroCreate(HeroBase):\n    secret_name: str\n\n\nclass HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLDev.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\napp = ReadyAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero\n\n\n@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes\n\n\n@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero\n\n\n@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqldev_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db\n\n\n@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"tutorial/sql-databases/#run-the-app-again","title":"Run the App Again","text":"<p>You can run the app again:</p> <pre><code>$ readyapi dev main.py\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>If you go to the <code>/docs</code> API UI, you will see that it is now updated, and it won't expect to receive the <code>id</code> from the client when creating a hero, etc.</p>"},{"location":"tutorial/sql-databases/#recap","title":"Recap","text":"<p>You can use SQLDev to interact with a SQL database and simplify the code with data models  and table models.</p> <p>You can learn a lot more at the SQLDev docs, there's a longer mini tutorial on using SQLDev with ReadyAPI. \ud83d\ude80</p>"},{"location":"advanced/openapi-webhooks/","title":"OpenAPI Webhooks","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>There are cases where you want to tell your API users that your app could call their app (sending a request) with some data, normally to notify of some type of event.</p> <p>This means that instead of the normal process of your users sending requests to your API, it's your API (or your app) that could send requests to their system (to their API, their app).</p> <p>This is normally called a webhook.</p>"},{"location":"advanced/openapi-webhooks/#webhooks-steps","title":"Webhooks steps","text":"<p>The process normally is that you define in your code what is the message that you will send, the body of the request.</p> <p>You also define in some way at which moments your app will send those requests or events.</p> <p>And your users define in some way (for example in a web dashboard somewhere) the URL where your app should send those requests.</p> <p>All the logic about how to register the URLs for webhooks and the code to actually send those requests is up to you. You write it however you want to in your own code.</p>"},{"location":"advanced/openapi-webhooks/#documenting-webhooks-with-readyapi-and-openapi","title":"Documenting webhooks with ReadyAPI and OpenAPI","text":"<p>With ReadyAPI, using OpenAPI, you can define the names of these webhooks, the types of HTTP operations that your app can send (e.g. <code>POST</code>, <code>PUT</code>, etc.) and the request bodies that your app would send.</p> <p>This can make it a lot easier for your users to implement their APIs to receive your webhook requests, they might even be able to autogenerate some of their own API code.</p> <p>Info</p> <p>Webhooks are available in OpenAPI 3.1.0 and above, supported by ReadyAPI <code>0.99.0</code> and above.</p>"},{"location":"advanced/openapi-webhooks/#an-app-with-webhooks","title":"An app with webhooks","text":"<p>When you create a ReadyAPI application, there is a <code>webhooks</code> attribute that you can use to define webhooks, the same way you would define path operations, for example with <code>@app.webhooks.post()</code>.</p> Python 3.8+ <pre><code>from datetime import datetime\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n\nclass Subscription(BaseModel):\n    username: str\n    monthly_fee: float\n    start_date: datetime\n\n\n@app.webhooks.post(\"new-subscription\")\ndef new_subscription(body: Subscription):\n    \"\"\"\n    When a new user subscribes to your service we'll send you a POST request with this\n    data to the URL that you register for the event `new-subscription` in the dashboard.\n    \"\"\"\n\n\n@app.get(\"/users/\")\ndef read_users():\n    return [\"Rick\", \"Morty\"]\n</code></pre> <p>The webhooks that you define will end up in the OpenAPI schema and the automatic docs UI.</p> <p>Info</p> <p>The <code>app.webhooks</code> object is actually just an <code>APIRouter</code>, the same type you would use when structuring your app with multiple files.</p> <p>Notice that with webhooks you are actually not declaring a path (like <code>/items/</code>), the text you pass there is just an identifier of the webhook (the name of the event), for example in <code>@app.webhooks.post(\"new-subscription\")</code>, the webhook name is <code>new-subscription</code>.</p> <p>This is because it is expected that your users would define the actual URL path where they want to receive the webhook request in some other way (e.g. a web dashboard).</p>"},{"location":"advanced/openapi-webhooks/#check-the-docs","title":"Check the docs","text":"<p>Now you can start your app and go to http://127.0.0.1:8000/docs.</p> <p>You will see your docs have the normal path operations and now also some webhooks:</p> <p></p>"},{"location":"readyapi-cli/","title":"ReadyAPI CLI","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>ReadyAPI CLI is a command line program that you can use to serve your ReadyAPI app, manage your ReadyAPI project, and more.</p> <p>When you install ReadyAPI (e.g. with <code>pip install \"readyapi[standard]\"</code>), it includes a package called <code>readyapi-cli</code>, this package provides the <code>readyapi</code> command in the terminal.</p> <p>To run your ReadyAPI app for development, you can use the <code>readyapi dev</code> command:</p> <pre><code>$ &lt;font color=\"#4E9A06\"&gt;readyapi&lt;/font&gt; dev &lt;u style=\"text-decoration-style:solid\"&gt;main.py&lt;/u&gt;\n\n  &lt;span style=\"background-color:#009485\"&gt;&lt;font color=\"#D3D7CF\"&gt; ReadyAPI &lt;/font&gt;&lt;/span&gt;  Starting development server \ud83d\ude80\n\n             Searching for package file structure from directories with\n             &lt;font color=\"#3465A4\"&gt;__init__.py&lt;/font&gt; files\n             Importing from &lt;font color=\"#75507B\"&gt;/home/user/code/&lt;/font&gt;&lt;font color=\"#AD7FA8\"&gt;awesomeapp&lt;/font&gt;\n\n   &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; module &lt;/font&gt;&lt;/span&gt;  \ud83d\udc0d main.py\n\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; code &lt;/font&gt;&lt;/span&gt;  Importing the ReadyAPI app object from the module with the\n             following code:\n\n             &lt;u style=\"text-decoration-style:solid\"&gt;from &lt;/u&gt;&lt;u style=\"text-decoration-style:solid\"&gt;&lt;b&gt;main&lt;/b&gt;&lt;/u&gt;&lt;u style=\"text-decoration-style:solid\"&gt; import &lt;/u&gt;&lt;u style=\"text-decoration-style:solid\"&gt;&lt;b&gt;app&lt;/b&gt;&lt;/u&gt;\n\n      &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; app &lt;/font&gt;&lt;/span&gt;  Using import string: &lt;font color=\"#3465A4\"&gt;main:app&lt;/font&gt;\n\n   &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; server &lt;/font&gt;&lt;/span&gt;  Server started at &lt;font color=\"#729FCF\"&gt;&lt;u style=\"text-decoration-style:solid\"&gt;http://127.0.0.1:8000&lt;/u&gt;&lt;/font&gt;\n   &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; server &lt;/font&gt;&lt;/span&gt;  Documentation at &lt;font color=\"#729FCF\"&gt;&lt;u style=\"text-decoration-style:solid\"&gt;http://127.0.0.1:8000/docs&lt;/u&gt;&lt;/font&gt;\n\n      &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; tip &lt;/font&gt;&lt;/span&gt;  Running in development mode, for production use:\n             &lt;b&gt;readyapi run&lt;/b&gt;\n\n             Logs:\n\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; INFO &lt;/font&gt;&lt;/span&gt;  Will watch for changes in these directories:\n             &lt;b&gt;[&lt;/b&gt;&lt;font color=\"#4E9A06\"&gt;&amp;apos;/home/user/code/awesomeapp&amp;apos;&lt;/font&gt;&lt;b&gt;]&lt;/b&gt;\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; INFO &lt;/font&gt;&lt;/span&gt;  Uvicorn running on &lt;font color=\"#729FCF\"&gt;&lt;u style=\"text-decoration-style:solid\"&gt;http://127.0.0.1:8000&lt;/u&gt;&lt;/font&gt; &lt;b&gt;(&lt;/b&gt;Press CTRL+C to\n             quit&lt;b&gt;)&lt;/b&gt;\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; INFO &lt;/font&gt;&lt;/span&gt;  Started reloader process &lt;b&gt;[&lt;/b&gt;&lt;font color=\"#34E2E2\"&gt;&lt;b&gt;383138&lt;/b&gt;&lt;/font&gt;&lt;b&gt;]&lt;/b&gt; using WatchFiles\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; INFO &lt;/font&gt;&lt;/span&gt;  Started server process &lt;b&gt;[&lt;/b&gt;&lt;font color=\"#34E2E2\"&gt;&lt;b&gt;383153&lt;/b&gt;&lt;/font&gt;&lt;b&gt;]&lt;/b&gt;\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; INFO &lt;/font&gt;&lt;/span&gt;  Waiting for application startup.\n     &lt;span style=\"background-color:#007166\"&gt;&lt;font color=\"#D3D7CF\"&gt; INFO &lt;/font&gt;&lt;/span&gt;  Application startup complete.\n</code></pre> <p>The command line program called <code>readyapi</code> is ReadyAPI CLI.</p> <p>ReadyAPI CLI takes the path to your Python program (e.g. <code>main.py</code>) and automatically detects the <code>ReadyAPI</code> instance (commonly named <code>app</code>), determines the correct import process, and then serves it.</p> <p>For production you would use <code>readyapi run</code> instead. \ud83d\ude80</p> <p>Internally, ReadyAPI CLI uses Uvicorn, a high-performance, production-ready, ASGI server. \ud83d\ude0e</p>"},{"location":"readyapi-cli/#readyapi-dev","title":"<code>readyapi dev</code>","text":"<p>Running <code>readyapi dev</code> initiates development mode.</p> <p>By default, auto-reload is enabled, automatically reloading the server when you make changes to your code. This is resource-intensive and could be less stable than when it's disabled. You should only use it for development. It also listens on the IP address <code>127.0.0.1</code>, which is the IP for your machine to communicate with itself alone (<code>localhost</code>).</p>"},{"location":"readyapi-cli/#readyapi-run","title":"<code>readyapi run</code>","text":"<p>Executing <code>readyapi run</code> starts ReadyAPI in production mode by default.</p> <p>By default, auto-reload is disabled. It also listens on the IP address <code>0.0.0.0</code>, which means all the available IP addresses, this way it will be publicly accessible to anyone that can communicate with the machine. This is how you would normally run it in production, for example, in a container.</p> <p>In most cases you would (and should) have a \"termination proxy\" handling HTTPS for you on top, this will depend on how you deploy your application, your provider might do this for you, or you might need to set it up yourself.</p> <p>Tip</p> <p>You can learn more about it in the deployment documentation.</p>"},{"location":"deployment/cloud/","title":"Deploy ReadyAPI on Cloud Providers","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>You can use virtually any cloud provider to deploy your ReadyAPI application.</p> <p>In most of the cases, the main cloud providers have guides to deploy ReadyAPI with them.</p>"},{"location":"deployment/cloud/#cloud-providers-sponsors","title":"Cloud Providers - Sponsors","text":"<p>Some cloud providers \u2728 sponsor ReadyAPI \u2728, this ensures the continued and healthy development of ReadyAPI and its ecosystem.</p> <p>And it shows their true commitment to ReadyAPI and its community (you), as they not only want to provide you a good service but also want to make sure you have a good and healthy framework, ReadyAPI. \ud83d\ude47</p> <p>You might want to try their services and follow their guides:</p> <ul> <li>Platform.sh</li> <li>Porter</li> <li>Render</li> </ul>"},{"location":"how-to/","title":"How To - Recipes","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>Here you will see different recipes or \"how to\" guides for several topics.</p> <p>Most of these ideas would be more or less independent, and in most cases you should only need to study them if they apply directly to your project.</p> <p>If something seems interesting and useful to your project, go ahead and check it, but otherwise, you might probably just skip them.</p> <p>Tip</p> <p>If you want to learn ReadyAPI in a structured way (recommended), go and read the Tutorial - User Guide chapter by chapter instead.</p>"},{"location":"how-to/general/","title":"General - How To - Recipes","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>Here are several pointers to other places in the docs, for general or frequent questions.</p>"},{"location":"how-to/general/#filter-data-security","title":"Filter Data - Security","text":"<p>To ensure that you don't return more data than you should, read the docs for Tutorial - Response Model - Return Type.</p>"},{"location":"how-to/general/#documentation-tags-openapi","title":"Documentation Tags - OpenAPI","text":"<p>To add tags to your path operations, and group them in the docs UI, read the docs for Tutorial - Path Operation Configurations - Tags.</p>"},{"location":"how-to/general/#documentation-summary-and-description-openapi","title":"Documentation Summary and Description - OpenAPI","text":"<p>To add a summary and description to your path operations, and show them in the docs UI, read the docs for Tutorial - Path Operation Configurations - Summary and Description.</p>"},{"location":"how-to/general/#documentation-response-description-openapi","title":"Documentation Response description - OpenAPI","text":"<p>To define the description of the response, shown in the docs UI, read the docs for Tutorial - Path Operation Configurations - Response description.</p>"},{"location":"how-to/general/#documentation-deprecate-a-path-operation-openapi","title":"Documentation Deprecate a Path Operation - OpenAPI","text":"<p>To deprecate a path operation, and show it in the docs UI, read the docs for Tutorial - Path Operation Configurations - Deprecation.</p>"},{"location":"how-to/general/#convert-any-data-to-json-compatible","title":"Convert any Data to JSON-compatible","text":"<p>To convert any data to JSON-compatible, read the docs for Tutorial - JSON Compatible Encoder.</p>"},{"location":"how-to/general/#openapi-metadata-docs","title":"OpenAPI Metadata - Docs","text":"<p>To add metadata to your OpenAPI schema, including a license, version, contact, etc, read the docs for Tutorial - Metadata and Docs URLs.</p>"},{"location":"how-to/general/#openapi-custom-url","title":"OpenAPI Custom URL","text":"<p>To customize the OpenAPI URL (or remove it), read the docs for Tutorial - Metadata and Docs URLs.</p>"},{"location":"how-to/general/#openapi-docs-urls","title":"OpenAPI Docs URLs","text":"<p>To update the URLs used for the automatically generated docs user interfaces, read the docs for Tutorial - Metadata and Docs URLs.</p>"},{"location":"how-to/separate-openapi-schemas/","title":"Separate OpenAPI Schemas for Input and Output or Not","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>When using Pydantic v2, the generated OpenAPI is a bit more exact and correct than before. \ud83d\ude0e</p> <p>In fact, in some cases, it will even have two JSON Schemas in OpenAPI for the same Pydantic model, for input and output, depending on if they have default values.</p> <p>Let's see how that works and how to change it if you need to do that.</p>"},{"location":"how-to/separate-openapi-schemas/#pydantic-models-for-input-and-output","title":"Pydantic Models for Input and Output","text":"<p>Let's say you have a Pydantic model with default values, like this one:</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Optional\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Optional[str] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; List[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre>"},{"location":"how-to/separate-openapi-schemas/#model-for-input","title":"Model for Input","text":"<p>If you use this model as an input like here:</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Optional\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Optional[str] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; List[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> <p>...then the <code>description</code> field will not be required. Because it has a default value of <code>None</code>.</p>"},{"location":"how-to/separate-openapi-schemas/#input-model-in-docs","title":"Input Model in Docs","text":"<p>You can confirm that in the docs, the <code>description</code> field doesn't have a red asterisk, it's not marked as required:</p>"},{"location":"how-to/separate-openapi-schemas/#model-for-output","title":"Model for Output","text":"<p>But if you use the same model as an output, like here:</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Optional\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Optional[str] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n\n\napp = ReadyAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; List[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> <p>...then because <code>description</code> has a default value, if you don't return anything for that field, it will still have that default value.</p>"},{"location":"how-to/separate-openapi-schemas/#model-for-output-response-data","title":"Model for Output Response Data","text":"<p>If you interact with the docs and check the response, even though the code didn't add anything in one of the <code>description</code> fields, the JSON response contains the default value (<code>null</code>):</p> <p>This means that it will always have a value, it's just that sometimes the value could be <code>None</code> (or <code>null</code> in JSON).</p> <p>That means that, clients using your API don't have to check if the value exists or not, they can assume the field will always be there, but just that in some cases it will have the default value of <code>None</code>.</p> <p>The way to describe this in OpenAPI, is to mark that field as required, because it will always be there.</p> <p>Because of that, the JSON Schema for a model can be different depending on if it's used for input or output:</p> <ul> <li>for input the <code>description</code> will not be required</li> <li>for output it will be required (and possibly <code>None</code>, or in JSON terms, <code>null</code>)</li> </ul>"},{"location":"how-to/separate-openapi-schemas/#model-for-output-in-docs","title":"Model for Output in Docs","text":"<p>You can check the output model in the docs too, both <code>name</code> and <code>description</code> are marked as required with a red asterisk:</p>"},{"location":"how-to/separate-openapi-schemas/#model-for-input-and-output-in-docs","title":"Model for Input and Output in Docs","text":"<p>And if you check all the available Schemas (JSON Schemas) in OpenAPI, you will see that there are two, one <code>Item-Input</code> and one <code>Item-Output</code>.</p> <p>For <code>Item-Input</code>, <code>description</code> is not required, it doesn't have a red asterisk.</p> <p>But for <code>Item-Output</code>, <code>description</code> is required, it has a red asterisk.</p> <p>With this feature from Pydantic v2, your API documentation is more precise, and if you have autogenerated clients and SDKs, they will be more precise too, with a better developer experience and consistency. \ud83c\udf89</p>"},{"location":"how-to/separate-openapi-schemas/#do-not-separate-schemas","title":"Do not Separate Schemas","text":"<p>Now, there are some cases where you might want to have the same schema for input and output.</p> <p>Probably the main use case for this is if you already have some autogenerated client code/SDKs and you don't want to update all the autogenerated client code/SDKs yet, you probably will want to do it at some point, but maybe not right now.</p> <p>In that case, you can disable this feature in ReadyAPI, with the parameter <code>separate_input_output_schemas=False</code>.</p> <p>Info</p> <p>Support for <code>separate_input_output_schemas</code> was added in ReadyAPI <code>0.102.0</code>. \ud83e\udd13</p> Python 3.10+ <pre><code>from pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\n\napp = ReadyAPI(separate_input_output_schemas=False)\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> \ud83e\udd13 Other versions and variants Python 3.9+Python 3.8+ <pre><code>from typing import Optional\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Optional[str] = None\n\n\napp = ReadyAPI(separate_input_output_schemas=False)\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre> <pre><code>from typing import List, Union\n\nfrom pydantic import BaseModel\nfrom readyapi import ReadyAPI\n\n\nclass Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n\n\napp = ReadyAPI(separate_input_output_schemas=False)\n\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item\n\n\n@app.get(\"/items/\")\ndef read_items() -&gt; List[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]\n</code></pre>"},{"location":"how-to/separate-openapi-schemas/#same-schema-for-input-and-output-models-in-docs","title":"Same Schema for Input and Output Models in Docs","text":"<p>And now there will be one single schema for input and output for the model, only <code>Item</code>, and it will have <code>description</code> as not required:</p> <p>This is the same behavior as in Pydantic v1. \ud83e\udd13</p>"},{"location":"how-to/custom-docs-ui-assets/","title":"Custom Docs UI Static Assets (Self-Hosting)","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>The API docs use Swagger UI and ReDoc, and each of those need some JavaScript and CSS files.</p> <p>By default, those files are served from a CDN.</p> <p>But it's possible to customize it, you can set a specific CDN, or serve the files yourself.</p>"},{"location":"how-to/custom-docs-ui-assets/#custom-cdn-for-javascript-and-css","title":"Custom CDN for JavaScript and CSS","text":"<p>Let's say that you want to use a different CDN, for example you want to use <code>https://unpkg.com/</code>.</p> <p>This could be useful if for example you live in a country that restricts some URLs.</p>"},{"location":"how-to/custom-docs-ui-assets/#disable-the-automatic-docs","title":"Disable the automatic docs","text":"<p>The first step is to disable the automatic docs, as by default, those use the default CDN.</p> <p>To disable them, set their URLs to <code>None</code> when creating your <code>ReadyAPI</code> app:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.docs import (\n    get_redoc_html,\n    get_swagger_ui_html,\n    get_swagger_ui_oauth2_redirect_html,\n)\n\napp = ReadyAPI(docs_url=None, redoc_url=None)\n\n\n@app.get(\"/docs\", include_in_schema=False)\nasync def custom_swagger_ui_html():\n    return get_swagger_ui_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - Swagger UI\",\n        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,\n        swagger_js_url=\"https://unpkg.com/swagger-ui-dist@5/swagger-ui-bundle.js\",\n        swagger_css_url=\"https://unpkg.com/swagger-ui-dist@5/swagger-ui.css\",\n    )\n\n\n@app.get(app.swagger_ui_oauth2_redirect_url, include_in_schema=False)\nasync def swagger_ui_redirect():\n    return get_swagger_ui_oauth2_redirect_html()\n\n\n@app.get(\"/redoc\", include_in_schema=False)\nasync def redoc_html():\n    return get_redoc_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - ReDoc\",\n        redoc_js_url=\"https://unpkg.com/redoc@2/bundles/redoc.standalone.js\",\n    )\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre>"},{"location":"how-to/custom-docs-ui-assets/#include-the-custom-docs","title":"Include the custom docs","text":"<p>Now you can create the path operations for the custom docs.</p> <p>You can reuse ReadyAPI's internal functions to create the HTML pages for the docs, and pass them the needed arguments:</p> <ul> <li><code>openapi_url</code>: the URL where the HTML page for the docs can get the OpenAPI schema for your API. You can use here the attribute <code>app.openapi_url</code>.</li> <li><code>title</code>: the title of your API.</li> <li><code>oauth2_redirect_url</code>: you can use <code>app.swagger_ui_oauth2_redirect_url</code> here to use the default.</li> <li><code>swagger_js_url</code>: the URL where the HTML for your Swagger UI docs can get the JavaScript file. This is the custom CDN URL.</li> <li><code>swagger_css_url</code>: the URL where the HTML for your Swagger UI docs can get the CSS file. This is the custom CDN URL.</li> </ul> <p>And similarly for ReDoc...</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.docs import (\n    get_redoc_html,\n    get_swagger_ui_html,\n    get_swagger_ui_oauth2_redirect_html,\n)\n\napp = ReadyAPI(docs_url=None, redoc_url=None)\n\n\n@app.get(\"/docs\", include_in_schema=False)\nasync def custom_swagger_ui_html():\n    return get_swagger_ui_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - Swagger UI\",\n        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,\n        swagger_js_url=\"https://unpkg.com/swagger-ui-dist@5/swagger-ui-bundle.js\",\n        swagger_css_url=\"https://unpkg.com/swagger-ui-dist@5/swagger-ui.css\",\n    )\n\n\n@app.get(app.swagger_ui_oauth2_redirect_url, include_in_schema=False)\nasync def swagger_ui_redirect():\n    return get_swagger_ui_oauth2_redirect_html()\n\n\n@app.get(\"/redoc\", include_in_schema=False)\nasync def redoc_html():\n    return get_redoc_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - ReDoc\",\n        redoc_js_url=\"https://unpkg.com/redoc@2/bundles/redoc.standalone.js\",\n    )\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre> <p>Tip</p> <p>The path operation for <code>swagger_ui_redirect</code> is a helper for when you use OAuth2.</p> <p>If you integrate your API with an OAuth2 provider, you will be able to authenticate and come back to the API docs with the acquired credentials. And interact with it using the real OAuth2 authentication.</p> <p>Swagger UI will handle it behind the scenes for you, but it needs this \"redirect\" helper.</p>"},{"location":"how-to/custom-docs-ui-assets/#create-a-path-operation-to-test-it","title":"Create a path operation to test it","text":"<p>Now, to be able to test that everything works, create a path operation:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.docs import (\n    get_redoc_html,\n    get_swagger_ui_html,\n    get_swagger_ui_oauth2_redirect_html,\n)\n\napp = ReadyAPI(docs_url=None, redoc_url=None)\n\n\n@app.get(\"/docs\", include_in_schema=False)\nasync def custom_swagger_ui_html():\n    return get_swagger_ui_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - Swagger UI\",\n        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,\n        swagger_js_url=\"https://unpkg.com/swagger-ui-dist@5/swagger-ui-bundle.js\",\n        swagger_css_url=\"https://unpkg.com/swagger-ui-dist@5/swagger-ui.css\",\n    )\n\n\n@app.get(app.swagger_ui_oauth2_redirect_url, include_in_schema=False)\nasync def swagger_ui_redirect():\n    return get_swagger_ui_oauth2_redirect_html()\n\n\n@app.get(\"/redoc\", include_in_schema=False)\nasync def redoc_html():\n    return get_redoc_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - ReDoc\",\n        redoc_js_url=\"https://unpkg.com/redoc@2/bundles/redoc.standalone.js\",\n    )\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre>"},{"location":"how-to/custom-docs-ui-assets/#test-it","title":"Test it","text":"<p>Now, you should be able to go to your docs at http://127.0.0.1:8000/docs, and reload the page, it will load those assets from the new CDN.</p>"},{"location":"how-to/custom-docs-ui-assets/#self-hosting-javascript-and-css-for-docs","title":"Self-hosting JavaScript and CSS for docs","text":"<p>Self-hosting the JavaScript and CSS could be useful if, for example, you need your app to keep working even while offline, without open Internet access, or in a local network.</p> <p>Here you'll see how to serve those files yourself, in the same ReadyAPI app, and configure the docs to use them.</p>"},{"location":"how-to/custom-docs-ui-assets/#project-file-structure","title":"Project file structure","text":"<p>Let's say your project file structure looks like this:</p> <pre><code>.\n\u251c\u2500\u2500 app\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 main.py\n</code></pre> <p>Now create a directory to store those static files.</p> <p>Your new file structure could look like this:</p> <pre><code>.\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.py\n\u2514\u2500\u2500 static/\n</code></pre>"},{"location":"how-to/custom-docs-ui-assets/#download-the-files","title":"Download the files","text":"<p>Download the static files needed for the docs and put them on that <code>static/</code> directory.</p> <p>You can probably right-click each link and select an option similar to <code>Save link as...</code>.</p> <p>Swagger UI uses the files:</p> <ul> <li><code>swagger-ui-bundle.js</code></li> <li><code>swagger-ui.css</code></li> </ul> <p>And ReDoc uses the file:</p> <ul> <li><code>redoc.standalone.js</code></li> </ul> <p>After that, your file structure could look like:</p> <pre><code>.\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.py\n\u2514\u2500\u2500 static\n    \u251c\u2500\u2500 redoc.standalone.js\n    \u251c\u2500\u2500 swagger-ui-bundle.js\n    \u2514\u2500\u2500 swagger-ui.css\n</code></pre>"},{"location":"how-to/custom-docs-ui-assets/#serve-the-static-files","title":"Serve the static files","text":"<ul> <li>Import <code>StaticFiles</code>.</li> <li>\"Mount\" a <code>StaticFiles()</code> instance in a specific path.</li> </ul> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.docs import (\n    get_redoc_html,\n    get_swagger_ui_html,\n    get_swagger_ui_oauth2_redirect_html,\n)\nfrom readyapi.staticfiles import StaticFiles\n\napp = ReadyAPI(docs_url=None, redoc_url=None)\n\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n\n\n@app.get(\"/docs\", include_in_schema=False)\nasync def custom_swagger_ui_html():\n    return get_swagger_ui_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - Swagger UI\",\n        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,\n        swagger_js_url=\"/static/swagger-ui-bundle.js\",\n        swagger_css_url=\"/static/swagger-ui.css\",\n    )\n\n\n@app.get(app.swagger_ui_oauth2_redirect_url, include_in_schema=False)\nasync def swagger_ui_redirect():\n    return get_swagger_ui_oauth2_redirect_html()\n\n\n@app.get(\"/redoc\", include_in_schema=False)\nasync def redoc_html():\n    return get_redoc_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - ReDoc\",\n        redoc_js_url=\"/static/redoc.standalone.js\",\n    )\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre>"},{"location":"how-to/custom-docs-ui-assets/#test-the-static-files","title":"Test the static files","text":"<p>Start your application and go to http://127.0.0.1:8000/static/redoc.standalone.js.</p> <p>You should see a very long JavaScript file for ReDoc.</p> <p>It could start with something like:</p> <pre><code>/*! For license information please see redoc.standalone.js.LICENSE.txt */\n!function(e,t){\"object\"==typeof exports&amp;&amp;\"object\"==typeof module?module.exports=t(require(\"null\")):\n...\n</code></pre> <p>That confirms that you are being able to serve static files from your app, and that you placed the static files for the docs in the correct place.</p> <p>Now we can configure the app to use those static files for the docs.</p>"},{"location":"how-to/custom-docs-ui-assets/#disable-the-automatic-docs-for-static-files","title":"Disable the automatic docs for static files","text":"<p>The same as when using a custom CDN, the first step is to disable the automatic docs, as those use the CDN by default.</p> <p>To disable them, set their URLs to <code>None</code> when creating your <code>ReadyAPI</code> app:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.docs import (\n    get_redoc_html,\n    get_swagger_ui_html,\n    get_swagger_ui_oauth2_redirect_html,\n)\nfrom readyapi.staticfiles import StaticFiles\n\napp = ReadyAPI(docs_url=None, redoc_url=None)\n\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n\n\n@app.get(\"/docs\", include_in_schema=False)\nasync def custom_swagger_ui_html():\n    return get_swagger_ui_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - Swagger UI\",\n        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,\n        swagger_js_url=\"/static/swagger-ui-bundle.js\",\n        swagger_css_url=\"/static/swagger-ui.css\",\n    )\n\n\n@app.get(app.swagger_ui_oauth2_redirect_url, include_in_schema=False)\nasync def swagger_ui_redirect():\n    return get_swagger_ui_oauth2_redirect_html()\n\n\n@app.get(\"/redoc\", include_in_schema=False)\nasync def redoc_html():\n    return get_redoc_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - ReDoc\",\n        redoc_js_url=\"/static/redoc.standalone.js\",\n    )\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre>"},{"location":"how-to/custom-docs-ui-assets/#include-the-custom-docs-for-static-files","title":"Include the custom docs for static files","text":"<p>And the same way as with a custom CDN, now you can create the path operations for the custom docs.</p> <p>Again, you can reuse ReadyAPI's internal functions to create the HTML pages for the docs, and pass them the needed arguments:</p> <ul> <li><code>openapi_url</code>: the URL where the HTML page for the docs can get the OpenAPI schema for your API. You can use here the attribute <code>app.openapi_url</code>.</li> <li><code>title</code>: the title of your API.</li> <li><code>oauth2_redirect_url</code>: you can use <code>app.swagger_ui_oauth2_redirect_url</code> here to use the default.</li> <li><code>swagger_js_url</code>: the URL where the HTML for your Swagger UI docs can get the JavaScript file. This is the one that your own app is now serving.</li> <li><code>swagger_css_url</code>: the URL where the HTML for your Swagger UI docs can get the CSS file. This is the one that your own app is now serving.</li> </ul> <p>And similarly for ReDoc...</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.docs import (\n    get_redoc_html,\n    get_swagger_ui_html,\n    get_swagger_ui_oauth2_redirect_html,\n)\nfrom readyapi.staticfiles import StaticFiles\n\napp = ReadyAPI(docs_url=None, redoc_url=None)\n\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n\n\n@app.get(\"/docs\", include_in_schema=False)\nasync def custom_swagger_ui_html():\n    return get_swagger_ui_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - Swagger UI\",\n        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,\n        swagger_js_url=\"/static/swagger-ui-bundle.js\",\n        swagger_css_url=\"/static/swagger-ui.css\",\n    )\n\n\n@app.get(app.swagger_ui_oauth2_redirect_url, include_in_schema=False)\nasync def swagger_ui_redirect():\n    return get_swagger_ui_oauth2_redirect_html()\n\n\n@app.get(\"/redoc\", include_in_schema=False)\nasync def redoc_html():\n    return get_redoc_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - ReDoc\",\n        redoc_js_url=\"/static/redoc.standalone.js\",\n    )\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre> <p>Tip</p> <p>The path operation for <code>swagger_ui_redirect</code> is a helper for when you use OAuth2.</p> <p>If you integrate your API with an OAuth2 provider, you will be able to authenticate and come back to the API docs with the acquired credentials. And interact with it using the real OAuth2 authentication.</p> <p>Swagger UI will handle it behind the scenes for you, but it needs this \"redirect\" helper.</p>"},{"location":"how-to/custom-docs-ui-assets/#create-a-path-operation-to-test-static-files","title":"Create a path operation to test static files","text":"<p>Now, to be able to test that everything works, create a path operation:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\nfrom readyapi.openapi.docs import (\n    get_redoc_html,\n    get_swagger_ui_html,\n    get_swagger_ui_oauth2_redirect_html,\n)\nfrom readyapi.staticfiles import StaticFiles\n\napp = ReadyAPI(docs_url=None, redoc_url=None)\n\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n\n\n@app.get(\"/docs\", include_in_schema=False)\nasync def custom_swagger_ui_html():\n    return get_swagger_ui_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - Swagger UI\",\n        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,\n        swagger_js_url=\"/static/swagger-ui-bundle.js\",\n        swagger_css_url=\"/static/swagger-ui.css\",\n    )\n\n\n@app.get(app.swagger_ui_oauth2_redirect_url, include_in_schema=False)\nasync def swagger_ui_redirect():\n    return get_swagger_ui_oauth2_redirect_html()\n\n\n@app.get(\"/redoc\", include_in_schema=False)\nasync def redoc_html():\n    return get_redoc_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - ReDoc\",\n        redoc_js_url=\"/static/redoc.standalone.js\",\n    )\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre>"},{"location":"how-to/custom-docs-ui-assets/#test-static-files-ui","title":"Test Static Files UI","text":"<p>Now, you should be able to disconnect your WiFi, go to your docs at http://127.0.0.1:8000/docs, and reload the page.</p> <p>And even without Internet, you would be able to see the docs for your API and interact with it.</p>"},{"location":"how-to/configure-swagger-ui/","title":"Configure Swagger UI","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>You can configure some extra Swagger UI parameters.</p> <p>To configure them, pass the <code>swagger_ui_parameters</code> argument when creating the <code>ReadyAPI()</code> app object or to the <code>get_swagger_ui_html()</code> function.</p> <p><code>swagger_ui_parameters</code> receives a dictionary with the configurations passed to Swagger UI directly.</p> <p>ReadyAPI converts the configurations to JSON to make them compatible with JavaScript, as that's what Swagger UI needs.</p>"},{"location":"how-to/configure-swagger-ui/#disable-syntax-highlighting","title":"Disable Syntax Highlighting","text":"<p>For example, you could disable syntax highlighting in Swagger UI.</p> <p>Without changing the settings, syntax highlighting is enabled by default:</p> <p></p> <p>But you can disable it by setting <code>syntaxHighlight</code> to <code>False</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(swagger_ui_parameters={\"syntaxHighlight\": False})\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre> <p>...and then Swagger UI won't show the syntax highlighting anymore:</p> <p></p>"},{"location":"how-to/configure-swagger-ui/#change-the-theme","title":"Change the Theme","text":"<p>The same way you could set the syntax highlighting theme with the key <code>\"syntaxHighlight.theme\"</code> (notice that it has a dot in the middle):</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(swagger_ui_parameters={\"syntaxHighlight\": {\"theme\": \"obsidian\"}})\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre> <p>That configuration would change the syntax highlighting color theme:</p> <p></p>"},{"location":"how-to/configure-swagger-ui/#change-default-swagger-ui-parameters","title":"Change Default Swagger UI Parameters","text":"<p>ReadyAPI includes some default configuration parameters appropriate for most of the use cases.</p> <p>It includes these default configurations:</p> Python 3.8+ <pre><code># Code above omitted \ud83d\udc46\n\nswagger_ui_default_parameters: Annotated[\n    Dict[str, Any],\n    Doc(\n        \"\"\"\n        Default configurations for Swagger UI.\n\n        You can use it as a template to add any other configurations needed.\n        \"\"\"\n    ),\n] = {\n    \"dom_id\": \"#swagger-ui\",\n    \"layout\": \"BaseLayout\",\n    \"deepLinking\": True,\n    \"showExtensions\": True,\n    \"showCommonExtensions\": True,\n}\n\n# Code below omitted \ud83d\udc47\n</code></pre> \ud83d\udc40 Full file preview Python 3.8+ <pre><code>import json\nfrom typing import Any, Dict, Optional\n\nfrom readyapi.encoders import jsonable_encoder\nfrom starlette.responses import HTMLResponse\nfrom typing_extensions import Annotated, Doc\n\nswagger_ui_default_parameters: Annotated[\n    Dict[str, Any],\n    Doc(\n        \"\"\"\n        Default configurations for Swagger UI.\n\n        You can use it as a template to add any other configurations needed.\n        \"\"\"\n    ),\n] = {\n    \"dom_id\": \"#swagger-ui\",\n    \"layout\": \"BaseLayout\",\n    \"deepLinking\": True,\n    \"showExtensions\": True,\n    \"showCommonExtensions\": True,\n}\n\n\ndef get_swagger_ui_html(\n    *,\n    openapi_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The OpenAPI URL that Swagger UI should load and use.\n\n            This is normally done automatically by ReadyAPI using the default URL\n            `/openapi.json`.\n            \"\"\"\n        ),\n    ],\n    title: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The HTML `&lt;title&gt;` content, normally shown in the browser tab.\n            \"\"\"\n        ),\n    ],\n    swagger_js_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL to use to load the Swagger UI JavaScript.\n\n            It is normally set to a CDN URL.\n            \"\"\"\n        ),\n    ] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui-bundle.js\",\n    swagger_css_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL to use to load the Swagger UI CSS.\n\n            It is normally set to a CDN URL.\n            \"\"\"\n        ),\n    ] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui.css\",\n    swagger_favicon_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL of the favicon to use. It is normally shown in the browser tab.\n            \"\"\"\n        ),\n    ] = \"https://readyapi.github.io/img/favicon.png\",\n    oauth2_redirect_url: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            The OAuth2 redirect URL, it is normally automatically handled by ReadyAPI.\n            \"\"\"\n        ),\n    ] = None,\n    init_oauth: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            A dictionary with Swagger UI OAuth2 initialization configurations.\n            \"\"\"\n        ),\n    ] = None,\n    swagger_ui_parameters: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Configuration parameters for Swagger UI.\n\n            It defaults to [swagger_ui_default_parameters][readyapi.openapi.docs.swagger_ui_default_parameters].\n            \"\"\"\n        ),\n    ] = None,\n) -&gt; HTMLResponse:\n    \"\"\"\n    Generate and return the HTML  that loads Swagger UI for the interactive\n    API docs (normally served at `/docs`).\n\n    You would only call this function yourself if you needed to override some parts,\n    for example the URLs to use to load Swagger UI's JavaScript and CSS.\n\n    Read more about it in the\n    [ReadyAPI docs for Configure Swagger UI](https://readyapi.github.io/how-to/configure-swagger-ui/)\n    and the [ReadyAPI docs for Custom Docs UI Static Assets (Self-Hosting)](https://readyapi.github.io/how-to/custom-docs-ui-assets/).\n    \"\"\"\n    current_swagger_ui_parameters = swagger_ui_default_parameters.copy()\n    if swagger_ui_parameters:\n        current_swagger_ui_parameters.update(swagger_ui_parameters)\n\n    html = f\"\"\"\n    &lt;!DOCTYPE html&gt;\n    &lt;html&gt;\n    &lt;head&gt;\n    &lt;link type=\"text/css\" rel=\"stylesheet\" href=\"{swagger_css_url}\"&gt;\n    &lt;link rel=\"shortcut icon\" href=\"{swagger_favicon_url}\"&gt;\n    &lt;title&gt;{title}&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;div id=\"swagger-ui\"&gt;\n    &lt;/div&gt;\n    &lt;script src=\"{swagger_js_url}\"&gt;&lt;/script&gt;\n    &lt;!-- `SwaggerUIBundle` is now available on the page --&gt;\n    &lt;script&gt;\n    const ui = SwaggerUIBundle({{\n        url: '{openapi_url}',\n    \"\"\"\n\n    for key, value in current_swagger_ui_parameters.items():\n        html += f\"{json.dumps(key)}: {json.dumps(jsonable_encoder(value))},\\n\"\n\n    if oauth2_redirect_url:\n        html += f\"oauth2RedirectUrl: window.location.origin + '{oauth2_redirect_url}',\"\n\n    html += \"\"\"\n    presets: [\n        SwaggerUIBundle.presets.apis,\n        SwaggerUIBundle.SwaggerUIStandalonePreset\n        ],\n    })\"\"\"\n\n    if init_oauth:\n        html += f\"\"\"\n        ui.initOAuth({json.dumps(jsonable_encoder(init_oauth))})\n        \"\"\"\n\n    html += \"\"\"\n    &lt;/script&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\"\n    return HTMLResponse(html)\n\n\ndef get_redoc_html(\n    *,\n    openapi_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The OpenAPI URL that ReDoc should load and use.\n\n            This is normally done automatically by ReadyAPI using the default URL\n            `/openapi.json`.\n            \"\"\"\n        ),\n    ],\n    title: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The HTML `&lt;title&gt;` content, normally shown in the browser tab.\n            \"\"\"\n        ),\n    ],\n    redoc_js_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL to use to load the ReDoc JavaScript.\n\n            It is normally set to a CDN URL.\n            \"\"\"\n        ),\n    ] = \"https://cdn.jsdelivr.net/npm/redoc@2/bundles/redoc.standalone.js\",\n    redoc_favicon_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL of the favicon to use. It is normally shown in the browser tab.\n            \"\"\"\n        ),\n    ] = \"https://readyapi.github.io/img/favicon.png\",\n    with_google_fonts: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Load and use Google Fonts.\n            \"\"\"\n        ),\n    ] = True,\n) -&gt; HTMLResponse:\n    \"\"\"\n    Generate and return the HTML response that loads ReDoc for the alternative\n    API docs (normally served at `/redoc`).\n\n    You would only call this function yourself if you needed to override some parts,\n    for example the URLs to use to load ReDoc's JavaScript and CSS.\n\n    Read more about it in the\n    [ReadyAPI docs for Custom Docs UI Static Assets (Self-Hosting)](https://readyapi.github.io/how-to/custom-docs-ui-assets/).\n    \"\"\"\n    html = f\"\"\"\n    &lt;!DOCTYPE html&gt;\n    &lt;html&gt;\n    &lt;head&gt;\n    &lt;title&gt;{title}&lt;/title&gt;\n    &lt;!-- needed for adaptive design --&gt;\n    &lt;meta charset=\"utf-8\"/&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    \"\"\"\n    if with_google_fonts:\n        html += \"\"\"\n    &lt;link href=\"https://fonts.googleapis.com/css?family=Montserrat:300,400,700|Roboto:300,400,700\" rel=\"stylesheet\"&gt;\n    \"\"\"\n    html += f\"\"\"\n    &lt;link rel=\"shortcut icon\" href=\"{redoc_favicon_url}\"&gt;\n    &lt;!--\n    ReDoc doesn't change outer page styles\n    --&gt;\n    &lt;style&gt;\n      body {{\n        margin: 0;\n        padding: 0;\n      }}\n    &lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;noscript&gt;\n        ReDoc requires Javascript to function. Please enable it to browse the documentation.\n    &lt;/noscript&gt;\n    &lt;redoc spec-url=\"{openapi_url}\"&gt;&lt;/redoc&gt;\n    &lt;script src=\"{redoc_js_url}\"&gt; &lt;/script&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\"\n    return HTMLResponse(html)\n\n\ndef get_swagger_ui_oauth2_redirect_html() -&gt; HTMLResponse:\n    \"\"\"\n    Generate the HTML response with the OAuth2 redirection for Swagger UI.\n\n    You normally don't need to use or change this.\n    \"\"\"\n    # copied from https://github.com/swagger-api/swagger-ui/blob/v4.14.0/dist/oauth2-redirect.html\n    html = \"\"\"\n    &lt;!doctype html&gt;\n    &lt;html lang=\"en-US\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;Swagger UI: OAuth2 Redirect&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;script&gt;\n        'use strict';\n        function run () {\n            var oauth2 = window.opener.swaggerUIRedirectOauth2;\n            var sentState = oauth2.state;\n            var redirectUrl = oauth2.redirectUrl;\n            var isValid, qp, arr;\n\n            if (/code|token|error/.test(window.location.hash)) {\n                qp = window.location.hash.substring(1).replace('?', '&amp;');\n            } else {\n                qp = location.search.substring(1);\n            }\n\n            arr = qp.split(\"&amp;\");\n            arr.forEach(function (v,i,_arr) { _arr[i] = '\"' + v.replace('=', '\":\"') + '\"';});\n            qp = qp ? JSON.parse('{' + arr.join() + '}',\n                    function (key, value) {\n                        return key === \"\" ? value : decodeURIComponent(value);\n                    }\n            ) : {};\n\n            isValid = qp.state === sentState;\n\n            if ((\n              oauth2.auth.schema.get(\"flow\") === \"accessCode\" ||\n              oauth2.auth.schema.get(\"flow\") === \"authorizationCode\" ||\n              oauth2.auth.schema.get(\"flow\") === \"authorization_code\"\n            ) &amp;&amp; !oauth2.auth.code) {\n                if (!isValid) {\n                    oauth2.errCb({\n                        authId: oauth2.auth.name,\n                        source: \"auth\",\n                        level: \"warning\",\n                        message: \"Authorization may be unsafe, passed state was changed in server. The passed state wasn't returned from auth server.\"\n                    });\n                }\n\n                if (qp.code) {\n                    delete oauth2.state;\n                    oauth2.auth.code = qp.code;\n                    oauth2.callback({auth: oauth2.auth, redirectUrl: redirectUrl});\n                } else {\n                    let oauthErrorMsg;\n                    if (qp.error) {\n                        oauthErrorMsg = \"[\"+qp.error+\"]: \" +\n                            (qp.error_description ? qp.error_description+ \". \" : \"no accessCode received from the server. \") +\n                            (qp.error_uri ? \"More info: \"+qp.error_uri : \"\");\n                    }\n\n                    oauth2.errCb({\n                        authId: oauth2.auth.name,\n                        source: \"auth\",\n                        level: \"error\",\n                        message: oauthErrorMsg || \"[Authorization failed]: no accessCode received from the server.\"\n                    });\n                }\n            } else {\n                oauth2.callback({auth: oauth2.auth, token: qp, isValid: isValid, redirectUrl: redirectUrl});\n            }\n            window.close();\n        }\n\n        if (document.readyState !== 'loading') {\n            run();\n        } else {\n            document.addEventListener('DOMContentLoaded', function () {\n                run();\n            });\n        }\n    &lt;/script&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n        \"\"\"\n    return HTMLResponse(content=html)\n</code></pre> <p>You can override any of them by setting a different value in the argument <code>swagger_ui_parameters</code>.</p> <p>For example, to disable <code>deepLinking</code> you could pass these settings to <code>swagger_ui_parameters</code>:</p> Python 3.8+ <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(swagger_ui_parameters={\"deepLinking\": False})\n\n\n@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}\n</code></pre>"},{"location":"how-to/configure-swagger-ui/#other-swagger-ui-parameters","title":"Other Swagger UI Parameters","text":"<p>To see all the other possible configurations you can use, read the official docs for Swagger UI parameters.</p>"},{"location":"how-to/configure-swagger-ui/#javascript-only-settings","title":"JavaScript-only settings","text":"<p>Swagger UI also allows other configurations to be JavaScript-only objects (for example, JavaScript functions).</p> <p>ReadyAPI also includes these JavaScript-only <code>presets</code> settings:</p> <pre><code>presets: [\n    SwaggerUIBundle.presets.apis,\n    SwaggerUIBundle.SwaggerUIStandalonePreset\n]\n</code></pre> <p>These are JavaScript objects, not strings, so you can't pass them from Python code directly.</p> <p>If you need to use JavaScript-only configurations like those, you can use one of the methods above. Override all the Swagger UI path operation and manually write any JavaScript you need.</p>"},{"location":"how-to/testing-database/","title":"Testing a Database","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>You can study about databases, SQL, and SQLDev in the SQLDev docs. \ud83e\udd13</p> <p>There's a mini tutorial on using SQLDev with ReadyAPI. \u2728</p> <p>That tutorial includes a section about testing SQL databases. \ud83d\ude0e</p>"},{"location":"reference/","title":"Reference","text":"<p>Here's the reference or code API, the classes, functions, parameters, attributes, and all the ReadyAPI parts you can use in your applications.</p> <p>If you want to learn ReadyAPI you are much better off reading the ReadyAPI Tutorial.</p>"},{"location":"reference/readyapi/","title":"<code>ReadyAPI</code> class","text":"<p>Here's the reference information for the <code>ReadyAPI</code> class, with all its parameters, attributes and methods.</p> <p>You can import the <code>ReadyAPI</code> class directly from <code>readyapi</code>:</p> <pre><code>from readyapi import ReadyAPI\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI","title":"readyapi.ReadyAPI","text":"<pre><code>ReadyAPI(\n    *,\n    debug=False,\n    routes=None,\n    title=\"ReadyAPI\",\n    summary=None,\n    description=\"\",\n    version=\"0.1.0\",\n    openapi_url=\"/openapi.json\",\n    openapi_tags=None,\n    servers=None,\n    dependencies=None,\n    default_response_class=Default(JSONResponse),\n    redirect_slashes=True,\n    docs_url=\"/docs\",\n    redoc_url=\"/redoc\",\n    swagger_ui_oauth2_redirect_url=\"/docs/oauth2-redirect\",\n    swagger_ui_init_oauth=None,\n    middleware=None,\n    exception_handlers=None,\n    on_startup=None,\n    on_shutdown=None,\n    lifespan=None,\n    terms_of_service=None,\n    contact=None,\n    license_info=None,\n    openapi_prefix=\"\",\n    root_path=\"\",\n    root_path_in_servers=True,\n    responses=None,\n    callbacks=None,\n    webhooks=None,\n    deprecated=None,\n    include_in_schema=True,\n    swagger_ui_parameters=None,\n    generate_unique_id_function=Default(generate_unique_id),\n    separate_input_output_schemas=True,\n    **extra\n)\n</code></pre> <p>               Bases: <code>Starlette</code></p> <p><code>ReadyAPI</code> app class, the main entrypoint to use ReadyAPI.</p> <p>Read more in the ReadyAPI docs for First Steps.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n</code></pre> PARAMETER DESCRIPTION <code>debug</code> <p>Boolean indicating if debug tracebacks should be returned on server errors.</p> <p>Read more in the Starlette docs for Applications.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>routes</code> <p>You normally wouldn't use this parameter with ReadyAPI, it is inherited from Starlette and supported for compatibility.</p> <p>In ReadyAPI, you normally would use the path operation methods, like <code>app.get()</code>, <code>app.post()</code>, etc. Note: you probably shouldn't use this parameter, it is inherited from Starlette and supported for compatibility.</p> <p>A list of routes to serve incoming HTTP and WebSocket requests.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>title</code> <p>The title of the API.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more in the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(title=\"ChimichangApp\")\n</code></pre> <p> TYPE: <code>str</code> DEFAULT: <code>'ReadyAPI'</code> </p> <code>summary</code> <p>A short summary of the API.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more in the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(summary=\"Deadpond's favorite app. Nuff said.\")\n</code></pre> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description of the API. Supports Markdown (using CommonMark syntax).</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more in the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(\n    description=\"\"\"\n                ChimichangApp API helps you do awesome stuff. \ud83d\ude80\n\n                ## Items\n\n                You can **read items**.\n\n                ## Users\n\n                You will be able to:\n\n                * **Create users** (_not implemented_).\n                * **Read users** (_not implemented_).\n\n                \"\"\"\n)\n</code></pre> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>version</code> <p>The version of the API.</p> <p>Note This is the version of your application, not the version of the OpenAPI specification nor the version of ReadyAPI being used.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more in the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(version=\"0.0.1\")\n</code></pre> <p> TYPE: <code>str</code> DEFAULT: <code>'0.1.0'</code> </p> <code>openapi_url</code> <p>The URL where the OpenAPI schema will be served from.</p> <p>If you set it to <code>None</code>, no OpenAPI schema will be served publicly, and the default automatic endpoints <code>/docs</code> and <code>/redoc</code> will also be disabled.</p> <p>Read more in the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(openapi_url=\"/api/v1/openapi.json\")\n</code></pre> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>'/openapi.json'</code> </p> <code>openapi_tags</code> <p>A list of tags used by OpenAPI, these are the same <code>tags</code> you can set in the path operations, like:</p> <ul> <li><code>@app.get(\"/users/\", tags=[\"users\"])</code></li> <li><code>@app.get(\"/items/\", tags=[\"items\"])</code></li> </ul> <p>The order of the tags can be used to specify the order shown in tools like Swagger UI, used in the automatic path <code>/docs</code>.</p> <p>It's not required to specify all the tags used.</p> <p>The tags that are not declared MAY be organized randomly or based on the tools' logic. Each tag name in the list MUST be unique.</p> <p>The value of each item is a <code>dict</code> containing:</p> <ul> <li><code>name</code>: The name of the tag.</li> <li><code>description</code>: A short description of the tag.     CommonMark syntax MAY be used for rich     text representation.</li> <li><code>externalDocs</code>: Additional external documentation for this tag. If     provided, it would contain a <code>dict</code> with:<ul> <li><code>description</code>: A short description of the target documentation.     CommonMark syntax MAY be used for     rich text representation.</li> <li><code>url</code>: The URL for the target documentation. Value MUST be in     the form of a URL.</li> </ul> </li> </ul> <p>Read more in the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\ntags_metadata = [\n    {\n        \"name\": \"users\",\n        \"description\": \"Operations with users. The **login** logic is also here.\",\n    },\n    {\n        \"name\": \"items\",\n        \"description\": \"Manage items. So _fancy_ they have their own docs.\",\n        \"externalDocs\": {\n            \"description\": \"Items external docs\",\n            \"url\": \"https://readyapi.github.io/\",\n        },\n    },\n]\n\napp = ReadyAPI(openapi_tags=tags_metadata)\n</code></pre> <p> TYPE: <code>Optional[List[Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>servers</code> <p>A <code>list</code> of <code>dict</code>s with connectivity information to a target server.</p> <p>You would use it, for example, if your application is served from different domains and you want to use the same Swagger UI in the browser to interact with each of them (instead of having multiple browser tabs open). Or if you want to leave fixed the possible URLs.</p> <p>If the servers <code>list</code> is not provided, or is an empty <code>list</code>, the default value would be a <code>dict</code> with a <code>url</code> value of <code>/</code>.</p> <p>Each item in the <code>list</code> is a <code>dict</code> containing:</p> <ul> <li><code>url</code>: A URL to the target host. This URL supports Server Variables and MAY be relative, to indicate that the host location is relative to the location where the OpenAPI document is being served. Variable substitutions will be made when a variable is named in <code>{</code>brackets<code>}</code>.</li> <li><code>description</code>: An optional string describing the host designated by the URL. CommonMark syntax MAY be used for rich text representation.</li> <li><code>variables</code>: A <code>dict</code> between a variable name and its value. The value     is used for substitution in the server's URL template.</li> </ul> <p>Read more in the ReadyAPI docs for Behind a Proxy.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(\n    servers=[\n        {\"url\": \"https://stag.example.com\", \"description\": \"Staging environment\"},\n        {\"url\": \"https://prod.example.com\", \"description\": \"Production environment\"},\n    ]\n)\n</code></pre> <p> TYPE: <code>Optional[List[Dict[str, Union[str, Any]]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of global dependencies, they will be applied to each path operation, including in sub-routers.</p> <p>Read more about it in the ReadyAPI docs for Global Dependencies.</p> <p>Example</p> <pre><code>from readyapi import Depends, ReadyAPI\n\nfrom .dependencies import func_dep_1, func_dep_2\n\napp = ReadyAPI(dependencies=[Depends(func_dep_1), Depends(func_dep_2)])\n</code></pre> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>default_response_class</code> <p>The default response class to be used.</p> <p>Read more in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import ORJSONResponse\n\napp = ReadyAPI(default_response_class=ORJSONResponse)\n</code></pre> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>redirect_slashes</code> <p>Whether to detect and redirect slashes in URLs when the client doesn't use the same format.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(redirect_slashes=True)  # the default\n\n@app.get(\"/items/\")\nasync def read_items():\n    return [{\"item_id\": \"Foo\"}]\n</code></pre> <p>With this app, if a client goes to <code>/items</code> (without a trailing slash), they will be automatically redirected with an HTTP status code of 307 to <code>/items/</code>.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>docs_url</code> <p>The path to the automatic interactive API documentation. It is handled in the browser by Swagger UI.</p> <p>The default URL is <code>/docs</code>. You can disable it by setting it to <code>None</code>.</p> <p>If <code>openapi_url</code> is set to <code>None</code>, this will be automatically disabled.</p> <p>Read more in the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(docs_url=\"/documentation\", redoc_url=None)\n</code></pre> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>'/docs'</code> </p> <code>redoc_url</code> <p>The path to the alternative automatic interactive API documentation provided by ReDoc.</p> <p>The default URL is <code>/redoc</code>. You can disable it by setting it to <code>None</code>.</p> <p>If <code>openapi_url</code> is set to <code>None</code>, this will be automatically disabled.</p> <p>Read more in the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(docs_url=\"/documentation\", redoc_url=\"redocumentation\")\n</code></pre> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>'/redoc'</code> </p> <code>swagger_ui_oauth2_redirect_url</code> <p>The OAuth2 redirect endpoint for the Swagger UI.</p> <p>By default it is <code>/docs/oauth2-redirect</code>.</p> <p>This is only used if you use OAuth2 (with the \"Authorize\" button) with Swagger UI.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>'/docs/oauth2-redirect'</code> </p> <code>swagger_ui_init_oauth</code> <p>OAuth2 configuration for the Swagger UI, by default shown at <code>/docs</code>.</p> <p>Read more about the available configuration options in the Swagger UI docs.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>middleware</code> <p>List of middleware to be added when creating the application.</p> <p>In ReadyAPI you would normally do this with <code>app.add_middleware()</code> instead.</p> <p>Read more in the ReadyAPI docs for Middleware.</p> <p> TYPE: <code>Optional[Sequence[Middleware]]</code> DEFAULT: <code>None</code> </p> <code>exception_handlers</code> <p>A dictionary with handlers for exceptions.</p> <p>In ReadyAPI, you would normally use the decorator <code>@app.exception_handler()</code>.</p> <p>Read more in the ReadyAPI docs for Handling Errors.</p> <p> TYPE: <code>Optional[Dict[Union[int, Type[Exception]], Callable[[Request, Any], Coroutine[Any, Any, Response]]]]</code> DEFAULT: <code>None</code> </p> <code>on_startup</code> <p>A list of startup event handler functions.</p> <p>You should instead use the <code>lifespan</code> handlers.</p> <p>Read more in the ReadyAPI docs for <code>lifespan</code>.</p> <p> TYPE: <code>Optional[Sequence[Callable[[], Any]]]</code> DEFAULT: <code>None</code> </p> <code>on_shutdown</code> <p>A list of shutdown event handler functions.</p> <p>You should instead use the <code>lifespan</code> handlers.</p> <p>Read more in the ReadyAPI docs for <code>lifespan</code>.</p> <p> TYPE: <code>Optional[Sequence[Callable[[], Any]]]</code> DEFAULT: <code>None</code> </p> <code>lifespan</code> <p>A <code>Lifespan</code> context manager handler. This replaces <code>startup</code> and <code>shutdown</code> functions with a single context manager.</p> <p>Read more in the ReadyAPI docs for <code>lifespan</code>.</p> <p> TYPE: <code>Optional[Lifespan[AppType]]</code> DEFAULT: <code>None</code> </p> <code>terms_of_service</code> <p>A URL to the Terms of Service for your API.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more at the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>app = ReadyAPI(terms_of_service=\"http://example.com/terms/\")\n</code></pre> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>contact</code> <p>A dictionary with the contact information for the exposed API.</p> <p>It can contain several fields.</p> <ul> <li><code>name</code>: (<code>str</code>) The name of the contact person/organization.</li> <li><code>url</code>: (<code>str</code>) A URL pointing to the contact information. MUST be in     the format of a URL.</li> <li><code>email</code>: (<code>str</code>) The email address of the contact person/organization.     MUST be in the format of an email address.</li> </ul> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more at the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>app = ReadyAPI(\n    contact={\n        \"name\": \"Deadpoolio the Amazing\",\n        \"url\": \"http://x-force.example.com/contact/\",\n        \"email\": \"dp@x-force.example.com\",\n    }\n)\n</code></pre> <p> TYPE: <code>Optional[Dict[str, Union[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>license_info</code> <p>A dictionary with the license information for the exposed API.</p> <p>It can contain several fields.</p> <ul> <li><code>name</code>: (<code>str</code>) REQUIRED (if a <code>license_info</code> is set). The     license name used for the API.</li> <li><code>identifier</code>: (<code>str</code>) An SPDX license expression     for the API. The <code>identifier</code> field is mutually exclusive of the <code>url</code>     field. Available since OpenAPI 3.1.0, ReadyAPI 0.99.0.</li> <li><code>url</code>: (<code>str</code>) A URL to the license used for the API. This MUST be     the format of a URL.</li> </ul> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more at the ReadyAPI docs for Metadata and Docs URLs.</p> <p>Example</p> <pre><code>app = ReadyAPI(\n    license_info={\n        \"name\": \"Apache 2.0\",\n        \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\",\n    }\n)\n</code></pre> <p> TYPE: <code>Optional[Dict[str, Union[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>openapi_prefix</code> <p>\"openapi_prefix\" has been deprecated in favor of \"root_path\", which follows more closely the ASGI standard, is simpler, and more automatic. A URL prefix for the OpenAPI URL.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>root_path</code> <p>A path prefix handled by a proxy that is not seen by the application but is seen by external clients, which affects things like Swagger UI.</p> <p>Read more about it at the ReadyAPI docs for Behind a Proxy.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(root_path=\"/api/v1\")\n</code></pre> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>root_path_in_servers</code> <p>To disable automatically generating the URLs in the <code>servers</code> field in the autogenerated OpenAPI using the <code>root_path</code>.</p> <p>Read more about it in the ReadyAPI docs for Behind a Proxy.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI(root_path_in_servers=False)\n</code></pre> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>responses</code> <p>Additional responses to be shown in OpenAPI.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Additional Responses in OpenAPI.</p> <p>And in the ReadyAPI docs for Bigger Applications.</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>OpenAPI callbacks that should apply to all path operations.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>webhooks</code> <p>Add OpenAPI webhooks. This is similar to <code>callbacks</code> but it doesn't depend on specific path operations.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Note: This is available since OpenAPI 3.1.0, ReadyAPI 0.99.0.</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Webhooks.</p> <p> TYPE: <code>Optional[APIRouter]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark all path operations as deprecated. You probably don't need it, but it's available.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>To include (or not) all the path operations in the generated OpenAPI. You probably don't need it, but it's available.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>swagger_ui_parameters</code> <p>Parameters to configure Swagger UI, the autogenerated interactive API documentation (by default at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs about how to Configure Swagger UI.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> <code>separate_input_output_schemas</code> <p>Whether to generate separate OpenAPI schemas for request body and response body when the results would be more precise.</p> <p>This is particularly useful when automatically generating clients.</p> <p>For example, if you have a model like:</p> <pre><code>from pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    tags: list[str] = []\n</code></pre> <p>When <code>Item</code> is used for input, a request body, <code>tags</code> is not required, the client doesn't have to provide it.</p> <p>But when using <code>Item</code> for output, for a response body, <code>tags</code> is always available because it has a default value, even if it's just an empty list. So, the client should be able to always expect it.</p> <p>In this case, there would be two different schemas, one for input and another one for output.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>**extra</code> <p>Extra keyword arguments to be stored in the app, not used by ReadyAPI anywhere.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def __init__(\n    self: AppType,\n    *,\n    debug: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Boolean indicating if debug tracebacks should be returned on server\n            errors.\n\n            Read more in the\n            [Starlette docs for Applications](https://www.starlette.io/applications/#instantiating-the-application).\n            \"\"\"\n        ),\n    ] = False,\n    routes: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            **Note**: you probably shouldn't use this parameter, it is inherited\n            from Starlette and supported for compatibility.\n\n            ---\n\n            A list of routes to serve incoming HTTP and WebSocket requests.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            You normally wouldn't use this parameter with ReadyAPI, it is inherited\n            from Starlette and supported for compatibility.\n\n            In ReadyAPI, you normally would use the *path operation methods*,\n            like `app.get()`, `app.post()`, etc.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The title of the API.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more in the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.github.io/tutorial/metadata/#metadata-for-api).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(title=\"ChimichangApp\")\n            ```\n            \"\"\"\n        ),\n    ] = \"ReadyAPI\",\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A short summary of the API.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more in the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.github.io/tutorial/metadata/#metadata-for-api).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(summary=\"Deadpond's favorite app. Nuff said.\")\n            ```\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        str,\n        Doc(\n            '''\n            A description of the API. Supports Markdown (using\n            [CommonMark syntax](https://commonmark.org/)).\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more in the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.github.io/tutorial/metadata/#metadata-for-api).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(\n                description=\"\"\"\n                            ChimichangApp API helps you do awesome stuff. \ud83d\ude80\n\n                            ## Items\n\n                            You can **read items**.\n\n                            ## Users\n\n                            You will be able to:\n\n                            * **Create users** (_not implemented_).\n                            * **Read users** (_not implemented_).\n\n                            \"\"\"\n            )\n            ```\n            '''\n        ),\n    ] = \"\",\n    version: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The version of the API.\n\n            **Note** This is the version of your application, not the version of\n            the OpenAPI specification nor the version of ReadyAPI being used.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more in the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.github.io/tutorial/metadata/#metadata-for-api).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(version=\"0.0.1\")\n            ```\n            \"\"\"\n        ),\n    ] = \"0.1.0\",\n    openapi_url: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            The URL where the OpenAPI schema will be served from.\n\n            If you set it to `None`, no OpenAPI schema will be served publicly, and\n            the default automatic endpoints `/docs` and `/redoc` will also be\n            disabled.\n\n            Read more in the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.github.io/tutorial/metadata/#openapi-url).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(openapi_url=\"/api/v1/openapi.json\")\n            ```\n            \"\"\"\n        ),\n    ] = \"/openapi.json\",\n    openapi_tags: Annotated[\n        Optional[List[Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            A list of tags used by OpenAPI, these are the same `tags` you can set\n            in the *path operations*, like:\n\n            * `@app.get(\"/users/\", tags=[\"users\"])`\n            * `@app.get(\"/items/\", tags=[\"items\"])`\n\n            The order of the tags can be used to specify the order shown in\n            tools like Swagger UI, used in the automatic path `/docs`.\n\n            It's not required to specify all the tags used.\n\n            The tags that are not declared MAY be organized randomly or based\n            on the tools' logic. Each tag name in the list MUST be unique.\n\n            The value of each item is a `dict` containing:\n\n            * `name`: The name of the tag.\n            * `description`: A short description of the tag.\n                [CommonMark syntax](https://commonmark.org/) MAY be used for rich\n                text representation.\n            * `externalDocs`: Additional external documentation for this tag. If\n                provided, it would contain a `dict` with:\n                * `description`: A short description of the target documentation.\n                    [CommonMark syntax](https://commonmark.org/) MAY be used for\n                    rich text representation.\n                * `url`: The URL for the target documentation. Value MUST be in\n                    the form of a URL.\n\n            Read more in the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.github.io/tutorial/metadata/#metadata-for-tags).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            tags_metadata = [\n                {\n                    \"name\": \"users\",\n                    \"description\": \"Operations with users. The **login** logic is also here.\",\n                },\n                {\n                    \"name\": \"items\",\n                    \"description\": \"Manage items. So _fancy_ they have their own docs.\",\n                    \"externalDocs\": {\n                        \"description\": \"Items external docs\",\n                        \"url\": \"https://readyapi.github.io/\",\n                    },\n                },\n            ]\n\n            app = ReadyAPI(openapi_tags=tags_metadata)\n            ```\n            \"\"\"\n        ),\n    ] = None,\n    servers: Annotated[\n        Optional[List[Dict[str, Union[str, Any]]]],\n        Doc(\n            \"\"\"\n            A `list` of `dict`s with connectivity information to a target server.\n\n            You would use it, for example, if your application is served from\n            different domains and you want to use the same Swagger UI in the\n            browser to interact with each of them (instead of having multiple\n            browser tabs open). Or if you want to leave fixed the possible URLs.\n\n            If the servers `list` is not provided, or is an empty `list`, the\n            default value would be a `dict` with a `url` value of `/`.\n\n            Each item in the `list` is a `dict` containing:\n\n            * `url`: A URL to the target host. This URL supports Server Variables\n            and MAY be relative, to indicate that the host location is relative\n            to the location where the OpenAPI document is being served. Variable\n            substitutions will be made when a variable is named in `{`brackets`}`.\n            * `description`: An optional string describing the host designated by\n            the URL. [CommonMark syntax](https://commonmark.org/) MAY be used for\n            rich text representation.\n            * `variables`: A `dict` between a variable name and its value. The value\n                is used for substitution in the server's URL template.\n\n            Read more in the\n            [ReadyAPI docs for Behind a Proxy](https://readyapi.github.io/advanced/behind-a-proxy/#additional-servers).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(\n                servers=[\n                    {\"url\": \"https://stag.example.com\", \"description\": \"Staging environment\"},\n                    {\"url\": \"https://prod.example.com\", \"description\": \"Production environment\"},\n                ]\n            )\n            ```\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of global dependencies, they will be applied to each\n            *path operation*, including in sub-routers.\n\n            Read more about it in the\n            [ReadyAPI docs for Global Dependencies](https://readyapi.github.io/tutorial/dependencies/global-dependencies/).\n\n            **Example**\n\n            ```python\n            from readyapi import Depends, ReadyAPI\n\n            from .dependencies import func_dep_1, func_dep_2\n\n            app = ReadyAPI(dependencies=[Depends(func_dep_1), Depends(func_dep_2)])\n            ```\n            \"\"\"\n        ),\n    ] = None,\n    default_response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            The default response class to be used.\n\n            Read more in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#default-response-class).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n            from readyapi.responses import ORJSONResponse\n\n            app = ReadyAPI(default_response_class=ORJSONResponse)\n            ```\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    redirect_slashes: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Whether to detect and redirect slashes in URLs when the client doesn't\n            use the same format.\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(redirect_slashes=True)  # the default\n\n            @app.get(\"/items/\")\n            async def read_items():\n                return [{\"item_id\": \"Foo\"}]\n            ```\n\n            With this app, if a client goes to `/items` (without a trailing slash),\n            they will be automatically redirected with an HTTP status code of 307\n            to `/items/`.\n            \"\"\"\n        ),\n    ] = True,\n    docs_url: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            The path to the automatic interactive API documentation.\n            It is handled in the browser by Swagger UI.\n\n            The default URL is `/docs`. You can disable it by setting it to `None`.\n\n            If `openapi_url` is set to `None`, this will be automatically disabled.\n\n            Read more in the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.github.io/tutorial/metadata/#docs-urls).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(docs_url=\"/documentation\", redoc_url=None)\n            ```\n            \"\"\"\n        ),\n    ] = \"/docs\",\n    redoc_url: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            The path to the alternative automatic interactive API documentation\n            provided by ReDoc.\n\n            The default URL is `/redoc`. You can disable it by setting it to `None`.\n\n            If `openapi_url` is set to `None`, this will be automatically disabled.\n\n            Read more in the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.github.io/tutorial/metadata/#docs-urls).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(docs_url=\"/documentation\", redoc_url=\"redocumentation\")\n            ```\n            \"\"\"\n        ),\n    ] = \"/redoc\",\n    swagger_ui_oauth2_redirect_url: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            The OAuth2 redirect endpoint for the Swagger UI.\n\n            By default it is `/docs/oauth2-redirect`.\n\n            This is only used if you use OAuth2 (with the \"Authorize\" button)\n            with Swagger UI.\n            \"\"\"\n        ),\n    ] = \"/docs/oauth2-redirect\",\n    swagger_ui_init_oauth: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            OAuth2 configuration for the Swagger UI, by default shown at `/docs`.\n\n            Read more about the available configuration options in the\n            [Swagger UI docs](https://swagger.io/docs/open-source-tools/swagger-ui/usage/oauth2/).\n            \"\"\"\n        ),\n    ] = None,\n    middleware: Annotated[\n        Optional[Sequence[Middleware]],\n        Doc(\n            \"\"\"\n            List of middleware to be added when creating the application.\n\n            In ReadyAPI you would normally do this with `app.add_middleware()`\n            instead.\n\n            Read more in the\n            [ReadyAPI docs for Middleware](https://readyapi.github.io/tutorial/middleware/).\n            \"\"\"\n        ),\n    ] = None,\n    exception_handlers: Annotated[\n        Optional[\n            Dict[\n                Union[int, Type[Exception]],\n                Callable[[Request, Any], Coroutine[Any, Any, Response]],\n            ]\n        ],\n        Doc(\n            \"\"\"\n            A dictionary with handlers for exceptions.\n\n            In ReadyAPI, you would normally use the decorator\n            `@app.exception_handler()`.\n\n            Read more in the\n            [ReadyAPI docs for Handling Errors](https://readyapi.github.io/tutorial/handling-errors/).\n            \"\"\"\n        ),\n    ] = None,\n    on_startup: Annotated[\n        Optional[Sequence[Callable[[], Any]]],\n        Doc(\n            \"\"\"\n            A list of startup event handler functions.\n\n            You should instead use the `lifespan` handlers.\n\n            Read more in the [ReadyAPI docs for `lifespan`](https://readyapi.github.io/advanced/events/).\n            \"\"\"\n        ),\n    ] = None,\n    on_shutdown: Annotated[\n        Optional[Sequence[Callable[[], Any]]],\n        Doc(\n            \"\"\"\n            A list of shutdown event handler functions.\n\n            You should instead use the `lifespan` handlers.\n\n            Read more in the\n            [ReadyAPI docs for `lifespan`](https://readyapi.github.io/advanced/events/).\n            \"\"\"\n        ),\n    ] = None,\n    lifespan: Annotated[\n        Optional[Lifespan[AppType]],\n        Doc(\n            \"\"\"\n            A `Lifespan` context manager handler. This replaces `startup` and\n            `shutdown` functions with a single context manager.\n\n            Read more in the\n            [ReadyAPI docs for `lifespan`](https://readyapi.github.io/advanced/events/).\n            \"\"\"\n        ),\n    ] = None,\n    terms_of_service: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A URL to the Terms of Service for your API.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more at the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.github.io/tutorial/metadata/#metadata-for-api).\n\n            **Example**\n\n            ```python\n            app = ReadyAPI(terms_of_service=\"http://example.com/terms/\")\n            ```\n            \"\"\"\n        ),\n    ] = None,\n    contact: Annotated[\n        Optional[Dict[str, Union[str, Any]]],\n        Doc(\n            \"\"\"\n            A dictionary with the contact information for the exposed API.\n\n            It can contain several fields.\n\n            * `name`: (`str`) The name of the contact person/organization.\n            * `url`: (`str`) A URL pointing to the contact information. MUST be in\n                the format of a URL.\n            * `email`: (`str`) The email address of the contact person/organization.\n                MUST be in the format of an email address.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more at the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.github.io/tutorial/metadata/#metadata-for-api).\n\n            **Example**\n\n            ```python\n            app = ReadyAPI(\n                contact={\n                    \"name\": \"Deadpoolio the Amazing\",\n                    \"url\": \"http://x-force.example.com/contact/\",\n                    \"email\": \"dp@x-force.example.com\",\n                }\n            )\n            ```\n            \"\"\"\n        ),\n    ] = None,\n    license_info: Annotated[\n        Optional[Dict[str, Union[str, Any]]],\n        Doc(\n            \"\"\"\n            A dictionary with the license information for the exposed API.\n\n            It can contain several fields.\n\n            * `name`: (`str`) **REQUIRED** (if a `license_info` is set). The\n                license name used for the API.\n            * `identifier`: (`str`) An [SPDX](https://spdx.dev/) license expression\n                for the API. The `identifier` field is mutually exclusive of the `url`\n                field. Available since OpenAPI 3.1.0, ReadyAPI 0.99.0.\n            * `url`: (`str`) A URL to the license used for the API. This MUST be\n                the format of a URL.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more at the\n            [ReadyAPI docs for Metadata and Docs URLs](https://readyapi.github.io/tutorial/metadata/#metadata-for-api).\n\n            **Example**\n\n            ```python\n            app = ReadyAPI(\n                license_info={\n                    \"name\": \"Apache 2.0\",\n                    \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\",\n                }\n            )\n            ```\n            \"\"\"\n        ),\n    ] = None,\n    openapi_prefix: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            A URL prefix for the OpenAPI URL.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            \"openapi_prefix\" has been deprecated in favor of \"root_path\", which\n            follows more closely the ASGI standard, is simpler, and more\n            automatic.\n            \"\"\"\n        ),\n    ] = \"\",\n    root_path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            A path prefix handled by a proxy that is not seen by the application\n            but is seen by external clients, which affects things like Swagger UI.\n\n            Read more about it at the\n            [ReadyAPI docs for Behind a Proxy](https://readyapi.github.io/advanced/behind-a-proxy/).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(root_path=\"/api/v1\")\n            ```\n            \"\"\"\n        ),\n    ] = \"\",\n    root_path_in_servers: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To disable automatically generating the URLs in the `servers` field\n            in the autogenerated OpenAPI using the `root_path`.\n\n            Read more about it in the\n            [ReadyAPI docs for Behind a Proxy](https://readyapi.github.io/advanced/behind-a-proxy/#disable-automatic-server-from-root_path).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI(root_path_in_servers=False)\n            ```\n            \"\"\"\n        ),\n    ] = True,\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses to be shown in OpenAPI.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Additional Responses in OpenAPI](https://readyapi.github.io/advanced/additional-responses/).\n\n            And in the\n            [ReadyAPI docs for Bigger Applications](https://readyapi.github.io/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            OpenAPI callbacks that should apply to all *path operations*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    webhooks: Annotated[\n        Optional[routing.APIRouter],\n        Doc(\n            \"\"\"\n            Add OpenAPI webhooks. This is similar to `callbacks` but it doesn't\n            depend on specific *path operations*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            **Note**: This is available since OpenAPI 3.1.0, ReadyAPI 0.99.0.\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Webhooks](https://readyapi.github.io/advanced/openapi-webhooks/).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark all *path operations* as deprecated. You probably don't need it,\n            but it's available.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) all the *path operations* in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    swagger_ui_parameters: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Parameters to configure Swagger UI, the autogenerated interactive API\n            documentation (by default at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs about how to Configure Swagger UI](https://readyapi.github.io/how-to/configure-swagger-ui/).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n    separate_input_output_schemas: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Whether to generate separate OpenAPI schemas for request body and\n            response body when the results would be more precise.\n\n            This is particularly useful when automatically generating clients.\n\n            For example, if you have a model like:\n\n            ```python\n            from pydantic import BaseModel\n\n            class Item(BaseModel):\n                name: str\n                tags: list[str] = []\n            ```\n\n            When `Item` is used for input, a request body, `tags` is not required,\n            the client doesn't have to provide it.\n\n            But when using `Item` for output, for a response body, `tags` is always\n            available because it has a default value, even if it's just an empty\n            list. So, the client should be able to always expect it.\n\n            In this case, there would be two different schemas, one for input and\n            another one for output.\n            \"\"\"\n        ),\n    ] = True,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Extra keyword arguments to be stored in the app, not used by ReadyAPI\n            anywhere.\n            \"\"\"\n        ),\n    ],\n) -&gt; None:\n    self.debug = debug\n    self.title = title\n    self.summary = summary\n    self.description = description\n    self.version = version\n    self.terms_of_service = terms_of_service\n    self.contact = contact\n    self.license_info = license_info\n    self.openapi_url = openapi_url\n    self.openapi_tags = openapi_tags\n    self.root_path_in_servers = root_path_in_servers\n    self.docs_url = docs_url\n    self.redoc_url = redoc_url\n    self.swagger_ui_oauth2_redirect_url = swagger_ui_oauth2_redirect_url\n    self.swagger_ui_init_oauth = swagger_ui_init_oauth\n    self.swagger_ui_parameters = swagger_ui_parameters\n    self.servers = servers or []\n    self.separate_input_output_schemas = separate_input_output_schemas\n    self.extra = extra\n    self.openapi_version: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The version string of OpenAPI.\n\n            ReadyAPI will generate OpenAPI version 3.1.0, and will output that as\n            the OpenAPI version. But some tools, even though they might be\n            compatible with OpenAPI 3.1.0, might not recognize it as a valid.\n\n            So you could override this value to trick those tools into using\n            the generated OpenAPI. Have in mind that this is a hack. But if you\n            avoid using features added in OpenAPI 3.1.0, it might work for your\n            use case.\n\n            This is not passed as a parameter to the `ReadyAPI` class to avoid\n            giving the false idea that ReadyAPI would generate a different OpenAPI\n            schema. It is only available as an attribute.\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            app = ReadyAPI()\n\n            app.openapi_version = \"3.0.2\"\n            ```\n            \"\"\"\n        ),\n    ] = \"3.1.0\"\n    self.openapi_schema: Optional[Dict[str, Any]] = None\n    if self.openapi_url:\n        assert self.title, \"A title must be provided for OpenAPI, e.g.: 'My API'\"\n        assert self.version, \"A version must be provided for OpenAPI, e.g.: '2.1.0'\"\n    # TODO: remove when discarding the openapi_prefix parameter\n    if openapi_prefix:\n        logger.warning(\n            '\"openapi_prefix\" has been deprecated in favor of \"root_path\", which '\n            \"follows more closely the ASGI standard, is simpler, and more \"\n            \"automatic. Check the docs at \"\n            \"https://readyapi.github.io/advanced/sub-applications/\"\n        )\n    self.webhooks: Annotated[\n        routing.APIRouter,\n        Doc(\n            \"\"\"\n            The `app.webhooks` attribute is an `APIRouter` with the *path\n            operations* that will be used just for documentation of webhooks.\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Webhooks](https://readyapi.github.io/advanced/openapi-webhooks/).\n            \"\"\"\n        ),\n    ] = webhooks or routing.APIRouter()\n    self.root_path = root_path or openapi_prefix\n    self.state: Annotated[\n        State,\n        Doc(\n            \"\"\"\n            A state object for the application. This is the same object for the\n            entire application, it doesn't change from request to request.\n\n            You normally wouldn't use this in ReadyAPI, for most of the cases you\n            would instead use ReadyAPI dependencies.\n\n            This is simply inherited from Starlette.\n\n            Read more about it in the\n            [Starlette docs for Applications](https://www.starlette.io/applications/#storing-state-on-the-app-instance).\n            \"\"\"\n        ),\n    ] = State()\n    self.dependency_overrides: Annotated[\n        Dict[Callable[..., Any], Callable[..., Any]],\n        Doc(\n            \"\"\"\n            A dictionary with overrides for the dependencies.\n\n            Each key is the original dependency callable, and the value is the\n            actual dependency that should be called.\n\n            This is for testing, to replace expensive dependencies with testing\n            versions.\n\n            Read more about it in the\n            [ReadyAPI docs for Testing Dependencies with Overrides](https://readyapi.github.io/advanced/testing-dependencies/).\n            \"\"\"\n        ),\n    ] = {}\n    self.router: routing.APIRouter = routing.APIRouter(\n        routes=routes,\n        redirect_slashes=redirect_slashes,\n        dependency_overrides_provider=self,\n        on_startup=on_startup,\n        on_shutdown=on_shutdown,\n        lifespan=lifespan,\n        default_response_class=default_response_class,\n        dependencies=dependencies,\n        callbacks=callbacks,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        responses=responses,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n    self.exception_handlers: Dict[\n        Any, Callable[[Request, Any], Union[Response, Awaitable[Response]]]\n    ] = {} if exception_handlers is None else dict(exception_handlers)\n    self.exception_handlers.setdefault(HTTPException, http_exception_handler)\n    self.exception_handlers.setdefault(\n        RequestValidationError, request_validation_exception_handler\n    )\n    self.exception_handlers.setdefault(\n        WebSocketRequestValidationError,\n        # Starlette still has incorrect type specification for the handlers\n        websocket_request_validation_exception_handler,  # type: ignore\n    )\n\n    self.user_middleware: List[Middleware] = (\n        [] if middleware is None else list(middleware)\n    )\n    self.middleware_stack: Union[ASGIApp, None] = None\n    self.setup()\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.openapi_version","title":"openapi_version  <code>instance-attribute</code>","text":"<pre><code>openapi_version = '3.1.0'\n</code></pre> <p>The version string of OpenAPI.</p> <p>ReadyAPI will generate OpenAPI version 3.1.0, and will output that as the OpenAPI version. But some tools, even though they might be compatible with OpenAPI 3.1.0, might not recognize it as a valid.</p> <p>So you could override this value to trick those tools into using the generated OpenAPI. Have in mind that this is a hack. But if you avoid using features added in OpenAPI 3.1.0, it might work for your use case.</p> <p>This is not passed as a parameter to the <code>ReadyAPI</code> class to avoid giving the false idea that ReadyAPI would generate a different OpenAPI schema. It is only available as an attribute.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\napp.openapi_version = \"3.0.2\"\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.webhooks","title":"webhooks  <code>instance-attribute</code>","text":"<pre><code>webhooks = webhooks or APIRouter()\n</code></pre> <p>The <code>app.webhooks</code> attribute is an <code>APIRouter</code> with the path operations that will be used just for documentation of webhooks.</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Webhooks.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.state","title":"state  <code>instance-attribute</code>","text":"<pre><code>state = State()\n</code></pre> <p>A state object for the application. This is the same object for the entire application, it doesn't change from request to request.</p> <p>You normally wouldn't use this in ReadyAPI, for most of the cases you would instead use ReadyAPI dependencies.</p> <p>This is simply inherited from Starlette.</p> <p>Read more about it in the Starlette docs for Applications.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.dependency_overrides","title":"dependency_overrides  <code>instance-attribute</code>","text":"<pre><code>dependency_overrides = {}\n</code></pre> <p>A dictionary with overrides for the dependencies.</p> <p>Each key is the original dependency callable, and the value is the actual dependency that should be called.</p> <p>This is for testing, to replace expensive dependencies with testing versions.</p> <p>Read more about it in the ReadyAPI docs for Testing Dependencies with Overrides.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.openapi","title":"openapi","text":"<pre><code>openapi()\n</code></pre> <p>Generate the OpenAPI schema of the application. This is called by ReadyAPI internally.</p> <p>The first time it is called it stores the result in the attribute <code>app.openapi_schema</code>, and next times it is called, it just returns that same result. To avoid the cost of generating the schema every time.</p> <p>If you need to modify the generated OpenAPI schema, you could modify it.</p> <p>Read more in the ReadyAPI docs for OpenAPI.</p> Source code in <code>readyapi/applications.py</code> <pre><code>def openapi(self) -&gt; Dict[str, Any]:\n    \"\"\"\n    Generate the OpenAPI schema of the application. This is called by ReadyAPI\n    internally.\n\n    The first time it is called it stores the result in the attribute\n    `app.openapi_schema`, and next times it is called, it just returns that same\n    result. To avoid the cost of generating the schema every time.\n\n    If you need to modify the generated OpenAPI schema, you could modify it.\n\n    Read more in the\n    [ReadyAPI docs for OpenAPI](https://readyapi.github.io/how-to/extending-openapi/).\n    \"\"\"\n    if not self.openapi_schema:\n        self.openapi_schema = get_openapi(\n            title=self.title,\n            version=self.version,\n            openapi_version=self.openapi_version,\n            summary=self.summary,\n            description=self.description,\n            terms_of_service=self.terms_of_service,\n            contact=self.contact,\n            license_info=self.license_info,\n            routes=self.routes,\n            webhooks=self.webhooks.routes,\n            tags=self.openapi_tags,\n            servers=self.servers,\n            separate_input_output_schemas=self.separate_input_output_schemas,\n        )\n    return self.openapi_schema\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.websocket","title":"websocket","text":"<pre><code>websocket(path, name=None, *, dependencies=None)\n</code></pre> <p>Decorate a WebSocket function.</p> <p>Read more about it in the ReadyAPI docs for WebSockets.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI, WebSocket\n\napp = ReadyAPI()\n\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(f\"Message text was: {data}\")\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>WebSocket path.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>A name for the WebSocket. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be used for this WebSocket.</p> <p>Read more about it in the ReadyAPI docs for WebSockets.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def websocket(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            WebSocket path.\n            \"\"\"\n        ),\n    ],\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A name for the WebSocket. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    *,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be used for this\n            WebSocket.\n\n            Read more about it in the\n            [ReadyAPI docs for WebSockets](https://readyapi.github.io/advanced/websockets/).\n            \"\"\"\n        ),\n    ] = None,\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Decorate a WebSocket function.\n\n    Read more about it in the\n    [ReadyAPI docs for WebSockets](https://readyapi.github.io/advanced/websockets/).\n\n    **Example**\n\n    ```python\n    from readyapi import ReadyAPI, WebSocket\n\n    app = ReadyAPI()\n\n    @app.websocket(\"/ws\")\n    async def websocket_endpoint(websocket: WebSocket):\n        await websocket.accept()\n        while True:\n            data = await websocket.receive_text()\n            await websocket.send_text(f\"Message text was: {data}\")\n    ```\n    \"\"\"\n\n    def decorator(func: DecoratedCallable) -&gt; DecoratedCallable:\n        self.add_api_websocket_route(\n            path,\n            func,\n            name=name,\n            dependencies=dependencies,\n        )\n        return func\n\n    return decorator\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.include_router","title":"include_router","text":"<pre><code>include_router(\n    router,\n    *,\n    prefix=\"\",\n    tags=None,\n    dependencies=None,\n    responses=None,\n    deprecated=None,\n    include_in_schema=True,\n    default_response_class=Default(JSONResponse),\n    callbacks=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Include an <code>APIRouter</code> in the same app.</p> <p>Read more about it in the ReadyAPI docs for Bigger Applications.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.include_router--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI\n\nfrom .users import users_router\n\napp = ReadyAPI()\n\napp.include_router(users_router)\n</code></pre> PARAMETER DESCRIPTION <code>router</code> <p>The <code>APIRouter</code> to include.</p> <p> TYPE: <code>APIRouter</code> </p> <code>prefix</code> <p>An optional path prefix for the router.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>tags</code> <p>A list of tags to be applied to all the path operations in this router.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to all the path operations in this router.</p> <p>Read more about it in the ReadyAPI docs for Bigger Applications - Multiple Files.</p> <p>Example</p> <pre><code>from readyapi import Depends, ReadyAPI\n\nfrom .dependencies import get_token_header\nfrom .internal import admin\n\napp = ReadyAPI()\n\napp.include_router(\n    admin.router,\n    dependencies=[Depends(get_token_header)],\n)\n</code></pre> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>responses</code> <p>Additional responses to be shown in OpenAPI.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Additional Responses in OpenAPI.</p> <p>And in the ReadyAPI docs for Bigger Applications.</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark all the path operations in this router as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\nfrom .internal import old_api\n\napp = ReadyAPI()\n\napp.include_router(\n    old_api.router,\n    deprecated=True,\n)\n</code></pre> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>Include (or not) all the path operations in this router in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\n\nfrom .internal import old_api\n\napp = ReadyAPI()\n\napp.include_router(\n    old_api.router,\n    include_in_schema=False,\n)\n</code></pre> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>default_response_class</code> <p>Default response class to be used for the path operations in this router.</p> <p>Read more in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p>Example</p> <pre><code>from readyapi import ReadyAPI\nfrom readyapi.responses import ORJSONResponse\n\nfrom .internal import old_api\n\napp = ReadyAPI()\n\napp.include_router(\n    old_api.router,\n    default_response_class=ORJSONResponse,\n)\n</code></pre> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def include_router(\n    self,\n    router: Annotated[routing.APIRouter, Doc(\"The `APIRouter` to include.\")],\n    *,\n    prefix: Annotated[str, Doc(\"An optional path prefix for the router.\")] = \"\",\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to all the *path operations* in this\n            router.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to all the\n            *path operations* in this router.\n\n            Read more about it in the\n            [ReadyAPI docs for Bigger Applications - Multiple Files](https://readyapi.github.io/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n\n            **Example**\n\n            ```python\n            from readyapi import Depends, ReadyAPI\n\n            from .dependencies import get_token_header\n            from .internal import admin\n\n            app = ReadyAPI()\n\n            app.include_router(\n                admin.router,\n                dependencies=[Depends(get_token_header)],\n            )\n            ```\n            \"\"\"\n        ),\n    ] = None,\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses to be shown in OpenAPI.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Additional Responses in OpenAPI](https://readyapi.github.io/advanced/additional-responses/).\n\n            And in the\n            [ReadyAPI docs for Bigger Applications](https://readyapi.github.io/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark all the *path operations* in this router as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            from .internal import old_api\n\n            app = ReadyAPI()\n\n            app.include_router(\n                old_api.router,\n                deprecated=True,\n            )\n            ```\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include (or not) all the *path operations* in this router in the\n            generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n\n            from .internal import old_api\n\n            app = ReadyAPI()\n\n            app.include_router(\n                old_api.router,\n                include_in_schema=False,\n            )\n            ```\n            \"\"\"\n        ),\n    ] = True,\n    default_response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Default response class to be used for the *path operations* in this\n            router.\n\n            Read more in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#default-response-class).\n\n            **Example**\n\n            ```python\n            from readyapi import ReadyAPI\n            from readyapi.responses import ORJSONResponse\n\n            from .internal import old_api\n\n            app = ReadyAPI()\n\n            app.include_router(\n                old_api.router,\n                default_response_class=ORJSONResponse,\n            )\n            ```\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; None:\n    \"\"\"\n    Include an `APIRouter` in the same app.\n\n    Read more about it in the\n    [ReadyAPI docs for Bigger Applications](https://readyapi.github.io/tutorial/bigger-applications/).\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI\n\n    from .users import users_router\n\n    app = ReadyAPI()\n\n    app.include_router(users_router)\n    ```\n    \"\"\"\n    self.router.include_router(\n        router,\n        prefix=prefix,\n        tags=tags,\n        dependencies=dependencies,\n        responses=responses,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        default_response_class=default_response_class,\n        callbacks=callbacks,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.get","title":"get","text":"<pre><code>get(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP GET operation.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.get--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n@app.get(\"/items/\")\ndef read_items():\n    return [{\"name\": \"Empanada\"}, {\"name\": \"Arepa\"}]\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def get(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.github.io/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.github.io/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.github.io/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.github.io/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP GET operation.\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI\n\n    app = ReadyAPI()\n\n    @app.get(\"/items/\")\n    def read_items():\n        return [{\"name\": \"Empanada\"}, {\"name\": \"Arepa\"}]\n    ```\n    \"\"\"\n    return self.router.get(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.put","title":"put","text":"<pre><code>put(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP PUT operation.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.put--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\napp = ReadyAPI()\n\n@app.put(\"/items/{item_id}\")\ndef replace_item(item_id: str, item: Item):\n    return {\"message\": \"Item replaced\", \"id\": item_id}\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def put(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.github.io/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.github.io/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.github.io/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.github.io/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP PUT operation.\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI\n    from pydantic import BaseModel\n\n    class Item(BaseModel):\n        name: str\n        description: str | None = None\n\n    app = ReadyAPI()\n\n    @app.put(\"/items/{item_id}\")\n    def replace_item(item_id: str, item: Item):\n        return {\"message\": \"Item replaced\", \"id\": item_id}\n    ```\n    \"\"\"\n    return self.router.put(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.post","title":"post","text":"<pre><code>post(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP POST operation.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.post--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\napp = ReadyAPI()\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n    return {\"message\": \"Item created\"}\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def post(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.github.io/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.github.io/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.github.io/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.github.io/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP POST operation.\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI\n    from pydantic import BaseModel\n\n    class Item(BaseModel):\n        name: str\n        description: str | None = None\n\n    app = ReadyAPI()\n\n    @app.post(\"/items/\")\n    def create_item(item: Item):\n        return {\"message\": \"Item created\"}\n    ```\n    \"\"\"\n    return self.router.post(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.delete","title":"delete","text":"<pre><code>delete(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP DELETE operation.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.delete--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n@app.delete(\"/items/{item_id}\")\ndef delete_item(item_id: str):\n    return {\"message\": \"Item deleted\"}\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def delete(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.github.io/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.github.io/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.github.io/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.github.io/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP DELETE operation.\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI\n\n    app = ReadyAPI()\n\n    @app.delete(\"/items/{item_id}\")\n    def delete_item(item_id: str):\n        return {\"message\": \"Item deleted\"}\n    ```\n    \"\"\"\n    return self.router.delete(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.options","title":"options","text":"<pre><code>options(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP OPTIONS operation.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.options--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n@app.options(\"/items/\")\ndef get_item_options():\n    return {\"additions\": [\"Aji\", \"Guacamole\"]}\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def options(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.github.io/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.github.io/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.github.io/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.github.io/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP OPTIONS operation.\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI\n\n    app = ReadyAPI()\n\n    @app.options(\"/items/\")\n    def get_item_options():\n        return {\"additions\": [\"Aji\", \"Guacamole\"]}\n    ```\n    \"\"\"\n    return self.router.options(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.head","title":"head","text":"<pre><code>head(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP HEAD operation.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.head--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI, Response\n\napp = ReadyAPI()\n\n@app.head(\"/items/\", status_code=204)\ndef get_items_headers(response: Response):\n    response.headers[\"X-Cat-Dog\"] = \"Alone in the world\"\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def head(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.github.io/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.github.io/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.github.io/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.github.io/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP HEAD operation.\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI, Response\n\n    app = ReadyAPI()\n\n    @app.head(\"/items/\", status_code=204)\n    def get_items_headers(response: Response):\n        response.headers[\"X-Cat-Dog\"] = \"Alone in the world\"\n    ```\n    \"\"\"\n    return self.router.head(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.patch","title":"patch","text":"<pre><code>patch(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP PATCH operation.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.patch--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\napp = ReadyAPI()\n\n@app.patch(\"/items/\")\ndef update_item(item: Item):\n    return {\"message\": \"Item updated in place\"}\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def patch(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.github.io/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.github.io/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.github.io/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.github.io/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP PATCH operation.\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI\n    from pydantic import BaseModel\n\n    class Item(BaseModel):\n        name: str\n        description: str | None = None\n\n    app = ReadyAPI()\n\n    @app.patch(\"/items/\")\n    def update_item(item: Item):\n        return {\"message\": \"Item updated in place\"}\n    ```\n    \"\"\"\n    return self.router.patch(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.trace","title":"trace","text":"<pre><code>trace(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP TRACE operation.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.trace--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI\n\napp = ReadyAPI()\n\n@app.put(\"/items/{item_id}\")\ndef trace_item(item_id: str):\n    return None\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def trace(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.github.io/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.github.io/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.github.io/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.github.io/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP TRACE operation.\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI\n\n    app = ReadyAPI()\n\n    @app.put(\"/items/{item_id}\")\n    def trace_item(item_id: str):\n        return None\n    ```\n    \"\"\"\n    return self.router.trace(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.on_event","title":"on_event","text":"<pre><code>on_event(event_type)\n</code></pre> <p>Add an event handler for the application.</p> <p><code>on_event</code> is deprecated, use <code>lifespan</code> event handlers instead.</p> <p>Read more about it in the ReadyAPI docs for Lifespan Events.</p> PARAMETER DESCRIPTION <code>event_type</code> <p>The type of event. <code>startup</code> or <code>shutdown</code>.</p> <p> TYPE: <code>str</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>@deprecated(\n    \"\"\"\n    on_event is deprecated, use lifespan event handlers instead.\n\n    Read more about it in the\n    [ReadyAPI docs for Lifespan Events](https://readyapi.github.io/advanced/events/).\n    \"\"\"\n)\ndef on_event(\n    self,\n    event_type: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The type of event. `startup` or `shutdown`.\n            \"\"\"\n        ),\n    ],\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add an event handler for the application.\n\n    `on_event` is deprecated, use `lifespan` event handlers instead.\n\n    Read more about it in the\n    [ReadyAPI docs for Lifespan Events](https://readyapi.github.io/advanced/events/#alternative-events-deprecated).\n    \"\"\"\n    return self.router.on_event(event_type)\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.middleware","title":"middleware","text":"<pre><code>middleware(middleware_type)\n</code></pre> <p>Add a middleware to the application.</p> <p>Read more about it in the ReadyAPI docs for Middleware.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.middleware--example","title":"Example","text":"<pre><code>import time\n\nfrom readyapi import ReadyAPI, Request\n\napp = ReadyAPI()\n\n\n@app.middleware(\"http\")\nasync def add_process_time_header(request: Request, call_next):\n    start_time = time.time()\n    response = await call_next(request)\n    process_time = time.time() - start_time\n    response.headers[\"X-Process-Time\"] = str(process_time)\n    return response\n</code></pre> PARAMETER DESCRIPTION <code>middleware_type</code> <p>The type of middleware. Currently only supports <code>http</code>.</p> <p> TYPE: <code>str</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def middleware(\n    self,\n    middleware_type: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The type of middleware. Currently only supports `http`.\n            \"\"\"\n        ),\n    ],\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a middleware to the application.\n\n    Read more about it in the\n    [ReadyAPI docs for Middleware](https://readyapi.github.io/tutorial/middleware/).\n\n    ## Example\n\n    ```python\n    import time\n\n    from readyapi import ReadyAPI, Request\n\n    app = ReadyAPI()\n\n\n    @app.middleware(\"http\")\n    async def add_process_time_header(request: Request, call_next):\n        start_time = time.time()\n        response = await call_next(request)\n        process_time = time.time() - start_time\n        response.headers[\"X-Process-Time\"] = str(process_time)\n        return response\n    ```\n    \"\"\"\n\n    def decorator(func: DecoratedCallable) -&gt; DecoratedCallable:\n        self.add_middleware(BaseHTTPMiddleware, dispatch=func)\n        return func\n\n    return decorator\n</code></pre>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.exception_handler","title":"exception_handler","text":"<pre><code>exception_handler(exc_class_or_status_code)\n</code></pre> <p>Add an exception handler to the app.</p> <p>Read more about it in the ReadyAPI docs for Handling Errors.</p>"},{"location":"reference/readyapi/#readyapi.ReadyAPI.exception_handler--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI, Request\nfrom readyapi.responses import JSONResponse\n\n\nclass UnicornException(Exception):\n    def __init__(self, name: str):\n        self.name = name\n\n\napp = ReadyAPI()\n\n\n@app.exception_handler(UnicornException)\nasync def unicorn_exception_handler(request: Request, exc: UnicornException):\n    return JSONResponse(\n        status_code=418,\n        content={\"message\": f\"Oops! {exc.name} did something. There goes a rainbow...\"},\n    )\n</code></pre> PARAMETER DESCRIPTION <code>exc_class_or_status_code</code> <p>The Exception class this would handle, or a status code.</p> <p> TYPE: <code>Union[int, Type[Exception]]</code> </p> Source code in <code>readyapi/applications.py</code> <pre><code>def exception_handler(\n    self,\n    exc_class_or_status_code: Annotated[\n        Union[int, Type[Exception]],\n        Doc(\n            \"\"\"\n            The Exception class this would handle, or a status code.\n            \"\"\"\n        ),\n    ],\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add an exception handler to the app.\n\n    Read more about it in the\n    [ReadyAPI docs for Handling Errors](https://readyapi.github.io/tutorial/handling-errors/).\n\n    ## Example\n\n    ```python\n    from readyapi import ReadyAPI, Request\n    from readyapi.responses import JSONResponse\n\n\n    class UnicornException(Exception):\n        def __init__(self, name: str):\n            self.name = name\n\n\n    app = ReadyAPI()\n\n\n    @app.exception_handler(UnicornException)\n    async def unicorn_exception_handler(request: Request, exc: UnicornException):\n        return JSONResponse(\n            status_code=418,\n            content={\"message\": f\"Oops! {exc.name} did something. There goes a rainbow...\"},\n        )\n    ```\n    \"\"\"\n\n    def decorator(func: DecoratedCallable) -&gt; DecoratedCallable:\n        self.add_exception_handler(exc_class_or_status_code, func)\n        return func\n\n    return decorator\n</code></pre>"},{"location":"reference/parameters/","title":"Request Parameters","text":"<p>Here's the reference information for the request parameters.</p> <p>These are the special functions that you can put in path operation function parameters or dependency functions with <code>Annotated</code> to get data from the request.</p> <p>It includes:</p> <ul> <li><code>Query()</code></li> <li><code>Path()</code></li> <li><code>Body()</code></li> <li><code>Cookie()</code></li> <li><code>Header()</code></li> <li><code>Form()</code></li> <li><code>File()</code></li> </ul> <p>You can import them all directly from <code>readyapi</code>:</p> <pre><code>from readyapi import Body, Cookie, File, Form, Header, Path, Query\n</code></pre>"},{"location":"reference/parameters/#readyapi.Query","title":"readyapi.Query","text":"<pre><code>Query(\n    default=Undefined,\n    *,\n    default_factory=_Unset,\n    alias=None,\n    alias_priority=_Unset,\n    validation_alias=None,\n    serialization_alias=None,\n    title=None,\n    description=None,\n    gt=None,\n    ge=None,\n    lt=None,\n    le=None,\n    min_length=None,\n    max_length=None,\n    pattern=None,\n    regex=None,\n    discriminator=None,\n    strict=_Unset,\n    multiple_of=_Unset,\n    allow_inf_nan=_Unset,\n    max_digits=_Unset,\n    decimal_places=_Unset,\n    examples=None,\n    example=_Unset,\n    openapi_examples=None,\n    deprecated=None,\n    include_in_schema=True,\n    json_schema_extra=None,\n    **extra\n)\n</code></pre> PARAMETER DESCRIPTION <code>default</code> <p>Default value if the parameter field is not set.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Undefined</code> </p> <code>default_factory</code> <p>A callable to generate the default value.</p> <p>This doesn't affect <code>Path</code> parameters as the value is always required. The parameter is available only for compatibility.</p> <p> TYPE: <code>Union[Callable[[], Any], None]</code> DEFAULT: <code>_Unset</code> </p> <code>alias</code> <p>An alternative name for the parameter field.</p> <p>This will be used to extract the data and for the generated OpenAPI. It is particularly useful when you can't use the name you want because it is a Python reserved keyword or similar.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>alias_priority</code> <p>Priority of the alias. This affects whether an alias generator is used.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>validation_alias</code> <p>'Whitelist' validation step. The parameter field will be the single one allowed by the alias or set of aliases defined.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>serialization_alias</code> <p>'Blacklist' validation step. The vanilla parameter field will be the single one of the alias' or set of aliases' fields and all the other fields will be ignored at serialization time.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>title</code> <p>Human-readable title.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Human-readable description.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>gt</code> <p>Greater than. If set, value must be greater than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>ge</code> <p>Greater than or equal. If set, value must be greater than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>lt</code> <p>Less than. If set, value must be less than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>le</code> <p>Less than or equal. If set, value must be less than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>min_length</code> <p>Minimum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>max_length</code> <p>Maximum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>pattern</code> <p>RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>regex</code> <p>Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use <code>pattern</code> instead. RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>discriminator</code> <p>Parameter field name for discriminating the type in a tagged union.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>strict</code> <p>If <code>True</code>, strict validation is applied to the field.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>multiple_of</code> <p>Value must be a multiple of this. Only applicable to numbers.</p> <p> TYPE: <code>Union[float, None]</code> DEFAULT: <code>_Unset</code> </p> <code>allow_inf_nan</code> <p>Allow <code>inf</code>, <code>-inf</code>, <code>nan</code>. Only applicable to numbers.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>max_digits</code> <p>Maximum number of allow digits for strings.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>decimal_places</code> <p>Maximum number of decimal places allowed for numbers.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>examples</code> <p>Example values for this field.</p> <p> TYPE: <code>Optional[List[Any]]</code> DEFAULT: <code>None</code> </p> <code>example</code> <p>Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, although still supported. Use examples instead. </p> <p> TYPE: <code>Optional[Any]</code> DEFAULT: <code>_Unset</code> </p> <code>openapi_examples</code> <p>OpenAPI-specific examples.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Swagger UI (that provides the <code>/docs</code> interface) has better support for the OpenAPI-specific examples than the JSON Schema <code>examples</code>, that's the main use case for this.</p> <p>Read more about it in the ReadyAPI docs for Declare Request Example Data.</p> <p> TYPE: <code>Optional[Dict[str, Example]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this parameter field as deprecated.</p> <p>It will affect the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Union[deprecated, str, bool, None]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>To include (or not) this parameter field in the generated OpenAPI. You probably don't need it, but it's available.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>json_schema_extra</code> <p>Any additional JSON schema data.</p> <p> TYPE: <code>Union[Dict[str, Any], None]</code> DEFAULT: <code>None</code> </p> <code>**extra</code> <p>The <code>extra</code> kwargs is deprecated. Use <code>json_schema_extra</code> instead. Include extra fields used by the JSON Schema.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>readyapi/param_functions.py</code> <pre><code>def Query(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n            \"\"\"\n        ),\n    ] = Undefined,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    # TODO: update when deprecating Pydantic v1, import these types\n    # validation_alias: str | AliasPath | AliasChoices | None\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [ReadyAPI docs for Declare Request Example Data](https://readyapi.github.io/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -&gt; Any:\n    return params.Query(\n        default=default,\n        default_factory=default_factory,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )\n</code></pre>"},{"location":"reference/parameters/#readyapi.Path","title":"readyapi.Path","text":"<pre><code>Path(\n    default=...,\n    *,\n    default_factory=_Unset,\n    alias=None,\n    alias_priority=_Unset,\n    validation_alias=None,\n    serialization_alias=None,\n    title=None,\n    description=None,\n    gt=None,\n    ge=None,\n    lt=None,\n    le=None,\n    min_length=None,\n    max_length=None,\n    pattern=None,\n    regex=None,\n    discriminator=None,\n    strict=_Unset,\n    multiple_of=_Unset,\n    allow_inf_nan=_Unset,\n    max_digits=_Unset,\n    decimal_places=_Unset,\n    examples=None,\n    example=_Unset,\n    openapi_examples=None,\n    deprecated=None,\n    include_in_schema=True,\n    json_schema_extra=None,\n    **extra\n)\n</code></pre> <p>Declare a path parameter for a path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Parameters and Numeric Validations.</p> <pre><code>from typing import Annotated\n\nfrom readyapi import ReadyAPI, Path\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n):\n    return {\"item_id\": item_id}\n</code></pre> PARAMETER DESCRIPTION <code>default</code> <p>Default value if the parameter field is not set.</p> <p>This doesn't affect <code>Path</code> parameters as the value is always required. The parameter is available only for compatibility.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>...</code> </p> <code>default_factory</code> <p>A callable to generate the default value.</p> <p>This doesn't affect <code>Path</code> parameters as the value is always required. The parameter is available only for compatibility.</p> <p> TYPE: <code>Union[Callable[[], Any], None]</code> DEFAULT: <code>_Unset</code> </p> <code>alias</code> <p>An alternative name for the parameter field.</p> <p>This will be used to extract the data and for the generated OpenAPI. It is particularly useful when you can't use the name you want because it is a Python reserved keyword or similar.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>alias_priority</code> <p>Priority of the alias. This affects whether an alias generator is used.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>validation_alias</code> <p>'Whitelist' validation step. The parameter field will be the single one allowed by the alias or set of aliases defined.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>serialization_alias</code> <p>'Blacklist' validation step. The vanilla parameter field will be the single one of the alias' or set of aliases' fields and all the other fields will be ignored at serialization time.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>title</code> <p>Human-readable title.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Human-readable description.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>gt</code> <p>Greater than. If set, value must be greater than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>ge</code> <p>Greater than or equal. If set, value must be greater than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>lt</code> <p>Less than. If set, value must be less than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>le</code> <p>Less than or equal. If set, value must be less than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>min_length</code> <p>Minimum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>max_length</code> <p>Maximum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>pattern</code> <p>RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>regex</code> <p>Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use <code>pattern</code> instead. RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>discriminator</code> <p>Parameter field name for discriminating the type in a tagged union.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>strict</code> <p>If <code>True</code>, strict validation is applied to the field.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>multiple_of</code> <p>Value must be a multiple of this. Only applicable to numbers.</p> <p> TYPE: <code>Union[float, None]</code> DEFAULT: <code>_Unset</code> </p> <code>allow_inf_nan</code> <p>Allow <code>inf</code>, <code>-inf</code>, <code>nan</code>. Only applicable to numbers.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>max_digits</code> <p>Maximum number of allow digits for strings.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>decimal_places</code> <p>Maximum number of decimal places allowed for numbers.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>examples</code> <p>Example values for this field.</p> <p> TYPE: <code>Optional[List[Any]]</code> DEFAULT: <code>None</code> </p> <code>example</code> <p>Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, although still supported. Use examples instead. </p> <p> TYPE: <code>Optional[Any]</code> DEFAULT: <code>_Unset</code> </p> <code>openapi_examples</code> <p>OpenAPI-specific examples.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Swagger UI (that provides the <code>/docs</code> interface) has better support for the OpenAPI-specific examples than the JSON Schema <code>examples</code>, that's the main use case for this.</p> <p>Read more about it in the ReadyAPI docs for Declare Request Example Data.</p> <p> TYPE: <code>Optional[Dict[str, Example]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this parameter field as deprecated.</p> <p>It will affect the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Union[deprecated, str, bool, None]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>To include (or not) this parameter field in the generated OpenAPI. You probably don't need it, but it's available.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>json_schema_extra</code> <p>Any additional JSON schema data.</p> <p> TYPE: <code>Union[Dict[str, Any], None]</code> DEFAULT: <code>None</code> </p> <code>**extra</code> <p>The <code>extra</code> kwargs is deprecated. Use <code>json_schema_extra</code> instead. Include extra fields used by the JSON Schema.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>readyapi/param_functions.py</code> <pre><code>def Path(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = ...,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    # TODO: update when deprecating Pydantic v1, import these types\n    # validation_alias: str | AliasPath | AliasChoices | None\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [ReadyAPI docs for Declare Request Example Data](https://readyapi.github.io/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -&gt; Any:\n    \"\"\"\n    Declare a path parameter for a *path operation*.\n\n    Read more about it in the\n    [ReadyAPI docs for Path Parameters and Numeric Validations](https://readyapi.github.io/tutorial/path-params-numeric-validations/).\n\n    ```python\n    from typing import Annotated\n\n    from readyapi import ReadyAPI, Path\n\n    app = ReadyAPI()\n\n\n    @app.get(\"/items/{item_id}\")\n    async def read_items(\n        item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    ):\n        return {\"item_id\": item_id}\n    ```\n    \"\"\"\n    return params.Path(\n        default=default,\n        default_factory=default_factory,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )\n</code></pre>"},{"location":"reference/parameters/#readyapi.Body","title":"readyapi.Body","text":"<pre><code>Body(\n    default=Undefined,\n    *,\n    default_factory=_Unset,\n    embed=None,\n    media_type=\"application/json\",\n    alias=None,\n    alias_priority=_Unset,\n    validation_alias=None,\n    serialization_alias=None,\n    title=None,\n    description=None,\n    gt=None,\n    ge=None,\n    lt=None,\n    le=None,\n    min_length=None,\n    max_length=None,\n    pattern=None,\n    regex=None,\n    discriminator=None,\n    strict=_Unset,\n    multiple_of=_Unset,\n    allow_inf_nan=_Unset,\n    max_digits=_Unset,\n    decimal_places=_Unset,\n    examples=None,\n    example=_Unset,\n    openapi_examples=None,\n    deprecated=None,\n    include_in_schema=True,\n    json_schema_extra=None,\n    **extra\n)\n</code></pre> PARAMETER DESCRIPTION <code>default</code> <p>Default value if the parameter field is not set.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Undefined</code> </p> <code>default_factory</code> <p>A callable to generate the default value.</p> <p>This doesn't affect <code>Path</code> parameters as the value is always required. The parameter is available only for compatibility.</p> <p> TYPE: <code>Union[Callable[[], Any], None]</code> DEFAULT: <code>_Unset</code> </p> <code>embed</code> <p>When <code>embed</code> is <code>True</code>, the parameter will be expected in a JSON body as a key instead of being the JSON body itself.</p> <p>This happens automatically when more than one <code>Body</code> parameter is declared.</p> <p>Read more about it in the ReadyAPI docs for Body - Multiple Parameters.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p>The media type of this parameter field. Changing it would affect the generated OpenAPI, but currently it doesn't affect the parsing of the data.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'application/json'</code> </p> <code>alias</code> <p>An alternative name for the parameter field.</p> <p>This will be used to extract the data and for the generated OpenAPI. It is particularly useful when you can't use the name you want because it is a Python reserved keyword or similar.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>alias_priority</code> <p>Priority of the alias. This affects whether an alias generator is used.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>validation_alias</code> <p>'Whitelist' validation step. The parameter field will be the single one allowed by the alias or set of aliases defined.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>serialization_alias</code> <p>'Blacklist' validation step. The vanilla parameter field will be the single one of the alias' or set of aliases' fields and all the other fields will be ignored at serialization time.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>title</code> <p>Human-readable title.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Human-readable description.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>gt</code> <p>Greater than. If set, value must be greater than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>ge</code> <p>Greater than or equal. If set, value must be greater than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>lt</code> <p>Less than. If set, value must be less than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>le</code> <p>Less than or equal. If set, value must be less than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>min_length</code> <p>Minimum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>max_length</code> <p>Maximum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>pattern</code> <p>RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>regex</code> <p>Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use <code>pattern</code> instead. RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>discriminator</code> <p>Parameter field name for discriminating the type in a tagged union.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>strict</code> <p>If <code>True</code>, strict validation is applied to the field.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>multiple_of</code> <p>Value must be a multiple of this. Only applicable to numbers.</p> <p> TYPE: <code>Union[float, None]</code> DEFAULT: <code>_Unset</code> </p> <code>allow_inf_nan</code> <p>Allow <code>inf</code>, <code>-inf</code>, <code>nan</code>. Only applicable to numbers.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>max_digits</code> <p>Maximum number of allow digits for strings.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>decimal_places</code> <p>Maximum number of decimal places allowed for numbers.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>examples</code> <p>Example values for this field.</p> <p> TYPE: <code>Optional[List[Any]]</code> DEFAULT: <code>None</code> </p> <code>example</code> <p>Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, although still supported. Use examples instead. </p> <p> TYPE: <code>Optional[Any]</code> DEFAULT: <code>_Unset</code> </p> <code>openapi_examples</code> <p>OpenAPI-specific examples.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Swagger UI (that provides the <code>/docs</code> interface) has better support for the OpenAPI-specific examples than the JSON Schema <code>examples</code>, that's the main use case for this.</p> <p>Read more about it in the ReadyAPI docs for Declare Request Example Data.</p> <p> TYPE: <code>Optional[Dict[str, Example]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this parameter field as deprecated.</p> <p>It will affect the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Union[deprecated, str, bool, None]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>To include (or not) this parameter field in the generated OpenAPI. You probably don't need it, but it's available.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>json_schema_extra</code> <p>Any additional JSON schema data.</p> <p> TYPE: <code>Union[Dict[str, Any], None]</code> DEFAULT: <code>None</code> </p> <code>**extra</code> <p>The <code>extra</code> kwargs is deprecated. Use <code>json_schema_extra</code> instead. Include extra fields used by the JSON Schema.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>readyapi/param_functions.py</code> <pre><code>def Body(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n            \"\"\"\n        ),\n    ] = Undefined,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    embed: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            When `embed` is `True`, the parameter will be expected in a JSON body as a\n            key instead of being the JSON body itself.\n\n            This happens automatically when more than one `Body` parameter is declared.\n\n            Read more about it in the\n            [ReadyAPI docs for Body - Multiple Parameters](https://readyapi.github.io/tutorial/body-multiple-params/#embed-a-single-body-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    media_type: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The media type of this parameter field. Changing it would affect the\n            generated OpenAPI, but currently it doesn't affect the parsing of the data.\n            \"\"\"\n        ),\n    ] = \"application/json\",\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    # TODO: update when deprecating Pydantic v1, import these types\n    # validation_alias: str | AliasPath | AliasChoices | None\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [ReadyAPI docs for Declare Request Example Data](https://readyapi.github.io/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -&gt; Any:\n    return params.Body(\n        default=default,\n        default_factory=default_factory,\n        embed=embed,\n        media_type=media_type,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )\n</code></pre>"},{"location":"reference/parameters/#readyapi.Cookie","title":"readyapi.Cookie","text":"<pre><code>Cookie(\n    default=Undefined,\n    *,\n    default_factory=_Unset,\n    alias=None,\n    alias_priority=_Unset,\n    validation_alias=None,\n    serialization_alias=None,\n    title=None,\n    description=None,\n    gt=None,\n    ge=None,\n    lt=None,\n    le=None,\n    min_length=None,\n    max_length=None,\n    pattern=None,\n    regex=None,\n    discriminator=None,\n    strict=_Unset,\n    multiple_of=_Unset,\n    allow_inf_nan=_Unset,\n    max_digits=_Unset,\n    decimal_places=_Unset,\n    examples=None,\n    example=_Unset,\n    openapi_examples=None,\n    deprecated=None,\n    include_in_schema=True,\n    json_schema_extra=None,\n    **extra\n)\n</code></pre> PARAMETER DESCRIPTION <code>default</code> <p>Default value if the parameter field is not set.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Undefined</code> </p> <code>default_factory</code> <p>A callable to generate the default value.</p> <p>This doesn't affect <code>Path</code> parameters as the value is always required. The parameter is available only for compatibility.</p> <p> TYPE: <code>Union[Callable[[], Any], None]</code> DEFAULT: <code>_Unset</code> </p> <code>alias</code> <p>An alternative name for the parameter field.</p> <p>This will be used to extract the data and for the generated OpenAPI. It is particularly useful when you can't use the name you want because it is a Python reserved keyword or similar.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>alias_priority</code> <p>Priority of the alias. This affects whether an alias generator is used.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>validation_alias</code> <p>'Whitelist' validation step. The parameter field will be the single one allowed by the alias or set of aliases defined.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>serialization_alias</code> <p>'Blacklist' validation step. The vanilla parameter field will be the single one of the alias' or set of aliases' fields and all the other fields will be ignored at serialization time.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>title</code> <p>Human-readable title.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Human-readable description.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>gt</code> <p>Greater than. If set, value must be greater than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>ge</code> <p>Greater than or equal. If set, value must be greater than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>lt</code> <p>Less than. If set, value must be less than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>le</code> <p>Less than or equal. If set, value must be less than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>min_length</code> <p>Minimum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>max_length</code> <p>Maximum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>pattern</code> <p>RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>regex</code> <p>Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use <code>pattern</code> instead. RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>discriminator</code> <p>Parameter field name for discriminating the type in a tagged union.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>strict</code> <p>If <code>True</code>, strict validation is applied to the field.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>multiple_of</code> <p>Value must be a multiple of this. Only applicable to numbers.</p> <p> TYPE: <code>Union[float, None]</code> DEFAULT: <code>_Unset</code> </p> <code>allow_inf_nan</code> <p>Allow <code>inf</code>, <code>-inf</code>, <code>nan</code>. Only applicable to numbers.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>max_digits</code> <p>Maximum number of allow digits for strings.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>decimal_places</code> <p>Maximum number of decimal places allowed for numbers.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>examples</code> <p>Example values for this field.</p> <p> TYPE: <code>Optional[List[Any]]</code> DEFAULT: <code>None</code> </p> <code>example</code> <p>Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, although still supported. Use examples instead. </p> <p> TYPE: <code>Optional[Any]</code> DEFAULT: <code>_Unset</code> </p> <code>openapi_examples</code> <p>OpenAPI-specific examples.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Swagger UI (that provides the <code>/docs</code> interface) has better support for the OpenAPI-specific examples than the JSON Schema <code>examples</code>, that's the main use case for this.</p> <p>Read more about it in the ReadyAPI docs for Declare Request Example Data.</p> <p> TYPE: <code>Optional[Dict[str, Example]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this parameter field as deprecated.</p> <p>It will affect the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Union[deprecated, str, bool, None]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>To include (or not) this parameter field in the generated OpenAPI. You probably don't need it, but it's available.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>json_schema_extra</code> <p>Any additional JSON schema data.</p> <p> TYPE: <code>Union[Dict[str, Any], None]</code> DEFAULT: <code>None</code> </p> <code>**extra</code> <p>The <code>extra</code> kwargs is deprecated. Use <code>json_schema_extra</code> instead. Include extra fields used by the JSON Schema.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>readyapi/param_functions.py</code> <pre><code>def Cookie(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n            \"\"\"\n        ),\n    ] = Undefined,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    # TODO: update when deprecating Pydantic v1, import these types\n    # validation_alias: str | AliasPath | AliasChoices | None\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [ReadyAPI docs for Declare Request Example Data](https://readyapi.github.io/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -&gt; Any:\n    return params.Cookie(\n        default=default,\n        default_factory=default_factory,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )\n</code></pre>"},{"location":"reference/parameters/#readyapi.Header","title":"readyapi.Header","text":"<pre><code>Header(\n    default=Undefined,\n    *,\n    default_factory=_Unset,\n    alias=None,\n    alias_priority=_Unset,\n    validation_alias=None,\n    serialization_alias=None,\n    convert_underscores=True,\n    title=None,\n    description=None,\n    gt=None,\n    ge=None,\n    lt=None,\n    le=None,\n    min_length=None,\n    max_length=None,\n    pattern=None,\n    regex=None,\n    discriminator=None,\n    strict=_Unset,\n    multiple_of=_Unset,\n    allow_inf_nan=_Unset,\n    max_digits=_Unset,\n    decimal_places=_Unset,\n    examples=None,\n    example=_Unset,\n    openapi_examples=None,\n    deprecated=None,\n    include_in_schema=True,\n    json_schema_extra=None,\n    **extra\n)\n</code></pre> PARAMETER DESCRIPTION <code>default</code> <p>Default value if the parameter field is not set.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Undefined</code> </p> <code>default_factory</code> <p>A callable to generate the default value.</p> <p>This doesn't affect <code>Path</code> parameters as the value is always required. The parameter is available only for compatibility.</p> <p> TYPE: <code>Union[Callable[[], Any], None]</code> DEFAULT: <code>_Unset</code> </p> <code>alias</code> <p>An alternative name for the parameter field.</p> <p>This will be used to extract the data and for the generated OpenAPI. It is particularly useful when you can't use the name you want because it is a Python reserved keyword or similar.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>alias_priority</code> <p>Priority of the alias. This affects whether an alias generator is used.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>validation_alias</code> <p>'Whitelist' validation step. The parameter field will be the single one allowed by the alias or set of aliases defined.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>serialization_alias</code> <p>'Blacklist' validation step. The vanilla parameter field will be the single one of the alias' or set of aliases' fields and all the other fields will be ignored at serialization time.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>convert_underscores</code> <p>Automatically convert underscores to hyphens in the parameter field name.</p> <p>Read more about it in the ReadyAPI docs for Header Parameters</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>title</code> <p>Human-readable title.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Human-readable description.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>gt</code> <p>Greater than. If set, value must be greater than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>ge</code> <p>Greater than or equal. If set, value must be greater than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>lt</code> <p>Less than. If set, value must be less than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>le</code> <p>Less than or equal. If set, value must be less than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>min_length</code> <p>Minimum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>max_length</code> <p>Maximum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>pattern</code> <p>RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>regex</code> <p>Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use <code>pattern</code> instead. RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>discriminator</code> <p>Parameter field name for discriminating the type in a tagged union.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>strict</code> <p>If <code>True</code>, strict validation is applied to the field.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>multiple_of</code> <p>Value must be a multiple of this. Only applicable to numbers.</p> <p> TYPE: <code>Union[float, None]</code> DEFAULT: <code>_Unset</code> </p> <code>allow_inf_nan</code> <p>Allow <code>inf</code>, <code>-inf</code>, <code>nan</code>. Only applicable to numbers.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>max_digits</code> <p>Maximum number of allow digits for strings.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>decimal_places</code> <p>Maximum number of decimal places allowed for numbers.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>examples</code> <p>Example values for this field.</p> <p> TYPE: <code>Optional[List[Any]]</code> DEFAULT: <code>None</code> </p> <code>example</code> <p>Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, although still supported. Use examples instead. </p> <p> TYPE: <code>Optional[Any]</code> DEFAULT: <code>_Unset</code> </p> <code>openapi_examples</code> <p>OpenAPI-specific examples.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Swagger UI (that provides the <code>/docs</code> interface) has better support for the OpenAPI-specific examples than the JSON Schema <code>examples</code>, that's the main use case for this.</p> <p>Read more about it in the ReadyAPI docs for Declare Request Example Data.</p> <p> TYPE: <code>Optional[Dict[str, Example]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this parameter field as deprecated.</p> <p>It will affect the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Union[deprecated, str, bool, None]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>To include (or not) this parameter field in the generated OpenAPI. You probably don't need it, but it's available.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>json_schema_extra</code> <p>Any additional JSON schema data.</p> <p> TYPE: <code>Union[Dict[str, Any], None]</code> DEFAULT: <code>None</code> </p> <code>**extra</code> <p>The <code>extra</code> kwargs is deprecated. Use <code>json_schema_extra</code> instead. Include extra fields used by the JSON Schema.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>readyapi/param_functions.py</code> <pre><code>def Header(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n            \"\"\"\n        ),\n    ] = Undefined,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    # TODO: update when deprecating Pydantic v1, import these types\n    # validation_alias: str | AliasPath | AliasChoices | None\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    convert_underscores: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Automatically convert underscores to hyphens in the parameter field name.\n\n            Read more about it in the\n            [ReadyAPI docs for Header Parameters](https://readyapi.github.io/tutorial/header-params/#automatic-conversion)\n            \"\"\"\n        ),\n    ] = True,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [ReadyAPI docs for Declare Request Example Data](https://readyapi.github.io/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -&gt; Any:\n    return params.Header(\n        default=default,\n        default_factory=default_factory,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        convert_underscores=convert_underscores,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )\n</code></pre>"},{"location":"reference/parameters/#readyapi.Form","title":"readyapi.Form","text":"<pre><code>Form(\n    default=Undefined,\n    *,\n    default_factory=_Unset,\n    media_type=\"application/x-www-form-urlencoded\",\n    alias=None,\n    alias_priority=_Unset,\n    validation_alias=None,\n    serialization_alias=None,\n    title=None,\n    description=None,\n    gt=None,\n    ge=None,\n    lt=None,\n    le=None,\n    min_length=None,\n    max_length=None,\n    pattern=None,\n    regex=None,\n    discriminator=None,\n    strict=_Unset,\n    multiple_of=_Unset,\n    allow_inf_nan=_Unset,\n    max_digits=_Unset,\n    decimal_places=_Unset,\n    examples=None,\n    example=_Unset,\n    openapi_examples=None,\n    deprecated=None,\n    include_in_schema=True,\n    json_schema_extra=None,\n    **extra\n)\n</code></pre> PARAMETER DESCRIPTION <code>default</code> <p>Default value if the parameter field is not set.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Undefined</code> </p> <code>default_factory</code> <p>A callable to generate the default value.</p> <p>This doesn't affect <code>Path</code> parameters as the value is always required. The parameter is available only for compatibility.</p> <p> TYPE: <code>Union[Callable[[], Any], None]</code> DEFAULT: <code>_Unset</code> </p> <code>media_type</code> <p>The media type of this parameter field. Changing it would affect the generated OpenAPI, but currently it doesn't affect the parsing of the data.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'application/x-www-form-urlencoded'</code> </p> <code>alias</code> <p>An alternative name for the parameter field.</p> <p>This will be used to extract the data and for the generated OpenAPI. It is particularly useful when you can't use the name you want because it is a Python reserved keyword or similar.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>alias_priority</code> <p>Priority of the alias. This affects whether an alias generator is used.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>validation_alias</code> <p>'Whitelist' validation step. The parameter field will be the single one allowed by the alias or set of aliases defined.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>serialization_alias</code> <p>'Blacklist' validation step. The vanilla parameter field will be the single one of the alias' or set of aliases' fields and all the other fields will be ignored at serialization time.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>title</code> <p>Human-readable title.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Human-readable description.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>gt</code> <p>Greater than. If set, value must be greater than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>ge</code> <p>Greater than or equal. If set, value must be greater than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>lt</code> <p>Less than. If set, value must be less than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>le</code> <p>Less than or equal. If set, value must be less than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>min_length</code> <p>Minimum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>max_length</code> <p>Maximum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>pattern</code> <p>RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>regex</code> <p>Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use <code>pattern</code> instead. RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>discriminator</code> <p>Parameter field name for discriminating the type in a tagged union.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>strict</code> <p>If <code>True</code>, strict validation is applied to the field.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>multiple_of</code> <p>Value must be a multiple of this. Only applicable to numbers.</p> <p> TYPE: <code>Union[float, None]</code> DEFAULT: <code>_Unset</code> </p> <code>allow_inf_nan</code> <p>Allow <code>inf</code>, <code>-inf</code>, <code>nan</code>. Only applicable to numbers.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>max_digits</code> <p>Maximum number of allow digits for strings.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>decimal_places</code> <p>Maximum number of decimal places allowed for numbers.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>examples</code> <p>Example values for this field.</p> <p> TYPE: <code>Optional[List[Any]]</code> DEFAULT: <code>None</code> </p> <code>example</code> <p>Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, although still supported. Use examples instead. </p> <p> TYPE: <code>Optional[Any]</code> DEFAULT: <code>_Unset</code> </p> <code>openapi_examples</code> <p>OpenAPI-specific examples.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Swagger UI (that provides the <code>/docs</code> interface) has better support for the OpenAPI-specific examples than the JSON Schema <code>examples</code>, that's the main use case for this.</p> <p>Read more about it in the ReadyAPI docs for Declare Request Example Data.</p> <p> TYPE: <code>Optional[Dict[str, Example]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this parameter field as deprecated.</p> <p>It will affect the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Union[deprecated, str, bool, None]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>To include (or not) this parameter field in the generated OpenAPI. You probably don't need it, but it's available.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>json_schema_extra</code> <p>Any additional JSON schema data.</p> <p> TYPE: <code>Union[Dict[str, Any], None]</code> DEFAULT: <code>None</code> </p> <code>**extra</code> <p>The <code>extra</code> kwargs is deprecated. Use <code>json_schema_extra</code> instead. Include extra fields used by the JSON Schema.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>readyapi/param_functions.py</code> <pre><code>def Form(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n            \"\"\"\n        ),\n    ] = Undefined,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    media_type: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The media type of this parameter field. Changing it would affect the\n            generated OpenAPI, but currently it doesn't affect the parsing of the data.\n            \"\"\"\n        ),\n    ] = \"application/x-www-form-urlencoded\",\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    # TODO: update when deprecating Pydantic v1, import these types\n    # validation_alias: str | AliasPath | AliasChoices | None\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [ReadyAPI docs for Declare Request Example Data](https://readyapi.github.io/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -&gt; Any:\n    return params.Form(\n        default=default,\n        default_factory=default_factory,\n        media_type=media_type,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )\n</code></pre>"},{"location":"reference/parameters/#readyapi.File","title":"readyapi.File","text":"<pre><code>File(\n    default=Undefined,\n    *,\n    default_factory=_Unset,\n    media_type=\"multipart/form-data\",\n    alias=None,\n    alias_priority=_Unset,\n    validation_alias=None,\n    serialization_alias=None,\n    title=None,\n    description=None,\n    gt=None,\n    ge=None,\n    lt=None,\n    le=None,\n    min_length=None,\n    max_length=None,\n    pattern=None,\n    regex=None,\n    discriminator=None,\n    strict=_Unset,\n    multiple_of=_Unset,\n    allow_inf_nan=_Unset,\n    max_digits=_Unset,\n    decimal_places=_Unset,\n    examples=None,\n    example=_Unset,\n    openapi_examples=None,\n    deprecated=None,\n    include_in_schema=True,\n    json_schema_extra=None,\n    **extra\n)\n</code></pre> PARAMETER DESCRIPTION <code>default</code> <p>Default value if the parameter field is not set.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Undefined</code> </p> <code>default_factory</code> <p>A callable to generate the default value.</p> <p>This doesn't affect <code>Path</code> parameters as the value is always required. The parameter is available only for compatibility.</p> <p> TYPE: <code>Union[Callable[[], Any], None]</code> DEFAULT: <code>_Unset</code> </p> <code>media_type</code> <p>The media type of this parameter field. Changing it would affect the generated OpenAPI, but currently it doesn't affect the parsing of the data.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'multipart/form-data'</code> </p> <code>alias</code> <p>An alternative name for the parameter field.</p> <p>This will be used to extract the data and for the generated OpenAPI. It is particularly useful when you can't use the name you want because it is a Python reserved keyword or similar.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>alias_priority</code> <p>Priority of the alias. This affects whether an alias generator is used.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>validation_alias</code> <p>'Whitelist' validation step. The parameter field will be the single one allowed by the alias or set of aliases defined.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>serialization_alias</code> <p>'Blacklist' validation step. The vanilla parameter field will be the single one of the alias' or set of aliases' fields and all the other fields will be ignored at serialization time.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>title</code> <p>Human-readable title.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Human-readable description.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>gt</code> <p>Greater than. If set, value must be greater than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>ge</code> <p>Greater than or equal. If set, value must be greater than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>lt</code> <p>Less than. If set, value must be less than this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>le</code> <p>Less than or equal. If set, value must be less than or equal to this. Only applicable to numbers.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>min_length</code> <p>Minimum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>max_length</code> <p>Maximum length for strings.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>pattern</code> <p>RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>regex</code> <p>Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use <code>pattern</code> instead. RegEx pattern for strings.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>discriminator</code> <p>Parameter field name for discriminating the type in a tagged union.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>strict</code> <p>If <code>True</code>, strict validation is applied to the field.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>multiple_of</code> <p>Value must be a multiple of this. Only applicable to numbers.</p> <p> TYPE: <code>Union[float, None]</code> DEFAULT: <code>_Unset</code> </p> <code>allow_inf_nan</code> <p>Allow <code>inf</code>, <code>-inf</code>, <code>nan</code>. Only applicable to numbers.</p> <p> TYPE: <code>Union[bool, None]</code> DEFAULT: <code>_Unset</code> </p> <code>max_digits</code> <p>Maximum number of allow digits for strings.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>decimal_places</code> <p>Maximum number of decimal places allowed for numbers.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>_Unset</code> </p> <code>examples</code> <p>Example values for this field.</p> <p> TYPE: <code>Optional[List[Any]]</code> DEFAULT: <code>None</code> </p> <code>example</code> <p>Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, although still supported. Use examples instead. </p> <p> TYPE: <code>Optional[Any]</code> DEFAULT: <code>_Unset</code> </p> <code>openapi_examples</code> <p>OpenAPI-specific examples.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Swagger UI (that provides the <code>/docs</code> interface) has better support for the OpenAPI-specific examples than the JSON Schema <code>examples</code>, that's the main use case for this.</p> <p>Read more about it in the ReadyAPI docs for Declare Request Example Data.</p> <p> TYPE: <code>Optional[Dict[str, Example]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this parameter field as deprecated.</p> <p>It will affect the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Union[deprecated, str, bool, None]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>To include (or not) this parameter field in the generated OpenAPI. You probably don't need it, but it's available.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>json_schema_extra</code> <p>Any additional JSON schema data.</p> <p> TYPE: <code>Union[Dict[str, Any], None]</code> DEFAULT: <code>None</code> </p> <code>**extra</code> <p>The <code>extra</code> kwargs is deprecated. Use <code>json_schema_extra</code> instead. Include extra fields used by the JSON Schema.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>readyapi/param_functions.py</code> <pre><code>def File(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n            \"\"\"\n        ),\n    ] = Undefined,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    media_type: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The media type of this parameter field. Changing it would affect the\n            generated OpenAPI, but currently it doesn't affect the parsing of the data.\n            \"\"\"\n        ),\n    ] = \"multipart/form-data\",\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    # TODO: update when deprecating Pydantic v1, import these types\n    # validation_alias: str | AliasPath | AliasChoices | None\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in ReadyAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [ReadyAPI docs for Declare Request Example Data](https://readyapi.github.io/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -&gt; Any:\n    return params.File(\n        default=default,\n        default_factory=default_factory,\n        media_type=media_type,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )\n</code></pre>"},{"location":"reference/status/","title":"Status Codes","text":"<p>You can import the <code>status</code> module from <code>readyapi</code>:</p> <pre><code>from readyapi import status\n</code></pre> <p><code>status</code> is provided directly by Starlette.</p> <p>It contains a group of named constants (variables) with integer status codes.</p> <p>For example:</p> <ul> <li>200: <code>status.HTTP_200_OK</code></li> <li>403: <code>status.HTTP_403_FORBIDDEN</code></li> <li>etc.</li> </ul> <p>It can be convenient to quickly access HTTP (and WebSocket) status codes in your app, using autocompletion for the name without having to remember the integer status codes by memory.</p> <p>Read more about it in the ReadyAPI docs about Response Status Code.</p>"},{"location":"reference/status/#example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI, status\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/\", status_code=status.HTTP_418_IM_A_TEAPOT)\ndef read_items():\n    return [{\"name\": \"Plumbus\"}, {\"name\": \"Portal Gun\"}]\n</code></pre>"},{"location":"reference/status/#readyapi.status","title":"readyapi.status","text":"<p>HTTP codes See HTTP Status Code Registry: https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml</p> <p>And RFC 2324 - https://tools.ietf.org/html/rfc2324</p>"},{"location":"reference/status/#readyapi.status.HTTP_100_CONTINUE","title":"HTTP_100_CONTINUE  <code>module-attribute</code>","text":"<pre><code>HTTP_100_CONTINUE = 100\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_101_SWITCHING_PROTOCOLS","title":"HTTP_101_SWITCHING_PROTOCOLS  <code>module-attribute</code>","text":"<pre><code>HTTP_101_SWITCHING_PROTOCOLS = 101\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_102_PROCESSING","title":"HTTP_102_PROCESSING  <code>module-attribute</code>","text":"<pre><code>HTTP_102_PROCESSING = 102\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_103_EARLY_HINTS","title":"HTTP_103_EARLY_HINTS  <code>module-attribute</code>","text":"<pre><code>HTTP_103_EARLY_HINTS = 103\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_200_OK","title":"HTTP_200_OK  <code>module-attribute</code>","text":"<pre><code>HTTP_200_OK = 200\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_201_CREATED","title":"HTTP_201_CREATED  <code>module-attribute</code>","text":"<pre><code>HTTP_201_CREATED = 201\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_202_ACCEPTED","title":"HTTP_202_ACCEPTED  <code>module-attribute</code>","text":"<pre><code>HTTP_202_ACCEPTED = 202\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_203_NON_AUTHORITATIVE_INFORMATION","title":"HTTP_203_NON_AUTHORITATIVE_INFORMATION  <code>module-attribute</code>","text":"<pre><code>HTTP_203_NON_AUTHORITATIVE_INFORMATION = 203\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_204_NO_CONTENT","title":"HTTP_204_NO_CONTENT  <code>module-attribute</code>","text":"<pre><code>HTTP_204_NO_CONTENT = 204\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_205_RESET_CONTENT","title":"HTTP_205_RESET_CONTENT  <code>module-attribute</code>","text":"<pre><code>HTTP_205_RESET_CONTENT = 205\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_206_PARTIAL_CONTENT","title":"HTTP_206_PARTIAL_CONTENT  <code>module-attribute</code>","text":"<pre><code>HTTP_206_PARTIAL_CONTENT = 206\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_207_MULTI_STATUS","title":"HTTP_207_MULTI_STATUS  <code>module-attribute</code>","text":"<pre><code>HTTP_207_MULTI_STATUS = 207\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_208_ALREADY_REPORTED","title":"HTTP_208_ALREADY_REPORTED  <code>module-attribute</code>","text":"<pre><code>HTTP_208_ALREADY_REPORTED = 208\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_226_IM_USED","title":"HTTP_226_IM_USED  <code>module-attribute</code>","text":"<pre><code>HTTP_226_IM_USED = 226\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_300_MULTIPLE_CHOICES","title":"HTTP_300_MULTIPLE_CHOICES  <code>module-attribute</code>","text":"<pre><code>HTTP_300_MULTIPLE_CHOICES = 300\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_301_MOVED_PERMANENTLY","title":"HTTP_301_MOVED_PERMANENTLY  <code>module-attribute</code>","text":"<pre><code>HTTP_301_MOVED_PERMANENTLY = 301\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_302_FOUND","title":"HTTP_302_FOUND  <code>module-attribute</code>","text":"<pre><code>HTTP_302_FOUND = 302\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_303_SEE_OTHER","title":"HTTP_303_SEE_OTHER  <code>module-attribute</code>","text":"<pre><code>HTTP_303_SEE_OTHER = 303\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_304_NOT_MODIFIED","title":"HTTP_304_NOT_MODIFIED  <code>module-attribute</code>","text":"<pre><code>HTTP_304_NOT_MODIFIED = 304\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_305_USE_PROXY","title":"HTTP_305_USE_PROXY  <code>module-attribute</code>","text":"<pre><code>HTTP_305_USE_PROXY = 305\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_306_RESERVED","title":"HTTP_306_RESERVED  <code>module-attribute</code>","text":"<pre><code>HTTP_306_RESERVED = 306\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_307_TEMPORARY_REDIRECT","title":"HTTP_307_TEMPORARY_REDIRECT  <code>module-attribute</code>","text":"<pre><code>HTTP_307_TEMPORARY_REDIRECT = 307\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_308_PERMANENT_REDIRECT","title":"HTTP_308_PERMANENT_REDIRECT  <code>module-attribute</code>","text":"<pre><code>HTTP_308_PERMANENT_REDIRECT = 308\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_400_BAD_REQUEST","title":"HTTP_400_BAD_REQUEST  <code>module-attribute</code>","text":"<pre><code>HTTP_400_BAD_REQUEST = 400\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_401_UNAUTHORIZED","title":"HTTP_401_UNAUTHORIZED  <code>module-attribute</code>","text":"<pre><code>HTTP_401_UNAUTHORIZED = 401\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_402_PAYMENT_REQUIRED","title":"HTTP_402_PAYMENT_REQUIRED  <code>module-attribute</code>","text":"<pre><code>HTTP_402_PAYMENT_REQUIRED = 402\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_403_FORBIDDEN","title":"HTTP_403_FORBIDDEN  <code>module-attribute</code>","text":"<pre><code>HTTP_403_FORBIDDEN = 403\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_404_NOT_FOUND","title":"HTTP_404_NOT_FOUND  <code>module-attribute</code>","text":"<pre><code>HTTP_404_NOT_FOUND = 404\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_405_METHOD_NOT_ALLOWED","title":"HTTP_405_METHOD_NOT_ALLOWED  <code>module-attribute</code>","text":"<pre><code>HTTP_405_METHOD_NOT_ALLOWED = 405\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_406_NOT_ACCEPTABLE","title":"HTTP_406_NOT_ACCEPTABLE  <code>module-attribute</code>","text":"<pre><code>HTTP_406_NOT_ACCEPTABLE = 406\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_407_PROXY_AUTHENTICATION_REQUIRED","title":"HTTP_407_PROXY_AUTHENTICATION_REQUIRED  <code>module-attribute</code>","text":"<pre><code>HTTP_407_PROXY_AUTHENTICATION_REQUIRED = 407\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_408_REQUEST_TIMEOUT","title":"HTTP_408_REQUEST_TIMEOUT  <code>module-attribute</code>","text":"<pre><code>HTTP_408_REQUEST_TIMEOUT = 408\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_409_CONFLICT","title":"HTTP_409_CONFLICT  <code>module-attribute</code>","text":"<pre><code>HTTP_409_CONFLICT = 409\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_410_GONE","title":"HTTP_410_GONE  <code>module-attribute</code>","text":"<pre><code>HTTP_410_GONE = 410\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_411_LENGTH_REQUIRED","title":"HTTP_411_LENGTH_REQUIRED  <code>module-attribute</code>","text":"<pre><code>HTTP_411_LENGTH_REQUIRED = 411\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_412_PRECONDITION_FAILED","title":"HTTP_412_PRECONDITION_FAILED  <code>module-attribute</code>","text":"<pre><code>HTTP_412_PRECONDITION_FAILED = 412\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_413_REQUEST_ENTITY_TOO_LARGE","title":"HTTP_413_REQUEST_ENTITY_TOO_LARGE  <code>module-attribute</code>","text":"<pre><code>HTTP_413_REQUEST_ENTITY_TOO_LARGE = 413\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_414_REQUEST_URI_TOO_LONG","title":"HTTP_414_REQUEST_URI_TOO_LONG  <code>module-attribute</code>","text":"<pre><code>HTTP_414_REQUEST_URI_TOO_LONG = 414\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_415_UNSUPPORTED_MEDIA_TYPE","title":"HTTP_415_UNSUPPORTED_MEDIA_TYPE  <code>module-attribute</code>","text":"<pre><code>HTTP_415_UNSUPPORTED_MEDIA_TYPE = 415\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_416_REQUESTED_RANGE_NOT_SATISFIABLE","title":"HTTP_416_REQUESTED_RANGE_NOT_SATISFIABLE  <code>module-attribute</code>","text":"<pre><code>HTTP_416_REQUESTED_RANGE_NOT_SATISFIABLE = 416\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_417_EXPECTATION_FAILED","title":"HTTP_417_EXPECTATION_FAILED  <code>module-attribute</code>","text":"<pre><code>HTTP_417_EXPECTATION_FAILED = 417\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_418_IM_A_TEAPOT","title":"HTTP_418_IM_A_TEAPOT  <code>module-attribute</code>","text":"<pre><code>HTTP_418_IM_A_TEAPOT = 418\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_421_MISDIRECTED_REQUEST","title":"HTTP_421_MISDIRECTED_REQUEST  <code>module-attribute</code>","text":"<pre><code>HTTP_421_MISDIRECTED_REQUEST = 421\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_422_UNPROCESSABLE_ENTITY","title":"HTTP_422_UNPROCESSABLE_ENTITY  <code>module-attribute</code>","text":"<pre><code>HTTP_422_UNPROCESSABLE_ENTITY = 422\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_423_LOCKED","title":"HTTP_423_LOCKED  <code>module-attribute</code>","text":"<pre><code>HTTP_423_LOCKED = 423\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_424_FAILED_DEPENDENCY","title":"HTTP_424_FAILED_DEPENDENCY  <code>module-attribute</code>","text":"<pre><code>HTTP_424_FAILED_DEPENDENCY = 424\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_425_TOO_EARLY","title":"HTTP_425_TOO_EARLY  <code>module-attribute</code>","text":"<pre><code>HTTP_425_TOO_EARLY = 425\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_426_UPGRADE_REQUIRED","title":"HTTP_426_UPGRADE_REQUIRED  <code>module-attribute</code>","text":"<pre><code>HTTP_426_UPGRADE_REQUIRED = 426\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_428_PRECONDITION_REQUIRED","title":"HTTP_428_PRECONDITION_REQUIRED  <code>module-attribute</code>","text":"<pre><code>HTTP_428_PRECONDITION_REQUIRED = 428\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_429_TOO_MANY_REQUESTS","title":"HTTP_429_TOO_MANY_REQUESTS  <code>module-attribute</code>","text":"<pre><code>HTTP_429_TOO_MANY_REQUESTS = 429\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE","title":"HTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE  <code>module-attribute</code>","text":"<pre><code>HTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE = 431\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS","title":"HTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS  <code>module-attribute</code>","text":"<pre><code>HTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS = 451\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_500_INTERNAL_SERVER_ERROR","title":"HTTP_500_INTERNAL_SERVER_ERROR  <code>module-attribute</code>","text":"<pre><code>HTTP_500_INTERNAL_SERVER_ERROR = 500\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_501_NOT_IMPLEMENTED","title":"HTTP_501_NOT_IMPLEMENTED  <code>module-attribute</code>","text":"<pre><code>HTTP_501_NOT_IMPLEMENTED = 501\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_502_BAD_GATEWAY","title":"HTTP_502_BAD_GATEWAY  <code>module-attribute</code>","text":"<pre><code>HTTP_502_BAD_GATEWAY = 502\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_503_SERVICE_UNAVAILABLE","title":"HTTP_503_SERVICE_UNAVAILABLE  <code>module-attribute</code>","text":"<pre><code>HTTP_503_SERVICE_UNAVAILABLE = 503\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_504_GATEWAY_TIMEOUT","title":"HTTP_504_GATEWAY_TIMEOUT  <code>module-attribute</code>","text":"<pre><code>HTTP_504_GATEWAY_TIMEOUT = 504\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_505_HTTP_VERSION_NOT_SUPPORTED","title":"HTTP_505_HTTP_VERSION_NOT_SUPPORTED  <code>module-attribute</code>","text":"<pre><code>HTTP_505_HTTP_VERSION_NOT_SUPPORTED = 505\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_506_VARIANT_ALSO_NEGOTIATES","title":"HTTP_506_VARIANT_ALSO_NEGOTIATES  <code>module-attribute</code>","text":"<pre><code>HTTP_506_VARIANT_ALSO_NEGOTIATES = 506\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_507_INSUFFICIENT_STORAGE","title":"HTTP_507_INSUFFICIENT_STORAGE  <code>module-attribute</code>","text":"<pre><code>HTTP_507_INSUFFICIENT_STORAGE = 507\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_508_LOOP_DETECTED","title":"HTTP_508_LOOP_DETECTED  <code>module-attribute</code>","text":"<pre><code>HTTP_508_LOOP_DETECTED = 508\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_510_NOT_EXTENDED","title":"HTTP_510_NOT_EXTENDED  <code>module-attribute</code>","text":"<pre><code>HTTP_510_NOT_EXTENDED = 510\n</code></pre>"},{"location":"reference/status/#readyapi.status.HTTP_511_NETWORK_AUTHENTICATION_REQUIRED","title":"HTTP_511_NETWORK_AUTHENTICATION_REQUIRED  <code>module-attribute</code>","text":"<pre><code>HTTP_511_NETWORK_AUTHENTICATION_REQUIRED = 511\n</code></pre> <p>WebSocket codes https://www.iana.org/assignments/websocket/websocket.xml#close-code-number https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent</p>"},{"location":"reference/status/#readyapi.status.WS_1000_NORMAL_CLOSURE","title":"WS_1000_NORMAL_CLOSURE  <code>module-attribute</code>","text":"<pre><code>WS_1000_NORMAL_CLOSURE = 1000\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1001_GOING_AWAY","title":"WS_1001_GOING_AWAY  <code>module-attribute</code>","text":"<pre><code>WS_1001_GOING_AWAY = 1001\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1002_PROTOCOL_ERROR","title":"WS_1002_PROTOCOL_ERROR  <code>module-attribute</code>","text":"<pre><code>WS_1002_PROTOCOL_ERROR = 1002\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1003_UNSUPPORTED_DATA","title":"WS_1003_UNSUPPORTED_DATA  <code>module-attribute</code>","text":"<pre><code>WS_1003_UNSUPPORTED_DATA = 1003\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1005_NO_STATUS_RCVD","title":"WS_1005_NO_STATUS_RCVD  <code>module-attribute</code>","text":"<pre><code>WS_1005_NO_STATUS_RCVD = 1005\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1006_ABNORMAL_CLOSURE","title":"WS_1006_ABNORMAL_CLOSURE  <code>module-attribute</code>","text":"<pre><code>WS_1006_ABNORMAL_CLOSURE = 1006\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1007_INVALID_FRAME_PAYLOAD_DATA","title":"WS_1007_INVALID_FRAME_PAYLOAD_DATA  <code>module-attribute</code>","text":"<pre><code>WS_1007_INVALID_FRAME_PAYLOAD_DATA = 1007\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1008_POLICY_VIOLATION","title":"WS_1008_POLICY_VIOLATION  <code>module-attribute</code>","text":"<pre><code>WS_1008_POLICY_VIOLATION = 1008\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1009_MESSAGE_TOO_BIG","title":"WS_1009_MESSAGE_TOO_BIG  <code>module-attribute</code>","text":"<pre><code>WS_1009_MESSAGE_TOO_BIG = 1009\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1010_MANDATORY_EXT","title":"WS_1010_MANDATORY_EXT  <code>module-attribute</code>","text":"<pre><code>WS_1010_MANDATORY_EXT = 1010\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1011_INTERNAL_ERROR","title":"WS_1011_INTERNAL_ERROR  <code>module-attribute</code>","text":"<pre><code>WS_1011_INTERNAL_ERROR = 1011\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1012_SERVICE_RESTART","title":"WS_1012_SERVICE_RESTART  <code>module-attribute</code>","text":"<pre><code>WS_1012_SERVICE_RESTART = 1012\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1013_TRY_AGAIN_LATER","title":"WS_1013_TRY_AGAIN_LATER  <code>module-attribute</code>","text":"<pre><code>WS_1013_TRY_AGAIN_LATER = 1013\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1014_BAD_GATEWAY","title":"WS_1014_BAD_GATEWAY  <code>module-attribute</code>","text":"<pre><code>WS_1014_BAD_GATEWAY = 1014\n</code></pre>"},{"location":"reference/status/#readyapi.status.WS_1015_TLS_HANDSHAKE","title":"WS_1015_TLS_HANDSHAKE  <code>module-attribute</code>","text":"<pre><code>WS_1015_TLS_HANDSHAKE = 1015\n</code></pre>"},{"location":"reference/uploadfile/","title":"<code>UploadFile</code> class","text":"<p>You can define path operation function parameters to be of the type <code>UploadFile</code> to receive files from the request.</p> <p>You can import it directly from <code>readyapi</code>:</p> <pre><code>from readyapi import UploadFile\n</code></pre>"},{"location":"reference/uploadfile/#readyapi.UploadFile","title":"readyapi.UploadFile","text":"<pre><code>UploadFile(file, *, size=None, filename=None, headers=None)\n</code></pre> <p>               Bases: <code>UploadFile</code></p> <p>A file uploaded in a request.</p> <p>Define it as a path operation function (or dependency) parameter.</p> <p>If you are using a regular <code>def</code> function, you can use the <code>upload_file.file</code> attribute to access the raw standard Python file (blocking, not async), useful and needed for non-async code.</p> <p>Read more about it in the ReadyAPI docs for Request Files.</p>"},{"location":"reference/uploadfile/#readyapi.UploadFile--example","title":"Example","text":"<pre><code>from typing import Annotated\n\nfrom readyapi import ReadyAPI, File, UploadFile\n\napp = ReadyAPI()\n\n\n@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File()]):\n    return {\"file_size\": len(file)}\n\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}\n</code></pre> PARAMETER DESCRIPTION <code>file</code> <p> TYPE: <code>BinaryIO</code> </p> <code>size</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>filename</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>Headers | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/datastructures.py</code> <pre><code>def __init__(\n    self,\n    file: typing.BinaryIO,\n    *,\n    size: int | None = None,\n    filename: str | None = None,\n    headers: Headers | None = None,\n) -&gt; None:\n    self.filename = filename\n    self.file = file\n    self.size = size\n    self.headers = headers or Headers()\n</code></pre>"},{"location":"reference/uploadfile/#readyapi.UploadFile.file","title":"file  <code>instance-attribute</code>","text":"<pre><code>file\n</code></pre> <p>The standard Python file object (non-async).</p>"},{"location":"reference/uploadfile/#readyapi.UploadFile.filename","title":"filename  <code>instance-attribute</code>","text":"<pre><code>filename\n</code></pre> <p>The original file name.</p>"},{"location":"reference/uploadfile/#readyapi.UploadFile.size","title":"size  <code>instance-attribute</code>","text":"<pre><code>size\n</code></pre> <p>The size of the file in bytes.</p>"},{"location":"reference/uploadfile/#readyapi.UploadFile.headers","title":"headers  <code>instance-attribute</code>","text":"<pre><code>headers\n</code></pre> <p>The headers of the request.</p>"},{"location":"reference/uploadfile/#readyapi.UploadFile.content_type","title":"content_type  <code>instance-attribute</code>","text":"<pre><code>content_type\n</code></pre> <p>The content type of the request, from the headers.</p>"},{"location":"reference/uploadfile/#readyapi.UploadFile.read","title":"read  <code>async</code>","text":"<pre><code>read(size=-1)\n</code></pre> <p>Read some bytes from the file.</p> <p>To be awaitable, compatible with async, this is run in threadpool.</p> PARAMETER DESCRIPTION <code>size</code> <p>The number of bytes to read from the file.</p> <p> TYPE: <code>int</code> DEFAULT: <code>-1</code> </p> Source code in <code>readyapi/datastructures.py</code> <pre><code>async def read(\n    self,\n    size: Annotated[\n        int,\n        Doc(\n            \"\"\"\n            The number of bytes to read from the file.\n            \"\"\"\n        ),\n    ] = -1,\n) -&gt; bytes:\n    \"\"\"\n    Read some bytes from the file.\n\n    To be awaitable, compatible with async, this is run in threadpool.\n    \"\"\"\n    return await super().read(size)\n</code></pre>"},{"location":"reference/uploadfile/#readyapi.UploadFile.write","title":"write  <code>async</code>","text":"<pre><code>write(data)\n</code></pre> <p>Write some bytes to the file.</p> <p>You normally wouldn't use this from a file you read in a request.</p> <p>To be awaitable, compatible with async, this is run in threadpool.</p> PARAMETER DESCRIPTION <code>data</code> <p>The bytes to write to the file.</p> <p> TYPE: <code>bytes</code> </p> Source code in <code>readyapi/datastructures.py</code> <pre><code>async def write(\n    self,\n    data: Annotated[\n        bytes,\n        Doc(\n            \"\"\"\n            The bytes to write to the file.\n            \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\n    Write some bytes to the file.\n\n    You normally wouldn't use this from a file you read in a request.\n\n    To be awaitable, compatible with async, this is run in threadpool.\n    \"\"\"\n    return await super().write(data)\n</code></pre>"},{"location":"reference/uploadfile/#readyapi.UploadFile.seek","title":"seek  <code>async</code>","text":"<pre><code>seek(offset)\n</code></pre> <p>Move to a position in the file.</p> <p>Any next read or write will be done from that position.</p> <p>To be awaitable, compatible with async, this is run in threadpool.</p> PARAMETER DESCRIPTION <code>offset</code> <p>The position in bytes to seek to in the file.</p> <p> TYPE: <code>int</code> </p> Source code in <code>readyapi/datastructures.py</code> <pre><code>async def seek(\n    self,\n    offset: Annotated[\n        int,\n        Doc(\n            \"\"\"\n            The position in bytes to seek to in the file.\n            \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\n    Move to a position in the file.\n\n    Any next read or write will be done from that position.\n\n    To be awaitable, compatible with async, this is run in threadpool.\n    \"\"\"\n    return await super().seek(offset)\n</code></pre>"},{"location":"reference/uploadfile/#readyapi.UploadFile.close","title":"close  <code>async</code>","text":"<pre><code>close()\n</code></pre> <p>Close the file.</p> <p>To be awaitable, compatible with async, this is run in threadpool.</p> Source code in <code>readyapi/datastructures.py</code> <pre><code>async def close(self) -&gt; None:\n    \"\"\"\n    Close the file.\n\n    To be awaitable, compatible with async, this is run in threadpool.\n    \"\"\"\n    return await super().close()\n</code></pre>"},{"location":"reference/exceptions/","title":"Exceptions - <code>HTTPException</code> and <code>WebSocketException</code>","text":"<p>These are the exceptions that you can raise to show errors to the client.</p> <p>When you raise an exception, as would happen with normal Python, the rest of the execution is aborted. This way you can raise these exceptions from anywhere in the code to abort a request and show the error to the client.</p> <p>You can use:</p> <ul> <li><code>HTTPException</code></li> <li><code>WebSocketException</code></li> </ul> <p>These exceptions can be imported directly from <code>readyapi</code>:</p> <pre><code>from readyapi import HTTPException, WebSocketException\n</code></pre>"},{"location":"reference/exceptions/#readyapi.HTTPException","title":"readyapi.HTTPException","text":"<pre><code>HTTPException(status_code, detail=None, headers=None)\n</code></pre> <p>               Bases: <code>HTTPException</code></p> <p>An HTTP exception you can raise in your own code to show errors to the client.</p> <p>This is for client errors, invalid authentication, invalid data, etc. Not for server errors in your code.</p> <p>Read more about it in the ReadyAPI docs for Handling Errors.</p>"},{"location":"reference/exceptions/#readyapi.HTTPException--example","title":"Example","text":"<pre><code>from readyapi import ReadyAPI, HTTPException\n\napp = ReadyAPI()\n\nitems = {\"foo\": \"The Foo Wrestlers\"}\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str):\n    if item_id not in items:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"item\": items[item_id]}\n</code></pre> PARAMETER DESCRIPTION <code>status_code</code> <p>HTTP status code to send to the client.</p> <p> TYPE: <code>int</code> </p> <code>detail</code> <p>Any data to be sent to the client in the <code>detail</code> key of the JSON response.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p>Any headers to send to the client in the response.</p> <p> TYPE: <code>Optional[Dict[str, str]]</code> DEFAULT: <code>None</code> </p> Source code in <code>readyapi/exceptions.py</code> <pre><code>def __init__(\n    self,\n    status_code: Annotated[\n        int,\n        Doc(\n            \"\"\"\n            HTTP status code to send to the client.\n            \"\"\"\n        ),\n    ],\n    detail: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Any data to be sent to the client in the `detail` key of the JSON\n            response.\n            \"\"\"\n        ),\n    ] = None,\n    headers: Annotated[\n        Optional[Dict[str, str]],\n        Doc(\n            \"\"\"\n            Any headers to send to the client in the response.\n            \"\"\"\n        ),\n    ] = None,\n) -&gt; None:\n    super().__init__(status_code=status_code, detail=detail, headers=headers)\n</code></pre>"},{"location":"reference/exceptions/#readyapi.HTTPException.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/exceptions/#readyapi.HTTPException.detail","title":"detail  <code>instance-attribute</code>","text":"<pre><code>detail = detail\n</code></pre>"},{"location":"reference/exceptions/#readyapi.HTTPException.headers","title":"headers  <code>instance-attribute</code>","text":"<pre><code>headers = headers\n</code></pre>"},{"location":"reference/exceptions/#readyapi.WebSocketException","title":"readyapi.WebSocketException","text":"<pre><code>WebSocketException(code, reason=None)\n</code></pre> <p>               Bases: <code>WebSocketException</code></p> <p>A WebSocket exception you can raise in your own code to show errors to the client.</p> <p>This is for client errors, invalid authentication, invalid data, etc. Not for server errors in your code.</p> <p>Read more about it in the ReadyAPI docs for WebSockets.</p>"},{"location":"reference/exceptions/#readyapi.WebSocketException--example","title":"Example","text":"<pre><code>from typing import Annotated\n\nfrom readyapi import (\n    Cookie,\n    ReadyAPI,\n    WebSocket,\n    WebSocketException,\n    status,\n)\n\napp = ReadyAPI()\n\n@app.websocket(\"/items/{item_id}/ws\")\nasync def websocket_endpoint(\n    *,\n    websocket: WebSocket,\n    session: Annotated[str | None, Cookie()] = None,\n    item_id: str,\n):\n    if session is None:\n        raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION)\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(f\"Session cookie is: {session}\")\n        await websocket.send_text(f\"Message text was: {data}, for item ID: {item_id}\")\n</code></pre> PARAMETER DESCRIPTION <code>code</code> <p>A closing code from the valid codes defined in the specification.</p> <p> TYPE: <code>int</code> </p> <code>reason</code> <p>The reason to close the WebSocket connection.</p> <p>It is UTF-8-encoded data. The interpretation of the reason is up to the application, it is not specified by the WebSocket specification.</p> <p>It could contain text that could be human-readable or interpretable by the client code, etc.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> Source code in <code>readyapi/exceptions.py</code> <pre><code>def __init__(\n    self,\n    code: Annotated[\n        int,\n        Doc(\n            \"\"\"\n            A closing code from the\n            [valid codes defined in the specification](https://datatracker.ietf.org/doc/html/rfc6455#section-7.4.1).\n            \"\"\"\n        ),\n    ],\n    reason: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            The reason to close the WebSocket connection.\n\n            It is UTF-8-encoded data. The interpretation of the reason is up to the\n            application, it is not specified by the WebSocket specification.\n\n            It could contain text that could be human-readable or interpretable\n            by the client code, etc.\n            \"\"\"\n        ),\n    ] = None,\n) -&gt; None:\n    super().__init__(code=code, reason=reason)\n</code></pre>"},{"location":"reference/exceptions/#readyapi.WebSocketException.code","title":"code  <code>instance-attribute</code>","text":"<pre><code>code = code\n</code></pre>"},{"location":"reference/exceptions/#readyapi.WebSocketException.reason","title":"reason  <code>instance-attribute</code>","text":"<pre><code>reason = reason or ''\n</code></pre>"},{"location":"reference/dependencies/","title":"Dependencies - <code>Depends()</code> and <code>Security()</code>","text":""},{"location":"reference/dependencies/#depends","title":"<code>Depends()</code>","text":"<p>Dependencies are handled mainly with the special function <code>Depends()</code> that takes a callable.</p> <p>Here is the reference for it and its parameters.</p> <p>You can import it directly from <code>readyapi</code>:</p> <pre><code>from readyapi import Depends\n</code></pre>"},{"location":"reference/dependencies/#readyapi.Depends","title":"readyapi.Depends","text":"<pre><code>Depends(dependency=None, *, use_cache=True)\n</code></pre> <p>Declare a ReadyAPI dependency.</p> <p>It takes a single \"dependable\" callable (like a function).</p> <p>Don't call it directly, ReadyAPI will call it for you.</p> <p>Read more about it in the ReadyAPI docs for Dependencies.</p> <p>Example</p> <pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\n\napp = ReadyAPI()\n\n\nasync def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n</code></pre> PARAMETER DESCRIPTION <code>dependency</code> <p>A \"dependable\" callable (like a function).</p> <p>Don't call it directly, ReadyAPI will call it for you, just pass the object directly.</p> <p> TYPE: <code>Optional[Callable[..., Any]]</code> DEFAULT: <code>None</code> </p> <code>use_cache</code> <p>By default, after a dependency is called the first time in a request, if the dependency is declared again for the rest of the request (for example if the dependency is needed by several dependencies), the value will be re-used for the rest of the request.</p> <p>Set <code>use_cache</code> to <code>False</code> to disable this behavior and ensure the dependency is called again (if declared more than once) in the same request.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/param_functions.py</code> <pre><code>def Depends(  # noqa: N802\n    dependency: Annotated[\n        Optional[Callable[..., Any]],\n        Doc(\n            \"\"\"\n            A \"dependable\" callable (like a function).\n\n            Don't call it directly, ReadyAPI will call it for you, just pass the object\n            directly.\n            \"\"\"\n        ),\n    ] = None,\n    *,\n    use_cache: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, after a dependency is called the first time in a request, if\n            the dependency is declared again for the rest of the request (for example\n            if the dependency is needed by several dependencies), the value will be\n            re-used for the rest of the request.\n\n            Set `use_cache` to `False` to disable this behavior and ensure the\n            dependency is called again (if declared more than once) in the same request.\n            \"\"\"\n        ),\n    ] = True,\n) -&gt; Any:\n    \"\"\"\n    Declare a ReadyAPI dependency.\n\n    It takes a single \"dependable\" callable (like a function).\n\n    Don't call it directly, ReadyAPI will call it for you.\n\n    Read more about it in the\n    [ReadyAPI docs for Dependencies](https://readyapi.github.io/tutorial/dependencies/).\n\n    **Example**\n\n    ```python\n    from typing import Annotated\n\n    from readyapi import Depends, ReadyAPI\n\n    app = ReadyAPI()\n\n\n    async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n        return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n    @app.get(\"/items/\")\n    async def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n        return commons\n    ```\n    \"\"\"\n    return params.Depends(dependency=dependency, use_cache=use_cache)\n</code></pre>"},{"location":"reference/dependencies/#security","title":"<code>Security()</code>","text":"<p>For many scenarios, you can handle security (authorization, authentication, etc.) with dependencies, using <code>Depends()</code>.</p> <p>But when you want to also declare OAuth2 scopes, you can use <code>Security()</code> instead of <code>Depends()</code>.</p> <p>You can import <code>Security()</code> directly from <code>readyapi</code>:</p> <pre><code>from readyapi import Security\n</code></pre>"},{"location":"reference/dependencies/#readyapi.Security","title":"readyapi.Security","text":"<pre><code>Security(dependency=None, *, scopes=None, use_cache=True)\n</code></pre> <p>Declare a ReadyAPI Security dependency.</p> <p>The only difference with a regular dependency is that it can declare OAuth2 scopes that will be integrated with OpenAPI and the automatic UI docs (by default at <code>/docs</code>).</p> <p>It takes a single \"dependable\" callable (like a function).</p> <p>Don't call it directly, ReadyAPI will call it for you.</p> <p>Read more about it in the ReadyAPI docs for Security and in the ReadyAPI docs for OAuth2 scopes.</p> <p>Example</p> <pre><code>from typing import Annotated\n\nfrom readyapi import Security, ReadyAPI\n\nfrom .db import User\nfrom .security import get_current_active_user\n\napp = ReadyAPI()\n\n@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])]\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> PARAMETER DESCRIPTION <code>dependency</code> <p>A \"dependable\" callable (like a function).</p> <p>Don't call it directly, ReadyAPI will call it for you, just pass the object directly.</p> <p> TYPE: <code>Optional[Callable[..., Any]]</code> DEFAULT: <code>None</code> </p> <code>scopes</code> <p>OAuth2 scopes required for the path operation that uses this Security dependency.</p> <p>The term \"scope\" comes from the OAuth2 specification, it seems to be intentionally vague and interpretable. It normally refers to permissions, in cases to roles.</p> <p>These scopes are integrated with OpenAPI (and the API docs at <code>/docs</code>). So they are visible in the OpenAPI specification. )</p> <p> TYPE: <code>Optional[Sequence[str]]</code> DEFAULT: <code>None</code> </p> <code>use_cache</code> <p>By default, after a dependency is called the first time in a request, if the dependency is declared again for the rest of the request (for example if the dependency is needed by several dependencies), the value will be re-used for the rest of the request.</p> <p>Set <code>use_cache</code> to <code>False</code> to disable this behavior and ensure the dependency is called again (if declared more than once) in the same request.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/param_functions.py</code> <pre><code>def Security(  # noqa: N802\n    dependency: Annotated[\n        Optional[Callable[..., Any]],\n        Doc(\n            \"\"\"\n            A \"dependable\" callable (like a function).\n\n            Don't call it directly, ReadyAPI will call it for you, just pass the object\n            directly.\n            \"\"\"\n        ),\n    ] = None,\n    *,\n    scopes: Annotated[\n        Optional[Sequence[str]],\n        Doc(\n            \"\"\"\n            OAuth2 scopes required for the *path operation* that uses this Security\n            dependency.\n\n            The term \"scope\" comes from the OAuth2 specification, it seems to be\n            intentionally vague and interpretable. It normally refers to permissions,\n            in cases to roles.\n\n            These scopes are integrated with OpenAPI (and the API docs at `/docs`).\n            So they are visible in the OpenAPI specification.\n            )\n            \"\"\"\n        ),\n    ] = None,\n    use_cache: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, after a dependency is called the first time in a request, if\n            the dependency is declared again for the rest of the request (for example\n            if the dependency is needed by several dependencies), the value will be\n            re-used for the rest of the request.\n\n            Set `use_cache` to `False` to disable this behavior and ensure the\n            dependency is called again (if declared more than once) in the same request.\n            \"\"\"\n        ),\n    ] = True,\n) -&gt; Any:\n    \"\"\"\n    Declare a ReadyAPI Security dependency.\n\n    The only difference with a regular dependency is that it can declare OAuth2\n    scopes that will be integrated with OpenAPI and the automatic UI docs (by default\n    at `/docs`).\n\n    It takes a single \"dependable\" callable (like a function).\n\n    Don't call it directly, ReadyAPI will call it for you.\n\n    Read more about it in the\n    [ReadyAPI docs for Security](https://readyapi.github.io/tutorial/security/) and\n    in the\n    [ReadyAPI docs for OAuth2 scopes](https://readyapi.github.io/advanced/security/oauth2-scopes/).\n\n    **Example**\n\n    ```python\n    from typing import Annotated\n\n    from readyapi import Security, ReadyAPI\n\n    from .db import User\n    from .security import get_current_active_user\n\n    app = ReadyAPI()\n\n    @app.get(\"/users/me/items/\")\n    async def read_own_items(\n        current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])]\n    ):\n        return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n    ```\n    \"\"\"\n    return params.Security(dependency=dependency, scopes=scopes, use_cache=use_cache)\n</code></pre>"},{"location":"reference/apirouter/","title":"<code>APIRouter</code> class","text":"<p>Here's the reference information for the <code>APIRouter</code> class, with all its parameters, attributes and methods.</p> <p>You can import the <code>APIRouter</code> class directly from <code>readyapi</code>:</p> <pre><code>from readyapi import APIRouter\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter","title":"readyapi.APIRouter","text":"<pre><code>APIRouter(\n    *,\n    prefix=\"\",\n    tags=None,\n    dependencies=None,\n    default_response_class=Default(JSONResponse),\n    responses=None,\n    callbacks=None,\n    routes=None,\n    redirect_slashes=True,\n    default=None,\n    dependency_overrides_provider=None,\n    route_class=APIRoute,\n    on_startup=None,\n    on_shutdown=None,\n    lifespan=None,\n    deprecated=None,\n    include_in_schema=True,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>               Bases: <code>Router</code></p> <p><code>APIRouter</code> class, used to group path operations, for example to structure an app in multiple files. It would then be included in the <code>ReadyAPI</code> app, or in another <code>APIRouter</code> (ultimately included in the app).</p> <p>Read more about it in the ReadyAPI docs for Bigger Applications - Multiple Files.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n\n@router.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n\n\napp.include_router(router)\n</code></pre> PARAMETER DESCRIPTION <code>prefix</code> <p>An optional path prefix for the router.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>tags</code> <p>A list of tags to be applied to all the path operations in this router.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to all the path operations in this router.</p> <p>Read more about it in the ReadyAPI docs for Bigger Applications - Multiple Files.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>default_response_class</code> <p>The default response class to be used.</p> <p>Read more in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>responses</code> <p>Additional responses to be shown in OpenAPI.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Additional Responses in OpenAPI.</p> <p>And in the ReadyAPI docs for Bigger Applications.</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>OpenAPI callbacks that should apply to all path operations in this router.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>routes</code> <p>Note: you probably shouldn't use this parameter, it is inherited from Starlette and supported for compatibility.</p> <p>A list of routes to serve incoming HTTP and WebSocket requests.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>redirect_slashes</code> <p>Whether to detect and redirect slashes in URLs when the client doesn't use the same format.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>default</code> <p>Default function handler for this router. Used to handle 404 Not Found errors.</p> <p> TYPE: <code>Optional[ASGIApp]</code> DEFAULT: <code>None</code> </p> <code>dependency_overrides_provider</code> <p>Only used internally by ReadyAPI to handle dependency overrides.</p> <p>You shouldn't need to use it. It normally points to the <code>ReadyAPI</code> app object.</p> <p> TYPE: <code>Optional[Any]</code> DEFAULT: <code>None</code> </p> <code>route_class</code> <p>Custom route (path operation) class to be used by this router.</p> <p>Read more about it in the ReadyAPI docs for Custom Request and APIRoute class.</p> <p> TYPE: <code>Type[APIRoute]</code> DEFAULT: <code>APIRoute</code> </p> <code>on_startup</code> <p>A list of startup event handler functions.</p> <p>You should instead use the <code>lifespan</code> handlers.</p> <p>Read more in the ReadyAPI docs for <code>lifespan</code>.</p> <p> TYPE: <code>Optional[Sequence[Callable[[], Any]]]</code> DEFAULT: <code>None</code> </p> <code>on_shutdown</code> <p>A list of shutdown event handler functions.</p> <p>You should instead use the <code>lifespan</code> handlers.</p> <p>Read more in the ReadyAPI docs for <code>lifespan</code>.</p> <p> TYPE: <code>Optional[Sequence[Callable[[], Any]]]</code> DEFAULT: <code>None</code> </p> <code>lifespan</code> <p>A <code>Lifespan</code> context manager handler. This replaces <code>startup</code> and <code>shutdown</code> functions with a single context manager.</p> <p>Read more in the ReadyAPI docs for <code>lifespan</code>.</p> <p> TYPE: <code>Optional[Lifespan[Any]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark all path operations in this router as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>To include (or not) all the path operations in this router in the generated OpenAPI.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def __init__(\n    self,\n    *,\n    prefix: Annotated[str, Doc(\"An optional path prefix for the router.\")] = \"\",\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to all the *path operations* in this\n            router.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to all the\n            *path operations* in this router.\n\n            Read more about it in the\n            [ReadyAPI docs for Bigger Applications - Multiple Files](https://readyapi.github.io/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n            \"\"\"\n        ),\n    ] = None,\n    default_response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            The default response class to be used.\n\n            Read more in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#default-response-class).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses to be shown in OpenAPI.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Additional Responses in OpenAPI](https://readyapi.github.io/advanced/additional-responses/).\n\n            And in the\n            [ReadyAPI docs for Bigger Applications](https://readyapi.github.io/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            OpenAPI callbacks that should apply to all *path operations* in this\n            router.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    routes: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            **Note**: you probably shouldn't use this parameter, it is inherited\n            from Starlette and supported for compatibility.\n\n            ---\n\n            A list of routes to serve incoming HTTP and WebSocket requests.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            You normally wouldn't use this parameter with ReadyAPI, it is inherited\n            from Starlette and supported for compatibility.\n\n            In ReadyAPI, you normally would use the *path operation methods*,\n            like `router.get()`, `router.post()`, etc.\n            \"\"\"\n        ),\n    ] = None,\n    redirect_slashes: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Whether to detect and redirect slashes in URLs when the client doesn't\n            use the same format.\n            \"\"\"\n        ),\n    ] = True,\n    default: Annotated[\n        Optional[ASGIApp],\n        Doc(\n            \"\"\"\n            Default function handler for this router. Used to handle\n            404 Not Found errors.\n            \"\"\"\n        ),\n    ] = None,\n    dependency_overrides_provider: Annotated[\n        Optional[Any],\n        Doc(\n            \"\"\"\n            Only used internally by ReadyAPI to handle dependency overrides.\n\n            You shouldn't need to use it. It normally points to the `ReadyAPI` app\n            object.\n            \"\"\"\n        ),\n    ] = None,\n    route_class: Annotated[\n        Type[APIRoute],\n        Doc(\n            \"\"\"\n            Custom route (*path operation*) class to be used by this router.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Request and APIRoute class](https://readyapi.github.io/how-to/custom-request-and-route/#custom-apiroute-class-in-a-router).\n            \"\"\"\n        ),\n    ] = APIRoute,\n    on_startup: Annotated[\n        Optional[Sequence[Callable[[], Any]]],\n        Doc(\n            \"\"\"\n            A list of startup event handler functions.\n\n            You should instead use the `lifespan` handlers.\n\n            Read more in the [ReadyAPI docs for `lifespan`](https://readyapi.github.io/advanced/events/).\n            \"\"\"\n        ),\n    ] = None,\n    on_shutdown: Annotated[\n        Optional[Sequence[Callable[[], Any]]],\n        Doc(\n            \"\"\"\n            A list of shutdown event handler functions.\n\n            You should instead use the `lifespan` handlers.\n\n            Read more in the\n            [ReadyAPI docs for `lifespan`](https://readyapi.github.io/advanced/events/).\n            \"\"\"\n        ),\n    ] = None,\n    # the generic to Lifespan[AppType] is the type of the top level application\n    # which the router cannot know statically, so we use typing.Any\n    lifespan: Annotated[\n        Optional[Lifespan[Any]],\n        Doc(\n            \"\"\"\n            A `Lifespan` context manager handler. This replaces `startup` and\n            `shutdown` functions with a single context manager.\n\n            Read more in the\n            [ReadyAPI docs for `lifespan`](https://readyapi.github.io/advanced/events/).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark all *path operations* in this router as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) all the *path operations* in this router in the\n            generated OpenAPI.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; None:\n    super().__init__(\n        routes=routes,\n        redirect_slashes=redirect_slashes,\n        default=default,\n        on_startup=on_startup,\n        on_shutdown=on_shutdown,\n        lifespan=lifespan,\n    )\n    if prefix:\n        assert prefix.startswith(\"/\"), \"A path prefix must start with '/'\"\n        assert not prefix.endswith(\"/\"), (\n            \"A path prefix must not end with '/', as the routes will start with '/'\"\n        )\n    self.prefix = prefix\n    self.tags: List[Union[str, Enum]] = tags or []\n    self.dependencies = list(dependencies or [])\n    self.deprecated = deprecated\n    self.include_in_schema = include_in_schema\n    self.responses = responses or {}\n    self.callbacks = callbacks or []\n    self.dependency_overrides_provider = dependency_overrides_provider\n    self.route_class = route_class\n    self.default_response_class = default_response_class\n    self.generate_unique_id_function = generate_unique_id_function\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.websocket","title":"websocket","text":"<pre><code>websocket(path, name=None, *, dependencies=None)\n</code></pre> <p>Decorate a WebSocket function.</p> <p>Read more about it in the ReadyAPI docs for WebSockets.</p> <p>Example</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.websocket--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI, WebSocket\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n@router.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(f\"Message text was: {data}\")\n\napp.include_router(router)\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>WebSocket path.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>A name for the WebSocket. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be used for this WebSocket.</p> <p>Read more about it in the ReadyAPI docs for WebSockets.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def websocket(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            WebSocket path.\n            \"\"\"\n        ),\n    ],\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A name for the WebSocket. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    *,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be used for this\n            WebSocket.\n\n            Read more about it in the\n            [ReadyAPI docs for WebSockets](https://readyapi.github.io/advanced/websockets/).\n            \"\"\"\n        ),\n    ] = None,\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Decorate a WebSocket function.\n\n    Read more about it in the\n    [ReadyAPI docs for WebSockets](https://readyapi.github.io/advanced/websockets/).\n\n    **Example**\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI, WebSocket\n\n    app = ReadyAPI()\n    router = APIRouter()\n\n    @router.websocket(\"/ws\")\n    async def websocket_endpoint(websocket: WebSocket):\n        await websocket.accept()\n        while True:\n            data = await websocket.receive_text()\n            await websocket.send_text(f\"Message text was: {data}\")\n\n    app.include_router(router)\n    ```\n    \"\"\"\n\n    def decorator(func: DecoratedCallable) -&gt; DecoratedCallable:\n        self.add_api_websocket_route(\n            path, func, name=name, dependencies=dependencies\n        )\n        return func\n\n    return decorator\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.include_router","title":"include_router","text":"<pre><code>include_router(\n    router,\n    *,\n    prefix=\"\",\n    tags=None,\n    dependencies=None,\n    default_response_class=Default(JSONResponse),\n    responses=None,\n    callbacks=None,\n    deprecated=None,\n    include_in_schema=True,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Include another <code>APIRouter</code> in the same current <code>APIRouter</code>.</p> <p>Read more about it in the ReadyAPI docs for Bigger Applications.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.include_router--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\n\napp = ReadyAPI()\ninternal_router = APIRouter()\nusers_router = APIRouter()\n\n@users_router.get(\"/users/\")\ndef read_users():\n    return [{\"name\": \"Rick\"}, {\"name\": \"Morty\"}]\n\ninternal_router.include_router(users_router)\napp.include_router(internal_router)\n</code></pre> PARAMETER DESCRIPTION <code>router</code> <p>The <code>APIRouter</code> to include.</p> <p> TYPE: <code>APIRouter</code> </p> <code>prefix</code> <p>An optional path prefix for the router.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>tags</code> <p>A list of tags to be applied to all the path operations in this router.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to all the path operations in this router.</p> <p>Read more about it in the ReadyAPI docs for Bigger Applications - Multiple Files.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>default_response_class</code> <p>The default response class to be used.</p> <p>Read more in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>responses</code> <p>Additional responses to be shown in OpenAPI.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Additional Responses in OpenAPI.</p> <p>And in the ReadyAPI docs for Bigger Applications.</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>OpenAPI callbacks that should apply to all path operations in this router.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark all path operations in this router as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>include_in_schema</code> <p>Include (or not) all the path operations in this router in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def include_router(\n    self,\n    router: Annotated[\"APIRouter\", Doc(\"The `APIRouter` to include.\")],\n    *,\n    prefix: Annotated[str, Doc(\"An optional path prefix for the router.\")] = \"\",\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to all the *path operations* in this\n            router.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to all the\n            *path operations* in this router.\n\n            Read more about it in the\n            [ReadyAPI docs for Bigger Applications - Multiple Files](https://readyapi.github.io/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n            \"\"\"\n        ),\n    ] = None,\n    default_response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            The default response class to be used.\n\n            Read more in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#default-response-class).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses to be shown in OpenAPI.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Additional Responses in OpenAPI](https://readyapi.github.io/advanced/additional-responses/).\n\n            And in the\n            [ReadyAPI docs for Bigger Applications](https://readyapi.github.io/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            OpenAPI callbacks that should apply to all *path operations* in this\n            router.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark all *path operations* in this router as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include (or not) all the *path operations* in this router in the\n            generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; None:\n    \"\"\"\n    Include another `APIRouter` in the same current `APIRouter`.\n\n    Read more about it in the\n    [ReadyAPI docs for Bigger Applications](https://readyapi.github.io/tutorial/bigger-applications/).\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI\n\n    app = ReadyAPI()\n    internal_router = APIRouter()\n    users_router = APIRouter()\n\n    @users_router.get(\"/users/\")\n    def read_users():\n        return [{\"name\": \"Rick\"}, {\"name\": \"Morty\"}]\n\n    internal_router.include_router(users_router)\n    app.include_router(internal_router)\n    ```\n    \"\"\"\n    if prefix:\n        assert prefix.startswith(\"/\"), \"A path prefix must start with '/'\"\n        assert not prefix.endswith(\"/\"), (\n            \"A path prefix must not end with '/', as the routes will start with '/'\"\n        )\n    else:\n        for r in router.routes:\n            path = getattr(r, \"path\")  # noqa: B009\n            name = getattr(r, \"name\", \"unknown\")\n            if path is not None and not path:\n                raise ReadyAPIError(\n                    f\"Prefix and path cannot be both empty (path operation: {name})\"\n                )\n    if responses is None:\n        responses = {}\n    for route in router.routes:\n        if isinstance(route, APIRoute):\n            combined_responses = {**responses, **route.responses}\n            use_response_class = get_value_or_default(\n                route.response_class,\n                router.default_response_class,\n                default_response_class,\n                self.default_response_class,\n            )\n            current_tags = []\n            if tags:\n                current_tags.extend(tags)\n            if route.tags:\n                current_tags.extend(route.tags)\n            current_dependencies: List[params.Depends] = []\n            if dependencies:\n                current_dependencies.extend(dependencies)\n            if route.dependencies:\n                current_dependencies.extend(route.dependencies)\n            current_callbacks = []\n            if callbacks:\n                current_callbacks.extend(callbacks)\n            if route.callbacks:\n                current_callbacks.extend(route.callbacks)\n            current_generate_unique_id = get_value_or_default(\n                route.generate_unique_id_function,\n                router.generate_unique_id_function,\n                generate_unique_id_function,\n                self.generate_unique_id_function,\n            )\n            self.add_api_route(\n                prefix + route.path,\n                route.endpoint,\n                response_model=route.response_model,\n                status_code=route.status_code,\n                tags=current_tags,\n                dependencies=current_dependencies,\n                summary=route.summary,\n                description=route.description,\n                response_description=route.response_description,\n                responses=combined_responses,\n                deprecated=route.deprecated or deprecated or self.deprecated,\n                methods=route.methods,\n                operation_id=route.operation_id,\n                response_model_include=route.response_model_include,\n                response_model_exclude=route.response_model_exclude,\n                response_model_by_alias=route.response_model_by_alias,\n                response_model_exclude_unset=route.response_model_exclude_unset,\n                response_model_exclude_defaults=route.response_model_exclude_defaults,\n                response_model_exclude_none=route.response_model_exclude_none,\n                include_in_schema=route.include_in_schema\n                and self.include_in_schema\n                and include_in_schema,\n                response_class=use_response_class,\n                name=route.name,\n                route_class_override=type(route),\n                callbacks=current_callbacks,\n                openapi_extra=route.openapi_extra,\n                generate_unique_id_function=current_generate_unique_id,\n            )\n        elif isinstance(route, routing.Route):\n            methods = list(route.methods or [])\n            self.add_route(\n                prefix + route.path,\n                route.endpoint,\n                methods=methods,\n                include_in_schema=route.include_in_schema,\n                name=route.name,\n            )\n        elif isinstance(route, APIWebSocketRoute):\n            current_dependencies = []\n            if dependencies:\n                current_dependencies.extend(dependencies)\n            if route.dependencies:\n                current_dependencies.extend(route.dependencies)\n            self.add_api_websocket_route(\n                prefix + route.path,\n                route.endpoint,\n                dependencies=current_dependencies,\n                name=route.name,\n            )\n        elif isinstance(route, routing.WebSocketRoute):\n            self.add_websocket_route(\n                prefix + route.path, route.endpoint, name=route.name\n            )\n    for handler in router.on_startup:\n        self.add_event_handler(\"startup\", handler)\n    for handler in router.on_shutdown:\n        self.add_event_handler(\"shutdown\", handler)\n    self.lifespan_context = _merge_lifespan_context(\n        self.lifespan_context,\n        router.lifespan_context,\n    )\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.get","title":"get","text":"<pre><code>get(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP GET operation.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.get--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n@router.get(\"/items/\")\ndef read_items():\n    return [{\"name\": \"Empanada\"}, {\"name\": \"Arepa\"}]\n\napp.include_router(router)\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def get(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.github.io/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.github.io/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.github.io/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.github.io/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP GET operation.\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI\n\n    app = ReadyAPI()\n    router = APIRouter()\n\n    @router.get(\"/items/\")\n    def read_items():\n        return [{\"name\": \"Empanada\"}, {\"name\": \"Arepa\"}]\n\n    app.include_router(router)\n    ```\n    \"\"\"\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        methods=[\"GET\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.put","title":"put","text":"<pre><code>put(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP PUT operation.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.put--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n@router.put(\"/items/{item_id}\")\ndef replace_item(item_id: str, item: Item):\n    return {\"message\": \"Item replaced\", \"id\": item_id}\n\napp.include_router(router)\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def put(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.github.io/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.github.io/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.github.io/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.github.io/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP PUT operation.\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI\n    from pydantic import BaseModel\n\n    class Item(BaseModel):\n        name: str\n        description: str | None = None\n\n    app = ReadyAPI()\n    router = APIRouter()\n\n    @router.put(\"/items/{item_id}\")\n    def replace_item(item_id: str, item: Item):\n        return {\"message\": \"Item replaced\", \"id\": item_id}\n\n    app.include_router(router)\n    ```\n    \"\"\"\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        methods=[\"PUT\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.post","title":"post","text":"<pre><code>post(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP POST operation.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.post--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n@router.post(\"/items/\")\ndef create_item(item: Item):\n    return {\"message\": \"Item created\"}\n\napp.include_router(router)\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def post(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.github.io/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.github.io/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.github.io/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.github.io/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP POST operation.\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI\n    from pydantic import BaseModel\n\n    class Item(BaseModel):\n        name: str\n        description: str | None = None\n\n    app = ReadyAPI()\n    router = APIRouter()\n\n    @router.post(\"/items/\")\n    def create_item(item: Item):\n        return {\"message\": \"Item created\"}\n\n    app.include_router(router)\n    ```\n    \"\"\"\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        methods=[\"POST\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.delete","title":"delete","text":"<pre><code>delete(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP DELETE operation.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.delete--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n@router.delete(\"/items/{item_id}\")\ndef delete_item(item_id: str):\n    return {\"message\": \"Item deleted\"}\n\napp.include_router(router)\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def delete(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.github.io/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.github.io/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.github.io/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.github.io/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP DELETE operation.\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI\n\n    app = ReadyAPI()\n    router = APIRouter()\n\n    @router.delete(\"/items/{item_id}\")\n    def delete_item(item_id: str):\n        return {\"message\": \"Item deleted\"}\n\n    app.include_router(router)\n    ```\n    \"\"\"\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        methods=[\"DELETE\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.options","title":"options","text":"<pre><code>options(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP OPTIONS operation.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.options--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n@router.options(\"/items/\")\ndef get_item_options():\n    return {\"additions\": [\"Aji\", \"Guacamole\"]}\n\napp.include_router(router)\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def options(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.github.io/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.github.io/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.github.io/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.github.io/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP OPTIONS operation.\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI\n\n    app = ReadyAPI()\n    router = APIRouter()\n\n    @router.options(\"/items/\")\n    def get_item_options():\n        return {\"additions\": [\"Aji\", \"Guacamole\"]}\n\n    app.include_router(router)\n    ```\n    \"\"\"\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        methods=[\"OPTIONS\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.head","title":"head","text":"<pre><code>head(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP HEAD operation.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.head--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n@router.head(\"/items/\", status_code=204)\ndef get_items_headers(response: Response):\n    response.headers[\"X-Cat-Dog\"] = \"Alone in the world\"\n\napp.include_router(router)\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def head(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.github.io/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.github.io/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.github.io/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.github.io/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP HEAD operation.\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI\n    from pydantic import BaseModel\n\n    class Item(BaseModel):\n        name: str\n        description: str | None = None\n\n    app = ReadyAPI()\n    router = APIRouter()\n\n    @router.head(\"/items/\", status_code=204)\n    def get_items_headers(response: Response):\n        response.headers[\"X-Cat-Dog\"] = \"Alone in the world\"\n\n    app.include_router(router)\n    ```\n    \"\"\"\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        methods=[\"HEAD\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.patch","title":"patch","text":"<pre><code>patch(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP PATCH operation.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.patch--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n@router.patch(\"/items/\")\ndef update_item(item: Item):\n    return {\"message\": \"Item updated in place\"}\n\napp.include_router(router)\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def patch(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.github.io/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.github.io/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.github.io/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.github.io/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP PATCH operation.\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI\n    from pydantic import BaseModel\n\n    class Item(BaseModel):\n        name: str\n        description: str | None = None\n\n    app = ReadyAPI()\n    router = APIRouter()\n\n    @router.patch(\"/items/\")\n    def update_item(item: Item):\n        return {\"message\": \"Item updated in place\"}\n\n    app.include_router(router)\n    ```\n    \"\"\"\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        methods=[\"PATCH\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.trace","title":"trace","text":"<pre><code>trace(\n    path,\n    *,\n    response_model=Default(None),\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=Default(JSONResponse),\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=Default(generate_unique_id)\n)\n</code></pre> <p>Add a path operation using an HTTP TRACE operation.</p>"},{"location":"reference/apirouter/#readyapi.APIRouter.trace--example","title":"Example","text":"<pre><code>from readyapi import APIRouter, ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\napp = ReadyAPI()\nrouter = APIRouter()\n\n@router.trace(\"/items/{item_id}\")\ndef trace_item(item_id: str):\n    return None\n\napp.include_router(router)\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p>The URL path to be used for this path operation.</p> <p>For example, in <code>http://example.com/items</code>, the path is <code>/items</code>.</p> <p> TYPE: <code>str</code> </p> <code>response_model</code> <p>The type to use for the response.</p> <p>It could be any valid Pydantic field type. So, it doesn't have to be a Pydantic model, it could be other things, like a <code>list</code>, <code>dict</code>, etc.</p> <p>It will be used for:</p> <ul> <li>Documentation: the generated OpenAPI (and the UI at <code>/docs</code>) will     show it as the response (JSON Schema).</li> <li>Serialization: you could return an arbitrary object and the     <code>response_model</code> would be used to serialize that object into the     corresponding JSON.</li> <li>Filtering: the JSON sent to the client will only contain the data     (fields) defined in the <code>response_model</code>. If you returned an object     that contains an attribute <code>password</code> but the <code>response_model</code> does     not include that field, the JSON sent to the client would not have     that <code>password</code>.</li> <li>Validation: whatever you return will be serialized with the     <code>response_model</code>, converting any data as necessary to generate the     corresponding JSON. But if the data in the object returned is not     valid, that would mean a violation of the contract with the client,     so it's an error from the API developer. So, ReadyAPI will raise an     error and return a 500 error code (Internal Server Error).</li> </ul> <p>Read more about it in the ReadyAPI docs for Response Model.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>Default(None)</code> </p> <code>status_code</code> <p>The default status code to be used for the response.</p> <p>You could override the status code by returning a response directly.</p> <p>Read more about it in the ReadyAPI docs for Response Status Code.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>A list of tags to be applied to the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[List[Union[str, Enum]]]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>A list of dependencies (using <code>Depends()</code>) to be applied to the path operation.</p> <p>Read more about it in the ReadyAPI docs for Dependencies in path operation decorators.</p> <p> TYPE: <code>Optional[Sequence[Depends]]</code> DEFAULT: <code>None</code> </p> <code>summary</code> <p>A summary for the path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description for the path operation.</p> <p>If not provided, it will be extracted automatically from the docstring of the path operation function.</p> <p>It can contain Markdown.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Path Operation Configuration.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_description</code> <p>The description for the default response.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Successful Response'</code> </p> <code>responses</code> <p>Additional responses that could be returned by this path operation.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[Dict[Union[int, str], Dict[str, Any]]]</code> DEFAULT: <code>None</code> </p> <code>deprecated</code> <p>Mark this path operation as deprecated.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>operation_id</code> <p>Custom operation ID to be used by this path operation.</p> <p>By default, it is generated automatically.</p> <p>If you provide a custom operation ID, you need to make sure it is unique for the whole API.</p> <p>You can customize the operation ID generation with the parameter <code>generate_unique_id_function</code> in the <code>ReadyAPI</code> class.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>response_model_include</code> <p>Configuration passed to Pydantic to include only certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_exclude</code> <p>Configuration passed to Pydantic to exclude certain fields in the response data.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>response_model_by_alias</code> <p>Configuration passed to Pydantic to define if the response model should be serialized by alias when an alias is used.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_model_exclude_unset</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that were not set and have their default values. This is different from <code>response_model_exclude_defaults</code> in that if the fields are set, they will be included in the response, even if the value is the same as the default.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_defaults</code> <p>Configuration passed to Pydantic to define if the response data should have all the fields, including the ones that have the same value as the default. This is different from <code>response_model_exclude_unset</code> in that if the fields are set but contain the same default values, they will be excluded from the response.</p> <p>When <code>True</code>, default values are omitted from the response.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>response_model_exclude_none</code> <p>Configuration passed to Pydantic to define if the response data should exclude fields set to <code>None</code>.</p> <p>This is much simpler (less smart) than <code>response_model_exclude_unset</code> and <code>response_model_exclude_defaults</code>. You probably want to use one of those two instead of this one, as those allow returning <code>None</code> values when it makes sense.</p> <p>Read more about it in the ReadyAPI docs for Response Model - Return Type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_in_schema</code> <p>Include this path operation in the generated OpenAPI schema.</p> <p>This affects the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for Query Parameters and String Validations.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>response_class</code> <p>Response class to be used for this path operation.</p> <p>This will not be used if you return a response directly.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p> TYPE: <code>Type[Response]</code> DEFAULT: <code>Default(JSONResponse)</code> </p> <code>name</code> <p>Name for this path operation. Only used internally.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>callbacks</code> <p>List of path operations that will be used as OpenAPI callbacks.</p> <p>This is only for OpenAPI documentation, the callbacks won't be used directly.</p> <p>It will be added to the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p>Read more about it in the ReadyAPI docs for OpenAPI Callbacks.</p> <p> TYPE: <code>Optional[List[BaseRoute]]</code> DEFAULT: <code>None</code> </p> <code>openapi_extra</code> <p>Extra metadata to be included in the OpenAPI schema for this path operation.</p> <p>Read more about it in the ReadyAPI docs for Path Operation Advanced Configuration.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>generate_unique_id_function</code> <p>Customize the function used to generate unique IDs for the path operations shown in the generated OpenAPI.</p> <p>This is particularly useful when automatically generating clients or SDKs for your API.</p> <p>Read more about it in the ReadyAPI docs about how to Generate Clients.</p> <p> TYPE: <code>Callable[[APIRoute], str]</code> DEFAULT: <code>Default(generate_unique_id)</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>def trace(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, ReadyAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model](https://readyapi.github.io/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Status Code](https://readyapi.github.io/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Dependencies in path operation decorators](https://readyapi.github.io/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Configuration](https://readyapi.github.io/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `ReadyAPI` class.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [ReadyAPI docs for Response Model - Return Type](https://readyapi.github.io/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for Query Parameters and String Validations](https://readyapi.github.io/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [ReadyAPI docs for Custom Response - HTML, Stream, File, others](https://readyapi.github.io/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [ReadyAPI docs for OpenAPI Callbacks](https://readyapi.github.io/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [ReadyAPI docs for Path Operation Advanced Configuration](https://readyapi.github.io/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [ReadyAPI docs about how to Generate Clients](https://readyapi.github.io/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP TRACE operation.\n\n    ## Example\n\n    ```python\n    from readyapi import APIRouter, ReadyAPI\n    from pydantic import BaseModel\n\n    class Item(BaseModel):\n        name: str\n        description: str | None = None\n\n    app = ReadyAPI()\n    router = APIRouter()\n\n    @router.trace(\"/items/{item_id}\")\n    def trace_item(item_id: str):\n        return None\n\n    app.include_router(router)\n    ```\n    \"\"\"\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        methods=[\"TRACE\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n</code></pre>"},{"location":"reference/apirouter/#readyapi.APIRouter.on_event","title":"on_event","text":"<pre><code>on_event(event_type)\n</code></pre> <p>Add an event handler for the router.</p> <p><code>on_event</code> is deprecated, use <code>lifespan</code> event handlers instead.</p> <p>Read more about it in the ReadyAPI docs for Lifespan Events.</p> PARAMETER DESCRIPTION <code>event_type</code> <p>The type of event. <code>startup</code> or <code>shutdown</code>.</p> <p> TYPE: <code>str</code> </p> Source code in <code>readyapi/routing.py</code> <pre><code>@deprecated(\n    \"\"\"\n    on_event is deprecated, use lifespan event handlers instead.\n\n    Read more about it in the\n    [ReadyAPI docs for Lifespan Events](https://readyapi.github.io/advanced/events/).\n    \"\"\"\n)\ndef on_event(\n    self,\n    event_type: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The type of event. `startup` or `shutdown`.\n            \"\"\"\n        ),\n    ],\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add an event handler for the router.\n\n    `on_event` is deprecated, use `lifespan` event handlers instead.\n\n    Read more about it in the\n    [ReadyAPI docs for Lifespan Events](https://readyapi.github.io/advanced/events/#alternative-events-deprecated).\n    \"\"\"\n\n    def decorator(func: DecoratedCallable) -&gt; DecoratedCallable:\n        self.add_event_handler(event_type, func)\n        return func\n\n    return decorator\n</code></pre>"},{"location":"reference/background/","title":"Background Tasks - <code>BackgroundTasks</code>","text":"<p>You can declare a parameter in a path operation function or dependency function with the type <code>BackgroundTasks</code>, and then you can use it to schedule the execution of background tasks after the response is sent.</p> <p>You can import it directly from <code>readyapi</code>:</p> <pre><code>from readyapi import BackgroundTasks\n</code></pre>"},{"location":"reference/background/#readyapi.BackgroundTasks","title":"readyapi.BackgroundTasks","text":"<pre><code>BackgroundTasks(tasks=None)\n</code></pre> <p>               Bases: <code>BackgroundTasks</code></p> <p>A collection of background tasks that will be called after a response has been sent to the client.</p> <p>Read more about it in the ReadyAPI docs for Background Tasks.</p>"},{"location":"reference/background/#readyapi.BackgroundTasks--example","title":"Example","text":"<pre><code>from readyapi import BackgroundTasks, ReadyAPI\n\napp = ReadyAPI()\n\n\ndef write_notification(email: str, message=\"\"):\n    with open(\"log.txt\", mode=\"w\") as email_file:\n        content = f\"notification for {email}: {message}\"\n        email_file.write(content)\n\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(email: str, background_tasks: BackgroundTasks):\n    background_tasks.add_task(write_notification, email, message=\"some notification\")\n    return {\"message\": \"Notification sent in the background\"}\n</code></pre> PARAMETER DESCRIPTION <code>tasks</code> <p> TYPE: <code>Sequence[BackgroundTask] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/background.py</code> <pre><code>def __init__(self, tasks: typing.Sequence[BackgroundTask] | None = None):\n    self.tasks = list(tasks) if tasks else []\n</code></pre>"},{"location":"reference/background/#readyapi.BackgroundTasks.func","title":"func  <code>instance-attribute</code>","text":"<pre><code>func = func\n</code></pre>"},{"location":"reference/background/#readyapi.BackgroundTasks.args","title":"args  <code>instance-attribute</code>","text":"<pre><code>args = args\n</code></pre>"},{"location":"reference/background/#readyapi.BackgroundTasks.kwargs","title":"kwargs  <code>instance-attribute</code>","text":"<pre><code>kwargs = kwargs\n</code></pre>"},{"location":"reference/background/#readyapi.BackgroundTasks.is_async","title":"is_async  <code>instance-attribute</code>","text":"<pre><code>is_async = is_async_callable(func)\n</code></pre>"},{"location":"reference/background/#readyapi.BackgroundTasks.tasks","title":"tasks  <code>instance-attribute</code>","text":"<pre><code>tasks = list(tasks) if tasks else []\n</code></pre>"},{"location":"reference/background/#readyapi.BackgroundTasks.add_task","title":"add_task","text":"<pre><code>add_task(func, *args, **kwargs)\n</code></pre> <p>Add a function to be called in the background after the response is sent.</p> <p>Read more about it in the ReadyAPI docs for Background Tasks.</p> PARAMETER DESCRIPTION <code>func</code> <p>The function to call after the response is sent.</p> <p>It can be a regular <code>def</code> function or an <code>async def</code> function.</p> <p> TYPE: <code>Callable[P, Any]</code> </p> <code>*args</code> <p> TYPE: <code>args</code> DEFAULT: <code>()</code> </p> <code>**kwargs</code> <p> TYPE: <code>kwargs</code> DEFAULT: <code>{}</code> </p> Source code in <code>readyapi/background.py</code> <pre><code>def add_task(\n    self,\n    func: Annotated[\n        Callable[P, Any],\n        Doc(\n            \"\"\"\n            The function to call after the response is sent.\n\n            It can be a regular `def` function or an `async def` function.\n            \"\"\"\n        ),\n    ],\n    *args: P.args,\n    **kwargs: P.kwargs,\n) -&gt; None:\n    \"\"\"\n    Add a function to be called in the background after the response is sent.\n\n    Read more about it in the\n    [ReadyAPI docs for Background Tasks](https://readyapi.github.io/tutorial/background-tasks/).\n    \"\"\"\n    return super().add_task(func, *args, **kwargs)\n</code></pre>"},{"location":"reference/request/","title":"<code>Request</code> class","text":"<p>You can declare a parameter in a path operation function or dependency to be of type <code>Request</code> and then you can access the raw request object directly, without any validation, etc.</p> <p>You can import it directly from <code>readyapi</code>:</p> <pre><code>from readyapi import Request\n</code></pre> <p>Tip</p> <p>When you want to define dependencies that should be compatible with both HTTP and WebSockets, you can define a parameter that takes an <code>HTTPConnection</code> instead of a <code>Request</code> or a <code>WebSocket</code>.</p>"},{"location":"reference/request/#readyapi.Request","title":"readyapi.Request","text":"<pre><code>Request(scope, receive=empty_receive, send=empty_send)\n</code></pre> <p>               Bases: <code>HTTPConnection</code></p> PARAMETER DESCRIPTION <code>scope</code> <p> TYPE: <code>Scope</code> </p> <code>receive</code> <p> TYPE: <code>Receive</code> DEFAULT: <code>empty_receive</code> </p> <code>send</code> <p> TYPE: <code>Send</code> DEFAULT: <code>empty_send</code> </p> Source code in <code>starlette/requests.py</code> <pre><code>def __init__(self, scope: Scope, receive: Receive = empty_receive, send: Send = empty_send):\n    super().__init__(scope)\n    assert scope[\"type\"] == \"http\"\n    self._receive = receive\n    self._send = send\n    self._stream_consumed = False\n    self._is_disconnected = False\n    self._form = None\n</code></pre>"},{"location":"reference/request/#readyapi.Request.scope","title":"scope  <code>instance-attribute</code>","text":"<pre><code>scope = scope\n</code></pre>"},{"location":"reference/request/#readyapi.Request.app","title":"app  <code>property</code>","text":"<pre><code>app\n</code></pre>"},{"location":"reference/request/#readyapi.Request.url","title":"url  <code>property</code>","text":"<pre><code>url\n</code></pre>"},{"location":"reference/request/#readyapi.Request.base_url","title":"base_url  <code>property</code>","text":"<pre><code>base_url\n</code></pre>"},{"location":"reference/request/#readyapi.Request.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/request/#readyapi.Request.query_params","title":"query_params  <code>property</code>","text":"<pre><code>query_params\n</code></pre>"},{"location":"reference/request/#readyapi.Request.path_params","title":"path_params  <code>property</code>","text":"<pre><code>path_params\n</code></pre>"},{"location":"reference/request/#readyapi.Request.cookies","title":"cookies  <code>property</code>","text":"<pre><code>cookies\n</code></pre>"},{"location":"reference/request/#readyapi.Request.client","title":"client  <code>property</code>","text":"<pre><code>client\n</code></pre>"},{"location":"reference/request/#readyapi.Request.session","title":"session  <code>property</code>","text":"<pre><code>session\n</code></pre>"},{"location":"reference/request/#readyapi.Request.auth","title":"auth  <code>property</code>","text":"<pre><code>auth\n</code></pre>"},{"location":"reference/request/#readyapi.Request.user","title":"user  <code>property</code>","text":"<pre><code>user\n</code></pre>"},{"location":"reference/request/#readyapi.Request.state","title":"state  <code>property</code>","text":"<pre><code>state\n</code></pre>"},{"location":"reference/request/#readyapi.Request.method","title":"method  <code>property</code>","text":"<pre><code>method\n</code></pre>"},{"location":"reference/request/#readyapi.Request.receive","title":"receive  <code>property</code>","text":"<pre><code>receive\n</code></pre>"},{"location":"reference/request/#readyapi.Request.url_for","title":"url_for","text":"<pre><code>url_for(name, /, **path_params)\n</code></pre> PARAMETER DESCRIPTION <code>name</code> <p> TYPE: <code>str</code> </p> <code>**path_params</code> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>starlette/requests.py</code> <pre><code>def url_for(self, name: str, /, **path_params: typing.Any) -&gt; URL:\n    url_path_provider: Router | Starlette | None = self.scope.get(\"router\") or self.scope.get(\"app\")\n    if url_path_provider is None:\n        raise RuntimeError(\"The `url_for` method can only be used inside a Starlette application or with a router.\")\n    url_path = url_path_provider.url_path_for(name, **path_params)\n    return url_path.make_absolute_url(base_url=self.base_url)\n</code></pre>"},{"location":"reference/request/#readyapi.Request.stream","title":"stream  <code>async</code>","text":"<pre><code>stream()\n</code></pre> Source code in <code>starlette/requests.py</code> <pre><code>async def stream(self) -&gt; typing.AsyncGenerator[bytes, None]:\n    if hasattr(self, \"_body\"):\n        yield self._body\n        yield b\"\"\n        return\n    if self._stream_consumed:\n        raise RuntimeError(\"Stream consumed\")\n    while not self._stream_consumed:\n        message = await self._receive()\n        if message[\"type\"] == \"http.request\":\n            body = message.get(\"body\", b\"\")\n            if not message.get(\"more_body\", False):\n                self._stream_consumed = True\n            if body:\n                yield body\n        elif message[\"type\"] == \"http.disconnect\":  # pragma: no branch\n            self._is_disconnected = True\n            raise ClientDisconnect()\n    yield b\"\"\n</code></pre>"},{"location":"reference/request/#readyapi.Request.body","title":"body  <code>async</code>","text":"<pre><code>body()\n</code></pre> Source code in <code>starlette/requests.py</code> <pre><code>async def body(self) -&gt; bytes:\n    if not hasattr(self, \"_body\"):\n        chunks: list[bytes] = []\n        async for chunk in self.stream():\n            chunks.append(chunk)\n        self._body = b\"\".join(chunks)\n    return self._body\n</code></pre>"},{"location":"reference/request/#readyapi.Request.json","title":"json  <code>async</code>","text":"<pre><code>json()\n</code></pre> Source code in <code>starlette/requests.py</code> <pre><code>async def json(self) -&gt; typing.Any:\n    if not hasattr(self, \"_json\"):  # pragma: no branch\n        body = await self.body()\n        self._json = json.loads(body)\n    return self._json\n</code></pre>"},{"location":"reference/request/#readyapi.Request.form","title":"form","text":"<pre><code>form(\n    *,\n    max_files=1000,\n    max_fields=1000,\n    max_part_size=1024 * 1024\n)\n</code></pre> PARAMETER DESCRIPTION <code>max_files</code> <p> TYPE: <code>int | float</code> DEFAULT: <code>1000</code> </p> <code>max_fields</code> <p> TYPE: <code>int | float</code> DEFAULT: <code>1000</code> </p> <code>max_part_size</code> <p> TYPE: <code>int</code> DEFAULT: <code>1024 * 1024</code> </p> Source code in <code>starlette/requests.py</code> <pre><code>def form(\n    self,\n    *,\n    max_files: int | float = 1000,\n    max_fields: int | float = 1000,\n    max_part_size: int = 1024 * 1024,\n) -&gt; AwaitableOrContextManager[FormData]:\n    return AwaitableOrContextManagerWrapper(\n        self._get_form(max_files=max_files, max_fields=max_fields, max_part_size=max_part_size)\n    )\n</code></pre>"},{"location":"reference/request/#readyapi.Request.close","title":"close  <code>async</code>","text":"<pre><code>close()\n</code></pre> Source code in <code>starlette/requests.py</code> <pre><code>async def close(self) -&gt; None:\n    if self._form is not None:  # pragma: no branch\n        await self._form.close()\n</code></pre>"},{"location":"reference/request/#readyapi.Request.is_disconnected","title":"is_disconnected  <code>async</code>","text":"<pre><code>is_disconnected()\n</code></pre> Source code in <code>starlette/requests.py</code> <pre><code>async def is_disconnected(self) -&gt; bool:\n    if not self._is_disconnected:\n        message: Message = {}\n\n        # If message isn't immediately available, move on\n        with anyio.CancelScope() as cs:\n            cs.cancel()\n            message = await self._receive()\n\n        if message.get(\"type\") == \"http.disconnect\":\n            self._is_disconnected = True\n\n    return self._is_disconnected\n</code></pre>"},{"location":"reference/request/#readyapi.Request.send_push_promise","title":"send_push_promise  <code>async</code>","text":"<pre><code>send_push_promise(path)\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p> TYPE: <code>str</code> </p> Source code in <code>starlette/requests.py</code> <pre><code>async def send_push_promise(self, path: str) -&gt; None:\n    if \"http.response.push\" in self.scope.get(\"extensions\", {}):\n        raw_headers: list[tuple[bytes, bytes]] = []\n        for name in SERVER_PUSH_HEADERS_TO_COPY:\n            for value in self.headers.getlist(name):\n                raw_headers.append((name.encode(\"latin-1\"), value.encode(\"latin-1\")))\n        await self._send({\"type\": \"http.response.push\", \"path\": path, \"headers\": raw_headers})\n</code></pre>"},{"location":"reference/websockets/","title":"WebSockets","text":"<p>When defining WebSockets, you normally declare a parameter of type <code>WebSocket</code> and with it you can read data from the client and send data to it.</p> <p>It is provided directly by Starlette, but you can import it from <code>readyapi</code>:</p> <pre><code>from readyapi import WebSocket\n</code></pre> <p>Tip</p> <p>When you want to define dependencies that should be compatible with both HTTP and WebSockets, you can define a parameter that takes an <code>HTTPConnection</code> instead of a <code>Request</code> or a <code>WebSocket</code>.</p> <p>When a client disconnects, a <code>WebSocketDisconnect</code> exception is raised, you can catch it.</p> <p>You can import it directly form <code>readyapi</code>:</p> <pre><code>from readyapi import WebSocketDisconnect\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket","title":"readyapi.WebSocket","text":"<pre><code>WebSocket(scope, receive, send)\n</code></pre> <p>               Bases: <code>HTTPConnection</code></p> PARAMETER DESCRIPTION <code>scope</code> <p> TYPE: <code>Scope</code> </p> <code>receive</code> <p> TYPE: <code>Receive</code> </p> <code>send</code> <p> TYPE: <code>Send</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>def __init__(self, scope: Scope, receive: Receive, send: Send) -&gt; None:\n    super().__init__(scope)\n    assert scope[\"type\"] == \"websocket\"\n    self._receive = receive\n    self._send = send\n    self.client_state = WebSocketState.CONNECTING\n    self.application_state = WebSocketState.CONNECTING\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.scope","title":"scope  <code>instance-attribute</code>","text":"<pre><code>scope = scope\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.app","title":"app  <code>property</code>","text":"<pre><code>app\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.url","title":"url  <code>property</code>","text":"<pre><code>url\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.base_url","title":"base_url  <code>property</code>","text":"<pre><code>base_url\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.query_params","title":"query_params  <code>property</code>","text":"<pre><code>query_params\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.path_params","title":"path_params  <code>property</code>","text":"<pre><code>path_params\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.cookies","title":"cookies  <code>property</code>","text":"<pre><code>cookies\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.client","title":"client  <code>property</code>","text":"<pre><code>client\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.state","title":"state  <code>property</code>","text":"<pre><code>state\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.client_state","title":"client_state  <code>instance-attribute</code>","text":"<pre><code>client_state = CONNECTING\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.application_state","title":"application_state  <code>instance-attribute</code>","text":"<pre><code>application_state = CONNECTING\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.url_for","title":"url_for","text":"<pre><code>url_for(name, /, **path_params)\n</code></pre> PARAMETER DESCRIPTION <code>name</code> <p> TYPE: <code>str</code> </p> <code>**path_params</code> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>starlette/requests.py</code> <pre><code>def url_for(self, name: str, /, **path_params: typing.Any) -&gt; URL:\n    url_path_provider: Router | Starlette | None = self.scope.get(\"router\") or self.scope.get(\"app\")\n    if url_path_provider is None:\n        raise RuntimeError(\"The `url_for` method can only be used inside a Starlette application or with a router.\")\n    url_path = url_path_provider.url_path_for(name, **path_params)\n    return url_path.make_absolute_url(base_url=self.base_url)\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.receive","title":"receive  <code>async</code>","text":"<pre><code>receive()\n</code></pre> <p>Receive ASGI websocket messages, ensuring valid state transitions.</p> Source code in <code>starlette/websockets.py</code> <pre><code>async def receive(self) -&gt; Message:\n    \"\"\"\n    Receive ASGI websocket messages, ensuring valid state transitions.\n    \"\"\"\n    if self.client_state == WebSocketState.CONNECTING:\n        message = await self._receive()\n        message_type = message[\"type\"]\n        if message_type != \"websocket.connect\":\n            raise RuntimeError(f'Expected ASGI message \"websocket.connect\", but got {message_type!r}')\n        self.client_state = WebSocketState.CONNECTED\n        return message\n    elif self.client_state == WebSocketState.CONNECTED:\n        message = await self._receive()\n        message_type = message[\"type\"]\n        if message_type not in {\"websocket.receive\", \"websocket.disconnect\"}:\n            raise RuntimeError(\n                f'Expected ASGI message \"websocket.receive\" or \"websocket.disconnect\", but got {message_type!r}'\n            )\n        if message_type == \"websocket.disconnect\":\n            self.client_state = WebSocketState.DISCONNECTED\n        return message\n    else:\n        raise RuntimeError('Cannot call \"receive\" once a disconnect message has been received.')\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.send","title":"send  <code>async</code>","text":"<pre><code>send(message)\n</code></pre> <p>Send ASGI websocket messages, ensuring valid state transitions.</p> PARAMETER DESCRIPTION <code>message</code> <p> TYPE: <code>Message</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>async def send(self, message: Message) -&gt; None:\n    \"\"\"\n    Send ASGI websocket messages, ensuring valid state transitions.\n    \"\"\"\n    if self.application_state == WebSocketState.CONNECTING:\n        message_type = message[\"type\"]\n        if message_type not in {\"websocket.accept\", \"websocket.close\", \"websocket.http.response.start\"}:\n            raise RuntimeError(\n                'Expected ASGI message \"websocket.accept\", \"websocket.close\" or \"websocket.http.response.start\", '\n                f\"but got {message_type!r}\"\n            )\n        if message_type == \"websocket.close\":\n            self.application_state = WebSocketState.DISCONNECTED\n        elif message_type == \"websocket.http.response.start\":\n            self.application_state = WebSocketState.RESPONSE\n        else:\n            self.application_state = WebSocketState.CONNECTED\n        await self._send(message)\n    elif self.application_state == WebSocketState.CONNECTED:\n        message_type = message[\"type\"]\n        if message_type not in {\"websocket.send\", \"websocket.close\"}:\n            raise RuntimeError(\n                f'Expected ASGI message \"websocket.send\" or \"websocket.close\", but got {message_type!r}'\n            )\n        if message_type == \"websocket.close\":\n            self.application_state = WebSocketState.DISCONNECTED\n        try:\n            await self._send(message)\n        except OSError:\n            self.application_state = WebSocketState.DISCONNECTED\n            raise WebSocketDisconnect(code=1006)\n    elif self.application_state == WebSocketState.RESPONSE:\n        message_type = message[\"type\"]\n        if message_type != \"websocket.http.response.body\":\n            raise RuntimeError(f'Expected ASGI message \"websocket.http.response.body\", but got {message_type!r}')\n        if not message.get(\"more_body\", False):\n            self.application_state = WebSocketState.DISCONNECTED\n        await self._send(message)\n    else:\n        raise RuntimeError('Cannot call \"send\" once a close message has been sent.')\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.accept","title":"accept  <code>async</code>","text":"<pre><code>accept(subprotocol=None, headers=None)\n</code></pre> PARAMETER DESCRIPTION <code>subprotocol</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>Iterable[tuple[bytes, bytes]] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>async def accept(\n    self,\n    subprotocol: str | None = None,\n    headers: typing.Iterable[tuple[bytes, bytes]] | None = None,\n) -&gt; None:\n    headers = headers or []\n\n    if self.client_state == WebSocketState.CONNECTING:  # pragma: no branch\n        # If we haven't yet seen the 'connect' message, then wait for it first.\n        await self.receive()\n    await self.send({\"type\": \"websocket.accept\", \"subprotocol\": subprotocol, \"headers\": headers})\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.receive_text","title":"receive_text  <code>async</code>","text":"<pre><code>receive_text()\n</code></pre> Source code in <code>starlette/websockets.py</code> <pre><code>async def receive_text(self) -&gt; str:\n    if self.application_state != WebSocketState.CONNECTED:\n        raise RuntimeError('WebSocket is not connected. Need to call \"accept\" first.')\n    message = await self.receive()\n    self._raise_on_disconnect(message)\n    return typing.cast(str, message[\"text\"])\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.receive_bytes","title":"receive_bytes  <code>async</code>","text":"<pre><code>receive_bytes()\n</code></pre> Source code in <code>starlette/websockets.py</code> <pre><code>async def receive_bytes(self) -&gt; bytes:\n    if self.application_state != WebSocketState.CONNECTED:\n        raise RuntimeError('WebSocket is not connected. Need to call \"accept\" first.')\n    message = await self.receive()\n    self._raise_on_disconnect(message)\n    return typing.cast(bytes, message[\"bytes\"])\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.receive_json","title":"receive_json  <code>async</code>","text":"<pre><code>receive_json(mode='text')\n</code></pre> PARAMETER DESCRIPTION <code>mode</code> <p> TYPE: <code>str</code> DEFAULT: <code>'text'</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>async def receive_json(self, mode: str = \"text\") -&gt; typing.Any:\n    if mode not in {\"text\", \"binary\"}:\n        raise RuntimeError('The \"mode\" argument should be \"text\" or \"binary\".')\n    if self.application_state != WebSocketState.CONNECTED:\n        raise RuntimeError('WebSocket is not connected. Need to call \"accept\" first.')\n    message = await self.receive()\n    self._raise_on_disconnect(message)\n\n    if mode == \"text\":\n        text = message[\"text\"]\n    else:\n        text = message[\"bytes\"].decode(\"utf-8\")\n    return json.loads(text)\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.iter_text","title":"iter_text  <code>async</code>","text":"<pre><code>iter_text()\n</code></pre> Source code in <code>starlette/websockets.py</code> <pre><code>async def iter_text(self) -&gt; typing.AsyncIterator[str]:\n    try:\n        while True:\n            yield await self.receive_text()\n    except WebSocketDisconnect:\n        pass\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.iter_bytes","title":"iter_bytes  <code>async</code>","text":"<pre><code>iter_bytes()\n</code></pre> Source code in <code>starlette/websockets.py</code> <pre><code>async def iter_bytes(self) -&gt; typing.AsyncIterator[bytes]:\n    try:\n        while True:\n            yield await self.receive_bytes()\n    except WebSocketDisconnect:\n        pass\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.iter_json","title":"iter_json  <code>async</code>","text":"<pre><code>iter_json()\n</code></pre> Source code in <code>starlette/websockets.py</code> <pre><code>async def iter_json(self) -&gt; typing.AsyncIterator[typing.Any]:\n    try:\n        while True:\n            yield await self.receive_json()\n    except WebSocketDisconnect:\n        pass\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.send_text","title":"send_text  <code>async</code>","text":"<pre><code>send_text(data)\n</code></pre> PARAMETER DESCRIPTION <code>data</code> <p> TYPE: <code>str</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>async def send_text(self, data: str) -&gt; None:\n    await self.send({\"type\": \"websocket.send\", \"text\": data})\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.send_bytes","title":"send_bytes  <code>async</code>","text":"<pre><code>send_bytes(data)\n</code></pre> PARAMETER DESCRIPTION <code>data</code> <p> TYPE: <code>bytes</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>async def send_bytes(self, data: bytes) -&gt; None:\n    await self.send({\"type\": \"websocket.send\", \"bytes\": data})\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.send_json","title":"send_json  <code>async</code>","text":"<pre><code>send_json(data, mode='text')\n</code></pre> PARAMETER DESCRIPTION <code>data</code> <p> TYPE: <code>Any</code> </p> <code>mode</code> <p> TYPE: <code>str</code> DEFAULT: <code>'text'</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>async def send_json(self, data: typing.Any, mode: str = \"text\") -&gt; None:\n    if mode not in {\"text\", \"binary\"}:\n        raise RuntimeError('The \"mode\" argument should be \"text\" or \"binary\".')\n    text = json.dumps(data, separators=(\",\", \":\"), ensure_ascii=False)\n    if mode == \"text\":\n        await self.send({\"type\": \"websocket.send\", \"text\": text})\n    else:\n        await self.send({\"type\": \"websocket.send\", \"bytes\": text.encode(\"utf-8\")})\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocket.close","title":"close  <code>async</code>","text":"<pre><code>close(code=1000, reason=None)\n</code></pre> PARAMETER DESCRIPTION <code>code</code> <p> TYPE: <code>int</code> DEFAULT: <code>1000</code> </p> <code>reason</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>async def close(self, code: int = 1000, reason: str | None = None) -&gt; None:\n    await self.send({\"type\": \"websocket.close\", \"code\": code, \"reason\": reason or \"\"})\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocketDisconnect","title":"readyapi.WebSocketDisconnect","text":"<pre><code>WebSocketDisconnect(code=1000, reason=None)\n</code></pre> <p>               Bases: <code>Exception</code></p> PARAMETER DESCRIPTION <code>code</code> <p> TYPE: <code>int</code> DEFAULT: <code>1000</code> </p> <code>reason</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>def __init__(self, code: int = 1000, reason: str | None = None) -&gt; None:\n    self.code = code\n    self.reason = reason or \"\"\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocketDisconnect.code","title":"code  <code>instance-attribute</code>","text":"<pre><code>code = code\n</code></pre>"},{"location":"reference/websockets/#readyapi.WebSocketDisconnect.reason","title":"reason  <code>instance-attribute</code>","text":"<pre><code>reason = reason or ''\n</code></pre>"},{"location":"reference/websockets/#websockets-additional-classes","title":"WebSockets - additional classes","text":"<p>Additional classes for handling WebSockets.</p> <p>Provided directly by Starlette, but you can import it from <code>readyapi</code>:</p> <pre><code>from readyapi.websockets import WebSocketDisconnect, WebSocketState\n</code></pre>"},{"location":"reference/websockets/#readyapi.websockets.WebSocketDisconnect","title":"readyapi.websockets.WebSocketDisconnect","text":"<pre><code>WebSocketDisconnect(code=1000, reason=None)\n</code></pre> <p>               Bases: <code>Exception</code></p> PARAMETER DESCRIPTION <code>code</code> <p> TYPE: <code>int</code> DEFAULT: <code>1000</code> </p> <code>reason</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/websockets.py</code> <pre><code>def __init__(self, code: int = 1000, reason: str | None = None) -&gt; None:\n    self.code = code\n    self.reason = reason or \"\"\n</code></pre>"},{"location":"reference/websockets/#readyapi.websockets.WebSocketDisconnect.code","title":"code  <code>instance-attribute</code>","text":"<pre><code>code = code\n</code></pre>"},{"location":"reference/websockets/#readyapi.websockets.WebSocketDisconnect.reason","title":"reason  <code>instance-attribute</code>","text":"<pre><code>reason = reason or ''\n</code></pre>"},{"location":"reference/websockets/#readyapi.websockets.WebSocketState","title":"readyapi.websockets.WebSocketState","text":"<p>               Bases: <code>Enum</code></p>"},{"location":"reference/websockets/#readyapi.websockets.WebSocketState.CONNECTING","title":"CONNECTING  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CONNECTING = 0\n</code></pre>"},{"location":"reference/websockets/#readyapi.websockets.WebSocketState.CONNECTED","title":"CONNECTED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CONNECTED = 1\n</code></pre>"},{"location":"reference/websockets/#readyapi.websockets.WebSocketState.DISCONNECTED","title":"DISCONNECTED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DISCONNECTED = 2\n</code></pre>"},{"location":"reference/websockets/#readyapi.websockets.WebSocketState.RESPONSE","title":"RESPONSE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>RESPONSE = 3\n</code></pre>"},{"location":"reference/httpconnection/","title":"<code>HTTPConnection</code> class","text":"<p>When you want to define dependencies that should be compatible with both HTTP and WebSockets, you can define a parameter that takes an <code>HTTPConnection</code> instead of a <code>Request</code> or a <code>WebSocket</code>.</p> <p>You can import it from <code>readyapi.requests</code>:</p> <pre><code>from readyapi.requests import HTTPConnection\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection","title":"readyapi.requests.HTTPConnection","text":"<pre><code>HTTPConnection(scope, receive=None)\n</code></pre> <p>               Bases: <code>Mapping[str, Any]</code></p> <p>A base class for incoming HTTP connections, that is used to provide any functionality that is common to both <code>Request</code> and <code>WebSocket</code>.</p> PARAMETER DESCRIPTION <code>scope</code> <p> TYPE: <code>Scope</code> </p> <code>receive</code> <p> TYPE: <code>Receive | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/requests.py</code> <pre><code>def __init__(self, scope: Scope, receive: Receive | None = None) -&gt; None:\n    assert scope[\"type\"] in (\"http\", \"websocket\")\n    self.scope = scope\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.scope","title":"scope  <code>instance-attribute</code>","text":"<pre><code>scope = scope\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.app","title":"app  <code>property</code>","text":"<pre><code>app\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.url","title":"url  <code>property</code>","text":"<pre><code>url\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.base_url","title":"base_url  <code>property</code>","text":"<pre><code>base_url\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.query_params","title":"query_params  <code>property</code>","text":"<pre><code>query_params\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.path_params","title":"path_params  <code>property</code>","text":"<pre><code>path_params\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.cookies","title":"cookies  <code>property</code>","text":"<pre><code>cookies\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.client","title":"client  <code>property</code>","text":"<pre><code>client\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.session","title":"session  <code>property</code>","text":"<pre><code>session\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.auth","title":"auth  <code>property</code>","text":"<pre><code>auth\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.user","title":"user  <code>property</code>","text":"<pre><code>user\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.state","title":"state  <code>property</code>","text":"<pre><code>state\n</code></pre>"},{"location":"reference/httpconnection/#readyapi.requests.HTTPConnection.url_for","title":"url_for","text":"<pre><code>url_for(name, /, **path_params)\n</code></pre> PARAMETER DESCRIPTION <code>name</code> <p> TYPE: <code>str</code> </p> <code>**path_params</code> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>starlette/requests.py</code> <pre><code>def url_for(self, name: str, /, **path_params: typing.Any) -&gt; URL:\n    url_path_provider: Router | Starlette | None = self.scope.get(\"router\") or self.scope.get(\"app\")\n    if url_path_provider is None:\n        raise RuntimeError(\"The `url_for` method can only be used inside a Starlette application or with a router.\")\n    url_path = url_path_provider.url_path_for(name, **path_params)\n    return url_path.make_absolute_url(base_url=self.base_url)\n</code></pre>"},{"location":"reference/response/","title":"<code>Response</code> class","text":"<p>You can declare a parameter in a path operation function or dependency to be of type <code>Response</code> and then you can set data for the response like headers or cookies.</p> <p>You can also use it directly to create an instance of it and return it from your path operations.</p> <p>You can import it directly from <code>readyapi</code>:</p> <pre><code>from readyapi import Response\n</code></pre>"},{"location":"reference/response/#readyapi.Response","title":"readyapi.Response","text":"<pre><code>Response(\n    content=None,\n    status_code=200,\n    headers=None,\n    media_type=None,\n    background=None,\n)\n</code></pre> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    content: typing.Any = None,\n    status_code: int = 200,\n    headers: typing.Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; None:\n    self.status_code = status_code\n    if media_type is not None:\n        self.media_type = media_type\n    self.background = background\n    self.body = self.render(content)\n    self.init_headers(headers)\n</code></pre>"},{"location":"reference/response/#readyapi.Response.media_type","title":"media_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>media_type = None\n</code></pre>"},{"location":"reference/response/#readyapi.Response.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/response/#readyapi.Response.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/response/#readyapi.Response.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/response/#readyapi.Response.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/response/#readyapi.Response.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/response/#readyapi.Response.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def render(self, content: typing.Any) -&gt; bytes | memoryview:\n    if content is None:\n        return b\"\"\n    if isinstance(content, (bytes, memoryview)):\n        return content\n    return content.encode(self.charset)  # type: ignore\n</code></pre>"},{"location":"reference/response/#readyapi.Response.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [(k.lower().encode(\"latin-1\"), v.encode(\"latin-1\")) for k, v in headers.items()]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if content_type.startswith(\"text/\") and \"charset=\" not in content_type.lower():\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/response/#readyapi.Response.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str | None = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/response/#readyapi.Response.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/responses/","title":"Custom Response Classes - File, HTML, Redirect, Streaming, etc.","text":"<p>There are several custom response classes you can use to create an instance and return them directly from your path operations.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> <p>You can import them directly from <code>readyapi.responses</code>:</p> <pre><code>from readyapi.responses import (\n    FileResponse,\n    HTMLResponse,\n    JSONResponse,\n    ORJSONResponse,\n    PlainTextResponse,\n    RedirectResponse,\n    Response,\n    StreamingResponse,\n    UJSONResponse,\n)\n</code></pre>"},{"location":"reference/responses/#readyapi-responses","title":"ReadyAPI Responses","text":"<p>There are a couple of custom ReadyAPI response classes, you can use them to optimize JSON performance.</p>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse","title":"readyapi.responses.UJSONResponse","text":"<pre><code>UJSONResponse(\n    content,\n    status_code=200,\n    headers=None,\n    media_type=None,\n    background=None,\n)\n</code></pre> <p>               Bases: <code>JSONResponse</code></p> <p>JSON response using the high-performance ujson library to serialize data to JSON.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    content: typing.Any,\n    status_code: int = 200,\n    headers: typing.Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; None:\n    super().__init__(content, status_code, headers, media_type, background)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.media_type","title":"media_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>media_type = 'application/json'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>readyapi/responses.py</code> <pre><code>def render(self, content: Any) -&gt; bytes:\n    assert ujson is not None, \"ujson must be installed to use UJSONResponse\"\n    return ujson.dumps(content, ensure_ascii=False).encode(\"utf-8\")\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [(k.lower().encode(\"latin-1\"), v.encode(\"latin-1\")) for k, v in headers.items()]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if content_type.startswith(\"text/\") and \"charset=\" not in content_type.lower():\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str | None = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.UJSONResponse.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse","title":"readyapi.responses.ORJSONResponse","text":"<pre><code>ORJSONResponse(\n    content,\n    status_code=200,\n    headers=None,\n    media_type=None,\n    background=None,\n)\n</code></pre> <p>               Bases: <code>JSONResponse</code></p> <p>JSON response using the high-performance orjson library to serialize data to JSON.</p> <p>Read more about it in the ReadyAPI docs for Custom Response - HTML, Stream, File, others.</p> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    content: typing.Any,\n    status_code: int = 200,\n    headers: typing.Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; None:\n    super().__init__(content, status_code, headers, media_type, background)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.media_type","title":"media_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>media_type = 'application/json'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>readyapi/responses.py</code> <pre><code>def render(self, content: Any) -&gt; bytes:\n    assert orjson is not None, \"orjson must be installed to use ORJSONResponse\"\n    return orjson.dumps(\n        content, option=orjson.OPT_NON_STR_KEYS | orjson.OPT_SERIALIZE_NUMPY\n    )\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [(k.lower().encode(\"latin-1\"), v.encode(\"latin-1\")) for k, v in headers.items()]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if content_type.startswith(\"text/\") and \"charset=\" not in content_type.lower():\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str | None = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.ORJSONResponse.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/responses/#starlette-responses","title":"Starlette Responses","text":""},{"location":"reference/responses/#readyapi.responses.FileResponse","title":"readyapi.responses.FileResponse","text":"<pre><code>FileResponse(\n    path,\n    status_code=200,\n    headers=None,\n    media_type=None,\n    background=None,\n    filename=None,\n    stat_result=None,\n    method=None,\n    content_disposition_type=\"attachment\",\n)\n</code></pre> <p>               Bases: <code>Response</code></p> PARAMETER DESCRIPTION <code>path</code> <p> TYPE: <code>str | PathLike[str]</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> <code>filename</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>stat_result</code> <p> TYPE: <code>stat_result | None</code> DEFAULT: <code>None</code> </p> <code>method</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>content_disposition_type</code> <p> TYPE: <code>str</code> DEFAULT: <code>'attachment'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    path: str | os.PathLike[str],\n    status_code: int = 200,\n    headers: typing.Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n    filename: str | None = None,\n    stat_result: os.stat_result | None = None,\n    method: str | None = None,\n    content_disposition_type: str = \"attachment\",\n) -&gt; None:\n    self.path = path\n    self.status_code = status_code\n    self.filename = filename\n    if method is not None:\n        warnings.warn(\n            \"The 'method' parameter is not used, and it will be removed.\",\n            DeprecationWarning,\n        )\n    if media_type is None:\n        media_type = guess_type(filename or path)[0] or \"text/plain\"\n    self.media_type = media_type\n    self.background = background\n    self.init_headers(headers)\n    self.headers.setdefault(\"accept-ranges\", \"bytes\")\n    if self.filename is not None:\n        content_disposition_filename = quote(self.filename)\n        if content_disposition_filename != self.filename:\n            content_disposition = f\"{content_disposition_type}; filename*=utf-8''{content_disposition_filename}\"\n        else:\n            content_disposition = f'{content_disposition_type}; filename=\"{self.filename}\"'\n        self.headers.setdefault(\"content-disposition\", content_disposition)\n    self.stat_result = stat_result\n    if stat_result is not None:\n        self.set_stat_headers(stat_result)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.chunk_size","title":"chunk_size  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>chunk_size = 64 * 1024\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.media_type","title":"media_type  <code>instance-attribute</code>","text":"<pre><code>media_type = media_type\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def render(self, content: typing.Any) -&gt; bytes | memoryview:\n    if content is None:\n        return b\"\"\n    if isinstance(content, (bytes, memoryview)):\n        return content\n    return content.encode(self.charset)  # type: ignore\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [(k.lower().encode(\"latin-1\"), v.encode(\"latin-1\")) for k, v in headers.items()]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if content_type.startswith(\"text/\") and \"charset=\" not in content_type.lower():\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str | None = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.FileResponse.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse","title":"readyapi.responses.HTMLResponse","text":"<pre><code>HTMLResponse(\n    content=None,\n    status_code=200,\n    headers=None,\n    media_type=None,\n    background=None,\n)\n</code></pre> <p>               Bases: <code>Response</code></p> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    content: typing.Any = None,\n    status_code: int = 200,\n    headers: typing.Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; None:\n    self.status_code = status_code\n    if media_type is not None:\n        self.media_type = media_type\n    self.background = background\n    self.body = self.render(content)\n    self.init_headers(headers)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.media_type","title":"media_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>media_type = 'text/html'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def render(self, content: typing.Any) -&gt; bytes | memoryview:\n    if content is None:\n        return b\"\"\n    if isinstance(content, (bytes, memoryview)):\n        return content\n    return content.encode(self.charset)  # type: ignore\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [(k.lower().encode(\"latin-1\"), v.encode(\"latin-1\")) for k, v in headers.items()]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if content_type.startswith(\"text/\") and \"charset=\" not in content_type.lower():\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str | None = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.HTMLResponse.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse","title":"readyapi.responses.JSONResponse","text":"<pre><code>JSONResponse(\n    content,\n    status_code=200,\n    headers=None,\n    media_type=None,\n    background=None,\n)\n</code></pre> <p>               Bases: <code>Response</code></p> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    content: typing.Any,\n    status_code: int = 200,\n    headers: typing.Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; None:\n    super().__init__(content, status_code, headers, media_type, background)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.media_type","title":"media_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>media_type = 'application/json'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def render(self, content: typing.Any) -&gt; bytes:\n    return json.dumps(\n        content,\n        ensure_ascii=False,\n        allow_nan=False,\n        indent=None,\n        separators=(\",\", \":\"),\n    ).encode(\"utf-8\")\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [(k.lower().encode(\"latin-1\"), v.encode(\"latin-1\")) for k, v in headers.items()]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if content_type.startswith(\"text/\") and \"charset=\" not in content_type.lower():\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str | None = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.JSONResponse.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse","title":"readyapi.responses.PlainTextResponse","text":"<pre><code>PlainTextResponse(\n    content=None,\n    status_code=200,\n    headers=None,\n    media_type=None,\n    background=None,\n)\n</code></pre> <p>               Bases: <code>Response</code></p> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    content: typing.Any = None,\n    status_code: int = 200,\n    headers: typing.Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; None:\n    self.status_code = status_code\n    if media_type is not None:\n        self.media_type = media_type\n    self.background = background\n    self.body = self.render(content)\n    self.init_headers(headers)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.media_type","title":"media_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>media_type = 'text/plain'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def render(self, content: typing.Any) -&gt; bytes | memoryview:\n    if content is None:\n        return b\"\"\n    if isinstance(content, (bytes, memoryview)):\n        return content\n    return content.encode(self.charset)  # type: ignore\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [(k.lower().encode(\"latin-1\"), v.encode(\"latin-1\")) for k, v in headers.items()]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if content_type.startswith(\"text/\") and \"charset=\" not in content_type.lower():\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str | None = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.PlainTextResponse.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse","title":"readyapi.responses.RedirectResponse","text":"<pre><code>RedirectResponse(\n    url, status_code=307, headers=None, background=None\n)\n</code></pre> <p>               Bases: <code>Response</code></p> PARAMETER DESCRIPTION <code>url</code> <p> TYPE: <code>str | URL</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>307</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    url: str | URL,\n    status_code: int = 307,\n    headers: typing.Mapping[str, str] | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; None:\n    super().__init__(content=b\"\", status_code=status_code, headers=headers, background=background)\n    self.headers[\"location\"] = quote(str(url), safe=\":/%#?=@[]!$&amp;'()*+,;\")\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.media_type","title":"media_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>media_type = None\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def render(self, content: typing.Any) -&gt; bytes | memoryview:\n    if content is None:\n        return b\"\"\n    if isinstance(content, (bytes, memoryview)):\n        return content\n    return content.encode(self.charset)  # type: ignore\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [(k.lower().encode(\"latin-1\"), v.encode(\"latin-1\")) for k, v in headers.items()]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if content_type.startswith(\"text/\") and \"charset=\" not in content_type.lower():\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str | None = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.RedirectResponse.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response","title":"readyapi.responses.Response","text":"<pre><code>Response(\n    content=None,\n    status_code=200,\n    headers=None,\n    media_type=None,\n    background=None,\n)\n</code></pre> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    content: typing.Any = None,\n    status_code: int = 200,\n    headers: typing.Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; None:\n    self.status_code = status_code\n    if media_type is not None:\n        self.media_type = media_type\n    self.background = background\n    self.body = self.render(content)\n    self.init_headers(headers)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.media_type","title":"media_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>media_type = None\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def render(self, content: typing.Any) -&gt; bytes | memoryview:\n    if content is None:\n        return b\"\"\n    if isinstance(content, (bytes, memoryview)):\n        return content\n    return content.encode(self.charset)  # type: ignore\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [(k.lower().encode(\"latin-1\"), v.encode(\"latin-1\")) for k, v in headers.items()]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if content_type.startswith(\"text/\") and \"charset=\" not in content_type.lower():\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str | None = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.Response.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse","title":"readyapi.responses.StreamingResponse","text":"<pre><code>StreamingResponse(\n    content,\n    status_code=200,\n    headers=None,\n    media_type=None,\n    background=None,\n)\n</code></pre> <p>               Bases: <code>Response</code></p> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>ContentStream</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>background</code> <p> TYPE: <code>BackgroundTask | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    content: ContentStream,\n    status_code: int = 200,\n    headers: typing.Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; None:\n    if isinstance(content, typing.AsyncIterable):\n        self.body_iterator = content\n    else:\n        self.body_iterator = iterate_in_threadpool(content)\n    self.status_code = status_code\n    self.media_type = self.media_type if media_type is None else media_type\n    self.background = background\n    self.init_headers(headers)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.body_iterator","title":"body_iterator  <code>instance-attribute</code>","text":"<pre><code>body_iterator\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.charset","title":"charset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>charset = 'utf-8'\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.status_code","title":"status_code  <code>instance-attribute</code>","text":"<pre><code>status_code = status_code\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.media_type","title":"media_type  <code>instance-attribute</code>","text":"<pre><code>media_type = (\n    media_type if media_type is None else media_type\n)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body = render(content)\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.background","title":"background  <code>instance-attribute</code>","text":"<pre><code>background = background\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.headers","title":"headers  <code>property</code>","text":"<pre><code>headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.render","title":"render","text":"<pre><code>render(content)\n</code></pre> PARAMETER DESCRIPTION <code>content</code> <p> TYPE: <code>Any</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def render(self, content: typing.Any) -&gt; bytes | memoryview:\n    if content is None:\n        return b\"\"\n    if isinstance(content, (bytes, memoryview)):\n        return content\n    return content.encode(self.charset)  # type: ignore\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.init_headers","title":"init_headers","text":"<pre><code>init_headers(headers=None)\n</code></pre> PARAMETER DESCRIPTION <code>headers</code> <p> TYPE: <code>Mapping[str, str] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def init_headers(self, headers: typing.Mapping[str, str] | None = None) -&gt; None:\n    if headers is None:\n        raw_headers: list[tuple[bytes, bytes]] = []\n        populate_content_length = True\n        populate_content_type = True\n    else:\n        raw_headers = [(k.lower().encode(\"latin-1\"), v.encode(\"latin-1\")) for k, v in headers.items()]\n        keys = [h[0] for h in raw_headers]\n        populate_content_length = b\"content-length\" not in keys\n        populate_content_type = b\"content-type\" not in keys\n\n    body = getattr(self, \"body\", None)\n    if (\n        body is not None\n        and populate_content_length\n        and not (self.status_code &lt; 200 or self.status_code in (204, 304))\n    ):\n        content_length = str(len(body))\n        raw_headers.append((b\"content-length\", content_length.encode(\"latin-1\")))\n\n    content_type = self.media_type\n    if content_type is not None and populate_content_type:\n        if content_type.startswith(\"text/\") and \"charset=\" not in content_type.lower():\n            content_type += \"; charset=\" + self.charset\n        raw_headers.append((b\"content-type\", content_type.encode(\"latin-1\")))\n\n    self.raw_headers = raw_headers\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.set_cookie","title":"set_cookie","text":"<pre><code>set_cookie(\n    key,\n    value=\"\",\n    max_age=None,\n    expires=None,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>value</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>max_age</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>expires</code> <p> TYPE: <code>datetime | str | int | None</code> DEFAULT: <code>None</code> </p> <code>path</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def set_cookie(\n    self,\n    key: str,\n    value: str = \"\",\n    max_age: int | None = None,\n    expires: datetime | str | int | None = None,\n    path: str | None = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    cookie: http.cookies.BaseCookie[str] = http.cookies.SimpleCookie()\n    cookie[key] = value\n    if max_age is not None:\n        cookie[key][\"max-age\"] = max_age\n    if expires is not None:\n        if isinstance(expires, datetime):\n            cookie[key][\"expires\"] = format_datetime(expires, usegmt=True)\n        else:\n            cookie[key][\"expires\"] = expires\n    if path is not None:\n        cookie[key][\"path\"] = path\n    if domain is not None:\n        cookie[key][\"domain\"] = domain\n    if secure:\n        cookie[key][\"secure\"] = True\n    if httponly:\n        cookie[key][\"httponly\"] = True\n    if samesite is not None:\n        assert samesite.lower() in [\n            \"strict\",\n            \"lax\",\n            \"none\",\n        ], \"samesite must be either 'strict', 'lax' or 'none'\"\n        cookie[key][\"samesite\"] = samesite\n    cookie_val = cookie.output(header=\"\").strip()\n    self.raw_headers.append((b\"set-cookie\", cookie_val.encode(\"latin-1\")))\n</code></pre>"},{"location":"reference/responses/#readyapi.responses.StreamingResponse.delete_cookie","title":"delete_cookie","text":"<pre><code>delete_cookie(\n    key,\n    path=\"/\",\n    domain=None,\n    secure=False,\n    httponly=False,\n    samesite=\"lax\",\n)\n</code></pre> PARAMETER DESCRIPTION <code>key</code> <p> TYPE: <code>str</code> </p> <code>path</code> <p> TYPE: <code>str</code> DEFAULT: <code>'/'</code> </p> <code>domain</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>secure</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>httponly</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>samesite</code> <p> TYPE: <code>Literal['lax', 'strict', 'none'] | None</code> DEFAULT: <code>'lax'</code> </p> Source code in <code>starlette/responses.py</code> <pre><code>def delete_cookie(\n    self,\n    key: str,\n    path: str = \"/\",\n    domain: str | None = None,\n    secure: bool = False,\n    httponly: bool = False,\n    samesite: typing.Literal[\"lax\", \"strict\", \"none\"] | None = \"lax\",\n) -&gt; None:\n    self.set_cookie(\n        key,\n        max_age=0,\n        expires=0,\n        path=path,\n        domain=domain,\n        secure=secure,\n        httponly=httponly,\n        samesite=samesite,\n    )\n</code></pre>"},{"location":"reference/middleware/","title":"Middleware","text":"<p>There are several middlewares available provided by Starlette directly.</p> <p>Read more about them in the ReadyAPI docs for Middleware.</p> <p>It can be imported from <code>readyapi</code>:</p> <pre><code>from readyapi.middleware.cors import CORSMiddleware\n</code></pre> <p>It can be imported from <code>readyapi</code>:</p> <pre><code>from readyapi.middleware.gzip import GZipMiddleware\n</code></pre> <p>It can be imported from <code>readyapi</code>:</p> <pre><code>from readyapi.middleware.httpsredirect import HTTPSRedirectMiddleware\n</code></pre> <p>It can be imported from <code>readyapi</code>:</p> <pre><code>from readyapi.middleware.trustedhost import TrustedHostMiddleware\n</code></pre> <p>It can be imported from <code>readyapi</code>:</p> <pre><code>from readyapi.middleware.wsgi import WSGIMiddleware\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware","title":"readyapi.middleware.cors.CORSMiddleware","text":"<pre><code>CORSMiddleware(\n    app,\n    allow_origins=(),\n    allow_methods=(\"GET\",),\n    allow_headers=(),\n    allow_credentials=False,\n    allow_origin_regex=None,\n    expose_headers=(),\n    max_age=600,\n)\n</code></pre> PARAMETER DESCRIPTION <code>app</code> <p> TYPE: <code>ASGIApp</code> </p> <code>allow_origins</code> <p> TYPE: <code>Sequence[str]</code> DEFAULT: <code>()</code> </p> <code>allow_methods</code> <p> TYPE: <code>Sequence[str]</code> DEFAULT: <code>('GET',)</code> </p> <code>allow_headers</code> <p> TYPE: <code>Sequence[str]</code> DEFAULT: <code>()</code> </p> <code>allow_credentials</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>allow_origin_regex</code> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>expose_headers</code> <p> TYPE: <code>Sequence[str]</code> DEFAULT: <code>()</code> </p> <code>max_age</code> <p> TYPE: <code>int</code> DEFAULT: <code>600</code> </p> Source code in <code>starlette/middleware/cors.py</code> <pre><code>def __init__(\n    self,\n    app: ASGIApp,\n    allow_origins: typing.Sequence[str] = (),\n    allow_methods: typing.Sequence[str] = (\"GET\",),\n    allow_headers: typing.Sequence[str] = (),\n    allow_credentials: bool = False,\n    allow_origin_regex: str | None = None,\n    expose_headers: typing.Sequence[str] = (),\n    max_age: int = 600,\n) -&gt; None:\n    if \"*\" in allow_methods:\n        allow_methods = ALL_METHODS\n\n    compiled_allow_origin_regex = None\n    if allow_origin_regex is not None:\n        compiled_allow_origin_regex = re.compile(allow_origin_regex)\n\n    allow_all_origins = \"*\" in allow_origins\n    allow_all_headers = \"*\" in allow_headers\n    preflight_explicit_allow_origin = not allow_all_origins or allow_credentials\n\n    simple_headers = {}\n    if allow_all_origins:\n        simple_headers[\"Access-Control-Allow-Origin\"] = \"*\"\n    if allow_credentials:\n        simple_headers[\"Access-Control-Allow-Credentials\"] = \"true\"\n    if expose_headers:\n        simple_headers[\"Access-Control-Expose-Headers\"] = \", \".join(expose_headers)\n\n    preflight_headers = {}\n    if preflight_explicit_allow_origin:\n        # The origin value will be set in preflight_response() if it is allowed.\n        preflight_headers[\"Vary\"] = \"Origin\"\n    else:\n        preflight_headers[\"Access-Control-Allow-Origin\"] = \"*\"\n    preflight_headers.update(\n        {\n            \"Access-Control-Allow-Methods\": \", \".join(allow_methods),\n            \"Access-Control-Max-Age\": str(max_age),\n        }\n    )\n    allow_headers = sorted(SAFELISTED_HEADERS | set(allow_headers))\n    if allow_headers and not allow_all_headers:\n        preflight_headers[\"Access-Control-Allow-Headers\"] = \", \".join(allow_headers)\n    if allow_credentials:\n        preflight_headers[\"Access-Control-Allow-Credentials\"] = \"true\"\n\n    self.app = app\n    self.allow_origins = allow_origins\n    self.allow_methods = allow_methods\n    self.allow_headers = [h.lower() for h in allow_headers]\n    self.allow_all_origins = allow_all_origins\n    self.allow_all_headers = allow_all_headers\n    self.preflight_explicit_allow_origin = preflight_explicit_allow_origin\n    self.allow_origin_regex = compiled_allow_origin_regex\n    self.simple_headers = simple_headers\n    self.preflight_headers = preflight_headers\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.app","title":"app  <code>instance-attribute</code>","text":"<pre><code>app = app\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.allow_origins","title":"allow_origins  <code>instance-attribute</code>","text":"<pre><code>allow_origins = allow_origins\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.allow_methods","title":"allow_methods  <code>instance-attribute</code>","text":"<pre><code>allow_methods = allow_methods\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.allow_headers","title":"allow_headers  <code>instance-attribute</code>","text":"<pre><code>allow_headers = [lower() for h in allow_headers]\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.allow_all_origins","title":"allow_all_origins  <code>instance-attribute</code>","text":"<pre><code>allow_all_origins = allow_all_origins\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.allow_all_headers","title":"allow_all_headers  <code>instance-attribute</code>","text":"<pre><code>allow_all_headers = allow_all_headers\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.preflight_explicit_allow_origin","title":"preflight_explicit_allow_origin  <code>instance-attribute</code>","text":"<pre><code>preflight_explicit_allow_origin = (\n    preflight_explicit_allow_origin\n)\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.allow_origin_regex","title":"allow_origin_regex  <code>instance-attribute</code>","text":"<pre><code>allow_origin_regex = compiled_allow_origin_regex\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.simple_headers","title":"simple_headers  <code>instance-attribute</code>","text":"<pre><code>simple_headers = simple_headers\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.preflight_headers","title":"preflight_headers  <code>instance-attribute</code>","text":"<pre><code>preflight_headers = preflight_headers\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.is_allowed_origin","title":"is_allowed_origin","text":"<pre><code>is_allowed_origin(origin)\n</code></pre> PARAMETER DESCRIPTION <code>origin</code> <p> TYPE: <code>str</code> </p> Source code in <code>starlette/middleware/cors.py</code> <pre><code>def is_allowed_origin(self, origin: str) -&gt; bool:\n    if self.allow_all_origins:\n        return True\n\n    if self.allow_origin_regex is not None and self.allow_origin_regex.fullmatch(origin):\n        return True\n\n    return origin in self.allow_origins\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.preflight_response","title":"preflight_response","text":"<pre><code>preflight_response(request_headers)\n</code></pre> PARAMETER DESCRIPTION <code>request_headers</code> <p> TYPE: <code>Headers</code> </p> Source code in <code>starlette/middleware/cors.py</code> <pre><code>def preflight_response(self, request_headers: Headers) -&gt; Response:\n    requested_origin = request_headers[\"origin\"]\n    requested_method = request_headers[\"access-control-request-method\"]\n    requested_headers = request_headers.get(\"access-control-request-headers\")\n\n    headers = dict(self.preflight_headers)\n    failures = []\n\n    if self.is_allowed_origin(origin=requested_origin):\n        if self.preflight_explicit_allow_origin:\n            # The \"else\" case is already accounted for in self.preflight_headers\n            # and the value would be \"*\".\n            headers[\"Access-Control-Allow-Origin\"] = requested_origin\n    else:\n        failures.append(\"origin\")\n\n    if requested_method not in self.allow_methods:\n        failures.append(\"method\")\n\n    # If we allow all headers, then we have to mirror back any requested\n    # headers in the response.\n    if self.allow_all_headers and requested_headers is not None:\n        headers[\"Access-Control-Allow-Headers\"] = requested_headers\n    elif requested_headers is not None:\n        for header in [h.lower() for h in requested_headers.split(\",\")]:\n            if header.strip() not in self.allow_headers:\n                failures.append(\"headers\")\n                break\n\n    # We don't strictly need to use 400 responses here, since its up to\n    # the browser to enforce the CORS policy, but its more informative\n    # if we do.\n    if failures:\n        failure_text = \"Disallowed CORS \" + \", \".join(failures)\n        return PlainTextResponse(failure_text, status_code=400, headers=headers)\n\n    return PlainTextResponse(\"OK\", status_code=200, headers=headers)\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.simple_response","title":"simple_response  <code>async</code>","text":"<pre><code>simple_response(scope, receive, send, request_headers)\n</code></pre> PARAMETER DESCRIPTION <code>scope</code> <p> TYPE: <code>Scope</code> </p> <code>receive</code> <p> TYPE: <code>Receive</code> </p> <code>send</code> <p> TYPE: <code>Send</code> </p> <code>request_headers</code> <p> TYPE: <code>Headers</code> </p> Source code in <code>starlette/middleware/cors.py</code> <pre><code>async def simple_response(self, scope: Scope, receive: Receive, send: Send, request_headers: Headers) -&gt; None:\n    send = functools.partial(self.send, send=send, request_headers=request_headers)\n    await self.app(scope, receive, send)\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.send","title":"send  <code>async</code>","text":"<pre><code>send(message, send, request_headers)\n</code></pre> PARAMETER DESCRIPTION <code>message</code> <p> TYPE: <code>Message</code> </p> <code>send</code> <p> TYPE: <code>Send</code> </p> <code>request_headers</code> <p> TYPE: <code>Headers</code> </p> Source code in <code>starlette/middleware/cors.py</code> <pre><code>async def send(self, message: Message, send: Send, request_headers: Headers) -&gt; None:\n    if message[\"type\"] != \"http.response.start\":\n        await send(message)\n        return\n\n    message.setdefault(\"headers\", [])\n    headers = MutableHeaders(scope=message)\n    headers.update(self.simple_headers)\n    origin = request_headers[\"Origin\"]\n    has_cookie = \"cookie\" in request_headers\n\n    # If request includes any cookie headers, then we must respond\n    # with the specific origin instead of '*'.\n    if self.allow_all_origins and has_cookie:\n        self.allow_explicit_origin(headers, origin)\n\n    # If we only allow specific origins, then we have to mirror back\n    # the Origin header in the response.\n    elif not self.allow_all_origins and self.is_allowed_origin(origin=origin):\n        self.allow_explicit_origin(headers, origin)\n\n    await send(message)\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.cors.CORSMiddleware.allow_explicit_origin","title":"allow_explicit_origin  <code>staticmethod</code>","text":"<pre><code>allow_explicit_origin(headers, origin)\n</code></pre> PARAMETER DESCRIPTION <code>headers</code> <p> TYPE: <code>MutableHeaders</code> </p> <code>origin</code> <p> TYPE: <code>str</code> </p> Source code in <code>starlette/middleware/cors.py</code> <pre><code>@staticmethod\ndef allow_explicit_origin(headers: MutableHeaders, origin: str) -&gt; None:\n    headers[\"Access-Control-Allow-Origin\"] = origin\n    headers.add_vary_header(\"Origin\")\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.gzip.GZipMiddleware","title":"readyapi.middleware.gzip.GZipMiddleware","text":"<pre><code>GZipMiddleware(app, minimum_size=500, compresslevel=9)\n</code></pre> PARAMETER DESCRIPTION <code>app</code> <p> TYPE: <code>ASGIApp</code> </p> <code>minimum_size</code> <p> TYPE: <code>int</code> DEFAULT: <code>500</code> </p> <code>compresslevel</code> <p> TYPE: <code>int</code> DEFAULT: <code>9</code> </p> Source code in <code>starlette/middleware/gzip.py</code> <pre><code>def __init__(self, app: ASGIApp, minimum_size: int = 500, compresslevel: int = 9) -&gt; None:\n    self.app = app\n    self.minimum_size = minimum_size\n    self.compresslevel = compresslevel\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.gzip.GZipMiddleware.app","title":"app  <code>instance-attribute</code>","text":"<pre><code>app = app\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.gzip.GZipMiddleware.minimum_size","title":"minimum_size  <code>instance-attribute</code>","text":"<pre><code>minimum_size = minimum_size\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.gzip.GZipMiddleware.compresslevel","title":"compresslevel  <code>instance-attribute</code>","text":"<pre><code>compresslevel = compresslevel\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.httpsredirect.HTTPSRedirectMiddleware","title":"readyapi.middleware.httpsredirect.HTTPSRedirectMiddleware","text":"<pre><code>HTTPSRedirectMiddleware(app)\n</code></pre> PARAMETER DESCRIPTION <code>app</code> <p> TYPE: <code>ASGIApp</code> </p> Source code in <code>starlette/middleware/httpsredirect.py</code> <pre><code>def __init__(self, app: ASGIApp) -&gt; None:\n    self.app = app\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.httpsredirect.HTTPSRedirectMiddleware.app","title":"app  <code>instance-attribute</code>","text":"<pre><code>app = app\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.trustedhost.TrustedHostMiddleware","title":"readyapi.middleware.trustedhost.TrustedHostMiddleware","text":"<pre><code>TrustedHostMiddleware(\n    app, allowed_hosts=None, www_redirect=True\n)\n</code></pre> PARAMETER DESCRIPTION <code>app</code> <p> TYPE: <code>ASGIApp</code> </p> <code>allowed_hosts</code> <p> TYPE: <code>Sequence[str] | None</code> DEFAULT: <code>None</code> </p> <code>www_redirect</code> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>starlette/middleware/trustedhost.py</code> <pre><code>def __init__(\n    self,\n    app: ASGIApp,\n    allowed_hosts: typing.Sequence[str] | None = None,\n    www_redirect: bool = True,\n) -&gt; None:\n    if allowed_hosts is None:\n        allowed_hosts = [\"*\"]\n\n    for pattern in allowed_hosts:\n        assert \"*\" not in pattern[1:], ENFORCE_DOMAIN_WILDCARD\n        if pattern.startswith(\"*\") and pattern != \"*\":\n            assert pattern.startswith(\"*.\"), ENFORCE_DOMAIN_WILDCARD\n    self.app = app\n    self.allowed_hosts = list(allowed_hosts)\n    self.allow_any = \"*\" in allowed_hosts\n    self.www_redirect = www_redirect\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.trustedhost.TrustedHostMiddleware.app","title":"app  <code>instance-attribute</code>","text":"<pre><code>app = app\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.trustedhost.TrustedHostMiddleware.allowed_hosts","title":"allowed_hosts  <code>instance-attribute</code>","text":"<pre><code>allowed_hosts = list(allowed_hosts)\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.trustedhost.TrustedHostMiddleware.allow_any","title":"allow_any  <code>instance-attribute</code>","text":"<pre><code>allow_any = '*' in allowed_hosts\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.trustedhost.TrustedHostMiddleware.www_redirect","title":"www_redirect  <code>instance-attribute</code>","text":"<pre><code>www_redirect = www_redirect\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.wsgi.WSGIMiddleware","title":"readyapi.middleware.wsgi.WSGIMiddleware","text":"<pre><code>WSGIMiddleware(app)\n</code></pre> PARAMETER DESCRIPTION <code>app</code> <p> TYPE: <code>Callable[..., Any]</code> </p> Source code in <code>starlette/middleware/wsgi.py</code> <pre><code>def __init__(self, app: typing.Callable[..., typing.Any]) -&gt; None:\n    self.app = app\n</code></pre>"},{"location":"reference/middleware/#readyapi.middleware.wsgi.WSGIMiddleware.app","title":"app  <code>instance-attribute</code>","text":"<pre><code>app = app\n</code></pre>"},{"location":"reference/openapi/","title":"OpenAPI","text":"<p>There are several utilities to handle OpenAPI.</p> <p>You normally don't need to use them unless you have a specific advanced use case that requires it.</p>"},{"location":"reference/openapi/docs/","title":"OpenAPI <code>docs</code>","text":"<p>Utilities to handle OpenAPI automatic UI documentation, including Swagger UI (by default at <code>/docs</code>) and ReDoc (by default at <code>/redoc</code>).</p>"},{"location":"reference/openapi/docs/#readyapi.openapi.docs.get_swagger_ui_html","title":"readyapi.openapi.docs.get_swagger_ui_html","text":"<pre><code>get_swagger_ui_html(\n    *,\n    openapi_url,\n    title,\n    swagger_js_url=\"https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui-bundle.js\",\n    swagger_css_url=\"https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui.css\",\n    swagger_favicon_url=\"https://readyapi.github.io/img/favicon.png\",\n    oauth2_redirect_url=None,\n    init_oauth=None,\n    swagger_ui_parameters=None\n)\n</code></pre> <p>Generate and return the HTML  that loads Swagger UI for the interactive API docs (normally served at <code>/docs</code>).</p> <p>You would only call this function yourself if you needed to override some parts, for example the URLs to use to load Swagger UI's JavaScript and CSS.</p> <p>Read more about it in the ReadyAPI docs for Configure Swagger UI and the ReadyAPI docs for Custom Docs UI Static Assets (Self-Hosting).</p> PARAMETER DESCRIPTION <code>openapi_url</code> <p>The OpenAPI URL that Swagger UI should load and use.</p> <p>This is normally done automatically by ReadyAPI using the default URL <code>/openapi.json</code>.</p> <p> TYPE: <code>str</code> </p> <code>title</code> <p>The HTML <code>&lt;title&gt;</code> content, normally shown in the browser tab.</p> <p> TYPE: <code>str</code> </p> <code>swagger_js_url</code> <p>The URL to use to load the Swagger UI JavaScript.</p> <p>It is normally set to a CDN URL.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui-bundle.js'</code> </p> <code>swagger_css_url</code> <p>The URL to use to load the Swagger UI CSS.</p> <p>It is normally set to a CDN URL.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui.css'</code> </p> <code>swagger_favicon_url</code> <p>The URL of the favicon to use. It is normally shown in the browser tab.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'https://readyapi.github.io/img/favicon.png'</code> </p> <code>oauth2_redirect_url</code> <p>The OAuth2 redirect URL, it is normally automatically handled by ReadyAPI.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>init_oauth</code> <p>A dictionary with Swagger UI OAuth2 initialization configurations.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>swagger_ui_parameters</code> <p>Configuration parameters for Swagger UI.</p> <p>It defaults to swagger_ui_default_parameters.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> Source code in <code>readyapi/openapi/docs.py</code> <pre><code>def get_swagger_ui_html(\n    *,\n    openapi_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The OpenAPI URL that Swagger UI should load and use.\n\n            This is normally done automatically by ReadyAPI using the default URL\n            `/openapi.json`.\n            \"\"\"\n        ),\n    ],\n    title: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The HTML `&lt;title&gt;` content, normally shown in the browser tab.\n            \"\"\"\n        ),\n    ],\n    swagger_js_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL to use to load the Swagger UI JavaScript.\n\n            It is normally set to a CDN URL.\n            \"\"\"\n        ),\n    ] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui-bundle.js\",\n    swagger_css_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL to use to load the Swagger UI CSS.\n\n            It is normally set to a CDN URL.\n            \"\"\"\n        ),\n    ] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui.css\",\n    swagger_favicon_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL of the favicon to use. It is normally shown in the browser tab.\n            \"\"\"\n        ),\n    ] = \"https://readyapi.github.io/img/favicon.png\",\n    oauth2_redirect_url: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            The OAuth2 redirect URL, it is normally automatically handled by ReadyAPI.\n            \"\"\"\n        ),\n    ] = None,\n    init_oauth: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            A dictionary with Swagger UI OAuth2 initialization configurations.\n            \"\"\"\n        ),\n    ] = None,\n    swagger_ui_parameters: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Configuration parameters for Swagger UI.\n\n            It defaults to [swagger_ui_default_parameters][readyapi.openapi.docs.swagger_ui_default_parameters].\n            \"\"\"\n        ),\n    ] = None,\n) -&gt; HTMLResponse:\n    \"\"\"\n    Generate and return the HTML  that loads Swagger UI for the interactive\n    API docs (normally served at `/docs`).\n\n    You would only call this function yourself if you needed to override some parts,\n    for example the URLs to use to load Swagger UI's JavaScript and CSS.\n\n    Read more about it in the\n    [ReadyAPI docs for Configure Swagger UI](https://readyapi.github.io/how-to/configure-swagger-ui/)\n    and the [ReadyAPI docs for Custom Docs UI Static Assets (Self-Hosting)](https://readyapi.github.io/how-to/custom-docs-ui-assets/).\n    \"\"\"\n    current_swagger_ui_parameters = swagger_ui_default_parameters.copy()\n    if swagger_ui_parameters:\n        current_swagger_ui_parameters.update(swagger_ui_parameters)\n\n    html = f\"\"\"\n    &lt;!DOCTYPE html&gt;\n    &lt;html&gt;\n    &lt;head&gt;\n    &lt;link type=\"text/css\" rel=\"stylesheet\" href=\"{swagger_css_url}\"&gt;\n    &lt;link rel=\"shortcut icon\" href=\"{swagger_favicon_url}\"&gt;\n    &lt;title&gt;{title}&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;div id=\"swagger-ui\"&gt;\n    &lt;/div&gt;\n    &lt;script src=\"{swagger_js_url}\"&gt;&lt;/script&gt;\n    &lt;!-- `SwaggerUIBundle` is now available on the page --&gt;\n    &lt;script&gt;\n    const ui = SwaggerUIBundle({{\n        url: '{openapi_url}',\n    \"\"\"\n\n    for key, value in current_swagger_ui_parameters.items():\n        html += f\"{json.dumps(key)}: {json.dumps(jsonable_encoder(value))},\\n\"\n\n    if oauth2_redirect_url:\n        html += f\"oauth2RedirectUrl: window.location.origin + '{oauth2_redirect_url}',\"\n\n    html += \"\"\"\n    presets: [\n        SwaggerUIBundle.presets.apis,\n        SwaggerUIBundle.SwaggerUIStandalonePreset\n        ],\n    })\"\"\"\n\n    if init_oauth:\n        html += f\"\"\"\n        ui.initOAuth({json.dumps(jsonable_encoder(init_oauth))})\n        \"\"\"\n\n    html += \"\"\"\n    &lt;/script&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\"\n    return HTMLResponse(html)\n</code></pre>"},{"location":"reference/openapi/docs/#readyapi.openapi.docs.get_redoc_html","title":"readyapi.openapi.docs.get_redoc_html","text":"<pre><code>get_redoc_html(\n    *,\n    openapi_url,\n    title,\n    redoc_js_url=\"https://cdn.jsdelivr.net/npm/redoc@2/bundles/redoc.standalone.js\",\n    redoc_favicon_url=\"https://readyapi.github.io/img/favicon.png\",\n    with_google_fonts=True\n)\n</code></pre> <p>Generate and return the HTML response that loads ReDoc for the alternative API docs (normally served at <code>/redoc</code>).</p> <p>You would only call this function yourself if you needed to override some parts, for example the URLs to use to load ReDoc's JavaScript and CSS.</p> <p>Read more about it in the ReadyAPI docs for Custom Docs UI Static Assets (Self-Hosting).</p> PARAMETER DESCRIPTION <code>openapi_url</code> <p>The OpenAPI URL that ReDoc should load and use.</p> <p>This is normally done automatically by ReadyAPI using the default URL <code>/openapi.json</code>.</p> <p> TYPE: <code>str</code> </p> <code>title</code> <p>The HTML <code>&lt;title&gt;</code> content, normally shown in the browser tab.</p> <p> TYPE: <code>str</code> </p> <code>redoc_js_url</code> <p>The URL to use to load the ReDoc JavaScript.</p> <p>It is normally set to a CDN URL.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'https://cdn.jsdelivr.net/npm/redoc@2/bundles/redoc.standalone.js'</code> </p> <code>redoc_favicon_url</code> <p>The URL of the favicon to use. It is normally shown in the browser tab.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'https://readyapi.github.io/img/favicon.png'</code> </p> <code>with_google_fonts</code> <p>Load and use Google Fonts.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/openapi/docs.py</code> <pre><code>def get_redoc_html(\n    *,\n    openapi_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The OpenAPI URL that ReDoc should load and use.\n\n            This is normally done automatically by ReadyAPI using the default URL\n            `/openapi.json`.\n            \"\"\"\n        ),\n    ],\n    title: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The HTML `&lt;title&gt;` content, normally shown in the browser tab.\n            \"\"\"\n        ),\n    ],\n    redoc_js_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL to use to load the ReDoc JavaScript.\n\n            It is normally set to a CDN URL.\n            \"\"\"\n        ),\n    ] = \"https://cdn.jsdelivr.net/npm/redoc@2/bundles/redoc.standalone.js\",\n    redoc_favicon_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL of the favicon to use. It is normally shown in the browser tab.\n            \"\"\"\n        ),\n    ] = \"https://readyapi.github.io/img/favicon.png\",\n    with_google_fonts: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Load and use Google Fonts.\n            \"\"\"\n        ),\n    ] = True,\n) -&gt; HTMLResponse:\n    \"\"\"\n    Generate and return the HTML response that loads ReDoc for the alternative\n    API docs (normally served at `/redoc`).\n\n    You would only call this function yourself if you needed to override some parts,\n    for example the URLs to use to load ReDoc's JavaScript and CSS.\n\n    Read more about it in the\n    [ReadyAPI docs for Custom Docs UI Static Assets (Self-Hosting)](https://readyapi.github.io/how-to/custom-docs-ui-assets/).\n    \"\"\"\n    html = f\"\"\"\n    &lt;!DOCTYPE html&gt;\n    &lt;html&gt;\n    &lt;head&gt;\n    &lt;title&gt;{title}&lt;/title&gt;\n    &lt;!-- needed for adaptive design --&gt;\n    &lt;meta charset=\"utf-8\"/&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    \"\"\"\n    if with_google_fonts:\n        html += \"\"\"\n    &lt;link href=\"https://fonts.googleapis.com/css?family=Montserrat:300,400,700|Roboto:300,400,700\" rel=\"stylesheet\"&gt;\n    \"\"\"\n    html += f\"\"\"\n    &lt;link rel=\"shortcut icon\" href=\"{redoc_favicon_url}\"&gt;\n    &lt;!--\n    ReDoc doesn't change outer page styles\n    --&gt;\n    &lt;style&gt;\n      body {{\n        margin: 0;\n        padding: 0;\n      }}\n    &lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;noscript&gt;\n        ReDoc requires Javascript to function. Please enable it to browse the documentation.\n    &lt;/noscript&gt;\n    &lt;redoc spec-url=\"{openapi_url}\"&gt;&lt;/redoc&gt;\n    &lt;script src=\"{redoc_js_url}\"&gt; &lt;/script&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\"\n    return HTMLResponse(html)\n</code></pre>"},{"location":"reference/openapi/docs/#readyapi.openapi.docs.get_swagger_ui_oauth2_redirect_html","title":"readyapi.openapi.docs.get_swagger_ui_oauth2_redirect_html","text":"<pre><code>get_swagger_ui_oauth2_redirect_html()\n</code></pre> <p>Generate the HTML response with the OAuth2 redirection for Swagger UI.</p> <p>You normally don't need to use or change this.</p> Source code in <code>readyapi/openapi/docs.py</code> <pre><code>def get_swagger_ui_oauth2_redirect_html() -&gt; HTMLResponse:\n    \"\"\"\n    Generate the HTML response with the OAuth2 redirection for Swagger UI.\n\n    You normally don't need to use or change this.\n    \"\"\"\n    # copied from https://github.com/swagger-api/swagger-ui/blob/v4.14.0/dist/oauth2-redirect.html\n    html = \"\"\"\n    &lt;!doctype html&gt;\n    &lt;html lang=\"en-US\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;Swagger UI: OAuth2 Redirect&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;script&gt;\n        'use strict';\n        function run () {\n            var oauth2 = window.opener.swaggerUIRedirectOauth2;\n            var sentState = oauth2.state;\n            var redirectUrl = oauth2.redirectUrl;\n            var isValid, qp, arr;\n\n            if (/code|token|error/.test(window.location.hash)) {\n                qp = window.location.hash.substring(1).replace('?', '&amp;');\n            } else {\n                qp = location.search.substring(1);\n            }\n\n            arr = qp.split(\"&amp;\");\n            arr.forEach(function (v,i,_arr) { _arr[i] = '\"' + v.replace('=', '\":\"') + '\"';});\n            qp = qp ? JSON.parse('{' + arr.join() + '}',\n                    function (key, value) {\n                        return key === \"\" ? value : decodeURIComponent(value);\n                    }\n            ) : {};\n\n            isValid = qp.state === sentState;\n\n            if ((\n              oauth2.auth.schema.get(\"flow\") === \"accessCode\" ||\n              oauth2.auth.schema.get(\"flow\") === \"authorizationCode\" ||\n              oauth2.auth.schema.get(\"flow\") === \"authorization_code\"\n            ) &amp;&amp; !oauth2.auth.code) {\n                if (!isValid) {\n                    oauth2.errCb({\n                        authId: oauth2.auth.name,\n                        source: \"auth\",\n                        level: \"warning\",\n                        message: \"Authorization may be unsafe, passed state was changed in server. The passed state wasn't returned from auth server.\"\n                    });\n                }\n\n                if (qp.code) {\n                    delete oauth2.state;\n                    oauth2.auth.code = qp.code;\n                    oauth2.callback({auth: oauth2.auth, redirectUrl: redirectUrl});\n                } else {\n                    let oauthErrorMsg;\n                    if (qp.error) {\n                        oauthErrorMsg = \"[\"+qp.error+\"]: \" +\n                            (qp.error_description ? qp.error_description+ \". \" : \"no accessCode received from the server. \") +\n                            (qp.error_uri ? \"More info: \"+qp.error_uri : \"\");\n                    }\n\n                    oauth2.errCb({\n                        authId: oauth2.auth.name,\n                        source: \"auth\",\n                        level: \"error\",\n                        message: oauthErrorMsg || \"[Authorization failed]: no accessCode received from the server.\"\n                    });\n                }\n            } else {\n                oauth2.callback({auth: oauth2.auth, token: qp, isValid: isValid, redirectUrl: redirectUrl});\n            }\n            window.close();\n        }\n\n        if (document.readyState !== 'loading') {\n            run();\n        } else {\n            document.addEventListener('DOMContentLoaded', function () {\n                run();\n            });\n        }\n    &lt;/script&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n        \"\"\"\n    return HTMLResponse(content=html)\n</code></pre>"},{"location":"reference/openapi/docs/#readyapi.openapi.docs.swagger_ui_default_parameters","title":"readyapi.openapi.docs.swagger_ui_default_parameters  <code>module-attribute</code>","text":"<pre><code>swagger_ui_default_parameters = {\n    \"dom_id\": \"#swagger-ui\",\n    \"layout\": \"BaseLayout\",\n    \"deepLinking\": True,\n    \"showExtensions\": True,\n    \"showCommonExtensions\": True,\n}\n</code></pre> <p>Default configurations for Swagger UI.</p> <p>You can use it as a template to add any other configurations needed.</p>"},{"location":"reference/openapi/models/","title":"OpenAPI <code>models</code>","text":"<p>OpenAPI Pydantic models used to generate and validate the generated OpenAPI.</p>"},{"location":"reference/openapi/models/#readyapi.openapi.models","title":"readyapi.openapi.models","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.SchemaOrBool","title":"SchemaOrBool  <code>module-attribute</code>","text":"<pre><code>SchemaOrBool = Union[Schema, bool]\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecurityScheme","title":"SecurityScheme  <code>module-attribute</code>","text":"<pre><code>SecurityScheme = Union[\n    APIKey, HTTPBase, OAuth2, OpenIdConnect, HTTPBearer\n]\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.BaseModelWithConfig","title":"BaseModelWithConfig","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.BaseModelWithConfig.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.BaseModelWithConfig.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.BaseModelWithConfig.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Contact","title":"Contact","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Contact.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Contact.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Contact.url","title":"url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>url = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Contact.email","title":"email  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>email = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Contact.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Contact.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.License","title":"License","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.License.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.License.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.License.identifier","title":"identifier  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>identifier = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.License.url","title":"url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>url = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.License.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.License.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info","title":"Info","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.summary","title":"summary  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>summary = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.termsOfService","title":"termsOfService  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>termsOfService = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.contact","title":"contact  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>contact = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.license","title":"license  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>license = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.version","title":"version  <code>instance-attribute</code>","text":"<pre><code>version\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Info.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ServerVariable","title":"ServerVariable","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ServerVariable.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ServerVariable.enum","title":"enum  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>enum = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ServerVariable.default","title":"default  <code>instance-attribute</code>","text":"<pre><code>default\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ServerVariable.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ServerVariable.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.ServerVariable.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Server","title":"Server","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Server.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Server.url","title":"url  <code>instance-attribute</code>","text":"<pre><code>url\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Server.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Server.variables","title":"variables  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>variables = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Server.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Server.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Reference","title":"Reference","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Reference.ref","title":"ref  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ref = Field(alias='$ref')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Discriminator","title":"Discriminator","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Discriminator.propertyName","title":"propertyName  <code>instance-attribute</code>","text":"<pre><code>propertyName\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Discriminator.mapping","title":"mapping  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>mapping = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.XML","title":"XML","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.XML.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.XML.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.XML.namespace","title":"namespace  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>namespace = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.XML.prefix","title":"prefix  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>prefix = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.XML.attribute","title":"attribute  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>attribute = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.XML.wrapped","title":"wrapped  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>wrapped = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.XML.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.XML.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ExternalDocumentation","title":"ExternalDocumentation","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ExternalDocumentation.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ExternalDocumentation.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ExternalDocumentation.url","title":"url  <code>instance-attribute</code>","text":"<pre><code>url\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ExternalDocumentation.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.ExternalDocumentation.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema","title":"Schema","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.schema_","title":"schema_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>schema_ = Field(default=None, alias='$schema')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.vocabulary","title":"vocabulary  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>vocabulary = Field(default=None, alias='$vocabulary')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.id","title":"id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>id = Field(default=None, alias='$id')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.anchor","title":"anchor  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>anchor = Field(default=None, alias='$anchor')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.dynamicAnchor","title":"dynamicAnchor  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>dynamicAnchor = Field(default=None, alias='$dynamicAnchor')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.ref","title":"ref  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ref = Field(default=None, alias='$ref')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.dynamicRef","title":"dynamicRef  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>dynamicRef = Field(default=None, alias='$dynamicRef')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.defs","title":"defs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>defs = Field(default=None, alias='$defs')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.comment","title":"comment  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>comment = Field(default=None, alias='$comment')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.allOf","title":"allOf  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>allOf = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.anyOf","title":"anyOf  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>anyOf = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.oneOf","title":"oneOf  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>oneOf = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.not_","title":"not_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>not_ = Field(default=None, alias='not')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.if_","title":"if_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>if_ = Field(default=None, alias='if')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.then","title":"then  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>then = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.else_","title":"else_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>else_ = Field(default=None, alias='else')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.dependentSchemas","title":"dependentSchemas  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>dependentSchemas = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.prefixItems","title":"prefixItems  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>prefixItems = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.items","title":"items  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>items = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.contains","title":"contains  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>contains = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.properties","title":"properties  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>properties = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.patternProperties","title":"patternProperties  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>patternProperties = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.additionalProperties","title":"additionalProperties  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>additionalProperties = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.propertyNames","title":"propertyNames  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>propertyNames = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.unevaluatedItems","title":"unevaluatedItems  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>unevaluatedItems = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.unevaluatedProperties","title":"unevaluatedProperties  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>unevaluatedProperties = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.type","title":"type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.enum","title":"enum  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>enum = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.const","title":"const  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>const = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.multipleOf","title":"multipleOf  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>multipleOf = Field(default=None, gt=0)\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.maximum","title":"maximum  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>maximum = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.exclusiveMaximum","title":"exclusiveMaximum  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>exclusiveMaximum = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.minimum","title":"minimum  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>minimum = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.exclusiveMinimum","title":"exclusiveMinimum  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>exclusiveMinimum = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.maxLength","title":"maxLength  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>maxLength = Field(default=None, ge=0)\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.minLength","title":"minLength  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>minLength = Field(default=None, ge=0)\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.pattern","title":"pattern  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>pattern = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.maxItems","title":"maxItems  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>maxItems = Field(default=None, ge=0)\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.minItems","title":"minItems  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>minItems = Field(default=None, ge=0)\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.uniqueItems","title":"uniqueItems  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>uniqueItems = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.maxContains","title":"maxContains  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>maxContains = Field(default=None, ge=0)\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.minContains","title":"minContains  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>minContains = Field(default=None, ge=0)\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.maxProperties","title":"maxProperties  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>maxProperties = Field(default=None, ge=0)\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.minProperties","title":"minProperties  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>minProperties = Field(default=None, ge=0)\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.required","title":"required  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>required = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.dependentRequired","title":"dependentRequired  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>dependentRequired = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.format","title":"format  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>format = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.contentEncoding","title":"contentEncoding  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>contentEncoding = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.contentMediaType","title":"contentMediaType  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>contentMediaType = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.contentSchema","title":"contentSchema  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>contentSchema = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.title","title":"title  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>title = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.default","title":"default  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.deprecated","title":"deprecated  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>deprecated = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.readOnly","title":"readOnly  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>readOnly = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.writeOnly","title":"writeOnly  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>writeOnly = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.examples","title":"examples  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>examples = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.discriminator","title":"discriminator  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>discriminator = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.xml","title":"xml  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>xml = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.externalDocs","title":"externalDocs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>externalDocs = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.example","title":"example  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>example = None\n</code></pre> Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, although still supported. Use examples instead."},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Schema.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Example","title":"Example","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Example.summary","title":"summary  <code>instance-attribute</code>","text":"<pre><code>summary\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Example.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Example.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Example.externalValue","title":"externalValue  <code>instance-attribute</code>","text":"<pre><code>externalValue\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Example.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Example.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterInType","title":"ParameterInType","text":"<p>               Bases: <code>Enum</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterInType.query","title":"query  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>query = 'query'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterInType.header","title":"header  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>header = 'header'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterInType.path","title":"path  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>path = 'path'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterInType.cookie","title":"cookie  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>cookie = 'cookie'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Encoding","title":"Encoding","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Encoding.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Encoding.contentType","title":"contentType  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>contentType = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Encoding.headers","title":"headers  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>headers = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Encoding.style","title":"style  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>style = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Encoding.explode","title":"explode  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>explode = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Encoding.allowReserved","title":"allowReserved  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>allowReserved = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Encoding.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Encoding.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.MediaType","title":"MediaType","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.MediaType.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.MediaType.schema_","title":"schema_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>schema_ = Field(default=None, alias='schema')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.MediaType.example","title":"example  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>example = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.MediaType.examples","title":"examples  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>examples = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.MediaType.encoding","title":"encoding  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>encoding = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.MediaType.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.MediaType.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase","title":"ParameterBase","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.required","title":"required  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>required = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.deprecated","title":"deprecated  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>deprecated = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.style","title":"style  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>style = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.explode","title":"explode  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>explode = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.allowReserved","title":"allowReserved  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>allowReserved = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.schema_","title":"schema_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>schema_ = Field(default=None, alias='schema')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.example","title":"example  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>example = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.examples","title":"examples  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>examples = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.content","title":"content  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>content = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.ParameterBase.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter","title":"Parameter","text":"<p>               Bases: <code>ParameterBase</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.required","title":"required  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>required = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.deprecated","title":"deprecated  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>deprecated = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.style","title":"style  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>style = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.explode","title":"explode  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>explode = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.allowReserved","title":"allowReserved  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>allowReserved = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.schema_","title":"schema_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>schema_ = Field(default=None, alias='schema')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.example","title":"example  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>example = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.examples","title":"examples  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>examples = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.content","title":"content  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>content = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.in_","title":"in_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>in_ = Field(alias='in')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Parameter.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header","title":"Header","text":"<p>               Bases: <code>ParameterBase</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.required","title":"required  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>required = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.deprecated","title":"deprecated  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>deprecated = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.style","title":"style  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>style = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.explode","title":"explode  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>explode = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.allowReserved","title":"allowReserved  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>allowReserved = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.schema_","title":"schema_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>schema_ = Field(default=None, alias='schema')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.example","title":"example  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>example = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.examples","title":"examples  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>examples = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.content","title":"content  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>content = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Header.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.RequestBody","title":"RequestBody","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.RequestBody.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.RequestBody.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.RequestBody.content","title":"content  <code>instance-attribute</code>","text":"<pre><code>content\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.RequestBody.required","title":"required  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>required = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.RequestBody.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.RequestBody.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Link","title":"Link","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Link.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Link.operationRef","title":"operationRef  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>operationRef = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Link.operationId","title":"operationId  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>operationId = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Link.parameters","title":"parameters  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>parameters = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Link.requestBody","title":"requestBody  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>requestBody = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Link.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Link.server","title":"server  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>server = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Link.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Link.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Response","title":"Response","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Response.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Response.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Response.headers","title":"headers  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>headers = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Response.content","title":"content  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>content = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Response.links","title":"links  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>links = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Response.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Response.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation","title":"Operation","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.tags","title":"tags  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tags = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.summary","title":"summary  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>summary = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.externalDocs","title":"externalDocs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>externalDocs = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.operationId","title":"operationId  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>operationId = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.parameters","title":"parameters  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>parameters = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.requestBody","title":"requestBody  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>requestBody = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.responses","title":"responses  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>responses = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.callbacks","title":"callbacks  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>callbacks = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.deprecated","title":"deprecated  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>deprecated = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.security","title":"security  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>security = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.servers","title":"servers  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>servers = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Operation.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem","title":"PathItem","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.ref","title":"ref  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ref = Field(default=None, alias='$ref')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.summary","title":"summary  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>summary = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.get","title":"get  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>get = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.put","title":"put  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>put = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.post","title":"post  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>post = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.delete","title":"delete  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>delete = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.options","title":"options  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>options = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.head","title":"head  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>head = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.patch","title":"patch  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>patch = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.trace","title":"trace  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>trace = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.servers","title":"servers  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>servers = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.parameters","title":"parameters  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>parameters = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.PathItem.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecuritySchemeType","title":"SecuritySchemeType","text":"<p>               Bases: <code>Enum</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecuritySchemeType.apiKey","title":"apiKey  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>apiKey = 'apiKey'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecuritySchemeType.http","title":"http  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>http = 'http'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecuritySchemeType.oauth2","title":"oauth2  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>oauth2 = 'oauth2'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecuritySchemeType.openIdConnect","title":"openIdConnect  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>openIdConnect = 'openIdConnect'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecurityBase","title":"SecurityBase","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecurityBase.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecurityBase.type_","title":"type_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type_ = Field(alias='type')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecurityBase.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.SecurityBase.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.SecurityBase.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKeyIn","title":"APIKeyIn","text":"<p>               Bases: <code>Enum</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKeyIn.query","title":"query  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>query = 'query'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKeyIn.header","title":"header  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>header = 'header'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKeyIn.cookie","title":"cookie  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>cookie = 'cookie'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKey","title":"APIKey","text":"<p>               Bases: <code>SecurityBase</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKey.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKey.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKey.type_","title":"type_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type_ = Field(default=apiKey, alias='type')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKey.in_","title":"in_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>in_ = Field(alias='in')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKey.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKey.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.APIKey.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBase","title":"HTTPBase","text":"<p>               Bases: <code>SecurityBase</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBase.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBase.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBase.type_","title":"type_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type_ = Field(default=http, alias='type')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBase.scheme","title":"scheme  <code>instance-attribute</code>","text":"<pre><code>scheme\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBase.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBase.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBearer","title":"HTTPBearer","text":"<p>               Bases: <code>HTTPBase</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBearer.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBearer.type_","title":"type_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type_ = Field(default=http, alias='type')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBearer.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBearer.scheme","title":"scheme  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>scheme = 'bearer'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBearer.bearerFormat","title":"bearerFormat  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>bearerFormat = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBearer.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.HTTPBearer.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlow","title":"OAuthFlow","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlow.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlow.refreshUrl","title":"refreshUrl  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>refreshUrl = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlow.scopes","title":"scopes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>scopes = {}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlow.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlow.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowImplicit","title":"OAuthFlowImplicit","text":"<p>               Bases: <code>OAuthFlow</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowImplicit.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowImplicit.refreshUrl","title":"refreshUrl  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>refreshUrl = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowImplicit.scopes","title":"scopes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>scopes = {}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowImplicit.authorizationUrl","title":"authorizationUrl  <code>instance-attribute</code>","text":"<pre><code>authorizationUrl\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowImplicit.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowImplicit.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowPassword","title":"OAuthFlowPassword","text":"<p>               Bases: <code>OAuthFlow</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowPassword.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowPassword.refreshUrl","title":"refreshUrl  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>refreshUrl = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowPassword.scopes","title":"scopes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>scopes = {}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowPassword.tokenUrl","title":"tokenUrl  <code>instance-attribute</code>","text":"<pre><code>tokenUrl\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowPassword.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowPassword.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowClientCredentials","title":"OAuthFlowClientCredentials","text":"<p>               Bases: <code>OAuthFlow</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowClientCredentials.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowClientCredentials.refreshUrl","title":"refreshUrl  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>refreshUrl = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowClientCredentials.scopes","title":"scopes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>scopes = {}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowClientCredentials.tokenUrl","title":"tokenUrl  <code>instance-attribute</code>","text":"<pre><code>tokenUrl\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowClientCredentials.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowClientCredentials.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowAuthorizationCode","title":"OAuthFlowAuthorizationCode","text":"<p>               Bases: <code>OAuthFlow</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowAuthorizationCode.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowAuthorizationCode.refreshUrl","title":"refreshUrl  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>refreshUrl = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowAuthorizationCode.scopes","title":"scopes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>scopes = {}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowAuthorizationCode.authorizationUrl","title":"authorizationUrl  <code>instance-attribute</code>","text":"<pre><code>authorizationUrl\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowAuthorizationCode.tokenUrl","title":"tokenUrl  <code>instance-attribute</code>","text":"<pre><code>tokenUrl\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowAuthorizationCode.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlowAuthorizationCode.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlows","title":"OAuthFlows","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlows.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlows.implicit","title":"implicit  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>implicit = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlows.password","title":"password  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>password = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlows.clientCredentials","title":"clientCredentials  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>clientCredentials = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlows.authorizationCode","title":"authorizationCode  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>authorizationCode = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlows.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuthFlows.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuth2","title":"OAuth2","text":"<p>               Bases: <code>SecurityBase</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuth2.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuth2.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuth2.type_","title":"type_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type_ = Field(default=oauth2, alias='type')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuth2.flows","title":"flows  <code>instance-attribute</code>","text":"<pre><code>flows\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuth2.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.OAuth2.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenIdConnect","title":"OpenIdConnect","text":"<p>               Bases: <code>SecurityBase</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenIdConnect.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenIdConnect.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenIdConnect.type_","title":"type_  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type_ = Field(default=openIdConnect, alias='type')\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenIdConnect.openIdConnectUrl","title":"openIdConnectUrl  <code>instance-attribute</code>","text":"<pre><code>openIdConnectUrl\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenIdConnect.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenIdConnect.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components","title":"Components","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.schemas","title":"schemas  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>schemas = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.responses","title":"responses  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>responses = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.parameters","title":"parameters  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>parameters = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.examples","title":"examples  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>examples = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.requestBodies","title":"requestBodies  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>requestBodies = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.headers","title":"headers  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>headers = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.securitySchemes","title":"securitySchemes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>securitySchemes = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.links","title":"links  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>links = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.callbacks","title":"callbacks  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>callbacks = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.pathItems","title":"pathItems  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>pathItems = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Components.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Tag","title":"Tag","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Tag.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Tag.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Tag.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Tag.externalDocs","title":"externalDocs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>externalDocs = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.Tag.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.Tag.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI","title":"OpenAPI","text":"<p>               Bases: <code>BaseModelWithConfig</code></p>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = {'extra': 'allow'}\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.openapi","title":"openapi  <code>instance-attribute</code>","text":"<pre><code>openapi\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.info","title":"info  <code>instance-attribute</code>","text":"<pre><code>info\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.jsonSchemaDialect","title":"jsonSchemaDialect  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>jsonSchemaDialect = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.servers","title":"servers  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>servers = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.paths","title":"paths  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>paths = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.webhooks","title":"webhooks  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>webhooks = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.components","title":"components  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>components = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.security","title":"security  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>security = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.tags","title":"tags  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tags = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.externalDocs","title":"externalDocs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>externalDocs = None\n</code></pre>"},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.Config","title":"Config","text":""},{"location":"reference/openapi/models/#readyapi.openapi.models.OpenAPI.Config.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra = 'allow'\n</code></pre>"},{"location":"reference/security/","title":"Security Tools","text":"<p>When you need to declare dependencies with OAuth2 scopes you use <code>Security()</code>.</p> <p>But you still need to define what is the dependable, the callable that you pass as a parameter to <code>Depends()</code> or <code>Security()</code>.</p> <p>There are multiple tools that you can use to create those dependables, and they get integrated into OpenAPI so they are shown in the automatic docs UI, they can be used by automatically generated clients and SDKs, etc.</p> <p>You can import them from <code>readyapi.security</code>:</p> <pre><code>from readyapi.security import (\n    APIKeyCookie,\n    APIKeyHeader,\n    APIKeyQuery,\n    HTTPAuthorizationCredentials,\n    HTTPBasic,\n    HTTPBasicCredentials,\n    HTTPBearer,\n    HTTPDigest,\n    OAuth2,\n    OAuth2AuthorizationCodeBearer,\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    OAuth2PasswordRequestFormStrict,\n    OpenIdConnect,\n    SecurityScopes,\n)\n</code></pre>"},{"location":"reference/security/#api-key-security-schemes","title":"API Key Security Schemes","text":""},{"location":"reference/security/#readyapi.security.APIKeyCookie","title":"readyapi.security.APIKeyCookie","text":"<pre><code>APIKeyCookie(\n    *,\n    name,\n    scheme_name=None,\n    description=None,\n    auto_error=True\n)\n</code></pre> <p>               Bases: <code>APIKeyBase</code></p> <p>API key authentication using a cookie.</p> <p>This defines the name of the cookie that should be provided in the request with the API key and integrates that into the OpenAPI documentation. It extracts the key value sent in the cookie automatically and provides it as the dependency result. But it doesn't define how to set that cookie.</p>"},{"location":"reference/security/#readyapi.security.APIKeyCookie--usage","title":"Usage","text":"<p>Create an instance object and use that object as the dependency in <code>Depends()</code>.</p> <p>The dependency result will be a string containing the key value.</p>"},{"location":"reference/security/#readyapi.security.APIKeyCookie--example","title":"Example","text":"<pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import APIKeyCookie\n\napp = ReadyAPI()\n\ncookie_scheme = APIKeyCookie(name=\"session\")\n\n\n@app.get(\"/items/\")\nasync def read_items(session: str = Depends(cookie_scheme)):\n    return {\"session\": session}\n</code></pre> PARAMETER DESCRIPTION <code>name</code> <p>Cookie name.</p> <p> TYPE: <code>str</code> </p> <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if the cookie is not provided, <code>APIKeyCookie</code> will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the cookie is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, in a cookie or in an HTTP Bearer token).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/api_key.py</code> <pre><code>def __init__(\n    self,\n    *,\n    name: Annotated[str, Doc(\"Cookie name.\")],\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if the cookie is not provided, `APIKeyCookie` will\n            automatically cancel the request and send the client an error.\n\n            If `auto_error` is set to `False`, when the cookie is not available,\n            instead of erroring out, the dependency result will be `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, in a cookie or\n            in an HTTP Bearer token).\n            \"\"\"\n        ),\n    ] = True,\n):\n    self.model: APIKey = APIKey(\n        **{\"in\": APIKeyIn.cookie},  # type: ignore[arg-type]\n        name=name,\n        description=description,\n    )\n    self.scheme_name = scheme_name or self.__class__.__name__\n    self.auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyCookie.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = APIKey(\n    **{\"in\": cookie}, name=name, description=description\n)\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyCookie.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyCookie.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyCookie.check_api_key","title":"check_api_key  <code>staticmethod</code>","text":"<pre><code>check_api_key(api_key, auto_error)\n</code></pre> PARAMETER DESCRIPTION <code>api_key</code> <p> TYPE: <code>Optional[str]</code> </p> <code>auto_error</code> <p> TYPE: <code>bool</code> </p> Source code in <code>readyapi/security/api_key.py</code> <pre><code>@staticmethod\ndef check_api_key(api_key: Optional[str], auto_error: bool) -&gt; Optional[str]:\n    if not api_key:\n        if auto_error:\n            raise HTTPException(\n                status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n            )\n        return None\n    return api_key\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyHeader","title":"readyapi.security.APIKeyHeader","text":"<pre><code>APIKeyHeader(\n    *,\n    name,\n    scheme_name=None,\n    description=None,\n    auto_error=True\n)\n</code></pre> <p>               Bases: <code>APIKeyBase</code></p> <p>API key authentication using a header.</p> <p>This defines the name of the header that should be provided in the request with the API key and integrates that into the OpenAPI documentation. It extracts the key value sent in the header automatically and provides it as the dependency result. But it doesn't define how to send that key to the client.</p>"},{"location":"reference/security/#readyapi.security.APIKeyHeader--usage","title":"Usage","text":"<p>Create an instance object and use that object as the dependency in <code>Depends()</code>.</p> <p>The dependency result will be a string containing the key value.</p>"},{"location":"reference/security/#readyapi.security.APIKeyHeader--example","title":"Example","text":"<pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import APIKeyHeader\n\napp = ReadyAPI()\n\nheader_scheme = APIKeyHeader(name=\"x-key\")\n\n\n@app.get(\"/items/\")\nasync def read_items(key: str = Depends(header_scheme)):\n    return {\"key\": key}\n</code></pre> PARAMETER DESCRIPTION <code>name</code> <p>Header name.</p> <p> TYPE: <code>str</code> </p> <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if the header is not provided, <code>APIKeyHeader</code> will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the header is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, in a header or in an HTTP Bearer token).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/api_key.py</code> <pre><code>def __init__(\n    self,\n    *,\n    name: Annotated[str, Doc(\"Header name.\")],\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if the header is not provided, `APIKeyHeader` will\n            automatically cancel the request and send the client an error.\n\n            If `auto_error` is set to `False`, when the header is not available,\n            instead of erroring out, the dependency result will be `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, in a header or\n            in an HTTP Bearer token).\n            \"\"\"\n        ),\n    ] = True,\n):\n    self.model: APIKey = APIKey(\n        **{\"in\": APIKeyIn.header},  # type: ignore[arg-type]\n        name=name,\n        description=description,\n    )\n    self.scheme_name = scheme_name or self.__class__.__name__\n    self.auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyHeader.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = APIKey(\n    **{\"in\": header}, name=name, description=description\n)\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyHeader.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyHeader.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyHeader.check_api_key","title":"check_api_key  <code>staticmethod</code>","text":"<pre><code>check_api_key(api_key, auto_error)\n</code></pre> PARAMETER DESCRIPTION <code>api_key</code> <p> TYPE: <code>Optional[str]</code> </p> <code>auto_error</code> <p> TYPE: <code>bool</code> </p> Source code in <code>readyapi/security/api_key.py</code> <pre><code>@staticmethod\ndef check_api_key(api_key: Optional[str], auto_error: bool) -&gt; Optional[str]:\n    if not api_key:\n        if auto_error:\n            raise HTTPException(\n                status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n            )\n        return None\n    return api_key\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyQuery","title":"readyapi.security.APIKeyQuery","text":"<pre><code>APIKeyQuery(\n    *,\n    name,\n    scheme_name=None,\n    description=None,\n    auto_error=True\n)\n</code></pre> <p>               Bases: <code>APIKeyBase</code></p> <p>API key authentication using a query parameter.</p> <p>This defines the name of the query parameter that should be provided in the request with the API key and integrates that into the OpenAPI documentation. It extracts the key value sent in the query parameter automatically and provides it as the dependency result. But it doesn't define how to send that API key to the client.</p>"},{"location":"reference/security/#readyapi.security.APIKeyQuery--usage","title":"Usage","text":"<p>Create an instance object and use that object as the dependency in <code>Depends()</code>.</p> <p>The dependency result will be a string containing the key value.</p>"},{"location":"reference/security/#readyapi.security.APIKeyQuery--example","title":"Example","text":"<pre><code>from readyapi import Depends, ReadyAPI\nfrom readyapi.security import APIKeyQuery\n\napp = ReadyAPI()\n\nquery_scheme = APIKeyQuery(name=\"api_key\")\n\n\n@app.get(\"/items/\")\nasync def read_items(api_key: str = Depends(query_scheme)):\n    return {\"api_key\": api_key}\n</code></pre> PARAMETER DESCRIPTION <code>name</code> <p>Query parameter name.</p> <p> TYPE: <code>str</code> </p> <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if the query parameter is not provided, <code>APIKeyQuery</code> will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the query parameter is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, in a query parameter or in an HTTP Bearer token).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/api_key.py</code> <pre><code>def __init__(\n    self,\n    *,\n    name: Annotated[\n        str,\n        Doc(\"Query parameter name.\"),\n    ],\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if the query parameter is not provided, `APIKeyQuery` will\n            automatically cancel the request and send the client an error.\n\n            If `auto_error` is set to `False`, when the query parameter is not\n            available, instead of erroring out, the dependency result will be\n            `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, in a query\n            parameter or in an HTTP Bearer token).\n            \"\"\"\n        ),\n    ] = True,\n):\n    self.model: APIKey = APIKey(\n        **{\"in\": APIKeyIn.query},  # type: ignore[arg-type]\n        name=name,\n        description=description,\n    )\n    self.scheme_name = scheme_name or self.__class__.__name__\n    self.auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyQuery.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = APIKey(\n    **{\"in\": query}, name=name, description=description\n)\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyQuery.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyQuery.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.APIKeyQuery.check_api_key","title":"check_api_key  <code>staticmethod</code>","text":"<pre><code>check_api_key(api_key, auto_error)\n</code></pre> PARAMETER DESCRIPTION <code>api_key</code> <p> TYPE: <code>Optional[str]</code> </p> <code>auto_error</code> <p> TYPE: <code>bool</code> </p> Source code in <code>readyapi/security/api_key.py</code> <pre><code>@staticmethod\ndef check_api_key(api_key: Optional[str], auto_error: bool) -&gt; Optional[str]:\n    if not api_key:\n        if auto_error:\n            raise HTTPException(\n                status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n            )\n        return None\n    return api_key\n</code></pre>"},{"location":"reference/security/#http-authentication-schemes","title":"HTTP Authentication Schemes","text":""},{"location":"reference/security/#readyapi.security.HTTPBasic","title":"readyapi.security.HTTPBasic","text":"<pre><code>HTTPBasic(\n    *,\n    scheme_name=None,\n    realm=None,\n    description=None,\n    auto_error=True\n)\n</code></pre> <p>               Bases: <code>HTTPBase</code></p> <p>HTTP Basic authentication.</p>"},{"location":"reference/security/#readyapi.security.HTTPBasic--usage","title":"Usage","text":"<p>Create an instance object and use that object as the dependency in <code>Depends()</code>.</p> <p>The dependency result will be an <code>HTTPBasicCredentials</code> object containing the <code>username</code> and the <code>password</code>.</p> <p>Read more about it in the ReadyAPI docs for HTTP Basic Auth.</p>"},{"location":"reference/security/#readyapi.security.HTTPBasic--example","title":"Example","text":"<pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import HTTPBasic, HTTPBasicCredentials\n\napp = ReadyAPI()\n\nsecurity = HTTPBasic()\n\n\n@app.get(\"/users/me\")\ndef read_current_user(credentials: Annotated[HTTPBasicCredentials, Depends(security)]):\n    return {\"username\": credentials.username, \"password\": credentials.password}\n</code></pre> PARAMETER DESCRIPTION <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>realm</code> <p>HTTP Basic authentication realm.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if the HTTP Basic authentication is not provided (a header), <code>HTTPBasic</code> will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the HTTP Basic authentication is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, in HTTP Basic authentication or in an HTTP Bearer token).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/http.py</code> <pre><code>def __init__(\n    self,\n    *,\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    realm: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            HTTP Basic authentication realm.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if the HTTP Basic authentication is not provided (a\n            header), `HTTPBasic` will automatically cancel the request and send the\n            client an error.\n\n            If `auto_error` is set to `False`, when the HTTP Basic authentication\n            is not available, instead of erroring out, the dependency result will\n            be `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, in HTTP Basic\n            authentication or in an HTTP Bearer token).\n            \"\"\"\n        ),\n    ] = True,\n):\n    self.model = HTTPBaseModel(scheme=\"basic\", description=description)\n    self.scheme_name = scheme_name or self.__class__.__name__\n    self.realm = realm\n    self.auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPBasic.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = HTTPBase(scheme='basic', description=description)\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPBasic.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPBasic.realm","title":"realm  <code>instance-attribute</code>","text":"<pre><code>realm = realm\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPBasic.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPBearer","title":"readyapi.security.HTTPBearer","text":"<pre><code>HTTPBearer(\n    *,\n    bearerFormat=None,\n    scheme_name=None,\n    description=None,\n    auto_error=True\n)\n</code></pre> <p>               Bases: <code>HTTPBase</code></p> <p>HTTP Bearer token authentication.</p>"},{"location":"reference/security/#readyapi.security.HTTPBearer--usage","title":"Usage","text":"<p>Create an instance object and use that object as the dependency in <code>Depends()</code>.</p> <p>The dependency result will be an <code>HTTPAuthorizationCredentials</code> object containing the <code>scheme</code> and the <code>credentials</code>.</p>"},{"location":"reference/security/#readyapi.security.HTTPBearer--example","title":"Example","text":"<pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import HTTPAuthorizationCredentials, HTTPBearer\n\napp = ReadyAPI()\n\nsecurity = HTTPBearer()\n\n\n@app.get(\"/users/me\")\ndef read_current_user(\n    credentials: Annotated[HTTPAuthorizationCredentials, Depends(security)]\n):\n    return {\"scheme\": credentials.scheme, \"credentials\": credentials.credentials}\n</code></pre> PARAMETER DESCRIPTION <code>bearerFormat</code> <p>Bearer token format.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if the HTTP Bearer token is not provided (in an <code>Authorization</code> header), <code>HTTPBearer</code> will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the HTTP Bearer token is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, in an HTTP Bearer token or in a cookie).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/http.py</code> <pre><code>def __init__(\n    self,\n    *,\n    bearerFormat: Annotated[Optional[str], Doc(\"Bearer token format.\")] = None,\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if the HTTP Bearer token is not provided (in an\n            `Authorization` header), `HTTPBearer` will automatically cancel the\n            request and send the client an error.\n\n            If `auto_error` is set to `False`, when the HTTP Bearer token\n            is not available, instead of erroring out, the dependency result will\n            be `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, in an HTTP\n            Bearer token or in a cookie).\n            \"\"\"\n        ),\n    ] = True,\n):\n    self.model = HTTPBearerModel(bearerFormat=bearerFormat, description=description)\n    self.scheme_name = scheme_name or self.__class__.__name__\n    self.auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPBearer.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = HTTPBearer(\n    bearerFormat=bearerFormat, description=description\n)\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPBearer.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPBearer.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPDigest","title":"readyapi.security.HTTPDigest","text":"<pre><code>HTTPDigest(\n    *, scheme_name=None, description=None, auto_error=True\n)\n</code></pre> <p>               Bases: <code>HTTPBase</code></p> <p>HTTP Digest authentication.</p>"},{"location":"reference/security/#readyapi.security.HTTPDigest--usage","title":"Usage","text":"<p>Create an instance object and use that object as the dependency in <code>Depends()</code>.</p> <p>The dependency result will be an <code>HTTPAuthorizationCredentials</code> object containing the <code>scheme</code> and the <code>credentials</code>.</p>"},{"location":"reference/security/#readyapi.security.HTTPDigest--example","title":"Example","text":"<pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import HTTPAuthorizationCredentials, HTTPDigest\n\napp = ReadyAPI()\n\nsecurity = HTTPDigest()\n\n\n@app.get(\"/users/me\")\ndef read_current_user(\n    credentials: Annotated[HTTPAuthorizationCredentials, Depends(security)]\n):\n    return {\"scheme\": credentials.scheme, \"credentials\": credentials.credentials}\n</code></pre> PARAMETER DESCRIPTION <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if the HTTP Digest is not provided, <code>HTTPDigest</code> will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the HTTP Digest is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, in HTTP Digest or in a cookie).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/http.py</code> <pre><code>def __init__(\n    self,\n    *,\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if the HTTP Digest is not provided, `HTTPDigest` will\n            automatically cancel the request and send the client an error.\n\n            If `auto_error` is set to `False`, when the HTTP Digest is not\n            available, instead of erroring out, the dependency result will\n            be `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, in HTTP\n            Digest or in a cookie).\n            \"\"\"\n        ),\n    ] = True,\n):\n    self.model = HTTPBaseModel(scheme=\"digest\", description=description)\n    self.scheme_name = scheme_name or self.__class__.__name__\n    self.auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPDigest.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = HTTPBase(scheme='digest', description=description)\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPDigest.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.HTTPDigest.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#http-credentials","title":"HTTP Credentials","text":""},{"location":"reference/security/#readyapi.security.HTTPAuthorizationCredentials","title":"readyapi.security.HTTPAuthorizationCredentials","text":"<p>               Bases: <code>BaseModel</code></p> <p>The HTTP authorization credentials in the result of using <code>HTTPBearer</code> or <code>HTTPDigest</code> in a dependency.</p> <p>The HTTP authorization header value is split by the first space.</p> <p>The first part is the <code>scheme</code>, the second part is the <code>credentials</code>.</p> <p>For example, in an HTTP Bearer token scheme, the client will send a header like:</p> <pre><code>Authorization: Bearer deadbeef12346\n</code></pre> <p>In this case:</p> <ul> <li><code>scheme</code> will have the value <code>\"Bearer\"</code></li> <li><code>credentials</code> will have the value <code>\"deadbeef12346\"</code></li> </ul>"},{"location":"reference/security/#readyapi.security.HTTPAuthorizationCredentials.scheme","title":"scheme  <code>instance-attribute</code>","text":"<pre><code>scheme\n</code></pre> <p>The HTTP authorization scheme extracted from the header value.</p>"},{"location":"reference/security/#readyapi.security.HTTPAuthorizationCredentials.credentials","title":"credentials  <code>instance-attribute</code>","text":"<pre><code>credentials\n</code></pre> <p>The HTTP authorization credentials extracted from the header value.</p>"},{"location":"reference/security/#readyapi.security.HTTPBasicCredentials","title":"readyapi.security.HTTPBasicCredentials","text":"<p>               Bases: <code>BaseModel</code></p> <p>The HTTP Basic credentials given as the result of using <code>HTTPBasic</code> in a dependency.</p> <p>Read more about it in the ReadyAPI docs for HTTP Basic Auth.</p>"},{"location":"reference/security/#readyapi.security.HTTPBasicCredentials.username","title":"username  <code>instance-attribute</code>","text":"<pre><code>username\n</code></pre> <p>The HTTP Basic username.</p>"},{"location":"reference/security/#readyapi.security.HTTPBasicCredentials.password","title":"password  <code>instance-attribute</code>","text":"<pre><code>password\n</code></pre> <p>The HTTP Basic password.</p>"},{"location":"reference/security/#oauth2-authentication","title":"OAuth2 Authentication","text":""},{"location":"reference/security/#readyapi.security.OAuth2","title":"readyapi.security.OAuth2","text":"<pre><code>OAuth2(\n    *,\n    flows=OAuthFlows(),\n    scheme_name=None,\n    description=None,\n    auto_error=True\n)\n</code></pre> <p>               Bases: <code>SecurityBase</code></p> <p>This is the base class for OAuth2 authentication, an instance of it would be used as a dependency. All other OAuth2 classes inherit from it and customize it for each OAuth2 flow.</p> <p>You normally would not create a new class inheriting from it but use one of the existing subclasses, and maybe compose them if you want to support multiple flows.</p> <p>Read more about it in the ReadyAPI docs for Security.</p> PARAMETER DESCRIPTION <code>flows</code> <p>The dictionary of OAuth2 flows.</p> <p> TYPE: <code>Union[OAuthFlows, Dict[str, Dict[str, Any]]]</code> DEFAULT: <code>OAuthFlows()</code> </p> <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if no HTTP Authorization header is provided, required for OAuth2 authentication, it will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the HTTP Authorization header is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, with OAuth2 or in a cookie).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/oauth2.py</code> <pre><code>def __init__(\n    self,\n    *,\n    flows: Annotated[\n        Union[OAuthFlowsModel, Dict[str, Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            The dictionary of OAuth2 flows.\n            \"\"\"\n        ),\n    ] = OAuthFlowsModel(),\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if no HTTP Authorization header is provided, required for\n            OAuth2 authentication, it will automatically cancel the request and\n            send the client an error.\n\n            If `auto_error` is set to `False`, when the HTTP Authorization header\n            is not available, instead of erroring out, the dependency result will\n            be `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, with OAuth2\n            or in a cookie).\n            \"\"\"\n        ),\n    ] = True,\n):\n    self.model = OAuth2Model(\n        flows=cast(OAuthFlowsModel, flows), description=description\n    )\n    self.scheme_name = scheme_name or self.__class__.__name__\n    self.auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = OAuth2(\n    flows=cast(OAuthFlows, flows), description=description\n)\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2AuthorizationCodeBearer","title":"readyapi.security.OAuth2AuthorizationCodeBearer","text":"<pre><code>OAuth2AuthorizationCodeBearer(\n    authorizationUrl,\n    tokenUrl,\n    refreshUrl=None,\n    scheme_name=None,\n    scopes=None,\n    description=None,\n    auto_error=True,\n)\n</code></pre> <p>               Bases: <code>OAuth2</code></p> <p>OAuth2 flow for authentication using a bearer token obtained with an OAuth2 code flow. An instance of it would be used as a dependency.</p> PARAMETER DESCRIPTION <code>authorizationUrl</code> <p> TYPE: <code>str</code> </p> <code>tokenUrl</code> <p>The URL to obtain the OAuth2 token.</p> <p> TYPE: <code>str</code> </p> <code>refreshUrl</code> <p>The URL to refresh the token and obtain a new one.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>scopes</code> <p>The OAuth2 scopes that would be required by the path operations that use this dependency.</p> <p> TYPE: <code>Optional[Dict[str, str]]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if no HTTP Authorization header is provided, required for OAuth2 authentication, it will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the HTTP Authorization header is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, with OAuth2 or in a cookie).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/oauth2.py</code> <pre><code>def __init__(\n    self,\n    authorizationUrl: str,\n    tokenUrl: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL to obtain the OAuth2 token.\n            \"\"\"\n        ),\n    ],\n    refreshUrl: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            The URL to refresh the token and obtain a new one.\n            \"\"\"\n        ),\n    ] = None,\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    scopes: Annotated[\n        Optional[Dict[str, str]],\n        Doc(\n            \"\"\"\n            The OAuth2 scopes that would be required by the *path operations* that\n            use this dependency.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if no HTTP Authorization header is provided, required for\n            OAuth2 authentication, it will automatically cancel the request and\n            send the client an error.\n\n            If `auto_error` is set to `False`, when the HTTP Authorization header\n            is not available, instead of erroring out, the dependency result will\n            be `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, with OAuth2\n            or in a cookie).\n            \"\"\"\n        ),\n    ] = True,\n):\n    if not scopes:\n        scopes = {}\n    flows = OAuthFlowsModel(\n        authorizationCode=cast(\n            Any,\n            {\n                \"authorizationUrl\": authorizationUrl,\n                \"tokenUrl\": tokenUrl,\n                \"refreshUrl\": refreshUrl,\n                \"scopes\": scopes,\n            },\n        )\n    )\n    super().__init__(\n        flows=flows,\n        scheme_name=scheme_name,\n        description=description,\n        auto_error=auto_error,\n    )\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2AuthorizationCodeBearer.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = OAuth2(\n    flows=cast(OAuthFlows, flows), description=description\n)\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2AuthorizationCodeBearer.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2AuthorizationCodeBearer.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordBearer","title":"readyapi.security.OAuth2PasswordBearer","text":"<pre><code>OAuth2PasswordBearer(\n    tokenUrl,\n    scheme_name=None,\n    scopes=None,\n    description=None,\n    auto_error=True,\n)\n</code></pre> <p>               Bases: <code>OAuth2</code></p> <p>OAuth2 flow for authentication using a bearer token obtained with a password. An instance of it would be used as a dependency.</p> <p>Read more about it in the ReadyAPI docs for Simple OAuth2 with Password and Bearer.</p> PARAMETER DESCRIPTION <code>tokenUrl</code> <p>The URL to obtain the OAuth2 token. This would be the path operation that has <code>OAuth2PasswordRequestForm</code> as a dependency.</p> <p> TYPE: <code>str</code> </p> <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>scopes</code> <p>The OAuth2 scopes that would be required by the path operations that use this dependency.</p> <p> TYPE: <code>Optional[Dict[str, str]]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if no HTTP Authorization header is provided, required for OAuth2 authentication, it will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the HTTP Authorization header is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, with OAuth2 or in a cookie).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/oauth2.py</code> <pre><code>def __init__(\n    self,\n    tokenUrl: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL to obtain the OAuth2 token. This would be the *path operation*\n            that has `OAuth2PasswordRequestForm` as a dependency.\n            \"\"\"\n        ),\n    ],\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    scopes: Annotated[\n        Optional[Dict[str, str]],\n        Doc(\n            \"\"\"\n            The OAuth2 scopes that would be required by the *path operations* that\n            use this dependency.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if no HTTP Authorization header is provided, required for\n            OAuth2 authentication, it will automatically cancel the request and\n            send the client an error.\n\n            If `auto_error` is set to `False`, when the HTTP Authorization header\n            is not available, instead of erroring out, the dependency result will\n            be `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, with OAuth2\n            or in a cookie).\n            \"\"\"\n        ),\n    ] = True,\n):\n    if not scopes:\n        scopes = {}\n    flows = OAuthFlowsModel(\n        password=cast(Any, {\"tokenUrl\": tokenUrl, \"scopes\": scopes})\n    )\n    super().__init__(\n        flows=flows,\n        scheme_name=scheme_name,\n        description=description,\n        auto_error=auto_error,\n    )\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordBearer.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = OAuth2(\n    flows=cast(OAuthFlows, flows), description=description\n)\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordBearer.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordBearer.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#oauth2-password-form","title":"OAuth2 Password Form","text":""},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestForm","title":"readyapi.security.OAuth2PasswordRequestForm","text":"<pre><code>OAuth2PasswordRequestForm(\n    *,\n    grant_type=None,\n    username,\n    password,\n    scope=\"\",\n    client_id=None,\n    client_secret=None\n)\n</code></pre> <p>This is a dependency class to collect the <code>username</code> and <code>password</code> as form data for an OAuth2 password flow.</p> <p>The OAuth2 specification dictates that for a password flow the data should be collected using form data (instead of JSON) and that it should have the specific fields <code>username</code> and <code>password</code>.</p> <p>All the initialization parameters are extracted from the request.</p> <p>Read more about it in the ReadyAPI docs for Simple OAuth2 with Password and Bearer.</p>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestForm--example","title":"Example","text":"<pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordRequestForm\n\napp = ReadyAPI()\n\n\n@app.post(\"/login\")\ndef login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    data = {}\n    data[\"scopes\"] = []\n    for scope in form_data.scopes:\n        data[\"scopes\"].append(scope)\n    if form_data.client_id:\n        data[\"client_id\"] = form_data.client_id\n    if form_data.client_secret:\n        data[\"client_secret\"] = form_data.client_secret\n    return data\n</code></pre> <p>Note that for OAuth2 the scope <code>items:read</code> is a single scope in an opaque string. You could have custom internal logic to separate it by colon characters (<code>:</code>) or similar, and get the two parts <code>items</code> and <code>read</code>. Many applications do that to group and organize permissions, you could do it as well in your application, just know that that it is application specific, it's not part of the specification.</p> PARAMETER DESCRIPTION <code>grant_type</code> <p>The OAuth2 spec says it is required and MUST be the fixed string \"password\". Nevertheless, this dependency class is permissive and allows not passing it. If you want to enforce it, use instead the <code>OAuth2PasswordRequestFormStrict</code> dependency.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>username</code> <p><code>username</code> string. The OAuth2 spec requires the exact field name <code>username</code>.</p> <p> TYPE: <code>str</code> </p> <code>password</code> <p><code>password</code> string. The OAuth2 spec requires the exact field name `password\".</p> <p> TYPE: <code>str</code> </p> <code>scope</code> <p>A single string with actually several scopes separated by spaces. Each scope is also a string.</p> <p>For example, a single string with:</p> <p>```python \"items:read items:write users:read profile openid\" ````</p> <p>would represent the scopes:</p> <ul> <li><code>items:read</code></li> <li><code>items:write</code></li> <li><code>users:read</code></li> <li><code>profile</code></li> <li><code>openid</code></li> </ul> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>client_id</code> <p>If there's a <code>client_id</code>, it can be sent as part of the form fields. But the OAuth2 specification recommends sending the <code>client_id</code> and <code>client_secret</code> (if any) using HTTP Basic auth.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>client_secret</code> <p>If there's a <code>client_password</code> (and a <code>client_id</code>), they can be sent as part of the form fields. But the OAuth2 specification recommends sending the <code>client_id</code> and <code>client_secret</code> (if any) using HTTP Basic auth.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> Source code in <code>readyapi/security/oauth2.py</code> <pre><code>def __init__(\n    self,\n    *,\n    grant_type: Annotated[\n        Union[str, None],\n        Form(pattern=\"^password$\"),\n        Doc(\n            \"\"\"\n            The OAuth2 spec says it is required and MUST be the fixed string\n            \"password\". Nevertheless, this dependency class is permissive and\n            allows not passing it. If you want to enforce it, use instead the\n            `OAuth2PasswordRequestFormStrict` dependency.\n            \"\"\"\n        ),\n    ] = None,\n    username: Annotated[\n        str,\n        Form(),\n        Doc(\n            \"\"\"\n            `username` string. The OAuth2 spec requires the exact field name\n            `username`.\n            \"\"\"\n        ),\n    ],\n    password: Annotated[\n        str,\n        Form(),\n        Doc(\n            \"\"\"\n            `password` string. The OAuth2 spec requires the exact field name\n            `password\".\n            \"\"\"\n        ),\n    ],\n    scope: Annotated[\n        str,\n        Form(),\n        Doc(\n            \"\"\"\n            A single string with actually several scopes separated by spaces. Each\n            scope is also a string.\n\n            For example, a single string with:\n\n            ```python\n            \"items:read items:write users:read profile openid\"\n            ````\n\n            would represent the scopes:\n\n            * `items:read`\n            * `items:write`\n            * `users:read`\n            * `profile`\n            * `openid`\n            \"\"\"\n        ),\n    ] = \"\",\n    client_id: Annotated[\n        Union[str, None],\n        Form(),\n        Doc(\n            \"\"\"\n            If there's a `client_id`, it can be sent as part of the form fields.\n            But the OAuth2 specification recommends sending the `client_id` and\n            `client_secret` (if any) using HTTP Basic auth.\n            \"\"\"\n        ),\n    ] = None,\n    client_secret: Annotated[\n        Union[str, None],\n        Form(),\n        Doc(\n            \"\"\"\n            If there's a `client_password` (and a `client_id`), they can be sent\n            as part of the form fields. But the OAuth2 specification recommends\n            sending the `client_id` and `client_secret` (if any) using HTTP Basic\n            auth.\n            \"\"\"\n        ),\n    ] = None,\n):\n    self.grant_type = grant_type\n    self.username = username\n    self.password = password\n    self.scopes = scope.split()\n    self.client_id = client_id\n    self.client_secret = client_secret\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestForm.grant_type","title":"grant_type  <code>instance-attribute</code>","text":"<pre><code>grant_type = grant_type\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestForm.username","title":"username  <code>instance-attribute</code>","text":"<pre><code>username = username\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestForm.password","title":"password  <code>instance-attribute</code>","text":"<pre><code>password = password\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestForm.scopes","title":"scopes  <code>instance-attribute</code>","text":"<pre><code>scopes = split()\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestForm.client_id","title":"client_id  <code>instance-attribute</code>","text":"<pre><code>client_id = client_id\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestForm.client_secret","title":"client_secret  <code>instance-attribute</code>","text":"<pre><code>client_secret = client_secret\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestFormStrict","title":"readyapi.security.OAuth2PasswordRequestFormStrict","text":"<pre><code>OAuth2PasswordRequestFormStrict(\n    grant_type,\n    username,\n    password,\n    scope=\"\",\n    client_id=None,\n    client_secret=None,\n)\n</code></pre> <p>               Bases: <code>OAuth2PasswordRequestForm</code></p> <p>This is a dependency class to collect the <code>username</code> and <code>password</code> as form data for an OAuth2 password flow.</p> <p>The OAuth2 specification dictates that for a password flow the data should be collected using form data (instead of JSON) and that it should have the specific fields <code>username</code> and <code>password</code>.</p> <p>All the initialization parameters are extracted from the request.</p> <p>The only difference between <code>OAuth2PasswordRequestFormStrict</code> and <code>OAuth2PasswordRequestForm</code> is that <code>OAuth2PasswordRequestFormStrict</code> requires the client to send the form field <code>grant_type</code> with the value <code>\"password\"</code>, which is required in the OAuth2 specification (it seems that for no particular reason), while for <code>OAuth2PasswordRequestForm</code> <code>grant_type</code> is optional.</p> <p>Read more about it in the ReadyAPI docs for Simple OAuth2 with Password and Bearer.</p>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestFormStrict--example","title":"Example","text":"<pre><code>from typing import Annotated\n\nfrom readyapi import Depends, ReadyAPI\nfrom readyapi.security import OAuth2PasswordRequestForm\n\napp = ReadyAPI()\n\n\n@app.post(\"/login\")\ndef login(form_data: Annotated[OAuth2PasswordRequestFormStrict, Depends()]):\n    data = {}\n    data[\"scopes\"] = []\n    for scope in form_data.scopes:\n        data[\"scopes\"].append(scope)\n    if form_data.client_id:\n        data[\"client_id\"] = form_data.client_id\n    if form_data.client_secret:\n        data[\"client_secret\"] = form_data.client_secret\n    return data\n</code></pre> <p>Note that for OAuth2 the scope <code>items:read</code> is a single scope in an opaque string. You could have custom internal logic to separate it by colon characters (<code>:</code>) or similar, and get the two parts <code>items</code> and <code>read</code>. Many applications do that to group and organize permissions, you could do it as well in your application, just know that that it is application specific, it's not part of the specification.</p> the OAuth2 spec says it is required and MUST be the fixed string \"password\". <p>This dependency is strict about it. If you want to be permissive, use instead the OAuth2PasswordRequestForm dependency class.</p> <p>username: username string. The OAuth2 spec requires the exact field name \"username\". password: password string. The OAuth2 spec requires the exact field name \"password\". scope: Optional string. Several scopes (each one a string) separated by spaces. E.g.     \"items:read items:write users:read profile openid\" client_id: optional string. OAuth2 recommends sending the client_id and client_secret (if any)     using HTTP Basic auth, as: client_id:client_secret client_secret: optional string. OAuth2 recommends sending the client_id and client_secret (if any)     using HTTP Basic auth, as: client_id:client_secret</p> PARAMETER DESCRIPTION <code>grant_type</code> <p>The OAuth2 spec says it is required and MUST be the fixed string \"password\". This dependency is strict about it. If you want to be permissive, use instead the <code>OAuth2PasswordRequestForm</code> dependency class.</p> <p> TYPE: <code>str</code> </p> <code>username</code> <p><code>username</code> string. The OAuth2 spec requires the exact field name <code>username</code>.</p> <p> TYPE: <code>str</code> </p> <code>password</code> <p><code>password</code> string. The OAuth2 spec requires the exact field name `password\".</p> <p> TYPE: <code>str</code> </p> <code>scope</code> <p>A single string with actually several scopes separated by spaces. Each scope is also a string.</p> <p>For example, a single string with:</p> <p>```python \"items:read items:write users:read profile openid\" ````</p> <p>would represent the scopes:</p> <ul> <li><code>items:read</code></li> <li><code>items:write</code></li> <li><code>users:read</code></li> <li><code>profile</code></li> <li><code>openid</code></li> </ul> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>client_id</code> <p>If there's a <code>client_id</code>, it can be sent as part of the form fields. But the OAuth2 specification recommends sending the <code>client_id</code> and <code>client_secret</code> (if any) using HTTP Basic auth.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> <code>client_secret</code> <p>If there's a <code>client_password</code> (and a <code>client_id</code>), they can be sent as part of the form fields. But the OAuth2 specification recommends sending the <code>client_id</code> and <code>client_secret</code> (if any) using HTTP Basic auth.</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p> Source code in <code>readyapi/security/oauth2.py</code> <pre><code>def __init__(\n    self,\n    grant_type: Annotated[\n        str,\n        Form(pattern=\"^password$\"),\n        Doc(\n            \"\"\"\n            The OAuth2 spec says it is required and MUST be the fixed string\n            \"password\". This dependency is strict about it. If you want to be\n            permissive, use instead the `OAuth2PasswordRequestForm` dependency\n            class.\n            \"\"\"\n        ),\n    ],\n    username: Annotated[\n        str,\n        Form(),\n        Doc(\n            \"\"\"\n            `username` string. The OAuth2 spec requires the exact field name\n            `username`.\n            \"\"\"\n        ),\n    ],\n    password: Annotated[\n        str,\n        Form(),\n        Doc(\n            \"\"\"\n            `password` string. The OAuth2 spec requires the exact field name\n            `password\".\n            \"\"\"\n        ),\n    ],\n    scope: Annotated[\n        str,\n        Form(),\n        Doc(\n            \"\"\"\n            A single string with actually several scopes separated by spaces. Each\n            scope is also a string.\n\n            For example, a single string with:\n\n            ```python\n            \"items:read items:write users:read profile openid\"\n            ````\n\n            would represent the scopes:\n\n            * `items:read`\n            * `items:write`\n            * `users:read`\n            * `profile`\n            * `openid`\n            \"\"\"\n        ),\n    ] = \"\",\n    client_id: Annotated[\n        Union[str, None],\n        Form(),\n        Doc(\n            \"\"\"\n            If there's a `client_id`, it can be sent as part of the form fields.\n            But the OAuth2 specification recommends sending the `client_id` and\n            `client_secret` (if any) using HTTP Basic auth.\n            \"\"\"\n        ),\n    ] = None,\n    client_secret: Annotated[\n        Union[str, None],\n        Form(),\n        Doc(\n            \"\"\"\n            If there's a `client_password` (and a `client_id`), they can be sent\n            as part of the form fields. But the OAuth2 specification recommends\n            sending the `client_id` and `client_secret` (if any) using HTTP Basic\n            auth.\n            \"\"\"\n        ),\n    ] = None,\n):\n    super().__init__(\n        grant_type=grant_type,\n        username=username,\n        password=password,\n        scope=scope,\n        client_id=client_id,\n        client_secret=client_secret,\n    )\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestFormStrict.grant_type","title":"grant_type  <code>instance-attribute</code>","text":"<pre><code>grant_type = grant_type\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestFormStrict.username","title":"username  <code>instance-attribute</code>","text":"<pre><code>username = username\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestFormStrict.password","title":"password  <code>instance-attribute</code>","text":"<pre><code>password = password\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestFormStrict.scopes","title":"scopes  <code>instance-attribute</code>","text":"<pre><code>scopes = split()\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestFormStrict.client_id","title":"client_id  <code>instance-attribute</code>","text":"<pre><code>client_id = client_id\n</code></pre>"},{"location":"reference/security/#readyapi.security.OAuth2PasswordRequestFormStrict.client_secret","title":"client_secret  <code>instance-attribute</code>","text":"<pre><code>client_secret = client_secret\n</code></pre>"},{"location":"reference/security/#oauth2-security-scopes-in-dependencies","title":"OAuth2 Security Scopes in Dependencies","text":""},{"location":"reference/security/#readyapi.security.SecurityScopes","title":"readyapi.security.SecurityScopes","text":"<pre><code>SecurityScopes(scopes=None)\n</code></pre> <p>This is a special class that you can define in a parameter in a dependency to obtain the OAuth2 scopes required by all the dependencies in the same chain.</p> <p>This way, multiple dependencies can have different scopes, even when used in the same path operation. And with this, you can access all the scopes required in all those dependencies in a single place.</p> <p>Read more about it in the ReadyAPI docs for OAuth2 scopes.</p> PARAMETER DESCRIPTION <code>scopes</code> <p>This will be filled by ReadyAPI.</p> <p> TYPE: <code>Optional[List[str]]</code> DEFAULT: <code>None</code> </p> Source code in <code>readyapi/security/oauth2.py</code> <pre><code>def __init__(\n    self,\n    scopes: Annotated[\n        Optional[List[str]],\n        Doc(\n            \"\"\"\n            This will be filled by ReadyAPI.\n            \"\"\"\n        ),\n    ] = None,\n):\n    self.scopes: Annotated[\n        List[str],\n        Doc(\n            \"\"\"\n            The list of all the scopes required by dependencies.\n            \"\"\"\n        ),\n    ] = scopes or []\n    self.scope_str: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            All the scopes required by all the dependencies in a single string\n            separated by spaces, as defined in the OAuth2 specification.\n            \"\"\"\n        ),\n    ] = \" \".join(self.scopes)\n</code></pre>"},{"location":"reference/security/#readyapi.security.SecurityScopes.scopes","title":"scopes  <code>instance-attribute</code>","text":"<pre><code>scopes = scopes or []\n</code></pre> <p>The list of all the scopes required by dependencies.</p>"},{"location":"reference/security/#readyapi.security.SecurityScopes.scope_str","title":"scope_str  <code>instance-attribute</code>","text":"<pre><code>scope_str = join(scopes)\n</code></pre> <p>All the scopes required by all the dependencies in a single string separated by spaces, as defined in the OAuth2 specification.</p>"},{"location":"reference/security/#openid-connect","title":"OpenID Connect","text":""},{"location":"reference/security/#readyapi.security.OpenIdConnect","title":"readyapi.security.OpenIdConnect","text":"<pre><code>OpenIdConnect(\n    *,\n    openIdConnectUrl,\n    scheme_name=None,\n    description=None,\n    auto_error=True\n)\n</code></pre> <p>               Bases: <code>SecurityBase</code></p> <p>OpenID Connect authentication class. An instance of it would be used as a dependency.</p> PARAMETER DESCRIPTION <code>openIdConnectUrl</code> <p>The OpenID Connect URL.</p> <p> TYPE: <code>str</code> </p> <code>scheme_name</code> <p>Security scheme name.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Security scheme description.</p> <p>It will be included in the generated OpenAPI (e.g. visible at <code>/docs</code>).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>auto_error</code> <p>By default, if no HTTP Authorization header is provided, required for OpenID Connect authentication, it will automatically cancel the request and send the client an error.</p> <p>If <code>auto_error</code> is set to <code>False</code>, when the HTTP Authorization header is not available, instead of erroring out, the dependency result will be <code>None</code>.</p> <p>This is useful when you want to have optional authentication.</p> <p>It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, with OpenID Connect or in a cookie).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/security/open_id_connect_url.py</code> <pre><code>def __init__(\n    self,\n    *,\n    openIdConnectUrl: Annotated[\n        str,\n        Doc(\n            \"\"\"\n        The OpenID Connect URL.\n        \"\"\"\n        ),\n    ],\n    scheme_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme name.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Security scheme description.\n\n            It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    auto_error: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, if no HTTP Authorization header is provided, required for\n            OpenID Connect authentication, it will automatically cancel the request\n            and send the client an error.\n\n            If `auto_error` is set to `False`, when the HTTP Authorization header\n            is not available, instead of erroring out, the dependency result will\n            be `None`.\n\n            This is useful when you want to have optional authentication.\n\n            It is also useful when you want to have authentication that can be\n            provided in one of multiple optional ways (for example, with OpenID\n            Connect or in a cookie).\n            \"\"\"\n        ),\n    ] = True,\n):\n    self.model = OpenIdConnectModel(\n        openIdConnectUrl=openIdConnectUrl, description=description\n    )\n    self.scheme_name = scheme_name or self.__class__.__name__\n    self.auto_error = auto_error\n</code></pre>"},{"location":"reference/security/#readyapi.security.OpenIdConnect.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = OpenIdConnect(\n    openIdConnectUrl=openIdConnectUrl,\n    description=description,\n)\n</code></pre>"},{"location":"reference/security/#readyapi.security.OpenIdConnect.scheme_name","title":"scheme_name  <code>instance-attribute</code>","text":"<pre><code>scheme_name = scheme_name or __name__\n</code></pre>"},{"location":"reference/security/#readyapi.security.OpenIdConnect.auto_error","title":"auto_error  <code>instance-attribute</code>","text":"<pre><code>auto_error = auto_error\n</code></pre>"},{"location":"reference/encoders/","title":"Encoders - <code>jsonable_encoder</code>","text":""},{"location":"reference/encoders/#readyapi.encoders.jsonable_encoder","title":"readyapi.encoders.jsonable_encoder","text":"<pre><code>jsonable_encoder(\n    obj,\n    include=None,\n    exclude=None,\n    by_alias=True,\n    exclude_unset=False,\n    exclude_defaults=False,\n    exclude_none=False,\n    custom_encoder=None,\n    sqlalchemy_safe=True,\n)\n</code></pre> <p>Convert any object to something that can be encoded in JSON.</p> <p>This is used internally by ReadyAPI to make sure anything you return can be encoded as JSON before it is sent to the client.</p> <p>You can also use it yourself, for example to convert objects before saving them in a database that supports only JSON.</p> <p>Read more about it in the ReadyAPI docs for JSON Compatible Encoder.</p> PARAMETER DESCRIPTION <code>obj</code> <p>The input object to convert to JSON.</p> <p> TYPE: <code>Any</code> </p> <code>include</code> <p>Pydantic's <code>include</code> parameter, passed to Pydantic models to set the fields to include.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>exclude</code> <p>Pydantic's <code>exclude</code> parameter, passed to Pydantic models to set the fields to exclude.</p> <p> TYPE: <code>Optional[IncEx]</code> DEFAULT: <code>None</code> </p> <code>by_alias</code> <p>Pydantic's <code>by_alias</code> parameter, passed to Pydantic models to define if the output should use the alias names (when provided) or the Python attribute names. In an API, if you set an alias, it's probably because you want to use it in the result, so you probably want to leave this set to <code>True</code>.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>exclude_unset</code> <p>Pydantic's <code>exclude_unset</code> parameter, passed to Pydantic models to define if it should exclude from the output the fields that were not explicitly set (and that only had their default values).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>exclude_defaults</code> <p>Pydantic's <code>exclude_defaults</code> parameter, passed to Pydantic models to define if it should exclude from the output the fields that had the same default value, even when they were explicitly set.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>exclude_none</code> <p>Pydantic's <code>exclude_none</code> parameter, passed to Pydantic models to define if it should exclude from the output any fields that have a <code>None</code> value.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>custom_encoder</code> <p>Pydantic's <code>custom_encoder</code> parameter, passed to Pydantic models to define a custom encoder.</p> <p> TYPE: <code>Optional[Dict[Any, Callable[[Any], Any]]]</code> DEFAULT: <code>None</code> </p> <code>sqlalchemy_safe</code> <p>Exclude from the output any fields that start with the name <code>_sa</code>.</p> <p>This is mainly a hack for compatibility with SQLAlchemy objects, they store internal SQLAlchemy-specific state in attributes named with <code>_sa</code>, and those objects can't (and shouldn't be) serialized to JSON.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>readyapi/encoders.py</code> <pre><code>def jsonable_encoder(\n    obj: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The input object to convert to JSON.\n            \"\"\"\n        ),\n    ],\n    include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Pydantic's `include` parameter, passed to Pydantic models to set the\n            fields to include.\n            \"\"\"\n        ),\n    ] = None,\n    exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Pydantic's `exclude` parameter, passed to Pydantic models to set the\n            fields to exclude.\n            \"\"\"\n        ),\n    ] = None,\n    by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Pydantic's `by_alias` parameter, passed to Pydantic models to define if\n            the output should use the alias names (when provided) or the Python\n            attribute names. In an API, if you set an alias, it's probably because you\n            want to use it in the result, so you probably want to leave this set to\n            `True`.\n            \"\"\"\n        ),\n    ] = True,\n    exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Pydantic's `exclude_unset` parameter, passed to Pydantic models to define\n            if it should exclude from the output the fields that were not explicitly\n            set (and that only had their default values).\n            \"\"\"\n        ),\n    ] = False,\n    exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Pydantic's `exclude_defaults` parameter, passed to Pydantic models to define\n            if it should exclude from the output the fields that had the same default\n            value, even when they were explicitly set.\n            \"\"\"\n        ),\n    ] = False,\n    exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Pydantic's `exclude_none` parameter, passed to Pydantic models to define\n            if it should exclude from the output any fields that have a `None` value.\n            \"\"\"\n        ),\n    ] = False,\n    custom_encoder: Annotated[\n        Optional[Dict[Any, Callable[[Any], Any]]],\n        Doc(\n            \"\"\"\n            Pydantic's `custom_encoder` parameter, passed to Pydantic models to define\n            a custom encoder.\n            \"\"\"\n        ),\n    ] = None,\n    sqlalchemy_safe: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Exclude from the output any fields that start with the name `_sa`.\n\n            This is mainly a hack for compatibility with SQLAlchemy objects, they\n            store internal SQLAlchemy-specific state in attributes named with `_sa`,\n            and those objects can't (and shouldn't be) serialized to JSON.\n            \"\"\"\n        ),\n    ] = True,\n) -&gt; Any:\n    \"\"\"\n    Convert any object to something that can be encoded in JSON.\n\n    This is used internally by ReadyAPI to make sure anything you return can be\n    encoded as JSON before it is sent to the client.\n\n    You can also use it yourself, for example to convert objects before saving them\n    in a database that supports only JSON.\n\n    Read more about it in the\n    [ReadyAPI docs for JSON Compatible Encoder](https://readyapi.github.io/tutorial/encoder/).\n    \"\"\"\n    custom_encoder = custom_encoder or {}\n    if custom_encoder:\n        if type(obj) in custom_encoder:\n            return custom_encoder[type(obj)](obj)\n        else:\n            for encoder_type, encoder_instance in custom_encoder.items():\n                if isinstance(obj, encoder_type):\n                    return encoder_instance(obj)\n    if include is not None and not isinstance(include, (set, dict)):\n        include = set(include)\n    if exclude is not None and not isinstance(exclude, (set, dict)):\n        exclude = set(exclude)\n    if isinstance(obj, BaseModel):\n        # TODO: remove when deprecating Pydantic v1\n        encoders: Dict[Any, Any] = {}\n        if not PYDANTIC_V2:\n            encoders = getattr(obj.__config__, \"json_encoders\", {})  # type: ignore[attr-defined]\n            if custom_encoder:\n                encoders.update(custom_encoder)\n        obj_dict = _model_dump(\n            obj,\n            mode=\"json\",\n            include=include,\n            exclude=exclude,\n            by_alias=by_alias,\n            exclude_unset=exclude_unset,\n            exclude_none=exclude_none,\n            exclude_defaults=exclude_defaults,\n        )\n        if \"__root__\" in obj_dict:\n            obj_dict = obj_dict[\"__root__\"]\n        return jsonable_encoder(\n            obj_dict,\n            exclude_none=exclude_none,\n            exclude_defaults=exclude_defaults,\n            # TODO: remove when deprecating Pydantic v1\n            custom_encoder=encoders,\n            sqlalchemy_safe=sqlalchemy_safe,\n        )\n    if dataclasses.is_dataclass(obj):\n        obj_dict = dataclasses.asdict(obj)\n        return jsonable_encoder(\n            obj_dict,\n            include=include,\n            exclude=exclude,\n            by_alias=by_alias,\n            exclude_unset=exclude_unset,\n            exclude_defaults=exclude_defaults,\n            exclude_none=exclude_none,\n            custom_encoder=custom_encoder,\n            sqlalchemy_safe=sqlalchemy_safe,\n        )\n    if isinstance(obj, Enum):\n        return obj.value\n    if isinstance(obj, PurePath):\n        return str(obj)\n    if isinstance(obj, (str, int, float, type(None))):\n        return obj\n    if isinstance(obj, UndefinedType):\n        return None\n    if isinstance(obj, dict):\n        encoded_dict = {}\n        allowed_keys = set(obj.keys())\n        if include is not None:\n            allowed_keys &amp;= set(include)\n        if exclude is not None:\n            allowed_keys -= set(exclude)\n        for key, value in obj.items():\n            if (\n                (\n                    not sqlalchemy_safe\n                    or (not isinstance(key, str))\n                    or (not key.startswith(\"_sa\"))\n                )\n                and (value is not None or not exclude_none)\n                and key in allowed_keys\n            ):\n                encoded_key = jsonable_encoder(\n                    key,\n                    by_alias=by_alias,\n                    exclude_unset=exclude_unset,\n                    exclude_none=exclude_none,\n                    custom_encoder=custom_encoder,\n                    sqlalchemy_safe=sqlalchemy_safe,\n                )\n                encoded_value = jsonable_encoder(\n                    value,\n                    by_alias=by_alias,\n                    exclude_unset=exclude_unset,\n                    exclude_none=exclude_none,\n                    custom_encoder=custom_encoder,\n                    sqlalchemy_safe=sqlalchemy_safe,\n                )\n                encoded_dict[encoded_key] = encoded_value\n        return encoded_dict\n    if isinstance(obj, (list, set, frozenset, GeneratorType, tuple, deque)):\n        encoded_list = []\n        for item in obj:\n            encoded_list.append(\n                jsonable_encoder(\n                    item,\n                    include=include,\n                    exclude=exclude,\n                    by_alias=by_alias,\n                    exclude_unset=exclude_unset,\n                    exclude_defaults=exclude_defaults,\n                    exclude_none=exclude_none,\n                    custom_encoder=custom_encoder,\n                    sqlalchemy_safe=sqlalchemy_safe,\n                )\n            )\n        return encoded_list\n\n    if type(obj) in ENCODERS_BY_TYPE:\n        return ENCODERS_BY_TYPE[type(obj)](obj)\n    for encoder, classes_tuple in encoders_by_class_tuples.items():\n        if isinstance(obj, classes_tuple):\n            return encoder(obj)\n\n    try:\n        data = dict(obj)\n    except Exception as e:\n        errors: List[Exception] = []\n        errors.append(e)\n        try:\n            data = vars(obj)\n        except Exception as e:\n            errors.append(e)\n            raise ValueError(errors) from e\n    return jsonable_encoder(\n        data,\n        include=include,\n        exclude=exclude,\n        by_alias=by_alias,\n        exclude_unset=exclude_unset,\n        exclude_defaults=exclude_defaults,\n        exclude_none=exclude_none,\n        custom_encoder=custom_encoder,\n        sqlalchemy_safe=sqlalchemy_safe,\n    )\n</code></pre>"},{"location":"reference/staticfiles/","title":"Static Files - <code>StaticFiles</code>","text":"<p>You can use the <code>StaticFiles</code> class to serve static files, like JavaScript, CSS, images, etc.</p> <p>Read more about it in the ReadyAPI docs for Static Files.</p> <p>You can import it directly from <code>readyapi.staticfiles</code>:</p> <pre><code>from readyapi.staticfiles import StaticFiles\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles","title":"readyapi.staticfiles.StaticFiles","text":"<pre><code>StaticFiles(\n    *,\n    directory=None,\n    packages=None,\n    html=False,\n    check_dir=True,\n    follow_symlink=False\n)\n</code></pre> PARAMETER DESCRIPTION <code>directory</code> <p> TYPE: <code>PathLike | None</code> DEFAULT: <code>None</code> </p> <code>packages</code> <p> TYPE: <code>list[str | tuple[str, str]] | None</code> DEFAULT: <code>None</code> </p> <code>html</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>check_dir</code> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>follow_symlink</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> Source code in <code>starlette/staticfiles.py</code> <pre><code>def __init__(\n    self,\n    *,\n    directory: PathLike | None = None,\n    packages: list[str | tuple[str, str]] | None = None,\n    html: bool = False,\n    check_dir: bool = True,\n    follow_symlink: bool = False,\n) -&gt; None:\n    self.directory = directory\n    self.packages = packages\n    self.all_directories = self.get_directories(directory, packages)\n    self.html = html\n    self.config_checked = False\n    self.follow_symlink = follow_symlink\n    if check_dir and directory is not None and not os.path.isdir(directory):\n        raise RuntimeError(f\"Directory '{directory}' does not exist\")\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.directory","title":"directory  <code>instance-attribute</code>","text":"<pre><code>directory = directory\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.packages","title":"packages  <code>instance-attribute</code>","text":"<pre><code>packages = packages\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.all_directories","title":"all_directories  <code>instance-attribute</code>","text":"<pre><code>all_directories = get_directories(directory, packages)\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.html","title":"html  <code>instance-attribute</code>","text":"<pre><code>html = html\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.config_checked","title":"config_checked  <code>instance-attribute</code>","text":"<pre><code>config_checked = False\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.follow_symlink","title":"follow_symlink  <code>instance-attribute</code>","text":"<pre><code>follow_symlink = follow_symlink\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.get_directories","title":"get_directories","text":"<pre><code>get_directories(directory=None, packages=None)\n</code></pre> <p>Given <code>directory</code> and <code>packages</code> arguments, return a list of all the directories that should be used for serving static files from.</p> PARAMETER DESCRIPTION <code>directory</code> <p> TYPE: <code>PathLike | None</code> DEFAULT: <code>None</code> </p> <code>packages</code> <p> TYPE: <code>list[str | tuple[str, str]] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/staticfiles.py</code> <pre><code>def get_directories(\n    self,\n    directory: PathLike | None = None,\n    packages: list[str | tuple[str, str]] | None = None,\n) -&gt; list[PathLike]:\n    \"\"\"\n    Given `directory` and `packages` arguments, return a list of all the\n    directories that should be used for serving static files from.\n    \"\"\"\n    directories = []\n    if directory is not None:\n        directories.append(directory)\n\n    for package in packages or []:\n        if isinstance(package, tuple):\n            package, statics_dir = package\n        else:\n            statics_dir = \"statics\"\n        spec = importlib.util.find_spec(package)\n        assert spec is not None, f\"Package {package!r} could not be found.\"\n        assert spec.origin is not None, f\"Package {package!r} could not be found.\"\n        package_directory = os.path.normpath(os.path.join(spec.origin, \"..\", statics_dir))\n        assert os.path.isdir(package_directory), (\n            f\"Directory '{statics_dir!r}' in package {package!r} could not be found.\"\n        )\n        directories.append(package_directory)\n\n    return directories\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.get_path","title":"get_path","text":"<pre><code>get_path(scope)\n</code></pre> <p>Given the ASGI scope, return the <code>path</code> string to serve up, with OS specific path separators, and any '..', '.' components removed.</p> PARAMETER DESCRIPTION <code>scope</code> <p> TYPE: <code>Scope</code> </p> Source code in <code>starlette/staticfiles.py</code> <pre><code>def get_path(self, scope: Scope) -&gt; str:\n    \"\"\"\n    Given the ASGI scope, return the `path` string to serve up,\n    with OS specific path separators, and any '..', '.' components removed.\n    \"\"\"\n    route_path = get_route_path(scope)\n    return os.path.normpath(os.path.join(*route_path.split(\"/\")))\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.get_response","title":"get_response  <code>async</code>","text":"<pre><code>get_response(path, scope)\n</code></pre> <p>Returns an HTTP response, given the incoming path, method and request headers.</p> PARAMETER DESCRIPTION <code>path</code> <p> TYPE: <code>str</code> </p> <code>scope</code> <p> TYPE: <code>Scope</code> </p> Source code in <code>starlette/staticfiles.py</code> <pre><code>async def get_response(self, path: str, scope: Scope) -&gt; Response:\n    \"\"\"\n    Returns an HTTP response, given the incoming path, method and request headers.\n    \"\"\"\n    if scope[\"method\"] not in (\"GET\", \"HEAD\"):\n        raise HTTPException(status_code=405)\n\n    try:\n        full_path, stat_result = await anyio.to_thread.run_sync(self.lookup_path, path)\n    except PermissionError:\n        raise HTTPException(status_code=401)\n    except OSError as exc:\n        # Filename is too long, so it can't be a valid static file.\n        if exc.errno == errno.ENAMETOOLONG:\n            raise HTTPException(status_code=404)\n\n        raise exc\n\n    if stat_result and stat.S_ISREG(stat_result.st_mode):\n        # We have a static file to serve.\n        return self.file_response(full_path, stat_result, scope)\n\n    elif stat_result and stat.S_ISDIR(stat_result.st_mode) and self.html:\n        # We're in HTML mode, and have got a directory URL.\n        # Check if we have 'index.html' file to serve.\n        index_path = os.path.join(path, \"index.html\")\n        full_path, stat_result = await anyio.to_thread.run_sync(self.lookup_path, index_path)\n        if stat_result is not None and stat.S_ISREG(stat_result.st_mode):\n            if not scope[\"path\"].endswith(\"/\"):\n                # Directory URLs should redirect to always end in \"/\".\n                url = URL(scope=scope)\n                url = url.replace(path=url.path + \"/\")\n                return RedirectResponse(url=url)\n            return self.file_response(full_path, stat_result, scope)\n\n    if self.html:\n        # Check for '404.html' if we're in HTML mode.\n        full_path, stat_result = await anyio.to_thread.run_sync(self.lookup_path, \"404.html\")\n        if stat_result and stat.S_ISREG(stat_result.st_mode):\n            return FileResponse(full_path, stat_result=stat_result, status_code=404)\n    raise HTTPException(status_code=404)\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.lookup_path","title":"lookup_path","text":"<pre><code>lookup_path(path)\n</code></pre> PARAMETER DESCRIPTION <code>path</code> <p> TYPE: <code>str</code> </p> Source code in <code>starlette/staticfiles.py</code> <pre><code>def lookup_path(self, path: str) -&gt; tuple[str, os.stat_result | None]:\n    for directory in self.all_directories:\n        joined_path = os.path.join(directory, path)\n        if self.follow_symlink:\n            full_path = os.path.abspath(joined_path)\n            directory = os.path.abspath(directory)\n        else:\n            full_path = os.path.realpath(joined_path)\n            directory = os.path.realpath(directory)\n        if os.path.commonpath([full_path, directory]) != str(directory):\n            # Don't allow misbehaving clients to break out of the static files directory.\n            continue\n        try:\n            return full_path, os.stat(full_path)\n        except (FileNotFoundError, NotADirectoryError):\n            continue\n    return \"\", None\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.file_response","title":"file_response","text":"<pre><code>file_response(\n    full_path, stat_result, scope, status_code=200\n)\n</code></pre> PARAMETER DESCRIPTION <code>full_path</code> <p> TYPE: <code>PathLike</code> </p> <code>stat_result</code> <p> TYPE: <code>stat_result</code> </p> <code>scope</code> <p> TYPE: <code>Scope</code> </p> <code>status_code</code> <p> TYPE: <code>int</code> DEFAULT: <code>200</code> </p> Source code in <code>starlette/staticfiles.py</code> <pre><code>def file_response(\n    self,\n    full_path: PathLike,\n    stat_result: os.stat_result,\n    scope: Scope,\n    status_code: int = 200,\n) -&gt; Response:\n    request_headers = Headers(scope=scope)\n\n    response = FileResponse(full_path, status_code=status_code, stat_result=stat_result)\n    if self.is_not_modified(response.headers, request_headers):\n        return NotModifiedResponse(response.headers)\n    return response\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.check_config","title":"check_config  <code>async</code>","text":"<pre><code>check_config()\n</code></pre> <p>Perform a one-off configuration check that StaticFiles is actually pointed at a directory, so that we can raise loud errors rather than just returning 404 responses.</p> Source code in <code>starlette/staticfiles.py</code> <pre><code>async def check_config(self) -&gt; None:\n    \"\"\"\n    Perform a one-off configuration check that StaticFiles is actually\n    pointed at a directory, so that we can raise loud errors rather than\n    just returning 404 responses.\n    \"\"\"\n    if self.directory is None:\n        return\n\n    try:\n        stat_result = await anyio.to_thread.run_sync(os.stat, self.directory)\n    except FileNotFoundError:\n        raise RuntimeError(f\"StaticFiles directory '{self.directory}' does not exist.\")\n    if not (stat.S_ISDIR(stat_result.st_mode) or stat.S_ISLNK(stat_result.st_mode)):\n        raise RuntimeError(f\"StaticFiles path '{self.directory}' is not a directory.\")\n</code></pre>"},{"location":"reference/staticfiles/#readyapi.staticfiles.StaticFiles.is_not_modified","title":"is_not_modified","text":"<pre><code>is_not_modified(response_headers, request_headers)\n</code></pre> <p>Given the request and response headers, return <code>True</code> if an HTTP \"Not Modified\" response could be returned instead.</p> PARAMETER DESCRIPTION <code>response_headers</code> <p> TYPE: <code>Headers</code> </p> <code>request_headers</code> <p> TYPE: <code>Headers</code> </p> Source code in <code>starlette/staticfiles.py</code> <pre><code>def is_not_modified(self, response_headers: Headers, request_headers: Headers) -&gt; bool:\n    \"\"\"\n    Given the request and response headers, return `True` if an HTTP\n    \"Not Modified\" response could be returned instead.\n    \"\"\"\n    try:\n        if_none_match = request_headers[\"if-none-match\"]\n        etag = response_headers[\"etag\"]\n        if etag in [tag.strip(\" W/\") for tag in if_none_match.split(\",\")]:\n            return True\n    except KeyError:\n        pass\n\n    try:\n        if_modified_since = parsedate(request_headers[\"if-modified-since\"])\n        last_modified = parsedate(response_headers[\"last-modified\"])\n        if if_modified_since is not None and last_modified is not None and if_modified_since &gt;= last_modified:\n            return True\n    except KeyError:\n        pass\n\n    return False\n</code></pre>"},{"location":"reference/templating/","title":"Templating - <code>Jinja2Templates</code>","text":"<p>You can use the <code>Jinja2Templates</code> class to render Jinja templates.</p> <p>Read more about it in the ReadyAPI docs for Templates.</p> <p>You can import it directly from <code>readyapi.templating</code>:</p> <pre><code>from readyapi.templating import Jinja2Templates\n</code></pre>"},{"location":"reference/templating/#readyapi.templating.Jinja2Templates","title":"readyapi.templating.Jinja2Templates","text":"<pre><code>Jinja2Templates(\n    directory: (\n        str | PathLike[str] | Sequence[str | PathLike[str]]\n    ),\n    *,\n    context_processors: (\n        list[Callable[[Request], dict[str, Any]]] | None\n    ) = None,\n    **env_options: Any\n)\n</code></pre><pre><code>Jinja2Templates(\n    *,\n    env: Environment,\n    context_processors: (\n        list[Callable[[Request], dict[str, Any]]] | None\n    ) = None\n)\n</code></pre> <pre><code>Jinja2Templates(\n    directory=None,\n    *,\n    context_processors=None,\n    env=None,\n    **env_options\n)\n</code></pre> <p>templates = Jinja2Templates(\"templates\")</p> <p>return templates.TemplateResponse(\"index.html\", {\"request\": request})</p> PARAMETER DESCRIPTION <code>directory</code> <p> TYPE: <code>str | PathLike[str] | Sequence[str | PathLike[str]] | None</code> DEFAULT: <code>None</code> </p> <code>context_processors</code> <p> TYPE: <code>list[Callable[[Request], dict[str, Any]]] | None</code> DEFAULT: <code>None</code> </p> <code>env</code> <p> TYPE: <code>Environment | None</code> DEFAULT: <code>None</code> </p> <code>**env_options</code> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>starlette/templating.py</code> <pre><code>def __init__(\n    self,\n    directory: str | PathLike[str] | typing.Sequence[str | PathLike[str]] | None = None,\n    *,\n    context_processors: list[typing.Callable[[Request], dict[str, typing.Any]]] | None = None,\n    env: jinja2.Environment | None = None,\n    **env_options: typing.Any,\n) -&gt; None:\n    if env_options:\n        warnings.warn(\n            \"Extra environment options are deprecated. Use a preconfigured jinja2.Environment instead.\",\n            DeprecationWarning,\n        )\n    assert jinja2 is not None, \"jinja2 must be installed to use Jinja2Templates\"\n    assert bool(directory) ^ bool(env), \"either 'directory' or 'env' arguments must be passed\"\n    self.context_processors = context_processors or []\n    if directory is not None:\n        self.env = self._create_env(directory, **env_options)\n    elif env is not None:  # pragma: no branch\n        self.env = env\n\n    self._setup_env_defaults(self.env)\n</code></pre>"},{"location":"reference/templating/#readyapi.templating.Jinja2Templates.context_processors","title":"context_processors  <code>instance-attribute</code>","text":"<pre><code>context_processors = context_processors or []\n</code></pre>"},{"location":"reference/templating/#readyapi.templating.Jinja2Templates.env","title":"env  <code>instance-attribute</code>","text":"<pre><code>env = _create_env(directory, **env_options)\n</code></pre>"},{"location":"reference/templating/#readyapi.templating.Jinja2Templates.get_template","title":"get_template","text":"<pre><code>get_template(name)\n</code></pre> PARAMETER DESCRIPTION <code>name</code> <p> TYPE: <code>str</code> </p> Source code in <code>starlette/templating.py</code> <pre><code>def get_template(self, name: str) -&gt; jinja2.Template:\n    return self.env.get_template(name)\n</code></pre>"},{"location":"reference/templating/#readyapi.templating.Jinja2Templates.TemplateResponse","title":"TemplateResponse","text":"<pre><code>TemplateResponse(\n    request: Request,\n    name: str,\n    context: dict[str, Any] | None = None,\n    status_code: int = 200,\n    headers: Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; _TemplateResponse\n</code></pre><pre><code>TemplateResponse(\n    name: str,\n    context: dict[str, Any] | None = None,\n    status_code: int = 200,\n    headers: Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; _TemplateResponse\n</code></pre> <pre><code>TemplateResponse(*args, **kwargs)\n</code></pre> PARAMETER DESCRIPTION <code>*args</code> <p> TYPE: <code>Any</code> DEFAULT: <code>()</code> </p> <code>**kwargs</code> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>starlette/templating.py</code> <pre><code>def TemplateResponse(self, *args: typing.Any, **kwargs: typing.Any) -&gt; _TemplateResponse:\n    if args:\n        if isinstance(args[0], str):  # the first argument is template name (old style)\n            warnings.warn(\n                \"The `name` is not the first parameter anymore. \"\n                \"The first parameter should be the `Request` instance.\\n\"\n                'Replace `TemplateResponse(name, {\"request\": request})` by `TemplateResponse(request, name)`.',\n                DeprecationWarning,\n            )\n\n            name = args[0]\n            context = args[1] if len(args) &gt; 1 else kwargs.get(\"context\", {})\n            status_code = args[2] if len(args) &gt; 2 else kwargs.get(\"status_code\", 200)\n            headers = args[3] if len(args) &gt; 3 else kwargs.get(\"headers\")\n            media_type = args[4] if len(args) &gt; 4 else kwargs.get(\"media_type\")\n            background = args[5] if len(args) &gt; 5 else kwargs.get(\"background\")\n\n            if \"request\" not in context:\n                raise ValueError('context must include a \"request\" key')\n            request = context[\"request\"]\n        else:  # the first argument is a request instance (new style)\n            request = args[0]\n            name = args[1] if len(args) &gt; 1 else kwargs[\"name\"]\n            context = args[2] if len(args) &gt; 2 else kwargs.get(\"context\", {})\n            status_code = args[3] if len(args) &gt; 3 else kwargs.get(\"status_code\", 200)\n            headers = args[4] if len(args) &gt; 4 else kwargs.get(\"headers\")\n            media_type = args[5] if len(args) &gt; 5 else kwargs.get(\"media_type\")\n            background = args[6] if len(args) &gt; 6 else kwargs.get(\"background\")\n    else:  # all arguments are kwargs\n        if \"request\" not in kwargs:\n            warnings.warn(\n                \"The `TemplateResponse` now requires the `request` argument.\\n\"\n                'Replace `TemplateResponse(name, {\"context\": context})` by `TemplateResponse(request, name)`.',\n                DeprecationWarning,\n            )\n            if \"request\" not in kwargs.get(\"context\", {}):\n                raise ValueError('context must include a \"request\" key')\n\n        context = kwargs.get(\"context\", {})\n        request = kwargs.get(\"request\", context.get(\"request\"))\n        name = typing.cast(str, kwargs[\"name\"])\n        status_code = kwargs.get(\"status_code\", 200)\n        headers = kwargs.get(\"headers\")\n        media_type = kwargs.get(\"media_type\")\n        background = kwargs.get(\"background\")\n\n    context.setdefault(\"request\", request)\n    for context_processor in self.context_processors:\n        context.update(context_processor(request))\n\n    template = self.get_template(name)\n    return _TemplateResponse(\n        template,\n        context,\n        status_code=status_code,\n        headers=headers,\n        media_type=media_type,\n        background=background,\n    )\n</code></pre>"},{"location":"reference/testclient/","title":"Test Client - <code>TestClient</code>","text":"<p>You can use the <code>TestClient</code> class to test ReadyAPI applications without creating an actual HTTP and socket connection, just communicating directly with the ReadyAPI code.</p> <p>Read more about it in the ReadyAPI docs for Testing.</p> <p>You can import it directly from <code>readyapi.testclient</code>:</p> <pre><code>from readyapi.testclient import TestClient\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient","title":"readyapi.testclient.TestClient","text":"<pre><code>TestClient(\n    app,\n    base_url=\"http://testserver\",\n    raise_server_exceptions=True,\n    root_path=\"\",\n    backend=\"asyncio\",\n    backend_options=None,\n    cookies=None,\n    headers=None,\n    follow_redirects=True,\n    client=(\"testclient\", 50000),\n)\n</code></pre> <p>               Bases: <code>Client</code></p> PARAMETER DESCRIPTION <code>app</code> <p> TYPE: <code>ASGIApp</code> </p> <code>base_url</code> <p> TYPE: <code>str</code> DEFAULT: <code>'http://testserver'</code> </p> <code>raise_server_exceptions</code> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>root_path</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>backend</code> <p> TYPE: <code>Literal['asyncio', 'trio']</code> DEFAULT: <code>'asyncio'</code> </p> <code>backend_options</code> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>dict[str, str] | None</code> DEFAULT: <code>None</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>client</code> <p> TYPE: <code>tuple[str, int]</code> DEFAULT: <code>('testclient', 50000)</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def __init__(\n    self,\n    app: ASGIApp,\n    base_url: str = \"http://testserver\",\n    raise_server_exceptions: bool = True,\n    root_path: str = \"\",\n    backend: typing.Literal[\"asyncio\", \"trio\"] = \"asyncio\",\n    backend_options: dict[str, typing.Any] | None = None,\n    cookies: httpx._types.CookieTypes | None = None,\n    headers: dict[str, str] | None = None,\n    follow_redirects: bool = True,\n    client: tuple[str, int] = (\"testclient\", 50000),\n) -&gt; None:\n    self.async_backend = _AsyncBackend(backend=backend, backend_options=backend_options or {})\n    if _is_asgi3(app):\n        asgi_app = app\n    else:\n        app = typing.cast(ASGI2App, app)  # type: ignore[assignment]\n        asgi_app = _WrapASGI2(app)  # type: ignore[arg-type]\n    self.app = asgi_app\n    self.app_state: dict[str, typing.Any] = {}\n    transport = _TestClientTransport(\n        self.app,\n        portal_factory=self._portal_factory,\n        raise_server_exceptions=raise_server_exceptions,\n        root_path=root_path,\n        app_state=self.app_state,\n        client=client,\n    )\n    if headers is None:\n        headers = {}\n    headers.setdefault(\"user-agent\", \"testclient\")\n    super().__init__(\n        base_url=base_url,\n        headers=headers,\n        transport=transport,\n        follow_redirects=follow_redirects,\n        cookies=cookies,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.headers","title":"headers  <code>property</code> <code>writable</code>","text":"<pre><code>headers\n</code></pre> <p>HTTP headers to include when sending requests.</p>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.follow_redirects","title":"follow_redirects  <code>instance-attribute</code>","text":"<pre><code>follow_redirects = follow_redirects\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.max_redirects","title":"max_redirects  <code>instance-attribute</code>","text":"<pre><code>max_redirects = max_redirects\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.is_closed","title":"is_closed  <code>property</code>","text":"<pre><code>is_closed\n</code></pre> <p>Check if the client being closed</p>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.trust_env","title":"trust_env  <code>property</code>","text":"<pre><code>trust_env\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.timeout","title":"timeout  <code>property</code> <code>writable</code>","text":"<pre><code>timeout\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.event_hooks","title":"event_hooks  <code>property</code> <code>writable</code>","text":"<pre><code>event_hooks\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.auth","title":"auth  <code>property</code> <code>writable</code>","text":"<pre><code>auth\n</code></pre> <p>Authentication class used when none is passed at the request-level.</p> <p>See also Authentication.</p>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.base_url","title":"base_url  <code>property</code> <code>writable</code>","text":"<pre><code>base_url\n</code></pre> <p>Base URL to use when sending requests with relative URLs.</p>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.cookies","title":"cookies  <code>property</code> <code>writable</code>","text":"<pre><code>cookies\n</code></pre> <p>Cookie values to include when sending requests.</p>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.params","title":"params  <code>property</code> <code>writable</code>","text":"<pre><code>params\n</code></pre> <p>Query parameters to include in the URL when sending requests.</p>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.task","title":"task  <code>instance-attribute</code>","text":"<pre><code>task\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.portal","title":"portal  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>portal = None\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.async_backend","title":"async_backend  <code>instance-attribute</code>","text":"<pre><code>async_backend = _AsyncBackend(\n    backend=backend, backend_options=backend_options or {}\n)\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.app","title":"app  <code>instance-attribute</code>","text":"<pre><code>app = asgi_app\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.app_state","title":"app_state  <code>instance-attribute</code>","text":"<pre><code>app_state = {}\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.build_request","title":"build_request","text":"<pre><code>build_request(\n    method,\n    url,\n    *,\n    content=None,\n    data=None,\n    files=None,\n    json=None,\n    params=None,\n    headers=None,\n    cookies=None,\n    timeout=USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> <p>Build and return a request instance.</p> <ul> <li>The <code>params</code>, <code>headers</code> and <code>cookies</code> arguments are merged with any values set on the client.</li> <li>The <code>url</code> argument is merged with any <code>base_url</code> set on the client.</li> </ul> <p>See also: Request instances</p> PARAMETER DESCRIPTION <code>method</code> <p> TYPE: <code>str</code> </p> <code>url</code> <p> TYPE: <code>URL | str</code> </p> <code>content</code> <p> TYPE: <code>RequestContent | None</code> DEFAULT: <code>None</code> </p> <code>data</code> <p> TYPE: <code>RequestData | None</code> DEFAULT: <code>None</code> </p> <code>files</code> <p> TYPE: <code>RequestFiles | None</code> DEFAULT: <code>None</code> </p> <code>json</code> <p> TYPE: <code>Any | None</code> DEFAULT: <code>None</code> </p> <code>params</code> <p> TYPE: <code>QueryParamTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>HeaderTypes | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>timeout</code> <p> TYPE: <code>TimeoutTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>RequestExtensions | None</code> DEFAULT: <code>None</code> </p> Source code in <code>httpx/_client.py</code> <pre><code>def build_request(\n    self,\n    method: str,\n    url: URL | str,\n    *,\n    content: RequestContent | None = None,\n    data: RequestData | None = None,\n    files: RequestFiles | None = None,\n    json: typing.Any | None = None,\n    params: QueryParamTypes | None = None,\n    headers: HeaderTypes | None = None,\n    cookies: CookieTypes | None = None,\n    timeout: TimeoutTypes | UseClientDefault = USE_CLIENT_DEFAULT,\n    extensions: RequestExtensions | None = None,\n) -&gt; Request:\n    \"\"\"\n    Build and return a request instance.\n\n    * The `params`, `headers` and `cookies` arguments\n    are merged with any values set on the client.\n    * The `url` argument is merged with any `base_url` set on the client.\n\n    See also: [Request instances][0]\n\n    [0]: /advanced/clients/#request-instances\n    \"\"\"\n    url = self._merge_url(url)\n    headers = self._merge_headers(headers)\n    cookies = self._merge_cookies(cookies)\n    params = self._merge_queryparams(params)\n    extensions = {} if extensions is None else extensions\n    if \"timeout\" not in extensions:\n        timeout = (\n            self.timeout\n            if isinstance(timeout, UseClientDefault)\n            else Timeout(timeout)\n        )\n        extensions = dict(**extensions, timeout=timeout.as_dict())\n    return Request(\n        method,\n        url,\n        content=content,\n        data=data,\n        files=files,\n        json=json,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        extensions=extensions,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.stream","title":"stream","text":"<pre><code>stream(\n    method,\n    url,\n    *,\n    content=None,\n    data=None,\n    files=None,\n    json=None,\n    params=None,\n    headers=None,\n    cookies=None,\n    auth=USE_CLIENT_DEFAULT,\n    follow_redirects=USE_CLIENT_DEFAULT,\n    timeout=USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> <p>Alternative to <code>httpx.request()</code> that streams the response body instead of loading it into memory at once.</p> <p>Parameters: See <code>httpx.request</code>.</p> <p>See also: Streaming Responses</p> PARAMETER DESCRIPTION <code>method</code> <p> TYPE: <code>str</code> </p> <code>url</code> <p> TYPE: <code>URL | str</code> </p> <code>content</code> <p> TYPE: <code>RequestContent | None</code> DEFAULT: <code>None</code> </p> <code>data</code> <p> TYPE: <code>RequestData | None</code> DEFAULT: <code>None</code> </p> <code>files</code> <p> TYPE: <code>RequestFiles | None</code> DEFAULT: <code>None</code> </p> <code>json</code> <p> TYPE: <code>Any | None</code> DEFAULT: <code>None</code> </p> <code>params</code> <p> TYPE: <code>QueryParamTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>HeaderTypes | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>auth</code> <p> TYPE: <code>AuthTypes | UseClientDefault | None</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>timeout</code> <p> TYPE: <code>TimeoutTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>RequestExtensions | None</code> DEFAULT: <code>None</code> </p> YIELDS DESCRIPTION <code>Response</code> Source code in <code>httpx/_client.py</code> <pre><code>@contextmanager\ndef stream(\n    self,\n    method: str,\n    url: URL | str,\n    *,\n    content: RequestContent | None = None,\n    data: RequestData | None = None,\n    files: RequestFiles | None = None,\n    json: typing.Any | None = None,\n    params: QueryParamTypes | None = None,\n    headers: HeaderTypes | None = None,\n    cookies: CookieTypes | None = None,\n    auth: AuthTypes | UseClientDefault | None = USE_CLIENT_DEFAULT,\n    follow_redirects: bool | UseClientDefault = USE_CLIENT_DEFAULT,\n    timeout: TimeoutTypes | UseClientDefault = USE_CLIENT_DEFAULT,\n    extensions: RequestExtensions | None = None,\n) -&gt; typing.Iterator[Response]:\n    \"\"\"\n    Alternative to `httpx.request()` that streams the response body\n    instead of loading it into memory at once.\n\n    **Parameters**: See `httpx.request`.\n\n    See also: [Streaming Responses][0]\n\n    [0]: /quickstart#streaming-responses\n    \"\"\"\n    request = self.build_request(\n        method=method,\n        url=url,\n        content=content,\n        data=data,\n        files=files,\n        json=json,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        timeout=timeout,\n        extensions=extensions,\n    )\n    response = self.send(\n        request=request,\n        auth=auth,\n        follow_redirects=follow_redirects,\n        stream=True,\n    )\n    try:\n        yield response\n    finally:\n        response.close()\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.send","title":"send","text":"<pre><code>send(\n    request,\n    *,\n    stream=False,\n    auth=USE_CLIENT_DEFAULT,\n    follow_redirects=USE_CLIENT_DEFAULT\n)\n</code></pre> <p>Send a request.</p> <p>The request is sent as-is, unmodified.</p> <p>Typically you'll want to build one with <code>Client.build_request()</code> so that any client-level configuration is merged into the request, but passing an explicit <code>httpx.Request()</code> is supported as well.</p> <p>See also: Request instances</p> PARAMETER DESCRIPTION <code>request</code> <p> TYPE: <code>Request</code> </p> <code>stream</code> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>auth</code> <p> TYPE: <code>AuthTypes | UseClientDefault | None</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> Source code in <code>httpx/_client.py</code> <pre><code>def send(\n    self,\n    request: Request,\n    *,\n    stream: bool = False,\n    auth: AuthTypes | UseClientDefault | None = USE_CLIENT_DEFAULT,\n    follow_redirects: bool | UseClientDefault = USE_CLIENT_DEFAULT,\n) -&gt; Response:\n    \"\"\"\n    Send a request.\n\n    The request is sent as-is, unmodified.\n\n    Typically you'll want to build one with `Client.build_request()`\n    so that any client-level configuration is merged into the request,\n    but passing an explicit `httpx.Request()` is supported as well.\n\n    See also: [Request instances][0]\n\n    [0]: /advanced/clients/#request-instances\n    \"\"\"\n    if self._state == ClientState.CLOSED:\n        raise RuntimeError(\"Cannot send a request, as the client has been closed.\")\n\n    self._state = ClientState.OPENED\n    follow_redirects = (\n        self.follow_redirects\n        if isinstance(follow_redirects, UseClientDefault)\n        else follow_redirects\n    )\n\n    self._set_timeout(request)\n\n    auth = self._build_request_auth(request, auth)\n\n    response = self._send_handling_auth(\n        request,\n        auth=auth,\n        follow_redirects=follow_redirects,\n        history=[],\n    )\n    try:\n        if not stream:\n            response.read()\n\n        return response\n\n    except BaseException as exc:\n        response.close()\n        raise exc\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.close","title":"close","text":"<pre><code>close()\n</code></pre> <p>Close transport and proxies.</p> Source code in <code>httpx/_client.py</code> <pre><code>def close(self) -&gt; None:\n    \"\"\"\n    Close transport and proxies.\n    \"\"\"\n    if self._state != ClientState.CLOSED:\n        self._state = ClientState.CLOSED\n\n        self._transport.close()\n        for transport in self._mounts.values():\n            if transport is not None:\n                transport.close()\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.request","title":"request","text":"<pre><code>request(\n    method,\n    url,\n    *,\n    content=None,\n    data=None,\n    files=None,\n    json=None,\n    params=None,\n    headers=None,\n    cookies=None,\n    auth=USE_CLIENT_DEFAULT,\n    follow_redirects=USE_CLIENT_DEFAULT,\n    timeout=USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> PARAMETER DESCRIPTION <code>method</code> <p> TYPE: <code>str</code> </p> <code>url</code> <p> TYPE: <code>URLTypes</code> </p> <code>content</code> <p> TYPE: <code>RequestContent | None</code> DEFAULT: <code>None</code> </p> <code>data</code> <p> TYPE: <code>_RequestData | None</code> DEFAULT: <code>None</code> </p> <code>files</code> <p> TYPE: <code>RequestFiles | None</code> DEFAULT: <code>None</code> </p> <code>json</code> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> <code>params</code> <p> TYPE: <code>QueryParamTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>HeaderTypes | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>auth</code> <p> TYPE: <code>AuthTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>timeout</code> <p> TYPE: <code>TimeoutTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def request(  # type: ignore[override]\n    self,\n    method: str,\n    url: httpx._types.URLTypes,\n    *,\n    content: httpx._types.RequestContent | None = None,\n    data: _RequestData | None = None,\n    files: httpx._types.RequestFiles | None = None,\n    json: typing.Any = None,\n    params: httpx._types.QueryParamTypes | None = None,\n    headers: httpx._types.HeaderTypes | None = None,\n    cookies: httpx._types.CookieTypes | None = None,\n    auth: httpx._types.AuthTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    follow_redirects: bool | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    timeout: httpx._types.TimeoutTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    extensions: dict[str, typing.Any] | None = None,\n) -&gt; httpx.Response:\n    if timeout is not httpx.USE_CLIENT_DEFAULT:\n        warnings.warn(\n            \"You should not use the 'timeout' argument with the TestClient. \"\n            \"See https://github.com/encode/starlette/issues/1108 for more information.\",\n            DeprecationWarning,\n        )\n    url = self._merge_url(url)\n    return super().request(\n        method,\n        url,\n        content=content,\n        data=data,\n        files=files,\n        json=json,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        auth=auth,\n        follow_redirects=follow_redirects,\n        timeout=timeout,\n        extensions=extensions,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.get","title":"get","text":"<pre><code>get(\n    url,\n    *,\n    params=None,\n    headers=None,\n    cookies=None,\n    auth=USE_CLIENT_DEFAULT,\n    follow_redirects=USE_CLIENT_DEFAULT,\n    timeout=USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> PARAMETER DESCRIPTION <code>url</code> <p> TYPE: <code>URLTypes</code> </p> <code>params</code> <p> TYPE: <code>QueryParamTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>HeaderTypes | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>auth</code> <p> TYPE: <code>AuthTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>timeout</code> <p> TYPE: <code>TimeoutTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def get(  # type: ignore[override]\n    self,\n    url: httpx._types.URLTypes,\n    *,\n    params: httpx._types.QueryParamTypes | None = None,\n    headers: httpx._types.HeaderTypes | None = None,\n    cookies: httpx._types.CookieTypes | None = None,\n    auth: httpx._types.AuthTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    follow_redirects: bool | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    timeout: httpx._types.TimeoutTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    extensions: dict[str, typing.Any] | None = None,\n) -&gt; httpx.Response:\n    return super().get(\n        url,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        auth=auth,\n        follow_redirects=follow_redirects,\n        timeout=timeout,\n        extensions=extensions,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.options","title":"options","text":"<pre><code>options(\n    url,\n    *,\n    params=None,\n    headers=None,\n    cookies=None,\n    auth=USE_CLIENT_DEFAULT,\n    follow_redirects=USE_CLIENT_DEFAULT,\n    timeout=USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> PARAMETER DESCRIPTION <code>url</code> <p> TYPE: <code>URLTypes</code> </p> <code>params</code> <p> TYPE: <code>QueryParamTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>HeaderTypes | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>auth</code> <p> TYPE: <code>AuthTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>timeout</code> <p> TYPE: <code>TimeoutTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def options(  # type: ignore[override]\n    self,\n    url: httpx._types.URLTypes,\n    *,\n    params: httpx._types.QueryParamTypes | None = None,\n    headers: httpx._types.HeaderTypes | None = None,\n    cookies: httpx._types.CookieTypes | None = None,\n    auth: httpx._types.AuthTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    follow_redirects: bool | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    timeout: httpx._types.TimeoutTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    extensions: dict[str, typing.Any] | None = None,\n) -&gt; httpx.Response:\n    return super().options(\n        url,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        auth=auth,\n        follow_redirects=follow_redirects,\n        timeout=timeout,\n        extensions=extensions,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.head","title":"head","text":"<pre><code>head(\n    url,\n    *,\n    params=None,\n    headers=None,\n    cookies=None,\n    auth=USE_CLIENT_DEFAULT,\n    follow_redirects=USE_CLIENT_DEFAULT,\n    timeout=USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> PARAMETER DESCRIPTION <code>url</code> <p> TYPE: <code>URLTypes</code> </p> <code>params</code> <p> TYPE: <code>QueryParamTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>HeaderTypes | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>auth</code> <p> TYPE: <code>AuthTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>timeout</code> <p> TYPE: <code>TimeoutTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def head(  # type: ignore[override]\n    self,\n    url: httpx._types.URLTypes,\n    *,\n    params: httpx._types.QueryParamTypes | None = None,\n    headers: httpx._types.HeaderTypes | None = None,\n    cookies: httpx._types.CookieTypes | None = None,\n    auth: httpx._types.AuthTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    follow_redirects: bool | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    timeout: httpx._types.TimeoutTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    extensions: dict[str, typing.Any] | None = None,\n) -&gt; httpx.Response:\n    return super().head(\n        url,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        auth=auth,\n        follow_redirects=follow_redirects,\n        timeout=timeout,\n        extensions=extensions,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.post","title":"post","text":"<pre><code>post(\n    url,\n    *,\n    content=None,\n    data=None,\n    files=None,\n    json=None,\n    params=None,\n    headers=None,\n    cookies=None,\n    auth=USE_CLIENT_DEFAULT,\n    follow_redirects=USE_CLIENT_DEFAULT,\n    timeout=USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> PARAMETER DESCRIPTION <code>url</code> <p> TYPE: <code>URLTypes</code> </p> <code>content</code> <p> TYPE: <code>RequestContent | None</code> DEFAULT: <code>None</code> </p> <code>data</code> <p> TYPE: <code>_RequestData | None</code> DEFAULT: <code>None</code> </p> <code>files</code> <p> TYPE: <code>RequestFiles | None</code> DEFAULT: <code>None</code> </p> <code>json</code> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> <code>params</code> <p> TYPE: <code>QueryParamTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>HeaderTypes | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>auth</code> <p> TYPE: <code>AuthTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>timeout</code> <p> TYPE: <code>TimeoutTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def post(  # type: ignore[override]\n    self,\n    url: httpx._types.URLTypes,\n    *,\n    content: httpx._types.RequestContent | None = None,\n    data: _RequestData | None = None,\n    files: httpx._types.RequestFiles | None = None,\n    json: typing.Any = None,\n    params: httpx._types.QueryParamTypes | None = None,\n    headers: httpx._types.HeaderTypes | None = None,\n    cookies: httpx._types.CookieTypes | None = None,\n    auth: httpx._types.AuthTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    follow_redirects: bool | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    timeout: httpx._types.TimeoutTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    extensions: dict[str, typing.Any] | None = None,\n) -&gt; httpx.Response:\n    return super().post(\n        url,\n        content=content,\n        data=data,\n        files=files,\n        json=json,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        auth=auth,\n        follow_redirects=follow_redirects,\n        timeout=timeout,\n        extensions=extensions,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.put","title":"put","text":"<pre><code>put(\n    url,\n    *,\n    content=None,\n    data=None,\n    files=None,\n    json=None,\n    params=None,\n    headers=None,\n    cookies=None,\n    auth=USE_CLIENT_DEFAULT,\n    follow_redirects=USE_CLIENT_DEFAULT,\n    timeout=USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> PARAMETER DESCRIPTION <code>url</code> <p> TYPE: <code>URLTypes</code> </p> <code>content</code> <p> TYPE: <code>RequestContent | None</code> DEFAULT: <code>None</code> </p> <code>data</code> <p> TYPE: <code>_RequestData | None</code> DEFAULT: <code>None</code> </p> <code>files</code> <p> TYPE: <code>RequestFiles | None</code> DEFAULT: <code>None</code> </p> <code>json</code> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> <code>params</code> <p> TYPE: <code>QueryParamTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>HeaderTypes | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>auth</code> <p> TYPE: <code>AuthTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>timeout</code> <p> TYPE: <code>TimeoutTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def put(  # type: ignore[override]\n    self,\n    url: httpx._types.URLTypes,\n    *,\n    content: httpx._types.RequestContent | None = None,\n    data: _RequestData | None = None,\n    files: httpx._types.RequestFiles | None = None,\n    json: typing.Any = None,\n    params: httpx._types.QueryParamTypes | None = None,\n    headers: httpx._types.HeaderTypes | None = None,\n    cookies: httpx._types.CookieTypes | None = None,\n    auth: httpx._types.AuthTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    follow_redirects: bool | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    timeout: httpx._types.TimeoutTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    extensions: dict[str, typing.Any] | None = None,\n) -&gt; httpx.Response:\n    return super().put(\n        url,\n        content=content,\n        data=data,\n        files=files,\n        json=json,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        auth=auth,\n        follow_redirects=follow_redirects,\n        timeout=timeout,\n        extensions=extensions,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.patch","title":"patch","text":"<pre><code>patch(\n    url,\n    *,\n    content=None,\n    data=None,\n    files=None,\n    json=None,\n    params=None,\n    headers=None,\n    cookies=None,\n    auth=USE_CLIENT_DEFAULT,\n    follow_redirects=USE_CLIENT_DEFAULT,\n    timeout=USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> PARAMETER DESCRIPTION <code>url</code> <p> TYPE: <code>URLTypes</code> </p> <code>content</code> <p> TYPE: <code>RequestContent | None</code> DEFAULT: <code>None</code> </p> <code>data</code> <p> TYPE: <code>_RequestData | None</code> DEFAULT: <code>None</code> </p> <code>files</code> <p> TYPE: <code>RequestFiles | None</code> DEFAULT: <code>None</code> </p> <code>json</code> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> <code>params</code> <p> TYPE: <code>QueryParamTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>HeaderTypes | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>auth</code> <p> TYPE: <code>AuthTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>timeout</code> <p> TYPE: <code>TimeoutTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def patch(  # type: ignore[override]\n    self,\n    url: httpx._types.URLTypes,\n    *,\n    content: httpx._types.RequestContent | None = None,\n    data: _RequestData | None = None,\n    files: httpx._types.RequestFiles | None = None,\n    json: typing.Any = None,\n    params: httpx._types.QueryParamTypes | None = None,\n    headers: httpx._types.HeaderTypes | None = None,\n    cookies: httpx._types.CookieTypes | None = None,\n    auth: httpx._types.AuthTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    follow_redirects: bool | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    timeout: httpx._types.TimeoutTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    extensions: dict[str, typing.Any] | None = None,\n) -&gt; httpx.Response:\n    return super().patch(\n        url,\n        content=content,\n        data=data,\n        files=files,\n        json=json,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        auth=auth,\n        follow_redirects=follow_redirects,\n        timeout=timeout,\n        extensions=extensions,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.delete","title":"delete","text":"<pre><code>delete(\n    url,\n    *,\n    params=None,\n    headers=None,\n    cookies=None,\n    auth=USE_CLIENT_DEFAULT,\n    follow_redirects=USE_CLIENT_DEFAULT,\n    timeout=USE_CLIENT_DEFAULT,\n    extensions=None\n)\n</code></pre> PARAMETER DESCRIPTION <code>url</code> <p> TYPE: <code>URLTypes</code> </p> <code>params</code> <p> TYPE: <code>QueryParamTypes | None</code> DEFAULT: <code>None</code> </p> <code>headers</code> <p> TYPE: <code>HeaderTypes | None</code> DEFAULT: <code>None</code> </p> <code>cookies</code> <p> TYPE: <code>CookieTypes | None</code> DEFAULT: <code>None</code> </p> <code>auth</code> <p> TYPE: <code>AuthTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>follow_redirects</code> <p> TYPE: <code>bool | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>timeout</code> <p> TYPE: <code>TimeoutTypes | UseClientDefault</code> DEFAULT: <code>USE_CLIENT_DEFAULT</code> </p> <code>extensions</code> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def delete(  # type: ignore[override]\n    self,\n    url: httpx._types.URLTypes,\n    *,\n    params: httpx._types.QueryParamTypes | None = None,\n    headers: httpx._types.HeaderTypes | None = None,\n    cookies: httpx._types.CookieTypes | None = None,\n    auth: httpx._types.AuthTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    follow_redirects: bool | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    timeout: httpx._types.TimeoutTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n    extensions: dict[str, typing.Any] | None = None,\n) -&gt; httpx.Response:\n    return super().delete(\n        url,\n        params=params,\n        headers=headers,\n        cookies=cookies,\n        auth=auth,\n        follow_redirects=follow_redirects,\n        timeout=timeout,\n        extensions=extensions,\n    )\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.websocket_connect","title":"websocket_connect","text":"<pre><code>websocket_connect(url, subprotocols=None, **kwargs)\n</code></pre> PARAMETER DESCRIPTION <code>url</code> <p> TYPE: <code>str</code> </p> <code>subprotocols</code> <p> TYPE: <code>Sequence[str] | None</code> DEFAULT: <code>None</code> </p> <code>**kwargs</code> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>starlette/testclient.py</code> <pre><code>def websocket_connect(\n    self,\n    url: str,\n    subprotocols: typing.Sequence[str] | None = None,\n    **kwargs: typing.Any,\n) -&gt; WebSocketTestSession:\n    url = urljoin(\"ws://testserver\", url)\n    headers = kwargs.get(\"headers\", {})\n    headers.setdefault(\"connection\", \"upgrade\")\n    headers.setdefault(\"sec-websocket-key\", \"testserver==\")\n    headers.setdefault(\"sec-websocket-version\", \"13\")\n    if subprotocols is not None:\n        headers.setdefault(\"sec-websocket-protocol\", \", \".join(subprotocols))\n    kwargs[\"headers\"] = headers\n    try:\n        super().request(\"GET\", url, **kwargs)\n    except _Upgrade as exc:\n        session = exc.session\n    else:\n        raise RuntimeError(\"Expected WebSocket upgrade\")  # pragma: no cover\n\n    return session\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.lifespan","title":"lifespan  <code>async</code>","text":"<pre><code>lifespan()\n</code></pre> Source code in <code>starlette/testclient.py</code> <pre><code>async def lifespan(self) -&gt; None:\n    scope = {\"type\": \"lifespan\", \"state\": self.app_state}\n    try:\n        await self.app(scope, self.stream_receive.receive, self.stream_send.send)\n    finally:\n        await self.stream_send.send(None)\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.wait_startup","title":"wait_startup  <code>async</code>","text":"<pre><code>wait_startup()\n</code></pre> Source code in <code>starlette/testclient.py</code> <pre><code>async def wait_startup(self) -&gt; None:\n    await self.stream_receive.send({\"type\": \"lifespan.startup\"})\n\n    async def receive() -&gt; typing.Any:\n        message = await self.stream_send.receive()\n        if message is None:\n            self.task.result()\n        return message\n\n    message = await receive()\n    assert message[\"type\"] in (\n        \"lifespan.startup.complete\",\n        \"lifespan.startup.failed\",\n    )\n    if message[\"type\"] == \"lifespan.startup.failed\":\n        await receive()\n</code></pre>"},{"location":"reference/testclient/#readyapi.testclient.TestClient.wait_shutdown","title":"wait_shutdown  <code>async</code>","text":"<pre><code>wait_shutdown()\n</code></pre> Source code in <code>starlette/testclient.py</code> <pre><code>async def wait_shutdown(self) -&gt; None:\n    async def receive() -&gt; typing.Any:\n        message = await self.stream_send.receive()\n        if message is None:\n            self.task.result()\n        return message\n\n    await self.stream_receive.send({\"type\": \"lifespan.shutdown\"})\n    message = await receive()\n    assert message[\"type\"] in (\n        \"lifespan.shutdown.complete\",\n        \"lifespan.shutdown.failed\",\n    )\n    if message[\"type\"] == \"lifespan.shutdown.failed\":\n        await receive()\n</code></pre>"},{"location":"readyapi-people/","title":"ReadyAPI People","text":"<p>ReadyAPI has an amazing community that welcomes people from all backgrounds.</p>"},{"location":"readyapi-people/#creator","title":"Creator","text":"<p>Hey! \ud83d\udc4b</p> <p>This is me:</p> @khulnasoft Answers: 1898Pull Requests: 734 <p>I'm the creator of ReadyAPI. You can read more about that in Help ReadyAPI - Get Help - Connect with the author.</p> <p>...But here I want to show you the community.</p> <p>ReadyAPI receives a lot of support from the community. And I want to highlight their contributions.</p> <p>These are the people that:</p> <ul> <li>Help others with questions in GitHub.</li> <li>Create Pull Requests.</li> <li>Review Pull Requests, especially important for translations.</li> <li>Help manage the repository (team members).</li> </ul> <p>All these tasks help maintain the repository.</p> <p>A round of applause to them. \ud83d\udc4f \ud83d\ude47</p>"},{"location":"readyapi-people/#team","title":"Team","text":"<p>This is the current list of team members. \ud83d\ude0e</p> <p>They have different levels of involvement and permissions, they can perform repository management tasks and together we  manage the ReadyAPI repository.</p> @khulnasoft @Kludex @alejsdev @svlandeg @YuriiMotov @patrick91 @luzzodev <p>Although the team members have the permissions to perform privileged tasks, all the help from others maintaining ReadyAPI is very much appreciated! \ud83d\ude47\u200d\u2642\ufe0f</p>"},{"location":"readyapi-people/#readyapi-experts","title":"ReadyAPI Experts","text":"<p>These are the users that have been helping others the most with questions in GitHub. \ud83d\ude47</p> <p>They have proven to be ReadyAPI Experts by helping many others. \u2728</p> <p>Tip</p> <p>You could become an official ReadyAPI Expert too!</p> <p>Just help others with questions in GitHub. \ud83e\udd13</p> <p>You can see the ReadyAPI Experts for:</p> <ul> <li>Last Month \ud83e\udd13</li> <li>3 Months \ud83d\ude0e</li> <li>6 Months \ud83e\uddd0</li> <li>1 Year \ud83e\uddd1\u200d\ud83d\udd2c</li> <li>All Time \ud83e\uddd9</li> </ul>"},{"location":"readyapi-people/#readyapi-experts-last-month","title":"ReadyAPI Experts - Last Month","text":"<p>These are the users that have been helping others the most with questions in GitHub during the last month. \ud83e\udd13</p> @YuriiMotov Questions replied: 9 @luzzodev Questions replied: 8 @alv2017 Questions replied: 3 @sachinh35 Questions replied: 2 @KianAnbarestani Questions replied: 2"},{"location":"readyapi-people/#readyapi-experts-3-months","title":"ReadyAPI Experts - 3 Months","text":"<p>These are the users that have been helping others the most with questions in GitHub during the last 3 months. \ud83d\ude0e</p> @luzzodev Questions replied: 25 @YuriiMotov Questions replied: 24 @alv2017 Questions replied: 22 @jgould22 Questions replied: 13 @Kludex Questions replied: 10 @yauhen-sobaleu Questions replied: 9 @JavierSanchezCastro Questions replied: 7 @sachinh35 Questions replied: 3 @SobikXexe Questions replied: 3"},{"location":"readyapi-people/#readyapi-experts-6-months","title":"ReadyAPI Experts - 6 Months","text":"<p>These are the users that have been helping others the most with questions in GitHub during the last 6 months. \ud83e\uddd0</p> @luzzodev Questions replied: 57 @YuriiMotov Questions replied: 56 @Kludex Questions replied: 34 @alv2017 Questions replied: 25 @jgould22 Questions replied: 17 @sehraramiz Questions replied: 11 @JavierSanchezCastro Questions replied: 9 @yauhen-sobaleu Questions replied: 9 @estebanx64 Questions replied: 7 @yvallois Questions replied: 7"},{"location":"readyapi-people/#readyapi-experts-1-year","title":"ReadyAPI Experts - 1 Year","text":"<p>These are the users that have been helping others the most with questions in GitHub during the last year. \ud83e\uddd1\u200d\ud83d\udd2c</p> @YuriiMotov Questions replied: 172 @Kludex Questions replied: 63 @luzzodev Questions replied: 61 @sinisaos Questions replied: 41 @JavierSanchezCastro Questions replied: 33 @jgould22 Questions replied: 27 @alv2017 Questions replied: 25 @ceb10n Questions replied: 15 @estebanx64 Questions replied: 13 @n8sty Questions replied: 13 @Kfir-G Questions replied: 13 @sehraramiz Questions replied: 11 @PhysicallyActive Questions replied: 11 @mattmess1221 Questions replied: 11 @yauhen-sobaleu Questions replied: 9 @AIdjis Questions replied: 8 @yvallois Questions replied: 7 @hasansezertasan Questions replied: 5 @gustavosett Questions replied: 5"},{"location":"readyapi-people/#readyapi-experts-all-time","title":"ReadyAPI Experts - All Time","text":"<p>Here are the all time ReadyAPI Experts. \ud83e\udd13\ud83e\udd2f</p> <p>These are the users that have helped others the most with questions in GitHub through all time. \ud83e\uddd9</p> @Kludex Questions replied: 655 @jgould22 Questions replied: 263 @YuriiMotov Questions replied: 247 @dmontagu Questions replied: 240 @Mause Questions replied: 219 @ycd Questions replied: 217 @JarroVGIT Questions replied: 192 @euri10 Questions replied: 153 @iudeen Questions replied: 128 @phy25 Questions replied: 126 @JavierSanchezCastro Questions replied: 91 @raphaelauv Questions replied: 83 @ghandic Questions replied: 71 @ArcLightSlavik Questions replied: 71 @n8sty Questions replied: 67 @luzzodev Questions replied: 61 @falkben Questions replied: 59 @acidjunk Questions replied: 50 @yinziyan1206 Questions replied: 49 @sm-Fifteen Questions replied: 49 @adriangb Questions replied: 46 @insomnes Questions replied: 45 @Dustyposa Questions replied: 45 @odiseo0 Questions replied: 43 @frankie567 Questions replied: 43 @sinisaos Questions replied: 41 @includeamin Questions replied: 40 @chbndrhnns Questions replied: 37 @STeveShary Questions replied: 37 @krishnardt Questions replied: 35 @panla Questions replied: 32 @prostomarkeloff Questions replied: 28 @hasansezertasan Questions replied: 27 @dbanty Questions replied: 26 @alv2017 Questions replied: 25 @wshayes Questions replied: 25 @SirTelemak Questions replied: 23 @connebs Questions replied: 22 @nymous Questions replied: 22 @chrisK824 Questions replied: 22 @rafsaf Questions replied: 21 @ebottos94 Questions replied: 20 @nsidnev Questions replied: 20 @chris-allnutt Questions replied: 20 @estebanx64 Questions replied: 19 @zoliknemet Questions replied: 18 @sehraramiz Questions replied: 18 @retnikt Questions replied: 18"},{"location":"readyapi-people/#top-contributors","title":"Top Contributors","text":"<p>Here are the Top Contributors. \ud83d\udc77</p> <p>These users have created the most Pull Requests that have been merged.</p> <p>They have contributed source code, documentation, etc. \ud83d\udce6</p> @alejsdev Pull Requests: 47 @Kludex Pull Requests: 23 @dmontagu Pull Requests: 17 @euri10 Pull Requests: 13 @kantandane Pull Requests: 13 @nilslindemann Pull Requests: 11 @zhaohan-dong Pull Requests: 11 @mariacamilagl Pull Requests: 9 @handabaldeep Pull Requests: 9 @vishnuvskvkl Pull Requests: 8 @svlandeg Pull Requests: 7 @alissadb Pull Requests: 6 @wshayes Pull Requests: 5 @samuelcolvin Pull Requests: 5 @waynerv Pull Requests: 5 @krishnamadhavan Pull Requests: 5 @alv2017 Pull Requests: 5 @jekirl Pull Requests: 4 @hitrust Pull Requests: 4 @ShahriyarR Pull Requests: 4 @adriangb Pull Requests: 4 @iudeen Pull Requests: 4 @philipokiokio Pull Requests: 4 @AlexWendland Pull Requests: 4 @divums Pull Requests: 3 @prostomarkeloff Pull Requests: 3 @nsidnev Pull Requests: 3 @pawamoy Pull Requests: 3 @patrickmckenna Pull Requests: 3 @hukkin Pull Requests: 3 @marcosmmb Pull Requests: 3 @Serrones Pull Requests: 3 @uriyyo Pull Requests: 3 @andrew222651 Pull Requests: 3 @rkbeatss Pull Requests: 3 @asheux Pull Requests: 3 @n25a Pull Requests: 3 @ghandic Pull Requests: 3 @TeoZosa Pull Requests: 3 @graingert Pull Requests: 3 @jaystone776 Pull Requests: 3 @zanieb Pull Requests: 3 @MicaelJarniac Pull Requests: 3 @papb Pull Requests: 3 @musicinmybrain Pull Requests: 3 @gitworkflows Pull Requests: 3 <p>There are hundreds of other contributors, you can see them all in the ReadyAPI GitHub Contributors page. \ud83d\udc77</p>"},{"location":"readyapi-people/#top-translators","title":"Top Translators","text":"<p>These are the Top Translators. \ud83c\udf10</p> <p>These users have created the most Pull Requests with translations to other languages that have been merged.</p> @nilslindemann Translations: 120 @jaystone776 Translations: 46 @ceb10n Translations: 27 @tokusumi Translations: 23 @SwftAlpc Translations: 23 @hasansezertasan Translations: 22 @waynerv Translations: 20 @valentinDruzhinin Translations: 18 @AlertRED Translations: 16 @hard-coders Translations: 15 @Joao-Pedro-P-Holanda Translations: 14 @codingjenny Translations: 14 @Xewus Translations: 13 @Zhongheng-Cheng Translations: 13 @Smlep Translations: 11 @marcelomarkus Translations: 11 @KaniKim Translations: 10 @Vincy1230 Translations: 9 @rjNemo Translations: 8 @xzmeng Translations: 8 @pablocm83 Translations: 8 @ptt3199 Translations: 7 @batlopes Translations: 6 @lucasbalieiro Translations: 6 @Alexandrhub Translations: 6 @Serrones Translations: 5 @RunningIkkyu Translations: 5 @Attsun1031 Translations: 5 @NinaHwang Translations: 5 @rostik1410 Translations: 5 @alv2017 Translations: 5 @komtaki Translations: 4 @JulianMaurin Translations: 4 @stlucasgarcia Translations: 4 @ComicShrimp Translations: 4 @BilalAlpaslan Translations: 4 @axel584 Translations: 4 @tamtam-fitness Translations: 4 @Limsunoh Translations: 4 @kwang1215 Translations: 4 @k94-ishi Translations: 4 @jfunez Translations: 3 @ycd Translations: 3 @mariacamilagl Translations: 3 @maoyibo Translations: 3 @blt232018 Translations: 3 @magiskboy Translations: 3 @luccasmmg Translations: 3 @lbmendes Translations: 3"},{"location":"readyapi-people/#top-translation-reviewers","title":"Top Translation Reviewers","text":"<p>These users are the Top Translation Reviewers. \ud83d\udd75\ufe0f</p> <p>I only speak a few languages (and not very well \ud83d\ude05). So, the reviewers are the ones that have the power to approve translations of the documentation. Without them, there wouldn't be documentation in several other languages.</p> @s111d Reviews: 147 @Xewus Reviews: 140 @sodaMelon Reviews: 124 @ceb10n Reviews: 112 @tokusumi Reviews: 104 @hasansezertasan Reviews: 95 @hard-coders Reviews: 92 @alv2017 Reviews: 88 @nazarepiedady Reviews: 83 @AlertRED Reviews: 81 @Alexandrhub Reviews: 68 @waynerv Reviews: 63 @cassiobotaro Reviews: 62 @mattwang44 Reviews: 59 @Laineyzhang55 Reviews: 48 @Kludex Reviews: 47 @komtaki Reviews: 45 @rostik1410 Reviews: 42 @svlandeg Reviews: 42 @alperiox Reviews: 42 @Rishat-F Reviews: 42 @Winand Reviews: 40 @solomein-sv Reviews: 38 @JavierSanchezCastro Reviews: 38 @stlucasgarcia Reviews: 36 @SwftAlpc Reviews: 36 @alejsdev Reviews: 36 @timothy-jeong Reviews: 36 @nilslindemann Reviews: 35 @rjNemo Reviews: 34 @codingjenny Reviews: 34 @mezgoodle Reviews: 33 @akarev0 Reviews: 33 @romashevchenko Reviews: 32 @LorhanSohaky Reviews: 30 @Vincy1230 Reviews: 30 @black-redoc Reviews: 29 @pedabraham Reviews: 28 @Smlep Reviews: 28 @dedkot01 Reviews: 28 @hsuanchi Reviews: 28 @dpinezich Reviews: 28 @maoyibo Reviews: 27 @0417taehyun Reviews: 27 @BilalAlpaslan Reviews: 26 @junah201 Reviews: 26 @zy7y Reviews: 25 @mycaule Reviews: 25 @Aruelius Reviews: 24"},{"location":"readyapi-people/#sponsors","title":"Sponsors","text":"<p>These are the Sponsors. \ud83d\ude0e</p> <p>They are supporting my work with ReadyAPI (and others), mainly through GitHub Sponsors.</p>"},{"location":"readyapi-people/#gold-sponsors","title":"Gold Sponsors","text":""},{"location":"readyapi-people/#silver-sponsors","title":"Silver Sponsors","text":""},{"location":"readyapi-people/#bronze-sponsors","title":"Bronze Sponsors","text":""},{"location":"readyapi-people/#individual-sponsors","title":"Individual Sponsors","text":"@coderabbitai @Nixtla @permitio @mercedes-benz @marvin-robot @Ponte-Energy-Partners @LambdaTest-Inc @BoostryJP @acsone @Trivie @takashi-yoneya @mainframeindustries @yasyf @alixlahuec @primer-io @upciti @f4rk4sh @freddiev4 @samuelcolvin @vincentkoc @otosky @ramonalmeidam @ashi-agrawal @sepsi77 @RaamEEIL @ehaca @raphaellaude @timlrx @Leay15 @ProteinQure @roboflow @kaoru0310 @DelfinaCare @Karine-Bauch @eruditis @jugeeem @logic-automation @dudikbender @patsatsia @anthonycepeda @patricioperezv @chickenandstats @dodo5522 @knallgelb @dblackrun @zsinx6 @kennywakeland @aacayaco @anomaly @gorhack @Ryandaydev @jaredtrog @jstanden @paulcwatts @andreaso @robintw @pamelafox @ericof @wshayes @gaetanBloch @koxudaxi @falkben @mintuhouse @oliverxchen @TrevorBenson @wdwinslow @catherinenelson1 @jsoques @joeds13 @dannywade @khadrawy @mjohnsey @ternaus @eseglem @FernandoCelmer @simw @Rehket @hiancdtrsnm @jpizquierdo @pawamoy @bnkc @petercool @siavashyj @mobyw @ArtyomVancyan @caviri @hgalytoby @joshuatz @SebTota @nisutec @hoenie-ams @joerambo @rlnchow @dvlpjrs @engineerjoe440 @conservative-dude @CR1337 @PunRabbit @PelicanQ @tochikuji @browniebroke @miguelgr @WillHogan @my3 @leobiscassi @Alisa-lisa @ddanier @bryanculbertson @slafs @ceb10n @moonape1226 @msehnout @xncbf @DMantis @hard-coders @supdann @mntolia @pheanex @Zuzah @artempronevskiy @TheR1D @danielunderwood @rangulvers @sdevkota @brizzbuzz @Baghdady92 @KentShikama @katnoria @harsh183 @hcristea @larsyngvelundin @andrecorumba @rwxd @morzan1001 @sadikkuzu @Olegt0rr @Miles-Arts @sandeepsalwan1 @fabioantonioastore @zhandos256 @one-st-one @Toothwitch @ssbarnea @andreagrandi"},{"location":"readyapi-people/#about-the-data-technical-details","title":"About the data - technical details","text":"<p>The main intention of this page is to highlight the effort of the community to help others.</p> <p>Especially including efforts that are normally less visible, and in many cases more arduous, like helping others with questions and reviewing Pull Requests with translations.</p> <p>The data is calculated each month, you can read the source code here.</p> <p>Here I'm also highlighting contributions from sponsors.</p> <p>I also reserve the right to update the algorithm, sections, thresholds, etc (just in case \ud83e\udd37).</p>"},{"location":"resources/","title":"Resources","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>Additional resources, external links, articles and more. \u2708\ufe0f</p>"},{"location":"contributing/","title":"Development - Contributing","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>First, you might want to see the basic ways to help ReadyAPI and get help.</p>"},{"location":"contributing/#developing","title":"Developing","text":"<p>If you already cloned the readyapi repository and you want to deep dive in the code, here are some guidelines to set up your environment.</p>"},{"location":"contributing/#virtual-environment","title":"Virtual environment","text":"<p>Follow the instructions to create and activate a virtual environment for the internal code of <code>readyapi</code>.</p>"},{"location":"contributing/#install-requirements-using-pip","title":"Install requirements using pip","text":"<p>After activating the environment, install the required packages:</p> <pre><code>$ pip install -r requirements.txt\n\n---&gt; 100%\n</code></pre> <p>It will install all the dependencies and your local ReadyAPI in your local environment.</p>"},{"location":"contributing/#using-your-local-readyapi","title":"Using your local ReadyAPI","text":"<p>If you create a Python file that imports and uses ReadyAPI, and run it with the Python from your local environment, it will use your cloned local ReadyAPI source code.</p> <p>And if you update that local ReadyAPI source code when you run that Python file again, it will use the fresh version of ReadyAPI you just edited.</p> <p>That way, you don't have to \"install\" your local version to be able to test every change.</p> <p>Technical Details</p> <p>This only happens when you install using this included <code>requirements.txt</code> instead of running <code>pip install readyapi</code> directly.</p> <p>That is because inside the <code>requirements.txt</code> file, the local version of ReadyAPI is marked to be installed in \"editable\" mode, with the <code>-e</code> option.</p>"},{"location":"contributing/#format-the-code","title":"Format the code","text":"<p>There is a script that you can run that will format and clean all your code:</p> <pre><code>$ bash scripts/format.sh\n</code></pre> <p>It will also auto-sort all your imports.</p>"},{"location":"contributing/#tests","title":"Tests","text":"<p>There is a script that you can run locally to test all the code and generate coverage reports in HTML:</p> <pre><code>$ bash scripts/test-cov-html.sh\n</code></pre> <p>This command generates a directory <code>./htmlcov/</code>, if you open the file <code>./htmlcov/index.html</code> in your browser, you can explore interactively the regions of code that are covered by the tests, and notice if there is any region missing.</p>"},{"location":"contributing/#docs","title":"Docs","text":"<p>First, make sure you set up your environment as described above, that will install all the requirements.</p>"},{"location":"contributing/#docs-live","title":"Docs live","text":"<p>During local development, there is a script that builds the site and checks for any changes, live-reloading:</p> <pre><code>$ python ./scripts/docs.py live\n\n&lt;span style=\"color: green;\"&gt;[INFO]&lt;/span&gt; Serving on http://127.0.0.1:8008\n&lt;span style=\"color: green;\"&gt;[INFO]&lt;/span&gt; Start watching changes\n&lt;span style=\"color: green;\"&gt;[INFO]&lt;/span&gt; Start detecting changes\n</code></pre> <p>It will serve the documentation on <code>http://127.0.0.1:8008</code>.</p> <p>That way, you can edit the documentation/source files and see the changes live.</p> <p>Tip</p> <p>Alternatively, you can perform the same steps that scripts does manually.</p> <p>Go into the language directory, for the main docs in English it's at <code>docs/en/</code>:</p> <pre><code>$ cd docs/en/\n</code></pre> <p>Then run <code>mkdocs</code> in that directory:</p> <pre><code>$ mkdocs serve --dev-addr 127.0.0.1:8008\n</code></pre>"},{"location":"contributing/#cligenius-cli-optional","title":"Cligenius CLI (optional)","text":"<p>The instructions here show you how to use the script at <code>./scripts/docs.py</code> with the <code>python</code> program directly.</p> <p>But you can also use Cligenius CLI, and you will get autocompletion in your terminal for the commands after installing completion.</p> <p>If you install Cligenius CLI, you can install completion with:</p> <pre><code>$ cligenius --install-completion\n\nzsh completion installed in /home/user/.bashrc.\nCompletion will take effect once you restart the terminal.\n</code></pre>"},{"location":"contributing/#docs-structure","title":"Docs Structure","text":"<p>The documentation uses MkDocs.</p> <p>And there are extra tools/scripts in place to handle translations in <code>./scripts/docs.py</code>.</p> <p>Tip</p> <p>You don't need to see the code in <code>./scripts/docs.py</code>, you just use it in the command line.</p> <p>All the documentation is in Markdown format in the directory <code>./docs/en/</code>.</p> <p>Many of the tutorials have blocks of code.</p> <p>In most of the cases, these blocks of code are actual complete applications that can be run as is.</p> <p>In fact, those blocks of code are not written inside the Markdown, they are Python files in the <code>./docs_src/</code> directory.</p> <p>And those Python files are included/injected in the documentation when generating the site.</p>"},{"location":"contributing/#docs-for-tests","title":"Docs for tests","text":"<p>Most of the tests actually run against the example source files in the documentation.</p> <p>This helps to make sure that:</p> <ul> <li>The documentation is up-to-date.</li> <li>The documentation examples can be run as is.</li> <li>Most of the features are covered by the documentation, ensured by test coverage.</li> </ul>"},{"location":"contributing/#apps-and-docs-at-the-same-time","title":"Apps and docs at the same time","text":"<p>If you run the examples with, e.g.:</p> <pre><code>$ readyapi dev tutorial001.py\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>as Uvicorn by default will use the port <code>8000</code>, the documentation on port <code>8008</code> won't clash.</p>"},{"location":"contributing/#translations","title":"Translations","text":"<p>Help with translations is VERY MUCH appreciated! And it can't be done without the help from the community. \ud83c\udf0e \ud83d\ude80</p> <p>Here are the steps to help with translations.</p>"},{"location":"contributing/#tips-and-guidelines","title":"Tips and guidelines","text":"<ul> <li> <p>Check the currently existing pull requests for your language. You can filter the pull requests by the ones with the label for your language. For example, for Spanish, the label is <code>lang-es</code>.</p> </li> <li> <p>Review those pull requests, requesting changes or approving them. For the languages I don't speak, I'll wait for several others to review the translation before merging.</p> </li> </ul> <p>Tip</p> <p>You can add comments with change suggestions to existing pull requests.</p> <p>Check the docs about adding a pull request review to approve it or request changes.</p> <ul> <li> <p>Check if there's a GitHub Discussion to coordinate translations for your language. You can subscribe to it, and when there's a new pull request to review, an automatic comment will be added to the discussion.</p> </li> <li> <p>If you translate pages, add a single pull request per page translated. That will make it much easier for others to review it.</p> </li> <li> <p>To check the 2-letter code for the language you want to translate, you can use the table List of ISO 639-1 codes.</p> </li> </ul>"},{"location":"contributing/#existing-language","title":"Existing language","text":"<p>Let's say you want to translate a page for a language that already has translations for some pages, like Spanish.</p> <p>In the case of Spanish, the 2-letter code is <code>es</code>. So, the directory for Spanish translations is located at <code>docs/es/</code>.</p> <p>Tip</p> <p>The main (\"official\") language is English, located at <code>docs/en/</code>.</p> <p>Now run the live server for the docs in Spanish:</p> <pre><code>// Use the command \"live\" and pass the language code as a CLI argument\n$ python ./scripts/docs.py live es\n\n&lt;span style=\"color: green;\"&gt;[INFO]&lt;/span&gt; Serving on http://127.0.0.1:8008\n&lt;span style=\"color: green;\"&gt;[INFO]&lt;/span&gt; Start watching changes\n&lt;span style=\"color: green;\"&gt;[INFO]&lt;/span&gt; Start detecting changes\n</code></pre> <p>Tip</p> <p>Alternatively, you can perform the same steps that scripts does manually.</p> <p>Go into the language directory, for the Spanish translations it's at <code>docs/es/</code>:</p> <pre><code>$ cd docs/es/\n</code></pre> <p>Then run <code>mkdocs</code> in that directory:</p> <pre><code>$ mkdocs serve --dev-addr 127.0.0.1:8008\n</code></pre> <p>Now you can go to http://127.0.0.1:8008 and see your changes live.</p> <p>You will see that every language has all the pages. But some pages are not translated and have an info box at the top, about the missing translation.</p> <p>Now let's say that you want to add a translation for the section Features.</p> <ul> <li>Copy the file at:</li> </ul> <pre><code>docs/en/docs/features.md\n</code></pre> <ul> <li>Paste it in exactly the same location but for the language you want to translate, e.g.:</li> </ul> <pre><code>docs/es/docs/features.md\n</code></pre> <p>Tip</p> <p>Notice that the only change in the path and file name is the language code, from <code>en</code> to <code>es</code>.</p> <p>If you go to your browser you will see that now the docs show your new section (the info box at the top is gone). \ud83c\udf89</p> <p>Now you can translate it all and see how it looks as you save the file.</p>"},{"location":"contributing/#dont-translate-these-pages","title":"Don't Translate these Pages","text":"<p>\ud83d\udea8 Don't translate:</p> <ul> <li>Files under <code>reference/</code></li> <li><code>release-notes.md</code></li> <li><code>readyapi-people.md</code></li> <li><code>external-links.md</code></li> <li><code>newsletter.md</code></li> <li><code>management-tasks.md</code></li> <li><code>management.md</code></li> <li><code>contributing.md</code></li> </ul> <p>Some of these files are updated very frequently and a translation would always be behind, or they include the main content from English source files, etc.</p>"},{"location":"contributing/#new-language","title":"New Language","text":"<p>Let's say that you want to add translations for a language that is not yet translated, not even some pages.</p> <p>Let's say you want to add translations for Creole, and it's not yet there in the docs.</p> <p>Checking the link from above, the code for \"Creole\" is <code>ht</code>.</p> <p>The next step is to run the script to generate a new translation directory:</p> <pre><code>// Use the command new-lang, pass the language code as a CLI argument\n$ python ./scripts/docs.py new-lang ht\n\nSuccessfully initialized: docs/ht\n</code></pre> <p>Now you can check in your code editor the newly created directory <code>docs/ht/</code>.</p> <p>That command created a file <code>docs/ht/mkdocs.yml</code> with a simple config that inherits everything from the <code>en</code> version:</p> <pre><code>INHERIT: ../en/mkdocs.yml\n</code></pre> <p>Tip</p> <p>You could also simply create that file with those contents manually.</p> <p>That command also created a dummy file <code>docs/ht/index.md</code> for the main page, you can start by translating that one.</p> <p>You can continue with the previous instructions for an \"Existing Language\" for that process.</p> <p>You can make the first pull request with those two files, <code>docs/ht/mkdocs.yml</code> and <code>docs/ht/index.md</code>. \ud83c\udf89</p>"},{"location":"contributing/#preview-the-result","title":"Preview the result","text":"<p>As already mentioned above, you can use the <code>./scripts/docs.py</code> with the <code>live</code> command to preview the results (or <code>mkdocs serve</code>).</p> <p>Once you are done, you can also test it all as it would look online, including all the other languages.</p> <p>To do that, first build all the docs:</p> <pre><code>// Use the command \"build-all\", this will take a bit\n$ python ./scripts/docs.py build-all\n\nBuilding docs for: en\nBuilding docs for: es\nSuccessfully built docs for: es\n</code></pre> <p>This builds all those independent MkDocs sites for each language, combines them, and generates the final output at <code>./site/</code>.</p> <p>Then you can serve that with the command <code>serve</code>:</p> <pre><code>// Use the command \"serve\" after running \"build-all\"\n$ python ./scripts/docs.py serve\n\nWarning: this is a very simple server. For development, use mkdocs serve instead.\nThis is here only to preview a site with translations already built.\nMake sure you run the build-all command first.\nServing at: http://127.0.0.1:8008\n</code></pre>"},{"location":"contributing/#translation-specific-tips-and-guidelines","title":"Translation specific tips and guidelines","text":"<ul> <li> <p>Translate only the Markdown documents (<code>.md</code>). Do not translate the code examples at <code>./docs_src</code>.</p> </li> <li> <p>In code blocks within the Markdown document, translate comments (<code># a comment</code>), but leave the rest unchanged.</p> </li> <li> <p>Do not change anything enclosed in \"``\" (inline code).</p> </li> <li> <p>In lines starting with <code>///</code> translate only the text part after <code>|</code>. Leave the rest unchanged.</p> </li> <li> <p>You can translate info boxes like <code>/// warning</code> with for example <code>/// warning | Achtung</code>. But do not change the word immediately after the <code>///</code>, it determines the color of the info box.</p> </li> <li> <p>Do not change the paths in links to images, code files, Markdown documents.</p> </li> <li> <p>However, when a Markdown document is translated, the <code>#hash-parts</code> in links to its headings may change. Update these links if possible.</p> <ul> <li>Search for such links in the translated document using the regex <code>#[^# ]</code>.</li> <li>Search in all documents already translated into your language for <code>your-translated-document.md</code>. For example VS Code has an option \"Edit\" -&gt; \"Find in Files\".</li> <li>When translating a document, do not \"pre-translate\" <code>#hash-parts</code> that link to headings in untranslated documents.</li> </ul> </li> </ul>"},{"location":"external-links/","title":"External Links and Articles","text":"<p>ReadyAPI has a great community constantly growing.</p> <p>There are many posts, articles, tools, and projects, related to ReadyAPI.</p> <p>Here's an incomplete list of some of them.</p> <p>Tip</p> <p>If you have an article, project, tool, or anything related to ReadyAPI that is not yet listed here, create a Pull Request adding it.</p>"},{"location":"external-links/#articles","title":"Articles","text":""},{"location":"external-links/#english","title":"English","text":"<ul> <li> <p>How to profile a ReadyAPI asynchronous request by Balthazar Rouberol.</p> </li> <li> <p>Deploy a Serverless ReadyAPI App with Neon Postgres and AWS App Runner at any scale by Stephen Siegert - Neon.</p> </li> <li> <p>Building a Machine Learning Microservice with ReadyAPI by Kurtis Pykes - NVIDIA.</p> </li> <li> <p>Booking Appointments with Twilio, Notion, and ReadyAPI by Ravgeet Dhillon - Twilio.</p> </li> <li> <p>Write a Python data layer with Azure Cosmos DB and ReadyAPI by Abhinav Tripathi - Microsoft Blogs.</p> </li> <li> <p>10 Tips for adding SQLAlchemy to ReadyAPI by Donny Peeters.</p> </li> <li> <p>Tips on migrating from Flask to ReadyAPI and vice-versa by Jessica Temporal.</p> </li> <li> <p>Explore How to Effectively Use JWT With ReadyAPI by Ankit Anchlia.</p> </li> <li> <p>Instrument ReadyAPI with OpenTelemetry tracing and visualize traces in Grafana Tempo. by Nicol\u00f3 Lino.</p> </li> <li> <p>ML serving and monitoring with ReadyAPI and Evidently by Mikhail Rozhkov, Elena Samuylova.</p> </li> <li> <p>ReadyAPI Tutorial in Visual Studio Code by Visual Studio Code Team.</p> </li> <li> <p>ReadyAPI application monitoring made easy by Apitally.</p> </li> <li> <p>Building a RESTful API with ReadyAPI: Secure Signup and Login Functionality Included by John Philip.</p> </li> <li> <p>Building a CRUD API with ReadyAPI and Supabase by Keshav Malik.</p> </li> <li> <p>Build an SMS Spam Classifier Serverless Database with FaunaDB and ReadyAPI by Adejumo Ridwan Suleiman.</p> </li> <li> <p>ReadyAPI lambda container: serverless simplified by Raf Rasenberg.</p> </li> <li> <p>Authorization on ReadyAPI with Casbin by Teresa N. Fontanella De Santis.</p> </li> <li> <p>How to monitor ReadyAPI application performance using Python agent by New Relic.</p> </li> <li> <p>Building the Poll App From Django Tutorial With ReadyAPI And React by Jean-Baptiste Rocher.</p> </li> <li> <p>Seamless ReadyAPI Configuration with ConfZ by Silvan Melchior.</p> </li> <li> <p>5 Advanced Features of ReadyAPI You Should Try by Kaustubh Gupta.</p> </li> <li> <p>Deploying ML Models as API Using ReadyAPI and Heroku by Kaustubh Gupta.</p> </li> <li> <p>Using GitHub Actions to Deploy a ReadyAPI Project to Heroku by Somraj Saha.</p> </li> <li> <p>How to Create A Fake Certificate Authority And Generate TLS Certs for ReadyAPI by @pystar.</p> </li> <li> <p>Building a realtime ticket booking solution with Kafka, ReadyAPI, and Ably by Ben Gamble.</p> </li> <li> <p>Building simple E-Commerce with NuxtJS and ReadyAPI by Shahriyar(Shako) Rzayev.</p> </li> <li> <p>Serve a machine learning model using Sklearn, ReadyAPI and Docker by Rodrigo Arenas.</p> </li> <li> <p>Building an API with ReadyAPI and Supabase and Deploying on Deta by Yashasvi Singh.</p> </li> <li> <p>Deploy ReadyAPI on Ubuntu and Serve using Caddy 2 Web Server by Navule Pavan Kumar Rao.</p> </li> <li> <p>Python Facebook messenger webhook with ReadyAPI on Glitch by Patrick Ladon.</p> </li> <li> <p>Deploy a dockerized ReadyAPI application to AWS by Valon Januzaj.</p> </li> <li> <p>ReadyAPI for Flask Users by Amit Chaudhary.</p> </li> <li> <p>How to monitor your ReadyAPI service by Louis Guitton.</p> </li> <li> <p>Creating a CRUD App with ReadyAPI (Part one) by Precious Ndubueze.</p> </li> <li> <p>Build And Host Fast Data Science Applications Using ReadyAPI by Farhad Malik.</p> </li> <li> <p>Deploy ReadyAPI on Azure App Service by Navule Pavan Kumar Rao.</p> </li> <li> <p>Machine learning model serving in Python using ReadyAPI and streamlit by Davide Fiocco.</p> </li> <li> <p>Introducing Dispatch by Netflix.</p> </li> <li> <p>Using ReadyAPI with Django by Stavros Korokithakis.</p> </li> <li> <p>Build a Secure Twilio Webhook with Python and ReadyAPI by Twilio.</p> </li> <li> <p>Build a web API from scratch with ReadyAPI - the workshop by KhulnaSoft Ltd (khulnasoft).</p> </li> <li> <p>ReadyAPI + Zeit.co = \ud83d\ude80 by Paul Sec.</p> </li> <li> <p>Build simple API service with Python ReadyAPI \u2014 Part 1 by cuongld2.</p> </li> <li> <p>Microservice in Python using ReadyAPI by Paurakh Sharma Humagain.</p> </li> <li> <p>Real-time Notifications with Python and Postgres by Guillermo Cruz.</p> </li> <li> <p>Create and Deploy ReadyAPI app to Heroku without using Docker by Navule Pavan Kumar Rao.</p> </li> <li> <p>Another Boilerplate to ReadyAPI: Azure Pipeline CI + Pytest by Arthur Henrique.</p> </li> <li> <p>Deploy Machine Learning Models with Keras, ReadyAPI, Redis and Docker by Shane Soh.</p> </li> <li> <p>Towards Data Science: Deploying Iris Classifications with ReadyAPI and Docker by Mandy Gu.</p> </li> <li> <p>TestDriven.io: Developing and Testing an Asynchronous API with ReadyAPI and Pytest by Michael Herman.</p> </li> <li> <p>How To Deploy Tensorflow 2.0 Models As An API Service With ReadyAPI &amp; Docker by Bernard Brenyah.</p> </li> <li> <p>Why I'm Leaving Flask by Dylan Anthony.</p> </li> <li> <p>Using Docker Compose to deploy a lightweight Python REST API with a job queue by Mike Moritz.</p> </li> <li> <p>A ReadyAPI and Swagger UI visual cheatsheet by @euri10.</p> </li> <li> <p>Uber: Ludwig v0.2 Adds New Features and Other Improvements to its Deep Learning Toolbox [including a ReadyAPI server] by Uber Engineering.</p> </li> <li> <p>How to Deploy a Machine Learning Model by Maarten Grootendorst.</p> </li> <li> <p>JWT Authentication with ReadyAPI and AWS Cognito by Johannes Gontrum.</p> </li> <li> <p>Top 5 Asynchronous Web Frameworks for Python by Ankush Thakur.</p> </li> <li> <p>Deploying a scikit-learn model with ONNX and ReadyAPI by Nico Axtmann.</p> </li> <li> <p>ReadyAPI authentication revisited: Enabling API key authentication by Nils de Bruin.</p> </li> <li> <p>ReadyAPI and Scikit-Learn: Easily Deploy Models by Nick Cortale.</p> </li> <li> <p>Introduction to the readyapi python framework by Errieta Kostala.</p> </li> <li> <p>ReadyAPI\u200a\u2014\u200aHow to add basic and cookie authentication by Nils de Bruin.</p> </li> <li> <p>ReadyAPI\u200a\u2014\u200aGoogle as an external authentication provider by Nils de Bruin.</p> </li> <li> <p>ReadyAPI/Starlette debug vs prod by William Hayes.</p> </li> <li> <p>Developing ReadyAPI Application using K8s &amp; AWS by Mukul Mantosh.</p> </li> <li> <p>Readyapi, Docker(Docker compose) and Postgres by KrishNa.</p> </li> <li> <p>Deployment using Docker, Lambda, Aurora, CDK &amp; GH Actions by Devon Ray.</p> </li> <li> <p>Mastering Soft Delete: Advanced SQLAlchemy Techniques by Shubhendra Kushwaha.</p> </li> <li> <p>Role based row filtering: Advanced SQLAlchemy Techniques by Shubhendra Kushwaha.</p> </li> </ul>"},{"location":"external-links/#german","title":"German","text":"<ul> <li> <p>Domain-driven Design mit Python und ReadyAPI by Marcel Sander (actidoo).</p> </li> <li> <p>Inbetriebnahme eines scikit-learn-Modells mit ONNX und ReadyAPI by Nico Axtmann.</p> </li> <li> <p>REST-API Programmieren mittels Python und dem ReadyAPI Modul by Felix Sch\u00fcrmeyer.</p> </li> </ul>"},{"location":"external-links/#japanese","title":"Japanese","text":"<ul> <li> <p>[ReadyAPI] Python\u200b\u88fd\u200b\u306eASGI Web \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af ReadyAPI\u306b\u200b\u5165\u9580\u200b\u3059\u308b by @bee2.</p> </li> <li> <p>Python\u306eWeb framework\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u200b\u6bd4\u8f03\u200b (Django, Flask, responder, ReadyAPI, japronto) by @bee2.</p> </li> <li> <p>\u3010\u200b\u7b2c\u200b4\u200b\u56de\u200b\u3011ReadyAPI\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb: toDo\u30a2\u30d7\u30ea\u3092\u200b\u4f5c\u200b\u3063\u3066\u307f\u3088\u3046\u3010\u200b\u7ba1\u7406\u8005\u200b\u30da\u30fc\u30b8\u200b\u6539\u826f\u200b\u7de8\u200b\u3011 by \u30e9\u30a4\u30c8\u30b3\u30fc\u30c9\u30e1\u30c7\u30a3\u30a2\u200b\u7de8\u200b\u96c6\u90e8\u200b.</p> </li> <li> <p>\u3010\u200b\u7b2c\u200b3\u200b\u56de\u200b\u3011ReadyAPI\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb: toDo\u30a2\u30d7\u30ea\u3092\u200b\u4f5c\u200b\u3063\u3066\u307f\u3088\u3046\u3010\u200b\u8a8d\u200b\u8a3c\u200b\u30fb\u30e6\u30fc\u30b6\u200b\u767b\u200b\u9332\u200b\u7de8\u200b\u3011 by \u30e9\u30a4\u30c8\u30b3\u30fc\u30c9\u30e1\u30c7\u30a3\u30a2\u200b\u7de8\u200b\u96c6\u90e8\u200b.</p> </li> <li> <p>\u3010\u200b\u7b2c\u200b2\u200b\u56de\u200b\u3011ReadyAPI\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb: ToDo\u30a2\u30d7\u30ea\u3092\u200b\u4f5c\u200b\u3063\u3066\u307f\u3088\u3046\u3010\u30e2\u30c7\u30eb\u200b\u69cb\u7bc9\u7de8\u200b\u3011 by \u30e9\u30a4\u30c8\u30b3\u30fc\u30c9\u30e1\u30c7\u30a3\u30a2\u200b\u7de8\u200b\u96c6\u90e8\u200b.</p> </li> <li> <p>\u3010\u200b\u7b2c\u200b1\u200b\u56de\u200b\u3011ReadyAPI\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb: ToDo\u30a2\u30d7\u30ea\u3092\u200b\u4f5c\u200b\u3063\u3066\u307f\u3088\u3046\u3010\u200b\u74b0\u5883\u200b\u69cb\u7bc9\u7de8\u200b\u3011 by \u30e9\u30a4\u30c8\u30b3\u30fc\u30c9\u30e1\u30c7\u30a3\u30a2\u200b\u7de8\u200b\u96c6\u90e8\u200b.</p> </li> <li> <p>\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u200b\u958b\u200b\u767a\u200b\u8005\u200b\u5411\u200b\u3051\u306eDocker\u306b\u3088\u308bPython\u200b\u958b\u200b\u767a\u200b\u74b0\u200b\u5883\u200b\u69cb\u200b\u7bc9\u200b by Hikaru Takahashi.</p> </li> <li> <p>ReadyAPI\u3067POST\u3055\u308c\u305fJSON\u306e\u30ec\u30b9\u30dd\u30f3\u30b9body\u3092\u200b\u53d7\u200b\u3051\u200b\u53d6\u200b\u308b by @angel_katayoku.</p> </li> <li> <p>ReadyAPI\u3092MySQL\u3068\u200b\u63a5\u200b\u7d9a\u200b\u3057\u3066Docker\u3067\u200b\u7ba1\u7406\u200b\u3057\u3066\u307f\u308b by @angel_katayoku.</p> </li> <li> <p>ReadyAPI\u3067CORS\u3092\u200b\u56de\u907f\u200b by @angel_katayoku.</p> </li> <li> <p>python\u200b\u88fd\u200b\u306e\u200b\u6700\u65b0\u200bAPI\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af ReadyAPI \u3092\u200b\u89e6\u200b\u3063\u3066\u307f\u305f by @ryoryomaru.</p> </li> <li> <p>ReadyAPI\uff5cDB\u200b\u63a5\u200b\u7d9a\u200b\u3057\u3066CRUD\u3059\u308bPython\u200b\u88fd\u200bAPI\u30b5\u30fc\u30d0\u30fc\u3092\u200b\u69cb\u7bc9\u200b by @mtitg.</p> </li> </ul>"},{"location":"external-links/#portuguese","title":"Portuguese","text":"<ul> <li> <p>ReadyAPI do ZERO by Eduardo Mendes.</p> </li> <li> <p>Dicas para migrar uma aplica\u00e7\u00e3o de Flask para ReadyAPI e vice-versa by Jessica Temporal.</p> </li> </ul>"},{"location":"external-links/#russian","title":"Russian","text":"<ul> <li> <p>ReadyAPI: \u0437\u043d\u0430\u043a\u043e\u043c\u0438\u043c\u0441\u044f \u0441 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u043c by Troy K\u00f6hler.</p> </li> <li> <p>\u041f\u043e\u0447\u0435\u043c\u0443 \u0412\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c ReadyAPI? by prostomarkeloff.</p> </li> <li> <p>\u041c\u0435\u043b\u043a\u0430\u044f \u043f\u0438\u0442\u043e\u043d\u044f\u0447\u0430\u044f \u0440\u0430\u0434\u043e\u0441\u0442\u044c #2: Starlette - \u0421\u043e\u043b\u0438\u0434\u043d\u0430\u044f \u043f\u0440\u0438\u043c\u043e\u0447\u043a\u0430 \u2013 ReadyAPI by Andrey Korchak.</p> </li> </ul>"},{"location":"external-links/#vietnamese","title":"Vietnamese","text":"<ul> <li>READYAPI: TRI\u1ec2N KHAI B\u1eb0NG DOCKER by Nguy\u1ec5n Nh\u00e2n.</li> </ul>"},{"location":"external-links/#taiwanese","title":"Taiwanese","text":"<ul> <li>Tortoise ORM / ReadyAPI \u200b\u6574\u5408\u200b\u5feb\u901f\u200b\u7b46\u8a18\u200b by Leon.</li> </ul>"},{"location":"external-links/#spanish","title":"Spanish","text":"<ul> <li>Tutorial de ReadyAPI, \u00bfel mejor framework de Python? by Eduardo Zepeda.</li> </ul>"},{"location":"external-links/#podcasts","title":"Podcasts","text":""},{"location":"external-links/#english_1","title":"English","text":"<ul> <li> <p>Starting With ReadyAPI and Examining Python's Import System - Episode 72 by Real Python.</p> </li> <li> <p>Do you dare to press \".\"? - Episode 247 - Dan #6: SQLDev - use the same models for SQL and ReadyAPI by Python Bytes FM.</p> </li> <li> <p>Build The Next Generation Of Python Web Applications With ReadyAPI - Episode 259 - interview to Sebast\u00edan Ram\u00edrez (khulnasoft) by Podcast.<code>__init__</code>.</p> </li> <li> <p>ReadyAPI on PythonBytes by Python Bytes FM.</p> </li> </ul>"},{"location":"external-links/#talks","title":"Talks","text":""},{"location":"external-links/#english_2","title":"English","text":"<ul> <li> <p>PyCon AU 2023: Testing asynchronous applications with ReadyAPI and pytest by Jeny Sadadia.</p> </li> <li> <p>[VIRTUAL] Py.Amsterdam's flying Software Circus: Intro to ReadyAPI by KhulnaSoft Ltd (khulnasoft).</p> </li> <li> <p>PyConBY 2020: Serve ML models easily with ReadyAPI by KhulnaSoft Ltd (khulnasoft).</p> </li> <li> <p>PyCon UK 2019: ReadyAPI from the ground up by Chris Withers.</p> </li> </ul>"},{"location":"external-links/#taiwanese_1","title":"Taiwanese","text":"<ul> <li>PyCon TW 2024: \u200b\u5168\u65b9\u4f4d\u200b\u5f37\u5316\u200b Python \u200b\u670d\u52d9\u200b\u53ef\u89c0\u200b\u6e2c\u6027\u200b\uff1a\u200b\u4ee5\u200b ReadyAPI \u200b\u548c\u200b Grafana Stack \u200b\u70ba\u4f8b\u200b by Blueswen.</li> </ul>"},{"location":"external-links/#github-repositories","title":"GitHub Repositories","text":"<p>Most starred GitHub repositories with the topic <code>readyapi</code>:</p> <p>\u2605 32337 - full-stack-readyapi-template by @readyapi.</p> <p>\u2605 29833 - Hello-Python by @mouredev.</p> <p>\u2605 21544 - serve by @jina-ai.</p> <p>\u2605 15799 - sqldev by @readyapi.</p> <p>\u2605 15676 - HivisionIDPhotos by @Zeyi-Lin.</p> <p>\u2605 12183 - Douyin_TikTok_Download_API by @Evil0ctal.</p> <p>\u2605 11594 - readyapi-best-practices by @zhanymkanov.</p> <p>\u2605 9586 - awesome-readyapi by @mjhea0.</p> <p>\u2605 8804 - FastUI by @pydantic.</p> <p>\u2605 6688 - nonebot2 by @nonebot.</p> <p>\u2605 6502 - FileCodeBox by @vastsa.</p> <p>\u2605 5720 - serge by @serge-chat.</p> <p>\u2605 5515 - hatchet by @hatchet-dev.</p> <p>\u2605 5162 - readyapi-users by @readyapi-users.</p> <p>\u2605 5119 - polar by @polarsource.</p> <p>\u2605 4302 - chatgpt-web-share by @chatpire.</p> <p>\u2605 4244 - strawberry by @strawberry-graphql.</p> <p>\u2605 4178 - readyapi_mcp by @tadata-org.</p> <p>\u2605 4112 - atrilabs-engine by @Atri-Labs.</p> <p>\u2605 3985 - dynaconf by @dynaconf.</p> <p>\u2605 3918 - poem by @poem-web.</p> <p>\u2605 3287 - farfalle by @rashadphz.</p> <p>\u2605 3192 - readyapi-admin by @readyapi-admin.</p> <p>\u2605 3141 - datamodel-code-generator by @koxudaxi.</p> <p>\u2605 3116 - opyrator by @ml-tooling.</p> <p>\u2605 3088 - LitServe by @Lightning-AI.</p> <p>\u2605 3059 - logfire by @pydantic.</p> <p>\u2605 3052 - docarray by @docarray.</p> <p>\u2605 3025 - huma by @danielgtaylor.</p> <p>\u2605 2883 - readyapi-realworld-example-app by @nsidnev.</p> <p>\u2605 2756 - uvicorn-gunicorn-readyapi-docker by @khulnasoft.</p> <p>\u2605 2587 - tracecat by @TracecatHQ.</p> <p>\u2605 2502 - best-of-web-python by @ml-tooling.</p> <p>\u2605 2500 - Kokoro-ReadyAPI by @remsky.</p> <p>\u2605 2419 - RasaGPT by @paulpierre.</p> <p>\u2605 2350 - readyapi-react by @Buuntu.</p> <p>\u2605 2277 - nextpy by @dot-agent.</p> <p>\u2605 2273 - ReadyAPI-template by @s3rius.</p> <p>\u2605 2183 - 30-Days-of-Python by @codingforentrepreneurs.</p> <p>\u2605 2141 - sqladmin by @aminalaee.</p> <p>\u2605 2070 - langserve by @langchain-ai.</p> <p>\u2605 2063 - readyapi-utils by @readyapiutils.</p> <p>\u2605 2028 - solara by @widgetti.</p> <p>\u2605 1996 - supabase-py by @supabase.</p> <p>\u2605 1870 - mangum by @Kludex.</p> <p>\u2605 1827 - python-week-2022 by @rochacbruno.</p> <p>\u2605 1763 - SurfSense by @MODSetter.</p> <p>\u2605 1743 - manage-readyapi by @ycd.</p> <p>\u2605 1741 - agentkit by @BCG-X-Official.</p> <p>\u2605 1730 - ormar by @collerek.</p> <p>\u2605 1631 - langchain-serve by @jina-ai.</p> <p>\u2605 1610 - termpair by @cs01.</p> <p>\u2605 1588 - piccolo by @piccolo-orm.</p> <p>\u2605 1587 - coronavirus-tracker-api by @ExpDev07.</p> <p>\u2605 1552 - readyapi-cache by @long2ice.</p> <p>\u2605 1536 - openapi-python-client by @openapi-generators.</p> <p>\u2605 1491 - readyapi-crudrouter by @awtkns.</p> <p>\u2605 1450 - slowapi by @laurentS.</p> <p>\u2605 1443 - awesome-readyapi-projects by @Kludex.</p> <p>\u2605 1387 - awesome-python-resources by @DjangoEx.</p> <p>\u2605 1341 - budgetml by @ebhy.</p> <p>\u2605 1331 - readyapi-pagination by @uriyyo.</p> <p>\u2605 1299 - readyapi-boilerplate by @teamhide.</p> <p>\u2605 1235 - readyapi-amis-admin by @amisadmin.</p> <p>\u2605 1222 - readyapi-tutorial by @liaogx.</p> <p>\u2605 1190 - vue-readyapi-admin by @mizhexiaoxiao.</p> <p>\u2605 1180 - readyapi-code-generator by @koxudaxi.</p> <p>\u2605 1166 - bolt-python by @slackapi.</p> <p>\u2605 1134 - readyapi_production_template by @zhanymkanov.</p> <p>\u2605 1127 - langchain-extract by @langchain-ai.</p> <p>\u2605 1115 - odmantic by @art049.</p> <p>\u2605 1112 - prometheus-readyapi-instrumentator by @trallnag.</p> <p>\u2605 1107 - bedrock-chat by @aws-samples.</p> <p>\u2605 1094 - readyapi-alembic-sqldev-async by @jonra1993.</p> <p>\u2605 1041 - restish by @rest-sh.</p> <p>\u2605 1036 - fastcrud by @igorbenav.</p> <p>\u2605 1022 - runhouse by @run-house.</p> <p>\u2605 997 - readyapi_best_architecture by @readyapi-practices.</p> <p>\u2605 990 - lanarky by @ajndkr.</p> <p>\u2605 990 - autollm by @viddexa.</p> <p>\u2605 932 - secure by @TypeError.</p> <p>\u2605 925 - langcorn by @msoedov.</p> <p>\u2605 925 - ReadyAPI-boilerplate by @igorbenav.</p> <p>\u2605 913 - authx by @yezz123.</p> <p>\u2605 907 - energy-forecasting by @iusztinpaul.</p> <p>\u2605 873 - titiler by @developmentseed.</p> <p>\u2605 850 - httpdbg by @cle-b.</p> <p>\u2605 844 - marker-api by @adithya-s-k.</p> <p>\u2605 842 - ludic by @getludic.</p> <p>\u2605 805 - flock by @Onelevenvy.</p> <p>\u2605 797 - readyapi-observability by @blueswen.</p> <p>\u2605 786 - readyapi-do-zero by @dunossauro.</p> <p>\u2605 781 - readyapi-mail by @sabuhish.</p> <p>\u2605 764 - starlette-admin by @jowilf.</p> <p>\u2605 759 - lccn_predictor by @baoliay2008.</p> <p>\u2605 741 - KonomiTV by @tsukumijima.</p> <p>\u2605 734 - ReadyAPI-Backend-Template by @Aeternalis-Ingenium.</p> <p>\u2605 731 - learn-generative-ai by @panaverse.</p> <p>\u2605 730 - annotated-py-projects by @hhstore.</p>"},{"location":"newsletter/","title":"ReadyAPI and friends newsletter","text":""},{"location":"management-tasks/","title":"Repository Management Tasks","text":"<p>These are the tasks that can be performed to manage the ReadyAPI repository by team members.</p> <p>Tip</p> <p>This section is useful only to a handful of people, team members with permissions to manage the repository. You can probably skip it. \ud83d\ude09</p> <p>...so, you are a team member of ReadyAPI? Wow, you are so cool! \ud83d\ude0e</p> <p>You can help with everything on Help ReadyAPI - Get Help the same ways as external contributors. But additionally, there are some tasks that only you (as part of the team) can perform.</p> <p>Here are the general instructions for the tasks you can perform.</p> <p>Thanks a lot for your help. \ud83d\ude47</p>"},{"location":"management-tasks/#be-nice","title":"Be Nice","text":"<p>First of all, be nice. \ud83d\ude0a</p> <p>You probably are super nice if you were added to the team, but it's worth mentioning it. \ud83e\udd13</p>"},{"location":"management-tasks/#when-things-are-difficult","title":"When Things are Difficult","text":"<p>When things are great, everything is easier, so that doesn't need much instructions. But when things are difficult, here are some guidelines.</p> <p>Try to find the good side. In general, if people are not being unfriendly, try to thank their effort and interest, even if you disagree with the main subject (discussion, PR), just thank them for being interested in the project, or for having dedicated some time to try to do something.</p> <p>It's difficult to convey emotion in text, use emojis to help. \ud83d\ude05</p> <p>In discussions and PRs, in many cases, people bring their frustration and show it without filter, in many cases exaggerating, complaining, being entitled, etc. That's really not nice, and when it happens, it lowers our priority to solve their problems. But still, try to breath, and be gentle with your answers.</p> <p>Try to avoid using bitter sarcasm or potentially passive-aggressive comments. If something is wrong, it's better to be direct (try to be gentle) than sarcastic.</p> <p>Try to be as specific and objective as possible, avoid generalizations.</p> <p>For conversations that are more difficult, for example to reject a PR, you can ask me (@khulnasoft) to handle it directly.</p>"},{"location":"management-tasks/#edit-pr-titles","title":"Edit PR Titles","text":"<ul> <li>Edit the PR title to start with an emoji from gitmoji.<ul> <li>Use the emoji character, not the GitHub code. So, use <code>\ud83d\udc1b</code> instead of <code>:bug:</code>. This is so that it shows up correctly outside of GitHub, for example in the release notes.</li> <li>For translations use the <code>\ud83c\udf10</code> emoji (\"globe with meridians\").</li> </ul> </li> <li>Start the title with a verb. For example <code>Add</code>, <code>Refactor</code>, <code>Fix</code>, etc. This way the title will say the action that the PR does. Like <code>Add support for teleporting</code>, instead of <code>Teleporting wasn't working, so this PR fixes it</code>.</li> <li>Edit the text of the PR title to start in \"imperative\", like giving an order. So, instead of <code>Adding support for teleporting</code> use <code>Add support for teleporting</code>.</li> <li>Try to make the title descriptive about what it achieves. If it's a feature, try to describe it, for example <code>Add support for teleporting</code> instead of <code>Create TeleportAdapter class</code>.</li> <li>Do not finish the title with a period (<code>.</code>).</li> <li>When the PR is for a translation, start with the <code>\ud83c\udf10</code> and then <code>Add {language} translation for</code> and then the translated file path. For example:</li> </ul> <pre><code>\ud83c\udf10 Add Spanish translation for `docs/es/docs/teleporting.md`\n</code></pre> <p>Once the PR is merged, a GitHub Action (latest-changes) will use the PR title to update the latest changes automatically.</p> <p>So, having a nice PR title will not only look nice in GitHub, but also in the release notes. \ud83d\udcdd</p>"},{"location":"management-tasks/#add-labels-to-prs","title":"Add Labels to PRs","text":"<p>The same GitHub Action latest-changes uses one label in the PR to decide the section in the release notes to put this PR in.</p> <p>Make sure you use a supported label from the latest-changes list of labels:</p> <ul> <li><code>breaking</code>: Breaking Changes<ul> <li>Existing code will break if they update the version without changing their code. This rarely happens, so this label is not frequently used.</li> </ul> </li> <li><code>security</code>: Security Fixes<ul> <li>This is for security fixes, like vulnerabilities. It would almost never be used.</li> </ul> </li> <li><code>feature</code>: Features<ul> <li>New features, adding support for things that didn't exist before.</li> </ul> </li> <li><code>bug</code>: Fixes<ul> <li>Something that was supported didn't work, and this fixes it. There are many PRs that claim to be bug fixes because the user is doing something in an unexpected way that is not supported, but they considered it what should be supported by default. Many of these are actually features or refactors. But in some cases there's an actual bug.</li> </ul> </li> <li><code>refactor</code>: Refactors<ul> <li>This is normally for changes to the internal code that don't change the behavior. Normally it improves maintainability, or enables future features, etc.</li> </ul> </li> <li><code>upgrade</code>: Upgrades<ul> <li>This is for upgrades to direct dependencies from the project, or extra optional dependencies, normally in <code>pyproject.toml</code>. So, things that would affect final users, they would end up receiving the upgrade in their code base once they update. But this is not for upgrades to internal dependencies used for development, testing, docs, etc. Those internal dependencies, normally in <code>requirements.txt</code> files or GitHub Action versions should be marked as <code>internal</code>, not <code>upgrade</code>.</li> </ul> </li> <li><code>docs</code>: Docs<ul> <li>Changes in docs. This includes updating the docs, fixing typos. But it doesn't include changes to translations.</li> <li>You can normally quickly detect it by going to the \"Files changed\" tab in the PR and checking if the updated file(s) starts with <code>docs/en/docs</code>. The original version of the docs is always in English, so in <code>docs/en/docs</code>.</li> </ul> </li> <li><code>lang-all</code>: Translations<ul> <li>Use this for translations. You can normally quickly detect it by going to the \"Files changed\" tab in the PR and checking if the updated file(s) starts with <code>docs/{some lang}/docs</code> but not <code>docs/en/docs</code>. For example, <code>docs/es/docs</code>.</li> </ul> </li> <li><code>internal</code>: Internal<ul> <li>Use this for changes that only affect how the repo is managed. For example upgrades to internal dependencies, changes in GitHub Actions or scripts, etc.</li> </ul> </li> </ul> <p>Tip</p> <p>Some tools like Dependabot, will add some labels, like <code>dependencies</code>, but have in mind that this label is not used by the <code>latest-changes</code> GitHub Action, so it won't be used in the release notes. Please make sure one of the labels above is added.</p>"},{"location":"management-tasks/#add-labels-to-translation-prs","title":"Add Labels to Translation PRs","text":"<p>When there's a PR for a translation, apart from adding the <code>lang-all</code> label, also add a label for the language.</p> <p>There will be a label for each language using the language code, like <code>lang-{lang code}</code>, for example, <code>lang-es</code> for Spanish, <code>lang-fr</code> for French, etc.</p> <ul> <li>Add the specific language label.</li> <li>Add the label <code>awaiting-review</code>.</li> </ul> <p>The label <code>awaiting-review</code> is special, only used for translations. A GitHub Action will detect it, then it will read the language label, and it will update the GitHub Discussions managing the translations for that language to notify people that there's a new translation to review.</p> <p>Once a native speaker comes, reviews the PR, and approves it, the GitHub Action will come and remove the <code>awaiting-review</code> label, and add the <code>approved-1</code> label.</p> <p>This way, we can notice when there are new translations ready, because they have the <code>approved-1</code> label.</p>"},{"location":"management-tasks/#merge-translation-prs","title":"Merge Translation PRs","text":"<p>For Spanish, as I'm a native speaker and it's a language close to me, I will give it a final review myself and in most cases tweak the PR a bit before merging it.</p> <p>For the other languages, confirm that:</p> <ul> <li>The title is correct following the instructions above.</li> <li>It has the labels <code>lang-all</code> and <code>lang-{lang code}</code>.</li> <li>The PR changes only one Markdown file adding a translation.<ul> <li>Or in some cases, at most two files, if they are small, for the same language, and people reviewed them.</li> <li>If it's the first translation for that language, it will have additional <code>mkdocs.yml</code> files, for those cases follow the instructions below.</li> </ul> </li> <li>The PR doesn't add any additional or extraneous files.</li> <li>The translation seems to have a similar structure as the original English file.</li> <li>The translation doesn't seem to change the original content, for example with obvious additional documentation sections.</li> <li>The translation doesn't use different Markdown structures, for example adding HTML tags when the original didn't have them.</li> <li>The \"admonition\" sections, like <code>tip</code>, <code>info</code>, etc. are not changed or translated. For example:</li> </ul> <pre><code>/// tip\n\nThis is a tip.\n\n///\n</code></pre> <p>looks like this:</p> <p>Tip</p> <p>This is a tip.</p> <p>...it could be translated as:</p> <pre><code>/// tip\n\nEsto es un consejo.\n\n///\n</code></pre> <p>...but needs to keep the exact <code>tip</code> keyword. If it was translated to <code>consejo</code>, like:</p> <pre><code>/// consejo\n\nEsto es un consejo.\n\n///\n</code></pre> <p>it would change the style to the default one, it would look like:</p> <p>/// consejo</p> <p>Esto es un consejo.</p> <p>///</p> <p>Those don't have to be translated, but if they are, they need to be written as:</p> <pre><code>/// tip | consejo\n\nEsto es un consejo.\n\n///\n</code></pre> <p>Which looks like:</p> <p>consejo</p> <p>Esto es un consejo.</p>"},{"location":"management-tasks/#first-translation-pr","title":"First Translation PR","text":"<p>When there's a first translation for a language, it will have a <code>docs/{lang code}/docs/index.md</code> translated file and a <code>docs/{lang code}/mkdocs.yml</code>.</p> <p>For example, for Bosnian, it would be:</p> <ul> <li><code>docs/bs/docs/index.md</code></li> <li><code>docs/bs/mkdocs.yml</code></li> </ul> <p>The <code>mkdocs.yml</code> file will have only the following content:</p> <pre><code>INHERIT: ../en/mkdocs.yml\n</code></pre> <p>The language code would normally be in the ISO 639-1 list of language codes.</p> <p>In any case, the language code should be in the file docs/language_names.yml.</p> <p>There won't be yet a label for the language code, for example, if it was Bosnian, there wouldn't be a <code>lang-bs</code>. Before creating the label and adding it to the PR, create the GitHub Discussion:</p> <ul> <li>Go to the Translations GitHub Discussions</li> <li>Create a new discussion with the title <code>Bosnian Translations</code> (or the language name in English)</li> <li>A description of:</li> </ul> <pre><code>## Bosnian translations\n\nThis is the issue to track translations of the docs to Bosnian. \ud83d\ude80\n\nHere are the [PRs to review with the label `lang-bs`](https://github.com/readyapi/readyapi/pulls?q=is%3Apr+is%3Aopen+sort%3Aupdated-desc+label%3Alang-bs+label%3A%22awaiting-review%22). \ud83e\udd13\n</code></pre> <p>Update \"Bosnian\" with the new language.</p> <p>And update the search link to point to the new language label that will be created, like <code>lang-bs</code>.</p> <p>Create and add the label to that new Discussion just created, like <code>lang-bs</code>.</p> <p>Then go back to the PR, and add the label, like <code>lang-bs</code>, and <code>lang-all</code> and <code>awaiting-review</code>.</p> <p>Now the GitHub action will automatically detect the label <code>lang-bs</code> and will post in that Discussion that this PR is waiting to be reviewed.</p>"},{"location":"management-tasks/#review-prs","title":"Review PRs","text":"<p>If a PR doesn't explain what it does or why, ask for more information.</p> <p>A PR should have a specific use case that it is solving.</p> <ul> <li>If the PR is for a feature, it should have docs.<ul> <li>Unless it's a feature we want to discourage, like support for a corner case that we don't want users to use.</li> </ul> </li> <li>The docs should include a source example file, not write Python directly in Markdown.</li> <li>If the source example(s) file can have different syntax for Python 3.8, 3.9, 3.10, there should be different versions of the file, and they should be shown in tabs in the docs.</li> <li>There should be tests testing the source example.</li> <li>Before the PR is applied, the new tests should fail.</li> <li>After applying the PR, the new tests should pass.</li> <li>Coverage should stay at 100%.</li> <li>If you see the PR makes sense, or we discussed it and considered it should be accepted, you can add commits on top of the PR to tweak it, to add docs, tests, format, refactor, remove extra files, etc.</li> <li>Feel free to comment in the PR to ask for more information, to suggest changes, etc.</li> <li>Once you think the PR is ready, move it in the internal GitHub project for me to review it.</li> </ul>"},{"location":"management-tasks/#readyapi-people-prs","title":"ReadyAPI People PRs","text":"<p>Every month, a GitHub Action updates the ReadyAPI People data. Those PRs look like this one: \ud83d\udc65 Update ReadyAPI People.</p> <p>If the tests are passing, you can merge it right away.</p>"},{"location":"management-tasks/#external-links-prs","title":"External Links PRs","text":"<p>When people add external links they edit this file external_links.yml.</p> <ul> <li>Make sure the new link is in the correct category (e.g. \"Podcasts\") and language (e.g. \"Japanese\").</li> <li>A new link should be at the top of its list.</li> <li>The link URL should work (it should not return a 404).</li> <li>The content of the link should be about ReadyAPI.</li> <li>The new addition should have these fields:<ul> <li><code>author</code>: The name of the author.</li> <li><code>link</code>: The URL with the content.</li> <li><code>title</code>: The title of the link (the title of the article, podcast, etc).</li> </ul> </li> </ul> <p>After checking all these things and ensuring the PR has the right labels, you can merge it.</p>"},{"location":"management-tasks/#dependabot-prs","title":"Dependabot PRs","text":"<p>Dependabot will create PRs to update dependencies for several things, and those PRs all look similar, but some are way more delicate than others.</p> <ul> <li>If the PR is for a direct dependency, so, Dependabot is modifying <code>pyproject.toml</code>, don't merge it. \ud83d\ude31 Let me check it first. There's a good chance that some additional tweaks or updates are needed.</li> <li>If the PR updates one of the internal dependencies, for example it's modifying <code>requirements.txt</code> files, or GitHub Action versions, if the tests are passing, the release notes (shown in a summary in the PR) don't show any obvious potential breaking change, you can merge it. \ud83d\ude0e</li> </ul>"},{"location":"management-tasks/#mark-github-discussions-answers","title":"Mark GitHub Discussions Answers","text":"<p>When a question in GitHub Discussions has been answered, mark the answer by clicking \"Mark as answer\".</p> <p>You can filter discussions by <code>Questions</code> that are <code>Unanswered</code>.</p>"},{"location":"about/","title":"About","text":"<p>Warning</p> <p>The current page still doesn't have a translation for this language.</p> <p>But you can help translating it: Contributing.</p> <p>About ReadyAPI, its design, inspiration and more. \ud83e\udd13</p>"},{"location":"management/","title":"Repository Management","text":"<p>Here's a short description of how the ReadyAPI repository is managed and maintained.</p>"},{"location":"management/#owner","title":"Owner","text":"<p>I, @khulnasoft, am the creator and owner of the ReadyAPI repository. \ud83e\udd13</p> <p>I normally give the final review to each PR before merging them. I make the final decisions on the project, I'm the BDFL. \ud83d\ude05</p>"},{"location":"management/#team","title":"Team","text":"<p>There's a team of people that help manage and maintain the project. \ud83d\ude0e</p> <p>They have different levels of permissions and specific instructions.</p> <p>Some of the tasks they can perform include:</p> <ul> <li>Adding labels to PRs.</li> <li>Editing PR titles.</li> <li>Adding commits on top of PRs to tweak them.</li> <li>Mark answers in GitHub Discussions questions, etc.</li> <li>Merge some specific types of PRs.</li> </ul> <p>You can see the current team members in ReadyAPI People - Team.</p> <p>Joining the team is by invitation only, and I could update or remove permissions, instructions, or membership.</p>"},{"location":"management/#readyapi-experts","title":"ReadyAPI Experts","text":"<p>The people that help others the most in GitHub Discussions can become ReadyAPI Experts.</p> <p>This is normally the best way to contribute to the project.</p>"},{"location":"management/#external-contributions","title":"External Contributions","text":"<p>External contributions are very welcome and appreciated, including answering questions, submitting PRs, etc. \ud83d\ude47\u200d\u2642\ufe0f</p> <p>There are many ways to help maintain ReadyAPI.</p>"},{"location":"release-notes/","title":"Release Notes","text":""},{"location":"release-notes/#latest-changes","title":"Latest Changes","text":""},{"location":"release-notes/#upgrades","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Update ReDoc to version 2.x. PR #9700 by @joakimnordling.</li> </ul>"},{"location":"release-notes/#docs","title":"Docs","text":"<ul> <li>\ud83c\udf71 Update Drawio diagrams SVGs, single file per diagram, sans-serif font. PR #13706 by @khulnasoft.</li> <li>\ud83d\udcdd Update docs for \"Help ReadyAPI\", simplify and reduce \"sponsor\" section. PR #13670 by @khulnasoft.</li> <li>\ud83d\udcdd Remove unnecessary bullet from docs. PR #13641 by @Adamowoc.</li> <li>\u270f\ufe0f Fix syntax error in <code>docs/en/docs/tutorial/handling-errors.md</code>. PR #13623 by @gsheni.</li> <li>\ud83d\udcdd Fix typo in documentation. PR #13599 by @Taoup.</li> <li>\ud83d\udcdd Fix liblab client generation doc link. PR #13571 by @EFord36.</li> <li>\u270f\ufe0f Fix talk information typo. PR #13544 by @blueswen.</li> <li>\ud83d\udcdd Add External Link: Taiwanese talk on ReadyAPI with observability . PR #13527 by @blueswen.</li> </ul>"},{"location":"release-notes/#translations","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/header-param-models.md</code>. PR #13526 by @minaton-ru.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/index.md</code>. PR #13374 by @Zhongheng-Cheng.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/deployment/manually.md</code>. PR #13324 by @Zhongheng-Cheng.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/deployment/server-workers.md</code>. PR #13292 by @Zhongheng-Cheng.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/first-steps.md</code>. PR #13348 by @Zhongheng-Cheng.</li> </ul>"},{"location":"release-notes/#internal","title":"Internal","text":"<ul> <li>Pre commit. PR #220 by @gitworkflows.</li> <li>\ud83d\udc77 Add custom pre-commit. PR #219 by @gitworkflows.</li> <li>\ud83d\udd27 Update sponsors: add Subtotal. PR #13701 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors: remove deepset / Haystack. PR #13700 by @khulnasoft.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #13688 by @pre-commit-ci[bot].</li> <li>\ud83d\udc65 Update ReadyAPI People - Experts. PR #13671 by @khulnasoft.</li> <li>\u2b06 Bump cligenius from 0.12.5 to 0.15.3. PR #13666 by @dependabot[bot].</li> <li>\u2b06 Bump sqldev from 0.0.23 to 0.0.24. PR #13665 by @dependabot[bot].</li> <li>\ud83d\udd27 Update Sponsors: Zuplo logo and alt text. PR #13645 by @martyndavies.</li> <li>\ud83d\udc65 Update ReadyAPI GitHub topic repositories. PR #13667 by @khulnasoft.</li> <li>\ud83d\udd27 Update links for LinkedIn and bottom. PR #13669 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors: remove Bump.sh and Coherence. PR #13668 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People - Sponsors. PR #13664 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People - Contributors and Translators. PR #13662 by @khulnasoft.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #13656 by @pre-commit-ci[bot].</li> <li>\u2705 Use <code>inline-snapshot</code> to support different Pydantic versions in the test suite. PR #12534 by @15r10nk.</li> <li>\u2b06 Bump astral-sh/setup-uv from 5 to 6. PR #13648 by @dependabot[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #13634 by @pre-commit-ci[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #13619 by @pre-commit-ci[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #13594 by @pre-commit-ci[bot].</li> <li>\ud83d\udc65 Update ReadyAPI People - Experts. PR #13568 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI GitHub topic repositories. PR #13565 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People - Sponsors. PR #13559 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People - Contributors and Translators. PR #13558 by @khulnasoft.</li> <li>\u2b06 Bump dirty-equals from 0.8.0 to 0.9.0. PR #13561 by @dependabot[bot].</li> <li>\ud83d\udd27 Clean up <code>docs/en/mkdocs.yml</code> configuration file. PR #13542 by @svlandeg.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12986 by @pre-commit-ci[bot].</li> </ul>"},{"location":"release-notes/#011512","title":"0.115.12","text":""},{"location":"release-notes/#fixes","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix <code>convert_underscores=False</code> for header Pydantic models. PR #13515 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_1","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update <code>docs/en/docs/tutorial/middleware.md</code>. PR #13444 by @Rishat-F.</li> <li>\ud83d\udc65 Update ReadyAPI People - Experts. PR #13493 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_1","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/metadata.md</code> page. PR #13459 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/response-status-code.md</code> page. PR #13462 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/cookie-param-models.md</code> page. PR #13460 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/header-param-models.md</code> page. PR #13461 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/virtual-environments.md</code>. PR #13304 by @k94-ishi.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/security/oauth2-jwt.md</code>. PR #13333 by @yes0ng.</li> <li>\ud83c\udf10 Add Vietnamese translation for <code>docs/vi/docs/deployment/cloud.md</code>. PR #13407 by @ptt3199.</li> </ul>"},{"location":"release-notes/#internal_1","title":"Internal","text":"<ul> <li>\u2b06 Bump pydantic-ai from 0.0.15 to 0.0.30. PR #13438 by @dependabot[bot].</li> <li>\u2b06 Bump sqldev from 0.0.22 to 0.0.23. PR #13437 by @dependabot[bot].</li> <li>\u2b06 Bump black from 24.10.0 to 25.1.0. PR #13436 by @dependabot[bot].</li> <li>\u2b06 Bump ruff to 0.9.4. PR #13299 by @dependabot[bot].</li> <li>\ud83d\udd27 Update sponsors: pause TestDriven. PR #13446 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#011511","title":"0.115.11","text":""},{"location":"release-notes/#fixes_1","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Add docs examples and tests (support) for <code>Annotated</code> custom validations, like <code>AfterValidator</code>, revert #13440. PR #13442 by @khulnasoft.<ul> <li>New docs: Query Parameters and String Validations - Custom Validation.</li> </ul> </li> </ul>"},{"location":"release-notes/#translations_2","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for  <code>docs/ru/docs/tutorial/middleware.md</code>. PR #13412 by @alv2017.</li> </ul>"},{"location":"release-notes/#internal_2","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI GitHub topic repositories. PR #13439 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People - Contributors and Translators. PR #13432 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People - Sponsors. PR #13433 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#011510","title":"0.115.10","text":""},{"location":"release-notes/#fixes_2","title":"Fixes","text":"<ul> <li>\u267b\ufe0f Update internal annotation usage for compatibility with Pydantic 2.11. PR #13314 by @Viicos.</li> </ul>"},{"location":"release-notes/#upgrades_1","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Bump Starlette to allow up to 0.46.0: <code>&gt;=0.40.0,&lt;0.47.0</code>. PR #13426 by @musicinmybrain.</li> </ul>"},{"location":"release-notes/#translations_3","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/debugging.md</code>. PR #13370 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/query-params.md</code>. PR #13362 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/path-params.md</code>. PR #13354 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/cookie-param-models.md</code>. PR #13330 by @k94-ishi.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/body-multiple-params.md</code>. PR #13408 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/query-param-models.md</code>. PR #13323 by @k94-ishi.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/body-nested-models.md</code>. PR #13409 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Vietnamese translation for <code>docs/vi/docs/deployment/versions.md</code>. PR #13406 by @ptt3199.</li> <li>\ud83c\udf10 Add Vietnamese translation for <code>docs/vi/docs/deployment/index.md</code>. PR #13405 by @ptt3199.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/request-forms.md</code>. PR #13383 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/testing.md</code>. PR #13371 by @valentinDruzhinin.</li> </ul>"},{"location":"release-notes/#01159","title":"0.115.9","text":""},{"location":"release-notes/#fixes_3","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Ensure that <code>HTTPDigest</code> only raises an exception when <code>auto_error is True</code>. PR #2939 by @arthurio.</li> </ul>"},{"location":"release-notes/#refactors","title":"Refactors","text":"<ul> <li>\u2705 Simplify tests for <code>query_params_str_validations</code>. PR #13218 by @alv2017.</li> <li>\u2705 Simplify tests for <code>app_testing</code>. PR #13220 by @alv2017.</li> <li>\u2705 Simplify tests for <code>dependency_testing</code>. PR #13223 by @alv2017.</li> </ul>"},{"location":"release-notes/#docs_2","title":"Docs","text":"<ul> <li>\ud83c\udf71 Update sponsors: CodeRabbit logo. PR #13424 by @khulnasoft.</li> <li>\ud83e\ude7a Unify the badges across all tutorial translations. PR #13329 by @svlandeg.</li> <li>\ud83d\udcdd Fix typos in virtual environments documentation. PR #13396 by @bullet-ant.</li> <li>\ud83d\udc1b Fix issue with Swagger theme change example in the official tutorial. PR #13289 by @Zerohertz.</li> <li>\ud83d\udcdd Add more precise description of HTTP status code range in docs. PR #13347 by @DanielYang59.</li> <li>\ud83d\udd25 Remove manual type annotations in JWT tutorial to avoid typing expectations (JWT doesn't provide more types). PR #13378 by @khulnasoft.</li> <li>\ud83d\udcdd Update docs for Query Params and String Validations, remove obsolete Ellipsis docs (<code>...</code>). PR #13377 by @khulnasoft.</li> <li>\u270f\ufe0f Remove duplicate title in docs <code>body-multiple-params</code>. PR #13345 by @DanielYang59.</li> <li>\ud83d\udcdd Fix test badge. PR #13313 by @esadek.</li> </ul>"},{"location":"release-notes/#translations_4","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/header-params.md</code>. PR #13381 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/request-files.md</code>. PR #13395 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/request-form-models.md</code>. PR #13384 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/request-forms-and-files.md</code>. PR #13386 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Update Korean translation for <code>docs/ko/docs/help-readyapi.md</code>. PR #13262 by @Zerohertz.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/custom-response.md</code>. PR #13265 by @11kkw.</li> <li>\ud83c\udf10 Update Korean translation for <code>docs/ko/docs/tutorial/security/simple-oauth2.md</code>. PR #13335 by @yes0ng.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/advanced/response-cookies.md</code>. PR #13327 by @Stepakinoyan.</li> <li>\ud83c\udf10  Add Vietnamese translation for <code>docs/vi/docs/tutorial/static-files.md</code>. PR #11291 by @ptt3199.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/dependencies/dependencies-with-yield.md</code>. PR #13257 by @11kkw.</li> <li>\ud83c\udf10 Add Vietnamese translation for <code>docs/vi/docs/virtual-environments.md</code>. PR #13282 by @ptt3199.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/static-files.md</code>. PR #13285 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Vietnamese translation for <code>docs/vi/docs/environment-variables.md</code>. PR #13287 by @ptt3199.</li> <li>\ud83c\udf10 Add Vietnamese translation for <code>docs/vi/docs/readyapi-cli.md</code>. PR #13294 by @ptt3199.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/features.md</code>. PR #13308 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/learn/index.md</code>. PR #13306 by @valentinDruzhinin.</li> <li>\ud83c\udf10 Update Portuguese Translation for <code>docs/pt/docs/deployment/https.md</code>. PR #13317 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Update Portuguese Translation for <code>docs/pt/docs/index.md</code>. PR #13328 by @ceb10n.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/advanced/websockets.md</code>. PR #13279 by @Rishat-F.</li> </ul>"},{"location":"release-notes/#internal_3","title":"Internal","text":"<ul> <li>\u2705 Fix a minor bug in the test <code>tests/test_modules_same_name_body/test_main.py</code>. PR #13411 by @alv2017.</li> <li>\ud83d\udc77 Use <code>wrangler-action</code> v3. PR #13415 by @joakimnordling.</li> <li>\ud83d\udd27 Update sponsors: add CodeRabbit. PR #13402 by @khulnasoft.</li> <li>\ud83d\udd27 Update team: Add Ludovico. PR #13390 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors: Add LambdaTest. PR #13389 by @khulnasoft.</li> <li>\u2b06 Bump cloudflare/wrangler-action from 3.13 to 3.14. PR #13350 by @dependabot[bot].</li> <li>\u2b06 Bump mkdocs-material from 9.5.18 to 9.6.1. PR #13301 by @dependabot[bot].</li> <li>\u2b06 Bump pillow from 11.0.0 to 11.1.0. PR #13300 by @dependabot[bot].</li> <li>\ud83d\udc65 Update ReadyAPI People - Sponsors. PR #13295 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People - Experts. PR #13303 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI GitHub topic repositories. PR #13302 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People - Contributors and Translators. PR #13293 by @khulnasoft.</li> <li>\u2b06 Bump inline-snapshot from 0.18.1 to 0.19.3. PR #13298 by @dependabot[bot].</li> <li>\ud83d\udd27 Update sponsors, add Permit. PR #13288 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01158","title":"0.115.8","text":""},{"location":"release-notes/#fixes_4","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix <code>OAuth2PasswordRequestForm</code> and <code>OAuth2PasswordRequestFormStrict</code> fixed <code>grant_type</code> \"password\" RegEx. PR #9783 by @skarfie123.</li> </ul>"},{"location":"release-notes/#refactors_1","title":"Refactors","text":"<ul> <li>\u2705 Simplify tests for body_multiple_params . PR #13237 by @alejsdev.</li> <li>\u267b\ufe0f Move duplicated code portion to a static method in the <code>APIKeyBase</code> super class. PR #3142 by @ShahriyarR.</li> <li>\u2705 Simplify tests for request_files. PR #13182 by @alejsdev.</li> </ul>"},{"location":"release-notes/#docs_3","title":"Docs","text":"<ul> <li>\ud83d\udcdd Change the word \"unwrap\" to \"unpack\" in <code>docs/en/docs/tutorial/extra-models.md</code>. PR #13061 by @timothy-jeong.</li> <li>\ud83d\udcdd Update Request Body's <code>tutorial002</code> to deal with <code>tax=0</code> case. PR #13230 by @togogh.</li> <li>\ud83d\udc65 Update ReadyAPI People - Experts. PR #13269 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_5","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/environment-variables.md</code>. PR #13226 by @k94-ishi.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/advanced/async-tests.md</code>. PR #13227 by @Rishat-F.</li> <li>\ud83c\udf10 Update Russian translation for <code>docs/ru/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md</code>. PR #13252 by @Rishat-F.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/bigger-applications.md</code>. PR #13154 by @alv2017.</li> </ul>"},{"location":"release-notes/#internal_4","title":"Internal","text":"<ul> <li>\u2b06\ufe0f Add support for Python 3.13. PR #13274 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade AnyIO max version for tests, new range: <code>&gt;=3.2.1,&lt;5.0.0</code>. PR #13273 by @khulnasoft.</li> <li>\ud83d\udd27 Update Sponsors badges. PR #13271 by @khulnasoft.</li> <li>\u267b\ufe0f Fix <code>notify_translations.py</code> empty env var handling for PR label events vs workflow_dispatch. PR #13272 by @khulnasoft.</li> <li>\u267b\ufe0f Refactor and move <code>scripts/notify_translations.py</code>, no need for a custom GitHub Action. PR #13270 by @khulnasoft.</li> <li>\ud83d\udd28 Update ReadyAPI People Experts script, refactor and optimize data fetching to handle rate limits. PR #13267 by @khulnasoft.</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.12.3 to 1.12.4. PR #13251 by @dependabot[bot].</li> </ul>"},{"location":"release-notes/#01157","title":"0.115.7","text":""},{"location":"release-notes/#upgrades_2","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade <code>python-multipart</code> to &gt;=0.0.18. PR #13219 by @DanielKusyDev.</li> <li>\u2b06\ufe0f Bump Starlette to allow up to 0.45.0: <code>&gt;=0.40.0,&lt;0.46.0</code>. PR #13117 by @Kludex.</li> <li>\u2b06\ufe0f Upgrade <code>jinja2</code> to &gt;=3.1.5. PR #13194 by @DanielKusyDev.</li> </ul>"},{"location":"release-notes/#refactors_2","title":"Refactors","text":"<ul> <li>\u2705 Simplify tests for websockets. PR #13202 by @alejsdev.</li> <li>\u2705 Simplify tests for request_form_models . PR #13183 by @alejsdev.</li> <li>\u2705 Simplify tests for separate_openapi_schemas. PR #13201 by @alejsdev.</li> <li>\u2705 Simplify tests for security. PR #13200 by @alejsdev.</li> <li>\u2705 Simplify tests for schema_extra_example. PR #13197 by @alejsdev.</li> <li>\u2705 Simplify tests for request_model. PR #13195 by @alejsdev.</li> <li>\u2705 Simplify tests for request_forms_and_files. PR #13185 by @alejsdev.</li> <li>\u2705 Simplify tests for request_forms. PR #13184 by @alejsdev.</li> <li>\u2705 Simplify tests for path_query_params. PR #13181 by @alejsdev.</li> <li>\u2705 Simplify tests for path_operation_configurations. PR #13180 by @alejsdev.</li> <li>\u2705 Simplify tests for header_params. PR #13179 by @alejsdev.</li> <li>\u2705 Simplify tests for extra_models. PR #13178 by @alejsdev.</li> <li>\u2705 Simplify tests for extra_data_types. PR #13177 by @alejsdev.</li> <li>\u2705 Simplify tests for cookie_params. PR #13176 by @alejsdev.</li> <li>\u2705 Simplify tests for dependencies. PR #13174 by @alejsdev.</li> <li>\u2705 Simplify tests for body_updates. PR #13172 by @alejsdev.</li> <li>\u2705 Simplify tests for body_nested_models. PR #13171 by @alejsdev.</li> <li>\u2705 Simplify tests for body_multiple_params. PR #13170 by @alejsdev.</li> <li>\u2705 Simplify tests for body_fields. PR #13169 by @alejsdev.</li> <li>\u2705 Simplify tests for body. PR #13168 by @alejsdev.</li> <li>\u2705 Simplify tests for bigger_applications. PR #13167 by @alejsdev.</li> <li>\u2705 Simplify tests for background_tasks. PR #13166 by @alejsdev.</li> <li>\u2705 Simplify tests for additional_status_codes. PR #13149 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_4","title":"Docs","text":"<ul> <li>\u270f\ufe0f Update Strawberry integration docs. PR #13155 by @kinuax.</li> <li>\ud83d\udd25 Remove unused Peewee tutorial files. PR #13158 by @alejsdev.</li> <li>\ud83d\udcdd Update image in body-nested-model docs. PR #11063 by @untilhamza.</li> <li>\ud83d\udcdd Update <code>readyapi-cli</code> UI examples in docs. PR #13107 by @Zhongheng-Cheng.</li> <li>\ud83d\udc77 Add new GitHub Action to update contributors, translators, and translation reviewers. PR #13136 by @khulnasoft.</li> <li>\u270f\ufe0f Fix typo in <code>docs/en/docs/virtual-environments.md</code>. PR #13124 by @khulnasoft.</li> <li>\u270f\ufe0f Fix error in <code>docs/en/docs/contributing.md</code>. PR #12899 by @kingsubin.</li> <li>\ud83d\udcdd Minor corrections in <code>docs/en/docs/tutorial/sql-databases.md</code>. PR #13081 by @alv2017.</li> <li>\ud83d\udcdd Update includes in <code>docs/ru/docs/tutorial/query-param-models.md</code>. PR #12994 by @alejsdev.</li> <li>\u270f\ufe0f Fix typo in README installation instructions. PR #13011 by @dave-hay.</li> <li>\ud83d\udcdd Update docs for <code>readyapi-cli</code>. PR #13031 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_6","title":"Translations","text":"<ul> <li>\ud83c\udf10 Update Portuguese Translation for <code>docs/pt/docs/tutorial/request-forms.md</code>. PR #13216 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Update Portuguese translation for <code>docs/pt/docs/advanced/settings.md</code>. PR #13209 by @ceb10n.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/security/oauth2-jwt.md</code>. PR #13205 by @ceb10n.</li> <li>\ud83c\udf10 Add Indonesian translation for <code>docs/id/docs/index.md</code>. PR #13191 by @gerry-sabar.</li> <li>\ud83c\udf10 Add Indonesian translation for <code>docs/id/docs/tutorial/static-files.md</code>. PR #13092 by @guspan-tanadi.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/security/get-current-user.md</code>. PR #13188 by @ceb10n.</li> <li>\ud83c\udf10 Remove Wrong Portuguese translations location for <code>docs/pt/docs/advanced/benchmarks.md</code>. PR #13187 by @ceb10n.</li> <li>\ud83c\udf10 Update Portuguese translations. PR #13156 by @nillvitor.</li> <li>\ud83c\udf10 Update Russian translation for <code>docs/ru/docs/tutorial/security/first-steps.md</code>. PR #13159 by @Yarous.</li> <li>\u270f\ufe0f Delete unnecessary backspace in <code>docs/ja/docs/tutorial/path-params-numeric-validations.md</code>. PR #12238 by @FakeDocument.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/readyapi-cli.md</code>. PR #13102 by @Zhongheng-Cheng.</li> <li>\ud83c\udf10 Add new Spanish translations for all docs with new LLM-assisted system using PydanticAI. PR #13122 by @khulnasoft.</li> <li>\ud83c\udf10 Update existing Spanish translations using the new LLM-assisted system using PydanticAI. PR #13118 by @khulnasoft.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/advanced/security/oauth2-scopes.md</code>. PR #13110 by @ChenPu2002.</li> <li>\ud83c\udf10 Add Indonesian translation for <code>docs/id/docs/tutorial/path-params.md</code>. PR #13086 by @gerry-sabar.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/sql-databases.md</code>. PR #13093 by @GeumBinLee.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/async.md</code>. PR #13095 by @Zhongheng-Cheng.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/openapi-webhooks.md</code>. PR #13091 by @Zhongheng-Cheng.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/async-tests.md</code>. PR #13074 by @Zhongheng-Cheng.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/readyapi-cli.md</code>. PR #13020 by @ykertytsky.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/events.md</code>. PR #12512 by @ZhibangYue.</li> <li>\ud83c\udf10 Add Russian translation for <code>/docs/ru/docs/tutorial/sql-databases.md</code>. PR #13079 by @alv2017.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/advanced/testing-dependencies.md</code>. PR #13066 by @Zhongheng-Cheng.</li> <li>\ud83c\udf10 Update Traditional Chinese translation for <code>docs/zh-hant/docs/tutorial/index.md</code>. PR #13075 by @codingjenny.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/sql-databases.md</code>. PR #13051 by @Zhongheng-Cheng.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/query-params-str-validations.md</code>. PR #12928 by @Vincy1230.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/header-param-models.md</code>. PR #13040 by @Zhongheng-Cheng.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/path-params.md</code>. PR #12926 by @Vincy1230.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/first-steps.md</code>. PR #12923 by @Vincy1230.</li> <li>\ud83c\udf10 Update Russian translation for <code>docs/ru/docs/deployment/docker.md</code>. PR #13048 by @anklav24.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/generate-clients.md</code>. PR #13030 by @vitumenezes.</li> <li>\ud83c\udf10 Add Indonesian translation for <code>docs/id/docs/tutorial/first-steps.md</code>. PR #13042 by @gerry-sabar.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/cookie-param-models.md</code>. PR #13038 by @Zhongheng-Cheng.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/request-form-models.md</code>. PR #13045 by @Zhongheng-Cheng.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/virtual-environments.md</code>. PR #13026 by @alv2017.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/testing.md</code>. PR #12968 by @jts8257.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/async-test.md</code>. PR #12918 by @icehongssii.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/security/oauth2-jwt.md</code>. PR #10601 by @AlertRED.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/security/simple-oauth2.md</code>. PR #10599 by @AlertRED.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/security/get-current-user.md</code>. PR #10594 by @AlertRED.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/features.md</code>. PR #12441 by @codingjenny.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/virtual-environments.md</code>. PR #12791 by @Vincy1230.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/templates.md</code>. PR #12726 by @Heumhub.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/readyapi-cli.md</code>. PR #13041 by @alv2017.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/cookie-param-models.md</code>. PR #13000 by @hard-coders.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/header-param-models.md</code>. PR #13001 by @hard-coders.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/request-form-models.md</code>. PR #13002 by @hard-coders.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/request-forms.md</code>. PR #13003 by @hard-coders.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/resources/index.md</code>. PR #13004 by @hard-coders.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/how-to/configure-swagger-ui.md</code>. PR #12898 by @nahyunkeem.</li> <li>\ud83c\udf10 Add Korean translation to <code>docs/ko/docs/advanced/additional-status-codes.md</code>. PR #12715 by @nahyunkeem.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/tutorial/first-steps.md</code>. PR #12467 by @codingjenny.</li> </ul>"},{"location":"release-notes/#internal_5","title":"Internal","text":"<ul> <li>\ud83d\udd27 Add Pydantic 2 trove classifier. PR #13199 by @johnthagen.</li> <li>\ud83d\udc65 Update ReadyAPI People - Sponsors. PR #13231 by @khulnasoft.</li> <li>\ud83d\udc77 Refactor ReadyAPI People Sponsors to use 2 tokens. PR #13228 by @khulnasoft.</li> <li>\ud83d\udc77 Update token for ReadyAPI People - Sponsors. PR #13225 by @khulnasoft.</li> <li>\ud83d\udc77 Add independent CI automation for ReadyAPI People - Sponsors. PR #13221 by @khulnasoft.</li> <li>\ud83d\udc77 Add retries to Smokeshow. PR #13151 by @khulnasoft.</li> <li>\ud83d\udd27 Update Speakeasy sponsor graphic. PR #13147 by @chailandau.</li> <li>\ud83d\udc65 Update ReadyAPI GitHub topic repositories. PR #13146 by @khulnasoft.</li> <li>\ud83d\udc77\u200d\u2640\ufe0f Add script for GitHub Topic Repositories and update External Links. PR #13135 by @alejsdev.</li> <li>\ud83d\udc65 Update ReadyAPI People - Contributors and Translators. PR #13145 by @khulnasoft.</li> <li>\u2b06 Bump markdown-include-variants from 0.0.3 to 0.0.4. PR #13129 by @dependabot[bot].</li> <li>\u2b06 Bump inline-snapshot from 0.14.0 to 0.18.1. PR #13132 by @dependabot[bot].</li> <li>\u2b06 Bump mkdocs-macros-plugin from 1.0.5 to 1.3.7. PR #13133 by @dependabot[bot].</li> <li>\ud83d\udd28 Add internal scripts to generate language translations with PydanticAI, include Spanish prompt. PR #13123 by @khulnasoft.</li> <li>\u2b06 Bump astral-sh/setup-uv from 4 to 5. PR #13096 by @dependabot[bot].</li> <li>\ud83d\udd27 Update sponsors: rename CryptAPI to BlockBee. PR #13078 by @khulnasoft.</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.12.2 to 1.12.3. PR #13055 by @dependabot[bot].</li> <li>\u2b06 Bump types-ujson from 5.7.0.1 to 5.10.0.20240515. PR #13018 by @dependabot[bot].</li> <li>\u2b06 Bump black from 24.3.0 to 24.10.0. PR #13014 by @dependabot[bot].</li> <li>\u2b06 Bump inline-snapshot from 0.13.0 to 0.14.0. PR #13017 by @dependabot[bot].</li> <li>\u2b06 Bump dirty-equals from 0.6.0 to 0.8.0. PR #13015 by @dependabot[bot].</li> <li>\u2b06 Bump cloudflare/wrangler-action from 3.12 to 3.13. PR #12996 by @dependabot[bot].</li> <li>\u2b06 Bump astral-sh/setup-uv from 3 to 4. PR #12982 by @dependabot[bot].</li> <li>\ud83d\udd27 Remove duplicate actions/checkout in <code>notify-translations.yml</code>. PR #12915 by @tinyboxvk.</li> <li>\ud83d\udd27 Update team members. PR #13033 by @khulnasoft.</li> <li>\ud83d\udcdd Update sponsors: remove Codacy. PR #13032 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01156","title":"0.115.6","text":""},{"location":"release-notes/#fixes_5","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Preserve traceback when an exception is raised in sync dependency with <code>yield</code>. PR #5823 by @sombek.</li> </ul>"},{"location":"release-notes/#refactors_3","title":"Refactors","text":"<ul> <li>\u267b\ufe0f Update tests and internals for compatibility with Pydantic &gt;=2.10. PR #12971 by @tamird.</li> </ul>"},{"location":"release-notes/#docs_5","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update includes format in docs with an automated script. PR #12950 by @khulnasoft.</li> <li>\ud83d\udcdd Update includes for <code>docs/de/docs/advanced/using-request-directly.md</code>. PR #12685 by @alissadb.</li> <li>\ud83d\udcdd Update includes for <code>docs/de/docs/how-to/conditional-openapi.md</code>. PR #12689 by @alissadb.</li> </ul>"},{"location":"release-notes/#translations_7","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/async.md</code>. PR #12990 by @ILoveSorasakiHina.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/tutorial/query-param-models.md</code>. PR #12932 by @Vincy1230.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/testing-dependencies.md</code>. PR #12992 by @Limsunoh.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/websockets.md</code>. PR #12991 by @kwang1215.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/response-model.md</code>. PR #12933 by @AndreBBM.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/middlewares.md</code>. PR #12753 by @nahyunkeem.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/openapi-webhooks.md</code>. PR #12752 by @saeye.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/query-param-models.md</code>. PR #12931 by @Vincy1230.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/query-param-models.md</code>. PR #12445 by @gitgernit.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/query-param-models.md</code>. PR #12940 by @jts8257.</li> <li>\ud83d\udd25 Remove obsolete tutorial translation to Chinese for <code>docs/zh/docs/tutorial/sql-databases.md</code>, it references files that are no longer on the repo. PR #12949 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_6","title":"Internal","text":"<ul> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12954 by @pre-commit-ci[bot].</li> </ul>"},{"location":"release-notes/#01155","title":"0.115.5","text":""},{"location":"release-notes/#refactors_4","title":"Refactors","text":"<ul> <li>\u267b\ufe0f Update internal checks to support Pydantic 2.10. PR #12914 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_6","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/body.md</code>. PR #12757 by @gsheni.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/testing-dependencies.md</code>. PR #12647 by @AyushSinghal1794.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/metadata.md</code>. PR #12773 by @Nimitha-jagadeesha.</li> <li>\ud83d\udcdd Update <code>docs/en/docs/tutorial/dependencies/dependencies-with-yield.md</code>. PR #12045 by @xuvjso.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/dependencies/global-dependencies.md</code>. PR #12653 by @vishnuvskvkl.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/body-updates.md</code>. PR #12712 by @davioc.</li> <li>\ud83d\udcdd Remove mention of Celery in the project generators. PR #12742 by @david-caro.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/header-param-models.md</code>. PR #12814 by @zhaohan-dong.</li> <li>\ud83d\udcdd Update <code>contributing.md</code> docs, include note to not translate this page. PR #12841 by @khulnasoft.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/request-forms.md</code>. PR #12648 by @vishnuvskvkl.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/request-form-models.md</code>. PR #12649 by @vishnuvskvkl.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/security/oauth2-jwt.md</code>. PR #12650 by @OCE1960.</li> <li>\ud83d\udcdd Update includes in <code>docs/vi/docs/tutorial/first-steps.md</code>. PR #12754 by @MxPy.</li> <li>\ud83d\udcdd Update includes for <code>docs/pt/docs/advanced/wsgi.md</code>. PR #12769 by @Nimitha-jagadeesha.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md</code>. PR #12815 by @handabaldeep.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/dependencies/classes-as-dependencies.md</code>. PR #12813 by @handabaldeep.</li> <li>\u270f\ufe0f Fix error in <code>docs/en/docs/tutorial/middleware.md</code>. PR #12819 by @alejsdev.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/security/get-current-user.md</code>. PR #12645 by @OCE1960.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/security/first-steps.md</code>. PR #12643 by @OCE1960.</li> <li>\ud83d\udcdd Update includes in <code>docs/de/docs/advanced/additional-responses.md</code>. PR #12821 by @zhaohan-dong.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/generate-clients.md</code>. PR #12642 by @AyushSinghal1794.</li> <li>\ud83d\udcdd Fix admonition double quotes with new syntax. PR #12835 by @khulnasoft.</li> <li>\ud83d\udcdd Update includes in <code>docs/zh/docs/advanced/additional-responses.md</code>. PR #12828 by @zhaohan-dong.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/path-params-numeric-validations.md</code>. PR #12825 by @zhaohan-dong.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/advanced/testing-websockets.md</code>. PR #12761 by @hamidrasti.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/advanced/using-request-directly.md</code>. PR #12760 by @hamidrasti.</li> <li>\ud83d\udcdd Update includes for <code>docs/advanced/wsgi.md</code>. PR #12758 by @hamidrasti.</li> <li>\ud83d\udcdd Update includes in <code>docs/de/docs/tutorial/middleware.md</code>. PR #12729 by @paintdog.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/schema-extra-example.md</code>. PR #12822 by @khulnasoft.</li> <li>\ud83d\udcdd Update includes in <code>docs/fr/docs/advanced/additional-responses.md</code>. PR #12634 by @fegmorte.</li> <li>\ud83d\udcdd Update includes in <code>docs/fr/docs/advanced/path-operation-advanced-configuration.md</code>. PR #12633 by @kantandane.</li> <li>\ud83d\udcdd Update includes in <code>docs/fr/docs/advanced/response-directly.md</code>. PR #12632 by @kantandane.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/header-params.md</code>. PR #12640 by @vishnuvskvkl.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/cookie-param-models.md</code>. PR #12639 by @vishnuvskvkl.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/extra-models.md</code>. PR #12638 by @vishnuvskvkl.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/cors.md</code>. PR #12637 by @vishnuvskvkl.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/dependencies/sub-dependencies.md</code>. PR #12810 by @handabaldeep.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/body-nested-models.md</code>. PR #12812 by @zhaohan-dong.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/path-operation-configuration.md</code>. PR #12809 by @AlexWendland.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/request-files.md</code>. PR #12818 by @zhaohan-dong.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/tutorial/query-param-models.md</code>. PR #12817 by @handabaldeep.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/path-params.md</code>. PR #12811 by @AlexWendland.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/response-model.md</code>. PR #12621 by @kantandane.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/websockets.md</code>. PR #12606 by @vishnuvskvkl.</li> <li>\ud83d\udcdd Updates include for <code>docs/en/docs/tutorial/cookie-params.md</code>. PR #12808 by @handabaldeep.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/middleware.md</code>. PR #12807 by @AlexWendland.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/sub-applications.md</code>. PR #12806 by @zhaohan-dong.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/response-headers.md</code>. PR #12805 by @zhaohan-dong.</li> <li>\ud83d\udcdd Update includes in <code>docs/fr/docs/tutorial/first-steps.md</code>. PR #12594 by @kantandane.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/response-cookies.md</code>. PR #12804 by @zhaohan-dong.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/path-operation-advanced-configuration.md</code>. PR #12802 by @zhaohan-dong.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/advanced/response-directly.md</code>. PR #12803 by @handabaldeep.</li> <li>\ud83d\udcdd Update includes in <code>docs/zh/docs/tutorial/background-tasks.md</code>. PR #12798 by @zhaohan-dong.</li> <li>\ud83d\udcdd Update includes for <code>docs/de/docs/tutorial/body-multiple-params.md</code>. PR #12699 by @alissadb.</li> <li>\ud83d\udcdd Update includes in <code>docs/em/docs/tutorial/body-updates.md</code>. PR #12799 by @AlexWendland.</li> <li>\ud83d\udcdd Update includes <code>docs/en/docs/advanced/response-change-status-code.md</code>. PR #12801 by @handabaldeep.</li> <li>\ud83d\udcdd Update includes <code>docs/en/docs/advanced/openapi-callbacks.md</code>. PR #12800 by @handabaldeep.</li> <li>\ud83d\udcdd  Update includes in <code>docs/fr/docs/tutorial/body-multiple-params.md</code>. PR #12598 by @kantandane.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/body-multiple-params.md</code>. PR #12593 by @Tashanam-Shahbaz.</li> <li>\ud83d\udcdd Update includes in <code>docs/pt/docs/tutorial/background-tasks.md</code>. PR #12736 by @bhunao.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/advanced/custom-response.md</code>. PR #12797 by @handabaldeep.</li> <li>\ud83d\udcdd Update includes for <code>docs/pt/docs/python-types.md</code>. PR #12671 by @ceb10n.</li> <li>\ud83d\udcdd Update includes for <code>docs/de/docs/python-types.md</code>. PR #12660 by @alissadb.</li> <li>\ud83d\udcdd Update includes for <code>docs/de/docs/advanced/dataclasses.md</code>. PR #12658 by @alissadb.</li> <li>\ud83d\udcdd Update includes in <code>docs/fr/docs/tutorial/path-params.md</code>. PR #12592 by @kantandane.</li> <li>\ud83d\udcdd Update includes for <code>docs/de/docs/how-to/configure-swagger-ui.md</code>. PR #12690 by @alissadb.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/security/oauth2-scopes.md</code>. PR #12572 by @krishnamadhavan.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/how-to/conditional-openapi.md</code>. PR #12624 by @rabinlamadong.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/dependencies/index.md</code>. PR #12615 by @bharara.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/response-status-code.md</code>. PR #12620 by @kantandane.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/how-to/custom-docs-ui-assets.md</code>. PR #12623 by @rabinlamadong.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/openapi-webhooks.md</code>. PR #12605 by @salmantec.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/events.md</code>. PR #12604 by @salmantec.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/dataclasses.md</code>. PR #12603 by @salmantec.</li> <li>\ud83d\udcdd Update includes in <code>docs/es/docs/tutorial/cookie-params.md</code>. PR #12602 by @antonyare93.</li> <li>\ud83d\udcdd Update includes in <code>docs/fr/docs/tutorial/path-params-numeric-validations.md</code>. PR #12601 by @kantandane.</li> <li>\ud83d\udcdd Update includes in <code>docs/fr/docs/tutorial/background-tasks.md</code>. PR #12600 by @kantandane.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/encoder.md</code>. PR #12597 by @tonyjly.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/how-to/custom-docs-ui-assets.md</code>. PR #12557 by @philipokiokio.</li> <li>\ud83c\udfa8 Adjust spacing. PR #12635 by @alejsdev.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/how-to/custom-request-and-route.md</code>. PR #12560 by @philipokiokio.</li> </ul>"},{"location":"release-notes/#translations_8","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/testing-websockets.md</code>. PR #12739 by @Limsunoh.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/environment-variables.md</code>. PR #12785 by @Vincy1230.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/environment-variables.md</code>. PR #12784 by @Vincy1230.</li> <li>\ud83c\udf10 Add Korean translation for <code>ko/docs/advanced/response-headers.md</code>. PR #12740 by @kwang1215.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/virtual-environments.md</code>. PR #12790 by @Vincy1230.</li> <li>\ud83c\udf10 Add Korean translation for <code>/docs/ko/docs/environment-variables.md</code>. PR #12526 by @Tolerblanc.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/history-design-future.md</code>. PR #12646 by @saeye.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/advanced-dependencies.md</code>. PR #12675 by @kim-sangah.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/how-to/conditional-openapi.md</code>. PR #12731 by @sptcnl.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/using_request_directly.md</code>. PR #12738 by @kwang1215.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/testing-events.md</code>. PR #12741 by @9zimin9.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/security/index.md</code>. PR #12743 by @kim-sangah.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/path-operation-advanced-configuration.md</code>. PR #12762 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/wsgi.md</code>. PR #12659 by @Limsunoh.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/websockets.md</code>. PR #12703 by @devfernandoa.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/security/simple-oauth2.md</code>. PR #12520 by @LidiaDomingos.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/response-directly.md</code>. PR #12674 by @9zimin9.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/middleware.md</code>. PR #12704 by @devluisrodrigues.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/openapi-callbacks.md</code>. PR #12705 by @devfernandoa.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/request-files.md</code>. PR #12706 by @devluisrodrigues.</li> <li>\ud83c\udf10 Add Portuguese Translation for <code>docs/pt/docs/advanced/custom-response.md</code>. PR #12631 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/metadata.md</code>. PR #12538 by @LinkolnR.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/metadata.md</code>. PR #12541 by @kwang1215.</li> <li>\ud83c\udf10 Add Korean Translation for <code>docs/ko/docs/advanced/response-cookies.md</code>. PR #12546 by @kim-sangah.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/readyapi-cli.md</code>. PR #12515 by @dhdld.</li> <li>\ud83c\udf10 Add Korean Translation for <code>docs/ko/docs/advanced/response-change-status-code.md</code>. PR #12547 by @9zimin9.</li> </ul>"},{"location":"release-notes/#internal_7","title":"Internal","text":"<ul> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12907 by @pre-commit-ci[bot].</li> <li>\ud83d\udd28 Update docs preview script to show previous version and English version. PR #12856 by @khulnasoft.</li> <li>\u2b06 Bump khulnasoft/latest-changes from 0.3.1 to 0.3.2. PR #12794 by @dependabot[bot].</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.12.0 to 1.12.2. PR #12788 by @dependabot[bot].</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.11.0 to 1.12.0. PR #12781 by @dependabot[bot].</li> <li>\u2b06 Bump cloudflare/wrangler-action from 3.11 to 3.12. PR #12777 by @dependabot[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12766 by @pre-commit-ci[bot].</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.10.3 to 1.11.0. PR #12721 by @dependabot[bot].</li> <li>\u2b06 Update pre-commit requirement from &lt;4.0.0,&gt;=2.17.0 to &gt;=2.17.0,&lt;5.0.0. PR #12749 by @dependabot[bot].</li> <li>\u2b06 Bump cligenius from 0.12.3 to 0.12.5. PR #12748 by @dependabot[bot].</li> <li>\u2b06 Update flask requirement from &lt;3.0.0,&gt;=1.1.2 to &gt;=1.1.2,&lt;4.0.0. PR #12747 by @dependabot[bot].</li> <li>\u2b06 Bump pillow from 10.4.0 to 11.0.0. PR #12746 by @dependabot[bot].</li> <li>\u2b06 Update pytest requirement from &lt;8.0.0,&gt;=7.1.3 to &gt;=7.1.3,&lt;9.0.0. PR #12745 by @dependabot[bot].</li> <li>\ud83d\udd27 Update sponsors: add Render. PR #12733 by @khulnasoft.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12707 by @pre-commit-ci[bot].</li> </ul>"},{"location":"release-notes/#01154","title":"0.115.4","text":""},{"location":"release-notes/#refactors_5","title":"Refactors","text":"<ul> <li>\u267b\ufe0f Update logic to import and check <code>python-multipart</code> for compatibility with newer version. PR #12627 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_7","title":"Docs","text":"<ul> <li>\ud83d\udcdd  Update includes in <code>docs/fr/docs/tutorial/body.md</code>. PR #12596 by @kantandane.</li> <li>\ud83d\udcdd Update includes in <code>docs/fr/docs/tutorial/debugging.md</code>. PR #12595 by @kantandane.</li> <li>\ud83d\udcdd Update includes in <code>docs/fr/docs/tutorial/query-params-str-validations.md</code>. PR #12591 by @kantandane.</li> <li>\ud83d\udcdd Update includes in <code>docs/fr/docs/tutorial/query-params.md</code>. PR #12589 by @kantandane.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/tutorial/body-fields.md</code>. PR #12588 by @lucaromagnoli.</li> <li>\ud83d\udcdd Update includes in <code>docs/de/docs/tutorial/response-status-code.md</code>. PR #12585 by @abejaranoh.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/body.md</code>. PR #12586 by @lucaromagnoli.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/behind-a-proxy.md</code>. PR #12583 by @imjuanleonard.</li> <li>\ud83d\udcdd Update includes syntax for <code>docs/pl/docs/tutorial/first-steps.md</code>. PR #12584 by @sebkozlo.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/middleware.md</code>. PR #12582 by @montanarograziano.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/additional-status-codes.md</code>. PR #12577 by @krishnamadhavan.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/advanced-dependencies.md</code>. PR #12578 by @krishnamadhavan.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/additional-responses.md</code>. PR #12576 by @krishnamadhavan.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/static-files.md</code>. PR #12575 by @lucaromagnoli.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/advanced/async-tests.md</code>. PR #12568 by @krishnamadhavan.</li> <li>\ud83d\udcdd Update includes in <code>docs/pt/docs/advanced/behind-a-proxy.md</code>. PR #12563 by @asmioglou.</li> <li>\ud83d\udcdd Update includes in <code>docs/de/docs/advanced/security/http-basic-auth.md</code>. PR #12561 by @Nimitha-jagadeesha.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/background-tasks.md</code>. PR #12559 by @FarhanAliRaza.</li> <li>\ud83d\udcdd Update includes in <code>docs/fr/docs/python-types.md</code>. PR #12558 by @Ismailtlem.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/how-to/graphql.md</code>. PR #12564 by @philipokiokio.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/how-to/extending-openapi.md</code>. PR #12562 by @philipokiokio.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/how-to/configure-swagger-ui.md</code>. PR #12556 by @khulnasoft.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/how-to/separate-openapi-schemas.md</code>. PR #12555 by @khulnasoft.</li> <li>\ud83d\udcdd Update includes for <code>docs/en/docs/advanced/security/http-basic-auth.md</code>. PR #12553 by @khulnasoft.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/tutorial/first-steps.md</code>. PR #12552 by @khulnasoft.</li> <li>\ud83d\udcdd Update includes in <code>docs/en/docs/python-types.md</code>. PR #12551 by @khulnasoft.</li> <li>\ud83d\udcdd Fix link in OAuth2 docs. PR #12550 by @khulnasoft.</li> <li>\ud83d\udcdd Add External Link: ReadyAPI do Zero. PR #12533 by @rennerocha.</li> <li>\ud83d\udcdd Fix minor typos. PR #12516 by @kkirsche.</li> <li>\ud83c\udf10 Fix rendering issue in translations. PR #12509 by @alejsdev.</li> </ul>"},{"location":"release-notes/#translations_9","title":"Translations","text":"<ul> <li>\ud83d\udcdd Update includes in <code>docs/de/docs/advanced/async-tests.md</code>. PR #12567 by @imjuanleonard.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/sql-databases.md</code>. PR #12530 by @ilacftemp.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/benchmarks.md</code>. PR #12540 by @Limsunoh.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/how-to/separate-openapi-schemas.md</code>. PR #12518 by @ilacftemp.</li> <li>\ud83c\udf10 Update Traditional Chinese translation for <code>docs/zh-hant/docs/deployment/index.md</code>. PR #12521 by @codingjenny.</li> <li>\ud83c\udf10 Update Traditional Chinese translation for <code>docs/zh-hant/docs/deployment/cloud.md</code>. PR #12522 by @codingjenny.</li> <li>\ud83c\udf10 Update Traditional Chinese translation for <code>docs/zh-hant/docs/how-to/index.md</code>. PR #12523 by @codingjenny.</li> <li>\ud83c\udf10 Update Traditional Chinese translation for <code>docs/zh-hant/docs/tutorial/index.md</code>. PR #12524 by @codingjenny.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/how-to/index.md</code>. PR #12468 by @codingjenny.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/tutorial/index.md</code>. PR #12466 by @codingjenny.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/header-param-models.md</code>. PR #12437 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/how-to/extending-openapi.md</code>. PR #12470 by @ilacftemp.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/dataclasses.md</code>. PR #12475 by @leoscarlato.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/how-to/custom-request-and-route.md</code>. PR #12483 by @devfernandoa.</li> </ul>"},{"location":"release-notes/#internal_8","title":"Internal","text":"<ul> <li>\u2b06 Bump cloudflare/wrangler-action from 3.9 to 3.11. PR #12544 by @dependabot[bot].</li> <li>\ud83d\udc77 Update GitHub Action to deploy docs previews to handle missing deploy comments. PR #12527 by @khulnasoft.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12505 by @pre-commit-ci[bot].</li> </ul>"},{"location":"release-notes/#01153","title":"0.115.3","text":""},{"location":"release-notes/#upgrades_3","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette to <code>&gt;=0.40.0,&lt;0.42.0</code>. PR #12469 by @defnull.</li> </ul>"},{"location":"release-notes/#docs_8","title":"Docs","text":"<ul> <li>\ud83d\udcdd Fix broken link in docs. PR #12495 by @eltonjncorreia.</li> </ul>"},{"location":"release-notes/#translations_10","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/readyapi-cli.md</code>. PR #12444 by @codingjenny.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/deployment/index.md</code>. PR #12439 by @codingjenny.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/how-to/testing-database.md</code>. PR #12472 by @GuilhermeRameh.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/how-to/custom-docs-ui-assets.md</code>. PR #12473 by @devluisrodrigues.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/response-headers.md</code>. PR #12458 by @leonardopaloschi.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/deployment/cloud.md</code>. PR #12440 by @codingjenny.</li> <li>\ud83c\udf10 Update Portuguese translation for <code>docs/pt/docs/python-types.md</code>. PR #12428 by @ceb10n.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/environment-variables.md</code>. PR #12436 by @wisderfin.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/resources/index.md</code>. PR #12443 by @codingjenny.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/about/index.md</code>. PR #12438 by @codingjenny.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/query-param-models.md</code>. PR #12414 by @ceb10n.</li> <li>\ud83c\udf10 Remove Portuguese translation for <code>docs/pt/docs/deployment.md</code>. PR #12427 by @ceb10n.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/body-updates.md</code>. PR #12381 by @andersonrocha0.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/response-cookies.md</code>. PR #12417 by @Paulofalcao2002.</li> </ul>"},{"location":"release-notes/#internal_9","title":"Internal","text":"<ul> <li>\ud83d\udc77 Update issue manager workflow . PR #12457 by @alejsdev.</li> <li>\ud83d\udd27 Update team, include YuriiMotov \ud83d\ude80. PR #12453 by @khulnasoft.</li> <li>\ud83d\udc77 Refactor label-approved, make it an internal script instead of an external GitHub Action. PR #12280 by @khulnasoft.</li> <li>\ud83d\udc77 Fix smokeshow, checkout files on CI. PR #12434 by @khulnasoft.</li> <li>\ud83d\udc77 Use uv in CI. PR #12281 by @khulnasoft.</li> <li>\u2b06 Update httpx requirement from &lt;0.25.0,&gt;=0.23.0 to &gt;=0.23.0,&lt;0.28.0. PR #11509 by @dependabot[bot].</li> </ul>"},{"location":"release-notes/#01152","title":"0.115.2","text":""},{"location":"release-notes/#upgrades_4","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette to <code>&gt;=0.37.2,&lt;0.41.0</code>. PR #12431 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01151","title":"0.115.1","text":""},{"location":"release-notes/#fixes_6","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix openapi generation with responses kwarg. PR #10895 by @flxdot.</li> <li>\ud83d\udc1b Remove <code>Required</code> shadowing from readyapi using Pydantic v2. PR #12197 by @pachewise.</li> </ul>"},{"location":"release-notes/#refactors_6","title":"Refactors","text":"<ul> <li>\u267b\ufe0f Update type annotations for improved <code>python-multipart</code>. PR #12407 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_9","title":"Docs","text":"<ul> <li>\u2728 Add new tutorial for SQL databases with SQLDev. PR #12285 by @khulnasoft.</li> <li>\ud83d\udcdd Add External Link: How to profile a ReadyAPI asynchronous request. PR #12389 by @brouberol.</li> <li>\ud83d\udd27 Remove <code>base_path</code> for <code>mdx_include</code> Markdown extension in MkDocs. PR #12391 by @khulnasoft.</li> <li>\ud83d\udcdd Update link to Swagger UI configuration docs. PR #12264 by @makisukurisu.</li> <li>\ud83d\udcdd Adding links for Playwright and Vite in <code>docs/project-generation.md</code>. PR #12274 by @kayqueGovetri.</li> <li>\ud83d\udcdd Fix small typos in the documentation. PR #12213 by @svlandeg.</li> </ul>"},{"location":"release-notes/#translations_11","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/cookie-param-models.md</code>. PR #12298 by @ceb10n.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/how-to/graphql.md</code>. PR #12215 by @AnandaCampelo.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/security/oauth2-scopes.md</code>. PR #12263 by @ceb10n.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/deployment/concepts.md</code>. PR #12219 by @marcelomarkus.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/how-to/conditional-openapi.md</code>. PR #12221 by @marcelomarkus.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/response-directly.md</code>. PR #12266 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Update Portuguese translation for <code>docs/pt/docs/tutorial/cookie-params.md</code>. PR #12297 by @ceb10n.</li> <li>\ud83c\udf10 Fix Korean translation for <code>docs/ko/docs/tutorial/index.md</code>. PR #12278 by @kkotipy.</li> <li>\ud83c\udf10 Update Portuguese translation for <code>docs/pt/docs/advanced/security/http-basic-auth.md</code>. PR #12275 by @andersonrocha0.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/deployment/cloud.md</code>. PR #12217 by @marcelomarkus.</li> <li>\u270f\ufe0f Fix typo in <code>docs/es/docs/python-types.md</code>. PR #12235 by @JavierSanchezCastro.</li> <li>\ud83c\udf10 Add Dutch translation for <code>docs/nl/docs/environment-variables.md</code>. PR #12200 by @maxscheijen.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/deployment/manually.md</code>. PR #12210 by @JoaoGustavoRogel.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/deployment/server-workers.md</code>. PR #12220 by @marcelomarkus.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/how-to/configure-swagger-ui.md</code>. PR #12222 by @marcelomarkus.</li> </ul>"},{"location":"release-notes/#internal_10","title":"Internal","text":"<ul> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12396 by @pre-commit-ci[bot].</li> <li>\ud83d\udd28 Add script to generate variants of files. PR #12405 by @khulnasoft.</li> <li>\ud83d\udd27 Add speakeasy-api to <code>sponsors_badge.yml</code>. PR #12404 by @khulnasoft.</li> <li>\u2795 Add docs dependency: markdown-include-variants. PR #12399 by @khulnasoft.</li> <li>\ud83d\udcdd Fix extra mdx-base-path paths. PR #12397 by @khulnasoft.</li> <li>\ud83d\udc77 Tweak labeler to not override custom labels. PR #12398 by @khulnasoft.</li> <li>\ud83d\udc77 Update worfkow deploy-docs-notify URL. PR #12392 by @khulnasoft.</li> <li>\ud83d\udc77 Update Cloudflare GitHub Action. PR #12387 by @khulnasoft.</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.10.1 to 1.10.3. PR #12386 by @dependabot[bot].</li> <li>\u2b06 Bump mkdocstrings[python] from 0.25.1 to 0.26.1. PR #12371 by @dependabot[bot].</li> <li>\u2b06 Bump griffe-typingdoc from 0.2.6 to 0.2.7. PR #12370 by @dependabot[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12331 by @pre-commit-ci[bot].</li> <li>\ud83d\udd27 Update sponsors, remove Fine.dev. PR #12271 by @khulnasoft.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12253 by @pre-commit-ci[bot].</li> <li>\u270f\ufe0f Fix docstring typos in http security. PR #12223 by @albertvillanova.</li> </ul>"},{"location":"release-notes/#01150","title":"0.115.0","text":""},{"location":"release-notes/#highlights","title":"Highlights","text":"<p>Now you can declare <code>Query</code>, <code>Header</code>, and <code>Cookie</code> parameters with Pydantic models. \ud83c\udf89</p>"},{"location":"release-notes/#query-parameter-models","title":"<code>Query</code> Parameter Models","text":"<p>Use Pydantic models for <code>Query</code> parameters:</p> <pre><code>from typing import Annotated, Literal\n\nfrom readyapi import ReadyAPI, Query\nfrom pydantic import BaseModel, Field\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: Annotated[FilterParams, Query()]):\n    return filter_query\n</code></pre> <p>Read the new docs: Query Parameter Models.</p>"},{"location":"release-notes/#header-parameter-models","title":"<code>Header</code> Parameter Models","text":"<p>Use Pydantic models for <code>Header</code> parameters:</p> <pre><code>from typing import Annotated\n\nfrom readyapi import ReadyAPI, Header\nfrom pydantic import BaseModel\n\napp = ReadyAPI()\n\n\nclass CommonHeaders(BaseModel):\n    host: str\n    save_data: bool\n    if_modified_since: str | None = None\n    traceparent: str | None = None\n    x_tag: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(headers: Annotated[CommonHeaders, Header()]):\n    return headers\n</code></pre> <p>Read the new docs: Header Parameter Models.</p>"},{"location":"release-notes/#cookie-parameter-models","title":"<code>Cookie</code> Parameter Models","text":"<p>Use Pydantic models for <code>Cookie</code> parameters:</p> <pre><code>from typing import Annotated\n\nfrom readyapi import Cookie, ReadyAPI\nfrom pydantic import BaseModel\n\napp = ReadyAPI()\n\n\nclass Cookies(BaseModel):\n    session_id: str\n    fatebook_tracker: str | None = None\n    googall_tracker: str | None = None\n\n\n@app.get(\"/items/\")\nasync def read_items(cookies: Annotated[Cookies, Cookie()]):\n    return cookies\n</code></pre> <p>Read the new docs: Cookie Parameter Models.</p>"},{"location":"release-notes/#forbid-extra-query-cookie-header-parameters","title":"Forbid Extra Query (Cookie, Header) Parameters","text":"<p>Use Pydantic models to restrict extra values for <code>Query</code> parameters (also applies to <code>Header</code> and <code>Cookie</code> parameters).</p> <p>To achieve it, use Pydantic's <code>model_config = {\"extra\": \"forbid\"}</code>:</p> <pre><code>from typing import Annotated, Literal\n\nfrom readyapi import ReadyAPI, Query\nfrom pydantic import BaseModel, Field\n\napp = ReadyAPI()\n\n\nclass FilterParams(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []\n\n\n@app.get(\"/items/\")\nasync def read_items(filter_query: Annotated[FilterParams, Query()]):\n    return filter_query\n</code></pre> <p>This applies to <code>Query</code>, <code>Header</code>, and <code>Cookie</code> parameters, read the new docs:</p> <ul> <li>Forbid Extra Query Parameters</li> <li>Forbid Extra Headers</li> <li>Forbid Extra Cookies</li> </ul>"},{"location":"release-notes/#features","title":"Features","text":"<ul> <li>\u2728 Add support for Pydantic models for parameters using <code>Query</code>, <code>Cookie</code>, <code>Header</code>. PR #12199 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_12","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/security/http-basic-auth.md</code>. PR #12195 by @ceb10n.</li> </ul>"},{"location":"release-notes/#internal_11","title":"Internal","text":"<ul> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12204 by @pre-commit-ci[bot].</li> </ul>"},{"location":"release-notes/#01142","title":"0.114.2","text":""},{"location":"release-notes/#fixes_7","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix form field regression with <code>alias</code>. PR #12194 by @Wurstnase.</li> </ul>"},{"location":"release-notes/#translations_13","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/request-form-models.md</code>. PR #12175 by @ceb10n.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/project-generation.md</code>. PR #12170 by @waketzheng.</li> <li>\ud83c\udf10 Add Dutch translation for <code>docs/nl/docs/python-types.md</code>. PR #12158 by @maxscheijen.</li> </ul>"},{"location":"release-notes/#internal_12","title":"Internal","text":"<ul> <li>\ud83d\udca1 Add comments with instructions for Playwright screenshot scripts. PR #12193 by @khulnasoft.</li> <li>\u2795 Add inline-snapshot for tests. PR #12189 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01141","title":"0.114.1","text":""},{"location":"release-notes/#refactors_7","title":"Refactors","text":"<ul> <li>\u26a1\ufe0f Improve performance in request body parsing with a cache for internal model fields. PR #12184 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_10","title":"Docs","text":"<ul> <li>\ud83d\udcdd Remove duplicate line in docs for <code>docs/en/docs/environment-variables.md</code>. PR #12169 by @prometek.</li> </ul>"},{"location":"release-notes/#translations_14","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/virtual-environments.md</code>. PR #12163 by @marcelomarkus.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/environment-variables.md</code>. PR #12162 by @marcelomarkus.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/testing.md</code>. PR #12164 by @marcelomarkus.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/debugging.md</code>. PR #12165 by @marcelomarkus.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/project-generation.md</code>. PR #12157 by @BORA040126.</li> </ul>"},{"location":"release-notes/#internal_13","title":"Internal","text":"<ul> <li>\u2b06 Bump khulnasoft/issue-manager from 0.5.0 to 0.5.1. PR #12173 by @dependabot[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12176 by @pre-commit-ci[bot].</li> <li>\ud83d\udc77 Update <code>issue-manager.yml</code>. PR #12159 by @khulnasoft.</li> <li>\u270f\ufe0f Fix typo in <code>readyapi/params.py</code>. PR #12143 by @surreal30.</li> </ul>"},{"location":"release-notes/#01140","title":"0.114.0","text":"<p>You can restrict form fields to only include those declared in a Pydantic model and forbid any extra field sent in the request using Pydantic's <code>model_config = {\"extra\": \"forbid\"}</code>:</p> <pre><code>from typing import Annotated\n\nfrom readyapi import ReadyAPI, Form\nfrom pydantic import BaseModel\n\napp = ReadyAPI()\n\n\nclass FormData(BaseModel):\n    username: str\n    password: str\n    model_config = {\"extra\": \"forbid\"}\n\n\n@app.post(\"/login/\")\nasync def login(data: Annotated[FormData, Form()]):\n    return data\n</code></pre> <p>Read the new docs: Form Models - Forbid Extra Form Fields.</p>"},{"location":"release-notes/#features_1","title":"Features","text":"<ul> <li>\u2728 Add support for forbidding extra form fields with Pydantic models. PR #12134 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_11","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update docs, Form Models section title, to match config name. PR #12152 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_14","title":"Internal","text":"<ul> <li>\u2705 Update internal tests for latest Pydantic, including CI tweaks to install the latest Pydantic. PR #12147 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01130","title":"0.113.0","text":"<p>Now you can declare form fields with Pydantic models:</p> <pre><code>from typing import Annotated\n\nfrom readyapi import ReadyAPI, Form\nfrom pydantic import BaseModel\n\napp = ReadyAPI()\n\n\nclass FormData(BaseModel):\n    username: str\n    password: str\n\n\n@app.post(\"/login/\")\nasync def login(data: Annotated[FormData, Form()]):\n    return data\n</code></pre> <p>Read the new docs: Form Models.</p>"},{"location":"release-notes/#features_2","title":"Features","text":"<ul> <li>\u2728 Add support for Pydantic models in <code>Form</code> parameters. PR #12129 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_15","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update sponsors: Coherence link. PR #12130 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01124","title":"0.112.4","text":"<p>This release is mainly a big internal refactor to enable adding support for Pydantic models for <code>Form</code> fields, but that feature comes in the next release.</p> <p>This release shouldn't affect apps using ReadyAPI in any way. You don't even have to upgrade to this version yet. It's just a checkpoint. \ud83e\udd13</p>"},{"location":"release-notes/#refactors_8","title":"Refactors","text":"<ul> <li>\u267b\ufe0f Refactor deciding if <code>embed</code> body fields, do not overwrite fields, compute once per router, refactor internals in preparation for Pydantic models in <code>Form</code>, <code>Query</code> and others. PR #12117 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_16","title":"Internal","text":"<ul> <li>\u23ea\ufe0f Temporarily revert \"\u2728 Add support for Pydantic models in <code>Form</code> parameters\" to make a checkpoint release. PR #12128 by @khulnasoft. Restored by PR #12129.</li> <li>\u2728 Add support for Pydantic models in <code>Form</code> parameters. PR #12127 by @khulnasoft. Reverted by PR #12128 to make a checkpoint release with only refactors. Restored by PR #12129.</li> </ul>"},{"location":"release-notes/#01123","title":"0.112.3","text":"<p>This release is mainly internal refactors, it shouldn't affect apps using ReadyAPI in any way. You don't even have to upgrade to this version yet. There are a few bigger releases coming right after. \ud83d\ude80</p>"},{"location":"release-notes/#refactors_9","title":"Refactors","text":"<ul> <li>\u267b\ufe0f Refactor internal <code>check_file_field()</code>, rename to <code>ensure_multipart_is_installed()</code> to clarify its purpose. PR #12106 by @khulnasoft.</li> <li>\u267b\ufe0f Rename internal <code>create_response_field()</code> to <code>create_model_field()</code> as it's used for more than response models. PR #12103 by @khulnasoft.</li> <li>\u267b\ufe0f Refactor and simplify internal data from <code>solve_dependencies()</code> using dataclasses. PR #12100 by @khulnasoft.</li> <li>\u267b\ufe0f Refactor and simplify internal <code>analyze_param()</code> to structure data with dataclasses instead of tuple. PR #12099 by @khulnasoft.</li> <li>\u267b\ufe0f Refactor and simplify dependencies data structures with dataclasses. PR #12098 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_12","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add External Link: Techniques and applications of SQLAlchemy global filters in ReadyAPI. PR #12109 by @TheShubhendra.</li> <li>\ud83d\udcdd Add note about <code>time.perf_counter()</code> in middlewares. PR #12095 by @khulnasoft.</li> <li>\ud83d\udcdd Tweak middleware code sample <code>time.time()</code> to <code>time.perf_counter()</code>. PR #11957 by @domdent.</li> <li>\ud83d\udd27 Update sponsors: Coherence. PR #12093 by @khulnasoft.</li> <li>\ud83d\udcdd Fix async test example not to trigger DeprecationWarning. PR #12084 by @marcinsulikowski.</li> <li>\ud83d\udcdd Update <code>docs_src/path_params_numeric_validations/tutorial006.py</code>. PR #11478 by @MuhammadAshiqAmeer.</li> <li>\ud83d\udcdd Update comma in <code>docs/en/docs/async.md</code>. PR #12062 by @Alec-Gillis.</li> <li>\ud83d\udcdd Update docs about serving ReadyAPI: ASGI servers, Docker containers, etc.. PR #12069 by @khulnasoft.</li> <li>\ud83d\udcdd Clarify <code>response_class</code> parameter, validations, and returning a response directly. PR #12067 by @khulnasoft.</li> <li>\ud83d\udcdd Fix minor typos and issues in the documentation. PR #12063 by @svlandeg.</li> <li>\ud83d\udcdd Add note in Docker docs about ensuring graceful shutdowns and lifespan events with <code>CMD</code> exec form. PR #11960 by @GPla.</li> </ul>"},{"location":"release-notes/#translations_15","title":"Translations","text":"<ul> <li>\ud83c\udf10  Add Dutch translation for <code>docs/nl/docs/features.md</code>. PR #12101 by @maxscheijen.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/testing-events.md</code>. PR #12108 by @ceb10n.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/security/index.md</code>. PR #12114 by @ceb10n.</li> <li>\ud83c\udf10 Add Dutch translation for <code>docs/nl/docs/index.md</code>. PR #12042 by @svlandeg.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/how-to/index.md</code>. PR #12070 by @synthpop123.</li> </ul>"},{"location":"release-notes/#internal_17","title":"Internal","text":"<ul> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12115 by @pre-commit-ci[bot].</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.10.0 to 1.10.1. PR #12120 by @dependabot[bot].</li> <li>\u2b06 Bump pillow from 10.3.0 to 10.4.0. PR #12105 by @dependabot[bot].</li> <li>\ud83d\udc9a Set <code>include-hidden-files</code> to <code>True</code> when using the <code>upload-artifact</code> GH action. PR #12118 by @svlandeg.</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.9.0 to 1.10.0. PR #12112 by @dependabot[bot].</li> <li>\ud83d\udd27 Update sponsors link: Coherence. PR #12097 by @khulnasoft.</li> <li>\ud83d\udd27 Update labeler config to handle sponsorships data. PR #12096 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, remove Kong. PR #12085 by @khulnasoft.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12076 by @pre-commit-ci[bot].</li> <li>\ud83d\udc77 Update <code>latest-changes</code> GitHub Action. PR #12073 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01122","title":"0.112.2","text":""},{"location":"release-notes/#fixes_8","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix <code>allow_inf_nan</code> option for Param and Body classes. PR #11867 by @giunio-prc.</li> <li>\ud83d\udc1b Ensure that <code>app.include_router</code> merges nested lifespans. PR #9630 by @Lancetnik.</li> </ul>"},{"location":"release-notes/#refactors_10","title":"Refactors","text":"<ul> <li>\ud83c\udfa8 Fix typing annotation for semi-internal <code>ReadyAPI.add_api_route()</code>. PR #10240 by @ordinary-jamie.</li> <li>\u2b06\ufe0f Upgrade version of Ruff and reformat. PR #12032 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_13","title":"Docs","text":"<ul> <li>\ud83d\udcdd Fix a typo in <code>docs/en/docs/virtual-environments.md</code>. PR #12064 by @aymenkrifa.</li> <li>\ud83d\udcdd Add docs about Environment Variables and Virtual Environments. PR #12054 by @khulnasoft.</li> <li>\ud83d\udcdd Add Asyncer mention in async docs. PR #12037 by @khulnasoft.</li> <li>\ud83d\udcdd Move the Features docs to the top level to improve the main page menu. PR #12036 by @khulnasoft.</li> <li>\u270f\ufe0f Fix import typo in reference example for <code>Security</code>. PR #11168 by @0shah0.</li> <li>\ud83d\udcdd Highlight correct line in tutorial <code>docs/en/docs/tutorial/body-multiple-params.md</code>. PR #11978 by @svlandeg.</li> <li>\ud83d\udd25 Remove Sentry link from Advanced Middleware docs. PR #12031 by @alejsdev.</li> <li>\ud83d\udcdd Clarify management tasks for translations, multiples files in one PR. PR #12030 by @khulnasoft.</li> <li>\ud83d\udcdd Edit the link to the OpenAPI \"Responses Object\" and \"Response Object\" sections in the \"Additional Responses in OpenAPI\" section. PR #11996 by @VaitoSoi.</li> <li>\ud83d\udd28 Specify <code>email-validator</code> dependency with dash. PR #11515 by @jirikuncar.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/project-generation.md</code>. PR #11947 by @alejsdev.</li> <li>\ud83d\udcdd Fix minor typo. PR #12026 by @MicaelJarniac.</li> <li>\ud83d\udcdd Several docs improvements, tweaks, and clarifications. PR #11390 by @nilslindemann.</li> <li>\ud83d\udcdd Add missing <code>compresslevel</code> parameter on docs for <code>GZipMiddleware</code>. PR #11350 by @junah201.</li> <li>\ud83d\udcdd Fix inconsistent response code when item already exists in docs for testing. PR #11818 by @lokomilo.</li> <li>\ud83d\udcdd Update <code>docs/en/docs/tutorial/body.md</code> with Python 3.10 union type example. PR #11415 by @rangzen.</li> </ul>"},{"location":"release-notes/#translations_16","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/request_file.md</code>. PR #12018 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/learn/index.md</code>. PR #11592 by @ukwhatn.</li> <li>\ud83d\udcdd Update Spanish translation docs for consistency. PR #12044 by @alejsdev.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/dependencies/dependencies-with-yield.md</code>. PR #12028 by @xuvjso.</li> <li>\ud83d\udcdd Update ReadyAPI People, do not translate to have the most recent info. PR #12034 by @khulnasoft.</li> <li>\ud83c\udf10 Update Urdu translation for <code>docs/ur/docs/benchmarks.md</code>. PR #10046 by @AhsanSheraz.</li> </ul>"},{"location":"release-notes/#internal_18","title":"Internal","text":"<ul> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #12046 by @pre-commit-ci[bot].</li> <li>\ud83d\udd27 Update coverage config files. PR #12035 by @khulnasoft.</li> <li>\ud83d\udd28 Standardize shebang across shell scripts. PR #11942 by @gitworkflows.</li> <li>\u2b06 Update sqlalchemy requirement from &lt;1.4.43,&gt;=1.3.18 to &gt;=1.3.18,&lt;2.0.33. PR #11979 by @dependabot[bot].</li> <li>\ud83d\udd0a Remove old ignore warnings. PR #11950 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade griffe-typingdoc for the docs. PR #12029 by @khulnasoft.</li> <li>\ud83d\ude48 Add .coverage* to <code>.gitignore</code>. PR #11940 by @gitworkflows.</li> <li>\u2699\ufe0f Record and show test coverage contexts (what test covers which line). PR #11518 by @slafs.</li> </ul>"},{"location":"release-notes/#01121","title":"0.112.1","text":""},{"location":"release-notes/#upgrades_5","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Allow Starlette 0.38.x, update the pin to <code>&gt;=0.37.2,&lt;0.39.0</code>. PR #11876 by @musicinmybrain.</li> </ul>"},{"location":"release-notes/#docs_14","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update docs section about \"Don't Translate these Pages\". PR #12022 by @khulnasoft.</li> <li>\ud83d\udcdd Add documentation for non-translated pages and scripts to verify them. PR #12020 by @khulnasoft.</li> <li>\ud83d\udcdd Update docs about discussions questions. PR #11985 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_17","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/bigger-applications.md</code>. PR #11971 by @marcelomarkus.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/testing-websockets.md</code>. PR #11994 by @ceb10n.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/testing-dependencies.md</code>. PR #11995 by @ceb10n.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/using-request-directly.md</code>. PR #11956 by @ceb10n.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/tutorial/body-multiple-params.md</code>. PR #11796 by @pe-brian.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/query-params.md</code>. PR #11557 by @caomingpei.</li> <li>\ud83c\udf10 Update typo in Chinese translation for <code>docs/zh/docs/advanced/testing-dependencies.md</code>. PR #11944 by @bestony.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/sub-applications.md</code> and <code>docs/pt/docs/advanced/behind-a-proxy.md</code>. PR #11856 by @marcelomarkus.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/cors.md</code> and <code>docs/pt/docs/tutorial/middleware.md</code>. PR #11916 by @wesinalves.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/tutorial/path-params-numeric-validations.md</code>. PR #11788 by @pe-brian.</li> </ul>"},{"location":"release-notes/#internal_19","title":"Internal","text":"<ul> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.8.14 to 1.9.0. PR #11727 by @dependabot[bot].</li> <li>\ud83d\udd27 Add changelog URL to <code>pyproject.toml</code>, shows in PyPI. PR #11152 by @Pierre-VF.</li> <li>\ud83d\udc77 Do not sync labels as it overrides manually added labels. PR #12024 by @khulnasoft.</li> <li>\ud83d\udc77\ud83c\udffb Update Labeler GitHub Actions. PR #12019 by @khulnasoft.</li> <li>\ud83d\udd27 Update configs for MkDocs for languages and social cards. PR #12016 by @khulnasoft.</li> <li>\ud83d\udc77 Update permissions and config for labeler GitHub Action. PR #12008 by @khulnasoft.</li> <li>\ud83d\udc77\ud83c\udffb Add GitHub Action label-checker. PR #12005 by @khulnasoft.</li> <li>\ud83d\udc77 Add label checker GitHub Action. PR #12004 by @khulnasoft.</li> <li>\ud83d\udc77 Update GitHub Action add-to-project. PR #12002 by @khulnasoft.</li> <li>\ud83d\udd27 Update labeler GitHub Action. PR #12001 by @khulnasoft.</li> <li>\ud83d\udc77 Add GitHub Action labeler. PR #12000 by @khulnasoft.</li> <li>\ud83d\udc77 Add GitHub Action add-to-project. PR #11999 by @khulnasoft.</li> <li>\ud83d\udcdd Update admonitions in docs missing. PR #11998 by @khulnasoft.</li> <li>\ud83d\udd28 Update docs.py script to enable dirty reload conditionally. PR #11986 by @khulnasoft.</li> <li>\ud83d\udd27 Update MkDocs instant previews. PR #11982 by @khulnasoft.</li> <li>\ud83d\udc1b Fix deploy docs previews script to handle mkdocs.yml files. PR #11984 by @khulnasoft.</li> <li>\ud83d\udca1 Add comment about custom Termynal line-height. PR #11976 by @khulnasoft.</li> <li>\ud83d\udc77 Add alls-green for test-redistribute. PR #11974 by @khulnasoft.</li> <li>\ud83d\udc77 Update docs-previews to handle no docs changes. PR #11975 by @khulnasoft.</li> <li>\ud83d\udd28 Refactor script <code>deploy_docs_status.py</code> to account for deploy URLs with or without trailing slash. PR #11965 by @khulnasoft.</li> <li>\ud83d\udd12\ufe0f Update permissions for deploy-docs action. PR #11964 by @khulnasoft.</li> <li>\ud83d\udc77\ud83c\udffb Add deploy docs status and preview links to PRs. PR #11961 by @khulnasoft.</li> <li>\ud83d\udd27 Update docs setup with latest configs and plugins. PR #11953 by @khulnasoft.</li> <li>\ud83d\udd07 Ignore warning from attrs in Trio. PR #11949 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01120","title":"0.112.0","text":""},{"location":"release-notes/#breaking-changes","title":"Breaking Changes","text":"<ul> <li>\u267b\ufe0f Add support for <code>pip install \"readyapi[standard]\"</code> with standard dependencies and <code>python -m readyapi</code>. PR #11935 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#summary","title":"Summary","text":"<p>Install with:</p> <pre><code>pip install \"readyapi[standard]\"\n</code></pre>"},{"location":"release-notes/#other-changes","title":"Other Changes","text":"<ul> <li>This adds support for calling the CLI as:</li> </ul> <pre><code>python -m readyapi\n</code></pre> <ul> <li>And it upgrades <code>readyapi-cli[standard] &gt;=0.0.5</code>.</li> </ul>"},{"location":"release-notes/#technical-details","title":"Technical Details","text":"<p>Before this, <code>readyapi</code> would include the standard dependencies, with Uvicorn and the <code>readyapi-cli</code>, etc.</p> <p>And <code>readyapi-slim</code> would not include those standard dependencies.</p> <p>Now <code>readyapi</code> doesn't include those standard dependencies unless you install with <code>pip install \"readyapi[standard]\"</code>.</p> <p>Before, you would install <code>pip install readyapi</code>, now you should include the <code>standard</code> optional dependencies (unless you want to exclude one of those): <code>pip install \"readyapi[standard]\"</code>.</p> <p>This change is because having the standard optional dependencies installed by default was being inconvenient to several users, and having to install instead <code>readyapi-slim</code> was not being a feasible solution.</p> <p>Discussed here: #11522 and here: #11525</p>"},{"location":"release-notes/#docs_15","title":"Docs","text":"<ul> <li>\u270f\ufe0f Fix typos in docs. PR #11926 by @jianghuyiyuan.</li> <li>\ud83d\udcdd Tweak management docs. PR #11918 by @khulnasoft.</li> <li>\ud83d\ude9a Rename GitHub links from khulnasoft/readyapi to readyapi/readyapi. PR #11913 by @khulnasoft.</li> <li>\ud83d\udcdd Add docs about ReadyAPI team and project management. PR #11908 by @khulnasoft.</li> <li>\ud83d\udcdd Re-structure docs main menu. PR #11904 by @khulnasoft.</li> <li>\ud83d\udcdd Update Speakeasy URL. PR #11871 by @ndimares.</li> </ul>"},{"location":"release-notes/#translations_18","title":"Translations","text":"<ul> <li>\ud83c\udf10 Update Portuguese translation for <code>docs/pt/docs/alternatives.md</code>. PR #11931 by @ceb10n.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/dependencies/sub-dependencies.md</code>. PR #10515 by @AlertRED.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/response-change-status-code.md</code>. PR #11863 by @ceb10n.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/reference/background.md</code>. PR #11849 by @lucasbalieiro.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/dependencies/dependencies-with-yield.md</code>. PR #11848 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/reference/apirouter.md</code>. PR #11843 by @lucasbalieiro.</li> </ul>"},{"location":"release-notes/#internal_20","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update sponsors: add liblab. PR #11934 by @khulnasoft.</li> <li>\ud83d\udc77 Update GitHub Action label-approved permissions. PR #11933 by @khulnasoft.</li> <li>\ud83d\udc77 Refactor GitHub Action to comment docs deployment URLs and update token. PR #11925 by @khulnasoft.</li> <li>\ud83d\udc77 Update tokens for GitHub Actions. PR #11924 by @khulnasoft.</li> <li>\ud83d\udc77 Update token permissions to comment deployment URL in docs. PR #11917 by @khulnasoft.</li> <li>\ud83d\udc77 Update token permissions for GitHub Actions. PR #11915 by @khulnasoft.</li> <li>\ud83d\udc77 Update GitHub Actions token usage. PR #11914 by @khulnasoft.</li> <li>\ud83d\udc77 Update GitHub Action to notify translations with label <code>approved-1</code>. PR #11907 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, remove Reflex. PR #11875 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors: remove TalkPython. PR #11861 by @khulnasoft.</li> <li>\ud83d\udd28 Update docs Termynal scripts to not include line nums for local dev. PR #11854 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01111","title":"0.111.1","text":""},{"location":"release-notes/#upgrades_6","title":"Upgrades","text":"<ul> <li>\u2796 Remove <code>orjson</code> and <code>ujson</code> from default dependencies. PR #11842 by @khulnasoft.<ul> <li>These dependencies are still installed when you install with <code>pip install \"readyapi[all]\"</code>. But they are not included in <code>pip install readyapi</code>.</li> </ul> </li> <li>\ud83d\udcdd Restored Swagger-UI links to use the latest version possible. PR #11459 by @UltimateLobster.</li> </ul>"},{"location":"release-notes/#docs_16","title":"Docs","text":"<ul> <li>\u270f\ufe0f Rewording in <code>docs/en/docs/readyapi-cli.md</code>. PR #11716 by @alejsdev.</li> <li>\ud83d\udcdd Update Hypercorn links in all the docs. PR #11744 by @kittydoor.</li> <li>\ud83d\udcdd  Update docs with Ariadne reference from Starlette to ReadyAPI. PR #11797 by @DamianCzajkowski.</li> <li>\ud83d\udcdd Update readyapi instrumentation external link. PR #11317 by @softwarebloat.</li> <li>\u270f\ufe0f Fix links to alembic example repo in docs. PR #11628 by @augiwan.</li> <li>\u270f\ufe0f Update <code>docs/en/docs/readyapi-cli.md</code>. PR #11715 by @alejsdev.</li> <li>\ud83d\udcdd Update External Links . PR #11500 by @devon2018.</li> <li>\ud83d\udcdd Add External Link: Tutorial de ReadyAPI, \u00bfel mejor framework de Python?. PR #11618 by @EduardoZepeda.</li> <li>\ud83d\udcdd Fix typo in <code>docs/en/docs/tutorial/body-multiple-params.md</code>. PR #11698 by @mwb-u.</li> <li>\ud83d\udcdd Add External Link: Deploy a Serverless ReadyAPI App with Neon Postgres and AWS App Runner at any scale. PR #11633 by @ananis25.</li> <li>\ud83d\udcdd Update <code>security/first-steps.md</code>. PR #11674 by @alejsdev.</li> <li>\ud83d\udcdd Update <code>security/first-steps.md</code>. PR #11673 by @alejsdev.</li> <li>\ud83d\udcdd Update note in <code>path-params-numeric-validations.md</code>. PR #11672 by @alejsdev.</li> <li>\ud83d\udcdd Tweak intro docs about <code>Annotated</code> and <code>Query()</code> params. PR #11664 by @khulnasoft.</li> <li>\ud83d\udcdd Update JWT auth documentation to use PyJWT instead of pyhon-jose. PR #11589 by @estebanx64.</li> <li>\ud83d\udcdd Update docs. PR #11603 by @alejsdev.</li> <li>\u270f\ufe0f Fix typo: convert every 're-use' to 'reuse'.. PR #11598 by @hasansezertasan.</li> <li>\u270f\ufe0f Fix typo in <code>readyapi/applications.py</code>. PR #11593 by @petarmaric.</li> <li>\u270f\ufe0f Fix link in <code>readyapi-cli.md</code>. PR #11524 by @svlandeg.</li> </ul>"},{"location":"release-notes/#translations_19","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/how-to/graphql.md</code>. PR #11697 by @camigomezdev.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/reference/index.md</code>. PR #11840 by @lucasbalieiro.</li> <li>\ud83c\udf10 Fix link in German translation. PR #11836 by @anitahammer.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/dependencies/sub-dependencies.md</code>. PR #11792 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/tutorial/request-forms.md</code>. PR #11553 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/reference/exceptions.md</code>. PR #11834 by @lucasbalieiro.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/dependencies/global-dependencies.md</code>. PR #11826 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/how-to/general.md</code>. PR #11825 by @lucasbalieiro.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/async-tests.md</code>. PR #11808 by @ceb10n.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/first-steps.md</code>. PR #11809 by @vkhoroshchak.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/dependencies/dependencies-in-path-operation-operators.md</code>. PR #11804 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/readyapi-cli.md</code>. PR #11786 by @logan2d5.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/openapi-webhooks.md</code>. PR #11791 by @ceb10n.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/tutorial/security/oauth2-jwt.md</code>. PR #11781 by @logan2d5.</li> <li>\ud83d\udcdd Fix image missing in French translation for <code>docs/fr/docs/async.md</code> . PR #11787 by @pe-brian.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/advanced-dependencies.md</code>. PR #11775 by @ceb10n.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/dependencies/classes-as-dependencies.md</code>. PR #11768 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10  Add Portuguese translation for <code>docs/pt/docs/advanced/additional-status-codes.md</code>. PR #11753 by @ceb10n.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/dependencies/index.md</code>. PR #11757 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/settings.md</code>. PR #11739 by @Joao-Pedro-P-Holanda.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/learn/index.md</code>. PR #11712 by @benjaminvandammeholberton.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/how-to/index.md</code>. PR #11731 by @vhsenna.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/additional-responses.md</code>. PR #11736 by @ceb10n.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/benchmarks.md</code>. PR #11713 by @ceb10n.</li> <li>\ud83c\udf10 Fix Korean translation for <code>docs/ko/docs/tutorial/response-status-code.md</code>. PR #11718 by @nayeonkinn.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/extra-data-types.md</code>. PR #11711 by @nayeonkinn.</li> <li>\ud83c\udf10 Fix Korean translation for <code>docs/ko/docs/tutorial/body-nested-models.md</code>. PR #11710 by @nayeonkinn.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/readyapi-cli.md</code>. PR #11641 by @ayr-ton.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/readyapi-people.md</code>. PR #11639 by @hsuanchi.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/advanced/index.md</code>. PR #11606 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/deployment/cloud.md</code>. PR #11610 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/advanced/security/index.md</code>. PR #11609 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/advanced/testing-websockets.md</code>. PR #11608 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/how-to/general.md</code>. PR #11607 by @hasansezertasan.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/advanced/templates.md</code>. PR #11620 by @chaoless.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/deployment/index.md</code>. PR #11605 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/tutorial/static-files.md</code>. PR #11599 by @hasansezertasan.</li> <li>\ud83c\udf10 Polish translation for <code>docs/pl/docs/readyapi-people.md</code>. PR #10196 by @isulim.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/advanced/wsgi.md</code>. PR #11575 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/tutorial/cookie-params.md</code>. PR #11561 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/about/index.md</code>. PR #10961 by @s111d.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/sql-databases.md</code>. PR #11539 by @chaoless.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/how-to/configure-swagger-ui.md</code>. PR #11501 by @Lucas-lyh.</li> <li>\ud83c\udf10 Update Chinese translation for <code>/docs/advanced/security/http-basic-auth.md</code>. PR #11512 by @nick-cjyx9.</li> </ul>"},{"location":"release-notes/#internal_21","title":"Internal","text":"<ul> <li>\u267b\ufe0f Simplify internal docs script. PR #11777 by @gitworkflows.</li> <li>\ud83d\udd27 Update sponsors: add Fine. PR #11784 by @khulnasoft.</li> <li>\ud83d\udd27 Tweak sponsors: Kong URL. PR #11765 by @khulnasoft.</li> <li>\ud83d\udd27 Tweak sponsors: Kong URL. PR #11764 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, add Stainless. PR #11763 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, add Zuplo. PR #11729 by @khulnasoft.</li> <li>\ud83d\udd27 Update Sponsor link: Coherence. PR #11730 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #11669 by @khulnasoft.</li> <li>\ud83d\udd27 Add sponsor Kong. PR #11662 by @khulnasoft.</li> <li>\ud83d\udc77 Update Smokeshow, fix sync download artifact and smokeshow configs. PR #11563 by @khulnasoft.</li> <li>\ud83d\udc77 Update Smokeshow download artifact GitHub Action. PR #11562 by @khulnasoft.</li> <li>\ud83d\udc77 Update GitHub actions to download and upload artifacts to v4, for docs and coverage. PR #11550 by @tamird.</li> <li>\ud83d\udc77 Tweak CI for test-redistribute, add needed env vars for slim. PR #11549 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #11511 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01110","title":"0.111.0","text":""},{"location":"release-notes/#features_3","title":"Features","text":"<ul> <li>\u2728 Add ReadyAPI CLI, the new <code>readyapi</code> command. PR #11522 by @khulnasoft.<ul> <li>New docs: ReadyAPI CLI.</li> </ul> </li> </ul> <p>Try it out with:</p> <pre><code>$ pip install --upgrade readyapi\n\n$ readyapi dev main.py\n\n\n \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 ReadyAPI CLI - Development mode \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n \u2502                                                     \u2502\n \u2502  Serving at: http://127.0.0.1:8000                  \u2502\n \u2502                                                     \u2502\n \u2502  API docs: http://127.0.0.1:8000/docs               \u2502\n \u2502                                                     \u2502\n \u2502  Running in development mode, for production use:   \u2502\n \u2502                                                     \u2502\n \u2502  readyapi run                                        \u2502\n \u2502                                                     \u2502\n \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\nINFO:     Will watch for changes in these directories: ['/home/user/code/awesomeapp']\nINFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\nINFO:     Started reloader process [2248755] using WatchFiles\nINFO:     Started server process [2248757]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\n</code></pre>"},{"location":"release-notes/#refactors_11","title":"Refactors","text":"<ul> <li>\ud83d\udd27 Add configs and setup for <code>readyapi-slim</code> including optional extras <code>readyapi-slim[standard]</code>, and <code>readyapi</code> including by default the same <code>standard</code> extras. PR #11503 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01103","title":"0.110.3","text":""},{"location":"release-notes/#docs_17","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update references to Python version, ReadyAPI supports all the current versions, no need to make the version explicit. PR #11496 by @khulnasoft.</li> <li>\u270f\ufe0f Fix typo in <code>readyapi/security/api_key.py</code>. PR #11481 by @ch33zer.</li> <li>\u270f\ufe0f Fix typo in <code>security/http.py</code>. PR #11455 by @omarmoo5.</li> </ul>"},{"location":"release-notes/#translations_20","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/benchmarks.md</code>. PR #11484 by @KNChiu.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/readyapi-people.md</code>. PR #11476 by @billzhong.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/how-to/index.md</code> and <code>docs/zh/docs/how-to/general.md</code>. PR #11443 by @billzhong.</li> <li>\ud83c\udf10 Add Spanish translation for cookie-params <code>docs/es/docs/tutorial/cookie-params.md</code>. PR #11410 by @fabianfalon.</li> </ul>"},{"location":"release-notes/#internal_22","title":"Internal","text":"<ul> <li>\u2b06 Bump mkdocstrings[python] from 0.23.0 to 0.24.3. PR #11469 by @dependabot[bot].</li> <li>\ud83d\udd28 Update internal scripts and remove unused ones. PR #11499 by @khulnasoft.</li> <li>\ud83d\udd27 Migrate from Hatch to PDM for the internal build. PR #11498 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade MkDocs Material and re-enable cards. PR #11466 by @khulnasoft.</li> <li>\u2b06 Bump pillow from 10.2.0 to 10.3.0. PR #11403 by @dependabot[bot].</li> <li>\ud83d\udd27 Ungroup dependabot updates. PR #11465 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01102","title":"0.110.2","text":""},{"location":"release-notes/#fixes_9","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix support for query parameters with list types, handle JSON encoding Pydantic <code>UndefinedType</code>. PR #9929 by @arjwilliams.</li> </ul>"},{"location":"release-notes/#refactors_12","title":"Refactors","text":"<ul> <li>\u267b\ufe0f Simplify Pydantic configs in OpenAPI models in <code>readyapi/openapi/models.py</code>. PR #10886 by @JoeTanto2.</li> <li>\u2728 Add support for Pydantic's 2.7 new deprecated Field parameter, remove URL from validation errors response. PR #11461 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_18","title":"Docs","text":"<ul> <li>\ud83d\udcdd Fix types in examples under <code>docs_src/extra_data_types</code>. PR #10535 by @nilslindemann.</li> <li>\ud83d\udcdd Update references to UJSON. PR #11464 by @khulnasoft.</li> <li>\ud83d\udcdd Tweak docs and translations links, typos, format. PR #11389 by @nilslindemann.</li> <li>\ud83d\udcdd Fix typo in <code>docs/es/docs/async.md</code>. PR #11400 by @fabianfalon.</li> <li>\ud83d\udcdd Update OpenAPI client generation docs to use <code>@hey-api/openapi-ts</code>. PR #11339 by @jordanshatford.</li> </ul>"},{"location":"release-notes/#translations_21","title":"Translations","text":"<ul> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/index.html</code>. PR #11430 by @waketzheng.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md</code>. PR #11411 by @anton2yakovlev.</li> <li>\ud83c\udf10 Add Portuguese translations for <code>learn/index.md</code> <code>resources/index.md</code> <code>help/index.md</code> <code>about/index.md</code>. PR #10807 by @nazarepiedady.</li> <li>\ud83c\udf10 Update Russian translations for deployments docs. PR #11271 by @Lufa1u.</li> <li>\ud83c\udf10 Add Bengali translations for <code>docs/bn/docs/python-types.md</code>. PR #11376 by @imtiaz101325.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/security/simple-oauth2.md</code>. PR #5744 by @KdHyeon0661.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/help-readyapi.md</code>. PR #4139 by @kty4119.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/events.md</code>. PR #5087 by @pers0n4.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/path-operation-configuration.md</code>. PR #1954 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/request-forms-and-files.md</code>. PR #1946 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/dependencies/dependencies-with-yield.md</code>. PR #10532 by @AlertRED.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/debugging.md</code>. PR #5695 by @JungWooGeon.</li> </ul>"},{"location":"release-notes/#internal_23","title":"Internal","text":"<ul> <li>\u2b06\ufe0f Upgrade version of cligenius for docs. PR #11393 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01101","title":"0.110.1","text":""},{"location":"release-notes/#fixes_10","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix parameterless <code>Depends()</code> with generics. PR #9479 by @nzig.</li> </ul>"},{"location":"release-notes/#refactors_13","title":"Refactors","text":"<ul> <li>\u267b\ufe0f Update mypy. PR #11049 by @k0t3n.</li> <li>\u267b\ufe0f Simplify string format with f-strings in <code>readyapi/applications.py</code>. PR #11335 by @igeni.</li> </ul>"},{"location":"release-notes/#upgrades_7","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette to &gt;=0.37.2,&lt;0.38.0, remove Starlette filterwarning for internal tests. PR #11266 by @nothielf.</li> </ul>"},{"location":"release-notes/#docs_19","title":"Docs","text":"<ul> <li>\ud83d\udcdd Tweak docs and translations links and remove old docs translations. PR #11381 by @khulnasoft.</li> <li>\u270f\ufe0f Fix typo in <code>readyapi/security/oauth2.py</code>. PR #11368 by @shandongbinzhou.</li> <li>\ud83d\udcdd Update links to Pydantic docs to point to new website. PR #11328 by @alejsdev.</li> <li>\u270f\ufe0f Fix typo in <code>docs/en/docs/tutorial/extra-models.md</code>. PR #11329 by @alejsdev.</li> <li>\ud83d\udcdd Update <code>project-generation.md</code>. PR #11326 by @alejsdev.</li> <li>\ud83d\udcdd Update External Links. PR #11327 by @alejsdev.</li> <li>\ud83d\udd25 Remove link to Pydantic's benchmark, on other i18n pages.. PR #11224 by @hirotoKirimaru.</li> <li>\u270f\ufe0f Fix typos in docstrings. PR #11295 by @davidhuser.</li> <li>\ud83d\udee0\ufe0f Improve Node.js script in docs to generate TypeScript clients. PR #11293 by @alejsdev.</li> <li>\ud83d\udcdd Update examples for tests to replace \"inexistent\" for \"nonexistent\". PR #11220 by @Homesteady.</li> <li>\ud83d\udcdd Update <code>python-multipart</code> GitHub link in all docs from <code>https://andrew-d.github.io/python-multipart/</code> to <code>https://github.com/Kludex/python-multipart</code>. PR #11239 by @joshjhans.</li> </ul>"},{"location":"release-notes/#translations_22","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/response-status-code.md</code>. PR #10357 by @nilslindemann.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/query-params.md</code>. PR #3480 by @jaystone776.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/body.md</code>. PR #3481 by @jaystone776.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/path-params.md</code>. PR #3479 by @jaystone776.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/tutorial/body-fields.md</code>. PR #3496 by @jaystone776.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/tutorial/extra-models.md</code>. PR #3497 by @jaystone776.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/metadata.md</code>. PR #2667 by @tokusumi.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/contributing.md</code>. PR #10487 by @nilslindemann.</li> <li>\ud83c\udf10 Update Japanese translation of <code>docs/ja/docs/tutorial/query-params.md</code>. PR #10808 by @urushio.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/security/get-current-user.md</code>. PR #3842 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/openapi-callbacks.md</code>. PR #3825 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/extending-openapi.md</code>. PR #3823 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/testing-dependencies.md</code>. PR #3819 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/custom-request-and-route.md</code>. PR #3816 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/external-links.md</code>. PR #3833 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/templates.md</code>. PR #3812 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/sub-applications.md</code>. PR #3811 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/async-sql-databases.md</code>. PR #3805 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/middleware.md</code>. PR #3804 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/dataclasses.md</code>. PR #3803 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/using-request-directly.md</code>. PR #3802 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/security/http-basic-auth.md</code>. PR #3801 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/security/oauth2-scopes.md</code>. PR #3800 by @jaystone776.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/cookie-params.md</code>. PR #3486 by @jaystone776.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/header-params.md</code>. PR #3487 by @jaystone776.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/tutorial/response-status-code.md</code>. PR #3498 by @jaystone776.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/security/first-steps.md</code>. PR #10432 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/events.md</code>. PR #10693 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/deployment/cloud.md</code>. PR #10746 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/behind-a-proxy.md</code>. PR #10675 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/help-readyapi.md</code>. PR #10455 by @nilslindemann.</li> <li>\ud83c\udf10 Update German translation for <code>docs/de/docs/python-types.md</code>. PR #10287 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/path-params.md</code>. PR #10290 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/handling-errors.md</code>. PR #10379 by @nilslindemann.</li> <li>\ud83c\udf10 Update German translation for <code>docs/de/docs/index.md</code>. PR #10283 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/security/http-basic-auth.md</code>. PR #10651 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/bigger-applications.md</code>. PR #10554 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/path-operation-advanced-configuration.md</code>. PR #10612 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/static-files.md</code>. PR #10584 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/security/oauth2-jwt.md</code>. PR #10522 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/response-model.md</code>. PR #10345 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/extra-models.md</code>. PR #10351 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/body-updates.md</code>. PR #10396 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/alternatives.md</code>. PR #10855 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/templates.md</code>. PR #10678 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/security/oauth2-scopes.md</code>. PR #10643 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/async-tests.md</code>. PR #10708 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/metadata.md</code>. PR #10581 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/testing.md</code>. PR #10586 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/schema-extra-example.md</code>. PR #10597 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/index.md</code>. PR #10611 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/response-directly.md</code>. PR #10618 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/additional-responses.md</code>. PR #10626 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/response-cookies.md</code>. PR #10627 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/response-headers.md</code>. PR #10628 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/response-change-status-code.md</code>. PR #10632 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/advanced-dependencies.md</code>. PR #10633 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/security/index.md</code>. PR #10635 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/using-request-directly.md</code>. PR #10653 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/dataclasses.md</code>. PR #10667 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/middleware.md</code>. PR #10668 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/sub-applications.md</code>. PR #10671 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/websockets.md</code>. PR #10687 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/testing-websockets.md</code>. PR #10703 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/testing-events.md</code>. PR #10704 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/testing-dependencies.md</code>. PR #10706 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/openapi-callbacks.md</code>. PR #10710 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/settings.md</code>. PR #10709 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/wsgi.md</code>. PR #10713 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/deployment/index.md</code>. PR #10733 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/deployment/https.md</code>. PR #10737 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/deployment/manually.md</code>. PR #10738 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/deployment/concepts.md</code>. PR #10744 by @nilslindemann.</li> <li>\ud83c\udf10 Update German translation for <code>docs/de/docs/features.md</code>. PR #10284 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/deployment/server-workers.md</code>. PR #10747 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/deployment/docker.md</code>. PR #10759 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/how-to/index.md</code>. PR #10769 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/how-to/general.md</code>. PR #10770 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/how-to/graphql.md</code>. PR #10788 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/how-to/custom-request-and-route.md</code>. PR #10789 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/how-to/conditional-openapi.md</code>. PR #10790 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/how-to/separate-openapi-schemas.md</code>. PR #10796 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/how-to/configure-swagger-ui.md</code>. PR #10804 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/how-to/custom-docs-ui-assets.md</code>. PR #10803 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/parameters.md</code>. PR #10814 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/status.md</code>. PR #10815 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/uploadfile.md</code>. PR #10816 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/exceptions.md</code>. PR #10817 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/dependencies.md</code>. PR #10818 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/apirouter.md</code>. PR #10819 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/websockets.md</code>. PR #10822 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/httpconnection.md</code>. PR #10823 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/response.md</code>. PR #10824 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/middleware.md</code>. PR #10837 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/openapi/*.md</code>. PR #10838 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/security/index.md</code>. PR #10839 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/staticfiles.md</code>. PR #10841 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/testclient.md</code>. PR #10843 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/project-generation.md</code>. PR #10851 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/history-design-future.md</code>. PR #10865 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/dependencies/dependencies-with-yield.md</code>. PR #10422 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/dependencies/global-dependencies.md</code>. PR #10420 by @nilslindemann.</li> <li>\ud83c\udf10 Update German translation for <code>docs/de/docs/readyapi-people.md</code>. PR #10285 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/dependencies/sub-dependencies.md</code>. PR #10409 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/security/index.md</code>. PR #10429 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md</code>. PR #10411 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/extra-data-types.md</code>. PR #10534 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/security/simple-oauth2.md</code>. PR #10504 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/security/get-current-user.md</code>. PR #10439 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/request-forms-and-files.md</code>. PR #10368 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/encoder.md</code>. PR #10385 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/request-forms.md</code>. PR #10361 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/deployment/versions.md</code>. PR #10491 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/async.md</code>. PR #10449 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/cookie-params.md</code>. PR #10323 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/dependencies/classes-as-dependencies.md</code>. PR #10407 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/dependencies/index.md</code>. PR #10399 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/header-params.md</code>. PR #10326 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/path-params-numeric-validations.md</code>. PR #10307 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/query-params-str-validations.md</code>. PR #10304 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/request-files.md</code>. PR #10364 by @nilslindemann.</li> <li>:globe_with_meridians: Add Portuguese translation for <code>docs/pt/docs/advanced/templates.md</code>. PR #11338 by @SamuelBFavarin.</li> <li>\ud83c\udf10 Add Bengali translations for <code>docs/bn/docs/learn/index.md</code>. PR #11337 by @imtiaz101325.</li> <li>\ud83c\udf10 Fix Korean translation for <code>docs/ko/docs/index.md</code>. PR #11296 by @choi-haram.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/about/index.md</code>. PR #11299 by @choi-haram.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/advanced/index.md</code>. PR #9613 by @ElliottLarsen.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/how-to/extending-openapi.md</code>. PR #10794 by @nilslindemann.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/metadata.md</code>. PR #11286 by @jackleeio.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/contributing.md</code>. PR #10887 by @Aruelius.</li> <li>\ud83c\udf10 Add Azerbaijani translation for <code>docs/az/docs/readyapi-people.md</code>. PR #11195 by @vusallyv.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/dependencies/index.md</code>. PR #11223 by @kohiry.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/query-params.md</code>. PR #11242 by @jackleeio.</li> <li>\ud83c\udf10 Add Azerbaijani translation for <code>docs/az/learn/index.md</code>. PR #11192 by @vusallyv.</li> </ul>"},{"location":"release-notes/#internal_24","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #11387 by @khulnasoft.</li> <li>\u2b06 Bump actions/cache from 3 to 4. PR #10988 by @dependabot[bot].</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.8.11 to 1.8.14. PR #11318 by @dependabot[bot].</li> <li>\u2b06 Bump pillow from 10.1.0 to 10.2.0. PR #11011 by @dependabot[bot].</li> <li>\u2b06 Bump black from 23.3.0 to 24.3.0. PR #11325 by @dependabot[bot].</li> <li>\ud83d\udc77 Add cron to run test once a week on monday. PR #11377 by @estebanx64.</li> <li>\u2795 Replace mkdocs-markdownextradata-plugin with mkdocs-macros-plugin. PR #11383 by @khulnasoft.</li> <li>\ud83d\udc77 Disable MkDocs insiders social plugin while an issue in MkDocs Material is handled. PR #11373 by @khulnasoft.</li> <li>\ud83d\udc77 Fix logic for when to install and use MkDocs Insiders. PR #11372 by @khulnasoft.</li> <li>\ud83d\udc77 Do not use Python packages cache for publish. PR #11366 by @khulnasoft.</li> <li>\ud83d\udc77 Add CI to test sdists for redistribution (e.g. Linux distros). PR #11365 by @khulnasoft.</li> <li>\ud83d\udc77 Update build-docs GitHub Action path filter. PR #11354 by @khulnasoft.</li> <li>\ud83d\udd27 Update Ruff config, add extra ignore rule from SQLDev. PR #11353 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade configuration for Ruff v0.2.0. PR #11075 by @charliermarsh.</li> <li>\ud83d\udd27 Update sponsors, add MongoDB. PR #11346 by @khulnasoft.</li> <li>\u2b06 Bump dorny/paths-filter from 2 to 3. PR #11028 by @dependabot[bot].</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 3.0.0 to 3.1.4. PR #11310 by @dependabot[bot].</li> <li>\u267b\ufe0f Refactor computing ReadyAPI People, include 3 months, 6 months, 1 year, based on comment date, not discussion date. PR #11304 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #11228 by @khulnasoft.</li> <li>\ud83d\udd25 Remove Jina AI QA Bot from the docs. PR #11268 by @nan-wang.</li> <li>\ud83d\udd27 Update sponsors, remove Jina, remove Powens, move TestDriven.io. PR #11213 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01100","title":"0.110.0","text":""},{"location":"release-notes/#breaking-changes_1","title":"Breaking Changes","text":"<ul> <li>\ud83d\udc1b Fix unhandled growing memory for internal server errors, refactor dependencies with <code>yield</code> and <code>except</code> to require raising again as in regular Python. PR #11191 by @khulnasoft.<ul> <li>This is a breaking change (and only slightly) if you used dependencies with <code>yield</code>, used <code>except</code> in those dependencies, and didn't raise again.</li> <li>This was reported internally by @rushilsrivastava as a memory leak when the server had unhandled exceptions that would produce internal server errors, the memory allocated before that point would not be released.</li> <li>Read the new docs: Dependencies with <code>yield</code> and <code>except</code>.</li> </ul> </li> </ul> <p>In short, if you had dependencies that looked like:</p> <pre><code>def my_dep():\n    try:\n        yield\n    except SomeException:\n        pass\n</code></pre> <p>Now you need to make sure you raise again after <code>except</code>, just as you would in regular Python:</p> <pre><code>def my_dep():\n    try:\n        yield\n    except SomeException:\n        raise\n</code></pre>"},{"location":"release-notes/#docs_20","title":"Docs","text":"<ul> <li>\u270f\ufe0f Fix minor typos in <code>docs/ko/docs/</code>. PR #11126 by @KaniKim.</li> <li>\u270f\ufe0f Fix minor typo in <code>readyapi/applications.py</code>. PR #11099 by @JacobHayes.</li> </ul>"},{"location":"release-notes/#translations_23","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/background.md</code>. PR #10820 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/templating.md</code>. PR #10842 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/external-links.md</code>. PR #10852 by @nilslindemann.</li> <li>\ud83c\udf10 Update Turkish translation for <code>docs/tr/docs/tutorial/query-params.md</code>. PR #11162 by @hasansezertasan.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/encoders.md</code>. PR #10840 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/responses.md</code>. PR #10825 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/request.md</code>. PR #10821 by @nilslindemann.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/tutorial/query-params.md</code>. PR #11078 by @emrhnsyts.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/reference/readyapi.md</code>. PR #10813 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/newsletter.md</code>. PR #10853 by @nilslindemann.</li> <li>\ud83c\udf10 Add Traditional Chinese translation for <code>docs/zh-hant/docs/learn/index.md</code>. PR #11142 by @hsuanchi.</li> <li>\ud83c\udf10 Add Korean translation for <code>/docs/ko/docs/tutorial/dependencies/global-dependencies.md</code>. PR #11123 by @riroan.</li> <li>\ud83c\udf10 Add Korean translation for <code>/docs/ko/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md</code>. PR #11124 by @riroan.</li> <li>\ud83c\udf10 Add Korean translation for <code>/docs/ko/docs/tutorial/schema-extra-example.md</code>. PR #11121 by @KaniKim.</li> <li>\ud83c\udf10 Add Korean translation for <code>/docs/ko/docs/tutorial/body-fields.md</code>. PR #11112 by @KaniKim.</li> <li>\ud83c\udf10 Add Korean translation for <code>/docs/ko/docs/tutorial/cookie-params.md</code>. PR #11118 by @riroan.</li> <li>\ud83c\udf10 Update Korean translation for <code>/docs/ko/docs/dependencies/index.md</code>. PR #11114 by @KaniKim.</li> <li>\ud83c\udf10 Update Korean translation for <code>/docs/ko/docs/deployment/docker.md</code>. PR #11113 by @KaniKim.</li> <li>\ud83c\udf10 Update Turkish translation for <code>docs/tr/docs/tutorial/first-steps.md</code>. PR #11094 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/advanced/security/index.md</code>. PR #2278 by @Xaraxx.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/advanced/response-headers.md</code>. PR #2276 by @Xaraxx.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/deployment/index.md</code> and <code>~/deployment/versions.md</code>. PR #9669 by @pabloperezmoya.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/benchmarks.md</code>. PR #10928 by @pablocm83.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/advanced/response-change-status-code.md</code>. PR #11100 by @alejsdev.</li> </ul>"},{"location":"release-notes/#01092","title":"0.109.2","text":""},{"location":"release-notes/#upgrades_8","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade version of Starlette to <code>&gt;= 0.36.3</code>. PR #11086 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_24","title":"Translations","text":"<ul> <li>\ud83c\udf10 Update Turkish translation for <code>docs/tr/docs/readyapi-people.md</code>. PR #10547 by @alperiox.</li> </ul>"},{"location":"release-notes/#internal_25","title":"Internal","text":"<ul> <li>\ud83c\udf71 Add new ReadyAPI logo. PR #11090 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01091","title":"0.109.1","text":""},{"location":"release-notes/#security-fixes","title":"Security fixes","text":"<ul> <li>\u2b06\ufe0f Upgrade minimum version of <code>python-multipart</code> to <code>&gt;=0.0.7</code> to fix a vulnerability when using form data with a ReDos attack. You can also simply upgrade <code>python-multipart</code>.</li> </ul> <p>Read more in the advisory: Content-Type Header ReDoS.</p>"},{"location":"release-notes/#features_4","title":"Features","text":"<ul> <li>\u2728  Include HTTP 205 in status codes with no body. PR #10969 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#refactors_14","title":"Refactors","text":"<ul> <li>\u2705 Refactor tests for duplicate operation ID generation for compatibility with other tools running the ReadyAPI test suite. PR #10876 by @emmettbutler.</li> <li>\u267b\ufe0f Simplify string format with f-strings in <code>readyapi/utils.py</code>. PR #10576 by @eukub.</li> <li>\ud83d\udd27 Fix Ruff configuration unintentionally enabling and re-disabling mccabe complexity check. PR #10893 by @jiridanek.</li> <li>\u2705 Re-enable test in <code>tests/test_tutorial/test_header_params/test_tutorial003.py</code> after fix in Starlette. PR #10904 by @ooknimm.</li> </ul>"},{"location":"release-notes/#docs_21","title":"Docs","text":"<ul> <li>\ud83d\udcdd Tweak wording in <code>help-readyapi.md</code>. PR #11040 by @khulnasoft.</li> <li>\ud83d\udcdd Tweak docs for Behind a Proxy. PR #11038 by @khulnasoft.</li> <li>\ud83d\udcdd Add External Link: 10 Tips for adding SQLAlchemy to ReadyAPI. PR #11036 by @Donnype.</li> <li>\ud83d\udcdd Add External Link: Tips on migrating from Flask to ReadyAPI and vice-versa. PR #11029 by @jtemporal.</li> <li>\ud83d\udcdd Deprecate old tutorials: Peewee, Couchbase, encode/databases. PR #10979 by @khulnasoft.</li> <li>\u270f\ufe0f Fix typo in <code>readyapi/security/oauth2.py</code>. PR #10972 by @RafalSkolasinski.</li> <li>\ud83d\udcdd Update <code>HTTPException</code> details in <code>docs/en/docs/tutorial/handling-errors.md</code>. PR #5418 by @papb.</li> <li>\u270f\ufe0f A few tweaks in <code>docs/de/docs/tutorial/first-steps.md</code>. PR #10959 by @nilslindemann.</li> <li>\u270f\ufe0f Fix link in <code>docs/en/docs/advanced/async-tests.md</code>. PR #10960 by @nilslindemann.</li> <li>\u270f\ufe0f Fix typos for Spanish documentation. PR #10957 by @jlopezlira.</li> <li>\ud83d\udcdd Add warning about lifespan functions and backwards compatibility with events. PR #10734 by @jacob-indigo.</li> <li>\u270f\ufe0f Fix broken link in <code>docs/tutorial/sql-databases.md</code> in several languages. PR #10716 by @theoohoho.</li> <li>\u270f\ufe0f Remove broken links from <code>external_links.yml</code>. PR #10943 by @Torabek.</li> <li>\ud83d\udcdd Update template docs with more info about <code>url_for</code>. PR #5937 by @EzzEddin.</li> <li>\ud83d\udcdd Update usage of Token model in security docs. PR #9313 by @piotrszacilowski.</li> <li>\u270f\ufe0f Update highlighted line in <code>docs/en/docs/tutorial/bigger-applications.md</code>. PR #5490 by @papb.</li> <li>\ud83d\udcdd Add External Link: Explore How to Effectively Use JWT With ReadyAPI. PR #10212 by @aanchlia.</li> <li>\ud83d\udcdd Add hyperlink to <code>docs/en/docs/tutorial/static-files.md</code>. PR #10243 by @hungtsetse.</li> <li>\ud83d\udcdd Add External Link: Instrument a ReadyAPI service adding tracing with OpenTelemetry and send/show traces in Grafana Tempo. PR #9440 by @softwarebloat.</li> <li>\ud83d\udcdd Review and rewording of <code>en/docs/contributing.md</code>. PR #10480 by @nilslindemann.</li> <li>\ud83d\udcdd Add External Link: ML serving and monitoring with ReadyAPI and Evidently. PR #9701 by @mnrozhkov.</li> <li>\ud83d\udcdd Reword in docs, from \"have in mind\" to \"keep in mind\". PR #10376 by @malicious.</li> <li>\ud83d\udcdd Add External Link: Talk by Jeny Sadadia. PR #10265 by @JenySadadia.</li> <li>\ud83d\udcdd Add location info to <code>tutorial/bigger-applications.md</code>. PR #10552 by @nilslindemann.</li> <li>\u270f\ufe0f Fix Pydantic method name in <code>docs/en/docs/advanced/path-operation-advanced-configuration.md</code>. PR #10826 by @ahmedabdou14.</li> </ul>"},{"location":"release-notes/#translations_25","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/external-links.md</code>. PR #10933 by @pablocm83.</li> <li>\ud83c\udf10 Update Korean translation for <code>docs/ko/docs/tutorial/first-steps.md</code>, <code>docs/ko/docs/tutorial/index.md</code>, <code>docs/ko/docs/tutorial/path-params.md</code>, and <code>docs/ko/docs/tutorial/query-params.md</code>. PR #4218 by @SnowSuno.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/dependencies/dependencies-with-yield.md</code>. PR #10870 by @zhiquanchi.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/deployment/concepts.md</code>. PR #10282 by @xzmeng.</li> <li>\ud83c\udf10 Add Azerbaijani translation for <code>docs/az/docs/index.md</code>. PR #11047 by @aykhans.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/middleware.md</code>. PR #2829 by @JeongHyeongKim.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/body-nested-models.md</code>. PR #10313 by @nilslindemann.</li> <li>\ud83c\udf10 Add Persian translation for <code>docs/fa/docs/tutorial/middleware.md</code>. PR #9695 by @mojtabapaso.</li> <li>\ud83c\udf10 Update Farsi translation for <code>docs/fa/docs/index.md</code>. PR #10216 by @theonlykingpin.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/body-fields.md</code>. PR #10310 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/body.md</code>. PR #10295 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/body-multiple-params.md</code>. PR #10308 by @nilslindemann.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/security/get-current-user.md</code>. PR #2681 by @sh0nk.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/advanced-dependencies.md</code>. PR #3798 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/events.md</code>. PR #3815 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/behind-a-proxy.md</code>. PR #3820 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/testing-events.md</code>. PR #3818 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/testing-websockets.md</code>. PR #3817 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/testing-database.md</code>. PR #3821 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/deployment/deta.md</code>. PR #3837 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/history-design-future.md</code>. PR #3832 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/project-generation.md</code>. PR #3831 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/deployment/docker.md</code>. PR #10296 by @xzmeng.</li> <li>\ud83c\udf10 Update Spanish translation for <code>docs/es/docs/features.md</code>. PR #10884 by @pablocm83.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/newsletter.md</code>. PR #10922 by @pablocm83.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/background-tasks.md</code>. PR #5910 by @junah201.</li> <li>:globe_with_meridians: Add Turkish translation for <code>docs/tr/docs/alternatives.md</code>. PR #10502 by @alperiox.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/dependencies/index.md</code>. PR #10989 by @KaniKim.</li> <li>\ud83c\udf10 Add Korean translation for <code>/docs/ko/docs/tutorial/body.md</code>. PR #11000 by @KaniKim.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/schema-extra-example.md</code>. PR #4065 by @luccasmmg.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/history-design-future.md</code>. PR #11012 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/resources/index.md</code>. PR #11020 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/how-to/index.md</code>. PR #11021 by @hasansezertasan.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/query-params.md</code>. PR #10293 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/benchmarks.md</code>. PR #10866 by @nilslindemann.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/learn/index.md</code>. PR #11014 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Persian translation for <code>docs/fa/docs/tutorial/security/index.md</code>. PR #9945 by @mojtabapaso.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/help/index.md</code>. PR #11013 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/about/index.md</code>. PR #11006 by @hasansezertasan.</li> <li>\ud83c\udf10 Update Turkish translation for <code>docs/tr/docs/benchmarks.md</code>. PR #11005 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Italian translation for <code>docs/it/docs/index.md</code>. PR #5233 by @matteospanio.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/help/index.md</code>. PR #10983 by @KaniKim.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/features.md</code>. PR #10976 by @KaniKim.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/security/get-current-user.md</code>. PR #5737 by @KdHyeon0661.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/security/first-steps.md</code>. PR #10541 by @AlertRED.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/handling-errors.md</code>. PR #10375 by @AlertRED.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/encoder.md</code>. PR #10374 by @AlertRED.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/body-updates.md</code>. PR #10373 by @AlertRED.</li> <li>\ud83c\udf10 Russian translation: updated <code>readyapi-people.md</code>.. PR #10255 by @NiKuma0.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/security/index.md</code>. PR #5798 by @3w36zj6.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/generate-clients.md</code>. PR #10725 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/openapi-webhooks.md</code>. PR #10712 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/custom-response.md</code>. PR #10624 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/advanced/additional-status-codes.md</code>. PR #10617 by @nilslindemann.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/middleware.md</code>. PR #10391 by @JohannesJungbluth.</li> <li>\ud83c\udf10 Add German translation for introduction documents. PR #10497 by @nilslindemann.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/encoder.md</code>. PR #1955 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/extra-data-types.md</code>. PR #1932 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/async.md</code>. PR #5191 by @BilalAlpaslan.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/project-generation.md</code>. PR #5192 by @BilalAlpaslan.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/deployment/docker.md</code>. PR #5657 by @nearnear.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/deployment/server-workers.md</code>. PR #4935 by @jujumilk3.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/deployment/index.md</code>. PR #4561 by @jujumilk3.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/path-operation-configuration.md</code>. PR #3639 by @jungsu-kwon.</li> <li>\ud83c\udf10 Modify the description of <code>zh</code> - Traditional Chinese. PR #10889 by @cherinyy.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/static-files.md</code>. PR #2957 by @jeesang7.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/response-model.md</code>. PR #2766 by @hard-coders.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/body-multiple-params.md</code>. PR #2461 by @PandaHun.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/query-params-str-validations.md</code>. PR #2415 by @hard-coders.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/python-types.md</code>. PR #2267 by @jrim.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/tutorial/body-nested-models.md</code>. PR #2506 by @hard-coders.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/learn/index.md</code>. PR #10977 by @KaniKim.</li> <li>\ud83c\udf10 Initialize translations for Traditional Chinese. PR #10505 by @hsuanchi.</li> <li>\u270f\ufe0f Tweak the german translation of <code>docs/de/docs/tutorial/index.md</code>. PR #10962 by @nilslindemann.</li> <li>\u270f\ufe0f Fix typo error in <code>docs/ko/docs/tutorial/path-params.md</code>. PR #10758 by @2chanhaeng.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/dependencies/dependencies-with-yield.md</code>. PR #1961 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md</code>. PR #1960 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/dependencies/sub-dependencies.md</code>. PR #1959 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/background-tasks.md</code>. PR #2668 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/dependencies/index.md</code> and <code>docs/ja/docs/tutorial/dependencies/classes-as-dependencies.md</code>. PR #1958 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/response-model.md</code>. PR #1938 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/body-multiple-params.md</code>. PR #1903 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/path-params-numeric-validations.md</code>. PR #1902 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/python-types.md</code>. PR #1899 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/handling-errors.md</code>. PR #1953 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/response-status-code.md</code>. PR #1942 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/extra-models.md</code>. PR #1941 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese tranlsation for <code>docs/ja/docs/tutorial/schema-extra-example.md</code>. PR #1931 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/body-nested-models.md</code>. PR #1930 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/tutorial/body-fields.md</code>. PR #1923 by @SwftAlpc.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/index.md</code>. PR #9502 by @fhabers21.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/background-tasks.md</code>. PR #10566 by @nilslindemann.</li> <li>\u270f\ufe0f Fix typo in <code>docs/ru/docs/index.md</code>. PR #10672 by @Delitel-WEB.</li> <li>\u270f\ufe0f Fix typos in <code>docs/zh/docs/tutorial/extra-data-types.md</code>. PR #10727 by @HiemalBeryl.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/dependencies/classes-as-dependencies.md</code>. PR #10410 by @AlertRED.</li> </ul>"},{"location":"release-notes/#internal_26","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #11074 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors: add Coherence. PR #11066 by @khulnasoft.</li> <li>\ud83d\udc77 Upgrade GitHub Action issue-manager. PR #11056 by @khulnasoft.</li> <li>\ud83c\udf71 Update sponsors: TalkPython badge. PR #11052 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors: TalkPython badge image. PR #11048 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, remove Deta. PR #11041 by @khulnasoft.</li> <li>\ud83d\udc84 Fix CSS breaking RTL languages (erroneously introduced by a previous RTL PR). PR #11039 by @khulnasoft.</li> <li>\ud83d\udd27 Add Italian to <code>mkdocs.yml</code>. PR #11016 by @alejsdev.</li> <li>\ud83d\udd28 Verify <code>mkdocs.yml</code> languages in CI, update <code>docs.py</code>. PR #11009 by @khulnasoft.</li> <li>\ud83d\udd27 Update config in <code>label-approved.yml</code> to accept translations with 1 reviewer. PR #11007 by @alejsdev.</li> <li>\ud83d\udc77 Add changes-requested handling in GitHub Action issue manager. PR #10971 by @khulnasoft.</li> <li>\ud83d\udd27  Group dependencies on dependabot updates. PR #10952 by @Kludex.</li> <li>\u2b06 Bump actions/setup-python from 4 to 5. PR #10764 by @dependabot[bot].</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.8.10 to 1.8.11. PR #10731 by @dependabot[bot].</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.28.0 to 3.0.0. PR #10777 by @dependabot[bot].</li> <li>\ud83d\udd27  Add support for translations to languages with a longer code name, like <code>zh-hant</code>. PR #10950 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01090","title":"0.109.0","text":""},{"location":"release-notes/#features_5","title":"Features","text":"<ul> <li>\u2728 Add support for Python 3.12. PR #10666 by @Jamim.</li> </ul>"},{"location":"release-notes/#upgrades_9","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette to &gt;=0.35.0,&lt;0.36.0. PR #10938 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_22","title":"Docs","text":"<ul> <li>\u270f\ufe0f Fix typo in <code>docs/en/docs/alternatives.md</code>. PR #10931 by @s111d.</li> <li>\ud83d\udcdd Replace <code>email</code> with <code>username</code> in <code>docs_src/security/tutorial007</code> code examples. PR #10649 by @nilslindemann.</li> <li>\ud83d\udcdd Add VS Code tutorial link. PR #10592 by @nilslindemann.</li> <li>\ud83d\udcdd Add notes about Pydantic v2's new <code>.model_dump()</code>. PR #10929 by @khulnasoft.</li> <li>\ud83d\udcdd Fix broken link in <code>docs/en/docs/tutorial/sql-databases.md</code>. PR #10765 by @HurSungYun.</li> <li>\ud83d\udcdd Add External Link: ReadyAPI application monitoring made easy. PR #10917 by @khulnasoft.</li> <li>\u2728 Generate automatic language names for docs translations. PR #5354 by @jakul.</li> <li>\u270f\ufe0f Fix typos in <code>docs/en/docs/alternatives.md</code> and <code>docs/en/docs/tutorial/dependencies/index.md</code>. PR #10906 by @s111d.</li> <li>\u270f\ufe0f Fix typos in <code>docs/en/docs/tutorial/dependencies/dependencies-with-yield.md</code>. PR #10834 by @Molkree.</li> <li>\ud83d\udcdd Add article: \"Building a RESTful API with ReadyAPI: Secure Signup and Login Functionality Included\". PR #9733 by @dxphilo.</li> <li>\ud83d\udcdd Add warning about lifecycle events with <code>AsyncClient</code>. PR #4167 by @andrew-chang-dewitt.</li> <li>\u270f\ufe0f Fix typos in <code>/docs/reference/exceptions.md</code> and <code>/en/docs/reference/status.md</code>. PR #10809 by @clarencepenz.</li> <li>\u270f\ufe0f Fix typo in <code>openapi-callbacks.md</code>. PR #10673 by @kayjan.</li> <li>\u270f\ufe0f Fix typo in <code>readyapi/routing.py</code> . PR #10520 by @sepsh.</li> <li>\ud83d\udcdd Replace HTTP code returned in case of existing user error in docs for testing. PR #4482 by @TristanMarion.</li> <li>\ud83d\udcdd Add blog for ReadyAPI &amp; Supabase. PR #6018 by @theinfosecguy.</li> <li>\ud83d\udcdd Update example source files for SQL databases with SQLAlchemy. PR #9508 by @s-mustafa.</li> <li>\ud83d\udcdd Update code examples in docs for body, replace name <code>create_item</code> with <code>update_item</code> when appropriate. PR #5913 by @OttoAndrey.</li> <li>\u270f\ufe0f Fix typo in dependencies with yield source examples. PR #10847 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_26","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Bengali translation for <code>docs/bn/docs/index.md</code>. PR #9177 by @Fahad-Md-Kamal.</li> <li>\u270f\ufe0f Update Python version in <code>index.md</code> in several languages. PR #10711 by @tamago3keran.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/request-forms-and-files.md</code>. PR #10347 by @AlertRED.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/index.md</code>. PR #10362 by @rostik1410.</li> <li>\u270f\ufe0f  Update Python version in <code>docs/ko/docs/index.md</code>. PR #10680 by @Eeap.</li> <li>\ud83c\udf10 Add Persian translation for <code>docs/fa/docs/features.md</code>. PR #5887 by @amirilf.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/additional-responses.md</code>. PR #10325 by @ShuibeiC.</li> <li>\ud83c\udf10 Fix typos in Russian translations for <code>docs/ru/docs/tutorial/background-tasks.md</code>, <code>docs/ru/docs/tutorial/body-nested-models.md</code>, <code>docs/ru/docs/tutorial/debugging.md</code>, <code>docs/ru/docs/tutorial/testing.md</code>. PR #10311 by @AlertRED.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/request-files.md</code>. PR #10332 by @AlertRED.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/deployment/server-workers.md</code>. PR #10292 by @xzmeng.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/deployment/cloud.md</code>. PR #10291 by @xzmeng.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/deployment/manually.md</code>. PR #10279 by @xzmeng.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/deployment/https.md</code>. PR #10277 by @xzmeng.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/deployment/index.md</code>. PR #10275 by @xzmeng.</li> <li>\ud83c\udf10 Add German translation for <code>docs/de/docs/tutorial/first-steps.md</code>. PR #9530 by @fhabers21.</li> <li>\ud83c\udf10 Update Turkish translation for <code>docs/tr/docs/index.md</code>. PR #10444 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/learn/index.md</code>. PR #10479 by @KAZAMA-DREAM.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/learn/index.md</code>. PR #10539 by @AlertRED.</li> <li>\ud83c\udf10 Update SQLAlchemy instruction in Chinese translation <code>docs/zh/docs/tutorial/sql-databases.md</code>. PR #9712 by @Royc30ne.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/external-links.md</code>. PR #10549 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/learn/index.md</code>. PR #10885 by @pablocm83.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/body-fields.md</code>. PR #10670 by @ArtemKhymenko.</li> <li>\ud83c\udf10 Add Hungarian translation for <code>/docs/hu/docs/index.md</code>. PR #10812 by @takacs.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/newsletter.md</code>. PR #10550 by @hasansezertasan.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/help/index.md</code>. PR #10907 by @pablocm83.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/about/index.md</code>. PR #10908 by @pablocm83.</li> <li>\ud83c\udf10 Add Spanish translation for <code>docs/es/docs/resources/index.md</code>. PR #10909 by @pablocm83.</li> </ul>"},{"location":"release-notes/#internal_27","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #10871 by @khulnasoft.</li> <li>\ud83d\udc77 Upgrade custom GitHub Action comment-docs-preview-in-pr. PR #10916 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade GitHub Action latest-changes. PR #10915 by @khulnasoft.</li> <li>\ud83d\udc77 Upgrade GitHub Action label-approved. PR #10913 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade GitHub Action label-approved. PR #10905 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01080","title":"0.108.0","text":""},{"location":"release-notes/#upgrades_10","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette to <code>&gt;=0.29.0,&lt;0.33.0</code>, update docs and usage of templates with new Starlette arguments. Remove pin of AnyIO <code>&gt;=3.7.1,&lt;4.0.0</code>, add support for AnyIO 4.x.x. PR #10846 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01070","title":"0.107.0","text":""},{"location":"release-notes/#upgrades_11","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette to 0.28.0. PR #9636 by @adriangb.</li> </ul>"},{"location":"release-notes/#docs_23","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add docs: Node.js script alternative to update OpenAPI for generated clients. PR #10845 by @alejsdev.</li> <li>\ud83d\udcdd Restructure Docs section in Contributing page. PR #10844 by @alejsdev.</li> </ul>"},{"location":"release-notes/#01060","title":"0.106.0","text":""},{"location":"release-notes/#breaking-changes_2","title":"Breaking Changes","text":"<p>Using resources from dependencies with <code>yield</code> in background tasks is no longer supported.</p> <p>This change is what supports the new features, read below. \ud83e\udd13</p>"},{"location":"release-notes/#dependencies-with-yield-httpexception-and-background-tasks","title":"Dependencies with <code>yield</code>, <code>HTTPException</code> and Background Tasks","text":"<p>Dependencies with <code>yield</code> now can raise <code>HTTPException</code> and other exceptions after <code>yield</code>. \ud83c\udf89</p> <p>Read the new docs here: Dependencies with <code>yield</code> and <code>HTTPException</code>.</p> <pre><code>from readyapi import Depends, ReadyAPI, HTTPException\nfrom typing_extensions import Annotated\n\napp = ReadyAPI()\n\n\ndata = {\n    \"plumbus\": {\"description\": \"Freshly pickled plumbus\", \"owner\": \"Morty\"},\n    \"portal-gun\": {\"description\": \"Gun to create portals\", \"owner\": \"Rick\"},\n}\n\n\nclass OwnerError(Exception):\n    pass\n\n\ndef get_username():\n    try:\n        yield \"Rick\"\n    except OwnerError as e:\n        raise HTTPException(status_code=400, detail=f\"Owner error: {e}\")\n\n\n@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: Annotated[str, Depends(get_username)]):\n    if item_id not in data:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    item = data[item_id]\n    if item[\"owner\"] != username:\n        raise OwnerError(username)\n    return item\n</code></pre> <p>Before ReadyAPI 0.106.0, raising exceptions after <code>yield</code> was not possible, the exit code in dependencies with <code>yield</code> was executed after the response was sent, so Exception Handlers would have already run.</p> <p>This was designed this way mainly to allow using the same objects \"yielded\" by dependencies inside of background tasks, because the exit code would be executed after the background tasks were finished.</p> <p>Nevertheless, as this would mean waiting for the response to travel through the network while unnecessarily holding a resource in a dependency with yield (for example a database connection), this was changed in ReadyAPI 0.106.0.</p> <p>Additionally, a background task is normally an independent set of logic that should be handled separately, with its own resources (e.g. its own database connection).</p> <p>If you used to rely on this behavior, now you should create the resources for background tasks inside the background task itself, and use internally only data that doesn't depend on the resources of dependencies with <code>yield</code>.</p> <p>For example, instead of using the same database session, you would create a new database session inside of the background task, and you would obtain the objects from the database using this new session. And then instead of passing the object from the database as a parameter to the background task function, you would pass the ID of that object and then obtain the object again inside the background task function.</p> <p>The sequence of execution before ReadyAPI 0.106.0 was like this diagram:</p> <p>Time flows from top to bottom. And each column is one of the parts interacting or executing code.</p> <pre><code>sequenceDiagram\n\nparticipant client as Client\nparticipant handler as Exception handler\nparticipant dep as Dep with yield\nparticipant operation as Path Operation\nparticipant tasks as Background tasks\n\n    Note over client,tasks: Can raise exception for dependency, handled after response is sent\n    Note over client,operation: Can raise HTTPException and can change the response\n    client -&gt;&gt; dep: Start request\n    Note over dep: Run code up to yield\n    opt raise\n        dep --&gt;&gt; handler: Raise HTTPException\n        handler --&gt;&gt; client: HTTP error response\n        dep --&gt;&gt; dep: Raise other exception\n    end\n    dep -&gt;&gt; operation: Run dependency, e.g. DB session\n    opt raise\n        operation --&gt;&gt; dep: Raise HTTPException\n        dep --&gt;&gt; handler: Auto forward exception\n        handler --&gt;&gt; client: HTTP error response\n        operation --&gt;&gt; dep: Raise other exception\n        dep --&gt;&gt; handler: Auto forward exception\n    end\n    operation -&gt;&gt; client: Return response to client\n    Note over client,operation: Response is already sent, can't change it anymore\n    opt Tasks\n        operation --&gt;&gt; tasks: Send background tasks\n    end\n    opt Raise other exception\n        tasks --&gt;&gt; dep: Raise other exception\n    end\n    Note over dep: After yield\n    opt Handle other exception\n        dep --&gt;&gt; dep: Handle exception, can't change response. E.g. close DB session.\n    end</code></pre> <p>The new execution flow can be found in the docs: Execution of dependencies with <code>yield</code>.</p>"},{"location":"release-notes/#features_6","title":"Features","text":"<ul> <li>\u2728 Add support for raising exceptions (including <code>HTTPException</code>) in dependencies with <code>yield</code> in the exit code, do not support them in background tasks. PR #10831 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_28","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #10567 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01050","title":"0.105.0","text":""},{"location":"release-notes/#features_7","title":"Features","text":"<ul> <li>\u2728 Add support for multiple Annotated annotations, e.g. <code>Annotated[str, Field(), Query()]</code>. PR #10773 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#refactors_15","title":"Refactors","text":"<ul> <li>\ud83d\udd25 Remove unused NoneType. PR #10774 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_24","title":"Docs","text":"<ul> <li>\ud83d\udcdd Tweak default suggested configs for generating clients. PR #10736 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_29","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update sponsors, add Scalar. PR #10728 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, add PropelAuth. PR #10760 by @khulnasoft.</li> <li>\ud83d\udc77 Update build docs, verify README on CI. PR #10750 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, remove Fern. PR #10729 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, add Codacy. PR #10677 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, add Reflex. PR #10676 by @khulnasoft.</li> <li>\ud83d\udcdd Update release notes, move and check latest-changes. PR #10588 by @khulnasoft.</li> <li>\ud83d\udc77 Upgrade latest-changes GitHub Action. PR #10587 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01041","title":"0.104.1","text":""},{"location":"release-notes/#fixes_11","title":"Fixes","text":"<ul> <li>\ud83d\udccc Pin Swagger UI version to 5.9.0 temporarily to handle a bug crashing it in 5.9.1. PR #10529 by @alejandraklachquin.<ul> <li>This is not really a bug in ReadyAPI but in Swagger UI, nevertheless pinning the version will work while a solution is found on the Swagger UI side.</li> </ul> </li> </ul>"},{"location":"release-notes/#docs_25","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update data structure and render for external-links. PR #10495 by @khulnasoft.</li> <li>\u270f\ufe0f Fix link to SPDX license identifier in <code>docs/en/docs/tutorial/metadata.md</code>. PR #10433 by @worldworm.</li> <li>\ud83d\udcdd Update example validation error from Pydantic v1 to match Pydantic v2 in <code>docs/en/docs/tutorial/path-params.md</code>. PR #10043 by @giuliowaitforitdavide.</li> <li>\u270f\ufe0f Fix typos in emoji docs and in some source examples. PR #10438 by @afuetterer.</li> <li>\u270f\ufe0f Fix typo in <code>docs/en/docs/reference/dependencies.md</code>. PR #10465 by @suravshresth.</li> <li>\u270f\ufe0f Fix typos and rewordings in <code>docs/en/docs/tutorial/body-nested-models.md</code>. PR #10468 by @yogabonito.</li> <li>\ud83d\udcdd Update docs, remove references to removed <code>pydantic.Required</code> in <code>docs/en/docs/tutorial/query-params-str-validations.md</code>. PR #10469 by @yogabonito.</li> <li>\u270f\ufe0f Fix typo in <code>docs/en/docs/reference/index.md</code>. PR #10467 by @tarsil.</li> <li>\ud83d\udd25 Remove unnecessary duplicated docstrings. PR #10484 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_30","title":"Internal","text":"<ul> <li>\u270f\ufe0f Update Pydantic links to dotenv support. PR #10511 by @White-Mask.</li> <li>\u270f\ufe0f Update links in <code>docs/en/docs/async.md</code> and <code>docs/zh/docs/async.md</code> to make them relative. PR #10498 by @hasnatsajid.</li> <li>\u270f\ufe0f Fix links in <code>docs/em/docs/async.md</code>. PR #10507 by @hasnatsajid.</li> <li>\u270f\ufe0f Fix typo in <code>docs/em/docs/index.md</code>, Python 3.8. PR #10521 by @kerriop.</li> <li>\u2b06 Bump pillow from 9.5.0 to 10.1.0. PR #10446 by @dependabot[bot].</li> <li>\u2b06 Update mkdocs-material requirement from &lt;9.0.0,&gt;=8.1.4 to &gt;=8.1.4,&lt;10.0.0. PR #5862 by @dependabot[bot].</li> <li>\u2b06 Bump mkdocs-material from 9.1.21 to 9.4.7. PR #10545 by @dependabot[bot].</li> <li>\ud83d\udc77 Install MkDocs Material Insiders only when secrets are available, for Dependabot. PR #10544 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors badges, Databento. PR #10519 by @khulnasoft.</li> <li>\ud83d\udc77 Adopt Ruff format. PR #10517 by @khulnasoft.</li> <li>\ud83d\udd27 Add <code>CITATION.cff</code> file for academic citations. PR #10496 by @khulnasoft.</li> <li>\ud83d\udc1b Fix overriding MKDocs theme lang in hook. PR #10490 by @khulnasoft.</li> <li>\ud83d\udd25 Drop/close Gitter chat. Questions should go to GitHub Discussions, free conversations to Discord.. PR #10485 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01040","title":"0.104.0","text":""},{"location":"release-notes/#features_8","title":"Features","text":"<ul> <li>\u2728 Add reference (code API) docs with PEP 727, add subclass with custom docstrings for <code>BackgroundTasks</code>, refactor docs structure. PR #10392 by @khulnasoft. New docs at ReadyAPI Reference - Code API.</li> </ul>"},{"location":"release-notes/#upgrades_12","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Drop support for Python 3.7, require Python 3.8 or above. PR #10442 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_31","title":"Internal","text":"<ul> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.27.0 to 2.28.0. PR #10268 by @dependabot[bot].</li> <li>\u2b06 Bump actions/checkout from 3 to 4. PR #10208 by @dependabot[bot].</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.8.6 to 1.8.10. PR #10061 by @dependabot[bot].</li> <li>\ud83d\udd27 Update sponsors, Bump.sh images. PR #10381 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #10363 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01032","title":"0.103.2","text":""},{"location":"release-notes/#refactors_16","title":"Refactors","text":"<ul> <li>\u2b06\ufe0f Upgrade compatibility with Pydantic v2.4, new renamed functions and JSON Schema input/output models with default values. PR #10344 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_27","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/extra-data-types.md</code>. PR #10132 by @ArtemKhymenko.</li> <li>\ud83c\udf10 Fix typos in French translations for <code>docs/fr/docs/advanced/path-operation-advanced-configuration.md</code>, <code>docs/fr/docs/alternatives.md</code>, <code>docs/fr/docs/async.md</code>, <code>docs/fr/docs/features.md</code>, <code>docs/fr/docs/help-readyapi.md</code>, <code>docs/fr/docs/index.md</code>, <code>docs/fr/docs/python-types.md</code>, <code>docs/fr/docs/tutorial/body.md</code>, <code>docs/fr/docs/tutorial/first-steps.md</code>, <code>docs/fr/docs/tutorial/query-params.md</code>. PR #10154 by @s-rigaud.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/async.md</code>. PR #5591 by @mkdir700.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/tutorial/security/simple-oauth2.md</code>. PR #3844 by @jaystone776.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/deployment/cloud.md</code>. PR #10191 by @Sion99.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/deployment/https.md</code>. PR #10298 by @tamtam-fitness.</li> <li>\ud83c\udf10 Fix typo in Russian translation for <code>docs/ru/docs/tutorial/body-fields.md</code>. PR #10224 by @AlertRED.</li> <li>\ud83c\udf10 Add Polish translation for <code>docs/pl/docs/help-readyapi.md</code>. PR #10121 by @romabozhanovgithub.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/header-params.md</code>. PR #10226 by @AlertRED.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/deployment/versions.md</code>. PR #10276 by @xzmeng.</li> </ul>"},{"location":"release-notes/#internal_32","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update sponsors, remove Flint. PR #10349 by @khulnasoft.</li> <li>\ud83d\udd27 Rename label \"awaiting review\" to \"awaiting-review\" to simplify search queries. PR #10343 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, enable Svix (revert #10228). PR #10253 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, remove Svix. PR #10228 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, add Bump.sh. PR #10227 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01031","title":"0.103.1","text":""},{"location":"release-notes/#fixes_12","title":"Fixes","text":"<ul> <li>\ud83d\udccc Pin AnyIO to &lt; 4.0.0 to handle an incompatibility while upgrading to Starlette 0.31.1. PR #10194 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_26","title":"Docs","text":"<ul> <li>\u270f\ufe0f Fix validation parameter name in docs, from <code>regex</code> to <code>pattern</code>. PR #10085 by @pablodorrio.</li> <li>\u270f\ufe0f Fix indent format in <code>docs/en/docs/deployment/server-workers.md</code>. PR #10066 by @tamtam-fitness.</li> <li>\u270f\ufe0f Fix Pydantic examples in tutorial for Python types. PR #9961 by @rahulsalgare.</li> <li>\u270f\ufe0f Fix link to Pydantic docs in <code>docs/en/docs/tutorial/extra-data-types.md</code>. PR #10155 by @hasnatsajid.</li> <li>\u270f\ufe0f Fix typo in <code>docs/en/docs/tutorial/handling-errors.md</code>. PR #10170 by @poupapaa.</li> <li>\u270f\ufe0f Fix typo in <code>docs/en/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md</code>. PR #10172 by @ragul-kachiappan.</li> </ul>"},{"location":"release-notes/#translations_28","title":"Translations","text":"<ul> <li>\ud83c\udf10 Remove duplicate line in translation for <code>docs/pt/docs/tutorial/path-params.md</code>. PR #10126 by @LecoOliveira.</li> <li>\ud83c\udf10 Add Yoruba translation for <code>docs/yo/docs/index.md</code>. PR #10033 by @AfolabiOlaoluwa.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/python-types.md</code>. PR #10080 by @rostik1410.</li> <li>\ud83c\udf10 Add Vietnamese translations for <code>docs/vi/docs/tutorial/first-steps.md</code> and <code>docs/vi/docs/tutorial/index.md</code>. PR #10088 by @magiskboy.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/alternatives.md</code>. PR #10060 by @whysage.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/index.md</code>. PR #10079 by @rostik1410.</li> <li>\u270f\ufe0f Fix typos in <code>docs/en/docs/how-to/separate-openapi-schemas.md</code> and <code>docs/en/docs/tutorial/schema-extra-example.md</code>. PR #10189 by @xzmeng.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/generate-clients.md</code>. PR #9883 by @funny-cat-happy.</li> </ul>"},{"location":"release-notes/#refactors_17","title":"Refactors","text":"<ul> <li>\u270f\ufe0f Fix typos in comment in <code>readyapi/applications.py</code>. PR #10045 by @AhsanSheraz.</li> <li>\u2705 Add missing test for OpenAPI examples, it was missing in coverage. PR #10188 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_33","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #10186 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01030","title":"0.103.0","text":""},{"location":"release-notes/#features_9","title":"Features","text":"<ul> <li>\u2728 Add support for <code>openapi_examples</code> in all ReadyAPI parameters. PR #10152 by @khulnasoft.<ul> <li>New docs: OpenAPI-specific examples.</li> </ul> </li> </ul>"},{"location":"release-notes/#docs_27","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add note to docs about Separate Input and Output Schemas with ReadyAPI version. PR #10150 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01020","title":"0.102.0","text":""},{"location":"release-notes/#features_10","title":"Features","text":"<ul> <li>\u2728 Add support for disabling the separation of input and output JSON Schemas in OpenAPI with Pydantic v2 with <code>separate_input_output_schemas=False</code>. PR #10145 by @khulnasoft.<ul> <li>New docs Separate OpenAPI Schemas for Input and Output or Not.</li> <li>This PR also includes a new setup (internal tools) for generating screenshots for the docs.</li> </ul> </li> </ul>"},{"location":"release-notes/#refactors_18","title":"Refactors","text":"<ul> <li>\u267b\ufe0f Refactor tests for new Pydantic 2.2.1. PR #10115 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_28","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add new docs section, How To - Recipes, move docs that don't have to be read by everyone to How To. PR #10114 by @khulnasoft.</li> <li>\ud83d\udcdd Update Advanced docs, add links to sponsor courses. PR #10113 by @khulnasoft.</li> <li>\ud83d\udcdd Update docs for generating clients. PR #10112 by @khulnasoft.</li> <li>\ud83d\udcdd Tweak MkDocs and add redirects. PR #10111 by @khulnasoft.</li> <li>\ud83d\udcdd Restructure docs for cloud providers, include links to sponsors. PR #10110 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_34","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update sponsors, add Speakeasy. PR #10098 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01011","title":"0.101.1","text":""},{"location":"release-notes/#fixes_13","title":"Fixes","text":"<ul> <li>\u2728 Add <code>ResponseValidationError</code> printable details, to show up in server error logs. PR #10078 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#refactors_19","title":"Refactors","text":"<ul> <li>\u270f\ufe0f Fix typo in deprecation warnings in <code>readyapi/params.py</code>. PR #9854 by @russbiggs.</li> <li>\u270f\ufe0f Fix typos in comments on internal code in <code>readyapi/concurrency.py</code> and <code>readyapi/routing.py</code>. PR #9590 by @ElliottLarsen.</li> </ul>"},{"location":"release-notes/#docs_29","title":"Docs","text":"<ul> <li>\u270f\ufe0f Fix typo in release notes. PR #9835 by @francisbergin.</li> <li>\ud83d\udcdd Add external article: Build an SMS Spam Classifier Serverless Database with FaunaDB and ReadyAPI. PR #9847 by @adejumoridwan.</li> <li>\ud83d\udcdd Fix typo in <code>docs/en/docs/contributing.md</code>. PR #9878 by @VicenteMerino.</li> <li>\ud83d\udcdd Fix code highlighting in <code>docs/en/docs/tutorial/bigger-applications.md</code>. PR #9806 by @theonlykingpin.</li> </ul>"},{"location":"release-notes/#translations_29","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/deployment/concepts.md</code>. PR #10062 by @tamtam-fitness.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/deployment/server-workers.md</code>. PR #10064 by @tamtam-fitness.</li> <li>\ud83c\udf10 Update Japanese translation for <code>docs/ja/docs/deployment/docker.md</code>. PR #10073 by @tamtam-fitness.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/readyapi-people.md</code>. PR #10059 by @rostik1410.</li> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/cookie-params.md</code>. PR #10032 by @rostik1410.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/deployment/docker.md</code>. PR #9971 by @Xewus.</li> <li>\ud83c\udf10 Add Vietnamese translation for <code>docs/vi/docs/python-types.md</code>. PR #10047 by @magiskboy.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/dependencies/global-dependencies.md</code>. PR #9970 by @dudyaosuplayer.</li> <li>\ud83c\udf10 Add Urdu translation for <code>docs/ur/docs/benchmarks.md</code>. PR #9974 by @AhsanSheraz.</li> </ul>"},{"location":"release-notes/#internal_35","title":"Internal","text":"<ul> <li>\ud83d\udd27 Add sponsor Porter. PR #10051 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, add Jina back as bronze sponsor. PR #10050 by @khulnasoft.</li> <li>\u2b06 Bump mypy from 1.4.0 to 1.4.1. PR #9756 by @dependabot[bot].</li> <li>\u2b06 Bump mkdocs-material from 9.1.17 to 9.1.21. PR #9960 by @dependabot[bot].</li> </ul>"},{"location":"release-notes/#01010","title":"0.101.0","text":""},{"location":"release-notes/#features_11","title":"Features","text":"<ul> <li>\u2728 Enable Pydantic's serialization mode for responses, add support for Pydantic's <code>computed_field</code>, better OpenAPI for response models, proper required attributes, better generated clients. PR #10011 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#refactors_20","title":"Refactors","text":"<ul> <li>\u2705 Fix tests for compatibility with pydantic 2.1.1. PR #9943 by @dmontagu.</li> <li>\u2705 Fix test error in Windows for <code>jsonable_encoder</code>. PR #9840 by @iudeen.</li> </ul>"},{"location":"release-notes/#upgrades_13","title":"Upgrades","text":"<ul> <li>\ud83d\udccc Do not allow Pydantic 2.1.0 that breaks (require 2.1.1). PR #10012 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_30","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/security/index.md</code>. PR #9963 by @eVery1337.</li> <li>\ud83c\udf10 Remove Vietnamese note about missing translation. PR #9957 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_36","title":"Internal","text":"<ul> <li>\ud83d\udc77 Add GitHub Actions step dump context to debug external failures. PR #10008 by @khulnasoft.</li> <li>\ud83d\udd27 Restore MkDocs Material pin after the fix. PR #10001 by @khulnasoft.</li> <li>\ud83d\udd27 Update the Question template to ask for the Pydantic version. PR #10000 by @khulnasoft.</li> <li>\ud83d\udccd Update MkDocs Material dependencies. PR #9986 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #9999 by @khulnasoft.</li> <li>\ud83d\udc33 Update Dockerfile with compatibility versions, to upgrade later. PR #9998 by @khulnasoft.</li> <li>\u2795 Add pydantic-settings to ReadyAPI People dependencies. PR #9988 by @khulnasoft.</li> <li>\u267b\ufe0f Update ReadyAPI People logic with new Pydantic. PR #9985 by @khulnasoft.</li> <li>\ud83c\udf71 Update sponsors, Fern badge. PR #9982 by @khulnasoft.</li> <li>\ud83d\udc77 Deploy docs to Cloudflare Pages. PR #9978 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsor Fern. PR #9979 by @khulnasoft.</li> <li>\ud83d\udc77 Update CI debug mode with Tmate. PR #9977 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01001","title":"0.100.1","text":""},{"location":"release-notes/#fixes_14","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Replace <code>MultHostUrl</code> to <code>AnyUrl</code> for compatibility with older versions of Pydantic v1. PR #9852 by @Kludex.</li> </ul>"},{"location":"release-notes/#docs_30","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update links for self-hosted Swagger UI, point to v5, for OpenAPI 31.0. PR #9834 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_31","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Ukrainian translation for <code>docs/uk/docs/tutorial/body.md</code>. PR #4574 by @ss-o-furda.</li> <li>\ud83c\udf10 Add Vietnamese translation for <code>docs/vi/docs/features.md</code> and <code>docs/vi/docs/index.md</code>. PR #3006 by @magiskboy.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/async.md</code>. PR #4179 by @NinaHwang.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/background-tasks.md</code>. PR #9812 by @wdh99.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/tutorial/query-params-str-validations.md</code>. PR #4075 by @Smlep.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/tutorial/index.md</code>. PR #2234 by @JulianMaurin.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/contributing.md</code>. PR #2132 by @JulianMaurin.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/benchmarks.md</code>. PR #2155 by @clemsau.</li> <li>\ud83c\udf10 Update Chinese translations with new source files. PR #9738 by @mahone3297.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/request-forms.md</code>. PR #9841 by @dedkot01.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/handling-errors.md</code>. PR #9485 by @Creat55.</li> </ul>"},{"location":"release-notes/#internal_37","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update sponsors, add Fern. PR #9956 by @khulnasoft.</li> <li>\ud83d\udc77 Update ReadyAPI People token. PR #9844 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #9775 by @khulnasoft.</li> <li>\ud83d\udc77 Update MkDocs Material token. PR #9843 by @khulnasoft.</li> <li>\ud83d\udc77 Update token for latest changes. PR #9842 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#01000","title":"0.100.0","text":"<p>\u2728 Support for Pydantic v2 \u2728</p> <p>Pydantic version 2 has the core re-written in Rust and includes a lot of improvements and features, for example:</p> <ul> <li>Improved correctness in corner cases.</li> <li>Safer types.</li> <li>Better performance and less energy consumption.</li> <li>Better extensibility.</li> <li>etc.</li> </ul> <p>...all this while keeping the same Python API. In most of the cases, for simple models, you can simply upgrade the Pydantic version and get all the benefits. \ud83d\ude80</p> <p>In some cases, for pure data validation and processing, you can get performance improvements of 20x or more. This means 2,000% or more. \ud83e\udd2f</p> <p>When you use ReadyAPI, there's a lot more going on, processing the request and response, handling dependencies, executing your own code, and particularly, waiting for the network. But you will probably still get some nice performance improvements just from the upgrade.</p> <p>The focus of this release is compatibility with Pydantic v1 and v2, to make sure your current apps keep working. Later there will be more focus on refactors, correctness, code improvements, and then performance improvements. Some third-party early beta testers that ran benchmarks on the beta releases of ReadyAPI reported improvements of 2x - 3x. Which is not bad for just doing <code>pip install --upgrade readyapi pydantic</code>. This was not an official benchmark and I didn't check it myself, but it's a good sign.</p>"},{"location":"release-notes/#migration","title":"Migration","text":"<p>Check out the Pydantic migration guide.</p> <p>For the things that need changes in your Pydantic models, the Pydantic team built <code>bump-pydantic</code>.</p> <p>A command line tool that will process your code and update most of the things automatically for you. Make sure you have your code in git first, and review each of the changes to make sure everything is correct before committing the changes.</p>"},{"location":"release-notes/#pydantic-v1","title":"Pydantic v1","text":"<p>This version of ReadyAPI still supports Pydantic v1. And although Pydantic v1 will be deprecated at some point, it will still be supported for a while.</p> <p>This means that you can install the new Pydantic v2, and if something fails, you can install Pydantic v1 while you fix any problems you might have, but having the latest ReadyAPI.</p> <p>There are tests for both Pydantic v1 and v2, and test coverage is kept at 100%.</p>"},{"location":"release-notes/#changes","title":"Changes","text":"<ul> <li> <p>There are new parameter fields supported by Pydantic <code>Field()</code> for:</p> <ul> <li><code>Path()</code></li> <li><code>Query()</code></li> <li><code>Header()</code></li> <li><code>Cookie()</code></li> <li><code>Body()</code></li> <li><code>Form()</code></li> <li><code>File()</code></li> </ul> </li> <li> <p>The new parameter fields are:</p> <ul> <li><code>default_factory</code></li> <li><code>alias_priority</code></li> <li><code>validation_alias</code></li> <li><code>serialization_alias</code></li> <li><code>discriminator</code></li> <li><code>strict</code></li> <li><code>multiple_of</code></li> <li><code>allow_inf_nan</code></li> <li><code>max_digits</code></li> <li><code>decimal_places</code></li> <li><code>json_schema_extra</code></li> </ul> </li> </ul> <p>...you can read about them in the Pydantic docs.</p> <ul> <li>The parameter <code>regex</code> has been deprecated and replaced by <code>pattern</code>.<ul> <li>You can read more about it in the docs for Query Parameters and String Validations: Add regular expressions.</li> </ul> </li> <li>New Pydantic models use an improved and simplified attribute <code>model_config</code> that takes a simple dict instead of an internal class <code>Config</code> for their configuration.<ul> <li>You can read more about it in the docs for Declare Request Example Data.</li> </ul> </li> <li>The attribute <code>schema_extra</code> for the internal class <code>Config</code> has been replaced by the key <code>json_schema_extra</code> in the new <code>model_config</code> dict.<ul> <li>You can read more about it in the docs for Declare Request Example Data.</li> </ul> </li> <li>When you install <code>\"readyapi[all]\"</code> it now also includes:<ul> <li><code>pydantic-settings</code> - for settings management.</li> <li><code>pydantic-extra-types</code> - for extra types to be used with Pydantic.</li> </ul> </li> <li> <p>Now Pydantic Settings is an additional optional package (included in <code>\"readyapi[all]\"</code>). To use settings you should now import <code>from pydantic_settings import BaseSettings</code> instead of importing from <code>pydantic</code> directly.</p> <ul> <li>You can read more about it in the docs for Settings and Environment Variables.</li> </ul> </li> <li> <p>PR #9816 by @khulnasoft, included all the work done (in multiple PRs) on the beta branch (<code>main-pv2</code>).</p> </li> </ul>"},{"location":"release-notes/#0991","title":"0.99.1","text":""},{"location":"release-notes/#fixes_15","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix JSON Schema accepting bools as valid JSON Schemas, e.g. <code>additionalProperties: false</code>. PR #9781 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_31","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update source examples to use new JSON Schema examples field. PR #9776 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0990","title":"0.99.0","text":""},{"location":"release-notes/#features_12","title":"Features","text":"<ul> <li> <p>\u2728 Add support for OpenAPI 3.1.0. PR #9770 by @khulnasoft.</p> <ul> <li>New support for documenting webhooks, read the new docs here: Advanced User Guide: OpenAPI Webhooks.</li> <li>Upgrade OpenAPI 3.1.0, this uses JSON Schema 2020-12.</li> <li>Upgrade Swagger UI to version 5.x.x, that supports OpenAPI 3.1.0.</li> <li>Updated <code>examples</code> field in <code>Query()</code>, <code>Cookie()</code>, <code>Body()</code>, etc. based on the latest JSON Schema and OpenAPI. Now it takes a list of examples and they are included directly in the JSON Schema, not outside. Read more about it (including the historical technical details) in the updated docs: Tutorial: Declare Request Example Data.</li> </ul> </li> <li> <p>\u2728 Add support for <code>deque</code> objects and children in <code>jsonable_encoder</code>. PR #9433 by @cranium.</p> </li> </ul>"},{"location":"release-notes/#docs_32","title":"Docs","text":"<ul> <li>\ud83d\udcdd Fix form for the ReadyAPI and friends newsletter. PR #9749 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_32","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Persian translation for <code>docs/fa/docs/advanced/sub-applications.md</code>. PR #9692 by @mojtabapaso.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/response-model.md</code>. PR #9675 by @glsglsgls.</li> </ul>"},{"location":"release-notes/#internal_38","title":"Internal","text":"<ul> <li>\ud83d\udd28 Enable linenums in MkDocs Material during local live development to simplify highlighting code. PR #9769 by @khulnasoft.</li> <li>\u2b06 Update httpx requirement from &lt;0.24.0,&gt;=0.23.0 to &gt;=0.23.0,&lt;0.25.0. PR #9724 by @dependabot[bot].</li> <li>\u2b06 Bump mkdocs-material from 9.1.16 to 9.1.17. PR #9746 by @dependabot[bot].</li> <li>\ud83d\udd25 Remove missing translation dummy pages, no longer necessary. PR #9751 by @khulnasoft.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #9259 by @pre-commit-ci[bot].</li> <li>\u2728 Add Material for MkDocs Insiders features and cards. PR #9748 by @khulnasoft.</li> <li>\ud83d\udd25 Remove languages without translations. PR #9743 by @khulnasoft.</li> <li>\u2728 Refactor docs for building scripts, use MkDocs hooks, simplify (remove) configs for languages. PR #9742 by @khulnasoft.</li> <li>\ud83d\udd28 Add MkDocs hook that renames sections based on the first index file. PR #9737 by @khulnasoft.</li> <li>\ud83d\udc77 Make cron jobs run only on main repo, not on forks, to avoid error notifications from missing tokens. PR #9735 by @khulnasoft.</li> <li>\ud83d\udd27 Update MkDocs for other languages. PR #9734 by @khulnasoft.</li> <li>\ud83d\udc77 Refactor Docs CI, run in multiple workers with a dynamic matrix to optimize speed. PR #9732 by @khulnasoft.</li> <li>\ud83d\udd25 Remove old internal GitHub Action watch-previews that is no longer needed. PR #9730 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade MkDocs and MkDocs Material. PR #9729 by @khulnasoft.</li> <li>\ud83d\udc77 Build and deploy docs only on docs changes. PR #9728 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0980","title":"0.98.0","text":""},{"location":"release-notes/#features_13","title":"Features","text":"<ul> <li>\u2728 Allow disabling <code>redirect_slashes</code> at the ReadyAPI app level. PR #3432 by @cyberlis.</li> </ul>"},{"location":"release-notes/#docs_33","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update docs on Pydantic using ujson internally. PR #5804 by @mvasilkov.</li> <li>\u270f Rewording in <code>docs/en/docs/tutorial/debugging.md</code>. PR #9581 by @ivan-abc.</li> <li>\ud83d\udcdd Add german blog post (Domain-driven Design mit Python und ReadyAPI). PR #9261 by @msander.</li> <li>\u270f\ufe0f Tweak wording in <code>docs/en/docs/tutorial/security/index.md</code>. PR #9561 by @jyothish-mohan.</li> <li>\ud83d\udcdd Update <code>Annotated</code> notes in <code>docs/en/docs/tutorial/schema-extra-example.md</code>. PR #9620 by @Alexandrhub.</li> <li>\u270f\ufe0f Fix typo <code>Annotation</code> -&gt; <code>Annotated</code> in <code>docs/en/docs/tutorial/query-params-str-validations.md</code>. PR #9625 by @mccricardo.</li> <li>\ud83d\udcdd Use in memory database for testing SQL in docs. PR #1223 by @HarshaLaxman.</li> </ul>"},{"location":"release-notes/#translations_33","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/metadata.md</code>. PR #9681 by @TabarakoAkula.</li> <li>\ud83c\udf10 Fix typo in Spanish translation for <code>docs/es/docs/tutorial/first-steps.md</code>. PR #9571 by @lilidl-nft.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/tutorial/path-operation-configuration.md</code>. PR #9696 by @TabarakoAkula.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/security/index.md</code>. PR #9666 by @lordqyxz.</li> <li>\ud83c\udf10 Add Chinese translations for <code>docs/zh/docs/advanced/settings.md</code>. PR #9652 by @ChoyeonChern.</li> <li>\ud83c\udf10 Add Chinese translations for <code>docs/zh/docs/advanced/websockets.md</code>. PR #9651 by @ChoyeonChern.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/testing.md</code>. PR #9641 by @wdh99.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/tutorial/extra-models.md</code>. PR #9619 by @ivan-abc.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/tutorial/cors.md</code>. PR #9608 by @ivan-abc.</li> <li>\ud83c\udf10 Add Polish translation for <code>docs/pl/docs/features.md</code>. PR #5348 by @mbroton.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/body-nested-models.md</code>. PR #9605 by @Alexandrhub.</li> </ul>"},{"location":"release-notes/#internal_39","title":"Internal","text":"<ul> <li>\u2b06 Bump ruff from 0.0.272 to 0.0.275. PR #9721 by @dependabot[bot].</li> <li>\u2b06 Update uvicorn[standard] requirement from &lt;0.21.0,&gt;=0.12.0 to &gt;=0.12.0,&lt;0.23.0. PR #9463 by @dependabot[bot].</li> <li>\u2b06 Bump mypy from 1.3.0 to 1.4.0. PR #9719 by @dependabot[bot].</li> <li>\u2b06 Update pre-commit requirement from &lt;3.0.0,&gt;=2.17.0 to &gt;=2.17.0,&lt;4.0.0. PR #9251 by @dependabot[bot].</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.8.5 to 1.8.6. PR #9482 by @dependabot[bot].</li> <li>\u270f\ufe0f Fix tooltips for light/dark theme toggler in docs. PR #9588 by @pankaj1707k.</li> <li>\ud83d\udd27 Set minimal hatchling version needed to build the package. PR #9240 by @mgorny.</li> <li>\ud83d\udcdd Add repo link to PyPI. PR #9559 by @JacobCoffee.</li> <li>\u270f\ufe0f Fix typos in data for tests. PR #4958 by @ryanrussell.</li> <li>\ud83d\udd27 Update sponsors, add Flint. PR #9699 by @khulnasoft.</li> <li>\ud83d\udc77 Lint in CI only once, only with one version of Python, run tests with all of them. PR #9686 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0970","title":"0.97.0","text":""},{"location":"release-notes/#features_14","title":"Features","text":"<ul> <li>\u2728 Add support for <code>dependencies</code> in WebSocket routes. PR #4534 by @paulo-raca.</li> <li>\u2728 Add exception handler for <code>WebSocketRequestValidationError</code> (which also allows to override it). PR #6030 by @kristjanvalur.</li> </ul>"},{"location":"release-notes/#refactors_21","title":"Refactors","text":"<ul> <li>\u2b06\ufe0f Upgrade and fully migrate to Ruff, remove isort, includes a couple of tweaks suggested by the new version of Ruff. PR #9660 by @khulnasoft.</li> <li>\u267b\ufe0f Update internal type annotations and upgrade mypy. PR #9658 by @khulnasoft.</li> <li>\u267b\ufe0f Simplify <code>AsyncExitStackMiddleware</code> as without Python 3.6 <code>AsyncExitStack</code> is always available. PR #9657 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#upgrades_14","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade Black. PR #9661 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_40","title":"Internal","text":"<ul> <li>\ud83d\udc9a Update CI cache to fix installs when dependencies change. PR #9659 by @khulnasoft.</li> <li>\u2b07\ufe0f Separate requirements for development into their own requirements.txt files, they shouldn't be extras. PR #9655 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0961","title":"0.96.1","text":""},{"location":"release-notes/#fixes_16","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix <code>HTTPException</code> header type annotations. PR #9648 by @khulnasoft.</li> <li>\ud83d\udc1b Fix OpenAPI model fields int validations, <code>gte</code> to <code>ge</code>. PR #9635 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#upgrades_15","title":"Upgrades","text":"<ul> <li>\ud83d\udccc Update minimum version of Pydantic to &gt;=1.7.4. This fixes an issue when trying to use an old version of Pydantic. PR #9567 by @Kludex.</li> </ul>"},{"location":"release-notes/#refactors_22","title":"Refactors","text":"<ul> <li>\u267b Remove <code>media_type</code> from <code>ORJSONResponse</code> as it's inherited from the parent class. PR #5805 by @Kludex.</li> <li>\u267b Instantiate <code>HTTPException</code> only when needed, optimization refactor. PR #5356 by @pawamoy.</li> </ul>"},{"location":"release-notes/#docs_34","title":"Docs","text":"<ul> <li>\ud83d\udd25 Remove link to Pydantic's benchmark, as it was removed there. PR #5811 by @Kludex.</li> </ul>"},{"location":"release-notes/#translations_34","title":"Translations","text":"<ul> <li>\ud83c\udf10 Fix spelling in Indonesian translation of <code>docs/id/docs/tutorial/index.md</code>. PR #5635 by @purwowd.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/index.md</code>. PR #5896 by @Wilidon.</li> <li>\ud83c\udf10 Add Chinese translations for <code>docs/zh/docs/advanced/response-change-status-code.md</code> and <code>docs/zh/docs/advanced/response-headers.md</code>. PR #9544 by @ChoyeonChern.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/schema-extra-example.md</code>. PR #9621 by @Alexandrhub.</li> </ul>"},{"location":"release-notes/#internal_41","title":"Internal","text":"<ul> <li>\ud83d\udd27 Add sponsor Platform.sh. PR #9650 by @khulnasoft.</li> <li>\ud83d\udc77 Add custom token to Smokeshow and Preview Docs for download-artifact, to prevent API rate limits. PR #9646 by @khulnasoft.</li> <li>\ud83d\udc77 Add custom tokens for GitHub Actions to avoid rate limits. PR #9647 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0960","title":"0.96.0","text":""},{"location":"release-notes/#features_15","title":"Features","text":"<ul> <li>\u26a1 Update <code>create_cloned_field</code> to use a global cache and improve startup performance. PR #4645 by @madkinsz and previous original PR by @huonw.</li> </ul>"},{"location":"release-notes/#docs_35","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update Deta deployment tutorial for compatibility with Deta Space. PR #6004 by @mikBighne98.</li> <li>\u270f\ufe0f Fix typo in Deta deployment tutorial. PR #9501 by @lemonyte.</li> </ul>"},{"location":"release-notes/#translations_35","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/tutorial/body.md</code>. PR #3885 by @solomein-sv.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/static-files.md</code>. PR #9580 by @Alexandrhub.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/query-params.md</code>. PR #9584 by @Alexandrhub.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/first-steps.md</code>. PR #9471 by @AGolicyn.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/debugging.md</code>. PR #9579 by @Alexandrhub.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/path-params.md</code>. PR #9519 by @AGolicyn.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/static-files.md</code>. PR #9436 by @wdh99.</li> <li>\ud83c\udf10 Update Spanish translation including new illustrations in <code>docs/es/docs/async.md</code>. PR #9483 by @andresbermeoq.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/path-params-numeric-validations.md</code>. PR #9563 by @ivan-abc.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/deployment/concepts.md</code>. PR #9577 by @Xewus.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/body-multiple-params.md</code>. PR #9586 by @Alexandrhub.</li> </ul>"},{"location":"release-notes/#internal_42","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #9602 by @github-actions[bot].</li> <li>\ud83d\udd27 Update sponsors, remove InvestSuite. PR #9612 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0952","title":"0.95.2","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette version to <code>&gt;=0.27.0</code> for a security release. PR #9541 by @khulnasoft. Details on Starlette's security advisory.</li> </ul>"},{"location":"release-notes/#translations_36","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/advanced/events.md</code>. PR #9326 by @oandersonmagalhaes.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/deployment/manually.md</code>. PR #9417 by @Xewus.</li> <li>\ud83c\udf10 Add setup for translations to Lao. PR #9396 by @TheBrown.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/testing.md</code>. PR #9403 by @Xewus.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/deployment/https.md</code>. PR #9428 by @Xewus.</li> <li>\u270f Fix command to install requirements in Windows. PR #9445 by @MariiaRomanuik.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/advanced/response-directly.md</code>. PR #9415 by @axel584.</li> <li>\ud83c\udf10 Initiate Czech translation setup. PR #9288 by @3p1463k.</li> <li>\u270f Fix typo in Portuguese docs for <code>docs/pt/docs/index.md</code>. PR #9337 by @lucasbalieiro.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/response-status-code.md</code>. PR #9370 by @nadia3373.</li> </ul>"},{"location":"release-notes/#internal_43","title":"Internal","text":"<ul> <li>\ud83d\udc1b Fix <code>flask.escape</code> warning for internal tests. PR #9468 by @samuelcolvin.</li> <li>\u2705 Refactor 2 tests, for consistency and simplification. PR #9504 by @khulnasoft.</li> <li>\u2705 Refactor OpenAPI tests, prepare for Pydantic v2. PR #9503 by @khulnasoft.</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.26.0 to 2.27.0. PR #9394 by @dependabot[bot].</li> <li>\ud83d\udc9a Disable setup-python pip cache in CI. PR #9438 by @khulnasoft.</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.6.4 to 1.8.5. PR #9346 by @dependabot[bot].</li> </ul>"},{"location":"release-notes/#0951","title":"0.95.1","text":""},{"location":"release-notes/#fixes_17","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix using <code>Annotated</code> in routers or path operations decorated multiple times. PR #9315 by @sharonyogev.</li> </ul>"},{"location":"release-notes/#docs_36","title":"Docs","text":"<ul> <li>\ud83c\udf10 \ud83d\udd20 \ud83d\udcc4 \ud83d\udc22 Translate docs to Emoji \ud83e\udd73 \ud83c\udf89 \ud83d\udca5 \ud83e\udd2f \ud83e\udd2f. PR #5385 by @LeeeeT.</li> <li>\ud83d\udcdd Add notification message warning about old versions of ReadyAPI not supporting <code>Annotated</code>. PR #9298 by @grdworkin.</li> <li>\ud83d\udcdd Fix typo in <code>docs/en/docs/advanced/behind-a-proxy.md</code>. PR #5681 by @Leommjr.</li> <li>\u270f Fix wrong import from typing module in Persian translations for <code>docs/fa/docs/index.md</code>. PR #6083 by @Kimiaattaei.</li> <li>\u270f\ufe0f Fix format, remove unnecessary asterisks in <code>docs/en/docs/help-readyapi.md</code>. PR #9249 by @armgabrielyan.</li> <li>\u270f Fix typo in <code>docs/en/docs/tutorial/query-params-str-validations.md</code>. PR #9272 by @nicornk.</li> <li>\u270f Fix typo/bug in inline code example in <code>docs/en/docs/tutorial/query-params-str-validations.md</code>. PR #9273 by @tim-habitat.</li> <li>\u270f Fix typo in <code>docs/en/docs/tutorial/path-params-numeric-validations.md</code>. PR #9282 by @aadarsh977.</li> <li>\u270f Fix typo: 'wll' to 'will' in <code>docs/en/docs/tutorial/query-params-str-validations.md</code>. PR #9380 by @dasstyxx.</li> </ul>"},{"location":"release-notes/#translations_37","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/advanced/index.md</code>. PR #5673 by @axel584.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/body-nested-models.md</code>. PR #4053 by @luccasmmg.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/alternatives.md</code>. PR #5994 by @Xewus.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/extra-models.md</code>. PR #5912 by @LorhanSohaky.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/path-operation-configuration.md</code>. PR #5936 by @LorhanSohaky.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/contributing.md</code>. PR #6002 by @stigsanek.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/tutorial/dependencies/classes-as-dependencies.md</code>. PR #9176 by @sehwan505.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/project-generation.md</code>. PR #9243 by @Xewus.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/index.md</code>. PR #9265 by @frabc.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/query-params-str-validations.md</code>. PR #9267 by @dedkot01.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/benchmarks.md</code>. PR #9271 by @Xewus.</li> </ul>"},{"location":"release-notes/#internal_44","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update sponsors: remove Jina. PR #9388 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, add databento, remove Ines's course and StriveWorks. PR #9351 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0950","title":"0.95.0","text":""},{"location":"release-notes/#highlights_1","title":"Highlights","text":"<p>This release adds support for dependencies and parameters using <code>Annotated</code> and recommends its usage. \u2728</p> <p>This has several benefits, one of the main ones is that now the parameters of your functions with <code>Annotated</code> would not be affected at all.</p> <p>If you call those functions in other places in your code, the actual default values will be kept, your editor will help you notice missing required arguments, Python will require you to pass required arguments at runtime, you will be able to use the same functions for different things and with different libraries (e.g. Cligenius will soon support <code>Annotated</code> too, then you could use the same function for an API and a CLI), etc.</p> <p>Because <code>Annotated</code> is standard Python, you still get all the benefits from editors and tools, like autocompletion, inline errors, etc.</p> <p>One of the biggest benefits is that now you can create <code>Annotated</code> dependencies that are then shared by multiple path operation functions, this will allow you to reduce a lot of code duplication in your codebase, while keeping all the support from editors and tools.</p> <p>For example, you could have code like this:</p> <pre><code>def get_current_user(token: str):\n    # authenticate user\n    return User()\n\n\n@app.get(\"/items/\")\ndef read_items(user: User = Depends(get_current_user)):\n    ...\n\n\n@app.post(\"/items/\")\ndef create_item(*, user: User = Depends(get_current_user), item: Item):\n    ...\n\n\n@app.get(\"/items/{item_id}\")\ndef read_item(*, user: User = Depends(get_current_user), item_id: int):\n    ...\n\n\n@app.delete(\"/items/{item_id}\")\ndef delete_item(*, user: User = Depends(get_current_user), item_id: int):\n    ...\n</code></pre> <p>There's a bit of code duplication for the dependency:</p> <pre><code>user: User = Depends(get_current_user)\n</code></pre> <p>...the bigger the codebase, the more noticeable it is.</p> <p>Now you can create an annotated dependency once, like this:</p> <pre><code>CurrentUser = Annotated[User, Depends(get_current_user)]\n</code></pre> <p>And then you can reuse this <code>Annotated</code> dependency:</p> <pre><code>CurrentUser = Annotated[User, Depends(get_current_user)]\n\n\n@app.get(\"/items/\")\ndef read_items(user: CurrentUser):\n    ...\n\n\n@app.post(\"/items/\")\ndef create_item(user: CurrentUser, item: Item):\n    ...\n\n\n@app.get(\"/items/{item_id}\")\ndef read_item(user: CurrentUser, item_id: int):\n    ...\n\n\n@app.delete(\"/items/{item_id}\")\ndef delete_item(user: CurrentUser, item_id: int):\n    ...\n</code></pre> <p>...and <code>CurrentUser</code> has all the typing information as <code>User</code>, so your editor will work as expected (autocompletion and everything), and ReadyAPI will be able to understand the dependency defined in <code>Annotated</code>. \ud83d\ude0e</p> <p>Roughly all the docs have been rewritten to use <code>Annotated</code> as the main way to declare parameters and dependencies. All the examples in the docs now include a version with <code>Annotated</code> and a version without it, for each of the specific Python versions (when there are small differences/improvements in more recent versions). There were around 23K new lines added between docs, examples, and tests. \ud83d\ude80</p> <p>The key updated docs are:</p> <ul> <li>Python Types Intro:<ul> <li>Type Hints with Metadata Annotations.</li> </ul> </li> <li>Tutorial:<ul> <li>Query Parameters and String Validations - Additional validation<ul> <li>Advantages of <code>Annotated</code></li> </ul> </li> <li>Path Parameters and Numeric Validations - Order the parameters as you need, tricks<ul> <li>Better with <code>Annotated</code></li> </ul> </li> <li>Dependencies - First Steps - Share <code>Annotated</code> dependencies</li> </ul> </li> </ul> <p>Special thanks to @nzig for the core implementation and to @adriangb for the inspiration and idea with Xpresso! \ud83d\ude80</p>"},{"location":"release-notes/#features_16","title":"Features","text":"<ul> <li>\u2728Add support for PEP-593 <code>Annotated</code> for specifying dependencies and parameters. PR #4871 by @nzig.</li> </ul>"},{"location":"release-notes/#docs_37","title":"Docs","text":"<ul> <li>\ud83d\udcdd Tweak tip recommending <code>Annotated</code> in docs. PR #9270 by @khulnasoft.</li> <li>\ud83d\udcdd Update order of examples, latest Python version first, and simplify version tab names. PR #9269 by @khulnasoft.</li> <li>\ud83d\udcdd Update all docs to use <code>Annotated</code> as the main recommendation, with new examples and tests. PR #9268 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0941","title":"0.94.1","text":""},{"location":"release-notes/#fixes_18","title":"Fixes","text":"<ul> <li>\ud83c\udfa8 Fix types for lifespan, upgrade Starlette to 0.26.1. PR #9245 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0940","title":"0.94.0","text":""},{"location":"release-notes/#upgrades_16","title":"Upgrades","text":"<ul> <li>\u2b06 Upgrade python-multipart to support 0.0.6. PR #9212 by @musicinmybrain.</li> <li>\u2b06\ufe0f Upgrade Starlette version, support new <code>lifespan</code> with state. PR #9239 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_38","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update Sentry link in docs. PR #9218 by @smeubank.</li> </ul>"},{"location":"release-notes/#translations_38","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/history-design-future.md</code>. PR #5986 by @Xewus.</li> </ul>"},{"location":"release-notes/#internal_45","title":"Internal","text":"<ul> <li>\u2795 Add <code>pydantic</code> to PyPI classifiers. PR #5914 by @yezz123.</li> <li>\u2b06 Bump black from 22.10.0 to 23.1.0. PR #5953 by @dependabot[bot].</li> <li>\u2b06 Bump types-ujson from 5.6.0.0 to 5.7.0.1. PR #6027 by @dependabot[bot].</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.24.3 to 2.26.0. PR #6034 by @dependabot[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #5709 by @pre-commit-ci[bot].</li> </ul>"},{"location":"release-notes/#0930","title":"0.93.0","text":""},{"location":"release-notes/#features_17","title":"Features","text":"<ul> <li>\u2728 Add support for <code>lifespan</code> async context managers (superseding <code>startup</code> and <code>shutdown</code> events). Initial PR #2944 by @uSpike.</li> </ul> <p>Now, instead of using independent <code>startup</code> and <code>shutdown</code> events, you can define that logic in a single function with <code>yield</code> decorated with <code>@asynccontextmanager</code> (an async context manager).</p> <p>For example:</p> <pre><code>from contextlib import asynccontextmanager\n\nfrom readyapi import ReadyAPI\n\n\ndef fake_answer_to_everything_ml_model(x: float):\n    return x * 42\n\n\nml_models = {}\n\n\n@asynccontextmanager\nasync def lifespan(app: ReadyAPI):\n    # Load the ML model\n    ml_models[\"answer_to_everything\"] = fake_answer_to_everything_ml_model\n    yield\n    # Clean up the ML models and release the resources\n    ml_models.clear()\n\n\napp = ReadyAPI(lifespan=lifespan)\n\n\n@app.get(\"/predict\")\nasync def predict(x: float):\n    result = ml_models[\"answer_to_everything\"](x)\n    return {\"result\": result}\n</code></pre> <p>Note: This is the recommended way going forward, instead of using <code>startup</code> and <code>shutdown</code> events.</p> <p>Read more about it in the new docs: Advanced User Guide: Lifespan Events.</p>"},{"location":"release-notes/#docs_39","title":"Docs","text":"<ul> <li>\u270f Fix formatting in <code>docs/en/docs/tutorial/metadata.md</code> for <code>ReDoc</code>. PR #6005 by @eykamp.</li> </ul>"},{"location":"release-notes/#translations_39","title":"Translations","text":"<ul> <li>\ud83c\udf10 Tamil translations - initial setup. PR #5564 by @gusty1g.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/advanced/path-operation-advanced-configuration.md</code>. PR #9221 by @axel584.</li> <li>\ud83c\udf10 Add French translation for <code>docs/tutorial/debugging.md</code>. PR #9175 by @frabc.</li> <li>\ud83c\udf10 Initiate Armenian translation setup. PR #5844 by @har8.</li> <li>\ud83c\udf10 Add French translation for <code>deployment/manually.md</code>. PR #3693 by @rjNemo.</li> </ul>"},{"location":"release-notes/#internal_46","title":"Internal","text":"<ul> <li>\ud83d\udc77 Update translation bot messages. PR #9206 by @khulnasoft.</li> <li>\ud83d\udc77 Update translations bot to use Discussions, and notify when a PR is done. PR #9183 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors-badges. PR #9182 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #9181 by @github-actions[bot].</li> <li>\ud83d\udd0a Log GraphQL errors in ReadyAPI People, because it returns 200, with a payload with an error. PR #9171 by @khulnasoft.</li> <li>\ud83d\udc9a Fix/workaround GitHub Actions in Docker with git for ReadyAPI People. PR #9169 by @khulnasoft.</li> <li>\u267b\ufe0f Refactor ReadyAPI Experts to use only discussions now that questions are migrated. PR #9165 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade analytics. PR #6025 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade and re-enable installing Cligenius-CLI. PR #6008 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0920","title":"0.92.0","text":"<p>\ud83d\udea8 This is a security fix. Please upgrade as soon as possible.</p>"},{"location":"release-notes/#upgrades_17","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette to 0.25.0. PR #5996 by @khulnasoft.<ul> <li>This solves a vulnerability that could allow denial of service attacks by using many small multipart fields/files (parts), consuming high CPU and memory.</li> <li>Only applications using forms (e.g. file uploads) could be affected.</li> <li>For most cases, upgrading won't have any breaking changes.</li> </ul> </li> </ul>"},{"location":"release-notes/#0910","title":"0.91.0","text":""},{"location":"release-notes/#upgrades_18","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette version to <code>0.24.0</code> and refactor internals for compatibility. PR #5985 by @khulnasoft.<ul> <li>This can solve nuanced errors when using middlewares. Before Starlette <code>0.24.0</code>, a new instance of each middleware class would be created when a new middleware was added. That normally was not a problem, unless the middleware class expected to be created only once, with only one instance, that happened in some cases. This upgrade would solve those cases (thanks @adriangb! Starlette PR #2017). Now the middleware class instances are created once, right before the first request (the first time the app is called).</li> <li>If you depended on that previous behavior, you might need to update your code. As always, make sure your tests pass before merging the upgrade.</li> </ul> </li> </ul>"},{"location":"release-notes/#0901","title":"0.90.1","text":""},{"location":"release-notes/#upgrades_19","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette range to allow 0.23.1. PR #5980 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_40","title":"Docs","text":"<ul> <li>\u270f Tweak wording to clarify <code>docs/en/docs/project-generation.md</code>. PR #5930 by @chandra-deb.</li> <li>\u270f Update Pydantic GitHub URLs. PR #5952 by @yezz123.</li> <li>\ud83d\udcdd Add opinion from Cisco. PR #5981 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_40","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/cookie-params.md</code>. PR #5890 by @bnzone.</li> </ul>"},{"location":"release-notes/#internal_47","title":"Internal","text":"<ul> <li>\u270f Update <code>zip-docs.sh</code> internal script, remove extra space. PR #5931 by @JuanPerdomo00.</li> </ul>"},{"location":"release-notes/#0900","title":"0.90.0","text":""},{"location":"release-notes/#upgrades_20","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Bump Starlette from 0.22.0 to 0.23.0. Initial PR #5739 by @Kludex.</li> </ul>"},{"location":"release-notes/#docs_41","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add article \"Tortoise ORM / ReadyAPI \u200b\u6574\u5408\u200b\u5feb\u901f\u200b\u7b46\u8a18\u200b\" to External Links. PR #5496 by @Leon0824.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #5954 by @github-actions[bot].</li> <li>\ud83d\udcdd Micro-tweak help docs. PR #5960 by @khulnasoft.</li> <li>\ud83d\udd27 Update new issue chooser to direct to GitHub Discussions. PR #5948 by @khulnasoft.</li> <li>\ud83d\udcdd Recommend GitHub Discussions for questions. PR #5944 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_41","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/body-fields.md</code>. PR #5898 by @simatheone.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/help-readyapi.md</code>. PR #5970 by @khulnasoft.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/static-files.md</code>. PR #5858 by @batlopes.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/encoder.md</code>. PR #5525 by @felipebpl.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/contributing.md</code>. PR #5870 by @Xewus.</li> </ul>"},{"location":"release-notes/#internal_48","title":"Internal","text":"<ul> <li>\u2b06\ufe0f Upgrade Ubuntu version for docs workflow. PR #5971 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors badges. PR #5943 by @khulnasoft.</li> <li>\u2728 Compute ReadyAPI Experts including GitHub Discussions. PR #5941 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade isort and update pre-commit. PR #5940 by @khulnasoft.</li> <li>\ud83d\udd27 Add template for questions in Discussions. PR #5920 by @khulnasoft.</li> <li>\ud83d\udd27 Update Sponsor Budget Insight to Powens. PR #5916 by @khulnasoft.</li> <li>\ud83d\udd27 Update GitHub Sponsors badge data. PR #5915 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0891","title":"0.89.1","text":""},{"location":"release-notes/#fixes_19","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Ignore Response classes on return annotation. PR #5855 by @Kludex. See the new docs in the PR below.</li> </ul>"},{"location":"release-notes/#docs_42","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update docs and examples for Response Model with Return Type Annotations, and update runtime error. PR #5873 by @khulnasoft. New docs at Response Model - Return Type: Other Return Type Annotations.</li> <li>\ud83d\udcdd Add External Link: ReadyAPI lambda container: serverless simplified. PR #5784 by @rafrasenberg.</li> </ul>"},{"location":"release-notes/#translations_42","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Turkish translation for <code>docs/tr/docs/tutorial/first_steps.md</code>. PR #5691 by @Kadermiyanyedi.</li> </ul>"},{"location":"release-notes/#0890","title":"0.89.0","text":""},{"location":"release-notes/#features_18","title":"Features","text":"<ul> <li>\u2728 Add support for function return type annotations to declare the <code>response_model</code>. Initial PR #1436 by @uriyyo.</li> </ul> <p>Now you can declare the return type / <code>response_model</code> in the function return type annotation:</p> <pre><code>from readyapi import ReadyAPI\nfrom pydantic import BaseModel\n\napp = ReadyAPI()\n\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n\n@app.get(\"/items/\")\nasync def read_items() -&gt; list[Item]:\n    return [\n        Item(name=\"Portal Gun\", price=42.0),\n        Item(name=\"Plumbus\", price=32.0),\n    ]\n</code></pre> <p>ReadyAPI will use the return type annotation to perform:</p> <ul> <li>Data validation</li> <li>Automatic documentation<ul> <li>It could power automatic client generators</li> </ul> </li> <li>Data filtering</li> </ul> <p>Before this version it was only supported via the <code>response_model</code> parameter.</p> <p>Read more about it in the new docs: Response Model - Return Type.</p>"},{"location":"release-notes/#docs_43","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add External Link: Authorization on ReadyAPI with Casbin. PR #5712 by @Xhy-5000.</li> <li>\u270f Fix typo in <code>docs/en/docs/async.md</code>. PR #5785 by @Kingdageek.</li> <li>\u270f Fix typo in <code>docs/en/docs/deployment/concepts.md</code>. PR #5824 by @kelbyfaessler.</li> </ul>"},{"location":"release-notes/#translations_43","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/readyapi-people.md</code>. PR #5577 by @Xewus.</li> <li>\ud83c\udf10 Fix typo in Chinese translation for <code>docs/zh/docs/benchmarks.md</code>. PR #4269 by @15027668g.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/tutorial/cors.md</code>. PR #3764 by @NinaHwang.</li> </ul>"},{"location":"release-notes/#internal_49","title":"Internal","text":"<ul> <li>\u2b06 Update coverage[toml] requirement from &lt;7.0,&gt;=6.5.0 to &gt;=6.5.0,&lt;8.0. PR #5801 by @dependabot[bot].</li> <li>\u2b06 Update uvicorn[standard] requirement from &lt;0.19.0,&gt;=0.12.0 to &gt;=0.12.0,&lt;0.21.0 for development. PR #5795 by @dependabot[bot].</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.24.2 to 2.24.3. PR #5842 by @dependabot[bot].</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #5825 by @github-actions[bot].</li> <li>\u2b06 Bump types-ujson from 5.5.0 to 5.6.0.0. PR #5735 by @dependabot[bot].</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.5.2 to 1.6.4. PR #5750 by @dependabot[bot].</li> <li>\ud83d\udc77 Add GitHub Action gate/check. PR #5492 by @webknjaz.</li> <li>\ud83d\udd27 Update sponsors, add Svix. PR #5848 by @khulnasoft.</li> <li>\ud83d\udd27 Remove Doist sponsor. PR #5847 by @khulnasoft.</li> <li>\u2b06 Update sqlalchemy requirement from &lt;=1.4.41,&gt;=1.3.18 to &gt;=1.3.18,&lt;1.4.43. PR #5540 by @dependabot[bot].</li> <li>\u2b06 Bump nwtgck/actions-netlify from 1.2.4 to 2.0.0. PR #5757 by @dependabot[bot].</li> <li>\ud83d\udc77 Refactor CI artifact upload/download for docs previews. PR #5793 by @khulnasoft.</li> <li>\u2b06 Bump pypa/gh-action-pypi-publish from 1.5.1 to 1.5.2. PR #5714 by @dependabot[bot].</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #5722 by @github-actions[bot].</li> <li>\ud83d\udd27 Update sponsors, disable course bundle. PR #5713 by @khulnasoft.</li> <li>\u2b06 Update cligenius[all] requirement from &lt;0.7.0,&gt;=0.6.1 to &gt;=0.6.1,&lt;0.8.0. PR #5639 by @dependabot[bot].</li> </ul>"},{"location":"release-notes/#0880","title":"0.88.0","text":""},{"location":"release-notes/#upgrades_21","title":"Upgrades","text":"<ul> <li>\u2b06 Bump Starlette to version <code>0.22.0</code> to fix bad encoding for query parameters in new <code>TestClient</code>. PR #5659 by @azogue.</li> </ul>"},{"location":"release-notes/#docs_44","title":"Docs","text":"<ul> <li>\u270f\ufe0f Fix typo in docs for <code>docs/en/docs/advanced/middleware.md</code>. PR #5376 by @rifatrakib.</li> </ul>"},{"location":"release-notes/#translations_44","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/deployment/docker.md</code>. PR #5663 by @ayr-ton.</li> </ul>"},{"location":"release-notes/#internal_50","title":"Internal","text":"<ul> <li>\ud83d\udc77 Tweak build-docs to improve CI performance. PR #5699 by @khulnasoft.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #5566 by @pre-commit-ci[bot].</li> <li>\u2b06\ufe0f Upgrade Ruff. PR #5698 by @khulnasoft.</li> <li>\ud83d\udc77 Remove pip cache for Smokeshow as it depends on a requirements.txt. PR #5700 by @khulnasoft.</li> <li>\ud83d\udc9a Fix pip cache for Smokeshow. PR #5697 by @khulnasoft.</li> <li>\ud83d\udc77 Fix and tweak CI cache handling. PR #5696 by @khulnasoft.</li> <li>\ud83d\udc77 Update <code>setup-python</code> action in tests to use new caching feature. PR #5680 by @madkinsz.</li> <li>\u2b06 Bump black from 22.8.0 to 22.10.0. PR #5569 by @dependabot[bot].</li> </ul>"},{"location":"release-notes/#0870","title":"0.87.0","text":"<p>Highlights of this release:</p> <ul> <li>Upgraded Starlette<ul> <li>Now the <code>TestClient</code> is based on HTTPX instead of Requests. \ud83d\ude80</li> <li>There are some possible breaking changes in the <code>TestClient</code> usage, but @Kludex built bump-testclient to help you automatize migrating your tests. Make sure you are using Git and that you can undo any unnecessary changes (false positive changes, etc) before using <code>bump-testclient</code>.</li> </ul> </li> <li>New WebSocketException (and docs), re-exported from Starlette.</li> <li>Upgraded and relaxed dependencies for package extras <code>all</code> (including new Uvicorn version), when you install <code>\"readyapi[all]\"</code>.</li> <li>New docs about how to Help Maintain ReadyAPI.</li> </ul>"},{"location":"release-notes/#features_19","title":"Features","text":"<ul> <li>\u2b06\ufe0f Upgrade and relax dependencies for extras \"all\". PR #5634 by @khulnasoft.</li> <li>\u2728 Re-export Starlette's <code>WebSocketException</code> and add it to docs. PR #5629 by @khulnasoft.</li> <li>\ud83d\udcdd Update references to Requests for tests to HTTPX, and add HTTPX to extras. PR #5628 by @khulnasoft.</li> <li>\u2b06 Upgrade Starlette to <code>0.21.0</code>, including the new <code>TestClient</code> based on HTTPX. PR #5471 by @pawelrubin.</li> </ul>"},{"location":"release-notes/#docs_45","title":"Docs","text":"<ul> <li>\u270f\ufe0f Tweak Help ReadyAPI from PR review after merging. PR #5633 by @khulnasoft.</li> <li>\u270f\ufe0f  Clarify docs on CORS. PR #5627 by @paxcodes.</li> <li>\ud83d\udcdd Update Help ReadyAPI: Help Maintain ReadyAPI. PR #5632 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_45","title":"Translations","text":"<ul> <li>\ud83c\udf10 Fix highlight lines for Japanese translation for <code>docs/tutorial/query-params.md</code>. PR #2969 by @ftnext.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/advanced/additional-status-code.md</code>. PR #5477 by @axel584.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/request-forms-and-files.md</code>. PR #5579 by @batlopes.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/advanced/websockets.md</code>. PR #4983 by @xryuseix.</li> </ul>"},{"location":"release-notes/#internal_51","title":"Internal","text":"<ul> <li>\u2728 Use Ruff for linting. PR #5630 by @khulnasoft.</li> <li>\ud83d\udee0 Add Arabic issue number to Notify Translations GitHub Action. PR #5610 by @khulnasoft.</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.24.1 to 2.24.2. PR #5609 by @dependabot[bot].</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.24.0 to 2.24.1. PR #5603 by @dependabot[bot].</li> <li>\ud83d\udcdd Update coverage badge to use Samuel Colvin's Smokeshow. PR #5585 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0860","title":"0.86.0","text":""},{"location":"release-notes/#features_20","title":"Features","text":"<ul> <li>\u2b06 Add Python 3.11 to the officially supported versions. PR #5587 by @khulnasoft.</li> <li>\u2705 Enable tests for Python 3.11. PR #4881 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#fixes_20","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Close FormData (uploaded files) after the request is done. PR #5465 by @adriangb.</li> </ul>"},{"location":"release-notes/#docs_46","title":"Docs","text":"<ul> <li>\u270f Fix typo in <code>docs/en/docs/tutorial/security/oauth2-jwt.md</code>. PR #5584 by @vivekashok1221.</li> </ul>"},{"location":"release-notes/#translations_46","title":"Translations","text":"<ul> <li>\ud83c\udf10 Update wording in Chinese translation for <code>docs/zh/docs/python-types.md</code>. PR #5416 by @supercaizehua.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/deployment/index.md</code>. PR #5336 by @Xewus.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/tutorial/security/oauth2-jwt.md</code>. PR #3846 by @jaystone776.</li> </ul>"},{"location":"release-notes/#internal_52","title":"Internal","text":"<ul> <li>\ud83d\udc77 Update ReadyAPI People to exclude bots: pre-commit-ci, dependabot. PR #5586 by @khulnasoft.</li> <li>\ud83c\udfa8 Format OpenAPI JSON in <code>test_starlette_exception.py</code>. PR #5379 by @iudeen.</li> <li>\ud83d\udc77 Switch from Codecov to Smokeshow plus pytest-cov to pure coverage for internal tests. PR #5583 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #5571 by @github-actions[bot].</li> </ul>"},{"location":"release-notes/#0852","title":"0.85.2","text":""},{"location":"release-notes/#docs_47","title":"Docs","text":"<ul> <li>\u270f Fix grammar and add helpful links to dependencies in <code>docs/en/docs/async.md</code>. PR #5432 by @pamelafox.</li> <li>\u270f Fix broken link in <code>alternatives.md</code>. PR #5455 by @su-shubham.</li> <li>\u270f Fix typo in docs about contributing, for compatibility with <code>pip</code> in Zsh. PR #5523 by @zhangbo2012.</li> <li>\ud83d\udcdd Fix typo in docs with examples for Python 3.10 instead of 3.9. PR #5545 by @feliciss.</li> </ul>"},{"location":"release-notes/#translations_47","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/request-forms.md</code>. PR #4934 by @batlopes.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/dependencies/classes-as-dependencies.md</code>. PR #4971 by @Zssaer.</li> <li>\ud83c\udf10 Add French translation for <code>deployment/deta.md</code>. PR #3692 by @rjNemo.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/query-params-str-validations.md</code>. PR #5255 by @hjlarry.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/sql-databases.md</code>. PR #4999 by @Zssaer.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/advanced/wsgi.md</code>. PR #4505 by @ASpathfinder.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/body-multiple-params.md</code>. PR #4111 by @lbmendes.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/path-params-numeric-validations.md</code>. PR #4099 by @lbmendes.</li> <li>\ud83c\udf10 Add French translation for <code>deployment/versions.md</code>. PR #3690 by @rjNemo.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/help-readyapi.md</code>. PR #2233 by @JulianMaurin.</li> <li>\ud83c\udf10 Fix typo in Chinese translation for <code>docs/zh/docs/tutorial/security/first-steps.md</code>. PR #5530 by @yuki1sntSnow.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/response-status-code.md</code>. PR #4922 by @batlopes.</li> <li>\ud83d\udd27 Add config for Tamil translations. PR #5563 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_53","title":"Internal","text":"<ul> <li>\u2b06 Bump internal dependency mypy from 0.971 to 0.982. PR #5541 by @dependabot[bot].</li> <li>\u2b06 Bump nwtgck/actions-netlify from 1.2.3 to 1.2.4. PR #5507 by @dependabot[bot].</li> <li>\u2b06 Bump internal dependency types-ujson from 5.4.0 to 5.5.0. PR #5537 by @dependabot[bot].</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.23.0 to 2.24.0. PR #5508 by @dependabot[bot].</li> <li>\u2b06 Update internal dependency pytest-cov requirement from &lt;4.0.0,&gt;=2.12.0 to &gt;=2.12.0,&lt;5.0.0. PR #5539 by @dependabot[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #5536 by @pre-commit-ci[bot].</li> <li>\ud83d\udc1b Fix internal Trio test warnings. PR #5547 by @samuelcolvin.</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #5408 by @pre-commit-ci[bot].</li> <li>\u2b06\ufe0f Upgrade Cligenius to include Rich in scripts for docs. PR #5502 by @khulnasoft.</li> <li>\ud83d\udc1b Fix calling <code>mkdocs</code> for languages as a subprocess to fix/enable MkDocs Material search plugin. PR #5501 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0851","title":"0.85.1","text":""},{"location":"release-notes/#fixes_21","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix support for strings in OpenAPI status codes: <code>default</code>, <code>1XX</code>, <code>2XX</code>, <code>3XX</code>, <code>4XX</code>, <code>5XX</code>. PR #5187 by @JarroVGIT.</li> </ul>"},{"location":"release-notes/#docs_48","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add WayScript x ReadyAPI Tutorial to External Links section. PR #5407 by @moneeka.</li> </ul>"},{"location":"release-notes/#internal_54","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #5447 by @github-actions[bot].</li> <li>\ud83d\udd27 Disable Material for MkDocs search plugin. PR #5495 by @khulnasoft.</li> <li>\ud83d\udd07 Ignore Trio warning in tests for CI. PR #5483 by @samuelcolvin.</li> </ul>"},{"location":"release-notes/#0850","title":"0.85.0","text":""},{"location":"release-notes/#features_21","title":"Features","text":"<ul> <li>\u2b06 Upgrade version required of Starlette from <code>0.19.1</code> to <code>0.20.4</code>. Initial PR #4820 by @Kludex.<ul> <li>This includes several bug fixes in Starlette.</li> </ul> </li> <li>\u2b06\ufe0f Upgrade Uvicorn max version in public extras: all. From <code>&gt;=0.12.0,&lt;0.18.0</code> to <code>&gt;=0.12.0,&lt;0.19.0</code>. PR #5401 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_55","title":"Internal","text":"<ul> <li>\u2b06\ufe0f Upgrade dependencies for doc and dev internal extras: Cligenius, Uvicorn. PR #5400 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade test dependencies: Black, HTTPX, databases, types-ujson. PR #5399 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade mypy and tweak internal type annotations. PR #5398 by @khulnasoft.</li> <li>\ud83d\udd27 Update test dependencies, upgrade Pytest, move dependencies from dev to test. PR #5396 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0840","title":"0.84.0","text":""},{"location":"release-notes/#breaking-changes_3","title":"Breaking Changes","text":"<p>This version of ReadyAPI drops support for Python 3.6. \ud83d\udd25 Please upgrade to a supported version of Python (3.7 or above), Python 3.6 reached the end-of-life a long time ago. \ud83d\ude05\u2620</p> <ul> <li>\ud83d\udd27 Update package metadata, drop support for Python 3.6, move build internals from Flit to Hatch. PR #5240 by @ofek.</li> </ul>"},{"location":"release-notes/#0830","title":"0.83.0","text":"<p>\ud83d\udea8 This is probably the last release (or one of the last releases) to support Python 3.6. \ud83d\udd25</p> <p>Python 3.6 reached the end-of-life and is no longer supported by Python since around a year ago.</p> <p>You hopefully updated to a supported version of Python a while ago. If you haven't, you really should.</p>"},{"location":"release-notes/#features_22","title":"Features","text":"<ul> <li>\u2728 Add support in <code>jsonable_encoder</code> for include and exclude with dataclasses. PR #4923 by @DCsunset.</li> </ul>"},{"location":"release-notes/#fixes_22","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix <code>RuntimeError</code> raised when <code>HTTPException</code> has a status code with no content. PR #5365 by @iudeen.</li> <li>\ud83d\udc1b Fix empty reponse body when default <code>status_code</code> is empty but the a <code>Response</code> parameter with <code>response.status_code</code> is set. PR #5360 by @tmeckel.</li> </ul>"},{"location":"release-notes/#docs_49","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update <code>SECURITY.md</code>. PR #5377 by @Kludex.</li> </ul>"},{"location":"release-notes/#internal_56","title":"Internal","text":"<ul> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #5352 by @pre-commit-ci[bot].</li> </ul>"},{"location":"release-notes/#0820","title":"0.82.0","text":"<p>\ud83d\udea8 This is probably the last release (or one of the last releases) to support Python 3.6. \ud83d\udd25</p> <p>Python 3.6 reached the end-of-life and is no longer supported by Python since around a year ago.</p> <p>You hopefully updated to a supported version of Python a while ago. If you haven't, you really should.</p>"},{"location":"release-notes/#features_23","title":"Features","text":"<ul> <li>\u2728 Export <code>WebSocketState</code> in <code>readyapi.websockets</code>. PR #4376 by @matiuszka.</li> <li>\u2728 Support Python internal description on Pydantic model's docstring. PR #3032 by @Kludex.</li> <li>\u2728 Update <code>ORJSONResponse</code> to support non <code>str</code> keys and serializing Numpy arrays. PR #3892 by @baby5.</li> </ul>"},{"location":"release-notes/#fixes_23","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Allow exit code for dependencies with <code>yield</code> to always execute, by removing capacity limiter for them, to e.g. allow closing DB connections without deadlocks. PR #5122 by @adriangb.</li> <li>\ud83d\udc1b Fix ReadyAPI People GitHub Action: set HTTPX timeout for GraphQL query request. PR #5222 by @iudeen.</li> <li>\ud83d\udc1b Make sure a parameter defined as required is kept required in OpenAPI even if defined as optional in another dependency. PR #4319 by @cd17822.</li> <li>\ud83d\udc1b Fix support for path parameters in WebSockets. PR #3879 by @davidbrochart.</li> </ul>"},{"location":"release-notes/#docs_50","title":"Docs","text":"<ul> <li>\u270f Update Hypercorn link, now pointing to GitHub. PR #5346 by @baconfield.</li> <li>\u270f Tweak wording in <code>docs/en/docs/advanced/dataclasses.md</code>. PR #3698 by @pfackeldey.</li> <li>\ud83d\udcdd Add note about Python 3.10 <code>X | Y</code> operator in explanation about Response Models. PR #5307 by @MendyLanda.</li> <li>\ud83d\udcdd Add link to New Relic article: \"How to monitor ReadyAPI application performance using Python agent\". PR #5260 by @sjyothi54.</li> <li>\ud83d\udcdd Update docs for <code>ORJSONResponse</code> with details about improving performance. PR #2615 by @falkben.</li> <li>\ud83d\udcdd Add docs for creating a custom Response class. PR #5331 by @khulnasoft.</li> <li>\ud83d\udcdd Add tip about using alias for form data fields. PR #5329 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_48","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/features.md</code>. PR #5315 by @Xewus.</li> <li>\ud83c\udf10 Update Chinese translation for <code>docs/zh/docs/tutorial/request-files.md</code>. PR #4529 by @ASpathfinder.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/zh/docs/tutorial/encoder.md</code>. PR #4969 by @Zssaer.</li> <li>\ud83c\udf10 Fix MkDocs file line for Portuguese translation of <code>background-task.md</code>. PR #5242 by @ComicShrimp.</li> </ul>"},{"location":"release-notes/#internal_57","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #5347 by @github-actions[bot].</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.22.0 to 2.23.0. PR #5321 by @dependabot[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #5318 by @pre-commit-ci[bot].</li> <li>\u270f Fix a small code highlight line error. PR #5256 by @hjlarry.</li> <li>\u267b Internal small refactor, move <code>operation_id</code> parameter position in delete method for consistency with the code. PR #4474 by @hiel.</li> <li>\ud83d\udd27 Update sponsors, disable ImgWhale. PR #5338 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0810","title":"0.81.0","text":""},{"location":"release-notes/#features_24","title":"Features","text":"<ul> <li>\u2728 Add ReDoc <code>&lt;noscript&gt;</code> warning when JS is disabled. PR #5074 by @evroon.</li> <li>\u2728 Add support for <code>FrozenSet</code> in parameters (e.g. query). PR #2938 by @juntatalor.</li> <li>\u2728 Allow custom middlewares to raise <code>HTTPException</code>s and propagate them. PR #2036 by @ghandic.</li> <li>\u2728 Preserve <code>json.JSONDecodeError</code> information when handling invalid JSON in request body, to support custom exception handlers that use its information. PR #4057 by @UKnowWhoIm.</li> </ul>"},{"location":"release-notes/#fixes_24","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix <code>jsonable_encoder</code> for dataclasses with pydantic-compatible fields. PR #3607 by @himbeles.</li> <li>\ud83d\udc1b Fix support for extending <code>openapi_extras</code> with parameter lists. PR #4267 by @orilevari.</li> </ul>"},{"location":"release-notes/#docs_51","title":"Docs","text":"<ul> <li>\u270f Fix a simple typo in <code>docs/en/docs/python-types.md</code>. PR #5193 by @GlitchingCore.</li> <li>\u270f Fix typos in <code>tests/test_schema_extra_examples.py</code>. PR #5126 by @supraaxdd.</li> <li>\u270f Fix typos in <code>docs/en/docs/tutorial/path-params-numeric-validations.md</code>. PR #5142 by @invisibleroads.</li> <li>\ud83d\udcdd Add step about upgrading pip in the venv to avoid errors when installing dependencies <code>docs/en/docs/contributing.md</code>. PR #5181 by @edisnake.</li> <li>\u270f Reword and clarify text in tutorial <code>docs/en/docs/tutorial/body-nested-models.md</code>. PR #5169 by @papb.</li> <li>\u270f Fix minor typo in <code>docs/en/docs/features.md</code>. PR #5206 by @OtherBarry.</li> <li>\u270f Fix minor typos in <code>docs/en/docs/async.md</code>. PR #5125 by @Ksenofanex.</li> <li>\ud83d\udcdd Add external link to docs: \"Readyapi, Docker(Docker compose) and Postgres\". PR #5033 by @krishnardt.</li> <li>\ud83d\udcdd Simplify example for docs for Additional Responses, remove unnecessary <code>else</code>. PR #4693 by @adriangb.</li> <li>\ud83d\udcdd Update docs, compare enums with identity instead of equality. PR #4905 by @MicaelJarniac.</li> <li>\u270f Fix typo in <code>docs/en/docs/python-types.md</code>. PR #4886 by @MicaelJarniac.</li> <li>\ud83c\udfa8 Fix syntax highlighting in docs for OpenAPI Callbacks. PR #4368 by @xncbf.</li> <li>\u270f Reword confusing sentence in docs file <code>typo-fix-path-params-numeric-validations.md</code>. PR #3219 by @ccrenfroe.</li> <li>\ud83d\udcdd Update docs for handling HTTP Basic Auth with <code>secrets.compare_digest()</code> to account for non-ASCII characters. PR #3536 by @lewoudar.</li> <li>\ud83d\udcdd Update docs for testing, fix examples with relative imports. PR #5302 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_49","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/index.md</code>. PR #5289 by @impocode.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/deployment/versions.md</code>. PR #4985 by @emp7yhead.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/header-params.md</code>. PR #4921 by @batlopes.</li> <li>\ud83c\udf10 Update <code>ko/mkdocs.yml</code> for a missing link. PR #5020 by @dalinaum.</li> </ul>"},{"location":"release-notes/#internal_58","title":"Internal","text":"<ul> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.21.1 to 2.22.0. PR #5258 by @dependabot[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #5196 by @pre-commit-ci[bot].</li> <li>\ud83d\udd25 Delete duplicated tests in <code>tests/test_tutorial/test_sql_databases/test_sql_databases.py</code>. PR #5040 by @raccoonyy.</li> <li>\u267b Simplify internal RegEx in <code>readyapi/utils.py</code>. PR #5057 by @pylounge.</li> <li>\ud83d\udd27 Fix Type hint of <code>auto_error</code> which does not need to be <code>Optional[bool]</code>. PR #4933 by @DavidKimDY.</li> <li>\ud83d\udd27 Update mypy config, use <code>strict = true</code> instead of manual configs. PR #4605 by @michaeloliverx.</li> <li>\u267b Change a <code>dict()</code> for <code>{}</code> in <code>readyapi/utils.py</code>. PR #3138 by @ShahriyarR.</li> <li>\u267b Move internal variable for errors in <code>jsonable_encoder</code> to put related code closer. PR #4560 by @GuilleQP.</li> <li>\u267b Simplify conditional assignment in <code>readyapi/dependencies/utils.py</code>. PR #4597 by @cikay.</li> <li>\u2b06 Upgrade version pin accepted for Flake8, for internal code, to <code>flake8 &gt;=3.8.3,&lt;6.0.0</code>. PR #4097 by @jamescurtin.</li> <li>\ud83c\udf71 Update Jina banner, fix typo. PR #5301 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0800","title":"0.80.0","text":""},{"location":"release-notes/#breaking-changes-fixes","title":"Breaking Changes - Fixes","text":"<ul> <li>\ud83d\udc1b Fix <code>response_model</code> not invalidating <code>None</code>. PR #2725 by @hukkin.</li> </ul> <p>If you are using <code>response_model</code> with some type that doesn't include <code>None</code> but the function is returning <code>None</code>, it will now raise an internal server error, because you are returning invalid data that violates the contract in <code>response_model</code>. Before this release it would allow breaking that contract returning <code>None</code>.</p> <p>For example, if you have an app like this:</p> <pre><code>from readyapi import ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    price: Optional[float] = None\n    owner_ids: Optional[List[int]] = None\n\napp = ReadyAPI()\n\n@app.get(\"/items/invalidnone\", response_model=Item)\ndef get_invalid_none():\n    return None\n</code></pre> <p>...calling the path <code>/items/invalidnone</code> will raise an error, because <code>None</code> is not a valid type for the <code>response_model</code> declared with <code>Item</code>.</p> <p>You could also be implicitly returning <code>None</code> without realizing, for example:</p> <pre><code>from readyapi import ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    price: Optional[float] = None\n    owner_ids: Optional[List[int]] = None\n\napp = ReadyAPI()\n\n@app.get(\"/items/invalidnone\", response_model=Item)\ndef get_invalid_none():\n    if flag:\n        return {\"name\": \"foo\"}\n    # if flag is False, at this point the function will implicitly return None\n</code></pre> <p>If you have path operations using <code>response_model</code> that need to be allowed to return <code>None</code>, make it explicit in <code>response_model</code> using <code>Union[Something, None]</code>:</p> <pre><code>from typing import Union\n\nfrom readyapi import ReadyAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    price: Optional[float] = None\n    owner_ids: Optional[List[int]] = None\n\napp = ReadyAPI()\n\n@app.get(\"/items/invalidnone\", response_model=Union[Item, None])\ndef get_invalid_none():\n    return None\n</code></pre> <p>This way the data will be correctly validated, you won't have an internal server error, and the documentation will also reflect that this path operation could return <code>None</code> (or <code>null</code> in JSON).</p>"},{"location":"release-notes/#fixes_25","title":"Fixes","text":"<ul> <li>\u2b06 Upgrade Swagger UI copy of <code>oauth2-redirect.html</code> to include fixes for flavors of authorization code flows in Swagger UI. PR #3439 initial PR by @koonpeng.</li> <li>\u267b Strip empty whitespace from description extracted from docstrings. PR #2821 by @and-semakin.</li> <li>\ud83d\udc1b Fix cached dependencies when using a dependency in <code>Security()</code> and other places (e.g. <code>Depends()</code>) with different OAuth2 scopes. PR #2945 by @laggardkernel.</li> <li>\ud83c\udfa8 Update type annotations for <code>response_model</code>, allow things like <code>Union[str, None]</code>. PR #5294 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_50","title":"Translations","text":"<ul> <li>\ud83c\udf10 Fix typos in German translation for <code>docs/de/docs/features.md</code>. PR #4533 by @0xflotus.</li> <li>\ud83c\udf10 Add missing navigator for <code>encoder.md</code> in Korean translation. PR #5238 by @joonas-yoon.</li> <li>(Empty PR merge by accident) #4913.</li> </ul>"},{"location":"release-notes/#0791","title":"0.79.1","text":""},{"location":"release-notes/#fixes_26","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix <code>jsonable_encoder</code> using <code>include</code> and <code>exclude</code> parameters for non-Pydantic objects. PR #2606 by @xaviml.</li> <li>\ud83d\udc1b Fix edge case with repeated aliases names not shown in OpenAPI. PR #2351 by @klaa97.</li> <li>\ud83d\udcdd Add misc dependency installs to tutorial docs. PR #2126 by @TeoZosa.</li> </ul>"},{"location":"release-notes/#docs_52","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add note giving credit for illustrations to Ketrina Thompson. PR #5284 by @khulnasoft.</li> <li>\u270f Fix typo in <code>python-types.md</code>. PR #5116 by @Kludex.</li> <li>\u270f Fix typo in <code>docs/en/docs/python-types.md</code>. PR #5007 by @atiabbz.</li> <li>\ud83d\udcdd Remove unneeded Django/Flask references from async topic intro. PR #5280 by @carltongibson.</li> <li>\u2728 Add illustrations for Concurrent burgers and Parallel burgers. PR #5277 by @khulnasoft. Updated docs at: Concurrency and Burgers.</li> </ul>"},{"location":"release-notes/#translations_51","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/query-params.md</code>. PR #4775 by @batlopes.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/security/first-steps.md</code>. PR #4954 by @FLAIR7.</li> <li>\ud83c\udf10 Add translation for <code>docs/zh/docs/advanced/response-cookies.md</code>. PR #4638 by @zhangbo2012.</li> <li>\ud83c\udf10  Add French translation for <code>docs/fr/docs/deployment/index.md</code>. PR #3689 by @rjNemo.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>tutorial/handling-errors.md</code>. PR #4769 by @frnsimoes.</li> <li>\ud83c\udf10 Add French translation for <code>docs/fr/docs/history-design-future.md</code>. PR #3451 by @rjNemo.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/ru/docs/tutorial/background-tasks.md</code>. PR #4854 by @AdmiralDesu.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/tutorial/security/first-steps.md</code>. PR #3841 by @jaystone776.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/advanced/nosql-databases.md</code>. PR #4205 by @sUeharaE4.</li> <li>\ud83c\udf10 Add Indonesian translation for <code>docs/id/docs/tutorial/index.md</code>. PR #4705 by @bas-baskara.</li> <li>\ud83c\udf10 Add Persian translation for <code>docs/fa/docs/index.md</code> and tweak right-to-left CSS. PR #2395 by @mohsen-mahmoodi.</li> </ul>"},{"location":"release-notes/#internal_59","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update Jina sponsorship. PR #5283 by @khulnasoft.</li> <li>\ud83d\udd27 Update Jina sponsorship. PR #5272 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, Striveworks badge. PR #5179 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0790","title":"0.79.0","text":""},{"location":"release-notes/#fixes-breaking-changes","title":"Fixes - Breaking Changes","text":"<ul> <li>\ud83d\udc1b Fix removing body from status codes that do not support it. PR #5145 by @khulnasoft.<ul> <li>Setting <code>status_code</code> to <code>204</code>, <code>304</code>, or any code below <code>200</code> (1xx) will remove the body from the response.</li> <li>This fixes an error in Uvicorn that otherwise would be thrown: <code>RuntimeError: Response content longer than Content-Length</code>.</li> <li>This removes <code>readyapi.openapi.constants.STATUS_CODES_WITH_NO_BODY</code>, it is replaced by a function in utils.</li> </ul> </li> </ul>"},{"location":"release-notes/#translations_52","title":"Translations","text":"<ul> <li>\ud83c\udf10 Start of Hebrew translation. PR #5050 by @itay-raveh.</li> <li>\ud83d\udd27 Add config for Swedish translations notification. PR #5147 by @khulnasoft.</li> <li>\ud83c\udf10 Start of Swedish translation. PR #5062 by @MrRawbin.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/advanced/index.md</code>. PR #5043 by @wakabame.</li> <li>\ud83c\udf10\ud83c\uddf5\ud83c\uddf1 Add Polish translation for <code>docs/pl/docs/tutorial/first-steps.md</code>. PR #5024 by @Valaraucoo.</li> </ul>"},{"location":"release-notes/#internal_60","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update translations notification for Hebrew. PR #5158 by @khulnasoft.</li> <li>\ud83d\udd27 Update Dependabot commit message. PR #5156 by @khulnasoft.</li> <li>\u2b06 Bump actions/upload-artifact from 2 to 3. PR #5148 by @dependabot[bot].</li> <li>\u2b06 Bump actions/cache from 2 to 3. PR #5149 by @dependabot[bot].</li> <li>\ud83d\udd27 Update sponsors badge configs. PR #5155 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #5154 by @khulnasoft.</li> <li>\ud83d\udd27 Update Jina sponsor badges. PR #5151 by @khulnasoft.</li> <li>\u2b06 Bump actions/checkout from 2 to 3. PR #5133 by @dependabot[bot].</li> <li>\u2b06 [pre-commit.ci] pre-commit autoupdate. PR #5030 by @pre-commit-ci[bot].</li> <li>\u2b06 Bump nwtgck/actions-netlify from 1.1.5 to 1.2.3. PR #5132 by @dependabot[bot].</li> <li>\u2b06 Bump codecov/codecov-action from 2 to 3. PR #5131 by @dependabot[bot].</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.9.0 to 2.21.1. PR #5130 by @dependabot[bot].</li> <li>\u2b06 Bump actions/setup-python from 2 to 4. PR #5129 by @dependabot[bot].</li> <li>\ud83d\udc77 Add Dependabot. PR #5128 by @khulnasoft.</li> <li>\u267b\ufe0f Move from <code>Optional[X]</code> to <code>Union[X, None]</code> for internal utils. PR #5124 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, remove Dropbase, add Doist. PR #5096 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, remove Classiq, add ImgWhale. PR #5079 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0780","title":"0.78.0","text":""},{"location":"release-notes/#features_25","title":"Features","text":"<ul> <li> <p>\u2728 Add support for omitting <code>...</code> as default value when declaring required parameters with:</p> </li> <li> <p><code>Path()</code></p> </li> <li><code>Query()</code></li> <li><code>Header()</code></li> <li><code>Cookie()</code></li> <li><code>Body()</code></li> <li><code>Form()</code></li> <li><code>File()</code></li> </ul> <p>New docs at Tutorial - Query Parameters and String Validations - Make it required. PR #4906 by @khulnasoft.</p> <p>Up to now, declaring a required parameter while adding additional validation or metadata needed using <code>...</code> (Ellipsis).</p> <p>For example:</p> <pre><code>from readyapi import Cookie, ReadyAPI, Header, Path, Query\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\ndef main(\n    item_id: int = Path(default=..., gt=0),\n    query: str = Query(default=..., max_length=10),\n    session: str = Cookie(default=..., min_length=3),\n    x_trace: str = Header(default=..., title=\"Tracing header\"),\n):\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>...all these parameters are required because the default value is <code>...</code> (Ellipsis).</p> <p>But now it's possible and supported to just omit the default value, as would be done with Pydantic fields, and the parameters would still be required.</p> <p>\u2728 For example, this is now supported:</p> <pre><code>from readyapi import Cookie, ReadyAPI, Header, Path, Query\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\ndef main(\n    item_id: int = Path(gt=0),\n    query: str = Query(max_length=10),\n    session: str = Cookie(min_length=3),\n    x_trace: str = Header(title=\"Tracing header\"),\n):\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>To declare parameters as optional (not required), you can set a default value as always, for example using <code>None</code>:</p> <pre><code>from typing import Union\nfrom readyapi import Cookie, ReadyAPI, Header, Path, Query\n\napp = ReadyAPI()\n\n\n@app.get(\"/items/{item_id}\")\ndef main(\n    item_id: int = Path(gt=0),\n    query: Union[str, None] = Query(default=None, max_length=10),\n    session: Union[str, None] = Cookie(default=None, min_length=3),\n    x_trace: Union[str, None] = Header(default=None, title=\"Tracing header\"),\n):\n    return {\"message\": \"Hello World\"}\n</code></pre>"},{"location":"release-notes/#docs_53","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add docs recommending <code>Union</code> over <code>Optional</code> and migrate source examples. New docs at Python Types Intro - Using <code>Union</code> or <code>Optional</code>. PR #4908 by @khulnasoft.</li> <li>\ud83c\udfa8 Fix default value as set in tutorial for Path Operations Advanced Configurations. PR #4899 by @khulnasoft.</li> <li>\ud83d\udcdd Add documentation for redefined path operations. PR #4864 by @madkinsz.</li> <li>\ud83d\udcdd Updates links for Celery documentation. PR #4736 by @sammyzord.</li> <li>\u270f Fix example code with sets in tutorial for body nested models. PR #3030 by @hitrust.</li> <li>\u270f Fix links to Pydantic docs. PR #4670 by @kinuax.</li> <li>\ud83d\udcdd Update docs about Swagger UI self-hosting with newer source links. PR #4813 by @Kastakin.</li> <li>\ud83d\udcdd Add link to external article: Building the Poll App From Django Tutorial With ReadyAPI And React. PR #4778 by @jbrocher.</li> <li>\ud83d\udcdd Add OpenAPI warning to \"Body - Fields\" docs with extra schema extensions. PR #4846 by @ml-evs.</li> </ul>"},{"location":"release-notes/#translations_53","title":"Translations","text":"<ul> <li>\ud83c\udf10 Fix code examples in Japanese translation for <code>docs/ja/docs/tutorial/testing.md</code>. PR #4623 by @hirotoKirimaru.</li> </ul>"},{"location":"release-notes/#internal_61","title":"Internal","text":"<ul> <li>\u267b Refactor dict value extraction to minimize key lookups <code>readyapi/utils.py</code>. PR #3139 by @ShahriyarR.</li> <li>\u2705 Add tests for required nonable parameters and body fields. PR #4907 by @khulnasoft.</li> <li>\ud83d\udc77 Fix installing Material for MkDocs Insiders in CI. PR #4897 by @khulnasoft.</li> <li>\ud83d\udc77 Add pre-commit CI instead of custom GitHub Action. PR #4896 by @khulnasoft.</li> <li>\ud83d\udc77 Add pre-commit GitHub Action workflow. PR #4895 by @khulnasoft.</li> <li>\ud83d\udcdd Add dark mode auto switch to docs based on OS preference. PR #4869 by @ComicShrimp.</li> <li>\ud83d\udd25 Remove un-used old pending tests, already covered in other places. PR #4891 by @khulnasoft.</li> <li>\ud83d\udd27 Add Python formatting hooks to pre-commit. PR #4890 by @khulnasoft.</li> <li>\ud83d\udd27 Add pre-commit with first config and first formatting pass. PR #4888 by @khulnasoft.</li> <li>\ud83d\udc77 Disable CI installing Material for MkDocs in forks. PR #4410 by @dolfinus.</li> </ul>"},{"location":"release-notes/#0771","title":"0.77.1","text":""},{"location":"release-notes/#upgrades_22","title":"Upgrades","text":"<ul> <li>\u2b06 Upgrade Starlette from 0.19.0 to 0.19.1. PR #4819 by @Kludex.</li> </ul>"},{"location":"release-notes/#docs_54","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add link to german article: REST-API Programmieren mittels Python und dem ReadyAPI Modul. PR #4624 by @fschuermeyer.</li> <li>\ud83d\udcdd Add external link: PyCharm Guide to ReadyAPI. PR #4512 by @mukulmantosh.</li> <li>\ud83d\udcdd Add external link to article: Building an API with ReadyAPI and Supabase and Deploying on Deta. PR #4440 by @aUnicornDev.</li> <li>\u270f Fix small typo in <code>docs/en/docs/tutorial/security/first-steps.md</code>. PR #4515 by @KikoIlievski.</li> </ul>"},{"location":"release-notes/#translations_54","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Polish translation for <code>docs/pl/docs/tutorial/index.md</code>. PR #4516 by @MKaczkow.</li> <li>\u270f Fix typo in deployment. PR #4629 by @raisulislam541.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/help-readyapi.md</code>. PR #4583 by @mateusjs.</li> </ul>"},{"location":"release-notes/#internal_62","title":"Internal","text":"<ul> <li>\ud83d\udd27 Add notifications in issue for Uzbek translations. PR #4884 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0770","title":"0.77.0","text":""},{"location":"release-notes/#upgrades_23","title":"Upgrades","text":"<ul> <li>\u2b06 Upgrade Starlette from 0.18.0 to 0.19.0. PR #4488 by @Kludex.<ul> <li>When creating an explicit <code>JSONResponse</code> the <code>content</code> argument is now required.</li> </ul> </li> </ul>"},{"location":"release-notes/#docs_55","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add external link to article: Seamless ReadyAPI Configuration with ConfZ. PR #4414 by @silvanmelchior.</li> <li>\ud83d\udcdd Add external link to article: 5 Advanced Features of ReadyAPI You Should Try. PR #4436 by @kaustubhgupta.</li> <li>\u270f Reword to improve legibility of docs about <code>TestClient</code>. PR #4389 by @rgilton.</li> <li>\ud83d\udcdd Add external link to blog post about Kafka, ReadyAPI, and Ably. PR #4044 by @Ugbot.</li> <li>\u270f Fix typo in <code>docs/en/docs/tutorial/sql-databases.md</code>. PR #4875 by @wpyoga.</li> <li>\u270f Fix typo in <code>docs/en/docs/async.md</code>. PR #4726 by @Prezu.</li> </ul>"},{"location":"release-notes/#translations_55","title":"Translations","text":"<ul> <li>\ud83c\udf10 Update source example highlights for <code>docs/zh/docs/tutorial/query-params-str-validations.md</code>. PR #4237 by @caimaoy.</li> <li>\ud83c\udf10 Remove translation docs references to aiofiles as it's no longer needed since AnyIO. PR #3594 by @alonme.</li> <li>\u270f \ud83c\udf10 Fix typo in Portuguese translation for <code>docs/pt/docs/tutorial/path-params.md</code>. PR #4722 by @CleoMenezesJr.</li> <li>\ud83c\udf10 Fix live docs server for translations for some languages. PR #4729 by @wakabame.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/cookie-params.md</code>. PR #4112 by @lbmendes.</li> <li>\ud83c\udf10 Fix French translation for <code>docs/tutorial/body.md</code>. PR #4332 by @Smlep.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/ja/docs/advanced/conditional-openapi.md</code>. PR #2631 by @sh0nk.</li> <li>\ud83c\udf10 Fix Japanese translation of <code>docs/ja/docs/tutorial/body.md</code>. PR #3062 by @a-takahashi223.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/pt/docs/tutorial/background-tasks.md</code>. PR #2170 by @izaguerreiro.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/deployment/deta.md</code>. PR #4442 by @lsglucas.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/async.md</code>. PR #4036 by @Winand.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/tutorial/body.md</code>. PR #3960 by @leandrodesouzadev.</li> <li>\ud83c\udf10 Add Portuguese translation of <code>tutorial/extra-data-types.md</code>. PR #4077 by @luccasmmg.</li> <li>\ud83c\udf10 Update German translation for <code>docs/features.md</code>. PR #3905 by @jomue.</li> </ul>"},{"location":"release-notes/#0760","title":"0.76.0","text":""},{"location":"release-notes/#upgrades_24","title":"Upgrades","text":"<ul> <li>\u2b06 Upgrade Starlette from 0.17.1 to 0.18.0. PR #4483 by @Kludex.</li> </ul>"},{"location":"release-notes/#internal_63","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #4847 by @github-actions[bot].</li> <li>\ud83d\udd27 Add Budget Insight sponsor. PR #4824 by @khulnasoft.</li> <li>\ud83c\udf71 Update sponsor, ExoFlare badge. PR #4822 by @khulnasoft.</li> <li>\ud83d\udd27 Update sponsors, enable Dropbase again, update TalkPython link. PR #4821 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0752","title":"0.75.2","text":"<p>This release includes upgrades to third-party packages that handle security issues. Although there's a chance these issues don't affect you in particular, please upgrade as soon as possible.</p>"},{"location":"release-notes/#fixes_27","title":"Fixes","text":"<ul> <li>\u2705 Fix new/recent tests with new fixed <code>ValidationError</code> JSON Schema. PR #4806 by @khulnasoft.</li> <li>\ud83d\udc1b Fix JSON Schema for <code>ValidationError</code> at field <code>loc</code>. PR #3810 by @dconathan.</li> <li>\ud83d\udc1b Fix support for prefix on APIRouter WebSockets. PR #2640 by @Kludex.</li> </ul>"},{"location":"release-notes/#upgrades_25","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Update ujson ranges for CVE-2021-45958. PR #4804 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade dependencies upper range for extras \"all\". PR #4803 by @khulnasoft.</li> <li>\u2b06 Upgrade Swagger UI - swagger-ui-dist@4. This handles a security issue in Swagger UI itself where it could be possible to inject HTML into Swagger UI. Please upgrade as soon as you can, in particular if you expose your Swagger UI (<code>/docs</code>) publicly to non-expert users. PR #4347 by @RAlanWright.</li> </ul>"},{"location":"release-notes/#internal_64","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update sponsors, add: ExoFlare, Ines Course; remove: Dropbase, Vim.so, Calmcode; update: Striveworks, TalkPython and TestDriven.io. PR #4805 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade Codecov GitHub Action. PR #4801 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0751","title":"0.75.1","text":""},{"location":"release-notes/#translations_56","title":"Translations","text":"<ul> <li>\ud83c\udf10 Start Dutch translations. PR #4703 by @khulnasoft.</li> <li>\ud83c\udf10 Start Persian/Farsi translations. PR #4243 by @aminalaee.</li> <li>\u270f Reword sentence about handling errors. PR #1993 by @khuhroproeza.</li> </ul>"},{"location":"release-notes/#internal_65","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #4752 by @github-actions[bot].</li> <li>\u2796 Temporarily remove cligenius-cli from dependencies and upgrade Black to unblock Pydantic CI. PR #4754 by @khulnasoft.</li> <li>\ud83d\udd27 Add configuration to notify Dutch translations. PR #4702 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #4699 by @github-actions[bot].</li> <li>\ud83d\udc1b Fix ReadyAPI People generation to include missing file in commit. PR #4695 by @khulnasoft.</li> <li>\ud83d\udd27 Update Classiq sponsor links. PR #4688 by @khulnasoft.</li> <li>\ud83d\udd27 Add Classiq sponsor. PR #4671 by @khulnasoft.</li> <li>\ud83d\udcdd Add Jina's QA Bot to the docs to help people that want to ask quick questions. PR #4655 by @khulnasoft based on original PR #4626 by @hanxiao.</li> </ul>"},{"location":"release-notes/#0750","title":"0.75.0","text":""},{"location":"release-notes/#features_26","title":"Features","text":"<ul> <li>\u2728 Add support for custom <code>generate_unique_id_function</code> and docs for generating clients. New docs: Advanced - Generate Clients. PR #4650 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0741","title":"0.74.1","text":""},{"location":"release-notes/#features_27","title":"Features","text":"<ul> <li>\u2728 Include route in scope to allow middleware and other tools to extract its information. PR #4603 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0740","title":"0.74.0","text":""},{"location":"release-notes/#breaking-changes_4","title":"Breaking Changes","text":"<ul> <li>\u2728 Update internal <code>AsyncExitStack</code> to fix context for dependencies with <code>yield</code>. PR #4575 by @khulnasoft.</li> </ul> <p>Dependencies with <code>yield</code> can now catch <code>HTTPException</code> and custom exceptions. For example:</p> <pre><code>async def get_database():\n    with Session() as session:\n        try:\n            yield session\n        except HTTPException:\n            session.rollback()\n            raise\n        finally:\n            session.close()\n</code></pre> <p>After the dependency with <code>yield</code> handles the exception (or not) the exception is raised again. So that any exception handlers can catch it, or ultimately the default internal <code>ServerErrorMiddleware</code>.</p> <p>If you depended on exceptions not being received by dependencies with <code>yield</code>, and receiving an exception breaks the code after <code>yield</code>, you can use a block with <code>try</code> and <code>finally</code>:</p> <pre><code>async def do_something():\n    try:\n        yield something\n    finally:\n        some_cleanup()\n</code></pre> <p>...that way the <code>finally</code> block is run regardless of any exception that might happen.</p>"},{"location":"release-notes/#features_28","title":"Features","text":"<ul> <li>The same PR #4575 from above also fixes the <code>contextvars</code> context for the code before and after <code>yield</code>. This was the main objective of that PR.</li> </ul> <p>This means that now, if you set a value in a context variable before <code>yield</code>, the value would still be available after <code>yield</code> (as you would intuitively expect). And it also means that you can reset the context variable with a token afterwards.</p> <p>For example, this works correctly now:</p> <pre><code>from contextvars import ContextVar\nfrom typing import Any, Dict, Optional\n\n\nlegacy_request_state_context_var: ContextVar[Optional[Dict[str, Any]]] = ContextVar(\n    \"legacy_request_state_context_var\", default=None\n)\n\nasync def set_up_request_state_dependency():\n    request_state = {\"user\": \"deadpond\"}\n    contextvar_token = legacy_request_state_context_var.set(request_state)\n    yield request_state\n    legacy_request_state_context_var.reset(contextvar_token)\n</code></pre> <p>...before this change it would raise an error when resetting the context variable, because the <code>contextvars</code> context was different, because of the way it was implemented.</p> <p>Note: You probably don't need <code>contextvars</code>, and you should probably avoid using them. But they are powerful and useful in some advanced scenarios, for example, migrating from code that used Flask's <code>g</code> semi-global variable.</p> <p>Technical Details: If you want to know more of the technical details you can check out the PR description #4575.</p>"},{"location":"release-notes/#internal_66","title":"Internal","text":"<ul> <li>\ud83d\udd27 Add Striveworks sponsor. PR #4596 by @khulnasoft.</li> <li>\ud83d\udc9a Only build docs on push when on master to avoid duplicate runs from PRs. PR #4564 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #4502 by @github-actions[bot].</li> </ul>"},{"location":"release-notes/#0730","title":"0.73.0","text":""},{"location":"release-notes/#features_29","title":"Features","text":"<ul> <li>\u2728 Add support for declaring <code>UploadFile</code> parameters without explicit <code>File()</code>. PR #4469 by @khulnasoft. New docs: Request Files - File Parameters with UploadFile.</li> <li>\u2728 Add support for tags with Enums. PR #4468 by @khulnasoft. New docs: Path Operation Configuration - Tags with Enums.</li> <li>\u2728 Allow hiding from OpenAPI (and Swagger UI) <code>Query</code>, <code>Cookie</code>, <code>Header</code>, and <code>Path</code> parameters. PR #3144 by @astraldawn. New docs: Query Parameters and String Validations - Exclude from OpenAPI.</li> </ul>"},{"location":"release-notes/#docs_56","title":"Docs","text":"<ul> <li>\ud83d\udcdd Tweak and improve docs for Request Files. PR #4470 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#fixes_28","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix bug preventing to use OpenAPI when using tuples. PR #3874 by @victorbenichoux.</li> <li>\ud83d\udc1b Prefer custom encoder over defaults if specified in <code>jsonable_encoder</code>. PR #2061 by @viveksunder.<ul> <li>\ud83d\udc9a Duplicate PR to trigger CI. PR #4467 by @khulnasoft.</li> </ul> </li> </ul>"},{"location":"release-notes/#internal_67","title":"Internal","text":"<ul> <li>\ud83d\udc1b Fix docs dependencies cache, to get the latest Material for MkDocs. PR #4466 by @khulnasoft.</li> <li>\ud83d\udd27 Add sponsor Dropbase. PR #4465 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0720","title":"0.72.0","text":""},{"location":"release-notes/#features_30","title":"Features","text":"<ul> <li>\u2728 Enable configuring Swagger UI parameters. Original PR #2568 by @jmriebold. Here are the new docs: Configuring Swagger UI.</li> </ul>"},{"location":"release-notes/#docs_57","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update Python Types docs, add missing 3.6 / 3.9 example. PR #4434 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_57","title":"Translations","text":"<ul> <li>\ud83c\udf10 Update Chinese translation for <code>docs/help-readyapi.md</code>. PR #3847 by @jaystone776.</li> <li>\ud83c\udf10 Fix Korean translation for <code>docs/ko/docs/index.md</code>. PR #4195 by @kty4119.</li> <li>\ud83c\udf10 Add Polish translation for <code>docs/pl/docs/index.md</code>. PR #4245 by @MicroPanda123.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs\\tutorial\\path-operation-configuration.md</code>. PR #3312 by @jaystone776.</li> </ul>"},{"location":"release-notes/#internal_68","title":"Internal","text":"<ul> <li>\ud83d\udd27 Enable MkDocs Material Insiders' <code>content.tabs.link</code>. PR #4399 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0710","title":"0.71.0","text":""},{"location":"release-notes/#features_31","title":"Features","text":"<ul> <li>\u2728 Add docs and tests for Python 3.9 and Python 3.10. PR #3712 by @khulnasoft.<ul> <li>You can start with Python Types Intro, it explains what changes between different Python versions, in Python 3.9 and in Python 3.10.</li> <li>All the ReadyAPI docs are updated. Each code example in the docs that could use different syntax in Python 3.9 or Python 3.10 now has all the alternatives in tabs.</li> </ul> </li> <li>\u2b06\ufe0f Upgrade Starlette to 0.17.1. PR #4145 by @simondale00.</li> </ul>"},{"location":"release-notes/#internal_69","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #4354 by @github-actions[bot].</li> <li>\ud83d\udd27 Add ReadyAPI Trove Classifier for PyPI as now there's one \ud83e\udd37\ud83d\ude01. PR #4386 by @khulnasoft.</li> <li>\u2b06 Upgrade MkDocs Material and configs. PR #4385 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0701","title":"0.70.1","text":"<p>There's nothing interesting in this particular ReadyAPI release. It is mainly to enable/unblock the release of the next version of Pydantic that comes packed with features and improvements. \ud83e\udd29</p>"},{"location":"release-notes/#fixes_29","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix JSON Schema for dataclasses, supporting the fixes in Pydantic 1.9. PR #4272 by @PrettyWood.</li> </ul>"},{"location":"release-notes/#translations_58","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Korean translation for <code>docs/tutorial/request-forms-and-files.md</code>. PR #3744 by @NinaHwang.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/tutorial/request-files.md</code>. PR #3743 by @NinaHwang.</li> <li>\ud83c\udf10 Add portuguese translation for <code>docs/tutorial/query-params-str-validations.md</code>. PR #3965 by @leandrodesouzadev.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/tutorial/response-status-code.md</code>. PR #3742 by @NinaHwang.</li> <li>\ud83c\udf10 Add Korean translation for Tutorial - JSON Compatible Encoder. PR #3152 by @NEONKID.</li> <li>\ud83c\udf10 Add Korean translation for Tutorial - Path Parameters and Numeric Validations. PR #2432 by @hard-coders.</li> <li>\ud83c\udf10 Add Korean translation for <code>docs/ko/docs/deployment/versions.md</code>. PR #4121 by @DevDae.</li> <li>\ud83c\udf10 Fix Korean translation for <code>docs/ko/docs/tutorial/index.md</code>. PR #4193 by @kimjaeyoonn.</li> <li>\ud83d\udd27 Add CryptAPI sponsor. PR #4264 by @khulnasoft.</li> <li>\ud83d\udcdd Update <code>docs/tutorial/dependencies/classes-as-dependencies</code>: Add type of query parameters in a description of <code>Classes as dependencies</code>. PR #4015 by @0417taehyun.</li> <li>\ud83c\udf10 Add French translation for Tutorial - First steps. PR #3455 by @Smlep.</li> <li>\ud83c\udf10 Add French translation for <code>docs/tutorial/path-params.md</code>. PR #3548 by @Smlep.</li> <li>\ud83c\udf10 Add French translation for <code>docs/tutorial/query-params.md</code>. PR #3556 by @Smlep.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/python-types.md</code>. PR #3926 by @BilalAlpaslan.</li> </ul>"},{"location":"release-notes/#internal_70","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #4274 by @github-actions[bot].</li> </ul>"},{"location":"release-notes/#0700","title":"0.70.0","text":"<p>This release just upgrades Starlette to the latest version, <code>0.16.0</code>, which includes several bug fixes and some small breaking changes.</p> <p>These last three consecutive releases are independent so that you can migrate gradually:</p> <ul> <li>First to ReadyAPI <code>0.68.2</code>, with no breaking changes, but upgrading all the sub-dependencies.</li> <li>Next to ReadyAPI <code>0.69.0</code>, which upgrades Starlette to <code>0.15.0</code>, with AnyIO support, and a higher chance of having breaking changes in your code.</li> <li>Finally to ReadyAPI <code>0.70.0</code>, just upgrading Starlette to the latest version <code>0.16.0</code> with additional bug fixes.</li> </ul> <p>This way, in case there was a breaking change for your code in one of the releases, you can still benefit from the previous upgrades. \u2728</p>"},{"location":"release-notes/#breaking-changes-upgrade","title":"Breaking Changes - Upgrade","text":"<ul> <li>\u2b06\ufe0f Upgrade Starlette to 0.16.0. PR #4016 by @khulnasoft.</li> </ul> <p>Also upgrades the ranges of optional dependencies:</p> <ul> <li><code>\"jinja2 &gt;=2.11.2,&lt;4.0.0\"</code></li> <li><code>\"itsdangerous &gt;=1.1.0,&lt;3.0.0\"</code></li> </ul>"},{"location":"release-notes/#0690","title":"0.69.0","text":""},{"location":"release-notes/#breaking-changes-upgrade_1","title":"Breaking Changes - Upgrade","text":"<p>This release adds support for Trio. \u2728</p> <p>It upgrades the version of Starlette to <code>0.15.0</code>, now based on AnyIO, and the internal async components in ReadyAPI are now based on AnyIO as well, making it compatible with both asyncio and Trio.</p> <p>You can read the docs about running ReadyAPI with Trio using Hypercorn.</p> <p>This release also removes <code>graphene</code> as an optional dependency for GraphQL. If you need to work with GraphQL, the recommended library now is Strawberry. You can read the new ReadyAPI with GraphQL docs.</p>"},{"location":"release-notes/#features_32","title":"Features","text":"<ul> <li>\u2728 Add support for Trio via AnyIO, upgrading Starlette to <code>0.15.0</code>. PR #3372 by @graingert.</li> <li>\u2796 Remove <code>graphene</code> as an optional dependency. PR #4007 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#docs_58","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add docs for using Trio with Hypercorn. PR #4014 by @khulnasoft.</li> <li>\u270f Fix typos in Deployment Guide. PR #3975 by @ghandic.</li> <li>\ud83d\udcdd Update docs with pip install calls when using extras with brackets, use quotes for compatibility with Zsh. PR #3131 by @tomwei7.</li> <li>\ud83d\udcdd Add external link to article: Deploying ML Models as API Using ReadyAPI and Heroku. PR #3904 by @kaustubhgupta.</li> <li>\u270f Fix typo in file paths in <code>docs/en/docs/contributing.md</code>. PR #3752 by @NinaHwang.</li> <li>\u270f Fix a typo in <code>docs/en/docs/advanced/path-operation-advanced-configuration.md</code> and <code>docs/en/docs/release-notes.md</code>. PR #3750 by @saintmalik.</li> <li>\u270f\ufe0f Add a missing comma in the security tutorial. PR #3564 by @jalvaradosegura.</li> <li>\u270f Fix typo in <code>docs/en/docs/help-readyapi.md</code>. PR #3760 by @jaystone776.</li> <li>\u270f Fix typo about file path in <code>docs/en/docs/tutorial/bigger-applications.md</code>. PR #3285 by @HolyDorus.</li> <li>\u270f Re-word to clarify test client in <code>docs/en/docs/tutorial/testing.md</code>. PR #3382 by @Bharat123rox.</li> <li>\ud83d\udcdd  Fix incorrect highlighted code. PR #3325 by @paxcodes.</li> <li>\ud83d\udcdd Add external link to article: How-to deploy ReadyAPI app to Heroku. PR #3241 by @Jarmos-san.</li> <li>\u270f Fix typo (mistranslation) in <code>docs/en/docs/advanced/templates.md</code>. PR #3211 by @oerpli.</li> <li>\ud83d\udcdd Remove note about (now supported) feature from Swagger UI in <code>docs/en/docs/tutorial/request-files.md</code>. PR #2803 by @gsganden.</li> <li>\u270f Fix typo re-word in <code>docs/tutorial/handling-errors.md</code>. PR #2700 by @graue70.</li> </ul>"},{"location":"release-notes/#translations_59","title":"Translations","text":"<ul> <li>\ud83c\udf10 Initialize Azerbaijani translations. PR #3941 by @madatbay.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/readyapi-people.md</code>. PR #3848 by @BilalAlpaslan.</li> </ul>"},{"location":"release-notes/#internal_71","title":"Internal","text":"<ul> <li>\ud83d\udcdd Add supported Python versions badge. PR #2794 by @hramezani.</li> <li>\u270f Fix link in Japanese docs for <code>docs/ja/docs/deployment/docker.md</code>. PR #3245 by @utamori.</li> <li>\ud83d\udd27 Correct DeprecationWarning config and comment in pytest settings. PR #4008 by @graingert.</li> <li>\ud83d\udd27 Swap light/dark theme button icon. PR #3246 by @eddsalkield.</li> <li>\ud83d\udd27 Lint only in Python 3.7 and above. PR #4006 by @khulnasoft.</li> <li>\ud83d\udd27 Add GitHub Action notify-translations config for Azerbaijani. PR #3995 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0682","title":"0.68.2","text":"<p>This release has no breaking changes. \ud83c\udf89</p> <p>It upgrades the version ranges of sub-dependencies to allow applications using ReadyAPI to easily upgrade them.</p> <p>Soon there will be a new ReadyAPI release upgrading Starlette to take advantage of recent improvements, but as that has a higher chance of having breaking changes, it will be in a separate release.</p>"},{"location":"release-notes/#features_33","title":"Features","text":"<ul> <li>\u2b06Increase supported version of aiofiles to suppress warnings. PR #2899 by @SnkSynthesis.</li> <li>\u2796 Do not require backports in Python &gt;= 3.7. PR #1880 by @FFY00.</li> <li>\u2b06 Upgrade required Python version to &gt;= 3.6.1, needed by typing.Deque, used by Pydantic. PR #2733 by @hukkin.</li> <li>\u2b06\ufe0f Bump Uvicorn max range to 0.15.0. PR #3345 by @Kludex.</li> </ul>"},{"location":"release-notes/#docs_59","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update GraphQL docs, recommend Strawberry. PR #3981 by @khulnasoft.</li> <li>\ud83d\udcdd Re-write and extend Deployment guide: Concepts, Uvicorn, Gunicorn, Docker, Containers, Kubernetes. PR #3974 by @khulnasoft.</li> <li>\ud83d\udcdd Upgrade HTTPS guide with more explanations and diagrams. PR #3950 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_60","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Turkish translation for <code>docs/features.md</code>. PR #1950 by @ycd.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/benchmarks.md</code>. PR #2729 by @Telomeraz.</li> <li>\ud83c\udf10 Add Turkish translation for <code>docs/index.md</code>. PR #1908 by @ycd.</li> <li>\ud83c\udf10 Add French translation for <code>docs/tutorial/body.md</code>. PR #3671 by @Smlep.</li> <li>\ud83c\udf10 Add French translation for <code>deployment/docker.md</code>. PR #3694 by @rjNemo.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/tutorial/path-params.md</code>. PR #3664 by @FelipeSilva93.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/deployment/https.md</code>. PR #3754 by @lsglucas.</li> <li>\ud83c\udf10 Add German translation for <code>docs/features.md</code>. PR #3699 by @mawassk.</li> </ul>"},{"location":"release-notes/#internal_72","title":"Internal","text":"<ul> <li>\u2728 Update GitHub Action: notify-translations, to avoid a race conditions. PR #3989 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade development <code>autoflake</code>, supporting multi-line imports. PR #3988 by @khulnasoft.</li> <li>\u2b06\ufe0f Increase dependency ranges for tests and docs: pytest-cov, pytest-asyncio, black, httpx, sqlalchemy, databases, mkdocs-markdownextradata-plugin. PR #3987 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #3986 by @github-actions[bot].</li> <li>\ud83d\udc9a Fix badges in README and main page. PR #3979 by @ghandic.</li> <li>\u2b06 Upgrade internal testing dependencies: mypy to version 0.910, add newly needed type packages. PR #3350 by @ArcLightSlavik.</li> <li>\u2728 Add Deepset Sponsorship. PR #3976 by @khulnasoft.</li> <li>\ud83c\udfa8 Tweak CSS styles for shell animations. PR #3888 by @khulnasoft.</li> <li>\ud83d\udd27 Add new Sponsor Calmcode.io. PR #3777 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0681","title":"0.68.1","text":"<ul> <li>\u2728 Add support for <code>read_with_orm_mode</code>, to support SQLDev relationship attributes. PR #3757 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_61","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Portuguese translation of <code>docs/readyapi-people.md</code>. PR #3461 by @ComicShrimp.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md</code>. PR #3492 by @jaystone776.</li> <li>\ud83d\udd27 Add new Translation tracking issues for German and Indonesian. PR #3718 by @khulnasoft.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/tutorial/dependencies/sub-dependencies.md</code>. PR #3491 by @jaystone776.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/advanced/index.md</code>. PR #3460 by @ComicShrimp.</li> <li>\ud83c\udf10 Portuguese translation of <code>docs/async.md</code>. PR #1330 by @Serrones.</li> <li>\ud83c\udf10 Add French translation for <code>docs/async.md</code>. PR #3416 by @Smlep.</li> </ul>"},{"location":"release-notes/#internal_73","title":"Internal","text":"<ul> <li>\u2728 Add GitHub Action: Notify Translations. PR #3715 by @khulnasoft.</li> <li>\u2728 Update computation of ReadyAPI People and sponsors. PR #3714 by @khulnasoft.</li> <li>\u2728 Enable recent Material for MkDocs Insiders features. PR #3710 by @khulnasoft.</li> <li>\ud83d\udd25 Remove/clean extra imports from examples in docs for features. PR #3709 by @khulnasoft.</li> <li>\u2795 Update docs library to include sources in Markdown. PR #3648 by @khulnasoft.</li> <li>\u2b06 Enable tests for Python 3.9. PR #2298 by @Kludex.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #3642 by @github-actions[bot].</li> </ul>"},{"location":"release-notes/#0680","title":"0.68.0","text":""},{"location":"release-notes/#features_34","title":"Features","text":"<ul> <li>\u2728 Add support for extensions and updates to the OpenAPI schema in each path operation. New docs: ReadyAPI Path Operation Advanced Configuration - OpenAPI Extra. Initial PR #1922 by @edouardlp.</li> <li>\u2728 Add additional OpenAPI metadata parameters to <code>ReadyAPI</code> class, shown on the automatic API docs UI. New docs: Metadata and Docs URLs. Initial PR #1812 by @dkreeft.</li> <li>\u2728 Add <code>description</code> parameter to all the security scheme classes, e.g. <code>APIKeyQuery(name=\"key\", description=\"A very cool API key\")</code>. PR #1757 by @hylkepostma.</li> <li>\u2728 Update OpenAPI models, supporting recursive models and extensions. PR #3628 by @khulnasoft.</li> <li>\u2728 Import and re-export data structures from Starlette, used by Request properties, on <code>readyapi.datastructures</code>. Initial PR #1872 by @jamescurtin.</li> </ul>"},{"location":"release-notes/#docs_60","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update docs about async and response-model with more gender neutral language. PR #1869 by @Edward-Knight.</li> </ul>"},{"location":"release-notes/#translations_62","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Russian translation for <code>docs/python-types.md</code>. PR #3039 by @dukkee.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/tutorial/dependencies/index.md</code>. PR #3489 by @jaystone776.</li> <li>\ud83c\udf10 Add Russian translation for <code>docs/external-links.md</code>. PR #3036 by @dukkee.</li> <li>\ud83c\udf10 Add Chinese translation for <code>docs/tutorial/dependencies/global-dependencies.md</code>. PR #3493 by @jaystone776.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/deployment/versions.md</code>. PR #3618 by @lsglucas.</li> <li>\ud83c\udf10 Add Japanese translation for <code>docs/tutorial/security/oauth2-jwt.md</code>. PR #3526 by @sattosan.</li> </ul>"},{"location":"release-notes/#internal_74","title":"Internal","text":"<ul> <li>\u2705 Add  the <code>docs_src</code> directory to test coverage and update tests. Initial PR #1904 by @Kludex.</li> <li>\ud83d\udd27 Add new GitHub templates with forms for new issues. PR #3612 by @khulnasoft.</li> <li>\ud83d\udcdd Add official ReadyAPI Twitter to docs: @readyapi. PR #3578 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0670","title":"0.67.0","text":""},{"location":"release-notes/#features_35","title":"Features","text":"<ul> <li>\u2728 Add support for <code>dataclasses</code> in request bodies and <code>response_model</code>. New documentation: Advanced User Guide - Using Dataclasses. PR #3577 by @khulnasoft.</li> <li>\u2728 Support <code>dataclasses</code> in responses. PR #3576 by @khulnasoft, continuation from initial PR #2722 by @amitlissack.</li> </ul>"},{"location":"release-notes/#docs_61","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add external link: How to Create A Fake Certificate Authority And Generate TLS Certs for ReadyAPI. PR #2839 by @aitoehigie.</li> <li>\u270f Fix code highlighted line in: <code>body-nested-models.md</code>. PR #3463 by @jaystone776.</li> <li>\u270f Fix typo in <code>body-nested-models.md</code>. PR #3462 by @jaystone776.</li> <li>\u270f Fix typo \"might me\" -&gt; \"might be\" in <code>docs/en/docs/tutorial/schema-extra-example.md</code>. PR #3362 by @dbrakman.</li> <li>\ud83d\udcdd Add external link: Building simple E-Commerce with NuxtJS and ReadyAPI. PR #3271 by @ShahriyarR.</li> <li>\ud83d\udcdd Add external link: Serve a machine learning model using Sklearn, ReadyAPI and Docker. PR #2974 by @rodrigo-arenas.</li> <li>\u270f\ufe0f Fix typo on docstring in datastructures file. PR #2887 by @Kludex.</li> <li>\ud83d\udcdd Add External Link: Deploy ReadyAPI on Ubuntu and Serve using Caddy 2 Web Server. PR #3572 by @khulnasoft.</li> <li>\ud83d\udcdd Add External Link, replaces #1898. PR #3571 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#internal_75","title":"Internal","text":"<ul> <li>\ud83c\udfa8 Improve style for sponsors, add radius border. PR #2388 by @Kludex.</li> <li>\ud83d\udc77 Update GitHub Action latest-changes. PR #3574 by @khulnasoft.</li> <li>\ud83d\udc77 Update GitHub Action latest-changes. PR #3573 by @khulnasoft.</li> <li>\ud83d\udc77 Rename and clarify CI workflow job names. PR #3570 by @khulnasoft.</li> <li>\ud83d\udc77 Update GitHub Action latest-changes, strike 2 \u26be. PR #3575 by @khulnasoft.</li> <li>\ud83d\udd27 Sort external links in docs to have the most recent at the top. PR #3568 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0661","title":"0.66.1","text":""},{"location":"release-notes/#translations_63","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add basic setup for German translations. PR #3522 by @0x4Dark.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/tutorial/security/index.md</code>. PR #3507 by @oandersonmagalhaes.</li> <li>\ud83c\udf10 Add Portuguese translation for <code>docs/deployment/index.md</code>. PR #3337 by @lsglucas.</li> </ul>"},{"location":"release-notes/#internal_76","title":"Internal","text":"<ul> <li>\ud83d\udd27 Configure strict pytest options and update/refactor tests. Upgrade pytest to <code>&gt;=6.2.4,&lt;7.0.0</code> and pytest-cov to <code>&gt;=2.12.0,&lt;3.0.0</code>. Initial PR #2790 by @graingert.</li> <li>\u2b06\ufe0f Upgrade python-jose dependency to <code>&gt;=3.3.0,&lt;4.0.0</code> for tests. PR #3468 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0660","title":"0.66.0","text":""},{"location":"release-notes/#features_36","title":"Features","text":"<ul> <li>\u2728 Allow setting the <code>response_class</code> to <code>RedirectResponse</code> or <code>FileResponse</code> and returning the URL from the function. New and updated docs are in the tutorial section Custom Response - HTML, Stream, File, others, in RedirectResponse and in FileResponse. PR #3457 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#fixes_30","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix include/exclude for dicts in <code>jsonable_encoder</code>. PR #2016 by @Rubikoid.</li> <li>\ud83d\udc1b Support custom OpenAPI / JSON Schema fields in the generated output OpenAPI. PR #1429 by @jmagnusson.</li> </ul>"},{"location":"release-notes/#translations_64","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Spanish translation for <code>tutorial/query-params.md</code>. PR #2243 by @mariacamilagl.</li> <li>\ud83c\udf10 Add Spanish translation for <code>advanced/response-directly.md</code>. PR #1253 by @jfunez.</li> <li>\ud83c\udf10 Add Spanish translation for <code>advanced/additional-status-codes.md</code>. PR #1252 by @jfunez.</li> <li>\ud83c\udf10 Add Spanish translation for <code>advanced/path-operation-advanced-configuration.md</code>. PR #1251 by @jfunez.</li> </ul>"},{"location":"release-notes/#0653","title":"0.65.3","text":""},{"location":"release-notes/#fixes_31","title":"Fixes","text":"<ul> <li>\u267b Assume request bodies contain JSON when no Content-Type header is provided. This fixes a breaking change introduced by 0.65.2 with PR #2118. It should allow upgrading ReadyAPI applications with clients that send JSON data without a <code>Content-Type</code> header. And there's still protection against CSRFs. PR #3456 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_65","title":"Translations","text":"<ul> <li>\ud83c\udf10 Initialize Indonesian translations. PR #3014 by @pace-noge.</li> <li>\ud83c\udf10 Add Spanish translation of Tutorial - Path Parameters. PR #2219 by @mariacamilagl.</li> <li>\ud83c\udf10 Add Spanish translation of Tutorial - First Steps. PR #2208 by @mariacamilagl.</li> <li>\ud83c\udf10 Portuguese translation of Tutorial - Body - Fields. PR #3420 by @ComicShrimp.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Request - Forms - and - Files. PR #3249 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Handling - Errors. PR #3299 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Form - Data. PR #3248 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Body - Updates. PR #3237 by @jaystone776.</li> <li>\ud83c\udf10 Add Chinese translation for ReadyAPI People. PR #3112 by @hareru.</li> <li>\ud83c\udf10 Add French translation for Project Generation. PR #3197 by @Smlep.</li> <li>\ud83c\udf10 Add French translation for Python Types Intro. PR #3185 by @Smlep.</li> <li>\ud83c\udf10 Add French translation for External Links. PR #3103 by @Smlep.</li> <li>\ud83c\udf10 Add French translation for Alternatives, Inspiration and Comparisons. PR #3020 by @rjNemo.</li> <li>\ud83c\udf10 Fix Chinese translation code snippet mismatch in Tutorial - Python Types Intro. PR #2573 by @BoYanZh.</li> <li>\ud83c\udf10 Add Portuguese translation for Development Contributing. PR #1364 by @Serrones.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Request - Files. PR #3244 by @jaystone776.</li> </ul>"},{"location":"release-notes/#internal_77","title":"Internal","text":"<ul> <li>\ud83d\udc65 Update ReadyAPI People. PR #3450 by @github-actions[bot].</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #3319 by @github-actions[bot].</li> <li>\u2b06 Upgrade docs development dependency on <code>cligenius-cli</code> to &gt;=0.0.12 to fix conflicts. PR #3429 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0652","title":"0.65.2","text":""},{"location":"release-notes/#security-fixes_1","title":"Security fixes","text":"<ul> <li>\ud83d\udd12 Check Content-Type request header before assuming JSON. Initial PR #2118 by @patrickkwang.</li> </ul> <p>This change fixes a CSRF security vulnerability when using cookies for authentication in path operations with JSON payloads sent by browsers.</p> <p>In versions lower than <code>0.65.2</code>, ReadyAPI would try to read the request payload as JSON even if the <code>content-type</code> header sent was not set to <code>application/json</code> or a compatible JSON media type (e.g. <code>application/geo+json</code>).</p> <p>So, a request with a content type of <code>text/plain</code> containing JSON data would be accepted and the JSON data would be extracted.</p> <p>But requests with content type <code>text/plain</code> are exempt from CORS preflights, for being considered Simple requests. So, the browser would execute them right away including cookies, and the text content could be a JSON string that would be parsed and accepted by the ReadyAPI application.</p> <p>See CVE-2021-32677 for more details.</p> <p>Thanks to Dima Boger for the security report! \ud83d\ude47\ud83d\udd12</p>"},{"location":"release-notes/#internal_78","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update sponsors badge, course bundle. PR #3340 by @khulnasoft.</li> <li>\ud83d\udd27 Add new gold sponsor Jina \ud83c\udf89. PR #3291 by @khulnasoft.</li> <li>\ud83d\udd27 Add new banner sponsor badge for ReadyAPI courses bundle. PR #3288 by @khulnasoft.</li> <li>\ud83d\udc77 Upgrade Issue Manager GitHub Action. PR #3236 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0651","title":"0.65.1","text":""},{"location":"release-notes/#security-fixes_2","title":"Security fixes","text":"<ul> <li>\ud83d\udccc Upgrade pydantic pin, to handle security vulnerability CVE-2021-29510. PR #3213 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0650","title":"0.65.0","text":""},{"location":"release-notes/#breaking-changes-upgrade_2","title":"Breaking Changes - Upgrade","text":"<ul> <li>\u2b06\ufe0f  Upgrade Starlette to <code>0.14.2</code>, including internal <code>UJSONResponse</code> migrated from Starlette. This includes several bug fixes and features from Starlette. PR #2335 by @hanneskuettner.</li> </ul>"},{"location":"release-notes/#translations_66","title":"Translations","text":"<ul> <li>\ud83c\udf10 Initialize new language Polish for translations. PR #3170 by @neternefer.</li> </ul>"},{"location":"release-notes/#internal_79","title":"Internal","text":"<ul> <li>\ud83d\udc77 Add GitHub Action cache to speed up CI installs. PR #3204 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade setup-python GitHub Action to v2. PR #3203 by @khulnasoft.</li> <li>\ud83d\udc1b Fix docs script to generate a new translation language with <code>overrides</code> boilerplate. PR #3202 by @khulnasoft.</li> <li>\u2728 Add new Deta banner badge with new sponsorship tier \ud83d\ude47. PR #3194 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #3189 by @github-actions[bot].</li> <li>\ud83d\udd0a Update ReadyAPI People to allow better debugging. PR #3188 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0640","title":"0.64.0","text":""},{"location":"release-notes/#features_37","title":"Features","text":"<ul> <li>\u2728 Add support for adding multiple <code>examples</code> in request bodies and path, query, cookie, and header params. New docs: Declare Request Example Data. Initial PR #1267 by @austinorr.</li> </ul>"},{"location":"release-notes/#fixes_32","title":"Fixes","text":"<ul> <li>\ud83d\udccc Pin SQLAlchemy range for tests, as it doesn't use SemVer. PR #3001 by @khulnasoft.</li> <li>\ud83c\udfa8 Add newly required type annotations for mypy. PR #2882 by @khulnasoft.</li> <li>\ud83c\udfa8 Remove internal \"type: ignore\", now unnecessary. PR #2424 by @AsakuraMizu.</li> </ul>"},{"location":"release-notes/#docs_62","title":"Docs","text":"<ul> <li>\ud83d\udcdd Add link to article in Russian \"ReadyAPI: \u0437\u043d\u0430\u043a\u043e\u043c\u0438\u043c\u0441\u044f \u0441 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u043c\". PR #2564 by @trkohler.</li> <li>\ud83d\udcdd Add external link to blog post \"Authenticate Your ReadyAPI App with Auth0\". PR #2172 by @dompatmore.</li> <li>\ud83d\udcdd Fix broken link to article: Machine learning model serving in Python using ReadyAPI and Streamlit. PR #2557 by @davidefiocco.</li> <li>\ud83d\udcdd Add ReadyAPI Medium Article: Deploy a dockerized ReadyAPI application to AWS. PR #2515 by @vjanz.</li> <li>\u270f Fix typo in Tutorial - Handling Errors. PR #2486 by @johnthagen.</li> <li>\u270f Fix typo in Security OAuth2 scopes. PR #2407 by @jugmac00.</li> <li>\u270f Fix typo/clarify docs for SQL (Relational) Databases. PR #2393 by @kangni.</li> <li>\ud83d\udcdd Add external link to \"ReadyAPI for Flask Users\". PR #2280 by @amitness.</li> </ul>"},{"location":"release-notes/#translations_67","title":"Translations","text":"<ul> <li>\ud83c\udf10 Fix Chinese translation of Tutorial - Query Parameters, remove obsolete content. PR #3051 by @louis70109.</li> <li>\ud83c\udf10 Add French translation for Tutorial - Background Tasks. PR #3098 by @Smlep.</li> <li>\ud83c\udf10 Fix Korean translation for docs/ko/docs/index.md. PR #3159 by @SueNaEunYang.</li> <li>\ud83c\udf10 Add Korean translation for Tutorial - Query Parameters. PR #2390 by @hard-coders.</li> <li>\ud83c\udf10 Add French translation for ReadyAPI People. PR #2232 by @JulianMaurin.</li> <li>\ud83c\udf10 Add Korean translation for Tutorial - Path Parameters. PR #2355 by @hard-coders.</li> <li>\ud83c\udf10 Add French translation for Features. PR #2157 by @Jefidev.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #3031 by @github-actions[bot].</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Debugging. PR #2737 by @blt232018.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Security - OAuth2 with Password (and hashing), Bearer with JWT tokens. PR #2642 by @waynerv.</li> <li>\ud83c\udf10 Add Korean translation for Tutorial - Header Parameters. PR #2589 by @mode9.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Metadata and Docs URLs. PR #2559 by @blt232018.</li> <li>\ud83c\udf10 Add Korean translation for Tutorial - First Steps. PR #2323 by @hard-coders.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - CORS (Cross-Origin Resource Sharing). PR #2540 by @blt232018.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Middleware. PR #2334 by @lpdswing.</li> <li>\ud83c\udf10 Add Korean translation for Tutorial - Intro. PR #2317 by @hard-coders.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Bigger Applications - Multiple Files. PR #2453 by @waynerv.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Security - Security Intro. PR #2443 by @waynerv.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Header Parameters. PR #2412 by @maoyibo.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Extra Data Types. PR #2410 by @maoyibo.</li> <li>\ud83c\udf10 Add Japanese translation for Deployment - Docker. PR #2312 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Deployment - Versions. PR #2310 by @tokusumi.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Cookie Parameters. PR #2261 by @alicrazy1947.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Static files. PR #2260 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Testing. PR #2259 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Debugging. PR #2256 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Middleware. PR #2255 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Concurrency and async / await. PR #2058 by @tokusumi.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Security - Simple OAuth2 with Password and Bearer. PR #2514 by @waynerv.</li> <li>\ud83c\udf10 Add Japanese translation for Deployment - Deta. PR #2314 by @tokusumi.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Security - Get Current User. PR #2474 by @waynerv.</li> <li>\ud83c\udf10 Add Japanese translation for Deployment - Manually. PR #2313 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Deployment - Intro. PR #2309 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for ReadyAPI People. PR #2254 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Advanced - Path Operation Advanced Configuration. PR #2124 by @Attsun1031.</li> <li>\ud83c\udf10 Add Japanese translation for External Links. PR #2070 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Body - Updates. PR #1956 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Form Data. PR #1943 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Cookie Parameters. PR #1933 by @SwftAlpc.</li> </ul>"},{"location":"release-notes/#internal_80","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update top banner, point to newsletter. PR #3003 by @khulnasoft.</li> <li>\ud83d\udd27 Disable sponsor WeTransfer. PR #3002 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #2880 by @github-actions[bot].</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #2739 by @github-actions[bot].</li> <li>\ud83d\udd27 Add new Gold Sponsor Talk Python \ud83c\udf89. PR #2673 by @khulnasoft.</li> <li>\ud83d\udd27 Add new Gold Sponsor vim.so \ud83c\udf89. PR #2669 by @khulnasoft.</li> <li>\ud83d\udd27 Add ReadyAPI user survey banner. PR #2623 by @khulnasoft.</li> <li>\ud83d\udd27 Add new Bronze Sponsor(s) \ud83e\udd49\ud83c\udf89. PR #2622 by @khulnasoft.</li> <li>\ud83d\udcdd Update social links: add Discord, fix GitHub. PR #2621 by @khulnasoft.</li> <li>\ud83d\udd27 Update ReadyAPI People GitHub Sponsors order. PR #2620 by @khulnasoft.</li> <li>\ud83d\udd27 Update InvestSuite sponsor data. PR #2608 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #2590 by @github-actions[bot].</li> </ul>"},{"location":"release-notes/#0630","title":"0.63.0","text":""},{"location":"release-notes/#features_38","title":"Features","text":"<ul> <li>\u2728 Improve type annotations, add support for mypy --strict, internally and for external packages. PR #2547 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#breaking-changes_5","title":"Breaking changes","text":"<ul> <li>\u2b06\ufe0f Upgrade Uvicorn when installing <code>readyapi[all]</code> to the latest version including <code>uvloop</code>, the new range is <code>uvicorn[standard] &gt;=0.12.0,&lt;0.14.0</code>. PR #2548 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#fixes_33","title":"Fixes","text":"<ul> <li>\ud83d\udc1b PR #2547 (read above) also fixes some false-positive mypy errors with <code>callbacks</code> parameters and when using the <code>OAuth2</code> class.</li> </ul>"},{"location":"release-notes/#docs_63","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update Uvicorn installation instructions to use uvicorn[standard] (includes uvloop). PR #2543 by @khulnasoft.</li> <li>\ud83d\udcdd Update title for Deta tutorial. PR #2466 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #2454 by @github-actions[bot].</li> </ul>"},{"location":"release-notes/#translations_68","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add docs lang selector widget. PR #2542 by @khulnasoft.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Response Status Code. PR #2442 by @waynerv.</li> <li>\ud83c\udf10 Start translation of the documentation for the Albanian language. PR #2516 by @vjanz.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Extra Models. PR #2416 by @waynerv.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Response Model. PR #2414 by @waynerv.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Schema Extra Example. PR #2411 by @maoyibo.</li> <li>\ud83c\udf10 Add Korean translation for Index. PR #2192 by @hard-coders.</li> <li>\ud83c\udf10 Add Japanese translation for Advanced User Guide - Additional Status Codes. PR #2145 by @Attsun1031.</li> </ul>"},{"location":"release-notes/#internal_81","title":"Internal","text":"<ul> <li>\ud83d\udc1b Fix docs overrides directory for translations. PR #2541 by @khulnasoft.</li> <li>\u2796 Remove Cligenius as a docs building dependency (covered by cligenius-cli) to fix pip resolver conflicts. PR #2539 by @khulnasoft.</li> <li>\u2728 Add newsletter: ReadyAPI and friends. PR #2509 by @khulnasoft.</li> <li>\u2728 Add new Gold Sponsor: InvestSuite \ud83c\udf89. PR #2508 by @khulnasoft.</li> <li>\ud83d\udd27 Add issue template configs. PR #2476 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0620","title":"0.62.0","text":""},{"location":"release-notes/#features_39","title":"Features","text":"<ul> <li>\u2728 Add support for shared/top-level parameters (dependencies, tags, etc). PR #2434 by @khulnasoft.</li> </ul> <p>Up to now, for several options, the only way to apply them to a group of path operations was in <code>include_router</code>. That works well, but the call to <code>app.include_router()</code> or <code>router.include_router()</code> is normally done in another file.</p> <p>That means that, for example, to apply authentication to all the path operations in a router it would end up being done in a different file, instead of keeping related logic together.</p> <p>Setting options in <code>include_router</code> still makes sense in some cases, for example, to override or increase configurations from a third party router included in an app. But in a router that is part of a bigger application, it would probably make more sense to add those settings when creating the <code>APIRouter</code>.</p> <p>In <code>ReadyAPI</code></p> <p>This allows setting the (mostly new) parameters (additionally to the already existing parameters):</p> <ul> <li><code>default_response_class</code>: updated to handle defaults in <code>APIRouter</code> and <code>include_router</code>.</li> <li><code>dependencies</code>: to include \u2728 top-level dependencies \u2728 that apply to the whole application. E.g. to add global authentication.</li> <li><code>callbacks</code>: OpenAPI callbacks that apply to all the path operations.</li> <li><code>deprecated</code>: to mark all the path operations as deprecated. \ud83e\udd37</li> <li><code>include_in_schema</code>: to allow excluding all the path operations from the OpenAPI schema.</li> <li><code>responses</code>: OpenAPI responses that apply to all the path operations.</li> </ul> <p>For example:</p> <pre><code>from readyapi import ReadyAPI, Depends\n\n\nasync def some_dependency():\n    return\n\n\napp = ReadyAPI(dependencies=[Depends(some_dependency)])\n</code></pre> <p>In <code>APIRouter</code></p> <p>This allows setting the (mostly new) parameters (additionally to the already existing parameters):</p> <ul> <li><code>default_response_class</code>: updated to handle defaults in <code>APIRouter</code> and <code>include_router</code>. For example, it's not needed to set it explicitly when creating callbacks.</li> <li><code>dependencies</code>: to include \u2728 router-level dependencies \u2728 that apply to all the path operations in a router. Up to now, this was only possible with <code>include_router</code>.</li> <li><code>callbacks</code>: OpenAPI callbacks that apply to all the path operations in this router.</li> <li><code>deprecated</code>: to mark all the path operations in a router as deprecated.</li> <li><code>include_in_schema</code>: to allow excluding all the path operations in a router from the OpenAPI schema.</li> <li><code>responses</code>: OpenAPI responses that apply to all the path operations in a router.</li> <li><code>prefix</code>: to set the path prefix for a router. Up to now, this was only possible when calling <code>include_router</code>.</li> <li><code>tags</code>: OpenAPI tags to apply to all the path operations in this router.</li> </ul> <p>For example:</p> <pre><code>from readyapi import APIRouter, Depends\n\n\nasync def some_dependency():\n    return\n\n\nrouter = APIRouter(prefix=\"/users\", dependencies=[Depends(some_dependency)])\n</code></pre> <p>In <code>include_router</code></p> <p>Most of these settings are now supported in <code>APIRouter</code>, which normally lives closer to the related code, so it is recommended to use <code>APIRouter</code> when possible.</p> <p>But <code>include_router</code> is still useful to, for example, adding options (like <code>dependencies</code>, <code>prefix</code>, and <code>tags</code>) when including a third party router, or a generic router that is shared between several projects.</p> <p>This PR allows setting the (mostly new) parameters (additionally to the already existing parameters):</p> <ul> <li><code>default_response_class</code>: updated to handle defaults in <code>APIRouter</code> and <code>ReadyAPI</code>.</li> <li><code>deprecated</code>: to mark all the path operations in a router as deprecated in OpenAPI.</li> <li><code>include_in_schema</code>: to allow disabling all the path operations from showing in the OpenAPI schema.</li> <li><code>callbacks</code>: OpenAPI callbacks that apply to all the path operations in this router.</li> </ul> <p>Note: all the previous parameters are still there, so it's still possible to declare <code>dependencies</code> in <code>include_router</code>.</p>"},{"location":"release-notes/#breaking-changes_6","title":"Breaking Changes","text":"<ul> <li>PR #2434 includes several improvements that shouldn't affect normal use cases, but could affect in advanced scenarios:<ul> <li>If you are testing the generated OpenAPI (you shouldn't, ReadyAPI already tests it extensively for you): the order for <code>tags</code> in <code>include_router</code> and path operations was updated for consistency, but it's a simple order change.</li> <li>If you have advanced custom logic to access each route's <code>route.response_class</code>, or the <code>router.default_response_class</code>, or the <code>app.default_response_class</code>: the default value for <code>response_class</code> in <code>APIRoute</code> and for <code>default_response_class</code> in <code>APIRouter</code> and <code>ReadyAPI</code> is now a <code>DefaultPlaceholder</code> used internally to handle and solve default values and overrides. The actual response class inside the <code>DefaultPlaceholder</code> is available at <code>route.response_class.value</code>.</li> </ul> </li> </ul>"},{"location":"release-notes/#docs_64","title":"Docs","text":"<ul> <li> <p>PR #2434 (above) includes new or updated docs:</p> <ul> <li>Advanced User Guide - OpenAPI Callbacks.</li> <li>Tutorial - Bigger Applications.</li> <li>Tutorial - Dependencies - Dependencies in path operation decorators.</li> <li>Tutorial - Dependencies - Global Dependencies.</li> </ul> </li> <li> <p>\ud83d\udcdd Add ReadyAPI monitoring blog post to External Links. PR #2324 by @louisguitton.</p> </li> <li>\u270f\ufe0f Fix typo in Deta tutorial. PR #2320 by @khulnasoft.</li> <li>\u2728 Add Discord chat. PR #2322 by @khulnasoft.</li> <li>\ud83d\udcdd Fix image links for sponsors. PR #2304 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#translations_69","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Japanese translation for Advanced - Custom Response. PR #2193 by @Attsun1031.</li> <li>\ud83c\udf10 Add Chinese translation for Benchmarks. PR #2119 by @spaceack.</li> <li>\ud83c\udf10 Add Chinese translation for Tutorial - Body - Nested Models. PR #1609 by @waynerv.</li> <li>\ud83c\udf10 Add Chinese translation for Advanced - Custom Response. PR #1459 by @RunningIkkyu.</li> <li>\ud83c\udf10 Add Chinese translation for Advanced - Return a Response Directly. PR #1452 by @RunningIkkyu.</li> <li>\ud83c\udf10 Add Chinese translation for Advanced - Additional Status Codes. PR #1451 by @RunningIkkyu.</li> <li>\ud83c\udf10 Add Chinese translation for Advanced - Path Operation Advanced Configuration. PR #1447 by @RunningIkkyu.</li> <li>\ud83c\udf10 Add Chinese translation for Advanced User Guide - Intro. PR #1445 by @RunningIkkyu.</li> </ul>"},{"location":"release-notes/#internal_82","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update TestDriven link to course in sponsors section. PR #2435 by @khulnasoft.</li> <li>\ud83c\udf71 Update sponsor logos. PR #2418 by @khulnasoft.</li> <li>\ud83d\udc9a Fix disabling install of Material for MkDocs Insiders in forks, strike 1 \u26be. PR #2340 by @khulnasoft.</li> <li>\ud83d\udc1b Fix disabling Material for MkDocs Insiders install in forks. PR #2339 by @khulnasoft.</li> <li>\u2728 Add silver sponsor WeTransfer. PR #2338 by @khulnasoft.</li> <li>\u2728 Set up and enable Material for MkDocs Insiders for the docs. PR #2325 by @khulnasoft.</li> </ul>"},{"location":"release-notes/#0612","title":"0.61.2","text":""},{"location":"release-notes/#fixes_34","title":"Fixes","text":"<ul> <li>\ud83d\udccc Relax Swagger UI version pin. PR #2089 by @jmriebold.</li> <li>\ud83d\udc1b Fix bug overriding custom HTTPException and RequestValidationError from exception_handlers. PR #1924 by @uriyyo.</li> <li>\u270f\ufe0f Fix typo on dependencies utils and cleanup unused variable. PR #1912 by @Kludex.</li> </ul>"},{"location":"release-notes/#docs_65","title":"Docs","text":"<ul> <li>\u270f\ufe0f  Fix typo in Tutorial - Path Parameters. PR #2231 by @mariacamilagl.</li> <li>\u270f Fix a stylistic error in docs. PR #2206 by @ddobrinskiy.</li> <li>\u270f Fix capitalizaiton typo in docs. PR #2204 by @imba-tjd.</li> <li>\u270f Fix typo in docs. PR #2179 by @ammarasmro.</li> <li>\ud83d\udcdd Update/fix links in docs to use HTTPS. PR #2165 by @imba-tjd.</li> <li>\u270f Fix typos and add rewording in docs. PR #2159 by @nukopy.</li> <li>\ud83d\udcdd Fix code consistency in examples for Tutorial - User Guide - Path Parameters. PR #2158 by @nukopy.</li> <li>\ud83d\udcdd Fix renamed parameter <code>content_type</code> typo. PR #2135 by @TeoZosa.</li> <li>\u270f Fix minor typos in docs. PR #2122 by @TeoZosa.</li> <li>\u270f Fix typos in docs and source examples. PR #2102 by @AdrianDeAnda.</li> <li>\u270f Fix incorrect Celery URLs in docs. PR #2100 by @CircleOnCircles.</li> <li>\ud83d\udcdd Simplify intro to Python Types, all currently supported Python versions include type hints \ud83c\udf89. PR #2085 by @ninjaaron.</li> <li>\ud83d\udcdd Fix example code with sets in Tutorial - Body - Nested Models 3. PR #2054 by @hitrust.</li> <li>\ud83d\udcdd Fix example code with sets in Tutorial - Body - Nested Models 2. PR #2053 by @hitrust.</li> <li>\ud83d\udcdd Fix example code with sets in Tutorial - Body - Nested Models. PR #2052 by @hitrust.</li> <li>\u270f Fix typo in Benchmarks. PR #1995 by @AlejoAsd.</li> <li>\ud83d\udcdd Add note in CORS tutorial about allow_origins with [\"*\"] and allow_credentials. PR #1895 by @dsmurrell.</li> <li>\ud83d\udcdd Add deployment to Deta, the first gold sponsor \ud83c\udf89. PR #2303 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #2282 by @github-actions[bot].</li> <li>\u270f\ufe0f Fix uppercase in Tutorial - Query parameters. PR #2245 by @mariacamilagl.</li> <li>\ud83d\udcdd Add articles to External Links. PR #2247 by @khulnasoft.</li> <li>\u270f Fix typo in Spanish tutorial index. PR #2020 by @aviloncho.</li> </ul>"},{"location":"release-notes/#translations_70","title":"Translations","text":"<ul> <li>\ud83c\udf10 Add Japanese translation for Advanced Tutorial - Response Directly. PR #2191 by @Attsun1031.</li> <li>\ud83d\udcdd Add Japanese translation for Tutorial - Security - First Steps. PR #2153 by @komtaki.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Query Parameters and String Validations. PR #1901 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Portuguese translation for External Links. PR #1443 by @Serrones.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - CORS. PR #2125 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Contributing. PR #2067 by @komtaki.</li> <li>\ud83c\udf10 Add Japanese translation for Project Generation. PR #2050 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Alternatives. PR #2043 by @Attsun1031.</li> <li>\ud83c\udf10 Add Japanese translation for History Design and Future. PR #2002 by @komtaki.</li> <li>\ud83c\udf10 Add Japanese translation for Benchmarks. PR #1992 by @komtaki.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Header Parameters. PR #1935 by @SwftAlpc.</li> <li>\ud83c\udf10 Add Portuguese translation for Tutorial - First Steps. PR #1861 by @jessicapaz.</li> <li>\ud83c\udf10 Add Portuguese translation for Python Types. PR #1796 by @izaguerreiro.</li> <li>\ud83c\udf10 Add Japanese translation for Help ReadyAPI. PR #1692 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Body. PR #1683 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for Tutorial - Query Params. PR #1674 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for tutorial/path-params.md. PR #1671 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for tutorial/first-steps.md. PR #1658 by @tokusumi.</li> <li>\ud83c\udf10 Add Japanese translation for tutorial/index.md. PR #1656 by @tokusumi.</li> <li>\ud83c\udf10 Add translation to Portuguese for Project Generation. PR #1602 by @Serrones.</li> <li>\ud83c\udf10 Add Japanese translation for Features. PR #1625 by @tokusumi.</li> <li>\ud83c\udf10 Initialize new language Korean for translations. PR #2018 by @hard-coders.</li> <li>\ud83c\udf10 Add Portuguese translation of Deployment. PR #1374 by @Serrones.</li> </ul>"},{"location":"release-notes/#internal_83","title":"Internal","text":"<ul> <li>\ud83d\udd25 Cleanup after upgrade for Docs Previews GitHub Action. PR #2248 by @khulnasoft.</li> <li>\ud83d\udc1b Fix CI docs preview, unzip docs. PR #2246 by @khulnasoft.</li> <li>\u2728 Add instant docs deploy previews for PRs from forks. PR #2244 by @khulnasoft.</li> <li>\u26a1\ufe0f Build docs for languages in parallel in subprocesses to speed up CI. PR #2242 by @khulnasoft.</li> <li>\ud83d\udc1b Fix docs order generation for partial translations. PR #2238 by @khulnasoft.</li> <li>\ud83d\udc65 Update ReadyAPI People. PR #2202 by @github-actions[bot].</li> <li>\u267b\ufe0f Update ReadyAPI People GitHub Action to send the PR as github-actions. PR #2201 by @khulnasoft.</li> <li>\ud83d\udd27 Update ReadyAPI People GitHub Action config, run monthly. PR #2199 by @khulnasoft.</li> <li>\ud83d\udc1b Fix ReadyAPI People GitHub Action Docker dependency, strike 1 \u26be. PR #2198 by @khulnasoft.</li> <li>\ud83d\udc1b Fix ReadyAPI People GitHub Action Docker dependencies. PR #2197 by @khulnasoft.</li> <li>\ud83d\udc1b Fix ReadyAPI People GitHub Action when there's nothing to change. PR #2196 by @khulnasoft.</li> <li>\ud83d\udc65 Add new section ReadyAPI People. PR #2195 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade GitHub Action Latest Changes. PR #2190 by @khulnasoft.</li> <li>\u2b06\ufe0f Upgrade GitHub Action Label Approved. PR #2189 by @khulnasoft.</li> <li>\ud83d\udd27 Update GitHub Action Label Approved, run at 12:00. PR #2185 by @khulnasoft.</li> <li>\ud83d\udc77 Upgrade GitHub Action Latest Changes. PR #2184 by @khulnasoft.</li> <li>\ud83d\udc77 Set GitHub Action Label Approved to run daily, not every minute. PR #2163 by @khulnasoft.</li> <li>\ud83d\udd25 Remove pr-approvals GitHub Action as it's not compatible with forks. Use the new one. PR #2162 by @khulnasoft.</li> <li>\ud83d\udc77 Add GitHub Action Latest Changes. PR #2160.</li> <li>\ud83d\udc77 Add GitHub Action Label Approved. PR #2161.</li> </ul>"},{"location":"release-notes/#0611","title":"0.61.1","text":""},{"location":"release-notes/#fixes_35","title":"Fixes","text":"<ul> <li>Fix issues using <code>jsonable_encoder</code> with SQLAlchemy models directly. PR #1987.</li> </ul>"},{"location":"release-notes/#docs_66","title":"Docs","text":"<ul> <li>Fix typo in NoSQL docs. PR #1980 by @facundojmaero.</li> </ul>"},{"location":"release-notes/#translations_71","title":"Translations","text":"<ul> <li>Add translation for main page to Japanese PR #1571 by @ryuckel.</li> <li>Initialize French translations. PR #1975 by @JulianMaurin-BM.</li> <li>Initialize Turkish translations. PR #1905 by @ycd.</li> </ul>"},{"location":"release-notes/#internal_84","title":"Internal","text":"<ul> <li>Improve docs maintainability by updating <code>hl_lines</code> syntax to use ranges. PR #1863 by @la-mar.</li> </ul>"},{"location":"release-notes/#0610","title":"0.61.0","text":""},{"location":"release-notes/#features_40","title":"Features","text":"<ul> <li>Add support for injecting <code>HTTPConnection</code> (as <code>Request</code> and <code>WebSocket</code>). Useful for sharing app state in dependencies. PR #1827 by @nsidnev.</li> <li>Export <code>WebSocketDisconnect</code> and add example handling WebSocket disconnections to docs. PR #1822 by @rkbeatss.</li> </ul>"},{"location":"release-notes/#breaking-changes_7","title":"Breaking Changes","text":"<ul> <li>Require Pydantic &gt; <code>1.0.0</code>.<ul> <li>Remove support for deprecated Pydantic <code>0.32.2</code>. This improves maintainability and allows new features.</li> <li>In <code>ReadyAPI</code> and <code>APIRouter</code>:<ul> <li>Remove path operation decorators related/deprecated parameter <code>response_model_skip_defaults</code> (use <code>response_model_exclude_unset</code> instead).</li> <li>Change path operation decorators parameter default for <code>response_model_exclude</code> from <code>set()</code> to <code>None</code> (as is in Pydantic).</li> </ul> </li> <li>In <code>encoders.jsonable_encoder</code>:<ul> <li>Remove deprecated <code>skip_defaults</code>, use instead <code>exclude_unset</code>.</li> <li>Set default of <code>exclude</code> from <code>set()</code> to <code>None</code> (as is in Pydantic).</li> </ul> </li> <li>PR #1862.</li> </ul> </li> <li>In <code>encoders.jsonable_encoder</code> remove parameter <code>sqlalchemy_safe</code>.<ul> <li>It was an early hack to allow returning SQLAlchemy models, but it was never documented, and the recommended way is using Pydantic's <code>orm_mode</code> as described in the tutorial: SQL (Relational) Databases.</li> <li>PR #1864.</li> </ul> </li> </ul>"},{"location":"release-notes/#docs_67","title":"Docs","text":"<ul> <li>Add link to the course by TestDriven.io: Test-Driven Development with ReadyAPI and Docker. PR #1860.</li> <li>Fix empty log message in docs example about handling errors. PR #1815 by @manlix.</li> <li>Reword text to reduce ambiguity while not being gender-specific. PR #1824 by @Mause.</li> </ul>"},{"location":"release-notes/#internal_85","title":"Internal","text":"<ul> <li>Add Flake8 linting. Original PR #1774 by @MashhadiNima.</li> <li>Disable Gitter bot, as it's currently broken, and Gitter's response doesn't show the problem. PR #1853.</li> </ul>"},{"location":"release-notes/#0602","title":"0.60.2","text":"<ul> <li>Fix typo in docs for query parameters. PR #1832 by @ycd.</li> <li>Add docs about Async Tests. PR #1619 by @empicano.</li> <li>Raise an exception when using form data (<code>Form</code>, <code>File</code>) without having <code>python-multipart</code> installed.<ul> <li>Up to now the application would run, and raise an exception only when receiving a request with form data, the new behavior, raising early, will prevent from deploying applications with broken dependencies.</li> <li>It also detects if the correct package <code>python-multipart</code> is installed instead of the incorrect <code>multipart</code> (both importable as <code>multipart</code>).</li> <li>PR #1851 based on original PR #1627 by @chrisngyn, @YKo20010, @kx-chen.</li> </ul> </li> <li>Re-enable Gitter releases bot. PR #1831.</li> <li>Add link to async SQL databases tutorial from main SQL tutorial. PR #1813 by @short2strings.</li> <li>Fix typo in tutorial about behind a proxy. PR #1807 by @toidi.</li> <li>Fix typo in Portuguese docs. PR #1795 by @izaguerreiro.</li> <li>Add translations setup for Ukrainian. PR #1830.</li> <li>Add external link Build And Host Fast Data Science Applications Using ReadyAPI. PR #1786 by @Kludex.</li> <li>Fix encoding of Pydantic models that inherit from others models with custom <code>json_encoders</code>. PR #1769 by @henrybetts.</li> <li>Simplify and improve <code>jsonable_encoder</code>. PR #1754 by @MashhadiNima.</li> <li>Simplify internal code syntax in several points. PR #1753 by @uriyyo.</li> <li>Improve internal typing, declare <code>Optional</code> parameters. PR #1731 by @MashhadiNima.</li> <li>Add external link Deploy ReadyAPI on Azure App Service to docs. PR #1726 by @windson.</li> <li>Add link to Starlette docs about WebSocket testing. PR #1717 by @hellocoldworld.</li> <li>Refactor generating dependant, merge for loops. PR #1714 by @Bloodielie.</li> <li>Update example for templates with Jinja to include HTML media type. PR #1690 by @frafra.</li> <li>Fix typos in docs for security. PR #1678 by @nilslindemann.</li> <li>Fix typos in docs for dependencies. PR #1675 by @nilslindemann.</li> <li>Fix type annotation for <code>**extra</code> parameters in <code>ReadyAPI</code>. PR #1659 by @bharel.</li> <li>Bump MkDocs Material to fix docs in browsers with dark mode. PR #1789 by @adriencaccia.</li> <li>Remove docs preview comment from each commit. PR #1826.</li> <li>Update GitHub context extraction for Gitter notification bot. PR #1766.</li> </ul>"},{"location":"release-notes/#0601","title":"0.60.1","text":"<ul> <li>Add debugging logs for GitHub actions to introspect GitHub hidden context. PR #1764.</li> <li>Use OS preference theme for online docs. PR #1760 by @adriencaccia.</li> <li>Upgrade Starlette to version <code>0.13.6</code> to handle a vulnerability when using static files in Windows. PR #1759 by @jamesag26.</li> <li>Pin Swagger UI temporarily, waiting for a fix for swagger-api/swagger-ui#6249. PR #1763.</li> <li>Update GitHub Actions, use commit from PR for docs preview, not commit from pre-merge. PR #1761.</li> <li>Update GitHub Actions, refactor Gitter bot. PR #1746.</li> </ul>"},{"location":"release-notes/#0600","title":"0.60.0","text":"<ul> <li>Add GitHub Action to watch for missing preview docs and trigger a preview deploy. PR #1740.</li> <li>Add custom GitHub Action to get artifact with docs preview. PR #1739.</li> <li>Add new GitHub Actions to preview docs from PRs. PR #1738.</li> <li>Add XML test coverage to support GitHub Actions. PR #1737.</li> <li>Update badges and remove Travis now that GitHub Actions is the main CI. PR #1736.</li> <li>Add GitHub Actions for CI, move from Travis. PR #1735.</li> <li>Add support for adding OpenAPI schema for GET requests with a body. PR #1626 by @victorphoenix3.</li> </ul>"},{"location":"release-notes/#0590","title":"0.59.0","text":"<ul> <li>Fix typo in docstring for OAuth2 utils. PR #1621 by @tomarv2.</li> <li>Update JWT docs to use Python-jose instead of PyJWT. Initial PR #1610 by @asheux.</li> <li>Fix/re-enable search bar in docs. PR #1703.</li> <li>Auto-generate a \"server\" in OpenAPI <code>servers</code> when there's a <code>root_path</code> instead of prefixing all the <code>paths</code>:<ul> <li>Add a new parameter for <code>ReadyAPI</code> classes: <code>root_path_in_servers</code> to disable the auto-generation of <code>servers</code>.</li> <li>New docs about <code>root_path</code> and <code>servers</code> in Additional Servers.</li> <li>Update OAuth2 examples to use a relative URL for <code>tokenUrl=\"token\"</code> to make sure those examples keep working as-is even when behind a reverse proxy.</li> <li>Initial PR #1596 by @rkbeatss.</li> </ul> </li> <li>Fix typo/link in External Links. PR #1702.</li> <li>Update handling of External Links to use a data file and allow translating the headers without becoming obsolete quickly when new links are added. PR #https://github.com/khulnasoft/readyapi/pull/1701.</li> <li>Add external link Machine learning model serving in Python using ReadyAPI and Streamlit to docs. PR #1669 by @davidefiocco.</li> <li>Add note in docs on order in Pydantic Unions. PR #1591 by @kbanc.</li> <li>Improve support for tests in editor. PR #1699.</li> <li>Pin dependencies. PR #1697.</li> <li>Update isort to version 5.x.x. PR #1670 by @asheux.</li> </ul>"},{"location":"release-notes/#0581","title":"0.58.1","text":"<ul> <li>Add link in docs to Pydantic data types. PR #1612 by @tayoogunbiyi.</li> <li>Fix link in warning logs for <code>openapi_prefix</code>. PR #1611 by @bavaria95.</li> <li>Fix bad link in docs. PR #1603 by @molto0504.</li> <li>Add Vim temporary files to <code>.gitignore</code> for contributors using Vim. PR #1590 by @asheux.</li> <li>Fix typo in docs for sub-applications. PR #1578 by @schlpbch.</li> <li>Use <code>Optional</code> in all the examples in the docs. Original PR #1574 by @chrisngyn, @kx-chen, @YKo20010. Updated and merged PR #1644.</li> <li>Update tests and handling of <code>response_model_by_alias</code>. PR #1642.</li> <li>Add translation to Chinese for Body - Fields - \u200b\u8bf7\u6c42\u200b\u4f53\u200b - \u200b\u5b57\u200b\u6bb5\u200b. PR #1569 by @waynerv.</li> <li>Update Chinese translation of main page. PR #1564 by @waynerv.</li> <li>Add translation to Chinese for Body - Multiple Parameters - \u200b\u8bf7\u6c42\u200b\u4f53\u200b - \u200b\u591a\u4e2a\u200b\u53c2\u6570\u200b. PR #1532 by @waynerv.</li> <li>Add translation to Chinese for Path Parameters and Numeric Validations - \u200b\u8def\u5f84\u200b\u53c2\u6570\u200b\u548c\u200b\u6570\u503c\u200b\u6821\u9a8c\u200b. PR #1506 by @waynerv.</li> <li>Add GitHub action to auto-label approved PRs (mainly for translations). PR #1638.</li> </ul>"},{"location":"release-notes/#0580","title":"0.58.0","text":"<ul> <li>Deep merge OpenAPI responses to preserve all the additional metadata. PR #1577.</li> <li>Mention in docs that only main app events are run (not sub-apps). PR #1554 by @amacfie.</li> <li>Fix body validation error response, do not include body variable when it is not embedded. PR #1553 by @amacfie.</li> <li>Fix testing OAuth2 security scopes when using dependency overrides. PR #1549 by @amacfie.</li> <li>Fix Model for JSON Schema keyword <code>not</code> as a JSON Schema instead of a list. PR #1548 by @v-do.</li> <li>Add support for OpenAPI <code>servers</code>. PR #1547 by @mikaello.</li> </ul>"},{"location":"release-notes/#0570","title":"0.57.0","text":"<ul> <li>Remove broken link from \"External Links\". PR #1565 by @victorphoenix3.</li> <li>Update/fix docs for WebSockets with dependencies. Original PR #1540 by @ChihSeanHsu.</li> <li>Add support for Python's <code>http.HTTPStatus</code> in <code>status_code</code> parameters. PR #1534 by @retnikt.</li> <li>When using Pydantic models with <code>__root__</code>, use the internal value in <code>jsonable_encoder</code>. PR #1524 by @patrickkwang.</li> <li>Update docs for path parameters. PR #1521 by @yankeexe.</li> <li>Update docs for first steps, links and rewording. PR #1518 by @yankeexe.</li> <li>Enable <code>showCommonExtensions</code> in Swagger UI to show additional validations like <code>maxLength</code>, etc. PR #1466 by @TiewKH.</li> <li>Make <code>OAuth2PasswordRequestFormStrict</code> importable directly from <code>readyapi.security</code>. PR #1462 by @RichardHoekstra.</li> <li>Add docs about Default response class. PR #1455 by @TezRomacH.</li> <li>Add note in docs about additional parameters <code>response_model_exclude_defaults</code> and <code>response_model_exclude_none</code> in Response Model. PR #1427 by @wshayes.</li> <li>Add note about PyCharm Pydantic plugin to docs. PR #1420 by @koxudaxi.</li> <li>Update and clarify testing function name. PR #1395 by @chenl.</li> <li>Fix duplicated headers created by indirect dependencies that use the request directly. PR #1386 by @obataku from tests by @scottsmith2gmail.</li> <li>Upgrade Starlette version to <code>0.13.4</code>. PR #1361 by @rushton.</li> <li>Improve error handling and feedback for requests with invalid JSON. PR #1354 by @aviramha.</li> <li>Add support for declaring metadata for tags in OpenAPI. New docs at Tutorial - Metadata and Docs URLs - Metadata for tags. PR #1348 by @thomas-maschler.</li> <li>Add basic setup for Russian translations. PR #1566.</li> <li>Remove obsolete Chinese articles after adding official community translations. PR #1510 by @waynerv.</li> <li>Add <code>__repr__</code> for path operation function parameter helpers (like <code>Query</code>, <code>Depends</code>, etc) to simplify debugging. PR #1560 by @rkbeatss and @victorphoenix3.</li> </ul>"},{"location":"release-notes/#0561","title":"0.56.1","text":"<ul> <li>Add link to advanced docs from tutorial. PR #1512 by @kx-chen.</li> <li>Remove internal unnecessary f-strings. PR #1526 by @kotamatsuoka.</li> <li>Add translation to Chinese for Query Parameters and String Validations - \u200b\u67e5\u8be2\u200b\u53c2\u6570\u200b\u548c\u200b\u5b57\u7b26\u4e32\u200b\u6821\u9a8c\u200b. PR #1500 by @waynerv.</li> <li>Add translation to Chinese for Request Body - \u200b\u8bf7\u6c42\u200b\u4f53\u200b. PR #1492 by @waynerv.</li> <li>Add translation to Chinese for Help ReadyAPI - Get Help - \u200b\u5e2e\u52a9\u200b ReadyAPI - \u200b\u83b7\u53d6\u200b\u5e2e\u52a9\u200b. PR #1465 by @waynerv.</li> <li>Add translation to Chinese for Query Parameters - \u200b\u67e5\u8be2\u200b\u53c2\u6570\u200b. PR #1454 by @waynerv.</li> <li>Add translation to Chinese for Contributing - \u200b\u5f00\u53d1\u200b - \u200b\u8d21\u732e\u200b. PR #1460 by @waynerv.</li> <li>Add translation to Chinese for Path Parameters - \u200b\u8def\u5f84\u200b\u53c2\u6570\u200b. PR #1453 by @waynerv.</li> <li>Add official Microsoft project generator for serving spaCy with ReadyAPI and Azure Cognitive Skills to Project Generators. PR #1390 by @kabirkhan.</li> <li>Update docs in Python Types Intro to include info about <code>Optional</code>. Original PR #1377 by @yaegassy.</li> <li>Fix support for callable class dependencies with <code>yield</code>. PR #1365 by @mrosales.</li> <li>Fix/remove incorrect error logging when a client sends invalid payloads. PR #1351 by @dbanty.</li> <li>Add translation to Chinese for First Steps - \u200b\u7b2c\u4e00\u6b65\u200b. PR #1323 by @waynerv.</li> <li>Fix generating OpenAPI for apps using callbacks with routers including Pydantic models. PR #1322 by @nsidnev.</li> <li>Optimize internal regex performance in <code>get_path_param_names()</code>. PR #1243 by @heckad.</li> <li>Remove <code>*,</code> from functions in docs where it's not needed. PR #1239 by @pankaj-giri.</li> <li>Start translations for Italian. PR #1557 by @csr.</li> </ul>"},{"location":"release-notes/#0560","title":"0.56.0","text":"<ul> <li>Add support for ASGI <code>root_path</code>:<ul> <li>Use <code>root_path</code> internally for mounted applications, so that OpenAPI and the docs UI works automatically without extra configurations and parameters.</li> <li>Add new <code>root_path</code> parameter for <code>ReadyAPI</code> applications to provide it in cases where it can be set with the command line (e.g. for Uvicorn and Hypercorn, with the parameter <code>--root-path</code>).</li> <li>Deprecate <code>openapi_prefix</code> parameter in favor of the new <code>root_path</code> parameter.</li> <li>Add new/updated docs for Sub Applications - Mounts, without <code>openapi_prefix</code> (as it is now handled automatically).</li> <li>Add new/updated docs for Behind a Proxy, including how to setup a local testing proxy with Traefik and using <code>root_path</code>.</li> <li>Update docs for Extending OpenAPI with the new <code>openapi_prefix</code> parameter passed (internally generated from <code>root_path</code>).</li> <li>Original PR #1199 by @iksteen.</li> </ul> </li> <li>Update new issue templates and docs: Help ReadyAPI - Get Help. PR #1531.</li> <li>Update GitHub action issue-manager. PR #1520.</li> <li>Add new links:<ul> <li>English articles:<ul> <li>Real-time Notifications with Python and Postgres by Guillermo Cruz.</li> <li>Microservice in Python using ReadyAPI  by Paurakh Sharma Humagain.</li> <li>Build simple API service with Python ReadyAPI \u2014 Part 1 by cuongld2.</li> <li>ReadyAPI + Zeit.co = \ud83d\ude80 by Paul Sec.</li> <li>Build a web API from scratch with ReadyAPI - the workshop by KhulnaSoft Ltd (khulnasoft).</li> <li>Build a Secure Twilio Webhook with Python and ReadyAPI  by Twilio.</li> <li>Using ReadyAPI with Django  by Stavros Korokithakis.</li> <li>Introducing Dispatch by Netflix.</li> </ul> </li> <li>Podcasts:<ul> <li>Build The Next Generation Of Python Web Applications With ReadyAPI - Episode 259 - interview to Sebast\u00edan Ram\u00edrez (khulnasoft) by Podcast.<code>__init__</code>.</li> </ul> </li> <li>Talks:<ul> <li>PyConBY 2020: Serve ML models easily with ReadyAPI by KhulnaSoft Ltd (khulnasoft).</li> <li>[VIRTUAL] Py.Amsterdam's flying Software Circus: Intro to ReadyAPI by KhulnaSoft Ltd (khulnasoft).</li> </ul> </li> <li>PR #1467.</li> </ul> </li> <li>Add translation to Chinese for Python Types Intro - Python \u200b\u7c7b\u578b\u200b\u63d0\u793a\u200b\u7b80\u4ecb\u200b. PR #1197 by @waynerv.</li> </ul>"},{"location":"release-notes/#0551","title":"0.55.1","text":"<ul> <li>Fix handling of enums with their own schema in path parameters. To support pydantic/pydantic#1432 in ReadyAPI. PR #1463.</li> </ul>"},{"location":"release-notes/#0550","title":"0.55.0","text":"<ul> <li>Allow enums to allow them to have their own schemas in OpenAPI. To support pydantic/pydantic#1432 in ReadyAPI. PR #1461.</li> <li>Add links for funding through GitHub sponsors. PR #1425.</li> <li>Update issue template for for questions. PR #1344 by @retnikt.</li> <li>Update warning about storing passwords in docs. PR #1336 by @skorokithakis.</li> <li>Fix typo. PR #1326 by @chenl.</li> <li>Add translation to Portuguese for Alternatives, Inspiration and Comparisons - Alternativas, Inspira\u00e7\u00e3o e Compara\u00e7\u00f5es. PR #1325 by @Serrones.</li> <li>Fix 2 typos in docs. PR #1324 by @waynerv.</li> <li>Update CORS docs, fix correct default of <code>max_age=600</code>. PR #1301 by @derekbekoe.</li> <li>Add translation of main page to Portuguese. PR #1300 by @Serrones.</li> <li>Re-word and clarify docs for extra info in fields. PR #1299 by @chris-allnutt.</li> <li>Make sure the <code>*</code> in short features in the docs is consistent (after <code>.</code>) in all languages. PR #1424.</li> <li>Update order of execution for <code>get_db</code> in SQLAlchemy tutorial. PR #1293 by @bcb.</li> <li>Fix typos in Async docs. PR #1423.</li> </ul>"},{"location":"release-notes/#0542","title":"0.54.2","text":"<ul> <li>Add translation to Spanish for Concurrency and async / await - Concurrencia y async / await. PR #1290 by @alvaropernas.</li> <li>Remove obsolete vote link. PR #1289 by @donhui.</li> <li>Allow disabling docs UIs by just disabling OpenAPI with <code>openapi_url=None</code>. New example in docs: Advanced: Conditional OpenAPI. PR #1421.</li> <li>Add translation to Portuguese for Benchmarks - Compara\u00e7\u00f5es. PR #1274 by @Serrones.</li> <li>Add translation to Portuguese for Tutorial - User Guide - Intro - Tutorial - Guia de Usu\u00e1rio - Introdu\u00e7\u00e3o. PR #1259 by @marcosmmb.</li> <li>Allow using Unicode in MkDocs for translations. PR #1419.</li> <li>Add translation to Spanish for Advanced User Guide - Intro - Gu\u00eda de Usuario Avanzada - Introducci\u00f3n. PR #1250 by @jfunez.</li> <li>Add translation to Portuguese for History, Design and Future - Hist\u00f3ria, Design e Futuro. PR #1249 by @marcosmmb.</li> <li>Add translation to Portuguese for Features - Recursos. PR #1248 by @marcosmmb.</li> <li>Add translation to Spanish for Tutorial - User Guide - Intro - Tutorial - Gu\u00eda de Usuario - Introducci\u00f3n. PR #1244 by @MartinEliasQ.</li> <li>Add translation to Chinese for Deployment - \u200b\u90e8\u7f72\u200b. PR #1203 by @RunningIkkyu.</li> <li>Add translation to Chinese for Tutorial - User Guide - Intro - \u200b\u6559\u7a0b\u200b - \u200b\u7528\u6237\u200b\u6307\u5357\u200b - \u200b\u7b80\u4ecb\u200b. PR #1202 by @waynerv.</li> <li>Add translation to Chinese for Features - \u200b\u7279\u6027\u200b. PR #1192 by @Dustyposa.</li> <li>Add translation for main page to Chinese PR #1191 by @waynerv.</li> <li>Update docs for project generation. PR #1287.</li> <li>Add Spanish translation for Introducci\u00f3n a los Tipos de Python (Python Types Intro). PR #1237 by @mariacamilagl.</li> <li>Add Spanish translation for Caracter\u00edsticas (Features). PR #1220 by @mariacamilagl.</li> </ul>"},{"location":"release-notes/#0541","title":"0.54.1","text":"<ul> <li>Update database test setup. PR #1226.</li> <li>Improve test debugging by showing response text in failing tests. PR #1222 by @samuelcolvin.</li> </ul>"},{"location":"release-notes/#0540","title":"0.54.0","text":"<ul> <li>Fix grammatical mistakes in async docs. PR #1188 by @mickeypash.</li> <li>Add support for <code>response_model_exclude_defaults</code> and <code>response_model_exclude_none</code>:<ul> <li>Deprecate the parameter <code>include_none</code> in <code>jsonable_encoder</code> and add the inverted <code>exclude_none</code>, to keep in sync with Pydantic.</li> <li>PR #1166 by @voegtlel.</li> </ul> </li> <li>Add example about Testing a Database. Initial PR #1144 by @duganchen.</li> <li>Update docs for Development - Contributing: Translations including note about reviewing translation PRs. #1215.</li> <li>Update log style in README.md for GitHub Markdown compatibility. PR #1200 by #geekgao.</li> <li>Add Python venv <code>env</code> to <code>.gitignore</code>. PR #1212 by @cassiobotaro.</li> <li>Start Portuguese translations. PR #1210 by @cassiobotaro.</li> <li>Update docs for Pydantic's <code>Settings</code> using a dependency with <code>@lru_cache()</code>. PR #1214.</li> <li>Add first translation to Spanish ReadyAPI. PR #1201 by @mariacamilagl.</li> <li>Add docs about Settings and Environment Variables. Initial PR 1118 by @alexmitelman.</li> </ul>"},{"location":"release-notes/#0532","title":"0.53.2","text":"<ul> <li>Fix automatic embedding of body fields for dependencies and sub-dependencies. Original PR #1079 by @Toad2186.</li> <li>Fix dependency overrides in WebSocket testing. PR #1122 by @amitlissack.</li> <li>Fix docs script to ensure languages are always sorted. PR #1189.</li> <li>Start translations for Chinese. PR #1187 by @RunningIkkyu.</li> <li>Add docs for Schema Extra - Example. PR #1185.</li> </ul>"},{"location":"release-notes/#0531","title":"0.53.1","text":"<ul> <li>Fix included example after translations refactor. PR #1182.</li> <li>Add docs example for <code>example</code> in <code>Field</code>. Docs at Body - Fields: JSON Schema extras. PR #1106 by @JohnPaton.</li> <li>Fix using recursive models in <code>response_model</code>. PR #1164 by @voegtlel.</li> <li>Add docs for Pycharm Debugging. PR #1096 by @youngquan.</li> <li>Fix typo in docs. PR #1148 by @PLNech.</li> <li>Update Windows development environment instructions. PR #1179.</li> </ul>"},{"location":"release-notes/#0530","title":"0.53.0","text":"<ul> <li>Update test coverage badge. PR #1175.</li> <li>Add <code>orjson</code> to <code>pip install readyapi[all]</code>. PR #1161 by @michael0liver.</li> <li>Fix included example for <code>GZipMiddleware</code>. PR #1138 by @arimbr.</li> <li>Fix class name in docstring for <code>OAuth2PasswordRequestFormStrict</code>. PR #1126 by @adg-mh.</li> <li>Clarify function name in example in docs. PR #1121 by @tmsick.</li> <li>Add external link Apache Kafka producer and consumer with ReadyAPI and aiokafka to docs. PR #1112 by @iwpnd.</li> <li>Fix serialization when using <code>by_alias</code> or <code>exclude_unset</code> and returning data with Pydantic models. PR #1074 by @juhovh-aiven.</li> <li>Add Gitter chat to docs. PR #1061 by @aakashnand.</li> <li>Update and simplify translations docs. PR #1171.</li> <li>Update development of ReadyAPI docs, set address to <code>127.0.0.1</code> to improve Windows support. PR #1169 by @mariacamilagl.</li> <li>Add support for docs translations. New docs: Development - Contributing: Docs: Translations. PR #1168.</li> <li>Update terminal styles in docs and add note about Cligenius, the ReadyAPI of CLIs. PR #1139.</li> </ul>"},{"location":"release-notes/#0520","title":"0.52.0","text":"<ul> <li>Add new high-performance JSON response class using <code>orjson</code>. New docs: Custom Response - HTML, Stream, File, others: <code>ORJSONResponse</code>. PR #1065.</li> </ul>"},{"location":"release-notes/#0510","title":"0.51.0","text":"<ul> <li>Re-export utils from Starlette:<ul> <li>This allows using things like <code>from readyapi.responses import JSONResponse</code> instead of <code>from starlette.responses import JSONResponse</code>.</li> <li>It's mainly syntax sugar, a convenience for developer experience.</li> <li>Now <code>Request</code>, <code>Response</code>, <code>WebSocket</code>, <code>status</code> can be imported directly from <code>readyapi</code> as in <code>from readyapi import Response</code>. This is because those are frequently used, to use the request directly, to set headers and cookies, to get status codes, etc.</li> <li>Documentation changes in many places, but new docs and noticeable improvements:<ul> <li>Custom Response - HTML, Stream, File, others.</li> <li>Advanced Middleware.</li> <li>Including WSGI - Flask, Django, others.</li> </ul> </li> <li>PR #1064.</li> </ul> </li> </ul>"},{"location":"release-notes/#0500","title":"0.50.0","text":"<ul> <li>Add link to Release Notes from docs about pinning versions for deployment. PR #1058.</li> <li>Upgrade code to use the latest version of Starlette, including:<ul> <li>Several bug fixes.</li> <li>Optional redirects of slashes, with or without ending in <code>/</code>.</li> <li>Events for routers, <code>\"startup\"</code>, and <code>\"shutdown\"</code>.</li> <li>PR #1057.</li> </ul> </li> <li>Add docs about pinning ReadyAPI versions for deployment: Deployment: ReadyAPI versions. PR #1056.</li> </ul>"},{"location":"release-notes/#0492","title":"0.49.2","text":"<ul> <li>Fix links in release notes. PR #1052 by @sattosan.</li> <li>Fix typo in release notes. PR #1051 by @sattosan.</li> <li>Refactor/clarify <code>serialize_response</code> parameter name to avoid confusion. PR #1031 by @patrickmckenna.</li> <li>Refactor calling each a path operation's handler function in an isolated function, to simplify profiling. PR #1027 by @sm-Fifteen.</li> <li>Add missing dependencies for testing. PR #1026 by @sm-Fifteen.</li> <li>Fix accepting valid types for response models, including Python types like <code>List[int]</code>. PR #1017 by @patrickmckenna.</li> <li>Fix format in SQL tutorial. PR #1015 by @vegarsti.</li> </ul>"},{"location":"release-notes/#0491","title":"0.49.1","text":"<ul> <li>Fix path operation duplicated parameters when used in dependencies and the path operation function. PR #994 by @merowinger92.</li> <li>Update Netlify previews deployment GitHub action as the fix is already merged and there's a new release. PR #1047.</li> <li>Move mypy configurations to config file. PR #987 by @hukkinj1.</li> <li>Temporary fix to Netlify previews not deployable from PRs from forks. PR #1046 by @mariacamilagl.</li> </ul>"},{"location":"release-notes/#0490","title":"0.49.0","text":"<ul> <li>Fix encoding of <code>pathlib</code> paths in <code>jsonable_encoder</code>. PR #978 by @patrickmckenna.</li> <li>Add articles to External Links: Python\u306eWeb framework\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u200b\u6bd4\u8f03\u200b (Django, Flask, responder, ReadyAPI, japronto) and [ReadyAPI] Python\u200b\u88fd\u200b\u306eASGI Web \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af ReadyAPI\u306b\u200b\u5165\u9580\u200b\u3059\u308b. PR #974 by @tokusumi.</li> <li>Fix broken links in docs. PR #949 by @tsotnikov.</li> <li>Fix small typos. PR #941 by @NikitaKolesov.</li> <li>Update and clarify docs for dependencies with <code>yield</code>. PR #986.</li> <li>Add Mermaid JS support for diagrams in docs. Add first diagrams to Dependencies: First Steps and Dependencies with <code>yield</code> and <code>HTTPException</code>. PR #985.</li> <li>Update CI to run docs deployment in GitHub actions. PR #983.</li> <li>Allow <code>callable</code>s in path operation functions, like functions modified with <code>functools.partial</code>. PR #977.</li> </ul>"},{"location":"release-notes/#0480","title":"0.48.0","text":"<ul> <li>Run linters first in tests to error out faster. PR #948.</li> <li>Log warning about <code>email-validator</code> only when used. PR #946.</li> <li>Simplify Peewee docs with double dependency with <code>yield</code>. PR #947.</li> <li>Add article External Links: Create and Deploy ReadyAPI app to Heroku. PR #942 by @windson.</li> <li>Update description of Sanic, as it is now ASGI too. PR #932 by @raphaelauv.</li> <li>Fix typo in main page. PR #920 by @mMarzeta.</li> <li>Fix parsing of possibly invalid bodies. PR #918 by @dmontagu.</li> <li>Fix typo #916 by @adursun.</li> <li>Allow <code>Any</code> type for enums in OpenAPI. PR #906 by @songzhi.</li> <li>Add article to External Links: How to continuously deploy a ReadyAPI to AWS Lambda with AWS SAM. PR #901 by @iwpnd.</li> <li>Add note about using Body parameters without Pydantic. PR #900 by @pawamoy.</li> <li>Fix Pydantic field clone logic. PR #899 by @deuce2367.</li> <li>Fix link in middleware docs. PR #893 by @linchiwei123.</li> <li>Rename default API title from \"Fast API\" to \"ReadyAPI\" for consistency. PR #890.</li> </ul>"},{"location":"release-notes/#0471","title":"0.47.1","text":"<ul> <li>Fix model filtering in <code>response_model</code>, cloning sub-models. PR #889.</li> <li>Fix ReadyAPI serialization of Pydantic models using ORM mode blocking the event loop. PR #888.</li> </ul>"},{"location":"release-notes/#0470","title":"0.47.0","text":"<ul> <li>Refactor documentation to make a simpler and shorter Tutorial - User Guide and an additional Advanced User Guide with all the additional docs. PR #887.</li> <li>Tweak external links, Markdown format, typos. PR #881.</li> <li>Fix bug in tutorial handling HTTP Basic Auth <code>username</code> and <code>password</code>. PR #865 by @isaevpd.</li> <li>Fix handling form path operation parameters declared with pure classes like <code>list</code>, <code>tuple</code>, etc. PR #856 by @nsidnev.</li> <li>Add request <code>body</code> to <code>RequestValidationError</code>, new docs: Use the <code>RequestValidationError</code> body. Initial PR #853 by @aviramha.</li> <li>Update External Links with new links and dynamic GitHub projects with <code>readyapi</code> topic. PR #850.</li> <li>Fix Peewee <code>contextvars</code> handling in docs: SQL (Relational) Databases with Peewee. PR #879.</li> <li>Setup development environment with Python's Venv and Flit, instead of requiring the extra Pipenv duplicating dependencies. Updated docs: Development - Contributing. PR #877.</li> <li>Update docs for HTTP Basic Auth to improve security against timing attacks. Initial PR #807 by @zwass.</li> </ul>"},{"location":"release-notes/#0460","title":"0.46.0","text":"<ul> <li>Fix typos and tweak configs. PR #837.</li> <li>Add link to Chinese article in External Links. PR 810 by @wxq0309.</li> <li>Implement <code>OAuth2AuthorizationCodeBearer</code> class. PR #797 by @kuwv.</li> <li>Update example upgrade in docs main page. PR #795 by @cdeil.</li> <li>Fix callback handling for sub-routers. PR #792 by @jekirl.</li> <li>Fix typos. PR #784 by @kkinder.</li> <li>Add 4 Japanese articles to External Links. PR #783 by @HymanZHAN.</li> <li>Add support for subtypes of main types in <code>jsonable_encoder</code>, e.g. asyncpg's UUIDs. PR #756 by @RmStorm.</li> <li>Fix usage of Pydantic's <code>HttpUrl</code> in docs. PR #832 by @Dustyposa.</li> <li>Fix Twitter links in docs. PR #813 by @justindujardin.</li> <li>Add docs for correctly using ReadyAPI with Peewee ORM. Including how to overwrite parts of Peewee to correctly handle async threads. PR #789.</li> </ul>"},{"location":"release-notes/#0450","title":"0.45.0","text":"<ul> <li>Add support for OpenAPI Callbacks:<ul> <li>New docs: OpenAPI Callbacks.</li> <li>Refactor generation of <code>operationId</code>s to be valid Python names (also valid variables in most languages).</li> <li>Add <code>default_response_class</code> parameter to <code>APIRouter</code>.</li> <li>Original PR #722 by @booooh.</li> </ul> </li> <li>Refactor logging to use the same logger everywhere, update log strings and levels. PR #781.</li> <li>Add article to External Links: \u041f\u043e\u0447\u0435\u043c\u0443 \u0412\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c ReadyAPI?. PR #766 by @prostomarkeloff.</li> <li>Remove gender bias in docs for handling errors. PR #780. Original idea in PR #761 by @classywhetten.</li> <li>Rename docs and references to <code>body-schema</code> to <code>body-fields</code> to keep in line with Pydantic. PR #746 by @prostomarkeloff.</li> </ul>"},{"location":"release-notes/#0441","title":"0.44.1","text":"<ul> <li>Add GitHub social preview images to git. PR #752.</li> <li>Update PyPI \"trove classifiers\". PR #751.</li> <li>Add full support for Python 3.8. Enable Python 3.8 in full in Travis. PR 749.</li> <li>Update \"new issue\" templates. PR #749.</li> <li>Fix serialization of errors for exotic Pydantic types. PR #748 by @dmontagu.</li> </ul>"},{"location":"release-notes/#0440","title":"0.44.0","text":"<ul> <li>Add GitHub action Issue Manager. PR #742.</li> <li>Fix typos in docs. PR 734 by @bundabrg.</li> <li>Fix usage of <code>custom_encoder</code> in <code>jsonable_encoder</code>. PR #715 by @matrixise.</li> <li>Fix invalid XML example. PR 710 by @OcasoProtal.</li> <li>Fix typos and update wording in deployment docs. PR #700 by @marier-nico.</li> <li>Add note about dependencies in <code>APIRouter</code> docs. PR #698 by @marier-nico.</li> <li>Add support for async class methods as dependencies #681 by @frankie567.</li> <li>Add ReadyAPI with Swagger UI cheatsheet to external links. PR #671 by @euri10.</li> <li>Fix typo in HTTP protocol in CORS example. PR #647 by @forestmonster.</li> <li>Add support for Pydantic versions <code>1.0.0</code> and above, with temporary (deprecated) backwards compatibility for Pydantic <code>0.32.2</code>. PR #646 by @dmontagu.</li> </ul>"},{"location":"release-notes/#0430","title":"0.43.0","text":"<ul> <li>Update docs to reduce gender bias. PR #645 by @ticosax.</li> <li>Add docs about overriding the <code>operationId</code> for all the path operations based on their function name. PR #642 by @SKalt.</li> <li>Fix validators in models generating an incorrect key order. PR #637 by @jaddison.</li> <li>Generate correct OpenAPI docs for responses with no content. PR #621 by @brotskydotcom.</li> <li>Remove <code>$</code> from Bash code blocks in docs for consistency. PR #613 by @nstapelbroek.</li> <li>Add docs for self-serving docs' (Swagger UI) static assets, e.g. to use the docs offline, or without Internet. Initial PR #557 by @svalouch.</li> <li>Fix <code>black</code> linting after upgrade. PR #682 by @frankie567.</li> </ul>"},{"location":"release-notes/#0420","title":"0.42.0","text":"<ul> <li>Add dependencies with <code>yield</code>, a.k.a. exit steps, context managers, cleanup, teardown, ...<ul> <li>This allows adding extra code after a dependency is done. It can be used, for example, to close database connections.</li> <li>Dependencies with <code>yield</code> can be normal or <code>async</code>, ReadyAPI will run normal dependencies in a threadpool.</li> <li>They can be combined with normal dependencies.</li> <li>It's possible to have arbitrary trees/levels of dependencies with <code>yield</code> and exit steps are handled in the correct order automatically.</li> <li>It works by default in Python 3.7 or above. For Python 3.6, it requires the extra backport dependencies:<ul> <li><code>async-exit-stack</code></li> <li><code>async-generator</code></li> </ul> </li> <li>New docs at Dependencies with <code>yield</code>.</li> <li>Updated database docs SQL (Relational) Databases: Main ReadyAPI app.</li> <li>PR #595.</li> </ul> </li> <li>Fix <code>sitemap.xml</code> in website. PR #598 by @samuelcolvin.</li> </ul>"},{"location":"release-notes/#0410","title":"0.41.0","text":"<ul> <li>Upgrade required Starlette to <code>0.12.9</code>, the new range is <code>&gt;=0.12.9,&lt;=0.12.9</code>.<ul> <li>Add <code>State</code> to ReadyAPI apps at <code>app.state</code>.</li> <li>PR #593.</li> </ul> </li> <li>Improve handling of custom classes for <code>Request</code>s and <code>APIRoute</code>s.<ul> <li>This helps to more easily solve use cases like:<ul> <li>Reading a body before and/or after a request (equivalent to a middleware).</li> <li>Run middleware-like code only for a subset of path operations.</li> <li>Process a request before passing it to a path operation function. E.g. decompressing, deserializing, etc.</li> <li>Processing a response after being generated by path operation functions but before returning it. E.g. adding custom headers, logging, adding extra metadata.</li> </ul> </li> <li>New docs section: Custom Request and APIRoute class.</li> <li>PR #589 by @dmontagu.</li> </ul> </li> <li>Fix preserving custom route class in routers when including other sub-routers. PR #538 by @dmontagu.</li> </ul>"},{"location":"release-notes/#0400","title":"0.40.0","text":"<ul> <li>Add notes to docs about installing <code>python-multipart</code> when using forms. PR #574 by @sliptonic.</li> <li>Generate OpenAPI schemas in alphabetical order. PR #554 by @dmontagu.</li> <li>Add support for truncating docstrings from path operation functions.<ul> <li>New docs at Advanced description from docstring.</li> <li>PR #556 by @svalouch.</li> </ul> </li> <li>Fix <code>DOCTYPE</code> in HTML files generated for Swagger UI and ReDoc. PR #537 by @Trim21.</li> <li>Fix handling <code>4XX</code> responses overriding default <code>422</code> validation error responses. PR #517 by @tsouvarev.</li> <li>Fix typo in documentation for Simple HTTP Basic Auth. PR #514 by @prostomarkeloff.</li> <li>Fix incorrect documentation example in first steps. PR #511 by @IgnatovFedor.</li> <li>Add support for Swagger UI initOauth settings with the parameter <code>swagger_ui_init_oauth</code>. PR #499 by @zamiramir.</li> </ul>"},{"location":"release-notes/#0390","title":"0.39.0","text":"<ul> <li>Allow path parameters to have default values (e.g. <code>None</code>) and discard them instead of raising an error.<ul> <li>This allows declaring a parameter like <code>user_id: str = None</code> that can be taken from a query parameter, but the same path operation can be included in a router with a path <code>/users/{user_id}</code>, in which case will be taken from the path and will be required.</li> <li>PR #464 by @jonathanunderwood.</li> </ul> </li> <li>Add support for setting a <code>default_response_class</code> in the <code>ReadyAPI</code> instance or in <code>include_router</code>. Initial PR #467 by @toppk.</li> <li>Add support for type annotations using strings and <code>from __future__ import annotations</code>. PR #451 by @dmontagu.</li> </ul>"},{"location":"release-notes/#0381","title":"0.38.1","text":"<ul> <li>Fix incorrect <code>Request</code> class import. PR #493 by @kamalgill.</li> </ul>"},{"location":"release-notes/#0380","title":"0.38.0","text":"<ul> <li>Add recent articles to External Links and recent opinions. PR #490.</li> <li>Upgrade support range for Starlette to include <code>0.12.8</code>. The new range is <code>&gt;=0.11.1,&lt;=0.12.8\"</code>. PR #477 by @dmontagu.</li> <li>Upgrade support to Pydantic version 0.32.2 and update internal code to use it (breaking change). PR #463 by @dmontagu.</li> </ul>"},{"location":"release-notes/#0370","title":"0.37.0","text":"<ul> <li>Add support for custom route classes for advanced use cases. PR #468 by @dmontagu.</li> <li>Allow disabling Google fonts in ReDoc. PR #481 by @b1-luettje.</li> <li>Fix security issue: when returning a sub-class of a response model and using <code>skip_defaults</code> it could leak information. PR #485 by @dmontagu.</li> <li>Enable tests for Python 3.8-dev. PR #465 by @Jamim.</li> <li>Add support and tests for Pydantic dataclasses in <code>response_model</code>. PR #454 by @dconathan.</li> <li>Fix typo in OAuth2 JWT tutorial. PR #447 by @pablogamboa.</li> <li>Use the <code>media_type</code> parameter in <code>Body()</code> params to set the media type in OpenAPI for <code>requestBody</code>. PR #439 by @divums.</li> <li>Add article Deploying a scikit-learn model with ONNX and ReadyAPI by Nico Axtmann. PR #438 by @naxty.</li> <li>Allow setting custom <code>422</code> (validation error) response/schema in OpenAPI.<ul> <li>And use media type from response class instead of fixed <code>application/json</code> (the default).</li> <li>PR #437 by @divums.</li> </ul> </li> <li>Fix using <code>\"default\"</code> extra response with status codes at the same time. PR #489.</li> <li>Allow additional responses to use status code ranges (like <code>5XX</code> and <code>4XX</code>) and <code>\"default\"</code>. PR #435 by @divums.</li> </ul>"},{"location":"release-notes/#0360","title":"0.36.0","text":"<ul> <li>Fix implementation for <code>skip_defaults</code> when returning a Pydantic model. PR #422 by @dmontagu.</li> <li>Fix OpenAPI generation when using the same dependency in multiple places for the same path operation. PR #417 by @dmontagu.</li> <li>Allow having empty paths in path operations used with <code>include_router</code> and a <code>prefix</code>.<ul> <li>This allows having a router for <code>/cats</code> and all its path operations, while having one of them for <code>/cats</code>.</li> <li>Now it doesn't have to be only <code>/cats/</code> (with a trailing slash).</li> <li>To use it, declare the path in the path operation as the empty string (<code>\"\"</code>).</li> <li>PR #415 by @vitalik.</li> </ul> </li> <li>Fix mypy error after merging PR #415. PR #462.</li> </ul>"},{"location":"release-notes/#0350","title":"0.35.0","text":"<ul> <li>Fix typo in routing <code>assert</code>. PR #419 by @pablogamboa.</li> <li>Fix typo in docs. PR #411 by @bronsen.</li> <li>Fix parsing a body type declared with <code>Union</code>. PR #400 by @koxudaxi.</li> </ul>"},{"location":"release-notes/#0340","title":"0.34.0","text":"<ul> <li> <p>Upgrade Starlette supported range to include the latest <code>0.12.7</code>. The new range is <code>0.11.1,&lt;=0.12.7</code>. PR #367 by @dedsm.</p> </li> <li> <p>Add test for OpenAPI schema with duplicate models from PR #333 by @dmontagu. PR #385.</p> </li> </ul>"},{"location":"release-notes/#0330","title":"0.33.0","text":"<ul> <li>Upgrade Pydantic version to <code>0.30.0</code>. PR #384 by @jekirl.</li> </ul>"},{"location":"release-notes/#0320","title":"0.32.0","text":"<ul> <li> <p>Fix typo in docs for features. PR #380 by @MartinoMensio.</p> </li> <li> <p>Fix source code <code>limit</code> for example in Query Parameters. PR #366 by @Smashman.</p> </li> <li> <p>Update wording in docs about OAuth2 scopes. PR #371 by @cjw296.</p> </li> <li> <p>Update docs for <code>Enum</code>s to inherit from <code>str</code> and improve Swagger UI rendering. PR #351.</p> </li> <li> <p>Fix regression, add Swagger UI deep linking again. PR #350.</p> </li> <li> <p>Add test for having path templates in <code>prefix</code> of <code>.include_router</code>. PR #349.</p> </li> <li> <p>Add note to docs: Include the same router multiple times with different <code>prefix</code>. PR #348.</p> </li> <li> <p>Fix OpenAPI/JSON Schema generation for two functions with the same name (in different modules) with the same composite bodies.</p> <ul> <li>Composite bodies' IDs are now based on path, not only on route name, as the auto-generated name uses the function names, that can be duplicated in different modules.</li> <li>The same new ID generation applies to response models.</li> <li>This also changes the generated title for those models.</li> <li>Only composite bodies and response models are affected because those are generated dynamically, they don't have a module (a Python file).</li> <li>This also adds the possibility of using <code>.include_router()</code> with the same <code>APIRouter</code> multiple  times, with different prefixes, e.g. <code>/api/v2</code> and <code>/api/latest</code>, and it will now work correctly.</li> <li>PR #347.</li> </ul> </li> </ul>"},{"location":"release-notes/#0310","title":"0.31.0","text":"<ul> <li>Upgrade Pydantic supported version to <code>0.29.0</code>.<ul> <li>New supported version range is <code>\"pydantic &gt;=0.28,&lt;=0.29.0\"</code>.</li> <li>This adds support for Pydantic Generic Models, kudos to @dmontagu.</li> <li>PR #344.</li> </ul> </li> </ul>"},{"location":"release-notes/#0301","title":"0.30.1","text":"<ul> <li> <p>Add section in docs about External Links and Articles. PR #341.</p> </li> <li> <p>Remove <code>Pipfile.lock</code> from the repository as it is only used by ReadyAPI contributors (developers of ReadyAPI itself). See the PR for more details. PR #340.</p> </li> <li> <p>Update section about Help ReadyAPI - Get Help. PR #339.</p> </li> <li> <p>Refine internal type declarations to improve/remove Mypy errors in users' code. PR #338.</p> </li> <li> <p>Update and clarify SQL tutorial with SQLAlchemy. PR #331 by @mariacamilagl.</p> </li> <li> <p>Add SQLite online viewers to the docs. PR #330 by @cyrilbois.</p> </li> </ul>"},{"location":"release-notes/#0300","title":"0.30.0","text":"<ul> <li> <p>Add support for Pydantic's ORM mode:</p> <ul> <li>Updated documentation about SQL with SQLAlchemy, using Pydantic models with ORM mode, SQLAlchemy models with relations, separation of files, simplification of code and other changes. New docs: SQL (Relational) Databases.</li> <li>The new support for ORM mode fixes issues/adds features related to ORMs with lazy-loading, hybrid properties, dynamic/getters (using <code>@property</code> decorators) and several other use cases.</li> <li>This applies to ORMs like SQLAlchemy, Peewee, Tortoise ORM, GINO ORM and virtually any other.</li> <li>If your path operations return an arbitrary object with attributes (e.g. <code>my_item.name</code> instead of <code>my_item[\"name\"]</code>) AND you use a <code>response_model</code>, make sure to update the Pydantic models with <code>orm_mode = True</code> as described in the docs (link above).</li> <li>New documentation about receiving plain <code>dict</code>s as request bodies: Bodies of arbitrary <code>dict</code>s.</li> <li>New documentation about returning arbitrary <code>dict</code>s in responses: Response with arbitrary <code>dict</code>.</li> <li>Technical Details:<ul> <li>When declaring a <code>response_model</code> it is used directly to generate the response content, from whatever was returned from the path operation function.</li> <li>Before this, the return content was first passed through <code>jsonable_encoder</code> to ensure it was a \"jsonable\" object, like a <code>dict</code>, instead of an arbitrary object with attributes (like an ORM model). That's why you should make sure to update your Pydantic models for objects with attributes to use <code>orm_mode = True</code>.</li> <li>If you don't have a <code>response_model</code>, the return object will still be passed through <code>jsonable_encoder</code> first.</li> <li>When a <code>response_model</code> is declared, the same <code>response_model</code> type declaration won't be used as is, it will be \"cloned\" to create an new one (a cloned Pydantic <code>Field</code> with all the submodels cloned as well).</li> <li>This avoids/fixes a potential security issue: as the returned object is passed directly to Pydantic, if the returned object was a subclass of the <code>response_model</code> (e.g. you return a <code>UserInDB</code> that inherits from <code>User</code> but contains extra fields, like <code>hashed_password</code>, and <code>User</code> is used in the <code>response_model</code>), it would still pass the validation (because <code>UserInDB</code> is a subclass of <code>User</code>) and the object would be returned as-is, including the <code>hashed_password</code>. To fix this, the declared <code>response_model</code> is cloned, if it is a Pydantic model class (or contains Pydantic model classes in it, e.g. in a <code>List[Item]</code>), the Pydantic model class(es) will be a different one (the \"cloned\" one). So, an object that is a subclass won't simply pass the validation and returned as-is, because it is no longer a sub-class of the cloned <code>response_model</code>. Instead, a new Pydantic model object will be created with the contents of the returned object. So, it will be a new object (made with the data from the returned one), and will be filtered by the cloned <code>response_model</code>, containing only the declared fields as normally.</li> </ul> </li> <li>PR #322.</li> </ul> </li> <li> <p>Remove/clean unused RegEx code in routing. PR #314 by @dmontagu.</p> </li> <li> <p>Use default response status code descriptions for additional responses. PR #313 by @duxiaoyao.</p> </li> <li> <p>Upgrade Pydantic support to <code>0.28</code>. PR #320 by @jekirl.</p> </li> </ul>"},{"location":"release-notes/#0291","title":"0.29.1","text":"<ul> <li> <p>Fix handling an empty-body request with a required body param. PR #311.</p> </li> <li> <p>Fix broken link in docs: Return a Response directly. PR #306 by @dmontagu.</p> </li> <li> <p>Fix docs discrepancy in docs for Response Model. PR #288 by @awiddersheim.</p> </li> </ul>"},{"location":"release-notes/#0290","title":"0.29.0","text":"<ul> <li>Add support for declaring a <code>Response</code> parameter:<ul> <li>This allows declaring:<ul> <li>Response Cookies.</li> <li>Response Headers.</li> <li>An HTTP Status Code different than the default: Response - Change Status Code.</li> </ul> </li> <li>All of this while still being able to return arbitrary objects (<code>dict</code>, DB model, etc).</li> <li>Update attribution to Hug, for inspiring the <code>response</code> parameter pattern.</li> <li>PR #294.</li> </ul> </li> </ul>"},{"location":"release-notes/#0280","title":"0.28.0","text":"<ul> <li> <p>Implement dependency cache per request.</p> <ul> <li>This avoids calling each dependency multiple times for the same request.</li> <li>This is useful while calling external services, performing costly computation, etc.</li> <li>This also means that if a dependency was declared as a path operation decorator dependency, possibly at the router level (with <code>.include_router()</code>) and then it is declared again in a specific path operation, the dependency will be called only once.</li> <li>The cache can be disabled per dependency declaration, using <code>use_cache=False</code> as in <code>Depends(your_dependency, use_cache=False)</code>.</li> <li>Updated docs at: Using the same dependency multiple times.</li> <li>PR #292.</li> </ul> </li> <li> <p>Implement dependency overrides for testing.</p> <ul> <li>This allows using overrides/mocks of dependencies during tests.</li> <li>New docs: Testing Dependencies with Overrides.</li> <li>PR #291.</li> </ul> </li> </ul>"},{"location":"release-notes/#0272","title":"0.27.2","text":"<ul> <li>Fix path and query parameters receiving <code>dict</code> as a valid type. It should be mapped to a body payload. PR #287. Updated docs at: Query parameter list / multiple values with defaults: Using <code>list</code>.</li> </ul>"},{"location":"release-notes/#0271","title":"0.27.1","text":"<ul> <li> <p>Fix <code>auto_error=False</code> handling in <code>HTTPBearer</code> security scheme. Do not <code>raise</code> when there's an incorrect <code>Authorization</code> header if <code>auto_error=False</code>. PR #282.</p> </li> <li> <p>Fix type declaration of <code>HTTPException</code>. PR #279.</p> </li> </ul>"},{"location":"release-notes/#0270","title":"0.27.0","text":"<ul> <li> <p>Fix broken link in docs about OAuth 2.0 with scopes. PR #275 by @dmontagu.</p> </li> <li> <p>Refactor param extraction using Pydantic <code>Field</code>:</p> <ul> <li>Large refactor, improvement, and simplification of param extraction from path operations.</li> <li>Fix/add support for list query parameters with list defaults. New documentation: Query parameter list / multiple values with defaults.</li> <li>Add support for enumerations in path operation parameters. New documentation: Path Parameters: Predefined values.</li> <li>Add support for type annotations using <code>Optional</code> as in <code>param: Optional[str] = None</code>. New documentation: Optional type declarations.</li> <li>PR #278.</li> </ul> </li> </ul>"},{"location":"release-notes/#0260","title":"0.26.0","text":"<ul> <li> <p>Separate error handling for validation errors.</p> <ul> <li>This will allow developers to customize the exception handlers.</li> <li>Document better how to handle exceptions and use error handlers.</li> <li>Include <code>RequestValidationError</code> and <code>WebSocketRequestValidationError</code> (this last one will be useful once encode/starlette#527 or equivalent is merged).</li> <li>New documentation about exceptions handlers:<ul> <li>Install custom exception handlers.</li> <li>Override the default exception handlers.</li> <li>Reuse ReadyAPI's exception handlers.</li> </ul> </li> <li>PR #273.</li> </ul> </li> <li> <p>Fix support for paths in path parameters without needing explicit <code>Path(...)</code>.</p> <ul> <li>PR #256.</li> <li>Documented in PR #272 by @wshayes.</li> <li>New documentation at: Path Parameters containing paths.</li> </ul> </li> <li> <p>Update docs for testing ReadyAPI. Include using <code>POST</code>, sending JSON, testing headers, etc. New documentation: Testing. PR #271.</p> </li> <li> <p>Fix type declaration of <code>response_model</code> to allow generic Python types as <code>List[Model]</code>. Mainly to fix <code>mypy</code> for users. PR #266.</p> </li> </ul>"},{"location":"release-notes/#0250","title":"0.25.0","text":"<ul> <li> <p>Add support for Pydantic's <code>include</code>, <code>exclude</code>, <code>by_alias</code>.</p> <ul> <li>Update documentation: Response Model.</li> <li>Add docs for: Body - updates, using Pydantic's <code>skip_defaults</code>.</li> <li>Add method consistency tests.</li> <li>PR #264.</li> </ul> </li> <li> <p>Add <code>CONTRIBUTING.md</code> file to GitHub, to help new contributors. PR #255 by @wshayes.</p> </li> <li> <p>Add support for Pydantic's <code>skip_defaults</code>:</p> <ul> <li>There's a new path operation decorator parameter <code>response_model_skip_defaults</code>.<ul> <li>The name of the parameter will most probably change in a future version to <code>response_skip_defaults</code>, <code>model_skip_defaults</code> or something similar.</li> </ul> </li> <li>New documentation section about using <code>response_model_skip_defaults</code>.</li> <li>PR #248 by @wshayes.</li> </ul> </li> </ul>"},{"location":"release-notes/#0240","title":"0.24.0","text":"<ul> <li> <p>Add support for WebSockets with dependencies and parameters.</p> <ul> <li>Support included for:<ul> <li><code>Depends</code></li> <li><code>Security</code></li> <li><code>Cookie</code></li> <li><code>Header</code></li> <li><code>Path</code></li> <li><code>Query</code></li> <li>...as these are compatible with the WebSockets protocol (e.g. <code>Body</code> is not).</li> </ul> </li> <li>Updated documentation for WebSockets.</li> <li>PR #178 by @jekirl.</li> </ul> </li> <li> <p>Upgrade the compatible version of Pydantic to <code>0.26.0</code>.</p> <ul> <li>This includes JSON Schema support for IP address and network objects, bug fixes, and other features.</li> <li>PR #247 by @euri10.</li> </ul> </li> </ul>"},{"location":"release-notes/#0230","title":"0.23.0","text":"<ul> <li> <p>Upgrade the compatible version of Starlette to <code>0.12.0</code>.</p> <ul> <li>This includes support for ASGI 3 (the latest version of the standard).</li> <li>It's now possible to use Starlette's <code>StreamingResponse</code> with iterators, like file-like objects (as those returned by <code>open()</code>).</li> <li>It's now possible to use the low level utility <code>iterate_in_threadpool</code> from <code>starlette.concurrency</code> (for advanced scenarios).</li> <li>PR #243.</li> </ul> </li> <li> <p>Add OAuth2 redirect page for Swagger UI. This allows having delegated authentication in the Swagger UI docs. For this to work, you need to add <code>{your_origin}/docs/oauth2-redirect</code> to the allowed callbacks in your OAuth2 provider (in Auth0, Facebook, Google, etc).</p> <ul> <li>For example, during development, it could be <code>http://localhost:8000/docs/oauth2-redirect</code>.</li> <li>Keep in mind that this callback URL is independent of whichever one is used by your frontend. You might also have another callback at <code>https://yourdomain.com/login/callback</code>.</li> <li>This is only to allow delegated authentication in the API docs with Swagger UI.</li> <li>PR #198 by @steinitzu.</li> </ul> </li> <li> <p>Make Swagger UI and ReDoc route handlers (path operations) be <code>async</code> functions instead of lambdas to improve performance. PR #241 by @Trim21.</p> </li> <li> <p>Make Swagger UI and ReDoc URLs parameterizable, allowing to host and serve local versions of them and have offline docs. PR #112 by @euri10.</p> </li> </ul>"},{"location":"release-notes/#0220","title":"0.22.0","text":"<ul> <li> <p>Add support for <code>dependencies</code> parameter:</p> <ul> <li>A parameter in path operation decorators, for dependencies that should be executed but the return value is not important or not used in the path operation function.</li> <li>A parameter in the <code>.include_router()</code> method of ReadyAPI applications and routers, to include dependencies that should be executed in each path operation in a router.<ul> <li>This is useful, for example, to require authentication or permissions in specific group of path operations.</li> <li>Different <code>dependencies</code> can be applied to different routers.</li> </ul> </li> <li>These <code>dependencies</code> are run before the normal parameter dependencies. And normal dependencies are run too. They can be combined.</li> <li>Dependencies declared in a router are executed first, then the ones defined in path operation decorators, and then the ones declared in normal parameters. They are all combined and executed.</li> <li>All this also supports using <code>Security</code> with <code>scopes</code> in those <code>dependencies</code> parameters, for more advanced OAuth 2.0 security scenarios with scopes.</li> <li>New documentation about dependencies in path operation decorators.</li> <li>New documentation about dependencies in the <code>include_router()</code> method.</li> <li>PR #235.</li> </ul> </li> <li> <p>Fix OpenAPI documentation of Starlette URL convertors. Specially useful when using <code>path</code> convertors, to take a whole path as a parameter, like <code>/some/url/{p:path}</code>. PR #234 by @euri10.</p> </li> <li> <p>Make default parameter utilities exported from <code>readyapi</code> be functions instead of classes (the new functions return instances of those classes). To be able to override the return types and fix <code>mypy</code> errors in ReadyAPI's users' code. Applies to <code>Path</code>, <code>Query</code>, <code>Header</code>, <code>Cookie</code>, <code>Body</code>, <code>Form</code>, <code>File</code>, <code>Depends</code>, and <code>Security</code>. PR #226 and PR #231.</p> </li> <li> <p>Separate development scripts <code>test.sh</code>, <code>lint.sh</code>, and <code>format.sh</code>. PR #232.</p> </li> <li> <p>Re-enable <code>black</code> formatting checks for Python 3.7. PR #229 by @zamiramir.</p> </li> </ul>"},{"location":"release-notes/#0210","title":"0.21.0","text":"<ul> <li> <p>On body parsing errors, raise <code>from</code> previous exception, to allow better introspection in logging code. PR #192 by @ricardomomm.</p> </li> <li> <p>Use Python logger named \"<code>readyapi</code>\" instead of root logger. PR #222 by @euri10.</p> </li> <li> <p>Upgrade Pydantic to version 0.25. PR #225 by @euri10.</p> </li> <li> <p>Fix typo in routing. PR #221 by @djlambert.</p> </li> </ul>"},{"location":"release-notes/#0201","title":"0.20.1","text":"<ul> <li> <p>Add typing information to package including file <code>py.typed</code>. PR #209 by @meadsteve.</p> </li> <li> <p>Add ReadyAPI bot for Gitter. To automatically announce new releases. PR #189.</p> </li> </ul>"},{"location":"release-notes/#0200","title":"0.20.0","text":"<ul> <li> <p>Upgrade OAuth2:</p> <ul> <li>Upgrade Password flow using Bearer tokens to use the correct HTTP status code 401 <code>UNAUTHORIZED</code>, with <code>WWW-Authenticate</code> headers.</li> <li>Update, simplify, and improve all the security docs.</li> <li>Add new <code>scope_str</code> to <code>SecurityScopes</code> and update docs: OAuth2 scopes.</li> <li>Update docs, images, tests.</li> <li>PR #188.</li> </ul> </li> <li> <p>Include Hypercorn as an alternative ASGI server in the docs. PR #187.</p> </li> <li> <p>Add docs for Static Files and Templates. PR #186.</p> </li> <li> <p>Add docs for handling Response Cookies and Response Headers. PR #185.</p> </li> <li> <p>Fix typos in docs. PR #176 by @chdsbd.</p> </li> </ul>"},{"location":"release-notes/#0190","title":"0.19.0","text":"<ul> <li> <p>Rename path operation decorator parameter <code>content_type</code> to <code>response_class</code>. PR #183.</p> </li> <li> <p>Add docs:</p> <ul> <li>How to use the <code>jsonable_encoder</code> in JSON compatible encoder.</li> <li>How to Return a Response directly.</li> <li>Update how to use a Custom Response Class.</li> <li>PR #184.</li> </ul> </li> </ul>"},{"location":"release-notes/#0180","title":"0.18.0","text":"<ul> <li> <p>Add docs for HTTP Basic Auth. PR #177.</p> </li> <li> <p>Upgrade HTTP Basic Auth handling with automatic headers (automatic browser login prompt). PR #175.</p> </li> <li> <p>Update dependencies for security. PR #174.</p> </li> <li> <p>Add docs for Middleware. PR #173.</p> </li> </ul>"},{"location":"release-notes/#0170","title":"0.17.0","text":"<ul> <li> <p>Make Flit publish from CI. PR #170.</p> </li> <li> <p>Add documentation about handling CORS (Cross-Origin Resource Sharing). PR #169.</p> </li> <li> <p>By default, encode by alias. This allows using Pydantic <code>alias</code> parameters working by default. PR #168.</p> </li> </ul>"},{"location":"release-notes/#0160","title":"0.16.0","text":"<ul> <li> <p>Upgrade path operation <code>docstring</code> parsing to support proper Markdown descriptions. New documentation at Path Operation Configuration. PR #163.</p> </li> <li> <p>Refactor internal usage of Pydantic to use correct data types. PR #164.</p> </li> <li> <p>Upgrade Pydantic to version <code>0.23</code>. PR #160 by @euri10.</p> </li> <li> <p>Fix typo in Tutorial about Extra Models. PR #159 by @danielmichaels.</p> </li> <li> <p>Fix Query Parameters URL examples in docs. PR #157 by @hayata-yamamoto.</p> </li> </ul>"},{"location":"release-notes/#0150","title":"0.15.0","text":"<ul> <li> <p>Add support for multiple file uploads (as a single form field). New docs at: Multiple file uploads. PR #158.</p> </li> <li> <p>Add docs for: Additional Status Codes. PR #156.</p> </li> </ul>"},{"location":"release-notes/#0140","title":"0.14.0","text":"<ul> <li> <p>Improve automatically generated names of path operations in OpenAPI (in API docs). A function <code>read_items</code> instead of having a generated name \"Read Items Get\" will have \"Read Items\". PR #155.</p> </li> <li> <p>Add docs for: Testing ReadyAPI. PR #151.</p> </li> <li> <p>Update <code>/docs</code> Swagger UI to enable deep linking. This allows sharing the URL pointing directly to the path operation documentation in the docs. PR #148 by @wshayes.</p> </li> <li> <p>Update development dependencies, <code>Pipfile.lock</code>. PR #150.</p> </li> <li> <p>Include Falcon and Hug in: Alternatives, Inspiration and Comparisons.</p> </li> </ul>"},{"location":"release-notes/#0130","title":"0.13.0","text":"<ul> <li>Improve/upgrade OAuth2 scopes support with <code>SecurityScopes</code>:<ul> <li><code>SecurityScopes</code> can be declared as a parameter like <code>Request</code>, to get the scopes of all super-dependencies/dependants.</li> <li>Improve <code>Security</code> handling, merging scopes when declaring <code>SecurityScopes</code>.</li> <li>Allow using <code>SecurityBase</code> (like <code>OAuth2</code>) classes with <code>Depends</code> and still document them. <code>Security</code> now is needed only to declare <code>scopes</code>.</li> <li>Updated docs about: OAuth2 with Password (and hashing), Bearer with JWT tokens.</li> <li>New docs about: OAuth2 scopes.</li> <li>PR #141.</li> </ul> </li> </ul>"},{"location":"release-notes/#0121","title":"0.12.1","text":"<ul> <li> <p>Fix bug: handling additional <code>responses</code> in <code>APIRouter.include_router()</code>. PR #140.</p> </li> <li> <p>Fix typo in SQL tutorial. PR #138 by @mostaphaRoudsari.</p> </li> <li> <p>Fix typos in section about nested models and OAuth2 with JWT. PR #127 by @mmcloud.</p> </li> </ul>"},{"location":"release-notes/#0120","title":"0.12.0","text":"<ul> <li>Add additional <code>responses</code> parameter to path operation decorators to extend responses in OpenAPI (and API docs).<ul> <li>It also allows extending existing responses generated from <code>response_model</code>, declare other media types (like images), etc.</li> <li>The new documentation is here: Additional Responses.</li> <li><code>responses</code> can also be added to <code>.include_router()</code>, the updated docs are here: Bigger Applications.</li> <li>PR #97 originally initiated by @barsi.</li> </ul> </li> <li>Update <code>scripts/test-cov-html.sh</code> to allow passing extra parameters like <code>-vv</code>, for development.</li> </ul>"},{"location":"release-notes/#0110","title":"0.11.0","text":"<ul> <li> <p>Add <code>auto_error</code> parameter to security utility functions. Allowing them to be optional. Also allowing to have multiple alternative security schemes that are then checked in a single dependency instead of each one verifying and returning the error to the client automatically when not satisfied. PR #134.</p> </li> <li> <p>Update SQL Tutorial to close database sessions even when there are exceptions. PR #89 by @alexiri.</p> </li> <li> <p>Fix duplicate dependency in <code>pyproject.toml</code>. PR #128 by @zxalif.</p> </li> </ul>"},{"location":"release-notes/#0103","title":"0.10.3","text":"<ul> <li> <p>Add Gitter chat, badge, links, etc. https://gitter.im/khulnasoft/readyapi . PR #117.</p> </li> <li> <p>Add docs about Extending OpenAPI. PR #126.</p> </li> <li> <p>Make Travis run Ubuntu Xenial (newer version) and Python 3.7 instead of Python 3.7-dev. PR #92 by @blueyed.</p> </li> <li> <p>Fix duplicated param variable creation. PR #123 by @yihuang.</p> </li> <li> <p>Add note in Response Model docs about why using a function parameter instead of a function return type annotation. PR #109 by @JHSaunders.</p> </li> <li> <p>Fix event docs (startup/shutdown) function name. PR #105 by @stratosgear.</p> </li> </ul>"},{"location":"release-notes/#0102","title":"0.10.2","text":"<ul> <li> <p>Fix OpenAPI (JSON Schema) for declarations of Python <code>Union</code> (JSON Schema <code>additionalProperties</code>). PR #121.</p> </li> <li> <p>Update Background Tasks with a note on Celery.</p> </li> <li> <p>Document response models using unions and lists, updated at: Extra Models. PR #108.</p> </li> </ul>"},{"location":"release-notes/#0101","title":"0.10.1","text":"<ul> <li>Add docs and tests for encode/databases. New docs at: Async SQL (Relational) Databases. PR #107.</li> </ul>"},{"location":"release-notes/#0100","title":"0.10.0","text":"<ul> <li> <p>Add support for Background Tasks in path operation functions and dependencies. New documentation about Background Tasks is here. PR #103.</p> </li> <li> <p>Add support for <code>.websocket_route()</code> in <code>APIRouter</code>. PR #100 by @euri10.</p> </li> <li> <p>New docs section about Events: startup - shutdown. PR #99.</p> </li> </ul>"},{"location":"release-notes/#091","title":"0.9.1","text":"<ul> <li>Document receiving Multiple values with the same query parameter and Duplicate headers. PR #95.</li> </ul>"},{"location":"release-notes/#090","title":"0.9.0","text":"<ul> <li> <p>Upgrade compatible Pydantic version to <code>0.21.0</code>. PR #90.</p> </li> <li> <p>Add documentation for: Application Configuration.</p> </li> <li> <p>Fix typo in docs. PR #76 by @matthewhegarty.</p> </li> <li> <p>Fix link in \"Deployment\" to \"Bigger Applications\".</p> </li> </ul>"},{"location":"release-notes/#080","title":"0.8.0","text":"<ul> <li> <p>Make development scripts executable. PR #76 by @euri10.</p> </li> <li> <p>Add support for adding <code>tags</code> in <code>app.include_router()</code>. PR #55 by @euri10. Documentation updated in the section: Bigger Applications.</p> </li> <li> <p>Update docs related to Uvicorn to use new <code>--reload</code> option from version <code>0.5.x</code>. PR #74.</p> </li> <li> <p>Update <code>isort</code> imports and scripts to be compatible with newer versions. PR #75.</p> </li> </ul>"},{"location":"release-notes/#071","title":"0.7.1","text":"<ul> <li> <p>Update technical details about <code>async def</code> handling with respect to previous frameworks. PR #64 by @haizaar.</p> </li> <li> <p>Add deployment documentation for Docker in Raspberry Pi and other architectures.</p> </li> <li> <p>Trigger Docker images build on Travis CI automatically. PR #65.</p> </li> </ul>"},{"location":"release-notes/#070","title":"0.7.0","text":"<ul> <li>Add support for <code>UploadFile</code> in <code>File</code> parameter annotations.<ul> <li>This includes a file-like interface.</li> <li>Here's the updated documentation for declaring <code>File</code> parameters with <code>UploadFile</code>.</li> <li>And here's the updated documentation for using <code>Form</code> parameters mixed with <code>File</code> parameters, supporting <code>bytes</code> and <code>UploadFile</code> at the same time.</li> <li>PR #63.</li> </ul> </li> </ul>"},{"location":"release-notes/#064","title":"0.6.4","text":"<ul> <li> <p>Add technical details about <code>async def</code> handling to docs. PR #61.</p> </li> <li> <p>Add docs for Debugging ReadyAPI applications in editors.</p> </li> <li> <p>Clarify Bigger Applications deployed with Docker.</p> </li> <li> <p>Fix typos in docs.</p> </li> <li> <p>Add section about History, Design and Future.</p> </li> <li> <p>Add docs for using WebSockets with ReadyAPI. PR #62.</p> </li> </ul>"},{"location":"release-notes/#063","title":"0.6.3","text":"<ul> <li>Add Favicons to docs. PR #53.</li> </ul>"},{"location":"release-notes/#062","title":"0.6.2","text":"<ul> <li> <p>Introduce new project generator based on ReadyAPI and PostgreSQL: https://github.com/khulnasoft/full-stack-readyapi-postgresql. PR #52.</p> </li> <li> <p>Update SQL tutorial with SQLAlchemy, using <code>Depends</code> to improve editor support and reduce code repetition. PR #52.</p> </li> <li> <p>Improve middleware naming in tutorial for SQL with SQLAlchemy https://readyapi.github.io/tutorial/sql-databases/.</p> </li> </ul>"},{"location":"release-notes/#061","title":"0.6.1","text":"<ul> <li>Add docs for GraphQL: https://readyapi.github.io/advanced/graphql/. PR #48.</li> </ul>"},{"location":"release-notes/#060","title":"0.6.0","text":"<ul> <li> <p>Update SQL with SQLAlchemy tutorial at https://readyapi.github.io/tutorial/sql-databases/ using the new official <code>request.state</code>. PR #45.</p> </li> <li> <p>Upgrade Starlette to version <code>0.11.1</code> and add required compatibility changes. PR #44.</p> </li> </ul>"},{"location":"release-notes/#051","title":"0.5.1","text":"<ul> <li> <p>Add section about helping and getting help with ReadyAPI.</p> </li> <li> <p>Add note about path operations order in docs.</p> </li> <li> <p>Update section about error handling with more information and make relation with Starlette error handling utilities more explicit. PR #41.</p> </li> <li> <p>Add Development - Contributing section to the docs. PR #42.</p> </li> </ul>"},{"location":"release-notes/#050","title":"0.5.0","text":"<ul> <li> <p>Add new <code>HTTPException</code> with support for custom headers. With new documentation for handling errors at: https://readyapi.github.io/tutorial/handling-errors/. PR #35.</p> </li> <li> <p>Add documentation to use Starlette <code>Request</code> object directly. Check #25 by @euri10.</p> </li> <li> <p>Add issue templates to simplify reporting bugs, getting help, etc: #34.</p> </li> <li> <p>Update example for the SQLAlchemy tutorial at https://readyapi.github.io/tutorial/sql-databases/ using middleware and database session attached to request.</p> </li> </ul>"},{"location":"release-notes/#040","title":"0.4.0","text":"<ul> <li> <p>Add <code>openapi_prefix</code>, support for reverse proxy and mounting sub-applications. See the docs at https://readyapi.github.io/advanced/sub-applications-proxy/: #26 by @kabirkhan.</p> </li> <li> <p>Update docs/tutorial for SQLAlchemy including note about DB Browser for SQLite.</p> </li> </ul>"},{"location":"release-notes/#030","title":"0.3.0","text":"<ul> <li>Fix/add SQLAlchemy support, including ORM, and update docs for SQLAlchemy: #30.</li> </ul>"},{"location":"release-notes/#021","title":"0.2.1","text":"<ul> <li>Fix <code>jsonable_encoder</code> for Pydantic models with <code>Config</code> but without <code>json_encoders</code>: #29.</li> </ul>"},{"location":"release-notes/#020","title":"0.2.0","text":"<ul> <li> <p>Fix typos in Security section: #24 by @kkinder.</p> </li> <li> <p>Add support for Pydantic custom JSON encoders: #21 by @euri10.</p> </li> </ul>"},{"location":"release-notes/#0119","title":"0.1.19","text":"<ul> <li>Upgrade Starlette version to the current latest <code>0.10.1</code>: #17 by @euri10.</li> </ul>"}]}